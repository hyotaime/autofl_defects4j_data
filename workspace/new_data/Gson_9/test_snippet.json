[
    {
        "class_name": "com.google.gson.LongSerializationPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java",
        "signature": "com.google.gson.LongSerializationPolicyTest.testDefaultLongSerialization()",
        "snippet": "  public void testDefaultLongSerialization() throws Exception {\n    JsonElement element = LongSerializationPolicy.DEFAULT.serialize(1556L);\n    assertTrue(element.isJsonPrimitive());\n    \n    JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive();\n    assertFalse(jsonPrimitive.isString());\n    assertTrue(jsonPrimitive.isNumber());\n    assertEquals(1556L, element.getAsLong());\n  }",
        "begin_line": 29,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 30,col 5)-(line 30,col 75)",
            "(line 31,col 5)-(line 31,col 42)",
            "(line 33,col 5)-(line 33,col 63)",
            "(line 34,col 5)-(line 34,col 42)",
            "(line 35,col 5)-(line 35,col 41)",
            "(line 36,col 5)-(line 36,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.LongSerializationPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java",
        "signature": "com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration()",
        "snippet": "  public void testDefaultLongSerializationIntegration() {\n    Gson gson = new GsonBuilder()\n        .setLongSerializationPolicy(LongSerializationPolicy.DEFAULT)\n        .create();\n    assertEquals(\"[1]\", gson.toJson(new long[] { 1L }, long[].class));\n    assertEquals(\"[1]\", gson.toJson(new Long[] { 1L }, Long[].class));\n  }",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 40,col 5)-(line 42,col 18)",
            "(line 43,col 5)-(line 43,col 70)",
            "(line 44,col 5)-(line 44,col 70)"
        ]
    },
    {
        "class_name": "com.google.gson.LongSerializationPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java",
        "signature": "com.google.gson.LongSerializationPolicyTest.testStringLongSerialization()",
        "snippet": "  public void testStringLongSerialization() throws Exception {\n    JsonElement element = LongSerializationPolicy.STRING.serialize(1556L);\n    assertTrue(element.isJsonPrimitive());\n\n    JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive();\n    assertFalse(jsonPrimitive.isNumber());\n    assertTrue(jsonPrimitive.isString());\n    assertEquals(\"1556\", element.getAsString());\n  }",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 48,col 74)",
            "(line 49,col 5)-(line 49,col 42)",
            "(line 51,col 5)-(line 51,col 63)",
            "(line 52,col 5)-(line 52,col 42)",
            "(line 53,col 5)-(line 53,col 41)",
            "(line 54,col 5)-(line 54,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.LongSerializationPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java",
        "signature": "com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration()",
        "snippet": "  public void testStringLongSerializationIntegration() {\n    Gson gson = new GsonBuilder()\n        .setLongSerializationPolicy(LongSerializationPolicy.STRING)\n        .create();\n    assertEquals(\"[\\\"1\\\"]\", gson.toJson(new long[] { 1L }, long[].class));\n    assertEquals(\"[\\\"1\\\"]\", gson.toJson(new Long[] { 1L }, Long[].class));\n  }",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 60,col 18)",
            "(line 61,col 5)-(line 61,col 74)",
            "(line 62,col 5)-(line 62,col 74)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonArrayTest.java",
        "signature": "com.google.gson.JsonArrayTest.testEqualsOnEmptyArray()",
        "snippet": "  public void testEqualsOnEmptyArray() {\n    MoreAsserts.assertEqualsAndHashCode(new JsonArray(), new JsonArray());\n  }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 5)-(line 29,col 74)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonArrayTest.java",
        "signature": "com.google.gson.JsonArrayTest.testEqualsNonEmptyArray()",
        "snippet": "  public void testEqualsNonEmptyArray() {\n    JsonArray a = new JsonArray();\n    JsonArray b = new JsonArray();\n\n    assertEquals(a, a);\n\n    a.add(new JsonObject());\n    assertFalse(a.equals(b));\n    assertFalse(b.equals(a));\n\n    b.add(new JsonObject());\n    MoreAsserts.assertEqualsAndHashCode(a, b);\n\n    a.add(new JsonObject());\n    assertFalse(a.equals(b));\n    assertFalse(b.equals(a));\n\n    b.add(JsonNull.INSTANCE);\n    assertFalse(a.equals(b));\n    assertFalse(b.equals(a));\n  }",
        "begin_line": 32,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 33,col 5)-(line 33,col 34)",
            "(line 34,col 5)-(line 34,col 34)",
            "(line 36,col 5)-(line 36,col 23)",
            "(line 38,col 5)-(line 38,col 28)",
            "(line 39,col 5)-(line 39,col 29)",
            "(line 40,col 5)-(line 40,col 29)",
            "(line 42,col 5)-(line 42,col 28)",
            "(line 43,col 5)-(line 43,col 46)",
            "(line 45,col 5)-(line 45,col 28)",
            "(line 46,col 5)-(line 46,col 29)",
            "(line 47,col 5)-(line 47,col 29)",
            "(line 49,col 5)-(line 49,col 29)",
            "(line 50,col 5)-(line 50,col 29)",
            "(line 51,col 5)-(line 51,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonArrayTest.java",
        "signature": "com.google.gson.JsonArrayTest.testRemove()",
        "snippet": "  public void testRemove() {\n    JsonArray array = new JsonArray();\n    try {\n      array.remove(0);\n      fail();\n    } catch (IndexOutOfBoundsException expected) {}\n    JsonPrimitive a = new JsonPrimitive(\"a\");\n    array.add(a);\n    assertTrue(array.remove(a));\n    assertFalse(array.contains(a));\n    array.add(a);\n    array.add(new JsonPrimitive(\"b\"));\n    assertEquals(\"b\", array.remove(1).getAsString());\n    assertEquals(1, array.size());\n    assertTrue(array.contains(a));\n  }",
        "begin_line": 54,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 55,col 38)",
            "(line 56,col 5)-(line 59,col 51)",
            "(line 60,col 5)-(line 60,col 45)",
            "(line 61,col 5)-(line 61,col 17)",
            "(line 62,col 5)-(line 62,col 32)",
            "(line 63,col 5)-(line 63,col 35)",
            "(line 64,col 5)-(line 64,col 17)",
            "(line 65,col 5)-(line 65,col 38)",
            "(line 66,col 5)-(line 66,col 53)",
            "(line 67,col 5)-(line 67,col 34)",
            "(line 68,col 5)-(line 68,col 34)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonArrayTest.java",
        "signature": "com.google.gson.JsonArrayTest.testSet()",
        "snippet": "  public void testSet() {\n    JsonArray array = new JsonArray();\n    try {\n      array.set(0, new JsonPrimitive(1));\n      fail();\n    } catch (IndexOutOfBoundsException expected) {}\n    JsonPrimitive a = new JsonPrimitive(\"a\");\n    array.add(a);\n    array.set(0, new JsonPrimitive(\"b\"));\n    assertEquals(\"b\", array.get(0).getAsString());\n    array.set(0, null);\n    assertNull(array.get(0));\n    array.set(0, new JsonPrimitive(\"c\"));\n    assertEquals(\"c\", array.get(0).getAsString());\n    assertEquals(1, array.size());\n  }",
        "begin_line": 71,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 38)",
            "(line 73,col 5)-(line 76,col 51)",
            "(line 77,col 5)-(line 77,col 45)",
            "(line 78,col 5)-(line 78,col 17)",
            "(line 79,col 5)-(line 79,col 41)",
            "(line 80,col 5)-(line 80,col 50)",
            "(line 81,col 5)-(line 81,col 23)",
            "(line 82,col 5)-(line 82,col 29)",
            "(line 83,col 5)-(line 83,col 41)",
            "(line 84,col 5)-(line 84,col 50)",
            "(line 85,col 5)-(line 85,col 34)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonArrayTest.java",
        "signature": "com.google.gson.JsonArrayTest.testDeepCopy()",
        "snippet": "  public void testDeepCopy() {\n    JsonArray original = new JsonArray();\n    JsonArray firstEntry = new JsonArray();\n    original.add(firstEntry);\n\n    JsonArray copy = original.deepCopy();\n    original.add(new JsonPrimitive(\"y\"));\n\n    assertEquals(1, copy.size());\n    firstEntry.add(new JsonPrimitive(\"z\"));\n\n    assertEquals(1, original.get(0).getAsJsonArray().size());\n    assertEquals(0, copy.get(0).getAsJsonArray().size());\n  }",
        "begin_line": 88,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 41)",
            "(line 90,col 5)-(line 90,col 43)",
            "(line 91,col 5)-(line 91,col 29)",
            "(line 93,col 5)-(line 93,col 41)",
            "(line 94,col 5)-(line 94,col 41)",
            "(line 96,col 5)-(line 96,col 33)",
            "(line 97,col 5)-(line 97,col 43)",
            "(line 99,col 5)-(line 99,col 61)",
            "(line 100,col 5)-(line 100,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.ParameterizedTypeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ParameterizedTypeTest.java",
        "signature": "com.google.gson.ParameterizedTypeTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    ourType = $Gson$Types.newParameterizedTypeWithOwner(null, List.class, String.class);\n  }",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 39,col 5)-(line 39,col 18)",
            "(line 40,col 5)-(line 40,col 88)"
        ]
    },
    {
        "class_name": "com.google.gson.ParameterizedTypeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ParameterizedTypeTest.java",
        "signature": "com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality()",
        "snippet": "  public void testOurTypeFunctionality() throws Exception {\n    Type parameterizedType = new TypeToken<List<String>>() {}.getType();\n    assertNull(ourType.getOwnerType());\n    assertEquals(String.class, ourType.getActualTypeArguments()[0]);\n    assertEquals(List.class, ourType.getRawType());\n    assertEquals(parameterizedType, ourType);\n    assertEquals(parameterizedType.hashCode(), ourType.hashCode());\n  }",
        "begin_line": 43,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 44,col 72)",
            "(line 45,col 5)-(line 45,col 39)",
            "(line 46,col 5)-(line 46,col 68)",
            "(line 47,col 5)-(line 47,col 51)",
            "(line 48,col 5)-(line 48,col 45)",
            "(line 49,col 5)-(line 49,col 67)"
        ]
    },
    {
        "class_name": "com.google.gson.ParameterizedTypeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ParameterizedTypeTest.java",
        "signature": "com.google.gson.ParameterizedTypeTest.testNotEquals()",
        "snippet": "  public void testNotEquals() throws Exception {\n    Type differentParameterizedType = new TypeToken<List<Integer>>() {}.getType();\n    assertFalse(differentParameterizedType.equals(ourType));\n    assertFalse(ourType.equals(differentParameterizedType));\n  }",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 53,col 5)-(line 53,col 82)",
            "(line 54,col 5)-(line 54,col 60)",
            "(line 55,col 5)-(line 55,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.testWriteMixedStreamed()",
        "snippet": "  public void testWriteMixedStreamed() throws IOException {\n    Gson gson = new Gson();\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n\n    jsonWriter.beginArray();\n    jsonWriter.setIndent(\"  \");\n    gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);\n    gson.toJson(BLACK_BMW, Car.class, jsonWriter);\n    gson.toJson(RED_MIATA, Car.class, jsonWriter);\n    jsonWriter.endArray();\n\n    assertEquals(CARS_JSON, stringWriter.toString());\n  }",
        "begin_line": 50,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 27)",
            "(line 52,col 5)-(line 52,col 51)",
            "(line 53,col 5)-(line 53,col 57)",
            "(line 55,col 5)-(line 55,col 28)",
            "(line 56,col 5)-(line 56,col 31)",
            "(line 57,col 5)-(line 57,col 53)",
            "(line 58,col 5)-(line 58,col 50)",
            "(line 59,col 5)-(line 59,col 50)",
            "(line 60,col 5)-(line 60,col 26)",
            "(line 62,col 5)-(line 62,col 53)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.testReadMixedStreamed()",
        "snippet": "  public void testReadMixedStreamed() throws IOException {\n    Gson gson = new Gson();\n    StringReader stringReader = new StringReader(CARS_JSON);\n    JsonReader jsonReader = new JsonReader(stringReader);\n\n    jsonReader.beginArray();\n    assertEquals(BLUE_MUSTANG, gson.fromJson(jsonReader, Car.class));\n    assertEquals(BLACK_BMW, gson.fromJson(jsonReader, Car.class));\n    assertEquals(RED_MIATA, gson.fromJson(jsonReader, Car.class));\n    jsonReader.endArray();\n  }",
        "begin_line": 65,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 66,col 5)-(line 66,col 27)",
            "(line 67,col 5)-(line 67,col 60)",
            "(line 68,col 5)-(line 68,col 57)",
            "(line 70,col 5)-(line 70,col 28)",
            "(line 71,col 5)-(line 71,col 69)",
            "(line 72,col 5)-(line 72,col 66)",
            "(line 73,col 5)-(line 73,col 66)",
            "(line 74,col 5)-(line 74,col 26)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.testReaderDoesNotMutateState()",
        "snippet": "  public void testReaderDoesNotMutateState() throws IOException {\n    Gson gson = new Gson();\n    JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));\n    jsonReader.beginArray();\n\n    jsonReader.setLenient(false);\n    gson.fromJson(jsonReader, Car.class);\n    assertFalse(jsonReader.isLenient());\n\n    jsonReader.setLenient(true);\n    gson.fromJson(jsonReader, Car.class);\n    assertTrue(jsonReader.isLenient());\n  }",
        "begin_line": 77,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 78,col 27)",
            "(line 79,col 5)-(line 79,col 72)",
            "(line 80,col 5)-(line 80,col 28)",
            "(line 82,col 5)-(line 82,col 33)",
            "(line 83,col 5)-(line 83,col 41)",
            "(line 84,col 5)-(line 84,col 40)",
            "(line 86,col 5)-(line 86,col 32)",
            "(line 87,col 5)-(line 87,col 41)",
            "(line 88,col 5)-(line 88,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.testWriteDoesNotMutateState()",
        "snippet": "  public void testWriteDoesNotMutateState() throws IOException {\n    Gson gson = new Gson();\n    JsonWriter jsonWriter = new JsonWriter(new StringWriter());\n    jsonWriter.beginArray();\n\n    jsonWriter.setHtmlSafe(true);\n    jsonWriter.setLenient(true);\n    gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);\n    assertTrue(jsonWriter.isHtmlSafe());\n    assertTrue(jsonWriter.isLenient());\n\n    jsonWriter.setHtmlSafe(false);\n    jsonWriter.setLenient(false);\n    gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);\n    assertFalse(jsonWriter.isHtmlSafe());\n    assertFalse(jsonWriter.isLenient());\n  }",
        "begin_line": 91,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 92,col 27)",
            "(line 93,col 5)-(line 93,col 63)",
            "(line 94,col 5)-(line 94,col 28)",
            "(line 96,col 5)-(line 96,col 33)",
            "(line 97,col 5)-(line 97,col 32)",
            "(line 98,col 5)-(line 98,col 53)",
            "(line 99,col 5)-(line 99,col 40)",
            "(line 100,col 5)-(line 100,col 39)",
            "(line 102,col 5)-(line 102,col 34)",
            "(line 103,col 5)-(line 103,col 33)",
            "(line 104,col 5)-(line 104,col 53)",
            "(line 105,col 5)-(line 105,col 41)",
            "(line 106,col 5)-(line 106,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.testReadInvalidState()",
        "snippet": "  public void testReadInvalidState() throws IOException {\n    Gson gson = new Gson();\n    JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));\n    jsonReader.beginArray();\n    jsonReader.beginObject();\n    try {\n      gson.fromJson(jsonReader, String.class);\n      fail();\n    } catch (JsonParseException expected) {\n    }\n  }",
        "begin_line": 109,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 110,col 5)-(line 110,col 27)",
            "(line 111,col 5)-(line 111,col 72)",
            "(line 112,col 5)-(line 112,col 28)",
            "(line 113,col 5)-(line 113,col 29)",
            "(line 114,col 5)-(line 118,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.testReadClosed()",
        "snippet": "  public void testReadClosed() throws IOException {\n    Gson gson = new Gson();\n    JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));\n    jsonReader.close();\n    try {\n      gson.fromJson(jsonReader, new TypeToken<List<Car>>() {}.getType());\n      fail();\n    } catch (JsonParseException expected) {\n    }\n  }",
        "begin_line": 121,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 122,col 5)-(line 122,col 27)",
            "(line 123,col 5)-(line 123,col 72)",
            "(line 124,col 5)-(line 124,col 23)",
            "(line 125,col 5)-(line 129,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.testWriteInvalidState()",
        "snippet": "  public void testWriteInvalidState() throws IOException {\n    Gson gson = new Gson();\n    JsonWriter jsonWriter = new JsonWriter(new StringWriter());\n    jsonWriter.beginObject();\n    try {\n      gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 132,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 133,col 5)-(line 133,col 27)",
            "(line 134,col 5)-(line 134,col 63)",
            "(line 135,col 5)-(line 135,col 29)",
            "(line 136,col 5)-(line 140,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.testWriteClosed()",
        "snippet": "  public void testWriteClosed() throws IOException {\n    Gson gson = new Gson();\n    JsonWriter jsonWriter = new JsonWriter(new StringWriter());\n    jsonWriter.beginArray();\n    jsonWriter.endArray();\n    jsonWriter.close();\n    try {\n      gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 143,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 144,col 5)-(line 144,col 27)",
            "(line 145,col 5)-(line 145,col 63)",
            "(line 146,col 5)-(line 146,col 28)",
            "(line 147,col 5)-(line 147,col 26)",
            "(line 148,col 5)-(line 148,col 23)",
            "(line 149,col 5)-(line 153,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.testWriteNulls()",
        "snippet": "  public void testWriteNulls() {\n    Gson gson = new Gson();\n    try {\n      gson.toJson(new JsonPrimitive(\"hello\"), (JsonWriter) null);\n      fail();\n    } catch (NullPointerException expected) {\n    }\n\n    StringWriter stringWriter = new StringWriter();\n    gson.toJson(null, new JsonWriter(stringWriter));\n    assertEquals(\"null\", stringWriter.toString());\n  }",
        "begin_line": 156,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 157,col 5)-(line 157,col 27)",
            "(line 158,col 5)-(line 162,col 5)",
            "(line 164,col 5)-(line 164,col 51)",
            "(line 165,col 5)-(line 165,col 52)",
            "(line 166,col 5)-(line 166,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.testReadNulls()",
        "snippet": "  public void testReadNulls() {\n    Gson gson = new Gson();\n    try {\n      gson.fromJson((JsonReader) null, Integer.class);\n      fail();\n    } catch (NullPointerException expected) {\n    }\n    try {\n      gson.fromJson(new JsonReader(new StringReader(\"true\")), null);\n      fail();\n    } catch (NullPointerException expected) {\n    }\n  }",
        "begin_line": 169,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 170,col 5)-(line 170,col 27)",
            "(line 171,col 5)-(line 175,col 5)",
            "(line 176,col 5)-(line 180,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.testWriteHtmlSafe()",
        "snippet": "  public void testWriteHtmlSafe() {\n    List<String> contents = Arrays.asList(\"<\", \">\", \"&\", \"=\", \"'\");\n    Type type = new TypeToken<List<String>>() {}.getType();\n\n    StringWriter writer = new StringWriter();\n    new Gson().toJson(contents, type, new JsonWriter(writer));\n    assertEquals(\"[\\\"\\\\u003c\\\",\\\"\\\\u003e\\\",\\\"\\\\u0026\\\",\\\"\\\\u003d\\\",\\\"\\\\u0027\\\"]\",\n        writer.toString());\n\n    writer = new StringWriter();\n    new GsonBuilder().disableHtmlEscaping().create()\n        .toJson(contents, type, new JsonWriter(writer));\n    assertEquals(\"[\\\"<\\\",\\\">\\\",\\\"&\\\",\\\"=\\\",\\\"'\\\"]\",\n        writer.toString());\n  }",
        "begin_line": 183,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 67)",
            "(line 185,col 5)-(line 185,col 59)",
            "(line 187,col 5)-(line 187,col 45)",
            "(line 188,col 5)-(line 188,col 62)",
            "(line 189,col 5)-(line 190,col 27)",
            "(line 192,col 5)-(line 192,col 32)",
            "(line 193,col 5)-(line 194,col 56)",
            "(line 195,col 5)-(line 196,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.testWriteLenient()",
        "snippet": "  public void testWriteLenient() {\n    List<Double> doubles = Arrays.asList(Double.NaN, Double.NEGATIVE_INFINITY,\n        Double.POSITIVE_INFINITY, -0.0d, 0.5d, 0.0d);\n    Type type = new TypeToken<List<Double>>() {}.getType();\n\n    StringWriter writer = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(writer);\n    new GsonBuilder().serializeSpecialFloatingPointValues().create()\n        .toJson(doubles, type, jsonWriter);\n    assertEquals(\"[NaN,-Infinity,Infinity,-0.0,0.5,0.0]\", writer.toString());\n\n    try {\n      new Gson().toJson(doubles, type, new JsonWriter(new StringWriter()));\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n  }",
        "begin_line": 199,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 200,col 5)-(line 201,col 53)",
            "(line 202,col 5)-(line 202,col 59)",
            "(line 204,col 5)-(line 204,col 45)",
            "(line 205,col 5)-(line 205,col 51)",
            "(line 206,col 5)-(line 207,col 43)",
            "(line 208,col 5)-(line 208,col 77)",
            "(line 210,col 5)-(line 214,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.Car.Car(java.lang.String, int)",
        "snippet": "    Car(String name, int color) {\n      this.name = name;\n      this.color = color;\n    }",
        "begin_line": 221,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 222,col 7)-(line 222,col 23)",
            "(line 223,col 7)-(line 223,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.Car.Car()",
        "snippet": "    Car() {}",
        "begin_line": 227,
        "end_line": 227,
        "comment": " used by Gson",
        "child_ranges": []
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.Car.hashCode()",
        "snippet": "    @Override public int hashCode() {\n      return name.hashCode() ^ color;\n    }",
        "begin_line": 229,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 230,col 7)-(line 230,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.MixedStreamTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MixedStreamTest.java",
        "signature": "com.google.gson.MixedStreamTest.Car.equals(java.lang.Object)",
        "snippet": "    @Override public boolean equals(Object o) {\n      return o instanceof Car\n          && ((Car) o).name.equals(name)\n          && ((Car) o).color == color;\n    }",
        "begin_line": 233,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 234,col 7)-(line 236,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonParserTest.java",
        "signature": "com.google.gson.JsonParserTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    parser = new JsonParser();\n  }",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 39,col 5)-(line 39,col 18)",
            "(line 40,col 5)-(line 40,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonParserTest.java",
        "signature": "com.google.gson.JsonParserTest.testParseInvalidJson()",
        "snippet": "  public void testParseInvalidJson() {\n    try {\n      parser.parse(\"[[]\");\n      fail();\n    } catch (JsonSyntaxException expected) { }\n  }",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 47,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonParserTest.java",
        "signature": "com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails()",
        "snippet": "  public void testParseUnquotedStringArrayFails() {\n    JsonElement element = parser.parse(\"[a,b,c]\");\n    assertEquals(\"a\", element.getAsJsonArray().get(0).getAsString());\n    assertEquals(\"b\", element.getAsJsonArray().get(1).getAsString());\n    assertEquals(\"c\", element.getAsJsonArray().get(2).getAsString());\n    assertEquals(3, element.getAsJsonArray().size());\n  }",
        "begin_line": 50,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 50)",
            "(line 52,col 5)-(line 52,col 69)",
            "(line 53,col 5)-(line 53,col 69)",
            "(line 54,col 5)-(line 54,col 69)",
            "(line 55,col 5)-(line 55,col 53)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonParserTest.java",
        "signature": "com.google.gson.JsonParserTest.testParseString()",
        "snippet": "  public void testParseString() {\n    String json = \"{a:10,b:'c'}\";\n    JsonElement e = parser.parse(json);\n    assertTrue(e.isJsonObject());\n    assertEquals(10, e.getAsJsonObject().get(\"a\").getAsInt());\n    assertEquals(\"c\", e.getAsJsonObject().get(\"b\").getAsString());\n  }",
        "begin_line": 58,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 59,col 5)-(line 59,col 33)",
            "(line 60,col 5)-(line 60,col 39)",
            "(line 61,col 5)-(line 61,col 33)",
            "(line 62,col 5)-(line 62,col 62)",
            "(line 63,col 5)-(line 63,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonParserTest.java",
        "signature": "com.google.gson.JsonParserTest.testParseEmptyString()",
        "snippet": "  public void testParseEmptyString() {\n    JsonElement e = parser.parse(\"\\\"   \\\"\");\n    assertTrue(e.isJsonPrimitive());\n    assertEquals(\"   \", e.getAsString());\n  }",
        "begin_line": 66,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 44)",
            "(line 68,col 5)-(line 68,col 36)",
            "(line 69,col 5)-(line 69,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonParserTest.java",
        "signature": "com.google.gson.JsonParserTest.testParseEmptyWhitespaceInput()",
        "snippet": "  public void testParseEmptyWhitespaceInput() {\n    JsonElement e = parser.parse(\"     \");\n    assertTrue(e.isJsonNull());\n  }",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 73,col 5)-(line 73,col 42)",
            "(line 74,col 5)-(line 74,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonParserTest.java",
        "signature": "com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails()",
        "snippet": "  public void testParseUnquotedSingleWordStringFails() {\n    assertEquals(\"Test\", parser.parse(\"Test\").getAsString());\n  }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 78,col 61)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonParserTest.java",
        "signature": "com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails()",
        "snippet": "  public void testParseUnquotedMultiWordStringFails() {\n    String unquotedSentence = \"Test is a test..blah blah\";\n    try {\n      parser.parse(unquotedSentence);\n      fail();\n    } catch (JsonSyntaxException expected) { }\n  }",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 82,col 58)",
            "(line 83,col 5)-(line 86,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonParserTest.java",
        "signature": "com.google.gson.JsonParserTest.testParseMixedArray()",
        "snippet": "  public void testParseMixedArray() {\n    String json = \"[{},13,\\\"stringValue\\\"]\";\n    JsonElement e = parser.parse(json);\n    assertTrue(e.isJsonArray());\n\n    JsonArray  array = e.getAsJsonArray();\n    assertEquals(\"{}\", array.get(0).toString());\n    assertEquals(13, array.get(1).getAsInt());\n    assertEquals(\"stringValue\", array.get(2).getAsString());\n  }",
        "begin_line": 89,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 90,col 5)-(line 90,col 44)",
            "(line 91,col 5)-(line 91,col 39)",
            "(line 92,col 5)-(line 92,col 32)",
            "(line 94,col 5)-(line 94,col 42)",
            "(line 95,col 5)-(line 95,col 48)",
            "(line 96,col 5)-(line 96,col 46)",
            "(line 97,col 5)-(line 97,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonParserTest.java",
        "signature": "com.google.gson.JsonParserTest.testParseReader()",
        "snippet": "  public void testParseReader() {\n    StringReader reader = new StringReader(\"{a:10,b:'c'}\");\n    JsonElement e = parser.parse(reader);\n    assertTrue(e.isJsonObject());\n    assertEquals(10, e.getAsJsonObject().get(\"a\").getAsInt());\n    assertEquals(\"c\", e.getAsJsonObject().get(\"b\").getAsString());\n  }",
        "begin_line": 100,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 101,col 59)",
            "(line 102,col 5)-(line 102,col 41)",
            "(line 103,col 5)-(line 103,col 33)",
            "(line 104,col 5)-(line 104,col 62)",
            "(line 105,col 5)-(line 105,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonParserTest.java",
        "signature": "com.google.gson.JsonParserTest.testReadWriteTwoObjects()",
        "snippet": "  public void testReadWriteTwoObjects() throws Exception {\n    Gson gson = new Gson();\n    CharArrayWriter writer = new CharArrayWriter();\n    BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, \"one\");\n    writer.write(gson.toJson(expectedOne).toCharArray());\n    BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, \"two\");\n    writer.write(gson.toJson(expectedTwo).toCharArray());\n    CharArrayReader reader = new CharArrayReader(writer.toCharArray());\n\n    JsonReader parser = new JsonReader(reader);\n    parser.setLenient(true);\n    JsonElement element1 = Streams.parse(parser);\n    JsonElement element2 = Streams.parse(parser);\n    BagOfPrimitives actualOne = gson.fromJson(element1, BagOfPrimitives.class);\n    assertEquals(\"one\", actualOne.stringValue);\n    BagOfPrimitives actualTwo = gson.fromJson(element2, BagOfPrimitives.class);\n    assertEquals(\"two\", actualTwo.stringValue);\n  }",
        "begin_line": 108,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 109,col 27)",
            "(line 110,col 5)-(line 110,col 51)",
            "(line 111,col 5)-(line 111,col 73)",
            "(line 112,col 5)-(line 112,col 57)",
            "(line 113,col 5)-(line 113,col 74)",
            "(line 114,col 5)-(line 114,col 57)",
            "(line 115,col 5)-(line 115,col 71)",
            "(line 117,col 5)-(line 117,col 47)",
            "(line 118,col 5)-(line 118,col 28)",
            "(line 119,col 5)-(line 119,col 49)",
            "(line 120,col 5)-(line 120,col 49)",
            "(line 121,col 5)-(line 121,col 79)",
            "(line 122,col 5)-(line 122,col 47)",
            "(line 123,col 5)-(line 123,col 79)",
            "(line 124,col 5)-(line 124,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonNullTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonNullTest.java",
        "signature": "com.google.gson.JsonNullTest.testEqualsAndHashcode()",
        "snippet": "  @SuppressWarnings(\"deprecation\")\n  public void testEqualsAndHashcode() {\n    MoreAsserts.assertEqualsAndHashCode(new JsonNull(), new JsonNull());\n    MoreAsserts.assertEqualsAndHashCode(new JsonNull(), JsonNull.INSTANCE);\n    MoreAsserts.assertEqualsAndHashCode(JsonNull.INSTANCE, JsonNull.INSTANCE);\n  }",
        "begin_line": 27,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 29,col 5)-(line 29,col 72)",
            "(line 30,col 5)-(line 30,col 75)",
            "(line 31,col 5)-(line 31,col 78)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonNullTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonNullTest.java",
        "signature": "com.google.gson.JsonNullTest.testDeepCopy()",
        "snippet": "  public void testDeepCopy() {\n    @SuppressWarnings(\"deprecation\")\n    JsonNull a = new JsonNull();\n    assertSame(JsonNull.INSTANCE, a.deepCopy());\n    assertSame(JsonNull.INSTANCE, JsonNull.INSTANCE.deepCopy());\n  }",
        "begin_line": 34,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 35,col 5)-(line 36,col 32)",
            "(line 37,col 5)-(line 37,col 48)",
            "(line 38,col 5)-(line 38,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultDateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java",
        "signature": "com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs()",
        "snippet": "  public void testFormattingInEnUs() {\n    assertFormattingAlwaysEmitsUsLocale(Locale.US);\n  }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 5)-(line 34,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultDateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java",
        "signature": "com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr()",
        "snippet": "  public void testFormattingInFr() {\n    assertFormattingAlwaysEmitsUsLocale(Locale.FRANCE);\n  }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 55)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultDateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java",
        "signature": "com.google.gson.DefaultDateTypeAdapterTest.assertFormattingAlwaysEmitsUsLocale(java.util.Locale)",
        "snippet": "  private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {\n    TimeZone defaultTimeZone = TimeZone.getDefault();\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n    Locale defaultLocale = Locale.getDefault();\n    Locale.setDefault(locale);\n    try {\n      assertFormatted(\"Jan 1, 1970 12:00:00 AM\", new DefaultDateTypeAdapter());\n      assertFormatted(\"1/1/70\", new DefaultDateTypeAdapter(DateFormat.SHORT));\n      assertFormatted(\"Jan 1, 1970\", new DefaultDateTypeAdapter(DateFormat.MEDIUM));\n      assertFormatted(\"January 1, 1970\", new DefaultDateTypeAdapter(DateFormat.LONG));\n      assertFormatted(\"1/1/70 12:00 AM\",\n          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n      assertFormatted(\"Jan 1, 1970 12:00:00 AM\",\n          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n      assertFormatted(\"January 1, 1970 12:00:00 AM UTC\",\n          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n      assertFormatted(\"Thursday, January 1, 1970 12:00:00 AM UTC\",\n          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n    } finally {\n      TimeZone.setDefault(defaultTimeZone);\n      Locale.setDefault(defaultLocale);\n    }\n  }",
        "begin_line": 41,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 42,col 53)",
            "(line 43,col 5)-(line 43,col 53)",
            "(line 44,col 5)-(line 44,col 47)",
            "(line 45,col 5)-(line 45,col 30)",
            "(line 46,col 5)-(line 62,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultDateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java",
        "signature": "com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale()",
        "snippet": "  public void testParsingDatesFormattedWithSystemLocale() {\n    TimeZone defaultTimeZone = TimeZone.getDefault();\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n    Locale defaultLocale = Locale.getDefault();\n    Locale.setDefault(Locale.FRANCE);\n    try {\n      assertParsed(\"1 janv. 1970 00:00:00\", new DefaultDateTypeAdapter());\n      assertParsed(\"01/01/70\", new DefaultDateTypeAdapter(DateFormat.SHORT));\n      assertParsed(\"1 janv. 1970\", new DefaultDateTypeAdapter(DateFormat.MEDIUM));\n      assertParsed(\"1 janvier 1970\", new DefaultDateTypeAdapter(DateFormat.LONG));\n      assertParsed(\"01/01/70 00:00\",\n          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n      assertParsed(\"1 janv. 1970 00:00:00\",\n          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n      assertParsed(\"1 janvier 1970 00:00:00 UTC\",\n          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n      assertParsed(\"jeudi 1 janvier 1970 00 h 00 UTC\",\n          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n    } finally {\n      TimeZone.setDefault(defaultTimeZone);\n      Locale.setDefault(defaultLocale);\n    }\n  }",
        "begin_line": 65,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 66,col 5)-(line 66,col 53)",
            "(line 67,col 5)-(line 67,col 53)",
            "(line 68,col 5)-(line 68,col 47)",
            "(line 69,col 5)-(line 69,col 37)",
            "(line 70,col 5)-(line 86,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultDateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java",
        "signature": "com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale()",
        "snippet": "  public void testParsingDatesFormattedWithUsLocale() {\n    TimeZone defaultTimeZone = TimeZone.getDefault();\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n    Locale defaultLocale = Locale.getDefault();\n    Locale.setDefault(Locale.US);\n    try {\n      assertParsed(\"Jan 1, 1970 0:00:00 AM\", new DefaultDateTypeAdapter());\n      assertParsed(\"1/1/70\", new DefaultDateTypeAdapter(DateFormat.SHORT));\n      assertParsed(\"Jan 1, 1970\", new DefaultDateTypeAdapter(DateFormat.MEDIUM));\n      assertParsed(\"January 1, 1970\", new DefaultDateTypeAdapter(DateFormat.LONG));\n      assertParsed(\"1/1/70 0:00 AM\",\n          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n      assertParsed(\"Jan 1, 1970 0:00:00 AM\",\n          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n      assertParsed(\"January 1, 1970 0:00:00 AM UTC\",\n          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n      assertParsed(\"Thursday, January 1, 1970 0:00:00 AM UTC\",\n          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n    } finally {\n      TimeZone.setDefault(defaultTimeZone);\n      Locale.setDefault(defaultLocale);\n    }\n  }",
        "begin_line": 89,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 90,col 5)-(line 90,col 53)",
            "(line 91,col 5)-(line 91,col 53)",
            "(line 92,col 5)-(line 92,col 47)",
            "(line 93,col 5)-(line 93,col 33)",
            "(line 94,col 5)-(line 110,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultDateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java",
        "signature": "com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone()",
        "snippet": "  public void testFormatUsesDefaultTimezone() {\n    TimeZone defaultTimeZone = TimeZone.getDefault();\n    TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\n    Locale defaultLocale = Locale.getDefault();\n    Locale.setDefault(Locale.US);\n    try {\n      assertFormatted(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter());\n      assertParsed(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter());\n    } finally {\n      TimeZone.setDefault(defaultTimeZone);\n      Locale.setDefault(defaultLocale);\n    }\n  }",
        "begin_line": 113,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 53)",
            "(line 115,col 5)-(line 115,col 69)",
            "(line 116,col 5)-(line 116,col 47)",
            "(line 117,col 5)-(line 117,col 33)",
            "(line 118,col 5)-(line 124,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultDateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java",
        "signature": "com.google.gson.DefaultDateTypeAdapterTest.testDateDeserializationISO8601()",
        "snippet": "  public void testDateDeserializationISO8601() throws Exception {\n  \tDefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter();\n    assertParsed(\"1970-01-01T00:00:00.000Z\", adapter);\n    assertParsed(\"1970-01-01T00:00Z\", adapter);\n    assertParsed(\"1970-01-01T00:00:00+00:00\", adapter);\n    assertParsed(\"1970-01-01T01:00:00+01:00\", adapter);\n    assertParsed(\"1970-01-01T01:00:00+01\", adapter);\n  }",
        "begin_line": 127,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 128,col 4)-(line 128,col 65)",
            "(line 129,col 5)-(line 129,col 54)",
            "(line 130,col 5)-(line 130,col 47)",
            "(line 131,col 5)-(line 131,col 55)",
            "(line 132,col 5)-(line 132,col 55)",
            "(line 133,col 5)-(line 133,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultDateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java",
        "signature": "com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization()",
        "snippet": "  public void testDateSerialization() throws Exception {\n    int dateStyle = DateFormat.LONG;\n    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle);\n    DateFormat formatter = DateFormat.getDateInstance(dateStyle, Locale.US);\n    Date currentDate = new Date();\n\n    String dateString = dateTypeAdapter.serialize(currentDate, Date.class, null).getAsString();\n    assertEquals(formatter.format(currentDate), dateString);\n  }",
        "begin_line": 136,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 137,col 36)",
            "(line 138,col 5)-(line 138,col 83)",
            "(line 139,col 5)-(line 139,col 76)",
            "(line 140,col 5)-(line 140,col 34)",
            "(line 142,col 5)-(line 142,col 95)",
            "(line 143,col 5)-(line 143,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultDateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java",
        "signature": "com.google.gson.DefaultDateTypeAdapterTest.testDatePattern()",
        "snippet": "  public void testDatePattern() throws Exception {\n    String pattern = \"yyyy-MM-dd\";\n    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(pattern);\n    DateFormat formatter = new SimpleDateFormat(pattern);\n    Date currentDate = new Date();\n\n    String dateString = dateTypeAdapter.serialize(currentDate, Date.class, null).getAsString();\n    assertEquals(formatter.format(currentDate), dateString);\n  }",
        "begin_line": 146,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 147,col 5)-(line 147,col 34)",
            "(line 148,col 5)-(line 148,col 81)",
            "(line 149,col 5)-(line 149,col 57)",
            "(line 150,col 5)-(line 150,col 34)",
            "(line 152,col 5)-(line 152,col 95)",
            "(line 153,col 5)-(line 153,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultDateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java",
        "signature": "com.google.gson.DefaultDateTypeAdapterTest.testInvalidDatePattern()",
        "snippet": "  public void testInvalidDatePattern() throws Exception {\n    try {\n      new DefaultDateTypeAdapter(\"I am a bad Date pattern....\");\n      fail(\"Invalid date pattern should fail.\");\n    } catch (IllegalArgumentException expected) { }\n  }",
        "begin_line": 156,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 157,col 5)-(line 160,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultDateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java",
        "signature": "com.google.gson.DefaultDateTypeAdapterTest.assertFormatted(java.lang.String, com.google.gson.DefaultDateTypeAdapter)",
        "snippet": "  private void assertFormatted(String formatted, DefaultDateTypeAdapter adapter) {\n    assertEquals(formatted, adapter.serialize(new Date(0), Date.class, null).getAsString());\n  }",
        "begin_line": 163,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 164,col 5)-(line 164,col 92)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultDateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java",
        "signature": "com.google.gson.DefaultDateTypeAdapterTest.assertParsed(java.lang.String, com.google.gson.DefaultDateTypeAdapter)",
        "snippet": "  private void assertParsed(String date, DefaultDateTypeAdapter  adapter) {\n    assertEquals(date, new Date(0), adapter.deserialize(new JsonPrimitive(date), Date.class, null));\n    assertEquals(\"ISO 8601\", new Date(0), adapter.deserialize(\n        new JsonPrimitive(\"1970-01-01T00:00:00Z\"), Date.class, null));\n  }",
        "begin_line": 167,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 168,col 5)-(line 168,col 100)",
            "(line 169,col 5)-(line 170,col 70)"
        ]
    },
    {
        "class_name": "com.google.gson.ExposeAnnotationExclusionStrategyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java",
        "signature": "com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses()",
        "snippet": "  public void testNeverSkipClasses() throws Exception {\n    assertFalse(excluder.excludeClass(MockObject.class, true));\n    assertFalse(excluder.excludeClass(MockObject.class, false));\n  }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 35,col 5)-(line 35,col 63)",
            "(line 36,col 5)-(line 36,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.ExposeAnnotationExclusionStrategyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java",
        "signature": "com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields()",
        "snippet": "  public void testSkipNonAnnotatedFields() throws Exception {\n    Field f = createFieldAttributes(\"hiddenField\");\n    assertTrue(excluder.excludeField(f, true));\n    assertTrue(excluder.excludeField(f, false));\n  }",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 40,col 5)-(line 40,col 51)",
            "(line 41,col 5)-(line 41,col 47)",
            "(line 42,col 5)-(line 42,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.ExposeAnnotationExclusionStrategyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java",
        "signature": "com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields()",
        "snippet": "  public void testSkipExplicitlySkippedFields() throws Exception {\n    Field f = createFieldAttributes(\"explicitlyHiddenField\");\n    assertTrue(excluder.excludeField(f, true));\n    assertTrue(excluder.excludeField(f, false));\n  }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 46,col 5)-(line 46,col 61)",
            "(line 47,col 5)-(line 47,col 47)",
            "(line 48,col 5)-(line 48,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.ExposeAnnotationExclusionStrategyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java",
        "signature": "com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields()",
        "snippet": "  public void testNeverSkipExposedAnnotatedFields() throws Exception {\n    Field f = createFieldAttributes(\"exposedField\");\n    assertFalse(excluder.excludeField(f, true));\n    assertFalse(excluder.excludeField(f, false));\n  }",
        "begin_line": 51,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 52)",
            "(line 53,col 5)-(line 53,col 48)",
            "(line 54,col 5)-(line 54,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.ExposeAnnotationExclusionStrategyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java",
        "signature": "com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields()",
        "snippet": "  public void testNeverSkipExplicitlyExposedAnnotatedFields() throws Exception {\n    Field f = createFieldAttributes(\"explicitlyExposedField\");\n    assertFalse(excluder.excludeField(f, true));\n    assertFalse(excluder.excludeField(f, false));\n  }",
        "begin_line": 57,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 58,col 62)",
            "(line 59,col 5)-(line 59,col 48)",
            "(line 60,col 5)-(line 60,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.ExposeAnnotationExclusionStrategyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java",
        "signature": "com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField()",
        "snippet": "  public void testDifferentSerializeAndDeserializeField() throws Exception {\n    Field f = createFieldAttributes(\"explicitlyDifferentModeField\");\n    assertFalse(excluder.excludeField(f, true));\n    assertTrue(excluder.excludeField(f, false));\n  }",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 64,col 68)",
            "(line 65,col 5)-(line 65,col 48)",
            "(line 66,col 5)-(line 66,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.ExposeAnnotationExclusionStrategyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java",
        "signature": "com.google.gson.ExposeAnnotationExclusionStrategyTest.createFieldAttributes(java.lang.String)",
        "snippet": "  private static Field createFieldAttributes(String fieldName) throws Exception {\n    return MockObject.class.getField(fieldName);\n  }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 5)-(line 70,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultMapJsonSerializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java",
        "signature": "com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization()",
        "snippet": "  public void testEmptyMapNoTypeSerialization() {\n    Map<String, String> emptyMap = new HashMap<String, String>();\n    JsonElement element = gson.toJsonTree(emptyMap, emptyMap.getClass());\n    assertTrue(element instanceof JsonObject);\n    JsonObject emptyMapJsonObject = (JsonObject) element;\n    assertTrue(emptyMapJsonObject.entrySet().isEmpty());\n  }",
        "begin_line": 34,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 35,col 5)-(line 35,col 65)",
            "(line 36,col 5)-(line 36,col 73)",
            "(line 37,col 5)-(line 37,col 46)",
            "(line 38,col 5)-(line 38,col 57)",
            "(line 39,col 5)-(line 39,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultMapJsonSerializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java",
        "signature": "com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization()",
        "snippet": "  public void testEmptyMapSerialization() {\n    Type mapType = new TypeToken<Map<String, String>>() { }.getType();\n    Map<String, String> emptyMap = new HashMap<String, String>();\n    JsonElement element = gson.toJsonTree(emptyMap, mapType);\n\n    assertTrue(element instanceof JsonObject);\n    JsonObject emptyMapJsonObject = (JsonObject) element;\n    assertTrue(emptyMapJsonObject.entrySet().isEmpty());\n  }",
        "begin_line": 42,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 70)",
            "(line 44,col 5)-(line 44,col 65)",
            "(line 45,col 5)-(line 45,col 61)",
            "(line 47,col 5)-(line 47,col 46)",
            "(line 48,col 5)-(line 48,col 57)",
            "(line 49,col 5)-(line 49,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultMapJsonSerializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java",
        "signature": "com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization()",
        "snippet": "  public void testNonEmptyMapSerialization() {\n    Type mapType = new TypeToken<Map<String, String>>() { }.getType();\n    Map<String, String> myMap = new HashMap<String, String>();\n    String key = \"key1\";\n    myMap.put(key, \"value1\");\n    Gson gson = new Gson();\n    JsonElement element = gson.toJsonTree(myMap, mapType);\n\n    assertTrue(element.isJsonObject());\n    JsonObject mapJsonObject = element.getAsJsonObject();\n    assertTrue(mapJsonObject.has(key));\n  }",
        "begin_line": 52,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 53,col 5)-(line 53,col 70)",
            "(line 54,col 5)-(line 54,col 62)",
            "(line 55,col 5)-(line 55,col 24)",
            "(line 56,col 5)-(line 56,col 29)",
            "(line 57,col 5)-(line 57,col 27)",
            "(line 58,col 5)-(line 58,col 58)",
            "(line 60,col 5)-(line 60,col 39)",
            "(line 61,col 5)-(line 61,col 57)",
            "(line 62,col 5)-(line 62,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultInetAddressTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java",
        "signature": "com.google.gson.DefaultInetAddressTypeAdapterTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 31,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 33,col 5)-(line 33,col 18)",
            "(line 34,col 5)-(line 34,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.DefaultInetAddressTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java",
        "signature": "com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization()",
        "snippet": "  public void testInetAddressSerializationAndDeserialization() throws Exception {\n    InetAddress address = InetAddress.getByName(\"8.8.8.8\");\n    String jsonAddress = gson.toJson(address);\n    assertEquals(\"\\\"8.8.8.8\\\"\", jsonAddress);\n    \n    InetAddress value = gson.fromJson(jsonAddress, InetAddress.class);\n    assertEquals(value, address);\n  } ",
        "begin_line": 37,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 59)",
            "(line 39,col 5)-(line 39,col 46)",
            "(line 40,col 5)-(line 40,col 45)",
            "(line 42,col 5)-(line 42,col 70)",
            "(line 43,col 5)-(line 43,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.GenericArrayTypeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GenericArrayTypeTest.java",
        "signature": "com.google.gson.GenericArrayTypeTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    ourType = $Gson$Types.arrayOf($Gson$Types.newParameterizedTypeWithOwner(null, List.class, String.class));\n  }",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 39,col 5)-(line 39,col 18)",
            "(line 40,col 5)-(line 40,col 109)"
        ]
    },
    {
        "class_name": "com.google.gson.GenericArrayTypeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GenericArrayTypeTest.java",
        "signature": "com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality()",
        "snippet": "  public void testOurTypeFunctionality() throws Exception {\n    Type parameterizedType = new TypeToken<List<String>>() {}.getType();\n    Type genericArrayType = new TypeToken<List<String>[]>() {}.getType();\n\n    assertEquals(parameterizedType, ourType.getGenericComponentType());\n    assertEquals(genericArrayType, ourType);\n    assertEquals(genericArrayType.hashCode(), ourType.hashCode());\n  }",
        "begin_line": 43,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 44,col 72)",
            "(line 45,col 5)-(line 45,col 73)",
            "(line 47,col 5)-(line 47,col 71)",
            "(line 48,col 5)-(line 48,col 44)",
            "(line 49,col 5)-(line 49,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.GenericArrayTypeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GenericArrayTypeTest.java",
        "signature": "com.google.gson.GenericArrayTypeTest.testNotEquals()",
        "snippet": "  public void testNotEquals() throws Exception {\n    Type differentGenericArrayType = new TypeToken<List<String>[][]>() {}.getType();\n    assertFalse(differentGenericArrayType.equals(ourType));\n    assertFalse(ourType.equals(differentGenericArrayType));\n  }",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 53,col 5)-(line 53,col 84)",
            "(line 54,col 5)-(line 54,col 59)",
            "(line 55,col 5)-(line 55,col 59)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonObjectTest.java",
        "signature": "com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties()",
        "snippet": "  public void testAddingAndRemovingObjectProperties() throws Exception {\n    JsonObject jsonObj = new JsonObject();\n    String propertyName = \"property\";\n    assertFalse(jsonObj.has(propertyName));\n    assertNull(jsonObj.get(propertyName));\n\n    JsonPrimitive value = new JsonPrimitive(\"blah\");\n    jsonObj.add(propertyName, value);\n    assertEquals(value, jsonObj.get(propertyName));\n\n    JsonElement removedElement = jsonObj.remove(propertyName);\n    assertEquals(value, removedElement);\n    assertFalse(jsonObj.has(propertyName));\n    assertNull(jsonObj.get(propertyName));\n  }",
        "begin_line": 30,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 31,col 5)-(line 31,col 42)",
            "(line 32,col 5)-(line 32,col 37)",
            "(line 33,col 5)-(line 33,col 43)",
            "(line 34,col 5)-(line 34,col 42)",
            "(line 36,col 5)-(line 36,col 52)",
            "(line 37,col 5)-(line 37,col 37)",
            "(line 38,col 5)-(line 38,col 51)",
            "(line 40,col 5)-(line 40,col 62)",
            "(line 41,col 5)-(line 41,col 40)",
            "(line 42,col 5)-(line 42,col 43)",
            "(line 43,col 5)-(line 43,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonObjectTest.java",
        "signature": "com.google.gson.JsonObjectTest.testAddingNullPropertyValue()",
        "snippet": "  public void testAddingNullPropertyValue() throws Exception {\n    String propertyName = \"property\";\n    JsonObject jsonObj = new JsonObject();\n    jsonObj.add(propertyName, null);\n\n    assertTrue(jsonObj.has(propertyName));\n\n    JsonElement jsonElement = jsonObj.get(propertyName);\n    assertNotNull(jsonElement);\n    assertTrue(jsonElement.isJsonNull());\n  }",
        "begin_line": 46,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 37)",
            "(line 48,col 5)-(line 48,col 42)",
            "(line 49,col 5)-(line 49,col 36)",
            "(line 51,col 5)-(line 51,col 42)",
            "(line 53,col 5)-(line 53,col 56)",
            "(line 54,col 5)-(line 54,col 31)",
            "(line 55,col 5)-(line 55,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonObjectTest.java",
        "signature": "com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName()",
        "snippet": "  public void testAddingNullOrEmptyPropertyName() throws Exception {\n    JsonObject jsonObj = new JsonObject();\n    try {\n      jsonObj.add(null, JsonNull.INSTANCE);\n      fail(\"Should not allow null property names.\");\n    } catch (NullPointerException expected) { }\n\n    jsonObj.add(\"\", JsonNull.INSTANCE);\n    jsonObj.add(\"   \\t\", JsonNull.INSTANCE);\n  }",
        "begin_line": 58,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 59,col 5)-(line 59,col 42)",
            "(line 60,col 5)-(line 63,col 47)",
            "(line 65,col 5)-(line 65,col 39)",
            "(line 66,col 5)-(line 66,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonObjectTest.java",
        "signature": "com.google.gson.JsonObjectTest.testAddingBooleanProperties()",
        "snippet": "  public void testAddingBooleanProperties() throws Exception {\n    String propertyName = \"property\";\n    JsonObject jsonObj = new JsonObject();\n    jsonObj.addProperty(propertyName, true);\n\n    assertTrue(jsonObj.has(propertyName));\n\n    JsonElement jsonElement = jsonObj.get(propertyName);\n    assertNotNull(jsonElement);\n    assertTrue(jsonElement.getAsBoolean());\n  }",
        "begin_line": 69,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 70,col 5)-(line 70,col 37)",
            "(line 71,col 5)-(line 71,col 42)",
            "(line 72,col 5)-(line 72,col 44)",
            "(line 74,col 5)-(line 74,col 42)",
            "(line 76,col 5)-(line 76,col 56)",
            "(line 77,col 5)-(line 77,col 31)",
            "(line 78,col 5)-(line 78,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonObjectTest.java",
        "signature": "com.google.gson.JsonObjectTest.testAddingStringProperties()",
        "snippet": "  public void testAddingStringProperties() throws Exception {\n    String propertyName = \"property\";\n    String value = \"blah\";\n\n    JsonObject jsonObj = new JsonObject();\n    jsonObj.addProperty(propertyName, value);\n\n    assertTrue(jsonObj.has(propertyName));\n\n    JsonElement jsonElement = jsonObj.get(propertyName);\n    assertNotNull(jsonElement);\n    assertEquals(value, jsonElement.getAsString());\n  }",
        "begin_line": 81,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 82,col 37)",
            "(line 83,col 5)-(line 83,col 26)",
            "(line 85,col 5)-(line 85,col 42)",
            "(line 86,col 5)-(line 86,col 45)",
            "(line 88,col 5)-(line 88,col 42)",
            "(line 90,col 5)-(line 90,col 56)",
            "(line 91,col 5)-(line 91,col 31)",
            "(line 92,col 5)-(line 92,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonObjectTest.java",
        "signature": "com.google.gson.JsonObjectTest.testAddingCharacterProperties()",
        "snippet": "  public void testAddingCharacterProperties() throws Exception {\n    String propertyName = \"property\";\n    char value = 'a';\n\n    JsonObject jsonObj = new JsonObject();\n    jsonObj.addProperty(propertyName, value);\n\n    assertTrue(jsonObj.has(propertyName));\n\n    JsonElement jsonElement = jsonObj.get(propertyName);\n    assertNotNull(jsonElement);\n    assertEquals(String.valueOf(value), jsonElement.getAsString());\n    assertEquals(value, jsonElement.getAsCharacter());\n  }",
        "begin_line": 95,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 96,col 5)-(line 96,col 37)",
            "(line 97,col 5)-(line 97,col 21)",
            "(line 99,col 5)-(line 99,col 42)",
            "(line 100,col 5)-(line 100,col 45)",
            "(line 102,col 5)-(line 102,col 42)",
            "(line 104,col 5)-(line 104,col 56)",
            "(line 105,col 5)-(line 105,col 31)",
            "(line 106,col 5)-(line 106,col 67)",
            "(line 107,col 5)-(line 107,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonObjectTest.java",
        "signature": "com.google.gson.JsonObjectTest.testPropertyWithQuotes()",
        "snippet": "  public void testPropertyWithQuotes() {\n    JsonObject jsonObj = new JsonObject();\n    jsonObj.add(\"a\\\"b\", new JsonPrimitive(\"c\\\"d\"));\n    String json = new Gson().toJson(jsonObj);\n    assertEquals(\"{\\\"a\\\\\\\"b\\\":\\\"c\\\\\\\"d\\\"}\", json);\n  }",
        "begin_line": 113,
        "end_line": 118,
        "comment": "\n   * From bug report http://code.google.com/p/google-gson/issues/detail?id=182\n   ",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 42)",
            "(line 115,col 5)-(line 115,col 51)",
            "(line 116,col 5)-(line 116,col 45)",
            "(line 117,col 5)-(line 117,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonObjectTest.java",
        "signature": "com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName()",
        "snippet": "  public void testWritePropertyWithEmptyStringName() {\n    JsonObject jsonObj = new JsonObject();\n    jsonObj.add(\"\", new JsonPrimitive(true));\n    assertEquals(\"{\\\"\\\":true}\", new Gson().toJson(jsonObj));\n\n  }",
        "begin_line": 123,
        "end_line": 128,
        "comment": "\n   * From issue 227.\n   ",
        "child_ranges": [
            "(line 124,col 5)-(line 124,col 42)",
            "(line 125,col 5)-(line 125,col 45)",
            "(line 126,col 5)-(line 126,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonObjectTest.java",
        "signature": "com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName()",
        "snippet": "  public void testReadPropertyWithEmptyStringName() {\n    JsonObject jsonObj = new JsonParser().parse(\"{\\\"\\\":true}\").getAsJsonObject();\n    assertEquals(true, jsonObj.get(\"\").getAsBoolean());\n  }",
        "begin_line": 130,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 81)",
            "(line 132,col 5)-(line 132,col 55)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonObjectTest.java",
        "signature": "com.google.gson.JsonObjectTest.testEqualsOnEmptyObject()",
        "snippet": "  public void testEqualsOnEmptyObject() {\n    MoreAsserts.assertEqualsAndHashCode(new JsonObject(), new JsonObject());\n  }",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 136,col 5)-(line 136,col 76)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonObjectTest.java",
        "signature": "com.google.gson.JsonObjectTest.testEqualsNonEmptyObject()",
        "snippet": "  public void testEqualsNonEmptyObject() {\n    JsonObject a = new JsonObject();\n    JsonObject b = new JsonObject();\n\n    assertEquals(a, a);\n\n    a.add(\"foo\", new JsonObject());\n    assertFalse(a.equals(b));\n    assertFalse(b.equals(a));\n\n    b.add(\"foo\", new JsonObject());\n    MoreAsserts.assertEqualsAndHashCode(a, b);\n\n    a.add(\"bar\", new JsonObject());\n    assertFalse(a.equals(b));\n    assertFalse(b.equals(a));\n\n    b.add(\"bar\", JsonNull.INSTANCE);\n    assertFalse(a.equals(b));\n    assertFalse(b.equals(a));\n  }",
        "begin_line": 139,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 140,col 5)-(line 140,col 36)",
            "(line 141,col 5)-(line 141,col 36)",
            "(line 143,col 5)-(line 143,col 23)",
            "(line 145,col 5)-(line 145,col 35)",
            "(line 146,col 5)-(line 146,col 29)",
            "(line 147,col 5)-(line 147,col 29)",
            "(line 149,col 5)-(line 149,col 35)",
            "(line 150,col 5)-(line 150,col 46)",
            "(line 152,col 5)-(line 152,col 35)",
            "(line 153,col 5)-(line 153,col 29)",
            "(line 154,col 5)-(line 154,col 29)",
            "(line 156,col 5)-(line 156,col 36)",
            "(line 157,col 5)-(line 157,col 29)",
            "(line 158,col 5)-(line 158,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonObjectTest.java",
        "signature": "com.google.gson.JsonObjectTest.testDeepCopy()",
        "snippet": "  public void testDeepCopy() {\n    JsonObject original = new JsonObject();\n    JsonArray firstEntry = new JsonArray();\n    original.add(\"key\", firstEntry);\n\n    JsonObject copy = original.deepCopy();\n    firstEntry.add(new JsonPrimitive(\"z\"));\n\n    assertEquals(1, original.get(\"key\").getAsJsonArray().size());\n    assertEquals(0, copy.get(\"key\").getAsJsonArray().size());\n  }",
        "begin_line": 161,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 43)",
            "(line 163,col 5)-(line 163,col 43)",
            "(line 164,col 5)-(line 164,col 36)",
            "(line 166,col 5)-(line 166,col 42)",
            "(line 167,col 5)-(line 167,col 43)",
            "(line 169,col 5)-(line 169,col 65)",
            "(line 170,col 5)-(line 170,col 61)"
        ]
    },
    {
        "class_name": "com.google.gson.JavaSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JavaSerializationTest.java",
        "signature": "com.google.gson.JavaSerializationTest.testMapIsSerializable()",
        "snippet": "  public void testMapIsSerializable() throws Exception {\n    Type type = new TypeToken<Map<String, Integer>>() {}.getType();\n    Map<String, Integer> map = gson.fromJson(\"{\\\"b\\\":1,\\\"c\\\":2,\\\"a\\\":3}\", type);\n    Map<String, Integer> serialized = serializedCopy(map);\n    assertEquals(map, serialized);\n    // Also check that the iteration order is retained.\n    assertEquals(Arrays.asList(\"b\", \"c\", \"a\"), new ArrayList<String>(serialized.keySet()));\n  }",
        "begin_line": 40,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 41,col 5)-(line 41,col 67)",
            "(line 42,col 5)-(line 42,col 80)",
            "(line 43,col 5)-(line 43,col 58)",
            "(line 44,col 5)-(line 44,col 34)",
            "(line 46,col 5)-(line 46,col 91)"
        ]
    },
    {
        "class_name": "com.google.gson.JavaSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JavaSerializationTest.java",
        "signature": "com.google.gson.JavaSerializationTest.testListIsSerializable()",
        "snippet": "  public void testListIsSerializable() throws Exception {\n    Type type = new TypeToken<List<String>>() {}.getType();\n    List<String> list = gson.fromJson(\"[\\\"a\\\",\\\"b\\\",\\\"c\\\"]\", type);\n    List<String> serialized = serializedCopy(list);\n    assertEquals(list, serialized);\n  }",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 50,col 5)-(line 50,col 59)",
            "(line 51,col 5)-(line 51,col 67)",
            "(line 52,col 5)-(line 52,col 51)",
            "(line 53,col 5)-(line 53,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.JavaSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JavaSerializationTest.java",
        "signature": "com.google.gson.JavaSerializationTest.testNumberIsSerializable()",
        "snippet": "  public void testNumberIsSerializable() throws Exception {\n    Type type = new TypeToken<List<Number>>() {}.getType();\n    List<Number> list = gson.fromJson(\"[1,3.14,6.673e-11]\", type);\n    List<Number> serialized = serializedCopy(list);\n    assertEquals(1.0, serialized.get(0).doubleValue());\n    assertEquals(3.14, serialized.get(1).doubleValue());\n    assertEquals(6.673e-11, serialized.get(2).doubleValue());\n  }",
        "begin_line": 56,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 57,col 59)",
            "(line 58,col 5)-(line 58,col 66)",
            "(line 59,col 5)-(line 59,col 51)",
            "(line 60,col 5)-(line 60,col 55)",
            "(line 61,col 5)-(line 61,col 56)",
            "(line 62,col 5)-(line 62,col 61)"
        ]
    },
    {
        "class_name": "com.google.gson.JavaSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JavaSerializationTest.java",
        "signature": "com.google.gson.JavaSerializationTest.serializedCopy(T)",
        "snippet": "  @SuppressWarnings(\"unchecked\") // Serialization promises to return the same type.\n  private <T> T serializedCopy(T object) throws IOException, ClassNotFoundException {\n    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n    ObjectOutputStream out = new ObjectOutputStream(bytesOut);\n    out.writeObject(object);\n    out.close();\n    ByteArrayInputStream bytesIn = new ByteArrayInputStream(bytesOut.toByteArray());\n    ObjectInputStream in = new ObjectInputStream(bytesIn);\n    return (T) in.readObject();\n  }",
        "begin_line": 65,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 65)",
            "(line 68,col 5)-(line 68,col 62)",
            "(line 69,col 5)-(line 69,col 28)",
            "(line 70,col 5)-(line 70,col 16)",
            "(line 71,col 5)-(line 71,col 84)",
            "(line 72,col 5)-(line 72,col 58)",
            "(line 73,col 5)-(line 73,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testBoolean()",
        "snippet": "  public void testBoolean() throws Exception {\n    JsonPrimitive json = new JsonPrimitive(Boolean.TRUE);\n\n    assertTrue(json.isBoolean());\n    assertTrue(json.getAsBoolean());\n\n    // Extra support for booleans\n    json = new JsonPrimitive(1);\n    assertFalse(json.getAsBoolean());\n\n    json = new JsonPrimitive(\"1\");\n    assertFalse(json.getAsBoolean());\n\n    json = new JsonPrimitive(\"true\");\n    assertTrue(json.getAsBoolean());\n\n    json = new JsonPrimitive(\"TrUe\");\n    assertTrue(json.getAsBoolean());\n\n    json = new JsonPrimitive(\"1.3\");\n    assertFalse(json.getAsBoolean());\n  }",
        "begin_line": 33,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 34,col 5)-(line 34,col 57)",
            "(line 36,col 5)-(line 36,col 33)",
            "(line 37,col 5)-(line 37,col 36)",
            "(line 40,col 5)-(line 40,col 32)",
            "(line 41,col 5)-(line 41,col 37)",
            "(line 43,col 5)-(line 43,col 34)",
            "(line 44,col 5)-(line 44,col 37)",
            "(line 46,col 5)-(line 46,col 37)",
            "(line 47,col 5)-(line 47,col 36)",
            "(line 49,col 5)-(line 49,col 37)",
            "(line 50,col 5)-(line 50,col 36)",
            "(line 52,col 5)-(line 52,col 36)",
            "(line 53,col 5)-(line 53,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean()",
        "snippet": "  public void testParsingStringAsBoolean() throws Exception {\n    JsonPrimitive json = new JsonPrimitive(\"true\");\n\n    assertFalse(json.isBoolean());\n    assertTrue(json.getAsBoolean());\n  }",
        "begin_line": 56,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 57,col 51)",
            "(line 59,col 5)-(line 59,col 34)",
            "(line 60,col 5)-(line 60,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber()",
        "snippet": "  public void testParsingStringAsNumber() throws Exception {\n    JsonPrimitive json = new JsonPrimitive(\"1\");\n\n    assertFalse(json.isNumber());\n    assertEquals(1D, json.getAsDouble(), 0.00001);\n    assertEquals(1F, json.getAsFloat(), 0.00001);\n    assertEquals(1, json.getAsInt());\n    assertEquals(1L, json.getAsLong());\n    assertEquals((short) 1, json.getAsShort());\n    assertEquals((byte) 1, json.getAsByte());\n    assertEquals(new BigInteger(\"1\"), json.getAsBigInteger());\n    assertEquals(new BigDecimal(\"1\"), json.getAsBigDecimal());\n  }",
        "begin_line": 63,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 64,col 48)",
            "(line 66,col 5)-(line 66,col 33)",
            "(line 67,col 5)-(line 67,col 50)",
            "(line 68,col 5)-(line 68,col 49)",
            "(line 69,col 5)-(line 69,col 37)",
            "(line 70,col 5)-(line 70,col 39)",
            "(line 71,col 5)-(line 71,col 47)",
            "(line 72,col 5)-(line 72,col 45)",
            "(line 73,col 5)-(line 73,col 62)",
            "(line 74,col 5)-(line 74,col 62)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testStringsAndChar()",
        "snippet": "  public void testStringsAndChar() throws Exception {\n    JsonPrimitive json = new JsonPrimitive(\"abc\");\n    assertTrue(json.isString());\n    assertEquals('a', json.getAsCharacter());\n    assertEquals(\"abc\", json.getAsString());\n\n    json = new JsonPrimitive('z');\n    assertTrue(json.isString());\n    assertEquals('z', json.getAsCharacter());\n    assertEquals(\"z\", json.getAsString());\n  }",
        "begin_line": 77,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 78,col 50)",
            "(line 79,col 5)-(line 79,col 32)",
            "(line 80,col 5)-(line 80,col 45)",
            "(line 81,col 5)-(line 81,col 44)",
            "(line 83,col 5)-(line 83,col 34)",
            "(line 84,col 5)-(line 84,col 32)",
            "(line 85,col 5)-(line 85,col 45)",
            "(line 86,col 5)-(line 86,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testExponential()",
        "snippet": "  public void testExponential() throws Exception {\n    JsonPrimitive json = new JsonPrimitive(\"1E+7\");\n\n    assertEquals(new BigDecimal(\"1E+7\"), json.getAsBigDecimal());\n    assertEquals(new Double(\"1E+7\"), json.getAsDouble(), 0.00001);\n    assertEquals(new Float(\"1E+7\"), json.getAsDouble(), 0.00001);\n\n    try {\n      json.getAsInt();\n      fail(\"Integers can not handle exponents like this.\");\n    } catch (NumberFormatException expected) { }\n  }",
        "begin_line": 89,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 90,col 5)-(line 90,col 51)",
            "(line 92,col 5)-(line 92,col 65)",
            "(line 93,col 5)-(line 93,col 66)",
            "(line 94,col 5)-(line 94,col 65)",
            "(line 96,col 5)-(line 99,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testByteEqualsShort()",
        "snippet": "  public void testByteEqualsShort() {\n    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n    JsonPrimitive p2 = new JsonPrimitive(new Short((short)10));\n    assertEquals(p1, p2);\n    assertEquals(p1.hashCode(), p2.hashCode());\n  }",
        "begin_line": 102,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 103,col 61)",
            "(line 104,col 5)-(line 104,col 63)",
            "(line 105,col 5)-(line 105,col 25)",
            "(line 106,col 5)-(line 106,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testByteEqualsInteger()",
        "snippet": "  public void testByteEqualsInteger() {\n    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n    JsonPrimitive p2 = new JsonPrimitive(new Integer(10));\n    assertEquals(p1, p2);\n    assertEquals(p1.hashCode(), p2.hashCode());\n  }",
        "begin_line": 109,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 110,col 5)-(line 110,col 61)",
            "(line 111,col 5)-(line 111,col 58)",
            "(line 112,col 5)-(line 112,col 25)",
            "(line 113,col 5)-(line 113,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testByteEqualsLong()",
        "snippet": "  public void testByteEqualsLong() {\n    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n    JsonPrimitive p2 = new JsonPrimitive(new Long(10L));\n    assertEquals(p1, p2);\n    assertEquals(p1.hashCode(), p2.hashCode());\n  }",
        "begin_line": 116,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 117,col 5)-(line 117,col 61)",
            "(line 118,col 5)-(line 118,col 56)",
            "(line 119,col 5)-(line 119,col 25)",
            "(line 120,col 5)-(line 120,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger()",
        "snippet": "  public void testByteEqualsBigInteger() {\n    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n    JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n    assertEquals(p1, p2);\n    assertEquals(p1.hashCode(), p2.hashCode());\n  }",
        "begin_line": 123,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 124,col 5)-(line 124,col 61)",
            "(line 125,col 5)-(line 125,col 63)",
            "(line 126,col 5)-(line 126,col 25)",
            "(line 127,col 5)-(line 127,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testShortEqualsInteger()",
        "snippet": "  public void testShortEqualsInteger() {\n    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));\n    JsonPrimitive p2 = new JsonPrimitive(new Integer(10));\n    assertEquals(p1, p2);\n    assertEquals(p1.hashCode(), p2.hashCode());\n  }",
        "begin_line": 130,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 63)",
            "(line 132,col 5)-(line 132,col 58)",
            "(line 133,col 5)-(line 133,col 25)",
            "(line 134,col 5)-(line 134,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testShortEqualsLong()",
        "snippet": "  public void testShortEqualsLong() {\n    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));\n    JsonPrimitive p2 = new JsonPrimitive(new Long(10));\n    assertEquals(p1, p2);\n    assertEquals(p1.hashCode(), p2.hashCode());\n  }",
        "begin_line": 137,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 63)",
            "(line 139,col 5)-(line 139,col 55)",
            "(line 140,col 5)-(line 140,col 25)",
            "(line 141,col 5)-(line 141,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger()",
        "snippet": "  public void testShortEqualsBigInteger() {\n    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));\n    JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n    assertEquals(p1, p2);\n    assertEquals(p1.hashCode(), p2.hashCode());\n  }",
        "begin_line": 144,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 63)",
            "(line 146,col 5)-(line 146,col 63)",
            "(line 147,col 5)-(line 147,col 25)",
            "(line 148,col 5)-(line 148,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong()",
        "snippet": "  public void testIntegerEqualsLong() {\n    JsonPrimitive p1 = new JsonPrimitive(new Integer(10));\n    JsonPrimitive p2 = new JsonPrimitive(new Long(10L));\n    assertEquals(p1, p2);\n    assertEquals(p1.hashCode(), p2.hashCode());\n  }",
        "begin_line": 151,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 152,col 5)-(line 152,col 58)",
            "(line 153,col 5)-(line 153,col 56)",
            "(line 154,col 5)-(line 154,col 25)",
            "(line 155,col 5)-(line 155,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger()",
        "snippet": "  public void testIntegerEqualsBigInteger() {\n    JsonPrimitive p1 = new JsonPrimitive(new Integer(10));\n    JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n    assertEquals(p1, p2);\n    assertEquals(p1.hashCode(), p2.hashCode());\n  }",
        "begin_line": 158,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 159,col 5)-(line 159,col 58)",
            "(line 160,col 5)-(line 160,col 63)",
            "(line 161,col 5)-(line 161,col 25)",
            "(line 162,col 5)-(line 162,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger()",
        "snippet": "  public void testLongEqualsBigInteger() {\n    JsonPrimitive p1 = new JsonPrimitive(new Long(10L));\n    JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n    assertEquals(p1, p2);\n    assertEquals(p1.hashCode(), p2.hashCode());\n  }",
        "begin_line": 165,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 166,col 5)-(line 166,col 56)",
            "(line 167,col 5)-(line 167,col 63)",
            "(line 168,col 5)-(line 168,col 25)",
            "(line 169,col 5)-(line 169,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble()",
        "snippet": "  public void testFloatEqualsDouble() {\n    JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F));\n    JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D));\n    assertEquals(p1, p2);\n    assertEquals(p1.hashCode(), p2.hashCode());\n  }",
        "begin_line": 172,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 173,col 5)-(line 173,col 60)",
            "(line 174,col 5)-(line 174,col 61)",
            "(line 175,col 5)-(line 175,col 25)",
            "(line 176,col 5)-(line 176,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal()",
        "snippet": "  public void testFloatEqualsBigDecimal() {\n    JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F));\n    JsonPrimitive p2 = new JsonPrimitive(new BigDecimal(\"10.25\"));\n    assertEquals(p1, p2);\n    assertEquals(p1.hashCode(), p2.hashCode());\n  }",
        "begin_line": 179,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 180,col 5)-(line 180,col 60)",
            "(line 181,col 5)-(line 181,col 66)",
            "(line 182,col 5)-(line 182,col 25)",
            "(line 183,col 5)-(line 183,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal()",
        "snippet": "  public void testDoubleEqualsBigDecimal() {\n    JsonPrimitive p1 = new JsonPrimitive(new Double(10.25D));\n    JsonPrimitive p2 = new JsonPrimitive(new BigDecimal(\"10.25\"));\n    assertEquals(p1, p2);\n    assertEquals(p1.hashCode(), p2.hashCode());\n  }",
        "begin_line": 186,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 187,col 5)-(line 187,col 61)",
            "(line 188,col 5)-(line 188,col 66)",
            "(line 189,col 5)-(line 189,col 25)",
            "(line 190,col 5)-(line 190,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testValidJsonOnToString()",
        "snippet": "  public void testValidJsonOnToString() throws Exception {\n    JsonPrimitive json = new JsonPrimitive(\"Some\\nEscaped\\nValue\");\n    assertEquals(\"\\\"Some\\\\nEscaped\\\\nValue\\\"\", json.toString());\n\n    json = new JsonPrimitive(new BigDecimal(\"1.333\"));\n    assertEquals(\"1.333\", json.toString());\n  }",
        "begin_line": 193,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 194,col 5)-(line 194,col 67)",
            "(line 195,col 5)-(line 195,col 64)",
            "(line 197,col 5)-(line 197,col 54)",
            "(line 198,col 5)-(line 198,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testEquals()",
        "snippet": "  public void testEquals() {\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(\"A\"), new JsonPrimitive(\"A\"));\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(true), new JsonPrimitive(true));\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(5L), new JsonPrimitive(5L));\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive('a'), new JsonPrimitive('a'));\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN), new JsonPrimitive(Float.NaN));\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NEGATIVE_INFINITY),\n        new JsonPrimitive(Float.NEGATIVE_INFINITY));\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.POSITIVE_INFINITY),\n        new JsonPrimitive(Float.POSITIVE_INFINITY));\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NaN), new JsonPrimitive(Double.NaN));\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NEGATIVE_INFINITY),\n        new JsonPrimitive(Double.NEGATIVE_INFINITY));\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.POSITIVE_INFINITY),\n        new JsonPrimitive(Double.POSITIVE_INFINITY));\n    assertFalse(new JsonPrimitive(\"a\").equals(new JsonPrimitive(\"b\")));\n    assertFalse(new JsonPrimitive(true).equals(new JsonPrimitive(false)));\n    assertFalse(new JsonPrimitive(0).equals(new JsonPrimitive(1)));\n  }",
        "begin_line": 201,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 88)",
            "(line 203,col 5)-(line 203,col 90)",
            "(line 204,col 5)-(line 204,col 86)",
            "(line 205,col 5)-(line 205,col 88)",
            "(line 206,col 5)-(line 206,col 100)",
            "(line 207,col 5)-(line 208,col 52)",
            "(line 209,col 5)-(line 210,col 52)",
            "(line 211,col 5)-(line 211,col 102)",
            "(line 212,col 5)-(line 213,col 53)",
            "(line 214,col 5)-(line 215,col 53)",
            "(line 216,col 5)-(line 216,col 71)",
            "(line 217,col 5)-(line 217,col 74)",
            "(line 218,col 5)-(line 218,col 67)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes()",
        "snippet": "  public void testEqualsAcrossTypes() {\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(\"a\"), new JsonPrimitive('a'));\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(new BigInteger(\"0\")), new JsonPrimitive(0));\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(0), new JsonPrimitive(0L));\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(new BigInteger(\"0\")), new JsonPrimitive(0));\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN), new JsonPrimitive(Double.NaN));\n  }",
        "begin_line": 221,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 88)",
            "(line 223,col 5)-(line 223,col 102)",
            "(line 224,col 5)-(line 224,col 85)",
            "(line 225,col 5)-(line 225,col 102)",
            "(line 226,col 5)-(line 226,col 101)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger()",
        "snippet": "  public void testEqualsIntegerAndBigInteger() {\n    JsonPrimitive a = new JsonPrimitive(5L);\n    JsonPrimitive b = new JsonPrimitive(new BigInteger(\"18446744073709551621\")); // 2^64 + 5\n    // Ideally, the following assertion should have failed but the price is too much to pay \n    // assertFalse(a + \" equals \" + b, a.equals(b));\n    assertTrue(a + \" equals \" + b, a.equals(b));\n  }",
        "begin_line": 229,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 230,col 5)-(line 230,col 44)",
            "(line 231,col 5)-(line 231,col 80)",
            "(line 234,col 5)-(line 234,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes()",
        "snippet": "  public void testEqualsDoesNotEquateStringAndNonStringTypes() {\n    assertFalse(new JsonPrimitive(\"true\").equals(new JsonPrimitive(true)));\n    assertFalse(new JsonPrimitive(\"0\").equals(new JsonPrimitive(0)));\n    assertFalse(new JsonPrimitive(\"NaN\").equals(new JsonPrimitive(Float.NaN)));\n  }",
        "begin_line": 237,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 238,col 5)-(line 238,col 75)",
            "(line 239,col 5)-(line 239,col 69)",
            "(line 240,col 5)-(line 240,col 79)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonPrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
        "signature": "com.google.gson.JsonPrimitiveTest.testDeepCopy()",
        "snippet": "  public void testDeepCopy() {\n    JsonPrimitive a = new JsonPrimitive(\"a\");\n    assertSame(a, a.deepCopy()); // Primitives are immutable!\n  }",
        "begin_line": 243,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 244,col 5)-(line 244,col 45)",
            "(line 245,col 5)-(line 245,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.MockExclusionStrategy",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MockExclusionStrategy.java",
        "signature": "com.google.gson.MockExclusionStrategy.MockExclusionStrategy(boolean, boolean)",
        "snippet": "  public MockExclusionStrategy(boolean skipClass, boolean skipField) {\n    this.skipClass = skipClass;\n    this.skipField = skipField;\n  }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 30,col 5)-(line 30,col 31)",
            "(line 31,col 5)-(line 31,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.MockExclusionStrategy",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MockExclusionStrategy.java",
        "signature": "com.google.gson.MockExclusionStrategy.shouldSkipField(com.google.gson.FieldAttributes)",
        "snippet": "  @Override\n  public boolean shouldSkipField(FieldAttributes f) {\n    return skipField;\n  }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 5)-(line 36,col 21)"
        ]
    },
    {
        "class_name": "com.google.gson.MockExclusionStrategy",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/MockExclusionStrategy.java",
        "signature": "com.google.gson.MockExclusionStrategy.shouldSkipClass(java.lang.Class<?>)",
        "snippet": "  @Override\n  public boolean shouldSkipClass(Class<?> clazz) {\n    return skipClass;\n  }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 5)-(line 41,col 21)"
        ]
    },
    {
        "class_name": "com.google.gson.ParameterizedTypeFixtures",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java",
        "signature": "com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedType(T)",
        "snippet": "    public MyParameterizedType(T value) {\n      this.value = value;\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 7)-(line 41,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.ParameterizedTypeFixtures",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java",
        "signature": "com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.getValue()",
        "snippet": "    public T getValue() {\n      return value;\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 7)-(line 44,col 19)"
        ]
    },
    {
        "class_name": "com.google.gson.ParameterizedTypeFixtures",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java",
        "signature": "com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      String valueAsJson = getExpectedJson(value);\n      return String.format(\"{\\\"value\\\":%s}\", valueAsJson);\n    }",
        "begin_line": 47,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 48,col 7)-(line 48,col 50)",
            "(line 49,col 7)-(line 49,col 58)"
        ]
    },
    {
        "class_name": "com.google.gson.ParameterizedTypeFixtures",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java",
        "signature": "com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.getExpectedJson(java.lang.Object)",
        "snippet": "    private String getExpectedJson(Object obj) {\n      Class<?> clazz = obj.getClass();\n      if (Primitives.isWrapperType(Primitives.wrap(clazz))) {\n        return obj.toString();\n      } else if (obj.getClass().equals(String.class)) {\n        return \"\\\"\" + obj.toString() + \"\\\"\";\n      } else {\n        // Try invoking a getExpectedJson() method if it exists\n        try {\n          Method method = clazz.getMethod(\"getExpectedJson\");\n          Object results = method.invoke(obj);\n          return (String) results;\n        } catch (SecurityException e) {\n          throw new RuntimeException(e);\n        } catch (NoSuchMethodException e) {\n          throw new RuntimeException(e);\n        } catch (IllegalArgumentException e) {\n          throw new RuntimeException(e);\n        } catch (IllegalAccessException e) {\n          throw new RuntimeException(e);\n        } catch (InvocationTargetException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }",
        "begin_line": 52,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 53,col 7)-(line 53,col 38)",
            "(line 54,col 7)-(line 75,col 7)"
        ]
    },
    {
        "class_name": "com.google.gson.ParameterizedTypeFixtures",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java",
        "signature": "com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.hashCode()",
        "snippet": "    @Override\n    public int hashCode() {\n      return value == null ? 0 : value.hashCode();\n    }",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 7)-(line 80,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.ParameterizedTypeFixtures",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java",
        "signature": "com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.equals(java.lang.Object)",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    public boolean equals(Object obj) {\n      if (this == obj) {\n        return true;\n      }\n      if (obj == null) {\n        return false;\n      }\n      if (getClass() != obj.getClass()) {\n        return false;\n      }\n      MyParameterizedType<T> other = (MyParameterizedType<T>) obj;\n      if (value == null) {\n        if (other.value != null) {\n          return false;\n        }\n      } else if (!value.equals(other.value)) {\n        return false;\n      }\n      return true;\n    }",
        "begin_line": 83,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 86,col 7)-(line 88,col 7)",
            "(line 89,col 7)-(line 91,col 7)",
            "(line 92,col 7)-(line 94,col 7)",
            "(line 95,col 7)-(line 95,col 66)",
            "(line 96,col 7)-(line 102,col 7)",
            "(line 103,col 7)-(line 103,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.ParameterizedTypeFixtures",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java",
        "signature": "com.google.gson.ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator.MyParameterizedTypeInstanceCreator(T)",
        "snippet": "    public MyParameterizedTypeInstanceCreator(T instanceOfT) {\n      this.instanceOfT = instanceOfT;\n    }",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\n     * Caution the specified instance is reused by the instance creator for each call.\n     * This means that the fields of the same objects will be overwritten by Gson.\n     * This is usually fine in tests since there we deserialize just once, but quite\n     * dangerous in practice.\n     *\n     * @param instanceOfT\n     ",
        "child_ranges": [
            "(line 119,col 7)-(line 119,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.ParameterizedTypeFixtures",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java",
        "signature": "com.google.gson.ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator.createInstance(java.lang.reflect.Type)",
        "snippet": "    @Override public MyParameterizedType<T> createInstance(Type type) {\n      return new MyParameterizedType<T>(instanceOfT);\n    }",
        "begin_line": 121,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 122,col 7)-(line 122,col 53)"
        ]
    },
    {
        "class_name": "com.google.gson.ParameterizedTypeFixtures",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java",
        "signature": "com.google.gson.ParameterizedTypeFixtures.MyParameterizedTypeAdapter.getExpectedJson(com.google.gson.ParameterizedTypeFixtures.MyParameterizedType<T>)",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    public static<T> String getExpectedJson(MyParameterizedType<T> obj) {\n      Class<T> clazz = (Class<T>) obj.value.getClass();\n      boolean addQuotes = !clazz.isArray() && !Primitives.unwrap(clazz).isPrimitive();\n      StringBuilder sb = new StringBuilder(\"{\\\"\");\n      sb.append(obj.value.getClass().getSimpleName()).append(\"\\\":\");\n      if (addQuotes) {\n        sb.append(\"\\\"\");\n      }\n      sb.append(obj.value.toString());\n      if (addQuotes) {\n        sb.append(\"\\\"\");\n      }\n      sb.append(\"}\");\n      return sb.toString();\n    }",
        "begin_line": 128,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 130,col 7)-(line 130,col 55)",
            "(line 131,col 7)-(line 131,col 86)",
            "(line 132,col 7)-(line 132,col 50)",
            "(line 133,col 7)-(line 133,col 68)",
            "(line 134,col 7)-(line 136,col 7)",
            "(line 137,col 7)-(line 137,col 38)",
            "(line 138,col 7)-(line 140,col 7)",
            "(line 141,col 7)-(line 141,col 21)",
            "(line 142,col 7)-(line 142,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.ParameterizedTypeFixtures",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java",
        "signature": "com.google.gson.ParameterizedTypeFixtures.MyParameterizedTypeAdapter.serialize(com.google.gson.ParameterizedTypeFixtures.MyParameterizedType<T>, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "    @Override public JsonElement serialize(MyParameterizedType<T> src, Type classOfSrc,\n        JsonSerializationContext context) {\n      JsonObject json = new JsonObject();\n      T value = src.getValue();\n      json.add(value.getClass().getSimpleName(), context.serialize(value));\n      return json;\n    }",
        "begin_line": 145,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 147,col 7)-(line 147,col 41)",
            "(line 148,col 7)-(line 148,col 31)",
            "(line 149,col 7)-(line 149,col 75)",
            "(line 150,col 7)-(line 150,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.ParameterizedTypeFixtures",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java",
        "signature": "com.google.gson.ParameterizedTypeFixtures.MyParameterizedTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    @Override public MyParameterizedType<T> deserialize(JsonElement json, Type typeOfT,\n        JsonDeserializationContext context) throws JsonParseException {\n      Type genericClass = ((ParameterizedType) typeOfT).getActualTypeArguments()[0];\n      Class<?> rawType = $Gson$Types.getRawType(genericClass);\n      String className = rawType.getSimpleName();\n      JsonElement jsonElement = json.getAsJsonObject().get(className);\n\n      T value;\n      if (genericClass == Integer.class) {\n        value = (T) Integer.valueOf(jsonElement.getAsInt());\n      } else if (genericClass == String.class) {\n        value = (T) jsonElement.getAsString();\n      } else {\n        value = (T) jsonElement;\n      }\n\n      if (Primitives.isPrimitive(genericClass)) {\n        PrimitiveTypeAdapter typeAdapter = new PrimitiveTypeAdapter();\n        value = (T) typeAdapter.adaptType(value, rawType);\n      }\n      return new MyParameterizedType<T>(value);\n    }",
        "begin_line": 153,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 156,col 7)-(line 156,col 84)",
            "(line 157,col 7)-(line 157,col 62)",
            "(line 158,col 7)-(line 158,col 49)",
            "(line 159,col 7)-(line 159,col 70)",
            "(line 161,col 7)-(line 161,col 14)",
            "(line 162,col 7)-(line 168,col 7)",
            "(line 170,col 7)-(line 173,col 7)",
            "(line 174,col 7)-(line 174,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.ObjectTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java",
        "signature": "com.google.gson.ObjectTypeAdapterTest.testDeserialize()",
        "snippet": "  public void testDeserialize() throws Exception {\n    Map<?, ?> map = (Map<?, ?>) adapter.fromJson(\"{\\\"a\\\":5,\\\"b\\\":[1,2,null],\\\"c\\\":{\\\"x\\\":\\\"y\\\"}}\");\n    assertEquals(5.0, map.get(\"a\"));\n    assertEquals(Arrays.asList(1.0, 2.0, null), map.get(\"b\"));\n    assertEquals(Collections.singletonMap(\"x\", \"y\"), map.get(\"c\"));\n    assertEquals(3, map.size());\n  }",
        "begin_line": 29,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 30,col 5)-(line 30,col 99)",
            "(line 31,col 5)-(line 31,col 36)",
            "(line 32,col 5)-(line 32,col 62)",
            "(line 33,col 5)-(line 33,col 67)",
            "(line 34,col 5)-(line 34,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.ObjectTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java",
        "signature": "com.google.gson.ObjectTypeAdapterTest.testSerialize()",
        "snippet": "  public void testSerialize() throws Exception {\n    Object object = new RuntimeType();\n    assertEquals(\"{'a':5,'b':[1,2,null]}\", adapter.toJson(object).replace(\"\\\"\", \"'\"));\n  }",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 38)",
            "(line 39,col 5)-(line 39,col 86)"
        ]
    },
    {
        "class_name": "com.google.gson.ObjectTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java",
        "signature": "com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue()",
        "snippet": "  public void testSerializeNullValue() throws Exception {\n    Map<String, Object> map = new LinkedHashMap<String, Object>();\n    map.put(\"a\", null);\n    assertEquals(\"{'a':null}\", adapter.toJson(map).replace('\"', '\\''));\n  }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 66)",
            "(line 44,col 5)-(line 44,col 23)",
            "(line 45,col 5)-(line 45,col 71)"
        ]
    },
    {
        "class_name": "com.google.gson.ObjectTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java",
        "signature": "com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue()",
        "snippet": "  public void testDeserializeNullValue() throws Exception {\n    Map<String, Object> map = new LinkedHashMap<String, Object>();\n    map.put(\"a\", null);\n    assertEquals(map, adapter.fromJson(\"{\\\"a\\\":null}\"));\n  }",
        "begin_line": 48,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 66)",
            "(line 50,col 5)-(line 50,col 23)",
            "(line 51,col 5)-(line 51,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.ObjectTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java",
        "signature": "com.google.gson.ObjectTypeAdapterTest.testSerializeObject()",
        "snippet": "  public void testSerializeObject() throws Exception {\n    assertEquals(\"{}\", adapter.toJson(new Object()));\n  }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 55,col 53)"
        ]
    },
    {
        "class_name": "com.google.gson.CommentsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/CommentsTest.java",
        "signature": "com.google.gson.CommentsTest.testParseComments()",
        "snippet": "  public void testParseComments() {\n    String json = \"[\\n\"\n        + \"  // this is a comment\\n\"\n        + \"  \\\"a\\\",\\n\"\n        + \"  /* this is another comment */\\n\"\n        + \"  \\\"b\\\",\\n\"\n        + \"  # this is yet another comment\\n\"\n        + \"  \\\"c\\\"\\n\"\n        + \"]\";\n\n    List<String> abc = new Gson().fromJson(json, new TypeToken<List<String>>() {}.getType());\n    assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), abc);\n  }",
        "begin_line": 32,
        "end_line": 44,
        "comment": "\n   * Test for issue 212.\n   ",
        "child_ranges": [
            "(line 33,col 5)-(line 40,col 14)",
            "(line 42,col 5)-(line 42,col 93)",
            "(line 43,col 5)-(line 43,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.VersionExclusionStrategyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java",
        "signature": "com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion()",
        "snippet": "  public void testClassAndFieldAreAtSameVersion() throws Exception {\n    Excluder excluder = Excluder.DEFAULT.withVersion(VERSION);\n    assertFalse(excluder.excludeClass(MockObject.class, true));\n    assertFalse(excluder.excludeField(MockObject.class.getField(\"someField\"), true));\n  }",
        "begin_line": 31,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 32,col 5)-(line 32,col 62)",
            "(line 33,col 5)-(line 33,col 63)",
            "(line 34,col 5)-(line 34,col 85)"
        ]
    },
    {
        "class_name": "com.google.gson.VersionExclusionStrategyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java",
        "signature": "com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion()",
        "snippet": "  public void testClassAndFieldAreBehindInVersion() throws Exception {\n    Excluder excluder = Excluder.DEFAULT.withVersion(VERSION + 1);\n    assertFalse(excluder.excludeClass(MockObject.class, true));\n    assertFalse(excluder.excludeField(MockObject.class.getField(\"someField\"), true));\n  }",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 66)",
            "(line 39,col 5)-(line 39,col 63)",
            "(line 40,col 5)-(line 40,col 85)"
        ]
    },
    {
        "class_name": "com.google.gson.VersionExclusionStrategyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java",
        "signature": "com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion()",
        "snippet": "  public void testClassAndFieldAreAheadInVersion() throws Exception {\n    Excluder excluder = Excluder.DEFAULT.withVersion(VERSION - 1);\n    assertTrue(excluder.excludeClass(MockObject.class, true));\n    assertTrue(excluder.excludeField(MockObject.class.getField(\"someField\"), true));\n  }",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 44,col 66)",
            "(line 45,col 5)-(line 45,col 62)",
            "(line 46,col 5)-(line 46,col 84)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonBuilderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonBuilderTest.java",
        "signature": "com.google.gson.GsonBuilderTest.Anonymous-55bdfbd2-970e-4e48-a810-5ef3422efe38.write(com.google.gson.stream.JsonWriter, java.lang.Object)",
        "snippet": "    @Override public void write(JsonWriter out, Object value) {\n      throw new AssertionError();\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 7)-(line 35,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonBuilderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonBuilderTest.java",
        "signature": "com.google.gson.GsonBuilderTest.Anonymous-a2e8849b-8945-4e84-8b26-03bf2cd2b5de.read(com.google.gson.stream.JsonReader)",
        "snippet": "    @Override public Object read(JsonReader in) {\n      throw new AssertionError();\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 7)-(line 38,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonBuilderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonBuilderTest.java",
        "signature": "com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce()",
        "snippet": "  public void testCreatingMoreThanOnce() {\n    GsonBuilder builder = new GsonBuilder();\n    builder.create();\n    builder.create();\n  }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 44)",
            "(line 44,col 5)-(line 44,col 21)",
            "(line 45,col 5)-(line 45,col 21)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonBuilderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonBuilderTest.java",
        "signature": "com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers()",
        "snippet": "  public void testExcludeFieldsWithModifiers() {\n    Gson gson = new GsonBuilder()\n        .excludeFieldsWithModifiers(Modifier.VOLATILE, Modifier.PRIVATE)\n        .create();\n    assertEquals(\"{\\\"d\\\":\\\"d\\\"}\", gson.toJson(new HasModifiers()));\n  }",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 51,col 18)",
            "(line 52,col 5)-(line 52,col 67)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonBuilderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonBuilderTest.java",
        "signature": "com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType()",
        "snippet": "  public void testRegisterTypeAdapterForCoreType() {\n    Type[] types = {\n        byte.class,\n        int.class,\n        double.class,\n        Short.class,\n        Long.class,\n        String.class,\n    };\n    for (Type type : types) {\n      new GsonBuilder().registerTypeAdapter(type, NULL_TYPE_ADAPTER);\n    }\n  }",
        "begin_line": 55,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 56,col 5)-(line 63,col 6)",
            "(line 64,col 5)-(line 66,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonBuilderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonBuilderTest.java",
        "signature": "com.google.gson.GsonBuilderTest.testTransientFieldExclusion()",
        "snippet": "  public void testTransientFieldExclusion() {\n    Gson gson = new GsonBuilder()\n        .excludeFieldsWithModifiers()\n        .create();\n    assertEquals(\"{\\\"a\\\":\\\"a\\\"}\", gson.toJson(new HasTransients()));\n  }",
        "begin_line": 77,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 80,col 18)",
            "(line 81,col 5)-(line 81,col 68)"
        ]
    },
    {
        "class_name": "com.google.gson.OverrideCoreTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java",
        "signature": "com.google.gson.OverrideCoreTypeAdaptersTest.Anonymous-5d798d0b-1936-46b2-89df-0e5c52870538.write(com.google.gson.stream.JsonWriter, java.lang.Boolean)",
        "snippet": "    @Override public void write(JsonWriter out, Boolean value) throws IOException {\n      out.value(value ? 1 : 0);\n    }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 7)-(line 31,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.OverrideCoreTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java",
        "signature": "com.google.gson.OverrideCoreTypeAdaptersTest.Anonymous-05f020cb-d5b5-4ca1-85b5-45f7ace9f145.read(com.google.gson.stream.JsonReader)",
        "snippet": "    @Override public Boolean read(JsonReader in) throws IOException {\n      int value = in.nextInt();\n      return value != 0;\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 7)-(line 34,col 31)",
            "(line 35,col 7)-(line 35,col 24)"
        ]
    },
    {
        "class_name": "com.google.gson.OverrideCoreTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java",
        "signature": "com.google.gson.OverrideCoreTypeAdaptersTest.Anonymous-8d9ffc38-147d-4bf0-83ff-098af8ef042c.write(com.google.gson.stream.JsonWriter, java.lang.String)",
        "snippet": "    @Override public void write(JsonWriter out, String value) throws IOException {\n      out.value(value.toUpperCase(Locale.US));\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 7)-(line 41,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.OverrideCoreTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java",
        "signature": "com.google.gson.OverrideCoreTypeAdaptersTest.Anonymous-d36539a0-36f7-430f-98f4-bd6304232c68.read(com.google.gson.stream.JsonReader)",
        "snippet": "    @Override public String read(JsonReader in) throws IOException {\n      return in.nextString().toLowerCase(Locale.US);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 7)-(line 44,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.OverrideCoreTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java",
        "signature": "com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter()",
        "snippet": "  public void testOverrideWrapperBooleanAdapter() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(Boolean.class, booleanAsIntAdapter)\n        .create();\n    assertEquals(\"true\", gson.toJson(true, boolean.class));\n    assertEquals(\"1\", gson.toJson(true, Boolean.class));\n    assertEquals(Boolean.TRUE, gson.fromJson(\"true\", boolean.class));\n    assertEquals(Boolean.TRUE, gson.fromJson(\"1\", Boolean.class));\n    assertEquals(Boolean.FALSE, gson.fromJson(\"0\", Boolean.class));\n  }",
        "begin_line": 48,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 51,col 18)",
            "(line 52,col 5)-(line 52,col 59)",
            "(line 53,col 5)-(line 53,col 56)",
            "(line 54,col 5)-(line 54,col 69)",
            "(line 55,col 5)-(line 55,col 66)",
            "(line 56,col 5)-(line 56,col 67)"
        ]
    },
    {
        "class_name": "com.google.gson.OverrideCoreTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java",
        "signature": "com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter()",
        "snippet": "  public void testOverridePrimitiveBooleanAdapter() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(boolean.class, booleanAsIntAdapter)\n        .create();\n    assertEquals(\"1\", gson.toJson(true, boolean.class));\n    assertEquals(\"true\", gson.toJson(true, Boolean.class));\n    assertEquals(Boolean.TRUE, gson.fromJson(\"1\", boolean.class));\n    assertEquals(Boolean.TRUE, gson.fromJson(\"true\", Boolean.class));\n    assertEquals(\"0\", gson.toJson(false, boolean.class));\n  }",
        "begin_line": 59,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 62,col 18)",
            "(line 63,col 5)-(line 63,col 56)",
            "(line 64,col 5)-(line 64,col 59)",
            "(line 65,col 5)-(line 65,col 66)",
            "(line 66,col 5)-(line 66,col 69)",
            "(line 67,col 5)-(line 67,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.OverrideCoreTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java",
        "signature": "com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter()",
        "snippet": "  public void testOverrideStringAdapter() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(String.class, swapCaseStringAdapter)\n        .create();\n    assertEquals(\"\\\"HELLO\\\"\", gson.toJson(\"Hello\", String.class));\n    assertEquals(\"hello\", gson.fromJson(\"\\\"Hello\\\"\", String.class));\n  }",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 71,col 5)-(line 73,col 18)",
            "(line 74,col 5)-(line 74,col 66)",
            "(line 75,col 5)-(line 75,col 68)"
        ]
    },
    {
        "class_name": "com.google.gson.InnerClassExclusionStrategyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java",
        "signature": "com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject()",
        "snippet": "  public void testExcludeInnerClassObject() throws Exception {\n    Class<?> clazz = innerClass.getClass();\n    assertTrue(excluder.excludeClass(clazz, true));\n  }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 5)-(line 34,col 43)",
            "(line 35,col 5)-(line 35,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.InnerClassExclusionStrategyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java",
        "signature": "com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField()",
        "snippet": "  public void testExcludeInnerClassField() throws Exception {\n    Field f = getClass().getField(\"innerClass\");\n    assertTrue(excluder.excludeField(f, true));\n  }",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 39,col 5)-(line 39,col 48)",
            "(line 40,col 5)-(line 40,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.InnerClassExclusionStrategyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java",
        "signature": "com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject()",
        "snippet": "  public void testIncludeStaticNestedClassObject() throws Exception {\n    Class<?> clazz = staticNestedClass.getClass();\n    assertFalse(excluder.excludeClass(clazz, true));\n  }",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 44,col 50)",
            "(line 45,col 5)-(line 45,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.InnerClassExclusionStrategyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java",
        "signature": "com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField()",
        "snippet": "  public void testIncludeStaticNestedClassField() throws Exception {\n    Field f = getClass().getField(\"staticNestedClass\");\n    assertFalse(excluder.excludeField(f, true));\n  }",
        "begin_line": 48,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 55)",
            "(line 50,col 5)-(line 50,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java",
        "signature": "com.google.gson.GsonTypeAdapterTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new GsonBuilder()\n        .registerTypeAdapter(AtomicLong.class, new ExceptionTypeAdapter())\n        .registerTypeAdapter(AtomicInteger.class, new AtomicIntegerTypeAdapter())\n        .create();\n  }",
        "begin_line": 34,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 36,col 5)-(line 36,col 18)",
            "(line 37,col 5)-(line 40,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java",
        "signature": "com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException()",
        "snippet": "  public void testDefaultTypeAdapterThrowsParseException() throws Exception {\n    try {\n      gson.fromJson(\"{\\\"abc\\\":123}\", BigInteger.class);\n      fail(\"Should have thrown a JsonParseException\");\n    } catch (JsonParseException expected) { }\n  }",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 47,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java",
        "signature": "com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException()",
        "snippet": "  public void testTypeAdapterThrowsException() throws Exception {\n    try {\n      gson.toJson(new AtomicLong(0));\n      fail(\"Type Adapter should have thrown an exception\");\n    } catch (IllegalStateException expected) { }\n\n    try {\n      gson.fromJson(\"123\", AtomicLong.class);\n      fail(\"Type Adapter should have thrown an exception\");\n    } catch (JsonParseException expected) { }\n  }",
        "begin_line": 50,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 54,col 48)",
            "(line 56,col 5)-(line 59,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java",
        "signature": "com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes()",
        "snippet": "  public void testTypeAdapterProperlyConvertsTypes() throws Exception {\n    int intialValue = 1;\n    AtomicInteger atomicInt = new AtomicInteger(intialValue);\n    String json = gson.toJson(atomicInt);\n    assertEquals(intialValue + 1, Integer.parseInt(json));\n\n    atomicInt = gson.fromJson(json, AtomicInteger.class);\n    assertEquals(intialValue, atomicInt.get());\n  }",
        "begin_line": 62,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 63,col 5)-(line 63,col 24)",
            "(line 64,col 5)-(line 64,col 61)",
            "(line 65,col 5)-(line 65,col 41)",
            "(line 66,col 5)-(line 66,col 58)",
            "(line 68,col 5)-(line 68,col 57)",
            "(line 69,col 5)-(line 69,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java",
        "signature": "com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes()",
        "snippet": "  public void testTypeAdapterDoesNotAffectNonAdaptedTypes() throws Exception {\n    String expected = \"blah\";\n    String actual = gson.toJson(expected);\n    assertEquals(\"\\\"\" + expected + \"\\\"\", actual);\n\n    actual = gson.fromJson(actual, String.class);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 72,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 73,col 5)-(line 73,col 29)",
            "(line 74,col 5)-(line 74,col 42)",
            "(line 75,col 5)-(line 75,col 49)",
            "(line 77,col 5)-(line 77,col 49)",
            "(line 78,col 5)-(line 78,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java",
        "signature": "com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.serialize(java.util.concurrent.atomic.AtomicLong, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "    @Override public JsonElement serialize(\n        AtomicLong src, Type typeOfSrc, JsonSerializationContext context) {\n      throw new IllegalStateException();\n    }",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 7)-(line 85,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java",
        "signature": "com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "    @Override public AtomicLong deserialize(\n        JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      throw new IllegalStateException();\n    }",
        "begin_line": 87,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 7)-(line 90,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java",
        "signature": "com.google.gson.GsonTypeAdapterTest.AtomicIntegerTypeAdapter.serialize(java.util.concurrent.atomic.AtomicInteger, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "    @Override public JsonElement serialize(AtomicInteger src, Type typeOfSrc, JsonSerializationContext context) {\n      return new JsonPrimitive(src.incrementAndGet());\n    }",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 7)-(line 97,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java",
        "signature": "com.google.gson.GsonTypeAdapterTest.AtomicIntegerTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "    @Override public AtomicInteger deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      int intValue = json.getAsInt();\n      return new AtomicInteger(--intValue);\n    }",
        "begin_line": 100,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 102,col 7)-(line 102,col 37)",
            "(line 103,col 7)-(line 103,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java",
        "signature": "com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass()",
        "snippet": "  public void testDeserializerForAbstractClass() {\n    Concrete instance = new Concrete();\n    instance.a = \"android\";\n    instance.b = \"beep\";\n    assertSerialized(\"{\\\"a\\\":\\\"android\\\"}\", Abstract.class, true, true, instance);\n    assertSerialized(\"{\\\"a\\\":\\\"android\\\"}\", Abstract.class, true, false, instance);\n    assertSerialized(\"{\\\"a\\\":\\\"android\\\"}\", Abstract.class, false, true, instance);\n    assertSerialized(\"{\\\"a\\\":\\\"android\\\"}\", Abstract.class, false, false, instance);\n    assertSerialized(\"{\\\"b\\\":\\\"beep\\\",\\\"a\\\":\\\"android\\\"}\", Concrete.class, true, true, instance);\n    assertSerialized(\"{\\\"b\\\":\\\"beep\\\",\\\"a\\\":\\\"android\\\"}\", Concrete.class, true, false, instance);\n    assertSerialized(\"{\\\"b\\\":\\\"beep\\\",\\\"a\\\":\\\"android\\\"}\", Concrete.class, false, true, instance);\n    assertSerialized(\"{\\\"b\\\":\\\"beep\\\",\\\"a\\\":\\\"android\\\"}\", Concrete.class, false, false, instance);\n  }",
        "begin_line": 116,
        "end_line": 128,
        "comment": " https://groups.google.com/d/topic/google-gson/EBmOCa8kJPE/discussion",
        "child_ranges": [
            "(line 117,col 5)-(line 117,col 39)",
            "(line 118,col 5)-(line 118,col 27)",
            "(line 119,col 5)-(line 119,col 24)",
            "(line 120,col 5)-(line 120,col 82)",
            "(line 121,col 5)-(line 121,col 83)",
            "(line 122,col 5)-(line 122,col 83)",
            "(line 123,col 5)-(line 123,col 84)",
            "(line 124,col 5)-(line 124,col 97)",
            "(line 125,col 5)-(line 125,col 98)",
            "(line 126,col 5)-(line 126,col 98)",
            "(line 127,col 5)-(line 127,col 99)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java",
        "signature": "com.google.gson.GsonTypeAdapterTest.assertSerialized(java.lang.String, java.lang.Class<?>, boolean, boolean, java.lang.Object)",
        "snippet": "  private void assertSerialized(String expected, Class<?> instanceType, boolean registerAbstractDeserializer,\n      boolean registerAbstractHierarchyDeserializer, Object instance) {\n    JsonDeserializer<Abstract> deserializer = new JsonDeserializer<Abstract>() {\n      public Abstract deserialize(JsonElement json, Type typeOfT,\n          JsonDeserializationContext context) throws JsonParseException {\n        throw new AssertionError();\n      }\n    };\n    GsonBuilder builder = new GsonBuilder();\n    if (registerAbstractDeserializer) {\n      builder.registerTypeAdapter(Abstract.class, deserializer);\n    }\n    if (registerAbstractHierarchyDeserializer) {\n      builder.registerTypeHierarchyAdapter(Abstract.class, deserializer);\n    }\n    Gson gson = builder.create();\n    assertEquals(expected, gson.toJson(instance, instanceType));\n  }",
        "begin_line": 130,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 132,col 5)-(line 137,col 6)",
            "(line 138,col 5)-(line 138,col 44)",
            "(line 139,col 5)-(line 141,col 5)",
            "(line 142,col 5)-(line 144,col 5)",
            "(line 145,col 5)-(line 145,col 33)",
            "(line 146,col 5)-(line 146,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.GsonTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java",
        "signature": "com.google.gson.GsonTypeAdapterTest.Anonymous-909269e4-d886-4089-8eed-c54847eafa46.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "      public Abstract deserialize(JsonElement json, Type typeOfT,\n          JsonDeserializationContext context) throws JsonParseException {\n        throw new AssertionError();\n      }",
        "begin_line": 133,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.FieldAttributesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/FieldAttributesTest.java",
        "signature": "com.google.gson.FieldAttributesTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    fieldAttributes = new FieldAttributes(Foo.class.getField(\"bar\"));\n  }",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 18)",
            "(line 39,col 5)-(line 39,col 69)"
        ]
    },
    {
        "class_name": "com.google.gson.FieldAttributesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/FieldAttributesTest.java",
        "signature": "com.google.gson.FieldAttributesTest.testNullField()",
        "snippet": "  public void testNullField() throws Exception {\n    try {\n      new FieldAttributes(null);\n      fail(\"Field parameter can not be null\");\n    } catch (NullPointerException expected) { }\n  }",
        "begin_line": 42,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 46,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.FieldAttributesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/FieldAttributesTest.java",
        "signature": "com.google.gson.FieldAttributesTest.testDeclaringClass()",
        "snippet": "  public void testDeclaringClass() throws Exception {\n    assertEquals(Foo.class, fieldAttributes.getDeclaringClass());\n  }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 5)-(line 50,col 65)"
        ]
    },
    {
        "class_name": "com.google.gson.FieldAttributesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/FieldAttributesTest.java",
        "signature": "com.google.gson.FieldAttributesTest.testModifiers()",
        "snippet": "  public void testModifiers() throws Exception {\n    assertFalse(fieldAttributes.hasModifier(Modifier.STATIC));\n    assertFalse(fieldAttributes.hasModifier(Modifier.FINAL));\n    assertFalse(fieldAttributes.hasModifier(Modifier.ABSTRACT));\n    assertFalse(fieldAttributes.hasModifier(Modifier.VOLATILE));\n    assertFalse(fieldAttributes.hasModifier(Modifier.PROTECTED));\n\n    assertTrue(fieldAttributes.hasModifier(Modifier.PUBLIC));\n    assertTrue(fieldAttributes.hasModifier(Modifier.TRANSIENT));\n  }",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 62)",
            "(line 55,col 5)-(line 55,col 61)",
            "(line 56,col 5)-(line 56,col 64)",
            "(line 57,col 5)-(line 57,col 64)",
            "(line 58,col 5)-(line 58,col 65)",
            "(line 60,col 5)-(line 60,col 61)",
            "(line 61,col 5)-(line 61,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.FieldAttributesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/FieldAttributesTest.java",
        "signature": "com.google.gson.FieldAttributesTest.testIsSynthetic()",
        "snippet": "  public void testIsSynthetic() throws Exception {\n    assertFalse(fieldAttributes.isSynthetic());\n  }",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 5)-(line 65,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.FieldAttributesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/FieldAttributesTest.java",
        "signature": "com.google.gson.FieldAttributesTest.testName()",
        "snippet": "  public void testName() throws Exception {\n    assertEquals(\"bar\", fieldAttributes.getName());\n  }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 69,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.FieldAttributesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/FieldAttributesTest.java",
        "signature": "com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass()",
        "snippet": "  public void testDeclaredTypeAndClass() throws Exception {\n    Type expectedType = new TypeToken<List<String>>() {}.getType();\n    assertEquals(expectedType, fieldAttributes.getDeclaredType());\n    assertEquals(List.class, fieldAttributes.getDeclaredClass());\n  }",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 73,col 5)-(line 73,col 67)",
            "(line 74,col 5)-(line 74,col 66)",
            "(line 75,col 5)-(line 75,col 65)"
        ]
    },
    {
        "class_name": "com.google.gson.PrimitiveTypeAdapter",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java",
        "signature": "com.google.gson.PrimitiveTypeAdapter.adaptType(java.lang.Object, java.lang.Class<T>)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public <T> T adaptType(Object from, Class<T> to) {\n    Class<?> aClass = Primitives.wrap(to);\n    if (Primitives.isWrapperType(aClass)) {\n      if (aClass == Character.class) {\n        String value = from.toString();\n        if (value.length() == 1) {\n          return (T) (Character) from.toString().charAt(0);\n        }\n        throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n      }\n\n      try {\n        Constructor<?> constructor = aClass.getConstructor(String.class);\n        return (T) constructor.newInstance(from.toString());\n      } catch (NoSuchMethodException e) {\n        throw new JsonParseException(e);\n      } catch (IllegalAccessException e) {\n        throw new JsonParseException(e);\n      } catch (InvocationTargetException e) {\n        throw new JsonParseException(e);\n      } catch (InstantiationException e) {\n        throw new JsonParseException(e);\n      }\n    } else if (Enum.class.isAssignableFrom(to)) {\n      // Case where the type being adapted to is an Enum\n      // We will try to convert from.toString() to the enum\n      try {\n        Method valuesMethod = to.getMethod(\"valueOf\", String.class);\n        return (T) valuesMethod.invoke(null, from.toString());\n      } catch (NoSuchMethodException e) {\n        throw new RuntimeException(e);\n      } catch (IllegalAccessException e) {\n        throw new RuntimeException(e);\n      } catch (InvocationTargetException e) {\n        throw new RuntimeException(e);\n      }\n    } else {\n      throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \" + to);\n    }\n  }",
        "begin_line": 32,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 34,col 5)-(line 34,col 42)",
            "(line 35,col 5)-(line 71,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonStreamParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonStreamParserTest.java",
        "signature": "com.google.gson.JsonStreamParserTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    parser = new JsonStreamParser(\"'one' 'two'\");\n  }",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 32,col 5)-(line 32,col 18)",
            "(line 33,col 5)-(line 33,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonStreamParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonStreamParserTest.java",
        "signature": "com.google.gson.JsonStreamParserTest.testParseTwoStrings()",
        "snippet": "  public void testParseTwoStrings() {\n    String actualOne = parser.next().getAsString();\n    assertEquals(\"one\", actualOne);\n    String actualTwo = parser.next().getAsString();\n    assertEquals(\"two\", actualTwo);\n  }",
        "begin_line": 36,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 37,col 5)-(line 37,col 51)",
            "(line 38,col 5)-(line 38,col 35)",
            "(line 39,col 5)-(line 39,col 51)",
            "(line 40,col 5)-(line 40,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonStreamParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonStreamParserTest.java",
        "signature": "com.google.gson.JsonStreamParserTest.testIterator()",
        "snippet": "  public void testIterator() {\n    assertTrue(parser.hasNext());\n    assertEquals(\"one\", parser.next().getAsString());\n    assertTrue(parser.hasNext());\n    assertEquals(\"two\", parser.next().getAsString());\n    assertFalse(parser.hasNext());\n  }",
        "begin_line": 43,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 44,col 33)",
            "(line 45,col 5)-(line 45,col 53)",
            "(line 46,col 5)-(line 46,col 33)",
            "(line 47,col 5)-(line 47,col 53)",
            "(line 48,col 5)-(line 48,col 34)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonStreamParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonStreamParserTest.java",
        "signature": "com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext()",
        "snippet": "  public void testNoSideEffectForHasNext() throws Exception {\n    assertTrue(parser.hasNext());\n    assertTrue(parser.hasNext());\n    assertTrue(parser.hasNext());\n    assertEquals(\"one\", parser.next().getAsString());\n    \n    assertTrue(parser.hasNext());\n    assertTrue(parser.hasNext());\n    assertEquals(\"two\", parser.next().getAsString());\n    \n    assertFalse(parser.hasNext());\n    assertFalse(parser.hasNext());\n  }",
        "begin_line": 51,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 33)",
            "(line 53,col 5)-(line 53,col 33)",
            "(line 54,col 5)-(line 54,col 33)",
            "(line 55,col 5)-(line 55,col 53)",
            "(line 57,col 5)-(line 57,col 33)",
            "(line 58,col 5)-(line 58,col 33)",
            "(line 59,col 5)-(line 59,col 53)",
            "(line 61,col 5)-(line 61,col 34)",
            "(line 62,col 5)-(line 62,col 34)"
        ]
    },
    {
        "class_name": "com.google.gson.JsonStreamParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/JsonStreamParserTest.java",
        "signature": "com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput()",
        "snippet": "  public void testCallingNextBeyondAvailableInput() {\n    parser.next();\n    parser.next();\n    try {\n      parser.next();\n      fail(\"Parser should not go beyond available input\");\n    } catch (NoSuchElementException expected) {\n    }\n  }",
        "begin_line": 65,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 66,col 5)-(line 66,col 18)",
            "(line 67,col 5)-(line 67,col 18)",
            "(line 68,col 5)-(line 72,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedTreeMapTest.testIterationOrder()",
        "snippet": "  public void testIterationOrder() {\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();\n    map.put(\"a\", \"android\");\n    map.put(\"c\", \"cola\");\n    map.put(\"b\", \"bbq\");\n    assertIterationOrder(map.keySet(), \"a\", \"c\", \"b\");\n    assertIterationOrder(map.values(), \"android\", \"cola\", \"bbq\");\n  }",
        "begin_line": 31,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 32,col 5)-(line 32,col 76)",
            "(line 33,col 5)-(line 33,col 28)",
            "(line 34,col 5)-(line 34,col 25)",
            "(line 35,col 5)-(line 35,col 24)",
            "(line 36,col 5)-(line 36,col 54)",
            "(line 37,col 5)-(line 37,col 65)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink()",
        "snippet": "  public void testRemoveRootDoesNotDoubleUnlink() {\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();\n    map.put(\"a\", \"android\");\n    map.put(\"c\", \"cola\");\n    map.put(\"b\", \"bbq\");\n    Iterator<Map.Entry<String,String>> it = map.entrySet().iterator();\n    it.next();\n    it.next();\n    it.next();\n    it.remove();\n    assertIterationOrder(map.keySet(), \"a\", \"c\");\n  }",
        "begin_line": 40,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 41,col 5)-(line 41,col 76)",
            "(line 42,col 5)-(line 42,col 28)",
            "(line 43,col 5)-(line 43,col 25)",
            "(line 44,col 5)-(line 44,col 24)",
            "(line 45,col 5)-(line 45,col 70)",
            "(line 46,col 5)-(line 46,col 14)",
            "(line 47,col 5)-(line 47,col 14)",
            "(line 48,col 5)-(line 48,col 14)",
            "(line 49,col 5)-(line 49,col 16)",
            "(line 50,col 5)-(line 50,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedTreeMapTest.testPutNullKeyFails()",
        "snippet": "  public void testPutNullKeyFails() {\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();\n    try {\n      map.put(null, \"android\");\n      fail();\n    } catch (NullPointerException expected) {\n    }\n  }",
        "begin_line": 53,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 76)",
            "(line 55,col 5)-(line 59,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails()",
        "snippet": "  public void testPutNonComparableKeyFails() {\n    LinkedTreeMap<Object, String> map = new LinkedTreeMap<Object, String>();\n    try {\n      map.put(new Object(), \"android\");\n      fail();\n    } catch (ClassCastException expected) {}\n  }",
        "begin_line": 62,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 63,col 5)-(line 63,col 76)",
            "(line 64,col 5)-(line 67,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse()",
        "snippet": "  public void testContainsNonComparableKeyReturnsFalse() {\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();\n    map.put(\"a\", \"android\");\n    assertFalse(map.containsKey(new Object()));\n  }",
        "begin_line": 70,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 71,col 5)-(line 71,col 76)",
            "(line 72,col 5)-(line 72,col 28)",
            "(line 73,col 5)-(line 73,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse()",
        "snippet": "  public void testContainsNullKeyIsAlwaysFalse() {\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();\n    map.put(\"a\", \"android\");\n    assertFalse(map.containsKey(null));\n  }",
        "begin_line": 76,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 77,col 5)-(line 77,col 76)",
            "(line 78,col 5)-(line 78,col 28)",
            "(line 79,col 5)-(line 79,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedTreeMapTest.testPutOverrides()",
        "snippet": "  public void testPutOverrides() throws Exception {\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();\n    assertNull(map.put(\"d\", \"donut\"));\n    assertNull(map.put(\"e\", \"eclair\"));\n    assertNull(map.put(\"f\", \"froyo\"));\n    assertEquals(3, map.size());\n\n    assertEquals(\"donut\", map.get(\"d\"));\n    assertEquals(\"donut\", map.put(\"d\", \"done\"));\n    assertEquals(3, map.size());\n  }",
        "begin_line": 82,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 83,col 5)-(line 83,col 76)",
            "(line 84,col 5)-(line 84,col 38)",
            "(line 85,col 5)-(line 85,col 39)",
            "(line 86,col 5)-(line 86,col 38)",
            "(line 87,col 5)-(line 87,col 32)",
            "(line 89,col 5)-(line 89,col 40)",
            "(line 90,col 5)-(line 90,col 48)",
            "(line 91,col 5)-(line 91,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues()",
        "snippet": "  public void testEmptyStringValues() {\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();\n    map.put(\"a\", \"\");\n    assertTrue(map.containsKey(\"a\"));\n    assertEquals(\"\", map.get(\"a\"));\n  }",
        "begin_line": 94,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 95,col 5)-(line 95,col 76)",
            "(line 96,col 5)-(line 96,col 21)",
            "(line 97,col 5)-(line 97,col 37)",
            "(line 98,col 5)-(line 98,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys()",
        "snippet": "  public void testLargeSetOfRandomKeys() throws Exception {\n    Random random = new Random(1367593214724L);\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();\n    String[] keys = new String[1000];\n    for (int i = 0; i < keys.length; i++) {\n      keys[i] = Integer.toString(Math.abs(random.nextInt()), 36) + \"-\" + i;\n      map.put(keys[i], \"\" + i);\n    }\n\n    for (int i = 0; i < keys.length; i++) {\n      String key = keys[i];\n      assertTrue(map.containsKey(key));\n      assertEquals(\"\" + i, map.get(key));\n    }\n  }",
        "begin_line": 101,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 102,col 5)-(line 102,col 47)",
            "(line 103,col 5)-(line 103,col 76)",
            "(line 104,col 5)-(line 104,col 37)",
            "(line 105,col 5)-(line 108,col 5)",
            "(line 110,col 5)-(line 114,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedTreeMapTest.testClear()",
        "snippet": "  public void testClear() {\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();\n    map.put(\"a\", \"android\");\n    map.put(\"c\", \"cola\");\n    map.put(\"b\", \"bbq\");\n    map.clear();\n    assertIterationOrder(map.keySet());\n    assertEquals(0, map.size());\n  }",
        "begin_line": 117,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 118,col 76)",
            "(line 119,col 5)-(line 119,col 28)",
            "(line 120,col 5)-(line 120,col 25)",
            "(line 121,col 5)-(line 121,col 24)",
            "(line 122,col 5)-(line 122,col 16)",
            "(line 123,col 5)-(line 123,col 39)",
            "(line 124,col 5)-(line 124,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode()",
        "snippet": "  public void testEqualsAndHashCode() throws Exception {\n    LinkedTreeMap<String, Integer> map1 = new LinkedTreeMap<String, Integer>();\n    map1.put(\"A\", 1);\n    map1.put(\"B\", 2);\n    map1.put(\"C\", 3);\n    map1.put(\"D\", 4);\n\n    LinkedTreeMap<String, Integer> map2 = new LinkedTreeMap<String, Integer>();\n    map2.put(\"C\", 3);\n    map2.put(\"B\", 2);\n    map2.put(\"D\", 4);\n    map2.put(\"A\", 1);\n\n    MoreAsserts.assertEqualsAndHashCode(map1, map2);\n  }",
        "begin_line": 127,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 128,col 5)-(line 128,col 79)",
            "(line 129,col 5)-(line 129,col 21)",
            "(line 130,col 5)-(line 130,col 21)",
            "(line 131,col 5)-(line 131,col 21)",
            "(line 132,col 5)-(line 132,col 21)",
            "(line 134,col 5)-(line 134,col 79)",
            "(line 135,col 5)-(line 135,col 21)",
            "(line 136,col 5)-(line 136,col 21)",
            "(line 137,col 5)-(line 137,col 21)",
            "(line 138,col 5)-(line 138,col 21)",
            "(line 140,col 5)-(line 140,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedTreeMapTest.assertIterationOrder(java.lang.Iterable<T>, T...)",
        "snippet": "  private <T> void assertIterationOrder(Iterable<T> actual, T... expected) {\n    ArrayList<T> actualList = new ArrayList<T>();\n    for (T t : actual) {\n      actualList.add(t);\n    }\n    assertEquals(Arrays.asList(expected), actualList);\n  }",
        "begin_line": 143,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 144,col 5)-(line 144,col 49)",
            "(line 145,col 5)-(line 147,col 5)",
            "(line 148,col 5)-(line 148,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.UnsafeAllocatorInstantiationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java",
        "signature": "com.google.gson.internal.UnsafeAllocatorInstantiationTest.testInterfaceInstantiation()",
        "snippet": "  public void testInterfaceInstantiation() {\n    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n    try {\n      unsafeAllocator.newInstance(Interface.class);\n      fail();\n    } catch (Exception e) {\n      assertEquals(e.getClass(), UnsupportedOperationException.class);\n    }\n  }",
        "begin_line": 39,
        "end_line": 47,
        "comment": "\n   * Ensure that the {@link java.lang.UnsupportedOperationException} is thrown when  trying\n   * to instantiate an interface\n   ",
        "child_ranges": [
            "(line 40,col 5)-(line 40,col 63)",
            "(line 41,col 5)-(line 46,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.UnsafeAllocatorInstantiationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java",
        "signature": "com.google.gson.internal.UnsafeAllocatorInstantiationTest.testAbstractClassInstantiation()",
        "snippet": "  public void testAbstractClassInstantiation() {\n    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n    try {\n      unsafeAllocator.newInstance(AbstractClass.class);\n      fail();\n    } catch (Exception e) {\n      assertEquals(e.getClass(), UnsupportedOperationException.class);\n    }\n  }",
        "begin_line": 53,
        "end_line": 61,
        "comment": "\n   * Ensure that the {@link java.lang.UnsupportedOperationException} is thrown when  trying\n   * to instantiate an abstract class\n   ",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 63)",
            "(line 55,col 5)-(line 60,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.UnsafeAllocatorInstantiationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java",
        "signature": "com.google.gson.internal.UnsafeAllocatorInstantiationTest.testConcreteClassInstantiation()",
        "snippet": "  public void testConcreteClassInstantiation() {\n    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n    try {\n      unsafeAllocator.newInstance(ConcreteClass.class);\n    } catch (Exception e) {\n      fail();\n    }\n  }",
        "begin_line": 66,
        "end_line": 73,
        "comment": "\n   * Ensure that no exception is thrown when trying to instantiate a concrete class\n   ",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 63)",
            "(line 68,col 5)-(line 72,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LazilyParsedNumberTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java",
        "signature": "com.google.gson.internal.LazilyParsedNumberTest.testHashCode()",
        "snippet": "  public void testHashCode() {\n    LazilyParsedNumber n1 = new LazilyParsedNumber(\"1\");\n    LazilyParsedNumber n1Another = new LazilyParsedNumber(\"1\");\n    assertEquals(n1.hashCode(), n1Another.hashCode());\n  }",
        "begin_line": 21,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 22,col 5)-(line 22,col 56)",
            "(line 23,col 5)-(line 23,col 63)",
            "(line 24,col 5)-(line 24,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LazilyParsedNumberTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java",
        "signature": "com.google.gson.internal.LazilyParsedNumberTest.testEquals()",
        "snippet": "  public void testEquals() {\n    LazilyParsedNumber n1 = new LazilyParsedNumber(\"1\");\n    LazilyParsedNumber n1Another = new LazilyParsedNumber(\"1\");\n    assertTrue(n1.equals(n1Another));\n  }",
        "begin_line": 27,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 28,col 5)-(line 28,col 56)",
            "(line 29,col 5)-(line 29,col 63)",
            "(line 30,col 5)-(line 30,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.GsonTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/GsonTypesTest.java",
        "signature": "com.google.gson.internal.GsonTypesTest.testNewParameterizedTypeWithoutOwner()",
        "snippet": "  public void testNewParameterizedTypeWithoutOwner() throws Exception {\n    // List<A>. List is a top-level class\n    Type type = $Gson$Types.newParameterizedTypeWithOwner(null, List.class, A.class);\n    assertEquals(A.class, getFirstTypeArgument(type));\n\n    // A<B>. A is a static inner class.\n    type = $Gson$Types.newParameterizedTypeWithOwner(null, A.class, B.class);\n    assertEquals(B.class, getFirstTypeArgument(type));\n\n    final class D {\n    }\n    try {\n      // D<A> is not allowed since D is not a static inner class\n      $Gson$Types.newParameterizedTypeWithOwner(null, D.class, A.class);\n      fail();\n    } catch (IllegalArgumentException expected) {}\n\n    // A<D> is allowed.\n    type = $Gson$Types.newParameterizedTypeWithOwner(null, A.class, D.class);\n    assertEquals(D.class, getFirstTypeArgument(type));\n  }",
        "begin_line": 27,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 29,col 5)-(line 29,col 85)",
            "(line 30,col 5)-(line 30,col 54)",
            "(line 33,col 5)-(line 33,col 77)",
            "(line 34,col 5)-(line 34,col 54)",
            "(line 36,col 5)-(line 37,col 5)",
            "(line 38,col 5)-(line 42,col 50)",
            "(line 45,col 5)-(line 45,col 77)",
            "(line 46,col 5)-(line 46,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.GsonTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/GsonTypesTest.java",
        "signature": "com.google.gson.internal.GsonTypesTest.testGetFirstTypeArgument()",
        "snippet": "  public void testGetFirstTypeArgument() throws Exception {\n    assertNull(getFirstTypeArgument(A.class));\n\n    Type type = $Gson$Types.newParameterizedTypeWithOwner(null, A.class, B.class, C.class);\n    assertEquals(B.class, getFirstTypeArgument(type));\n  }",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 50,col 5)-(line 50,col 46)",
            "(line 52,col 5)-(line 52,col 91)",
            "(line 53,col 5)-(line 53,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.GsonTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/GsonTypesTest.java",
        "signature": "com.google.gson.internal.GsonTypesTest.getFirstTypeArgument(java.lang.reflect.Type)",
        "snippet": "  public static Type getFirstTypeArgument(Type type) throws Exception {\n    if (!(type instanceof ParameterizedType)) return null;\n    ParameterizedType ptype = (ParameterizedType) type;\n    Type[] actualTypeArguments = ptype.getActualTypeArguments();\n    if (actualTypeArguments.length == 0) return null;\n    return $Gson$Types.canonicalize(actualTypeArguments[0]);\n  }",
        "begin_line": 67,
        "end_line": 73,
        "comment": "\n   * Given a parameterized type A&lt;B,C&gt;, returns B. If the specified type is not\n   * a generic type, returns null.\n   ",
        "child_ranges": [
            "(line 68,col 5)-(line 68,col 58)",
            "(line 69,col 5)-(line 69,col 55)",
            "(line 70,col 5)-(line 70,col 64)",
            "(line 71,col 5)-(line 71,col 53)",
            "(line 72,col 5)-(line 72,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder()",
        "snippet": "  public void testIterationOrder() {\n    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();\n    map.put(\"a\", \"android\");\n    map.put(\"c\", \"cola\");\n    map.put(\"b\", \"bbq\");\n    assertIterationOrder(map.keySet(), \"a\", \"c\", \"b\");\n    assertIterationOrder(map.values(), \"android\", \"cola\", \"bbq\");\n  }",
        "begin_line": 31,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 32,col 5)-(line 32,col 84)",
            "(line 33,col 5)-(line 33,col 28)",
            "(line 34,col 5)-(line 34,col 25)",
            "(line 35,col 5)-(line 35,col 24)",
            "(line 36,col 5)-(line 36,col 54)",
            "(line 37,col 5)-(line 37,col 65)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink()",
        "snippet": "  public void testRemoveRootDoesNotDoubleUnlink() {\n    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();\n    map.put(\"a\", \"android\");\n    map.put(\"c\", \"cola\");\n    map.put(\"b\", \"bbq\");\n    Iterator<Map.Entry<String,String>> it = map.entrySet().iterator();\n    it.next();\n    it.next();\n    it.next();\n    it.remove();\n    assertIterationOrder(map.keySet(), \"a\", \"c\");\n  }",
        "begin_line": 40,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 41,col 5)-(line 41,col 84)",
            "(line 42,col 5)-(line 42,col 28)",
            "(line 43,col 5)-(line 43,col 25)",
            "(line 44,col 5)-(line 44,col 24)",
            "(line 45,col 5)-(line 45,col 70)",
            "(line 46,col 5)-(line 46,col 14)",
            "(line 47,col 5)-(line 47,col 14)",
            "(line 48,col 5)-(line 48,col 14)",
            "(line 49,col 5)-(line 49,col 16)",
            "(line 50,col 5)-(line 50,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testPutNullKeyFails()",
        "snippet": "  public void testPutNullKeyFails() {\n    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();\n    try {\n      map.put(null, \"android\");\n      fail();\n    } catch (NullPointerException expected) {\n    }\n  }",
        "begin_line": 53,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 84)",
            "(line 55,col 5)-(line 59,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails()",
        "snippet": "  public void testPutNonComparableKeyFails() {\n    LinkedHashTreeMap<Object, String> map = new LinkedHashTreeMap<Object, String>();\n    try {\n      map.put(new Object(), \"android\");\n      fail();\n    } catch (ClassCastException expected) {}\n  }",
        "begin_line": 62,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 63,col 5)-(line 63,col 84)",
            "(line 64,col 5)-(line 67,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse()",
        "snippet": "  public void testContainsNonComparableKeyReturnsFalse() {\n    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();\n    map.put(\"a\", \"android\");\n    assertFalse(map.containsKey(new Object()));\n  }",
        "begin_line": 70,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 71,col 5)-(line 71,col 84)",
            "(line 72,col 5)-(line 72,col 28)",
            "(line 73,col 5)-(line 73,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse()",
        "snippet": "  public void testContainsNullKeyIsAlwaysFalse() {\n    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();\n    map.put(\"a\", \"android\");\n    assertFalse(map.containsKey(null));\n  }",
        "begin_line": 76,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 77,col 5)-(line 77,col 84)",
            "(line 78,col 5)-(line 78,col 28)",
            "(line 79,col 5)-(line 79,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides()",
        "snippet": "  public void testPutOverrides() throws Exception {\n    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();\n    assertNull(map.put(\"d\", \"donut\"));\n    assertNull(map.put(\"e\", \"eclair\"));\n    assertNull(map.put(\"f\", \"froyo\"));\n    assertEquals(3, map.size());\n\n    assertEquals(\"donut\", map.get(\"d\"));\n    assertEquals(\"donut\", map.put(\"d\", \"done\"));\n    assertEquals(3, map.size());\n  }",
        "begin_line": 82,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 83,col 5)-(line 83,col 84)",
            "(line 84,col 5)-(line 84,col 38)",
            "(line 85,col 5)-(line 85,col 39)",
            "(line 86,col 5)-(line 86,col 38)",
            "(line 87,col 5)-(line 87,col 32)",
            "(line 89,col 5)-(line 89,col 40)",
            "(line 90,col 5)-(line 90,col 48)",
            "(line 91,col 5)-(line 91,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues()",
        "snippet": "  public void testEmptyStringValues() {\n    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();\n    map.put(\"a\", \"\");\n    assertTrue(map.containsKey(\"a\"));\n    assertEquals(\"\", map.get(\"a\"));\n  }",
        "begin_line": 94,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 95,col 5)-(line 95,col 84)",
            "(line 96,col 5)-(line 96,col 21)",
            "(line 97,col 5)-(line 97,col 37)",
            "(line 98,col 5)-(line 98,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash()",
        "snippet": "  public void testForceDoublingAndRehash() throws Exception {\n    Random random = new Random(1367593214724L);\n    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();\n    String[] keys = new String[1000];\n    for (int i = 0; i < keys.length; i++) {\n      keys[i] = Integer.toString(Math.abs(random.nextInt()), 36) + \"-\" + i;\n      map.put(keys[i], \"\" + i);\n    }\n\n    for (int i = 0; i < keys.length; i++) {\n      String key = keys[i];\n      assertTrue(map.containsKey(key));\n      assertEquals(\"\" + i, map.get(key));\n    }\n  }",
        "begin_line": 104,
        "end_line": 118,
        "comment": " size remains at 3/4)",
        "child_ranges": [
            "(line 105,col 5)-(line 105,col 47)",
            "(line 106,col 5)-(line 106,col 84)",
            "(line 107,col 5)-(line 107,col 37)",
            "(line 108,col 5)-(line 111,col 5)",
            "(line 113,col 5)-(line 117,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testClear()",
        "snippet": "  public void testClear() {\n    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();\n    map.put(\"a\", \"android\");\n    map.put(\"c\", \"cola\");\n    map.put(\"b\", \"bbq\");\n    map.clear();\n    assertIterationOrder(map.keySet());\n    assertEquals(0, map.size());\n  }",
        "begin_line": 120,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 84)",
            "(line 122,col 5)-(line 122,col 28)",
            "(line 123,col 5)-(line 123,col 25)",
            "(line 124,col 5)-(line 124,col 24)",
            "(line 125,col 5)-(line 125,col 16)",
            "(line 126,col 5)-(line 126,col 39)",
            "(line 127,col 5)-(line 127,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode()",
        "snippet": "  public void testEqualsAndHashCode() throws Exception {\n    LinkedHashTreeMap<String, Integer> map1 = new LinkedHashTreeMap<String, Integer>();\n    map1.put(\"A\", 1);\n    map1.put(\"B\", 2);\n    map1.put(\"C\", 3);\n    map1.put(\"D\", 4);\n\n    LinkedHashTreeMap<String, Integer> map2 = new LinkedHashTreeMap<String, Integer>();\n    map2.put(\"C\", 3);\n    map2.put(\"B\", 2);\n    map2.put(\"D\", 4);\n    map2.put(\"A\", 1);\n\n    MoreAsserts.assertEqualsAndHashCode(map1, map2);\n  }",
        "begin_line": 130,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 87)",
            "(line 132,col 5)-(line 132,col 21)",
            "(line 133,col 5)-(line 133,col 21)",
            "(line 134,col 5)-(line 134,col 21)",
            "(line 135,col 5)-(line 135,col 21)",
            "(line 137,col 5)-(line 137,col 87)",
            "(line 138,col 5)-(line 138,col 21)",
            "(line 139,col 5)-(line 139,col 21)",
            "(line 140,col 5)-(line 140,col 21)",
            "(line 141,col 5)-(line 141,col 21)",
            "(line 143,col 5)-(line 143,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker()",
        "snippet": "  public void testAvlWalker() {\n    assertAvlWalker(node(node(\"a\"), \"b\", node(\"c\")),\n        \"a\", \"b\", \"c\");\n    assertAvlWalker(node(node(node(\"a\"), \"b\", node(\"c\")), \"d\", node(node(\"e\"), \"f\", node(\"g\"))),\n        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\");\n    assertAvlWalker(node(node(null, \"a\", node(\"b\")), \"c\", node(node(\"d\"), \"e\", null)),\n        \"a\", \"b\", \"c\", \"d\", \"e\");\n    assertAvlWalker(node(null, \"a\", node(null, \"b\", node(null, \"c\", node(\"d\")))),\n        \"a\", \"b\", \"c\", \"d\");\n    assertAvlWalker(node(node(node(node(\"a\"), \"b\", null), \"c\", null), \"d\", null),\n        \"a\", \"b\", \"c\", \"d\");\n  }",
        "begin_line": 146,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 147,col 5)-(line 148,col 23)",
            "(line 149,col 5)-(line 150,col 43)",
            "(line 151,col 5)-(line 152,col 33)",
            "(line 153,col 5)-(line 154,col 28)",
            "(line 155,col 5)-(line 156,col 28)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.assertAvlWalker(com.google.gson.internal.LinkedHashTreeMap.Node<java.lang.String, java.lang.String>, java.lang.String...)",
        "snippet": "  private void assertAvlWalker(Node<String, String> root, String... values) {\n    AvlIterator<String, String> iterator = new AvlIterator<String, String>();\n    iterator.reset(root);\n    for (String value : values) {\n      assertEquals(value, iterator.next().getKey());\n    }\n    assertNull(iterator.next());\n  }",
        "begin_line": 159,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 77)",
            "(line 161,col 5)-(line 161,col 25)",
            "(line 162,col 5)-(line 164,col 5)",
            "(line 165,col 5)-(line 165,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder()",
        "snippet": "  public void testAvlBuilder() {\n    assertAvlBuilder(1, \"a\");\n    assertAvlBuilder(2, \"(. a b)\");\n    assertAvlBuilder(3, \"(a b c)\");\n    assertAvlBuilder(4, \"(a b (. c d))\");\n    assertAvlBuilder(5, \"(a b (c d e))\");\n    assertAvlBuilder(6, \"((. a b) c (d e f))\");\n    assertAvlBuilder(7, \"((a b c) d (e f g))\");\n    assertAvlBuilder(8, \"((a b c) d (e f (. g h)))\");\n    assertAvlBuilder(9, \"((a b c) d (e f (g h i)))\");\n    assertAvlBuilder(10, \"((a b c) d ((. e f) g (h i j)))\");\n    assertAvlBuilder(11, \"((a b c) d ((e f g) h (i j k)))\");\n    assertAvlBuilder(12, \"((a b (. c d)) e ((f g h) i (j k l)))\");\n    assertAvlBuilder(13, \"((a b (c d e)) f ((g h i) j (k l m)))\");\n    assertAvlBuilder(14, \"(((. a b) c (d e f)) g ((h i j) k (l m n)))\");\n    assertAvlBuilder(15, \"(((a b c) d (e f g)) h ((i j k) l (m n o)))\");\n    assertAvlBuilder(16, \"(((a b c) d (e f g)) h ((i j k) l (m n (. o p))))\");\n    assertAvlBuilder(30, \"((((. a b) c (d e f)) g ((h i j) k (l m n))) o \"\n        + \"(((p q r) s (t u v)) w ((x y z) A (B C D))))\");\n    assertAvlBuilder(31, \"((((a b c) d (e f g)) h ((i j k) l (m n o))) p \"\n        + \"(((q r s) t (u v w)) x ((y z A) B (C D E))))\");\n  }",
        "begin_line": 168,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 169,col 29)",
            "(line 170,col 5)-(line 170,col 35)",
            "(line 171,col 5)-(line 171,col 35)",
            "(line 172,col 5)-(line 172,col 41)",
            "(line 173,col 5)-(line 173,col 41)",
            "(line 174,col 5)-(line 174,col 47)",
            "(line 175,col 5)-(line 175,col 47)",
            "(line 176,col 5)-(line 176,col 53)",
            "(line 177,col 5)-(line 177,col 53)",
            "(line 178,col 5)-(line 178,col 60)",
            "(line 179,col 5)-(line 179,col 60)",
            "(line 180,col 5)-(line 180,col 66)",
            "(line 181,col 5)-(line 181,col 66)",
            "(line 182,col 5)-(line 182,col 72)",
            "(line 183,col 5)-(line 183,col 72)",
            "(line 184,col 5)-(line 184,col 78)",
            "(line 185,col 5)-(line 186,col 58)",
            "(line 187,col 5)-(line 188,col 58)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.assertAvlBuilder(int, java.lang.String)",
        "snippet": "  private void assertAvlBuilder(int size, String expected) {\n    char[] values = \"abcdefghijklmnopqrstuvwxyzABCDE\".toCharArray();\n    AvlBuilder<String, String> avlBuilder = new AvlBuilder<String, String>();\n    avlBuilder.reset(size);\n    for (int i = 0; i < size; i++) {\n      avlBuilder.add(node(Character.toString(values[i])));\n    }\n    assertTree(expected, avlBuilder.root());\n  }",
        "begin_line": 191,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 192,col 5)-(line 192,col 68)",
            "(line 193,col 5)-(line 193,col 77)",
            "(line 194,col 5)-(line 194,col 27)",
            "(line 195,col 5)-(line 197,col 5)",
            "(line 198,col 5)-(line 198,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity()",
        "snippet": "  public void testDoubleCapacity() {\n    @SuppressWarnings(\"unchecked\") // Arrays and generics don't get along.\n    Node<String, String>[] oldTable = new Node[1];\n    oldTable[0] = node(node(node(\"a\"), \"b\", node(\"c\")), \"d\", node(node(\"e\"), \"f\", node(\"g\")));\n\n    Node<String, String>[] newTable = LinkedHashTreeMap.doubleCapacity(oldTable);\n    assertTree(\"(b d f)\", newTable[0]); // Even hash codes!\n    assertTree(\"(a c (. e g))\", newTable[1]); // Odd hash codes!\n  }",
        "begin_line": 201,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 202,col 5)-(line 203,col 50)",
            "(line 204,col 5)-(line 204,col 94)",
            "(line 206,col 5)-(line 206,col 81)",
            "(line 207,col 5)-(line 207,col 39)",
            "(line 208,col 5)-(line 208,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft()",
        "snippet": "  public void testDoubleCapacityAllNodesOnLeft() {\n    @SuppressWarnings(\"unchecked\") // Arrays and generics don't get along.\n    Node<String, String>[] oldTable = new Node[1];\n    oldTable[0] = node(node(\"b\"), \"d\", node(\"f\"));\n\n    Node<String, String>[] newTable = LinkedHashTreeMap.doubleCapacity(oldTable);\n    assertTree(\"(b d f)\", newTable[0]); // Even hash codes!\n    assertNull(newTable[1]); // Odd hash codes!\n\n    for (Node<?, ?> node : newTable) {\n      if (node != null) {\n        assertConsistent(node);\n      }\n    }\n  }",
        "begin_line": 211,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 212,col 5)-(line 213,col 50)",
            "(line 214,col 5)-(line 214,col 50)",
            "(line 216,col 5)-(line 216,col 81)",
            "(line 217,col 5)-(line 217,col 39)",
            "(line 218,col 5)-(line 218,col 28)",
            "(line 220,col 5)-(line 224,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.node(java.lang.String)",
        "snippet": "  private Node<String, String> node(String value) {\n    return new Node<String, String>(null, value, value.hashCode(), head, head);\n  }",
        "begin_line": 229,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 230,col 5)-(line 230,col 79)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.node(com.google.gson.internal.LinkedHashTreeMap.Node<java.lang.String, java.lang.String>, java.lang.String, com.google.gson.internal.LinkedHashTreeMap.Node<java.lang.String, java.lang.String>)",
        "snippet": "  private Node<String, String> node(Node<String, String> left, String value,\n      Node<String, String> right) {\n    Node<String, String> result = node(value);\n    if (left != null) {\n      result.left = left;\n      left.parent = result;\n    }\n    if (right != null) {\n      result.right = right;\n      right.parent = result;\n    }\n    return result;\n  }",
        "begin_line": 233,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 235,col 5)-(line 235,col 46)",
            "(line 236,col 5)-(line 239,col 5)",
            "(line 240,col 5)-(line 243,col 5)",
            "(line 244,col 5)-(line 244,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.assertTree(java.lang.String, com.google.gson.internal.LinkedHashTreeMap.Node<?, ?>)",
        "snippet": "  private void assertTree(String expected, Node<?, ?> root) {\n    assertEquals(expected, toString(root));\n    assertConsistent(root);\n  }",
        "begin_line": 247,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 248,col 43)",
            "(line 249,col 5)-(line 249,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.assertConsistent(com.google.gson.internal.LinkedHashTreeMap.Node<?, ?>)",
        "snippet": "  private void assertConsistent(Node<?, ?> node) {\n    int leftHeight = 0;\n    if (node.left != null) {\n      assertConsistent(node.left);\n      assertSame(node, node.left.parent);\n      leftHeight = node.left.height;\n    }\n    int rightHeight = 0;\n    if (node.right != null) {\n      assertConsistent(node.right);\n      assertSame(node, node.right.parent);\n      rightHeight = node.right.height;\n    }\n    if (node.parent != null) {\n      assertTrue(node.parent.left == node || node.parent.right == node);\n    }\n    if (Math.max(leftHeight, rightHeight) + 1 != node.height) {\n      fail();\n    }\n  }",
        "begin_line": 252,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 253,col 5)-(line 253,col 23)",
            "(line 254,col 5)-(line 258,col 5)",
            "(line 259,col 5)-(line 259,col 24)",
            "(line 260,col 5)-(line 264,col 5)",
            "(line 265,col 5)-(line 267,col 5)",
            "(line 268,col 5)-(line 270,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.toString(com.google.gson.internal.LinkedHashTreeMap.Node<?, ?>)",
        "snippet": "  private String toString(Node<?, ?> root) {\n    if (root == null) {\n      return \".\";\n    } else if (root.left == null && root.right == null) {\n      return String.valueOf(root.key);\n    } else {\n      return String.format(\"(%s %s %s)\", toString(root.left), root.key, toString(root.right));\n    }\n  }",
        "begin_line": 273,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 274,col 5)-(line 280,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.LinkedHashTreeMapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java",
        "signature": "com.google.gson.internal.LinkedHashTreeMapTest.assertIterationOrder(java.lang.Iterable<T>, T...)",
        "snippet": "  private <T> void assertIterationOrder(Iterable<T> actual, T... expected) {\n    ArrayList<T> actualList = new ArrayList<T>();\n    for (T t : actual) {\n      actualList.add(t);\n    }\n    assertEquals(Arrays.asList(expected), actualList);\n  }",
        "begin_line": 283,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 284,col 5)-(line 284,col 49)",
            "(line 285,col 5)-(line 287,col 5)",
            "(line 288,col 5)-(line 288,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testNumbers()",
        "snippet": "  public void testNumbers() throws IOException {\n    JsonElement element = new JsonParser().parse(\"[1, 2, 3]\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.beginArray();\n    assertEquals(1, reader.nextInt());\n    assertEquals(2L, reader.nextLong());\n    assertEquals(3.0, reader.nextDouble());\n    reader.endArray();\n  }",
        "begin_line": 28,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 29,col 5)-(line 29,col 62)",
            "(line 30,col 5)-(line 30,col 56)",
            "(line 31,col 5)-(line 31,col 24)",
            "(line 32,col 5)-(line 32,col 38)",
            "(line 33,col 5)-(line 33,col 40)",
            "(line 34,col 5)-(line 34,col 43)",
            "(line 35,col 5)-(line 35,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities()",
        "snippet": "  public void testLenientNansAndInfinities() throws IOException {\n    JsonElement element = new JsonParser().parse(\"[NaN, -Infinity, Infinity]\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.setLenient(true);\n    reader.beginArray();\n    assertTrue(Double.isNaN(reader.nextDouble()));\n    assertEquals(Double.NEGATIVE_INFINITY, reader.nextDouble());\n    assertEquals(Double.POSITIVE_INFINITY, reader.nextDouble());\n    reader.endArray();\n  }",
        "begin_line": 38,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 39,col 5)-(line 39,col 79)",
            "(line 40,col 5)-(line 40,col 56)",
            "(line 41,col 5)-(line 41,col 28)",
            "(line 42,col 5)-(line 42,col 24)",
            "(line 43,col 5)-(line 43,col 50)",
            "(line 44,col 5)-(line 44,col 64)",
            "(line 45,col 5)-(line 45,col 64)",
            "(line 46,col 5)-(line 46,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities()",
        "snippet": "  public void testStrictNansAndInfinities() throws IOException {\n    JsonElement element = new JsonParser().parse(\"[NaN, -Infinity, Infinity]\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.setLenient(false);\n    reader.beginArray();\n    try {\n      reader.nextDouble();\n      fail();\n    } catch (NumberFormatException e) {\n    }\n    assertEquals(\"NaN\", reader.nextString());\n    try {\n      reader.nextDouble();\n      fail();\n    } catch (NumberFormatException e) {\n    }\n    assertEquals(\"-Infinity\", reader.nextString());\n    try {\n      reader.nextDouble();\n      fail();\n    } catch (NumberFormatException e) {\n    }\n    assertEquals(\"Infinity\", reader.nextString());\n    reader.endArray();\n  }",
        "begin_line": 49,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 50,col 5)-(line 50,col 79)",
            "(line 51,col 5)-(line 51,col 56)",
            "(line 52,col 5)-(line 52,col 29)",
            "(line 53,col 5)-(line 53,col 24)",
            "(line 54,col 5)-(line 58,col 5)",
            "(line 59,col 5)-(line 59,col 45)",
            "(line 60,col 5)-(line 64,col 5)",
            "(line 65,col 5)-(line 65,col 51)",
            "(line 66,col 5)-(line 70,col 5)",
            "(line 71,col 5)-(line 71,col 50)",
            "(line 72,col 5)-(line 72,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings()",
        "snippet": "  public void testNumbersFromStrings() throws IOException {\n    JsonElement element = new JsonParser().parse(\"[\\\"1\\\", \\\"2\\\", \\\"3\\\"]\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.beginArray();\n    assertEquals(1, reader.nextInt());\n    assertEquals(2L, reader.nextLong());\n    assertEquals(3.0, reader.nextDouble());\n    reader.endArray();\n  }",
        "begin_line": 75,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 74)",
            "(line 77,col 5)-(line 77,col 56)",
            "(line 78,col 5)-(line 78,col 24)",
            "(line 79,col 5)-(line 79,col 38)",
            "(line 80,col 5)-(line 80,col 40)",
            "(line 81,col 5)-(line 81,col 43)",
            "(line 82,col 5)-(line 82,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers()",
        "snippet": "  public void testStringsFromNumbers() throws IOException {\n    JsonElement element = new JsonParser().parse(\"[1]\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.beginArray();\n    assertEquals(\"1\", reader.nextString());\n    reader.endArray();\n  }",
        "begin_line": 85,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 86,col 5)-(line 86,col 56)",
            "(line 87,col 5)-(line 87,col 56)",
            "(line 88,col 5)-(line 88,col 24)",
            "(line 89,col 5)-(line 89,col 43)",
            "(line 90,col 5)-(line 90,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testBooleans()",
        "snippet": "  public void testBooleans() throws IOException {\n    JsonElement element = new JsonParser().parse(\"[true, false]\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.beginArray();\n    assertEquals(true, reader.nextBoolean());\n    assertEquals(false, reader.nextBoolean());\n    reader.endArray();\n  }",
        "begin_line": 93,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 94,col 5)-(line 94,col 66)",
            "(line 95,col 5)-(line 95,col 56)",
            "(line 96,col 5)-(line 96,col 24)",
            "(line 97,col 5)-(line 97,col 45)",
            "(line 98,col 5)-(line 98,col 46)",
            "(line 99,col 5)-(line 99,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testNulls()",
        "snippet": "  public void testNulls() throws IOException {\n    JsonElement element = new JsonParser().parse(\"[null,null]\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.beginArray();\n    reader.nextNull();\n    reader.nextNull();\n    reader.endArray();\n  }",
        "begin_line": 102,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 103,col 64)",
            "(line 104,col 5)-(line 104,col 56)",
            "(line 105,col 5)-(line 105,col 24)",
            "(line 106,col 5)-(line 106,col 22)",
            "(line 107,col 5)-(line 107,col 22)",
            "(line 108,col 5)-(line 108,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testStrings()",
        "snippet": "  public void testStrings() throws IOException {\n    JsonElement element = new JsonParser().parse(\"[\\\"A\\\",\\\"B\\\"]\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.beginArray();\n    assertEquals(\"A\", reader.nextString());\n    assertEquals(\"B\", reader.nextString());\n    reader.endArray();\n  }",
        "begin_line": 111,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 112,col 5)-(line 112,col 66)",
            "(line 113,col 5)-(line 113,col 56)",
            "(line 114,col 5)-(line 114,col 24)",
            "(line 115,col 5)-(line 115,col 43)",
            "(line 116,col 5)-(line 116,col 43)",
            "(line 117,col 5)-(line 117,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testArray()",
        "snippet": "  public void testArray() throws IOException {\n    JsonElement element = new JsonParser().parse(\"[1, 2, 3]\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    assertEquals(JsonToken.BEGIN_ARRAY, reader.peek());\n    reader.beginArray();\n    assertEquals(JsonToken.NUMBER, reader.peek());\n    assertEquals(1, reader.nextInt());\n    assertEquals(JsonToken.NUMBER, reader.peek());\n    assertEquals(2, reader.nextInt());\n    assertEquals(JsonToken.NUMBER, reader.peek());\n    assertEquals(3, reader.nextInt());\n    assertEquals(JsonToken.END_ARRAY, reader.peek());\n    reader.endArray();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 120,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 62)",
            "(line 122,col 5)-(line 122,col 56)",
            "(line 123,col 5)-(line 123,col 55)",
            "(line 124,col 5)-(line 124,col 24)",
            "(line 125,col 5)-(line 125,col 50)",
            "(line 126,col 5)-(line 126,col 38)",
            "(line 127,col 5)-(line 127,col 50)",
            "(line 128,col 5)-(line 128,col 38)",
            "(line 129,col 5)-(line 129,col 50)",
            "(line 130,col 5)-(line 130,col 38)",
            "(line 131,col 5)-(line 131,col 53)",
            "(line 132,col 5)-(line 132,col 22)",
            "(line 133,col 5)-(line 133,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testObject()",
        "snippet": "  public void testObject() throws IOException {\n    JsonElement element = new JsonParser().parse(\"{\\\"A\\\": 1, \\\"B\\\": 2}\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    assertEquals(JsonToken.BEGIN_OBJECT, reader.peek());\n    reader.beginObject();\n    assertEquals(JsonToken.NAME, reader.peek());\n    assertEquals(\"A\", reader.nextName());\n    assertEquals(JsonToken.NUMBER, reader.peek());\n    assertEquals(1, reader.nextInt());\n    assertEquals(JsonToken.NAME, reader.peek());\n    assertEquals(\"B\", reader.nextName());\n    assertEquals(JsonToken.NUMBER, reader.peek());\n    assertEquals(2, reader.nextInt());\n    assertEquals(JsonToken.END_OBJECT, reader.peek());\n    reader.endObject();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 136,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 137,col 73)",
            "(line 138,col 5)-(line 138,col 56)",
            "(line 139,col 5)-(line 139,col 56)",
            "(line 140,col 5)-(line 140,col 25)",
            "(line 141,col 5)-(line 141,col 48)",
            "(line 142,col 5)-(line 142,col 41)",
            "(line 143,col 5)-(line 143,col 50)",
            "(line 144,col 5)-(line 144,col 38)",
            "(line 145,col 5)-(line 145,col 48)",
            "(line 146,col 5)-(line 146,col 41)",
            "(line 147,col 5)-(line 147,col 50)",
            "(line 148,col 5)-(line 148,col 38)",
            "(line 149,col 5)-(line 149,col 54)",
            "(line 150,col 5)-(line 150,col 23)",
            "(line 151,col 5)-(line 151,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testEmptyArray()",
        "snippet": "  public void testEmptyArray() throws IOException {\n    JsonElement element = new JsonParser().parse(\"[]\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.beginArray();\n    reader.endArray();\n  }",
        "begin_line": 154,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 155,col 5)-(line 155,col 55)",
            "(line 156,col 5)-(line 156,col 56)",
            "(line 157,col 5)-(line 157,col 24)",
            "(line 158,col 5)-(line 158,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays()",
        "snippet": "  public void testNestedArrays() throws IOException {\n    JsonElement element = new JsonParser().parse(\"[[],[[]]]\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.beginArray();\n    reader.beginArray();\n    reader.endArray();\n    reader.beginArray();\n    reader.beginArray();\n    reader.endArray();\n    reader.endArray();\n    reader.endArray();\n  }",
        "begin_line": 161,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 62)",
            "(line 163,col 5)-(line 163,col 56)",
            "(line 164,col 5)-(line 164,col 24)",
            "(line 165,col 5)-(line 165,col 24)",
            "(line 166,col 5)-(line 166,col 22)",
            "(line 167,col 5)-(line 167,col 24)",
            "(line 168,col 5)-(line 168,col 24)",
            "(line 169,col 5)-(line 169,col 22)",
            "(line 170,col 5)-(line 170,col 22)",
            "(line 171,col 5)-(line 171,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects()",
        "snippet": "  public void testNestedObjects() throws IOException {\n    JsonElement element = new JsonParser().parse(\"{\\\"A\\\":{},\\\"B\\\":{\\\"C\\\":{}}}\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.beginObject();\n    assertEquals(\"A\", reader.nextName());\n    reader.beginObject();\n    reader.endObject();\n    assertEquals(\"B\", reader.nextName());\n    reader.beginObject();\n    assertEquals(\"C\", reader.nextName());\n    reader.beginObject();\n    reader.endObject();\n    reader.endObject();\n    reader.endObject();\n  }",
        "begin_line": 174,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 175,col 5)-(line 175,col 80)",
            "(line 176,col 5)-(line 176,col 56)",
            "(line 177,col 5)-(line 177,col 25)",
            "(line 178,col 5)-(line 178,col 41)",
            "(line 179,col 5)-(line 179,col 25)",
            "(line 180,col 5)-(line 180,col 23)",
            "(line 181,col 5)-(line 181,col 41)",
            "(line 182,col 5)-(line 182,col 25)",
            "(line 183,col 5)-(line 183,col 41)",
            "(line 184,col 5)-(line 184,col 25)",
            "(line 185,col 5)-(line 185,col 23)",
            "(line 186,col 5)-(line 186,col 23)",
            "(line 187,col 5)-(line 187,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testEmptyObject()",
        "snippet": "  public void testEmptyObject() throws IOException {\n    JsonElement element = new JsonParser().parse(\"{}\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.beginObject();\n    reader.endObject();\n  }",
        "begin_line": 190,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 191,col 5)-(line 191,col 55)",
            "(line 192,col 5)-(line 192,col 56)",
            "(line 193,col 5)-(line 193,col 25)",
            "(line 194,col 5)-(line 194,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue()",
        "snippet": "  public void testSkipValue() throws IOException {\n    JsonElement element = new JsonParser().parse(\"[\\\"A\\\",{\\\"B\\\":[[]]},\\\"C\\\",[[]],\\\"D\\\",null]\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.beginArray();\n    assertEquals(\"A\", reader.nextString());\n    reader.skipValue();\n    assertEquals(\"C\", reader.nextString());\n    reader.skipValue();\n    assertEquals(\"D\", reader.nextString());\n    reader.skipValue();\n    reader.endArray();\n  }",
        "begin_line": 197,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 198,col 5)-(line 198,col 95)",
            "(line 199,col 5)-(line 199,col 56)",
            "(line 200,col 5)-(line 200,col 24)",
            "(line 201,col 5)-(line 201,col 43)",
            "(line 202,col 5)-(line 202,col 23)",
            "(line 203,col 5)-(line 203,col 43)",
            "(line 204,col 5)-(line 204,col 23)",
            "(line 205,col 5)-(line 205,col 43)",
            "(line 206,col 5)-(line 206,col 23)",
            "(line 207,col 5)-(line 207,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testWrongType()",
        "snippet": "  public void testWrongType() throws IOException {\n    JsonElement element = new JsonParser().parse(\"[[],\\\"A\\\"]\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.beginArray();\n    try {\n      reader.nextBoolean();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.nextNull();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.nextString();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.nextInt();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.nextLong();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.nextDouble();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.nextName();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.beginObject();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.endArray();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.endObject();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    reader.beginArray();\n    reader.endArray();\n\n    try {\n      reader.nextBoolean();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.nextNull();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.nextInt();\n      fail();\n    } catch (NumberFormatException expected) {\n    }\n    try {\n      reader.nextLong();\n      fail();\n    } catch (NumberFormatException expected) {\n    }\n    try {\n      reader.nextDouble();\n      fail();\n    } catch (NumberFormatException expected) {\n    }\n    try {\n      reader.nextName();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    assertEquals(\"A\", reader.nextString());\n    reader.endArray();\n  }",
        "begin_line": 210,
        "end_line": 299,
        "comment": "",
        "child_ranges": [
            "(line 211,col 5)-(line 211,col 63)",
            "(line 212,col 5)-(line 212,col 56)",
            "(line 213,col 5)-(line 213,col 24)",
            "(line 214,col 5)-(line 218,col 5)",
            "(line 219,col 5)-(line 223,col 5)",
            "(line 224,col 5)-(line 228,col 5)",
            "(line 229,col 5)-(line 233,col 5)",
            "(line 234,col 5)-(line 238,col 5)",
            "(line 239,col 5)-(line 243,col 5)",
            "(line 244,col 5)-(line 248,col 5)",
            "(line 249,col 5)-(line 253,col 5)",
            "(line 254,col 5)-(line 258,col 5)",
            "(line 259,col 5)-(line 263,col 5)",
            "(line 264,col 5)-(line 264,col 24)",
            "(line 265,col 5)-(line 265,col 22)",
            "(line 267,col 5)-(line 271,col 5)",
            "(line 272,col 5)-(line 276,col 5)",
            "(line 277,col 5)-(line 281,col 5)",
            "(line 282,col 5)-(line 286,col 5)",
            "(line 287,col 5)-(line 291,col 5)",
            "(line 292,col 5)-(line 296,col 5)",
            "(line 297,col 5)-(line 297,col 43)",
            "(line 298,col 5)-(line 298,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonElementReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
        "signature": "com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose()",
        "snippet": "  public void testEarlyClose() throws IOException {\n    JsonElement element = new JsonParser().parse(\"[1, 2, 3]\");\n    JsonTreeReader reader = new JsonTreeReader(element);\n    reader.beginArray();\n    reader.close();\n    try {\n      reader.peek();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 301,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 302,col 5)-(line 302,col 62)",
            "(line 303,col 5)-(line 303,col 56)",
            "(line 304,col 5)-(line 304,col 24)",
            "(line 305,col 5)-(line 305,col 19)",
            "(line 306,col 5)-(line 310,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonTreeWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java",
        "signature": "com.google.gson.internal.bind.JsonTreeWriterTest.testArray()",
        "snippet": "  public void testArray() throws IOException {\n    JsonTreeWriter writer = new JsonTreeWriter();\n    writer.beginArray();\n    writer.value(1);\n    writer.value(2);\n    writer.value(3);\n    writer.endArray();\n    assertEquals(\"[1,2,3]\", writer.get().toString());\n  }",
        "begin_line": 25,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 26,col 5)-(line 26,col 49)",
            "(line 27,col 5)-(line 27,col 24)",
            "(line 28,col 5)-(line 28,col 20)",
            "(line 29,col 5)-(line 29,col 20)",
            "(line 30,col 5)-(line 30,col 20)",
            "(line 31,col 5)-(line 31,col 22)",
            "(line 32,col 5)-(line 32,col 53)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonTreeWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java",
        "signature": "com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray()",
        "snippet": "  public void testNestedArray() throws IOException {\n    JsonTreeWriter writer = new JsonTreeWriter();\n    writer.beginArray();\n    writer.beginArray();\n    writer.endArray();\n    writer.beginArray();\n    writer.beginArray();\n    writer.endArray();\n    writer.endArray();\n    writer.endArray();\n    assertEquals(\"[[],[[]]]\", writer.get().toString());\n  }",
        "begin_line": 35,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 36,col 5)-(line 36,col 49)",
            "(line 37,col 5)-(line 37,col 24)",
            "(line 38,col 5)-(line 38,col 24)",
            "(line 39,col 5)-(line 39,col 22)",
            "(line 40,col 5)-(line 40,col 24)",
            "(line 41,col 5)-(line 41,col 24)",
            "(line 42,col 5)-(line 42,col 22)",
            "(line 43,col 5)-(line 43,col 22)",
            "(line 44,col 5)-(line 44,col 22)",
            "(line 45,col 5)-(line 45,col 55)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonTreeWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java",
        "signature": "com.google.gson.internal.bind.JsonTreeWriterTest.testObject()",
        "snippet": "  public void testObject() throws IOException {\n    JsonTreeWriter writer = new JsonTreeWriter();\n    writer.beginObject();\n    writer.name(\"A\").value(1);\n    writer.name(\"B\").value(2);\n    writer.endObject();\n    assertEquals(\"{\\\"A\\\":1,\\\"B\\\":2}\", writer.get().toString());\n  }",
        "begin_line": 48,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 49)",
            "(line 50,col 5)-(line 50,col 25)",
            "(line 51,col 5)-(line 51,col 30)",
            "(line 52,col 5)-(line 52,col 30)",
            "(line 53,col 5)-(line 53,col 23)",
            "(line 54,col 5)-(line 54,col 63)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonTreeWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java",
        "signature": "com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject()",
        "snippet": "  public void testNestedObject() throws IOException {\n    JsonTreeWriter writer = new JsonTreeWriter();\n    writer.beginObject();\n    writer.name(\"A\");\n    writer.beginObject();\n    writer.name(\"B\");\n    writer.beginObject();\n    writer.endObject();\n    writer.endObject();\n    writer.name(\"C\");\n    writer.beginObject();\n    writer.endObject();\n    writer.endObject();\n    assertEquals(\"{\\\"A\\\":{\\\"B\\\":{}},\\\"C\\\":{}}\", writer.get().toString());\n  }",
        "begin_line": 57,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 58,col 49)",
            "(line 59,col 5)-(line 59,col 25)",
            "(line 60,col 5)-(line 60,col 21)",
            "(line 61,col 5)-(line 61,col 25)",
            "(line 62,col 5)-(line 62,col 21)",
            "(line 63,col 5)-(line 63,col 25)",
            "(line 64,col 5)-(line 64,col 23)",
            "(line 65,col 5)-(line 65,col 23)",
            "(line 66,col 5)-(line 66,col 21)",
            "(line 67,col 5)-(line 67,col 25)",
            "(line 68,col 5)-(line 68,col 23)",
            "(line 69,col 5)-(line 69,col 23)",
            "(line 70,col 5)-(line 70,col 73)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonTreeWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java",
        "signature": "com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose()",
        "snippet": "  public void testWriteAfterClose() throws Exception {\n    JsonTreeWriter writer = new JsonTreeWriter();\n    writer.setLenient(true);\n    writer.beginArray();\n    writer.value(\"A\");\n    writer.endArray();\n    writer.close();\n    try {\n      writer.beginArray();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 73,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 74,col 5)-(line 74,col 49)",
            "(line 75,col 5)-(line 75,col 28)",
            "(line 76,col 5)-(line 76,col 24)",
            "(line 77,col 5)-(line 77,col 22)",
            "(line 78,col 5)-(line 78,col 22)",
            "(line 79,col 5)-(line 79,col 19)",
            "(line 80,col 5)-(line 84,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonTreeWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java",
        "signature": "com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose()",
        "snippet": "  public void testPrematureClose() throws Exception {\n    JsonTreeWriter writer = new JsonTreeWriter();\n    writer.setLenient(true);\n    writer.beginArray();\n    try {\n      writer.close();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 87,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 88,col 49)",
            "(line 89,col 5)-(line 89,col 28)",
            "(line 90,col 5)-(line 90,col 24)",
            "(line 91,col 5)-(line 95,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonTreeWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java",
        "signature": "com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse()",
        "snippet": "  public void testSerializeNullsFalse() throws IOException {\n    JsonTreeWriter writer = new JsonTreeWriter();\n    writer.setSerializeNulls(false);\n    writer.beginObject();\n    writer.name(\"A\");\n    writer.nullValue();\n    writer.endObject();\n    assertEquals(\"{}\", writer.get().toString());\n  }",
        "begin_line": 98,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 99,col 5)-(line 99,col 49)",
            "(line 100,col 5)-(line 100,col 36)",
            "(line 101,col 5)-(line 101,col 25)",
            "(line 102,col 5)-(line 102,col 21)",
            "(line 103,col 5)-(line 103,col 23)",
            "(line 104,col 5)-(line 104,col 23)",
            "(line 105,col 5)-(line 105,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonTreeWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java",
        "signature": "com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue()",
        "snippet": "  public void testSerializeNullsTrue() throws IOException {\n    JsonTreeWriter writer = new JsonTreeWriter();\n    writer.setSerializeNulls(true);\n    writer.beginObject();\n    writer.name(\"A\");\n    writer.nullValue();\n    writer.endObject();\n    assertEquals(\"{\\\"A\\\":null}\", writer.get().toString());\n  }",
        "begin_line": 108,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 109,col 49)",
            "(line 110,col 5)-(line 110,col 35)",
            "(line 111,col 5)-(line 111,col 25)",
            "(line 112,col 5)-(line 112,col 21)",
            "(line 113,col 5)-(line 113,col 23)",
            "(line 114,col 5)-(line 114,col 23)",
            "(line 115,col 5)-(line 115,col 58)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonTreeWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java",
        "signature": "com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter()",
        "snippet": "  public void testEmptyWriter() {\n    JsonTreeWriter writer = new JsonTreeWriter();\n    assertEquals(JsonNull.INSTANCE, writer.get());\n  }",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 49)",
            "(line 120,col 5)-(line 120,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonTreeWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java",
        "signature": "com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities()",
        "snippet": "  public void testLenientNansAndInfinities() throws IOException {\n    JsonTreeWriter writer = new JsonTreeWriter();\n    writer.setLenient(true);\n    writer.beginArray();\n    writer.value(Double.NaN);\n    writer.value(Double.NEGATIVE_INFINITY);\n    writer.value(Double.POSITIVE_INFINITY);\n    writer.endArray();\n    assertEquals(\"[NaN,-Infinity,Infinity]\", writer.get().toString());\n  }",
        "begin_line": 123,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 124,col 5)-(line 124,col 49)",
            "(line 125,col 5)-(line 125,col 28)",
            "(line 126,col 5)-(line 126,col 24)",
            "(line 127,col 5)-(line 127,col 29)",
            "(line 128,col 5)-(line 128,col 43)",
            "(line 129,col 5)-(line 129,col 43)",
            "(line 130,col 5)-(line 130,col 22)",
            "(line 131,col 5)-(line 131,col 70)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonTreeWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java",
        "signature": "com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities()",
        "snippet": "  public void testStrictNansAndInfinities() throws IOException {\n    JsonTreeWriter writer = new JsonTreeWriter();\n    writer.setLenient(false);\n    writer.beginArray();\n    try {\n      writer.value(Double.NaN);\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n    try {\n      writer.value(Double.NEGATIVE_INFINITY);\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n    try {\n      writer.value(Double.POSITIVE_INFINITY);\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n  }",
        "begin_line": 134,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 135,col 5)-(line 135,col 49)",
            "(line 136,col 5)-(line 136,col 29)",
            "(line 137,col 5)-(line 137,col 24)",
            "(line 138,col 5)-(line 142,col 5)",
            "(line 143,col 5)-(line 147,col 5)",
            "(line 148,col 5)-(line 152,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.internal.bind.JsonTreeWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java",
        "signature": "com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities()",
        "snippet": "  public void testStrictBoxedNansAndInfinities() throws IOException {\n    JsonTreeWriter writer = new JsonTreeWriter();\n    writer.setLenient(false);\n    writer.beginArray();\n    try {\n      writer.value(new Double(Double.NaN));\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n    try {\n      writer.value(new Double(Double.NEGATIVE_INFINITY));\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n    try {\n      writer.value(new Double(Double.POSITIVE_INFINITY));\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n  }",
        "begin_line": 155,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 156,col 5)-(line 156,col 49)",
            "(line 157,col 5)-(line 157,col 29)",
            "(line 158,col 5)-(line 158,col 24)",
            "(line 159,col 5)-(line 163,col 5)",
            "(line 164,col 5)-(line 168,col 5)",
            "(line 169,col 5)-(line 173,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testReadArray()",
        "snippet": "  public void testReadArray() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[true, true]\"));\n    reader.beginArray();\n    assertEquals(true, reader.nextBoolean());\n    assertEquals(true, reader.nextBoolean());\n    reader.endArray();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 38,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 39,col 5)-(line 39,col 63)",
            "(line 40,col 5)-(line 40,col 24)",
            "(line 41,col 5)-(line 41,col 45)",
            "(line 42,col 5)-(line 42,col 45)",
            "(line 43,col 5)-(line 43,col 22)",
            "(line 44,col 5)-(line 44,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testReadEmptyArray()",
        "snippet": "  public void testReadEmptyArray() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[]\"));\n    reader.beginArray();\n    assertFalse(reader.hasNext());\n    reader.endArray();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 47,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 48,col 53)",
            "(line 49,col 5)-(line 49,col 24)",
            "(line 50,col 5)-(line 50,col 34)",
            "(line 51,col 5)-(line 51,col 22)",
            "(line 52,col 5)-(line 52,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testReadObject()",
        "snippet": "  public void testReadObject() throws IOException {\n    JsonReader reader = new JsonReader(reader(\n        \"{\\\"a\\\": \\\"android\\\", \\\"b\\\": \\\"banana\\\"}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    assertEquals(\"android\", reader.nextString());\n    assertEquals(\"b\", reader.nextName());\n    assertEquals(\"banana\", reader.nextString());\n    reader.endObject();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 55,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 56,col 5)-(line 57,col 52)",
            "(line 58,col 5)-(line 58,col 25)",
            "(line 59,col 5)-(line 59,col 41)",
            "(line 60,col 5)-(line 60,col 49)",
            "(line 61,col 5)-(line 61,col 41)",
            "(line 62,col 5)-(line 62,col 48)",
            "(line 63,col 5)-(line 63,col 23)",
            "(line 64,col 5)-(line 64,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testReadEmptyObject()",
        "snippet": "  public void testReadEmptyObject() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{}\"));\n    reader.beginObject();\n    assertFalse(reader.hasNext());\n    reader.endObject();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 68,col 5)-(line 68,col 53)",
            "(line 69,col 5)-(line 69,col 25)",
            "(line 70,col 5)-(line 70,col 34)",
            "(line 71,col 5)-(line 71,col 23)",
            "(line 72,col 5)-(line 72,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testSkipArray()",
        "snippet": "  public void testSkipArray() throws IOException {\n    JsonReader reader = new JsonReader(reader(\n        \"{\\\"a\\\": [\\\"one\\\", \\\"two\\\", \\\"three\\\"], \\\"b\\\": 123}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    reader.skipValue();\n    assertEquals(\"b\", reader.nextName());\n    assertEquals(123, reader.nextInt());\n    reader.endObject();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 75,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 77,col 63)",
            "(line 78,col 5)-(line 78,col 25)",
            "(line 79,col 5)-(line 79,col 41)",
            "(line 80,col 5)-(line 80,col 23)",
            "(line 81,col 5)-(line 81,col 41)",
            "(line 82,col 5)-(line 82,col 40)",
            "(line 83,col 5)-(line 83,col 23)",
            "(line 84,col 5)-(line 84,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testSkipArrayAfterPeek()",
        "snippet": "  public void testSkipArrayAfterPeek() throws Exception {\n    JsonReader reader = new JsonReader(reader(\n        \"{\\\"a\\\": [\\\"one\\\", \\\"two\\\", \\\"three\\\"], \\\"b\\\": 123}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    assertEquals(BEGIN_ARRAY, reader.peek());\n    reader.skipValue();\n    assertEquals(\"b\", reader.nextName());\n    assertEquals(123, reader.nextInt());\n    reader.endObject();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 87,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 89,col 63)",
            "(line 90,col 5)-(line 90,col 25)",
            "(line 91,col 5)-(line 91,col 41)",
            "(line 92,col 5)-(line 92,col 45)",
            "(line 93,col 5)-(line 93,col 23)",
            "(line 94,col 5)-(line 94,col 41)",
            "(line 95,col 5)-(line 95,col 40)",
            "(line 96,col 5)-(line 96,col 23)",
            "(line 97,col 5)-(line 97,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testSkipTopLevelObject()",
        "snippet": "  public void testSkipTopLevelObject() throws Exception {\n    JsonReader reader = new JsonReader(reader(\n        \"{\\\"a\\\": [\\\"one\\\", \\\"two\\\", \\\"three\\\"], \\\"b\\\": 123}\"));\n    reader.skipValue();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 100,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 102,col 63)",
            "(line 103,col 5)-(line 103,col 23)",
            "(line 104,col 5)-(line 104,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testSkipObject()",
        "snippet": "  public void testSkipObject() throws IOException {\n    JsonReader reader = new JsonReader(reader(\n        \"{\\\"a\\\": { \\\"c\\\": [], \\\"d\\\": [true, true, {}] }, \\\"b\\\": \\\"banana\\\"}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    reader.skipValue();\n    assertEquals(\"b\", reader.nextName());\n    reader.skipValue();\n    reader.endObject();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 107,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 108,col 5)-(line 109,col 79)",
            "(line 110,col 5)-(line 110,col 25)",
            "(line 111,col 5)-(line 111,col 41)",
            "(line 112,col 5)-(line 112,col 23)",
            "(line 113,col 5)-(line 113,col 41)",
            "(line 114,col 5)-(line 114,col 23)",
            "(line 115,col 5)-(line 115,col 23)",
            "(line 116,col 5)-(line 116,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testSkipObjectAfterPeek()",
        "snippet": "  public void testSkipObjectAfterPeek() throws Exception {\n    String json = \"{\" + \"  \\\"one\\\": { \\\"num\\\": 1 }\"\n        + \", \\\"two\\\": { \\\"num\\\": 2 }\" + \", \\\"three\\\": { \\\"num\\\": 3 }\" + \"}\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.beginObject();\n    assertEquals(\"one\", reader.nextName());\n    assertEquals(BEGIN_OBJECT, reader.peek());\n    reader.skipValue();\n    assertEquals(\"two\", reader.nextName());\n    assertEquals(BEGIN_OBJECT, reader.peek());\n    reader.skipValue();\n    assertEquals(\"three\", reader.nextName());\n    reader.skipValue();\n    reader.endObject();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 119,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 120,col 5)-(line 121,col 76)",
            "(line 122,col 5)-(line 122,col 53)",
            "(line 123,col 5)-(line 123,col 25)",
            "(line 124,col 5)-(line 124,col 43)",
            "(line 125,col 5)-(line 125,col 46)",
            "(line 126,col 5)-(line 126,col 23)",
            "(line 127,col 5)-(line 127,col 43)",
            "(line 128,col 5)-(line 128,col 46)",
            "(line 129,col 5)-(line 129,col 23)",
            "(line 130,col 5)-(line 130,col 45)",
            "(line 131,col 5)-(line 131,col 23)",
            "(line 132,col 5)-(line 132,col 23)",
            "(line 133,col 5)-(line 133,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testSkipInteger()",
        "snippet": "  public void testSkipInteger() throws IOException {\n    JsonReader reader = new JsonReader(reader(\n        \"{\\\"a\\\":123456789,\\\"b\\\":-123456789}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    reader.skipValue();\n    assertEquals(\"b\", reader.nextName());\n    reader.skipValue();\n    reader.endObject();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 136,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 138,col 47)",
            "(line 139,col 5)-(line 139,col 25)",
            "(line 140,col 5)-(line 140,col 41)",
            "(line 141,col 5)-(line 141,col 23)",
            "(line 142,col 5)-(line 142,col 41)",
            "(line 143,col 5)-(line 143,col 23)",
            "(line 144,col 5)-(line 144,col 23)",
            "(line 145,col 5)-(line 145,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testSkipDouble()",
        "snippet": "  public void testSkipDouble() throws IOException {\n    JsonReader reader = new JsonReader(reader(\n        \"{\\\"a\\\":-123.456e-789,\\\"b\\\":123456789.0}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    reader.skipValue();\n    assertEquals(\"b\", reader.nextName());\n    reader.skipValue();\n    reader.endObject();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 148,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 150,col 52)",
            "(line 151,col 5)-(line 151,col 25)",
            "(line 152,col 5)-(line 152,col 41)",
            "(line 153,col 5)-(line 153,col 23)",
            "(line 154,col 5)-(line 154,col 41)",
            "(line 155,col 5)-(line 155,col 23)",
            "(line 156,col 5)-(line 156,col 23)",
            "(line 157,col 5)-(line 157,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testHelloWorld()",
        "snippet": "  public void testHelloWorld() throws IOException {\n    String json = \"{\\n\" +\n        \"   \\\"hello\\\": true,\\n\" +\n        \"   \\\"foo\\\": [\\\"world\\\"]\\n\" +\n        \"}\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.beginObject();\n    assertEquals(\"hello\", reader.nextName());\n    assertEquals(true, reader.nextBoolean());\n    assertEquals(\"foo\", reader.nextName());\n    reader.beginArray();\n    assertEquals(\"world\", reader.nextString());\n    reader.endArray();\n    reader.endObject();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 160,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 161,col 5)-(line 164,col 12)",
            "(line 165,col 5)-(line 165,col 53)",
            "(line 166,col 5)-(line 166,col 25)",
            "(line 167,col 5)-(line 167,col 45)",
            "(line 168,col 5)-(line 168,col 45)",
            "(line 169,col 5)-(line 169,col 43)",
            "(line 170,col 5)-(line 170,col 24)",
            "(line 171,col 5)-(line 171,col 47)",
            "(line 172,col 5)-(line 172,col 22)",
            "(line 173,col 5)-(line 173,col 23)",
            "(line 174,col 5)-(line 174,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testNulls()",
        "snippet": "  public void testNulls() {\n    try {\n      new JsonReader(null);\n      fail();\n    } catch (NullPointerException expected) {\n    }\n  }",
        "begin_line": 177,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 178,col 5)-(line 182,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testEmptyString()",
        "snippet": "  public void testEmptyString() {\n    try {\n      new JsonReader(reader(\"\")).beginArray();\n      fail();\n    } catch (IOException expected) {\n    }\n    try {\n      new JsonReader(reader(\"\")).beginObject();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 185,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 186,col 5)-(line 190,col 5)",
            "(line 191,col 5)-(line 195,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testCharacterUnescaping()",
        "snippet": "  public void testCharacterUnescaping() throws IOException {\n    String json = \"[\\\"a\\\",\"\n        + \"\\\"a\\\\\\\"\\\",\"\n        + \"\\\"\\\\\\\"\\\",\"\n        + \"\\\":\\\",\"\n        + \"\\\",\\\",\"\n        + \"\\\"\\\\b\\\",\"\n        + \"\\\"\\\\f\\\",\"\n        + \"\\\"\\\\n\\\",\"\n        + \"\\\"\\\\r\\\",\"\n        + \"\\\"\\\\t\\\",\"\n        + \"\\\" \\\",\"\n        + \"\\\"\\\\\\\\\\\",\"\n        + \"\\\"{\\\",\"\n        + \"\\\"}\\\",\"\n        + \"\\\"[\\\",\"\n        + \"\\\"]\\\",\"\n        + \"\\\"\\\\u0000\\\",\"\n        + \"\\\"\\\\u0019\\\",\"\n        + \"\\\"\\\\u20AC\\\"\"\n        + \"]\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.beginArray();\n    assertEquals(\"a\", reader.nextString());\n    assertEquals(\"a\\\"\", reader.nextString());\n    assertEquals(\"\\\"\", reader.nextString());\n    assertEquals(\":\", reader.nextString());\n    assertEquals(\",\", reader.nextString());\n    assertEquals(\"\\b\", reader.nextString());\n    assertEquals(\"\\f\", reader.nextString());\n    assertEquals(\"\\n\", reader.nextString());\n    assertEquals(\"\\r\", reader.nextString());\n    assertEquals(\"\\t\", reader.nextString());\n    assertEquals(\" \", reader.nextString());\n    assertEquals(\"\\\\\", reader.nextString());\n    assertEquals(\"{\", reader.nextString());\n    assertEquals(\"}\", reader.nextString());\n    assertEquals(\"[\", reader.nextString());\n    assertEquals(\"]\", reader.nextString());\n    assertEquals(\"\\0\", reader.nextString());\n    assertEquals(\"\\u0019\", reader.nextString());\n    assertEquals(\"\\u20AC\", reader.nextString());\n    reader.endArray();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 198,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 199,col 5)-(line 218,col 14)",
            "(line 219,col 5)-(line 219,col 53)",
            "(line 220,col 5)-(line 220,col 24)",
            "(line 221,col 5)-(line 221,col 43)",
            "(line 222,col 5)-(line 222,col 45)",
            "(line 223,col 5)-(line 223,col 44)",
            "(line 224,col 5)-(line 224,col 43)",
            "(line 225,col 5)-(line 225,col 43)",
            "(line 226,col 5)-(line 226,col 44)",
            "(line 227,col 5)-(line 227,col 44)",
            "(line 228,col 5)-(line 228,col 44)",
            "(line 229,col 5)-(line 229,col 44)",
            "(line 230,col 5)-(line 230,col 44)",
            "(line 231,col 5)-(line 231,col 43)",
            "(line 232,col 5)-(line 232,col 44)",
            "(line 233,col 5)-(line 233,col 43)",
            "(line 234,col 5)-(line 234,col 43)",
            "(line 235,col 5)-(line 235,col 43)",
            "(line 236,col 5)-(line 236,col 43)",
            "(line 237,col 5)-(line 237,col 44)",
            "(line 238,col 5)-(line 238,col 48)",
            "(line 239,col 5)-(line 239,col 48)",
            "(line 240,col 5)-(line 240,col 22)",
            "(line 241,col 5)-(line 241,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testUnescapingInvalidCharacters()",
        "snippet": "  public void testUnescapingInvalidCharacters() throws IOException {\n    String json = \"[\\\"\\\\u000g\\\"]\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.beginArray();\n    try {\n      reader.nextString();\n      fail();\n    } catch (NumberFormatException expected) {\n    }\n  }",
        "begin_line": 244,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 245,col 34)",
            "(line 246,col 5)-(line 246,col 53)",
            "(line 247,col 5)-(line 247,col 24)",
            "(line 248,col 5)-(line 252,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testUnescapingTruncatedCharacters()",
        "snippet": "  public void testUnescapingTruncatedCharacters() throws IOException {\n    String json = \"[\\\"\\\\u000\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.beginArray();\n    try {\n      reader.nextString();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 255,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 256,col 5)-(line 256,col 30)",
            "(line 257,col 5)-(line 257,col 53)",
            "(line 258,col 5)-(line 258,col 24)",
            "(line 259,col 5)-(line 263,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testUnescapingTruncatedSequence()",
        "snippet": "  public void testUnescapingTruncatedSequence() throws IOException {\n    String json = \"[\\\"\\\\\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.beginArray();\n    try {\n      reader.nextString();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 266,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 267,col 5)-(line 267,col 26)",
            "(line 268,col 5)-(line 268,col 53)",
            "(line 269,col 5)-(line 269,col 24)",
            "(line 270,col 5)-(line 274,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testIntegersWithFractionalPartSpecified()",
        "snippet": "  public void testIntegersWithFractionalPartSpecified() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[1.0,1.0,1.0]\"));\n    reader.beginArray();\n    assertEquals(1.0, reader.nextDouble());\n    assertEquals(1, reader.nextInt());\n    assertEquals(1L, reader.nextLong());\n  }",
        "begin_line": 277,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 64)",
            "(line 279,col 5)-(line 279,col 24)",
            "(line 280,col 5)-(line 280,col 43)",
            "(line 281,col 5)-(line 281,col 38)",
            "(line 282,col 5)-(line 282,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testDoubles()",
        "snippet": "  public void testDoubles() throws IOException {\n    String json = \"[-0.0,\"\n        + \"1.0,\"\n        + \"1.7976931348623157E308,\"\n        + \"4.9E-324,\"\n        + \"0.0,\"\n        + \"-0.5,\"\n        + \"2.2250738585072014E-308,\"\n        + \"3.141592653589793,\"\n        + \"2.718281828459045]\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.beginArray();\n    assertEquals(-0.0, reader.nextDouble());\n    assertEquals(1.0, reader.nextDouble());\n    assertEquals(1.7976931348623157E308, reader.nextDouble());\n    assertEquals(4.9E-324, reader.nextDouble());\n    assertEquals(0.0, reader.nextDouble());\n    assertEquals(-0.5, reader.nextDouble());\n    assertEquals(2.2250738585072014E-308, reader.nextDouble());\n    assertEquals(3.141592653589793, reader.nextDouble());\n    assertEquals(2.718281828459045, reader.nextDouble());\n    reader.endArray();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 285,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 286,col 5)-(line 294,col 31)",
            "(line 295,col 5)-(line 295,col 53)",
            "(line 296,col 5)-(line 296,col 24)",
            "(line 297,col 5)-(line 297,col 44)",
            "(line 298,col 5)-(line 298,col 43)",
            "(line 299,col 5)-(line 299,col 62)",
            "(line 300,col 5)-(line 300,col 48)",
            "(line 301,col 5)-(line 301,col 43)",
            "(line 302,col 5)-(line 302,col 44)",
            "(line 303,col 5)-(line 303,col 63)",
            "(line 304,col 5)-(line 304,col 57)",
            "(line 305,col 5)-(line 305,col 57)",
            "(line 306,col 5)-(line 306,col 22)",
            "(line 307,col 5)-(line 307,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictNonFiniteDoubles()",
        "snippet": "  public void testStrictNonFiniteDoubles() throws IOException {\n    String json = \"[NaN]\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.beginArray();\n    try {\n      reader.nextDouble();\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n  }",
        "begin_line": 310,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 311,col 5)-(line 311,col 26)",
            "(line 312,col 5)-(line 312,col 53)",
            "(line 313,col 5)-(line 313,col 24)",
            "(line 314,col 5)-(line 318,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictQuotedNonFiniteDoubles()",
        "snippet": "  public void testStrictQuotedNonFiniteDoubles() throws IOException {\n    String json = \"[\\\"NaN\\\"]\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.beginArray();\n    try {\n      reader.nextDouble();\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n  }",
        "begin_line": 321,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 322,col 5)-(line 322,col 30)",
            "(line 323,col 5)-(line 323,col 53)",
            "(line 324,col 5)-(line 324,col 24)",
            "(line 325,col 5)-(line 329,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientNonFiniteDoubles()",
        "snippet": "  public void testLenientNonFiniteDoubles() throws IOException {\n    String json = \"[NaN, -Infinity, Infinity]\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertTrue(Double.isNaN(reader.nextDouble()));\n    assertEquals(Double.NEGATIVE_INFINITY, reader.nextDouble());\n    assertEquals(Double.POSITIVE_INFINITY, reader.nextDouble());\n    reader.endArray();\n  }",
        "begin_line": 332,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 333,col 5)-(line 333,col 47)",
            "(line 334,col 5)-(line 334,col 53)",
            "(line 335,col 5)-(line 335,col 28)",
            "(line 336,col 5)-(line 336,col 24)",
            "(line 337,col 5)-(line 337,col 50)",
            "(line 338,col 5)-(line 338,col 64)",
            "(line 339,col 5)-(line 339,col 64)",
            "(line 340,col 5)-(line 340,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientQuotedNonFiniteDoubles()",
        "snippet": "  public void testLenientQuotedNonFiniteDoubles() throws IOException {\n    String json = \"[\\\"NaN\\\", \\\"-Infinity\\\", \\\"Infinity\\\"]\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertTrue(Double.isNaN(reader.nextDouble()));\n    assertEquals(Double.NEGATIVE_INFINITY, reader.nextDouble());\n    assertEquals(Double.POSITIVE_INFINITY, reader.nextDouble());\n    reader.endArray();\n  }",
        "begin_line": 343,
        "end_line": 352,
        "comment": "",
        "child_ranges": [
            "(line 344,col 5)-(line 344,col 59)",
            "(line 345,col 5)-(line 345,col 53)",
            "(line 346,col 5)-(line 346,col 28)",
            "(line 347,col 5)-(line 347,col 24)",
            "(line 348,col 5)-(line 348,col 50)",
            "(line 349,col 5)-(line 349,col 64)",
            "(line 350,col 5)-(line 350,col 64)",
            "(line 351,col 5)-(line 351,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictNonFiniteDoublesWithSkipValue()",
        "snippet": "  public void testStrictNonFiniteDoublesWithSkipValue() throws IOException {\n    String json = \"[NaN]\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.beginArray();\n    try {\n      reader.skipValue();\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n  }",
        "begin_line": 354,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 355,col 5)-(line 355,col 26)",
            "(line 356,col 5)-(line 356,col 53)",
            "(line 357,col 5)-(line 357,col 24)",
            "(line 358,col 5)-(line 362,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLongs()",
        "snippet": "  public void testLongs() throws IOException {\n    String json = \"[0,0,0,\"\n        + \"1,1,1,\"\n        + \"-1,-1,-1,\"\n        + \"-9223372036854775808,\"\n        + \"9223372036854775807]\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.beginArray();\n    assertEquals(0L, reader.nextLong());\n    assertEquals(0, reader.nextInt());\n    assertEquals(0.0, reader.nextDouble());\n    assertEquals(1L, reader.nextLong());\n    assertEquals(1, reader.nextInt());\n    assertEquals(1.0, reader.nextDouble());\n    assertEquals(-1L, reader.nextLong());\n    assertEquals(-1, reader.nextInt());\n    assertEquals(-1.0, reader.nextDouble());\n    try {\n      reader.nextInt();\n      fail();\n    } catch (NumberFormatException expected) {\n    }\n    assertEquals(Long.MIN_VALUE, reader.nextLong());\n    try {\n      reader.nextInt();\n      fail();\n    } catch (NumberFormatException expected) {\n    }\n    assertEquals(Long.MAX_VALUE, reader.nextLong());\n    reader.endArray();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 365,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 366,col 5)-(line 370,col 33)",
            "(line 371,col 5)-(line 371,col 53)",
            "(line 372,col 5)-(line 372,col 24)",
            "(line 373,col 5)-(line 373,col 40)",
            "(line 374,col 5)-(line 374,col 38)",
            "(line 375,col 5)-(line 375,col 43)",
            "(line 376,col 5)-(line 376,col 40)",
            "(line 377,col 5)-(line 377,col 38)",
            "(line 378,col 5)-(line 378,col 43)",
            "(line 379,col 5)-(line 379,col 41)",
            "(line 380,col 5)-(line 380,col 39)",
            "(line 381,col 5)-(line 381,col 44)",
            "(line 382,col 5)-(line 386,col 5)",
            "(line 387,col 5)-(line 387,col 52)",
            "(line 388,col 5)-(line 392,col 5)",
            "(line 393,col 5)-(line 393,col 52)",
            "(line 394,col 5)-(line 394,col 22)",
            "(line 395,col 5)-(line 395,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.disabled_testNumberWithOctalPrefix()",
        "snippet": "  public void disabled_testNumberWithOctalPrefix() throws IOException {\n    String json = \"[01]\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.beginArray();\n    try {\n      reader.peek();\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n    try {\n      reader.nextInt();\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n    try {\n      reader.nextLong();\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n    try {\n      reader.nextDouble();\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n    assertEquals(\"01\", reader.nextString());\n    reader.endArray();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 398,
        "end_line": 425,
        "comment": "",
        "child_ranges": [
            "(line 399,col 5)-(line 399,col 25)",
            "(line 400,col 5)-(line 400,col 53)",
            "(line 401,col 5)-(line 401,col 24)",
            "(line 402,col 5)-(line 406,col 5)",
            "(line 407,col 5)-(line 411,col 5)",
            "(line 412,col 5)-(line 416,col 5)",
            "(line 417,col 5)-(line 421,col 5)",
            "(line 422,col 5)-(line 422,col 44)",
            "(line 423,col 5)-(line 423,col 22)",
            "(line 424,col 5)-(line 424,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testBooleans()",
        "snippet": "  public void testBooleans() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[true,false]\"));\n    reader.beginArray();\n    assertEquals(true, reader.nextBoolean());\n    assertEquals(false, reader.nextBoolean());\n    reader.endArray();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 427,
        "end_line": 434,
        "comment": "",
        "child_ranges": [
            "(line 428,col 5)-(line 428,col 63)",
            "(line 429,col 5)-(line 429,col 24)",
            "(line 430,col 5)-(line 430,col 45)",
            "(line 431,col 5)-(line 431,col 46)",
            "(line 432,col 5)-(line 432,col 22)",
            "(line 433,col 5)-(line 433,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testPeekingUnquotedStringsPrefixedWithBooleans()",
        "snippet": "  public void testPeekingUnquotedStringsPrefixedWithBooleans() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[truey]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(STRING, reader.peek());\n    try {\n      reader.nextBoolean();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    assertEquals(\"truey\", reader.nextString());\n    reader.endArray();\n  }",
        "begin_line": 436,
        "end_line": 448,
        "comment": "",
        "child_ranges": [
            "(line 437,col 5)-(line 437,col 58)",
            "(line 438,col 5)-(line 438,col 28)",
            "(line 439,col 5)-(line 439,col 24)",
            "(line 440,col 5)-(line 440,col 40)",
            "(line 441,col 5)-(line 445,col 5)",
            "(line 446,col 5)-(line 446,col 47)",
            "(line 447,col 5)-(line 447,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testMalformedNumbers()",
        "snippet": "  public void testMalformedNumbers() throws IOException {\n    assertNotANumber(\"-\");\n    assertNotANumber(\".\");\n\n    // exponent lacks digit\n    assertNotANumber(\"e\");\n    assertNotANumber(\"0e\");\n    assertNotANumber(\".e\");\n    assertNotANumber(\"0.e\");\n    assertNotANumber(\"-.0e\");\n\n    // no integer\n    assertNotANumber(\"e1\");\n    assertNotANumber(\".e1\");\n    assertNotANumber(\"-e1\");\n\n    // trailing characters\n    assertNotANumber(\"1x\");\n    assertNotANumber(\"1.1x\");\n    assertNotANumber(\"1e1x\");\n    assertNotANumber(\"1ex\");\n    assertNotANumber(\"1.1ex\");\n    assertNotANumber(\"1.1e1x\");\n\n    // fraction has no digit\n    assertNotANumber(\"0.\");\n    assertNotANumber(\"-0.\");\n    assertNotANumber(\"0.e1\");\n    assertNotANumber(\"-0.e1\");\n\n    // no leading digit\n    assertNotANumber(\".0\");\n    assertNotANumber(\"-.0\");\n    assertNotANumber(\".0e1\");\n    assertNotANumber(\"-.0e1\");\n  }",
        "begin_line": 450,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 451,col 5)-(line 451,col 26)",
            "(line 452,col 5)-(line 452,col 26)",
            "(line 455,col 5)-(line 455,col 26)",
            "(line 456,col 5)-(line 456,col 27)",
            "(line 457,col 5)-(line 457,col 27)",
            "(line 458,col 5)-(line 458,col 28)",
            "(line 459,col 5)-(line 459,col 29)",
            "(line 462,col 5)-(line 462,col 27)",
            "(line 463,col 5)-(line 463,col 28)",
            "(line 464,col 5)-(line 464,col 28)",
            "(line 467,col 5)-(line 467,col 27)",
            "(line 468,col 5)-(line 468,col 29)",
            "(line 469,col 5)-(line 469,col 29)",
            "(line 470,col 5)-(line 470,col 28)",
            "(line 471,col 5)-(line 471,col 30)",
            "(line 472,col 5)-(line 472,col 31)",
            "(line 475,col 5)-(line 475,col 27)",
            "(line 476,col 5)-(line 476,col 28)",
            "(line 477,col 5)-(line 477,col 29)",
            "(line 478,col 5)-(line 478,col 30)",
            "(line 481,col 5)-(line 481,col 27)",
            "(line 482,col 5)-(line 482,col 28)",
            "(line 483,col 5)-(line 483,col 29)",
            "(line 484,col 5)-(line 484,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.assertNotANumber(java.lang.String)",
        "snippet": "  private void assertNotANumber(String s) throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[\" + s + \"]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(JsonToken.STRING, reader.peek());\n    assertEquals(s, reader.nextString());\n    reader.endArray();\n  }",
        "begin_line": 487,
        "end_line": 494,
        "comment": "",
        "child_ranges": [
            "(line 488,col 5)-(line 488,col 62)",
            "(line 489,col 5)-(line 489,col 28)",
            "(line 490,col 5)-(line 490,col 24)",
            "(line 491,col 5)-(line 491,col 50)",
            "(line 492,col 5)-(line 492,col 41)",
            "(line 493,col 5)-(line 493,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testPeekingUnquotedStringsPrefixedWithIntegers()",
        "snippet": "  public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[12.34e5x]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(STRING, reader.peek());\n    try {\n      reader.nextInt();\n      fail();\n    } catch (NumberFormatException expected) {\n    }\n    assertEquals(\"12.34e5x\", reader.nextString());\n  }",
        "begin_line": 496,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 497,col 5)-(line 497,col 61)",
            "(line 498,col 5)-(line 498,col 28)",
            "(line 499,col 5)-(line 499,col 24)",
            "(line 500,col 5)-(line 500,col 40)",
            "(line 501,col 5)-(line 505,col 5)",
            "(line 506,col 5)-(line 506,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testPeekLongMinValue()",
        "snippet": "  public void testPeekLongMinValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[-9223372036854775808]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(NUMBER, reader.peek());\n    assertEquals(-9223372036854775808L, reader.nextLong());\n  }",
        "begin_line": 509,
        "end_line": 515,
        "comment": "",
        "child_ranges": [
            "(line 510,col 5)-(line 510,col 73)",
            "(line 511,col 5)-(line 511,col 28)",
            "(line 512,col 5)-(line 512,col 24)",
            "(line 513,col 5)-(line 513,col 40)",
            "(line 514,col 5)-(line 514,col 59)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testPeekLongMaxValue()",
        "snippet": "  public void testPeekLongMaxValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[9223372036854775807]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(NUMBER, reader.peek());\n    assertEquals(9223372036854775807L, reader.nextLong());\n  }",
        "begin_line": 517,
        "end_line": 523,
        "comment": "",
        "child_ranges": [
            "(line 518,col 5)-(line 518,col 72)",
            "(line 519,col 5)-(line 519,col 28)",
            "(line 520,col 5)-(line 520,col 24)",
            "(line 521,col 5)-(line 521,col 40)",
            "(line 522,col 5)-(line 522,col 58)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLongLargerThanMaxLongThatWrapsAround()",
        "snippet": "  public void testLongLargerThanMaxLongThatWrapsAround() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[22233720368547758070]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(NUMBER, reader.peek());\n    try {\n      reader.nextLong();\n      fail();\n    } catch (NumberFormatException expected) {\n    }\n  }",
        "begin_line": 525,
        "end_line": 535,
        "comment": "",
        "child_ranges": [
            "(line 526,col 5)-(line 526,col 73)",
            "(line 527,col 5)-(line 527,col 28)",
            "(line 528,col 5)-(line 528,col 24)",
            "(line 529,col 5)-(line 529,col 40)",
            "(line 530,col 5)-(line 534,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLongLargerThanMinLongThatWrapsAround()",
        "snippet": "  public void testLongLargerThanMinLongThatWrapsAround() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[-22233720368547758070]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(NUMBER, reader.peek());\n    try {\n      reader.nextLong();\n      fail();\n    } catch (NumberFormatException expected) {\n    }\n  }",
        "begin_line": 537,
        "end_line": 547,
        "comment": "",
        "child_ranges": [
            "(line 538,col 5)-(line 538,col 74)",
            "(line 539,col 5)-(line 539,col 28)",
            "(line 540,col 5)-(line 540,col 24)",
            "(line 541,col 5)-(line 541,col 40)",
            "(line 542,col 5)-(line 546,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.disabled_testPeekLargerThanLongMaxValue()",
        "snippet": "  public void disabled_testPeekLargerThanLongMaxValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[9223372036854775808]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(NUMBER, reader.peek());\n    try {\n      reader.nextLong();\n      fail();\n    } catch (NumberFormatException e) {\n    }\n  }",
        "begin_line": 553,
        "end_line": 563,
        "comment": "\n   * This test fails because there's no double for 9223372036854775808, and our\n   * long parsing uses Double.parseDouble() for fractional values.\n   ",
        "child_ranges": [
            "(line 554,col 5)-(line 554,col 72)",
            "(line 555,col 5)-(line 555,col 28)",
            "(line 556,col 5)-(line 556,col 24)",
            "(line 557,col 5)-(line 557,col 40)",
            "(line 558,col 5)-(line 562,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.disabled_testPeekLargerThanLongMinValue()",
        "snippet": "  public void disabled_testPeekLargerThanLongMinValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[-9223372036854775809]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(NUMBER, reader.peek());\n    try {\n      reader.nextLong();\n      fail();\n    } catch (NumberFormatException expected) {\n    }\n    assertEquals(-9223372036854775809d, reader.nextDouble());\n  }",
        "begin_line": 569,
        "end_line": 580,
        "comment": "\n   * This test fails because there's no double for -9223372036854775809, and our\n   * long parsing uses Double.parseDouble() for fractional values.\n   ",
        "child_ranges": [
            "(line 570,col 5)-(line 570,col 73)",
            "(line 571,col 5)-(line 571,col 28)",
            "(line 572,col 5)-(line 572,col 24)",
            "(line 573,col 5)-(line 573,col 40)",
            "(line 574,col 5)-(line 578,col 5)",
            "(line 579,col 5)-(line 579,col 61)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.disabled_testHighPrecisionLong()",
        "snippet": "  public void disabled_testHighPrecisionLong() throws IOException {\n    String json = \"[9223372036854775806.000]\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.beginArray();\n    assertEquals(9223372036854775806L, reader.nextLong());\n    reader.endArray();\n  }",
        "begin_line": 586,
        "end_line": 592,
        "comment": "\n   * This test fails because there's no double for 9223372036854775806, and\n   * our long parsing uses Double.parseDouble() for fractional values.\n   ",
        "child_ranges": [
            "(line 587,col 5)-(line 587,col 46)",
            "(line 588,col 5)-(line 588,col 53)",
            "(line 589,col 5)-(line 589,col 24)",
            "(line 590,col 5)-(line 590,col 58)",
            "(line 591,col 5)-(line 591,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testPeekMuchLargerThanLongMinValue()",
        "snippet": "  public void testPeekMuchLargerThanLongMinValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[-92233720368547758080]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(NUMBER, reader.peek());\n    try {\n      reader.nextLong();\n      fail();\n    } catch (NumberFormatException expected) {\n    }\n    assertEquals(-92233720368547758080d, reader.nextDouble());\n  }",
        "begin_line": 594,
        "end_line": 605,
        "comment": "",
        "child_ranges": [
            "(line 595,col 5)-(line 595,col 74)",
            "(line 596,col 5)-(line 596,col 28)",
            "(line 597,col 5)-(line 597,col 24)",
            "(line 598,col 5)-(line 598,col 40)",
            "(line 599,col 5)-(line 603,col 5)",
            "(line 604,col 5)-(line 604,col 62)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testQuotedNumberWithEscape()",
        "snippet": "  public void testQuotedNumberWithEscape() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[\\\"12\\u00334\\\"]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(STRING, reader.peek());\n    assertEquals(1234, reader.nextInt());\n  }",
        "begin_line": 607,
        "end_line": 613,
        "comment": "",
        "child_ranges": [
            "(line 608,col 5)-(line 608,col 66)",
            "(line 609,col 5)-(line 609,col 28)",
            "(line 610,col 5)-(line 610,col 24)",
            "(line 611,col 5)-(line 611,col 40)",
            "(line 612,col 5)-(line 612,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testMixedCaseLiterals()",
        "snippet": "  public void testMixedCaseLiterals() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[True,TruE,False,FALSE,NULL,nulL]\"));\n    reader.beginArray();\n    assertEquals(true, reader.nextBoolean());\n    assertEquals(true, reader.nextBoolean());\n    assertEquals(false, reader.nextBoolean());\n    assertEquals(false, reader.nextBoolean());\n    reader.nextNull();\n    reader.nextNull();\n    reader.endArray();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 615,
        "end_line": 626,
        "comment": "",
        "child_ranges": [
            "(line 616,col 5)-(line 616,col 84)",
            "(line 617,col 5)-(line 617,col 24)",
            "(line 618,col 5)-(line 618,col 45)",
            "(line 619,col 5)-(line 619,col 45)",
            "(line 620,col 5)-(line 620,col 46)",
            "(line 621,col 5)-(line 621,col 46)",
            "(line 622,col 5)-(line 622,col 22)",
            "(line 623,col 5)-(line 623,col 22)",
            "(line 624,col 5)-(line 624,col 22)",
            "(line 625,col 5)-(line 625,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testMissingValue()",
        "snippet": "  public void testMissingValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    try {\n      reader.nextString();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 628,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 629,col 5)-(line 629,col 59)",
            "(line 630,col 5)-(line 630,col 25)",
            "(line 631,col 5)-(line 631,col 41)",
            "(line 632,col 5)-(line 636,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testPrematureEndOfInput()",
        "snippet": "  public void testPrematureEndOfInput() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true,\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    assertEquals(true, reader.nextBoolean());\n    try {\n      reader.nextName();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 639,
        "end_line": 649,
        "comment": "",
        "child_ranges": [
            "(line 640,col 5)-(line 640,col 63)",
            "(line 641,col 5)-(line 641,col 25)",
            "(line 642,col 5)-(line 642,col 41)",
            "(line 643,col 5)-(line 643,col 45)",
            "(line 644,col 5)-(line 648,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testPrematurelyClosed()",
        "snippet": "  public void testPrematurelyClosed() throws IOException {\n    try {\n      JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":[]}\"));\n      reader.beginObject();\n      reader.close();\n      reader.nextName();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n\n    try {\n      JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":[]}\"));\n      reader.close();\n      reader.beginObject();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n\n    try {\n      JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true}\"));\n      reader.beginObject();\n      reader.nextName();\n      reader.peek();\n      reader.close();\n      reader.nextBoolean();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 651,
        "end_line": 679,
        "comment": "",
        "child_ranges": [
            "(line 652,col 5)-(line 659,col 5)",
            "(line 661,col 5)-(line 667,col 5)",
            "(line 669,col 5)-(line 678,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testNextFailuresDoNotAdvance()",
        "snippet": "  public void testNextFailuresDoNotAdvance() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true}\"));\n    reader.beginObject();\n    try {\n      reader.nextString();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    assertEquals(\"a\", reader.nextName());\n    try {\n      reader.nextName();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.beginArray();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.endArray();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.beginObject();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.endObject();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    assertEquals(true, reader.nextBoolean());\n    try {\n      reader.nextString();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.nextName();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.beginArray();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      reader.endArray();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    reader.endObject();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n    reader.close();\n  }",
        "begin_line": 681,
        "end_line": 739,
        "comment": "",
        "child_ranges": [
            "(line 682,col 5)-(line 682,col 63)",
            "(line 683,col 5)-(line 683,col 25)",
            "(line 684,col 5)-(line 688,col 5)",
            "(line 689,col 5)-(line 689,col 41)",
            "(line 690,col 5)-(line 694,col 5)",
            "(line 695,col 5)-(line 699,col 5)",
            "(line 700,col 5)-(line 704,col 5)",
            "(line 705,col 5)-(line 709,col 5)",
            "(line 710,col 5)-(line 714,col 5)",
            "(line 715,col 5)-(line 715,col 45)",
            "(line 716,col 5)-(line 720,col 5)",
            "(line 721,col 5)-(line 725,col 5)",
            "(line 726,col 5)-(line 730,col 5)",
            "(line 731,col 5)-(line 735,col 5)",
            "(line 736,col 5)-(line 736,col 23)",
            "(line 737,col 5)-(line 737,col 56)",
            "(line 738,col 5)-(line 738,col 19)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testIntegerMismatchFailuresDoNotAdvance()",
        "snippet": "  public void testIntegerMismatchFailuresDoNotAdvance() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[1.5]\"));\n    reader.beginArray();\n    try {\n      reader.nextInt();\n      fail();\n    } catch (NumberFormatException expected) {\n    }\n    assertEquals(1.5d, reader.nextDouble());\n    reader.endArray();\n  }",
        "begin_line": 741,
        "end_line": 751,
        "comment": "",
        "child_ranges": [
            "(line 742,col 5)-(line 742,col 56)",
            "(line 743,col 5)-(line 743,col 24)",
            "(line 744,col 5)-(line 748,col 5)",
            "(line 749,col 5)-(line 749,col 44)",
            "(line 750,col 5)-(line 750,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStringNullIsNotNull()",
        "snippet": "  public void testStringNullIsNotNull() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[\\\"null\\\"]\"));\n    reader.beginArray();\n    try {\n      reader.nextNull();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 753,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 754,col 5)-(line 754,col 61)",
            "(line 755,col 5)-(line 755,col 24)",
            "(line 756,col 5)-(line 760,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testNullLiteralIsNotAString()",
        "snippet": "  public void testNullLiteralIsNotAString() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[null]\"));\n    reader.beginArray();\n    try {\n      reader.nextString();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 763,
        "end_line": 771,
        "comment": "",
        "child_ranges": [
            "(line 764,col 5)-(line 764,col 57)",
            "(line 765,col 5)-(line 765,col 24)",
            "(line 766,col 5)-(line 770,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictNameValueSeparator()",
        "snippet": "  public void testStrictNameValueSeparator() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\"=true}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    try {\n      reader.nextBoolean();\n      fail();\n    } catch (IOException expected) {\n    }\n\n    reader = new JsonReader(reader(\"{\\\"a\\\"=>true}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    try {\n      reader.nextBoolean();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 773,
        "end_line": 791,
        "comment": "",
        "child_ranges": [
            "(line 774,col 5)-(line 774,col 63)",
            "(line 775,col 5)-(line 775,col 25)",
            "(line 776,col 5)-(line 776,col 41)",
            "(line 777,col 5)-(line 781,col 5)",
            "(line 783,col 5)-(line 783,col 53)",
            "(line 784,col 5)-(line 784,col 25)",
            "(line 785,col 5)-(line 785,col 41)",
            "(line 786,col 5)-(line 790,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientNameValueSeparator()",
        "snippet": "  public void testLenientNameValueSeparator() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\"=true}\"));\n    reader.setLenient(true);\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    assertEquals(true, reader.nextBoolean());\n\n    reader = new JsonReader(reader(\"{\\\"a\\\"=>true}\"));\n    reader.setLenient(true);\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    assertEquals(true, reader.nextBoolean());\n  }",
        "begin_line": 793,
        "end_line": 805,
        "comment": "",
        "child_ranges": [
            "(line 794,col 5)-(line 794,col 63)",
            "(line 795,col 5)-(line 795,col 28)",
            "(line 796,col 5)-(line 796,col 25)",
            "(line 797,col 5)-(line 797,col 41)",
            "(line 798,col 5)-(line 798,col 45)",
            "(line 800,col 5)-(line 800,col 53)",
            "(line 801,col 5)-(line 801,col 28)",
            "(line 802,col 5)-(line 802,col 25)",
            "(line 803,col 5)-(line 803,col 41)",
            "(line 804,col 5)-(line 804,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictNameValueSeparatorWithSkipValue()",
        "snippet": "  public void testStrictNameValueSeparatorWithSkipValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\"=true}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    try {\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n\n    reader = new JsonReader(reader(\"{\\\"a\\\"=>true}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    try {\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 807,
        "end_line": 825,
        "comment": "",
        "child_ranges": [
            "(line 808,col 5)-(line 808,col 63)",
            "(line 809,col 5)-(line 809,col 25)",
            "(line 810,col 5)-(line 810,col 41)",
            "(line 811,col 5)-(line 815,col 5)",
            "(line 817,col 5)-(line 817,col 53)",
            "(line 818,col 5)-(line 818,col 25)",
            "(line 819,col 5)-(line 819,col 41)",
            "(line 820,col 5)-(line 824,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testCommentsInStringValue()",
        "snippet": "  public void testCommentsInStringValue() throws Exception {\n    JsonReader reader = new JsonReader(reader(\"[\\\"// comment\\\"]\"));\n    reader.beginArray();\n    assertEquals(\"// comment\", reader.nextString());\n    reader.endArray();\n\n    reader = new JsonReader(reader(\"{\\\"a\\\":\\\"#someComment\\\"}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    assertEquals(\"#someComment\", reader.nextString());\n    reader.endObject();\n\n    reader = new JsonReader(reader(\"{\\\"#//a\\\":\\\"#some //Comment\\\"}\"));\n    reader.beginObject();\n    assertEquals(\"#//a\", reader.nextName());\n    assertEquals(\"#some //Comment\", reader.nextString());\n    reader.endObject();\n  }",
        "begin_line": 827,
        "end_line": 844,
        "comment": "",
        "child_ranges": [
            "(line 828,col 5)-(line 828,col 67)",
            "(line 829,col 5)-(line 829,col 24)",
            "(line 830,col 5)-(line 830,col 52)",
            "(line 831,col 5)-(line 831,col 22)",
            "(line 833,col 5)-(line 833,col 64)",
            "(line 834,col 5)-(line 834,col 25)",
            "(line 835,col 5)-(line 835,col 41)",
            "(line 836,col 5)-(line 836,col 54)",
            "(line 837,col 5)-(line 837,col 23)",
            "(line 839,col 5)-(line 839,col 70)",
            "(line 840,col 5)-(line 840,col 25)",
            "(line 841,col 5)-(line 841,col 44)",
            "(line 842,col 5)-(line 842,col 57)",
            "(line 843,col 5)-(line 843,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictComments()",
        "snippet": "  public void testStrictComments() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[// comment \\n true]\"));\n    reader.beginArray();\n    try {\n      reader.nextBoolean();\n      fail();\n    } catch (IOException expected) {\n    }\n\n    reader = new JsonReader(reader(\"[# comment \\n true]\"));\n    reader.beginArray();\n    try {\n      reader.nextBoolean();\n      fail();\n    } catch (IOException expected) {\n    }\n\n    reader = new JsonReader(reader(\"[/* comment */ true]\"));\n    reader.beginArray();\n    try {\n      reader.nextBoolean();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 846,
        "end_line": 870,
        "comment": "",
        "child_ranges": [
            "(line 847,col 5)-(line 847,col 71)",
            "(line 848,col 5)-(line 848,col 24)",
            "(line 849,col 5)-(line 853,col 5)",
            "(line 855,col 5)-(line 855,col 59)",
            "(line 856,col 5)-(line 856,col 24)",
            "(line 857,col 5)-(line 861,col 5)",
            "(line 863,col 5)-(line 863,col 60)",
            "(line 864,col 5)-(line 864,col 24)",
            "(line 865,col 5)-(line 869,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientComments()",
        "snippet": "  public void testLenientComments() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[// comment \\n true]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(true, reader.nextBoolean());\n\n    reader = new JsonReader(reader(\"[# comment \\n true]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(true, reader.nextBoolean());\n\n    reader = new JsonReader(reader(\"[/* comment */ true]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(true, reader.nextBoolean());\n  }",
        "begin_line": 872,
        "end_line": 887,
        "comment": "",
        "child_ranges": [
            "(line 873,col 5)-(line 873,col 71)",
            "(line 874,col 5)-(line 874,col 28)",
            "(line 875,col 5)-(line 875,col 24)",
            "(line 876,col 5)-(line 876,col 45)",
            "(line 878,col 5)-(line 878,col 59)",
            "(line 879,col 5)-(line 879,col 28)",
            "(line 880,col 5)-(line 880,col 24)",
            "(line 881,col 5)-(line 881,col 45)",
            "(line 883,col 5)-(line 883,col 60)",
            "(line 884,col 5)-(line 884,col 28)",
            "(line 885,col 5)-(line 885,col 24)",
            "(line 886,col 5)-(line 886,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictCommentsWithSkipValue()",
        "snippet": "  public void testStrictCommentsWithSkipValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[// comment \\n true]\"));\n    reader.beginArray();\n    try {\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n\n    reader = new JsonReader(reader(\"[# comment \\n true]\"));\n    reader.beginArray();\n    try {\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n\n    reader = new JsonReader(reader(\"[/* comment */ true]\"));\n    reader.beginArray();\n    try {\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 889,
        "end_line": 913,
        "comment": "",
        "child_ranges": [
            "(line 890,col 5)-(line 890,col 71)",
            "(line 891,col 5)-(line 891,col 24)",
            "(line 892,col 5)-(line 896,col 5)",
            "(line 898,col 5)-(line 898,col 59)",
            "(line 899,col 5)-(line 899,col 24)",
            "(line 900,col 5)-(line 904,col 5)",
            "(line 906,col 5)-(line 906,col 60)",
            "(line 907,col 5)-(line 907,col 24)",
            "(line 908,col 5)-(line 912,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictUnquotedNames()",
        "snippet": "  public void testStrictUnquotedNames() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{a:true}\"));\n    reader.beginObject();\n    try {\n      reader.nextName();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 915,
        "end_line": 923,
        "comment": "",
        "child_ranges": [
            "(line 916,col 5)-(line 916,col 59)",
            "(line 917,col 5)-(line 917,col 25)",
            "(line 918,col 5)-(line 922,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientUnquotedNames()",
        "snippet": "  public void testLenientUnquotedNames() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{a:true}\"));\n    reader.setLenient(true);\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n  }",
        "begin_line": 925,
        "end_line": 930,
        "comment": "",
        "child_ranges": [
            "(line 926,col 5)-(line 926,col 59)",
            "(line 927,col 5)-(line 927,col 28)",
            "(line 928,col 5)-(line 928,col 25)",
            "(line 929,col 5)-(line 929,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictUnquotedNamesWithSkipValue()",
        "snippet": "  public void testStrictUnquotedNamesWithSkipValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{a:true}\"));\n    reader.beginObject();\n    try {\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 932,
        "end_line": 940,
        "comment": "",
        "child_ranges": [
            "(line 933,col 5)-(line 933,col 59)",
            "(line 934,col 5)-(line 934,col 25)",
            "(line 935,col 5)-(line 939,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictSingleQuotedNames()",
        "snippet": "  public void testStrictSingleQuotedNames() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{'a':true}\"));\n    reader.beginObject();\n    try {\n      reader.nextName();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 942,
        "end_line": 950,
        "comment": "",
        "child_ranges": [
            "(line 943,col 5)-(line 943,col 61)",
            "(line 944,col 5)-(line 944,col 25)",
            "(line 945,col 5)-(line 949,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientSingleQuotedNames()",
        "snippet": "  public void testLenientSingleQuotedNames() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{'a':true}\"));\n    reader.setLenient(true);\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n  }",
        "begin_line": 952,
        "end_line": 957,
        "comment": "",
        "child_ranges": [
            "(line 953,col 5)-(line 953,col 61)",
            "(line 954,col 5)-(line 954,col 28)",
            "(line 955,col 5)-(line 955,col 25)",
            "(line 956,col 5)-(line 956,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictSingleQuotedNamesWithSkipValue()",
        "snippet": "  public void testStrictSingleQuotedNamesWithSkipValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{'a':true}\"));\n    reader.beginObject();\n    try {\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 959,
        "end_line": 967,
        "comment": "",
        "child_ranges": [
            "(line 960,col 5)-(line 960,col 61)",
            "(line 961,col 5)-(line 961,col 25)",
            "(line 962,col 5)-(line 966,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictUnquotedStrings()",
        "snippet": "  public void testStrictUnquotedStrings() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[a]\"));\n    reader.beginArray();\n    try {\n      reader.nextString();\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n  }",
        "begin_line": 969,
        "end_line": 977,
        "comment": "",
        "child_ranges": [
            "(line 970,col 5)-(line 970,col 54)",
            "(line 971,col 5)-(line 971,col 24)",
            "(line 972,col 5)-(line 976,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictUnquotedStringsWithSkipValue()",
        "snippet": "  public void testStrictUnquotedStringsWithSkipValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[a]\"));\n    reader.beginArray();\n    try {\n      reader.skipValue();\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n  }",
        "begin_line": 979,
        "end_line": 987,
        "comment": "",
        "child_ranges": [
            "(line 980,col 5)-(line 980,col 54)",
            "(line 981,col 5)-(line 981,col 24)",
            "(line 982,col 5)-(line 986,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientUnquotedStrings()",
        "snippet": "  public void testLenientUnquotedStrings() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[a]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(\"a\", reader.nextString());\n  }",
        "begin_line": 989,
        "end_line": 994,
        "comment": "",
        "child_ranges": [
            "(line 990,col 5)-(line 990,col 54)",
            "(line 991,col 5)-(line 991,col 28)",
            "(line 992,col 5)-(line 992,col 24)",
            "(line 993,col 5)-(line 993,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictSingleQuotedStrings()",
        "snippet": "  public void testStrictSingleQuotedStrings() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"['a']\"));\n    reader.beginArray();\n    try {\n      reader.nextString();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 996,
        "end_line": 1004,
        "comment": "",
        "child_ranges": [
            "(line 997,col 5)-(line 997,col 56)",
            "(line 998,col 5)-(line 998,col 24)",
            "(line 999,col 5)-(line 1003,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientSingleQuotedStrings()",
        "snippet": "  public void testLenientSingleQuotedStrings() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"['a']\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(\"a\", reader.nextString());\n  }",
        "begin_line": 1006,
        "end_line": 1011,
        "comment": "",
        "child_ranges": [
            "(line 1007,col 5)-(line 1007,col 56)",
            "(line 1008,col 5)-(line 1008,col 28)",
            "(line 1009,col 5)-(line 1009,col 24)",
            "(line 1010,col 5)-(line 1010,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictSingleQuotedStringsWithSkipValue()",
        "snippet": "  public void testStrictSingleQuotedStringsWithSkipValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"['a']\"));\n    reader.beginArray();\n    try {\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1013,
        "end_line": 1021,
        "comment": "",
        "child_ranges": [
            "(line 1014,col 5)-(line 1014,col 56)",
            "(line 1015,col 5)-(line 1015,col 24)",
            "(line 1016,col 5)-(line 1020,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictSemicolonDelimitedArray()",
        "snippet": "  public void testStrictSemicolonDelimitedArray() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[true;true]\"));\n    reader.beginArray();\n    try {\n      reader.nextBoolean();\n      reader.nextBoolean();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1023,
        "end_line": 1032,
        "comment": "",
        "child_ranges": [
            "(line 1024,col 5)-(line 1024,col 62)",
            "(line 1025,col 5)-(line 1025,col 24)",
            "(line 1026,col 5)-(line 1031,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientSemicolonDelimitedArray()",
        "snippet": "  public void testLenientSemicolonDelimitedArray() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[true;true]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(true, reader.nextBoolean());\n    assertEquals(true, reader.nextBoolean());\n  }",
        "begin_line": 1034,
        "end_line": 1040,
        "comment": "",
        "child_ranges": [
            "(line 1035,col 5)-(line 1035,col 62)",
            "(line 1036,col 5)-(line 1036,col 28)",
            "(line 1037,col 5)-(line 1037,col 24)",
            "(line 1038,col 5)-(line 1038,col 45)",
            "(line 1039,col 5)-(line 1039,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictSemicolonDelimitedArrayWithSkipValue()",
        "snippet": "  public void testStrictSemicolonDelimitedArrayWithSkipValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[true;true]\"));\n    reader.beginArray();\n    try {\n      reader.skipValue();\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1042,
        "end_line": 1051,
        "comment": "",
        "child_ranges": [
            "(line 1043,col 5)-(line 1043,col 62)",
            "(line 1044,col 5)-(line 1044,col 24)",
            "(line 1045,col 5)-(line 1050,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictSemicolonDelimitedNameValuePair()",
        "snippet": "  public void testStrictSemicolonDelimitedNameValuePair() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    try {\n      reader.nextBoolean();\n      reader.nextName();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1053,
        "end_line": 1063,
        "comment": "",
        "child_ranges": [
            "(line 1054,col 5)-(line 1054,col 74)",
            "(line 1055,col 5)-(line 1055,col 25)",
            "(line 1056,col 5)-(line 1056,col 41)",
            "(line 1057,col 5)-(line 1062,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientSemicolonDelimitedNameValuePair()",
        "snippet": "  public void testLenientSemicolonDelimitedNameValuePair() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\n    reader.setLenient(true);\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    assertEquals(true, reader.nextBoolean());\n    assertEquals(\"b\", reader.nextName());\n  }",
        "begin_line": 1065,
        "end_line": 1072,
        "comment": "",
        "child_ranges": [
            "(line 1066,col 5)-(line 1066,col 74)",
            "(line 1067,col 5)-(line 1067,col 28)",
            "(line 1068,col 5)-(line 1068,col 25)",
            "(line 1069,col 5)-(line 1069,col 41)",
            "(line 1070,col 5)-(line 1070,col 45)",
            "(line 1071,col 5)-(line 1071,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictSemicolonDelimitedNameValuePairWithSkipValue()",
        "snippet": "  public void testStrictSemicolonDelimitedNameValuePairWithSkipValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    try {\n      reader.skipValue();\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1074,
        "end_line": 1084,
        "comment": "",
        "child_ranges": [
            "(line 1075,col 5)-(line 1075,col 74)",
            "(line 1076,col 5)-(line 1076,col 25)",
            "(line 1077,col 5)-(line 1077,col 41)",
            "(line 1078,col 5)-(line 1083,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictUnnecessaryArraySeparators()",
        "snippet": "  public void testStrictUnnecessaryArraySeparators() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[true,,true]\"));\n    reader.beginArray();\n    assertEquals(true, reader.nextBoolean());\n    try {\n      reader.nextNull();\n      fail();\n    } catch (IOException expected) {\n    }\n\n    reader = new JsonReader(reader(\"[,true]\"));\n    reader.beginArray();\n    try {\n      reader.nextNull();\n      fail();\n    } catch (IOException expected) {\n    }\n\n    reader = new JsonReader(reader(\"[true,]\"));\n    reader.beginArray();\n    assertEquals(true, reader.nextBoolean());\n    try {\n      reader.nextNull();\n      fail();\n    } catch (IOException expected) {\n    }\n\n    reader = new JsonReader(reader(\"[,]\"));\n    reader.beginArray();\n    try {\n      reader.nextNull();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1086,
        "end_line": 1120,
        "comment": "",
        "child_ranges": [
            "(line 1087,col 5)-(line 1087,col 63)",
            "(line 1088,col 5)-(line 1088,col 24)",
            "(line 1089,col 5)-(line 1089,col 45)",
            "(line 1090,col 5)-(line 1094,col 5)",
            "(line 1096,col 5)-(line 1096,col 47)",
            "(line 1097,col 5)-(line 1097,col 24)",
            "(line 1098,col 5)-(line 1102,col 5)",
            "(line 1104,col 5)-(line 1104,col 47)",
            "(line 1105,col 5)-(line 1105,col 24)",
            "(line 1106,col 5)-(line 1106,col 45)",
            "(line 1107,col 5)-(line 1111,col 5)",
            "(line 1113,col 5)-(line 1113,col 43)",
            "(line 1114,col 5)-(line 1114,col 24)",
            "(line 1115,col 5)-(line 1119,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientUnnecessaryArraySeparators()",
        "snippet": "  public void testLenientUnnecessaryArraySeparators() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[true,,true]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(true, reader.nextBoolean());\n    reader.nextNull();\n    assertEquals(true, reader.nextBoolean());\n    reader.endArray();\n\n    reader = new JsonReader(reader(\"[,true]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    reader.nextNull();\n    assertEquals(true, reader.nextBoolean());\n    reader.endArray();\n\n    reader = new JsonReader(reader(\"[true,]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(true, reader.nextBoolean());\n    reader.nextNull();\n    reader.endArray();\n\n    reader = new JsonReader(reader(\"[,]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    reader.nextNull();\n    reader.nextNull();\n    reader.endArray();\n  }",
        "begin_line": 1122,
        "end_line": 1151,
        "comment": "",
        "child_ranges": [
            "(line 1123,col 5)-(line 1123,col 63)",
            "(line 1124,col 5)-(line 1124,col 28)",
            "(line 1125,col 5)-(line 1125,col 24)",
            "(line 1126,col 5)-(line 1126,col 45)",
            "(line 1127,col 5)-(line 1127,col 22)",
            "(line 1128,col 5)-(line 1128,col 45)",
            "(line 1129,col 5)-(line 1129,col 22)",
            "(line 1131,col 5)-(line 1131,col 47)",
            "(line 1132,col 5)-(line 1132,col 28)",
            "(line 1133,col 5)-(line 1133,col 24)",
            "(line 1134,col 5)-(line 1134,col 22)",
            "(line 1135,col 5)-(line 1135,col 45)",
            "(line 1136,col 5)-(line 1136,col 22)",
            "(line 1138,col 5)-(line 1138,col 47)",
            "(line 1139,col 5)-(line 1139,col 28)",
            "(line 1140,col 5)-(line 1140,col 24)",
            "(line 1141,col 5)-(line 1141,col 45)",
            "(line 1142,col 5)-(line 1142,col 22)",
            "(line 1143,col 5)-(line 1143,col 22)",
            "(line 1145,col 5)-(line 1145,col 43)",
            "(line 1146,col 5)-(line 1146,col 28)",
            "(line 1147,col 5)-(line 1147,col 24)",
            "(line 1148,col 5)-(line 1148,col 22)",
            "(line 1149,col 5)-(line 1149,col 22)",
            "(line 1150,col 5)-(line 1150,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictUnnecessaryArraySeparatorsWithSkipValue()",
        "snippet": "  public void testStrictUnnecessaryArraySeparatorsWithSkipValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[true,,true]\"));\n    reader.beginArray();\n    assertEquals(true, reader.nextBoolean());\n    try {\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n\n    reader = new JsonReader(reader(\"[,true]\"));\n    reader.beginArray();\n    try {\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n\n    reader = new JsonReader(reader(\"[true,]\"));\n    reader.beginArray();\n    assertEquals(true, reader.nextBoolean());\n    try {\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n\n    reader = new JsonReader(reader(\"[,]\"));\n    reader.beginArray();\n    try {\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1153,
        "end_line": 1187,
        "comment": "",
        "child_ranges": [
            "(line 1154,col 5)-(line 1154,col 63)",
            "(line 1155,col 5)-(line 1155,col 24)",
            "(line 1156,col 5)-(line 1156,col 45)",
            "(line 1157,col 5)-(line 1161,col 5)",
            "(line 1163,col 5)-(line 1163,col 47)",
            "(line 1164,col 5)-(line 1164,col 24)",
            "(line 1165,col 5)-(line 1169,col 5)",
            "(line 1171,col 5)-(line 1171,col 47)",
            "(line 1172,col 5)-(line 1172,col 24)",
            "(line 1173,col 5)-(line 1173,col 45)",
            "(line 1174,col 5)-(line 1178,col 5)",
            "(line 1180,col 5)-(line 1180,col 43)",
            "(line 1181,col 5)-(line 1181,col 24)",
            "(line 1182,col 5)-(line 1186,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictMultipleTopLevelValues()",
        "snippet": "  public void testStrictMultipleTopLevelValues() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[] []\"));\n    reader.beginArray();\n    reader.endArray();\n    try {\n      reader.peek();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1189,
        "end_line": 1198,
        "comment": "",
        "child_ranges": [
            "(line 1190,col 5)-(line 1190,col 56)",
            "(line 1191,col 5)-(line 1191,col 24)",
            "(line 1192,col 5)-(line 1192,col 22)",
            "(line 1193,col 5)-(line 1197,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientMultipleTopLevelValues()",
        "snippet": "  public void testLenientMultipleTopLevelValues() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[] true {}\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    reader.endArray();\n    assertEquals(true, reader.nextBoolean());\n    reader.beginObject();\n    reader.endObject();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 1200,
        "end_line": 1209,
        "comment": "",
        "child_ranges": [
            "(line 1201,col 5)-(line 1201,col 61)",
            "(line 1202,col 5)-(line 1202,col 28)",
            "(line 1203,col 5)-(line 1203,col 24)",
            "(line 1204,col 5)-(line 1204,col 22)",
            "(line 1205,col 5)-(line 1205,col 45)",
            "(line 1206,col 5)-(line 1206,col 25)",
            "(line 1207,col 5)-(line 1207,col 23)",
            "(line 1208,col 5)-(line 1208,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictMultipleTopLevelValuesWithSkipValue()",
        "snippet": "  public void testStrictMultipleTopLevelValuesWithSkipValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[] []\"));\n    reader.beginArray();\n    reader.endArray();\n    try {\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1211,
        "end_line": 1220,
        "comment": "",
        "child_ranges": [
            "(line 1212,col 5)-(line 1212,col 56)",
            "(line 1213,col 5)-(line 1213,col 24)",
            "(line 1214,col 5)-(line 1214,col 22)",
            "(line 1215,col 5)-(line 1219,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testTopLevelValueTypes()",
        "snippet": "  public void testTopLevelValueTypes() throws IOException {\n    JsonReader reader1 = new JsonReader(reader(\"true\"));\n    assertTrue(reader1.nextBoolean());\n    assertEquals(JsonToken.END_DOCUMENT, reader1.peek());\n\n    JsonReader reader2 = new JsonReader(reader(\"false\"));\n    assertFalse(reader2.nextBoolean());\n    assertEquals(JsonToken.END_DOCUMENT, reader2.peek());\n\n    JsonReader reader3 = new JsonReader(reader(\"null\"));\n    assertEquals(JsonToken.NULL, reader3.peek());\n    reader3.nextNull();\n    assertEquals(JsonToken.END_DOCUMENT, reader3.peek());\n\n    JsonReader reader4 = new JsonReader(reader(\"123\"));\n    assertEquals(123, reader4.nextInt());\n    assertEquals(JsonToken.END_DOCUMENT, reader4.peek());\n\n    JsonReader reader5 = new JsonReader(reader(\"123.4\"));\n    assertEquals(123.4, reader5.nextDouble());\n    assertEquals(JsonToken.END_DOCUMENT, reader5.peek());\n\n    JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\n    assertEquals(\"a\", reader6.nextString());\n    assertEquals(JsonToken.END_DOCUMENT, reader6.peek());\n  }",
        "begin_line": 1222,
        "end_line": 1247,
        "comment": "",
        "child_ranges": [
            "(line 1223,col 5)-(line 1223,col 56)",
            "(line 1224,col 5)-(line 1224,col 38)",
            "(line 1225,col 5)-(line 1225,col 57)",
            "(line 1227,col 5)-(line 1227,col 57)",
            "(line 1228,col 5)-(line 1228,col 39)",
            "(line 1229,col 5)-(line 1229,col 57)",
            "(line 1231,col 5)-(line 1231,col 56)",
            "(line 1232,col 5)-(line 1232,col 49)",
            "(line 1233,col 5)-(line 1233,col 23)",
            "(line 1234,col 5)-(line 1234,col 57)",
            "(line 1236,col 5)-(line 1236,col 55)",
            "(line 1237,col 5)-(line 1237,col 41)",
            "(line 1238,col 5)-(line 1238,col 57)",
            "(line 1240,col 5)-(line 1240,col 57)",
            "(line 1241,col 5)-(line 1241,col 46)",
            "(line 1242,col 5)-(line 1242,col 57)",
            "(line 1244,col 5)-(line 1244,col 57)",
            "(line 1245,col 5)-(line 1245,col 44)",
            "(line 1246,col 5)-(line 1246,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testTopLevelValueTypeWithSkipValue()",
        "snippet": "  public void testTopLevelValueTypeWithSkipValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"true\"));\n    reader.skipValue();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 1249,
        "end_line": 1253,
        "comment": "",
        "child_ranges": [
            "(line 1250,col 5)-(line 1250,col 55)",
            "(line 1251,col 5)-(line 1251,col 23)",
            "(line 1252,col 5)-(line 1252,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictNonExecutePrefix()",
        "snippet": "  public void testStrictNonExecutePrefix() {\n    JsonReader reader = new JsonReader(reader(\")]}'\\n []\"));\n    try {\n      reader.beginArray();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1255,
        "end_line": 1262,
        "comment": "",
        "child_ranges": [
            "(line 1256,col 5)-(line 1256,col 60)",
            "(line 1257,col 5)-(line 1261,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictNonExecutePrefixWithSkipValue()",
        "snippet": "  public void testStrictNonExecutePrefixWithSkipValue() {\n    JsonReader reader = new JsonReader(reader(\")]}'\\n []\"));\n    try {\n      reader.skipValue();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1264,
        "end_line": 1271,
        "comment": "",
        "child_ranges": [
            "(line 1265,col 5)-(line 1265,col 60)",
            "(line 1266,col 5)-(line 1270,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientNonExecutePrefix()",
        "snippet": "  public void testLenientNonExecutePrefix() throws IOException {\n    JsonReader reader = new JsonReader(reader(\")]}'\\n []\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    reader.endArray();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 1273,
        "end_line": 1279,
        "comment": "",
        "child_ranges": [
            "(line 1274,col 5)-(line 1274,col 60)",
            "(line 1275,col 5)-(line 1275,col 28)",
            "(line 1276,col 5)-(line 1276,col 24)",
            "(line 1277,col 5)-(line 1277,col 22)",
            "(line 1278,col 5)-(line 1278,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientNonExecutePrefixWithLeadingWhitespace()",
        "snippet": "  public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"\\r\\n \\t)]}'\\n []\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    reader.endArray();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 1281,
        "end_line": 1287,
        "comment": "",
        "child_ranges": [
            "(line 1282,col 5)-(line 1282,col 67)",
            "(line 1283,col 5)-(line 1283,col 28)",
            "(line 1284,col 5)-(line 1284,col 24)",
            "(line 1285,col 5)-(line 1285,col 22)",
            "(line 1286,col 5)-(line 1286,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientPartialNonExecutePrefix()",
        "snippet": "  public void testLenientPartialNonExecutePrefix() {\n    JsonReader reader = new JsonReader(reader(\")]}' []\"));\n    reader.setLenient(true);\n    try {\n      assertEquals(\")\", reader.nextString());\n      reader.nextString();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1289,
        "end_line": 1298,
        "comment": "",
        "child_ranges": [
            "(line 1290,col 5)-(line 1290,col 58)",
            "(line 1291,col 5)-(line 1291,col 28)",
            "(line 1292,col 5)-(line 1297,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testBomIgnoredAsFirstCharacterOfDocument()",
        "snippet": "  public void testBomIgnoredAsFirstCharacterOfDocument() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"\\ufeff[]\"));\n    reader.beginArray();\n    reader.endArray();\n  }",
        "begin_line": 1300,
        "end_line": 1304,
        "comment": "",
        "child_ranges": [
            "(line 1301,col 5)-(line 1301,col 59)",
            "(line 1302,col 5)-(line 1302,col 24)",
            "(line 1303,col 5)-(line 1303,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testBomForbiddenAsOtherCharacterInDocument()",
        "snippet": "  public void testBomForbiddenAsOtherCharacterInDocument() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[\\ufeff]\"));\n    reader.beginArray();\n    try {\n      reader.endArray();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1306,
        "end_line": 1314,
        "comment": "",
        "child_ranges": [
            "(line 1307,col 5)-(line 1307,col 59)",
            "(line 1308,col 5)-(line 1308,col 24)",
            "(line 1309,col 5)-(line 1313,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testFailWithPosition()",
        "snippet": "  public void testFailWithPosition() throws IOException {\n    testFailWithPosition(\"Expected value at line 6 column 5 path $[1]\",\n        \"[\\n\\n\\n\\n\\n\\\"a\\\",}]\");\n  }",
        "begin_line": 1316,
        "end_line": 1319,
        "comment": "",
        "child_ranges": [
            "(line 1317,col 5)-(line 1318,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testFailWithPositionGreaterThanBufferSize()",
        "snippet": "  public void testFailWithPositionGreaterThanBufferSize() throws IOException {\n    String spaces = repeat(' ', 8192);\n    testFailWithPosition(\"Expected value at line 6 column 5 path $[1]\",\n        \"[\\n\\n\" + spaces + \"\\n\\n\\n\\\"a\\\",}]\");\n  }",
        "begin_line": 1321,
        "end_line": 1325,
        "comment": "",
        "child_ranges": [
            "(line 1322,col 5)-(line 1322,col 38)",
            "(line 1323,col 5)-(line 1324,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testFailWithPositionOverSlashSlashEndOfLineComment()",
        "snippet": "  public void testFailWithPositionOverSlashSlashEndOfLineComment() throws IOException {\n    testFailWithPosition(\"Expected value at line 5 column 6 path $[1]\",\n        \"\\n// foo\\n\\n//bar\\r\\n[\\\"a\\\",}\");\n  }",
        "begin_line": 1327,
        "end_line": 1330,
        "comment": "",
        "child_ranges": [
            "(line 1328,col 5)-(line 1329,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testFailWithPositionOverHashEndOfLineComment()",
        "snippet": "  public void testFailWithPositionOverHashEndOfLineComment() throws IOException {\n    testFailWithPosition(\"Expected value at line 5 column 6 path $[1]\",\n        \"\\n# foo\\n\\n#bar\\r\\n[\\\"a\\\",}\");\n  }",
        "begin_line": 1332,
        "end_line": 1335,
        "comment": "",
        "child_ranges": [
            "(line 1333,col 5)-(line 1334,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testFailWithPositionOverCStyleComment()",
        "snippet": "  public void testFailWithPositionOverCStyleComment() throws IOException {\n    testFailWithPosition(\"Expected value at line 6 column 12 path $[1]\",\n        \"\\n\\n/* foo\\n*\\n*\\r\\nbar */[\\\"a\\\",}\");\n  }",
        "begin_line": 1337,
        "end_line": 1340,
        "comment": "",
        "child_ranges": [
            "(line 1338,col 5)-(line 1339,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testFailWithPositionOverQuotedString()",
        "snippet": "  public void testFailWithPositionOverQuotedString() throws IOException {\n    testFailWithPosition(\"Expected value at line 5 column 3 path $[1]\",\n        \"[\\\"foo\\nbar\\r\\nbaz\\n\\\",\\n  }\");\n  }",
        "begin_line": 1342,
        "end_line": 1345,
        "comment": "",
        "child_ranges": [
            "(line 1343,col 5)-(line 1344,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testFailWithPositionOverUnquotedString()",
        "snippet": "  public void testFailWithPositionOverUnquotedString() throws IOException {\n    testFailWithPosition(\"Expected value at line 5 column 2 path $[1]\", \"[\\n\\nabcd\\n\\n,}\");\n  }",
        "begin_line": 1347,
        "end_line": 1349,
        "comment": "",
        "child_ranges": [
            "(line 1348,col 5)-(line 1348,col 91)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testFailWithEscapedNewlineCharacter()",
        "snippet": "  public void testFailWithEscapedNewlineCharacter() throws IOException {\n    testFailWithPosition(\"Expected value at line 5 column 3 path $[1]\", \"[\\n\\n\\\"\\\\\\n\\n\\\",}\");\n  }",
        "begin_line": 1351,
        "end_line": 1353,
        "comment": "",
        "child_ranges": [
            "(line 1352,col 5)-(line 1352,col 93)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testFailWithPositionIsOffsetByBom()",
        "snippet": "  public void testFailWithPositionIsOffsetByBom() throws IOException {\n    testFailWithPosition(\"Expected value at line 1 column 6 path $[1]\",\n        \"\\ufeff[\\\"a\\\",}]\");\n  }",
        "begin_line": 1355,
        "end_line": 1358,
        "comment": "",
        "child_ranges": [
            "(line 1356,col 5)-(line 1357,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testFailWithPosition(java.lang.String, java.lang.String)",
        "snippet": "  private void testFailWithPosition(String message, String json) throws IOException {\n    // Validate that it works reading the string normally.\n    JsonReader reader1 = new JsonReader(reader(json));\n    reader1.setLenient(true);\n    reader1.beginArray();\n    reader1.nextString();\n    try {\n      reader1.peek();\n      fail();\n    } catch (IOException expected) {\n      assertEquals(message, expected.getMessage());\n    }\n\n    // Also validate that it works when skipping.\n    JsonReader reader2 = new JsonReader(reader(json));\n    reader2.setLenient(true);\n    reader2.beginArray();\n    reader2.skipValue();\n    try {\n      reader2.peek();\n      fail();\n    } catch (IOException expected) {\n      assertEquals(message, expected.getMessage());\n    }\n  }",
        "begin_line": 1360,
        "end_line": 1384,
        "comment": "",
        "child_ranges": [
            "(line 1362,col 5)-(line 1362,col 54)",
            "(line 1363,col 5)-(line 1363,col 29)",
            "(line 1364,col 5)-(line 1364,col 25)",
            "(line 1365,col 5)-(line 1365,col 25)",
            "(line 1366,col 5)-(line 1371,col 5)",
            "(line 1374,col 5)-(line 1374,col 54)",
            "(line 1375,col 5)-(line 1375,col 29)",
            "(line 1376,col 5)-(line 1376,col 25)",
            "(line 1377,col 5)-(line 1377,col 24)",
            "(line 1378,col 5)-(line 1383,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testFailWithPositionDeepPath()",
        "snippet": "  public void testFailWithPositionDeepPath() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[1,{\\\"a\\\":[2,3,}\"));\n    reader.beginArray();\n    reader.nextInt();\n    reader.beginObject();\n    reader.nextName();\n    reader.beginArray();\n    reader.nextInt();\n    reader.nextInt();\n    try {\n      reader.peek();\n      fail();\n    } catch (IOException expected) {\n      assertEquals(\"Expected value at line 1 column 14 path $[1].a[2]\", expected.getMessage());\n    }\n  }",
        "begin_line": 1386,
        "end_line": 1401,
        "comment": "",
        "child_ranges": [
            "(line 1387,col 5)-(line 1387,col 67)",
            "(line 1388,col 5)-(line 1388,col 24)",
            "(line 1389,col 5)-(line 1389,col 21)",
            "(line 1390,col 5)-(line 1390,col 25)",
            "(line 1391,col 5)-(line 1391,col 22)",
            "(line 1392,col 5)-(line 1392,col 24)",
            "(line 1393,col 5)-(line 1393,col 21)",
            "(line 1394,col 5)-(line 1394,col 21)",
            "(line 1395,col 5)-(line 1400,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictVeryLongNumber()",
        "snippet": "  public void testStrictVeryLongNumber() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[0.\" + repeat('9', 8192) + \"]\"));\n    reader.beginArray();\n    try {\n      assertEquals(1d, reader.nextDouble());\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n  }",
        "begin_line": 1403,
        "end_line": 1411,
        "comment": "",
        "child_ranges": [
            "(line 1404,col 5)-(line 1404,col 80)",
            "(line 1405,col 5)-(line 1405,col 24)",
            "(line 1406,col 5)-(line 1410,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientVeryLongNumber()",
        "snippet": "  public void testLenientVeryLongNumber() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[0.\" + repeat('9', 8192) + \"]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(JsonToken.STRING, reader.peek());\n    assertEquals(1d, reader.nextDouble());\n    reader.endArray();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 1413,
        "end_line": 1421,
        "comment": "",
        "child_ranges": [
            "(line 1414,col 5)-(line 1414,col 80)",
            "(line 1415,col 5)-(line 1415,col 28)",
            "(line 1416,col 5)-(line 1416,col 24)",
            "(line 1417,col 5)-(line 1417,col 50)",
            "(line 1418,col 5)-(line 1418,col 42)",
            "(line 1419,col 5)-(line 1419,col 22)",
            "(line 1420,col 5)-(line 1420,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testVeryLongUnquotedLiteral()",
        "snippet": "  public void testVeryLongUnquotedLiteral() throws IOException {\n    String literal = \"a\" + repeat('b', 8192) + \"c\";\n    JsonReader reader = new JsonReader(reader(\"[\" + literal + \"]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(literal, reader.nextString());\n    reader.endArray();\n  }",
        "begin_line": 1423,
        "end_line": 1430,
        "comment": "",
        "child_ranges": [
            "(line 1424,col 5)-(line 1424,col 51)",
            "(line 1425,col 5)-(line 1425,col 68)",
            "(line 1426,col 5)-(line 1426,col 28)",
            "(line 1427,col 5)-(line 1427,col 24)",
            "(line 1428,col 5)-(line 1428,col 47)",
            "(line 1429,col 5)-(line 1429,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testDeeplyNestedArrays()",
        "snippet": "  public void testDeeplyNestedArrays() throws IOException {\n    // this is nested 40 levels deep; Gson is tuned for nesting is 30 levels deep or fewer\n    JsonReader reader = new JsonReader(reader(\n        \"[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\"));\n    for (int i = 0; i < 40; i++) {\n      reader.beginArray();\n    }\n    assertEquals(\"$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]\"\n        + \"[0][0][0][0][0][0][0][0][0][0][0][0][0][0]\", reader.getPath());\n    for (int i = 0; i < 40; i++) {\n      reader.endArray();\n    }\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 1432,
        "end_line": 1445,
        "comment": "",
        "child_ranges": [
            "(line 1434,col 5)-(line 1435,col 93)",
            "(line 1436,col 5)-(line 1438,col 5)",
            "(line 1439,col 5)-(line 1440,col 74)",
            "(line 1441,col 5)-(line 1443,col 5)",
            "(line 1444,col 5)-(line 1444,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testDeeplyNestedObjects()",
        "snippet": "  public void testDeeplyNestedObjects() throws IOException {\n    // Build a JSON document structured like {\"a\":{\"a\":{\"a\":{\"a\":true}}}}, but 40 levels deep\n    String array = \"{\\\"a\\\":%s}\";\n    String json = \"true\";\n    for (int i = 0; i < 40; i++) {\n      json = String.format(array, json);\n    }\n\n    JsonReader reader = new JsonReader(reader(json));\n    for (int i = 0; i < 40; i++) {\n      reader.beginObject();\n      assertEquals(\"a\", reader.nextName());\n    }\n    assertEquals(\"$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a\"\n        + \".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a\", reader.getPath());\n    assertEquals(true, reader.nextBoolean());\n    for (int i = 0; i < 40; i++) {\n      reader.endObject();\n    }\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 1447,
        "end_line": 1467,
        "comment": "",
        "child_ranges": [
            "(line 1449,col 5)-(line 1449,col 32)",
            "(line 1450,col 5)-(line 1450,col 25)",
            "(line 1451,col 5)-(line 1453,col 5)",
            "(line 1455,col 5)-(line 1455,col 53)",
            "(line 1456,col 5)-(line 1459,col 5)",
            "(line 1460,col 5)-(line 1461,col 72)",
            "(line 1462,col 5)-(line 1462,col 45)",
            "(line 1463,col 5)-(line 1465,col 5)",
            "(line 1466,col 5)-(line 1466,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStringEndingInSlash()",
        "snippet": "  public void testStringEndingInSlash() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"/\"));\n    reader.setLenient(true);\n    try {\n      reader.peek();\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n  }",
        "begin_line": 1470,
        "end_line": 1478,
        "comment": " http://code.google.com/p/google-gson/issues/detail?id=409",
        "child_ranges": [
            "(line 1471,col 5)-(line 1471,col 52)",
            "(line 1472,col 5)-(line 1472,col 28)",
            "(line 1473,col 5)-(line 1477,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testDocumentWithCommentEndingInSlash()",
        "snippet": "  public void testDocumentWithCommentEndingInSlash() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"/* foo *//\"));\n    reader.setLenient(true);\n    try {\n      reader.peek();\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n  }",
        "begin_line": 1480,
        "end_line": 1488,
        "comment": "",
        "child_ranges": [
            "(line 1481,col 5)-(line 1481,col 61)",
            "(line 1482,col 5)-(line 1482,col 28)",
            "(line 1483,col 5)-(line 1487,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStringWithLeadingSlash()",
        "snippet": "  public void testStringWithLeadingSlash() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"/x\"));\n    reader.setLenient(true);\n    try {\n      reader.peek();\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n  }",
        "begin_line": 1490,
        "end_line": 1498,
        "comment": "",
        "child_ranges": [
            "(line 1491,col 5)-(line 1491,col 53)",
            "(line 1492,col 5)-(line 1492,col 28)",
            "(line 1493,col 5)-(line 1497,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testUnterminatedObject()",
        "snippet": "  public void testUnterminatedObject() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":\\\"android\\\"x\"));\n    reader.setLenient(true);\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    assertEquals(\"android\", reader.nextString());\n    try {\n      reader.peek();\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n  }",
        "begin_line": 1500,
        "end_line": 1511,
        "comment": "",
        "child_ranges": [
            "(line 1501,col 5)-(line 1501,col 70)",
            "(line 1502,col 5)-(line 1502,col 28)",
            "(line 1503,col 5)-(line 1503,col 25)",
            "(line 1504,col 5)-(line 1504,col 41)",
            "(line 1505,col 5)-(line 1505,col 49)",
            "(line 1506,col 5)-(line 1510,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testVeryLongQuotedString()",
        "snippet": "  public void testVeryLongQuotedString() throws IOException {\n    char[] stringChars = new char[1024 * 16];\n    Arrays.fill(stringChars, 'x');\n    String string = new String(stringChars);\n    String json = \"[\\\"\" + string + \"\\\"]\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.beginArray();\n    assertEquals(string, reader.nextString());\n    reader.endArray();\n  }",
        "begin_line": 1513,
        "end_line": 1522,
        "comment": "",
        "child_ranges": [
            "(line 1514,col 5)-(line 1514,col 45)",
            "(line 1515,col 5)-(line 1515,col 34)",
            "(line 1516,col 5)-(line 1516,col 44)",
            "(line 1517,col 5)-(line 1517,col 41)",
            "(line 1518,col 5)-(line 1518,col 53)",
            "(line 1519,col 5)-(line 1519,col 24)",
            "(line 1520,col 5)-(line 1520,col 46)",
            "(line 1521,col 5)-(line 1521,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testVeryLongUnquotedString()",
        "snippet": "  public void testVeryLongUnquotedString() throws IOException {\n    char[] stringChars = new char[1024 * 16];\n    Arrays.fill(stringChars, 'x');\n    String string = new String(stringChars);\n    String json = \"[\" + string + \"]\";\n    JsonReader reader = new JsonReader(reader(json));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(string, reader.nextString());\n    reader.endArray();\n  }",
        "begin_line": 1524,
        "end_line": 1534,
        "comment": "",
        "child_ranges": [
            "(line 1525,col 5)-(line 1525,col 45)",
            "(line 1526,col 5)-(line 1526,col 34)",
            "(line 1527,col 5)-(line 1527,col 44)",
            "(line 1528,col 5)-(line 1528,col 37)",
            "(line 1529,col 5)-(line 1529,col 53)",
            "(line 1530,col 5)-(line 1530,col 28)",
            "(line 1531,col 5)-(line 1531,col 24)",
            "(line 1532,col 5)-(line 1532,col 46)",
            "(line 1533,col 5)-(line 1533,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testVeryLongUnterminatedString()",
        "snippet": "  public void testVeryLongUnterminatedString() throws IOException {\n    char[] stringChars = new char[1024 * 16];\n    Arrays.fill(stringChars, 'x');\n    String string = new String(stringChars);\n    String json = \"[\" + string;\n    JsonReader reader = new JsonReader(reader(json));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(string, reader.nextString());\n    try {\n      reader.peek();\n      fail();\n    } catch (EOFException expected) {\n    }\n  }",
        "begin_line": 1536,
        "end_line": 1550,
        "comment": "",
        "child_ranges": [
            "(line 1537,col 5)-(line 1537,col 45)",
            "(line 1538,col 5)-(line 1538,col 34)",
            "(line 1539,col 5)-(line 1539,col 44)",
            "(line 1540,col 5)-(line 1540,col 31)",
            "(line 1541,col 5)-(line 1541,col 53)",
            "(line 1542,col 5)-(line 1542,col 28)",
            "(line 1543,col 5)-(line 1543,col 24)",
            "(line 1544,col 5)-(line 1544,col 46)",
            "(line 1545,col 5)-(line 1549,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testSkipVeryLongUnquotedString()",
        "snippet": "  public void testSkipVeryLongUnquotedString() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[\" + repeat('x', 8192) + \"]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    reader.skipValue();\n    reader.endArray();\n  }",
        "begin_line": 1552,
        "end_line": 1558,
        "comment": "",
        "child_ranges": [
            "(line 1553,col 5)-(line 1553,col 78)",
            "(line 1554,col 5)-(line 1554,col 28)",
            "(line 1555,col 5)-(line 1555,col 24)",
            "(line 1556,col 5)-(line 1556,col 23)",
            "(line 1557,col 5)-(line 1557,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testSkipTopLevelUnquotedString()",
        "snippet": "  public void testSkipTopLevelUnquotedString() throws IOException {\n    JsonReader reader = new JsonReader(reader(repeat('x', 8192)));\n    reader.setLenient(true);\n    reader.skipValue();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 1560,
        "end_line": 1565,
        "comment": "",
        "child_ranges": [
            "(line 1561,col 5)-(line 1561,col 66)",
            "(line 1562,col 5)-(line 1562,col 28)",
            "(line 1563,col 5)-(line 1563,col 23)",
            "(line 1564,col 5)-(line 1564,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testSkipVeryLongQuotedString()",
        "snippet": "  public void testSkipVeryLongQuotedString() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[\\\"\" + repeat('x', 8192) + \"\\\"]\"));\n    reader.beginArray();\n    reader.skipValue();\n    reader.endArray();\n  }",
        "begin_line": 1567,
        "end_line": 1572,
        "comment": "",
        "child_ranges": [
            "(line 1568,col 5)-(line 1568,col 82)",
            "(line 1569,col 5)-(line 1569,col 24)",
            "(line 1570,col 5)-(line 1570,col 23)",
            "(line 1571,col 5)-(line 1571,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testSkipTopLevelQuotedString()",
        "snippet": "  public void testSkipTopLevelQuotedString() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"\\\"\" + repeat('x', 8192) + \"\\\"\"));\n    reader.setLenient(true);\n    reader.skipValue();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 1574,
        "end_line": 1579,
        "comment": "",
        "child_ranges": [
            "(line 1575,col 5)-(line 1575,col 80)",
            "(line 1576,col 5)-(line 1576,col 28)",
            "(line 1577,col 5)-(line 1577,col 23)",
            "(line 1578,col 5)-(line 1578,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStringAsNumberWithTruncatedExponent()",
        "snippet": "  public void testStringAsNumberWithTruncatedExponent() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[123e]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(STRING, reader.peek());\n  }",
        "begin_line": 1581,
        "end_line": 1586,
        "comment": "",
        "child_ranges": [
            "(line 1582,col 5)-(line 1582,col 57)",
            "(line 1583,col 5)-(line 1583,col 28)",
            "(line 1584,col 5)-(line 1584,col 24)",
            "(line 1585,col 5)-(line 1585,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStringAsNumberWithDigitAndNonDigitExponent()",
        "snippet": "  public void testStringAsNumberWithDigitAndNonDigitExponent() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[123e4b]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(STRING, reader.peek());\n  }",
        "begin_line": 1588,
        "end_line": 1593,
        "comment": "",
        "child_ranges": [
            "(line 1589,col 5)-(line 1589,col 59)",
            "(line 1590,col 5)-(line 1590,col 28)",
            "(line 1591,col 5)-(line 1591,col 24)",
            "(line 1592,col 5)-(line 1592,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStringAsNumberWithNonDigitExponent()",
        "snippet": "  public void testStringAsNumberWithNonDigitExponent() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[123eb]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(STRING, reader.peek());\n  }",
        "begin_line": 1595,
        "end_line": 1600,
        "comment": "",
        "child_ranges": [
            "(line 1596,col 5)-(line 1596,col 58)",
            "(line 1597,col 5)-(line 1597,col 28)",
            "(line 1598,col 5)-(line 1598,col 24)",
            "(line 1599,col 5)-(line 1599,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testEmptyStringName()",
        "snippet": "  public void testEmptyStringName() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{\\\"\\\":true}\"));\n    reader.setLenient(true);\n    assertEquals(BEGIN_OBJECT, reader.peek());\n    reader.beginObject();\n    assertEquals(NAME, reader.peek());\n    assertEquals(\"\", reader.nextName());\n    assertEquals(JsonToken.BOOLEAN, reader.peek());\n    assertEquals(true, reader.nextBoolean());\n    assertEquals(JsonToken.END_OBJECT, reader.peek());\n    reader.endObject();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }",
        "begin_line": 1602,
        "end_line": 1614,
        "comment": "",
        "child_ranges": [
            "(line 1603,col 5)-(line 1603,col 62)",
            "(line 1604,col 5)-(line 1604,col 28)",
            "(line 1605,col 5)-(line 1605,col 46)",
            "(line 1606,col 5)-(line 1606,col 25)",
            "(line 1607,col 5)-(line 1607,col 38)",
            "(line 1608,col 5)-(line 1608,col 40)",
            "(line 1609,col 5)-(line 1609,col 51)",
            "(line 1610,col 5)-(line 1610,col 45)",
            "(line 1611,col 5)-(line 1611,col 54)",
            "(line 1612,col 5)-(line 1612,col 23)",
            "(line 1613,col 5)-(line 1613,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testStrictExtraCommasInMaps()",
        "snippet": "  public void testStrictExtraCommasInMaps() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":\\\"b\\\",}\"));\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    assertEquals(\"b\", reader.nextString());\n    try {\n      reader.peek();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1616,
        "end_line": 1626,
        "comment": "",
        "child_ranges": [
            "(line 1617,col 5)-(line 1617,col 65)",
            "(line 1618,col 5)-(line 1618,col 25)",
            "(line 1619,col 5)-(line 1619,col 41)",
            "(line 1620,col 5)-(line 1620,col 43)",
            "(line 1621,col 5)-(line 1625,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testLenientExtraCommasInMaps()",
        "snippet": "  public void testLenientExtraCommasInMaps() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":\\\"b\\\",}\"));\n    reader.setLenient(true);\n    reader.beginObject();\n    assertEquals(\"a\", reader.nextName());\n    assertEquals(\"b\", reader.nextString());\n    try {\n      reader.peek();\n      fail();\n    } catch (IOException expected) {\n    }\n  }",
        "begin_line": 1628,
        "end_line": 1639,
        "comment": "",
        "child_ranges": [
            "(line 1629,col 5)-(line 1629,col 65)",
            "(line 1630,col 5)-(line 1630,col 28)",
            "(line 1631,col 5)-(line 1631,col 25)",
            "(line 1632,col 5)-(line 1632,col 41)",
            "(line 1633,col 5)-(line 1633,col 43)",
            "(line 1634,col 5)-(line 1638,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.repeat(char, int)",
        "snippet": "  private String repeat(char c, int count) {\n    char[] array = new char[count];\n    Arrays.fill(array, c);\n    return new String(array);\n  }",
        "begin_line": 1641,
        "end_line": 1645,
        "comment": "",
        "child_ranges": [
            "(line 1642,col 5)-(line 1642,col 35)",
            "(line 1643,col 5)-(line 1643,col 26)",
            "(line 1644,col 5)-(line 1644,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testMalformedDocuments()",
        "snippet": "  public void testMalformedDocuments() throws IOException {\n    assertDocument(\"{]\", BEGIN_OBJECT, IOException.class);\n    assertDocument(\"{,\", BEGIN_OBJECT, IOException.class);\n    assertDocument(\"{{\", BEGIN_OBJECT, IOException.class);\n    assertDocument(\"{[\", BEGIN_OBJECT, IOException.class);\n    assertDocument(\"{:\", BEGIN_OBJECT, IOException.class);\n    assertDocument(\"{\\\"name\\\",\", BEGIN_OBJECT, NAME, IOException.class);\n    assertDocument(\"{\\\"name\\\",\", BEGIN_OBJECT, NAME, IOException.class);\n    assertDocument(\"{\\\"name\\\":}\", BEGIN_OBJECT, NAME, IOException.class);\n    assertDocument(\"{\\\"name\\\"::\", BEGIN_OBJECT, NAME, IOException.class);\n    assertDocument(\"{\\\"name\\\":,\", BEGIN_OBJECT, NAME, IOException.class);\n    assertDocument(\"{\\\"name\\\"=}\", BEGIN_OBJECT, NAME, IOException.class);\n    assertDocument(\"{\\\"name\\\"=>}\", BEGIN_OBJECT, NAME, IOException.class);\n    assertDocument(\"{\\\"name\\\"=>\\\"string\\\":\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n    assertDocument(\"{\\\"name\\\"=>\\\"string\\\"=\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n    assertDocument(\"{\\\"name\\\"=>\\\"string\\\"=>\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n    assertDocument(\"{\\\"name\\\"=>\\\"string\\\",\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n    assertDocument(\"{\\\"name\\\"=>\\\"string\\\",\\\"name\\\"\", BEGIN_OBJECT, NAME, STRING, NAME);\n    assertDocument(\"[}\", BEGIN_ARRAY, IOException.class);\n    assertDocument(\"[,]\", BEGIN_ARRAY, NULL, NULL, END_ARRAY);\n    assertDocument(\"{\", BEGIN_OBJECT, IOException.class);\n    assertDocument(\"{\\\"name\\\"\", BEGIN_OBJECT, NAME, IOException.class);\n    assertDocument(\"{\\\"name\\\",\", BEGIN_OBJECT, NAME, IOException.class);\n    assertDocument(\"{'name'\", BEGIN_OBJECT, NAME, IOException.class);\n    assertDocument(\"{'name',\", BEGIN_OBJECT, NAME, IOException.class);\n    assertDocument(\"{name\", BEGIN_OBJECT, NAME, IOException.class);\n    assertDocument(\"[\", BEGIN_ARRAY, IOException.class);\n    assertDocument(\"[string\", BEGIN_ARRAY, STRING, IOException.class);\n    assertDocument(\"[\\\"string\\\"\", BEGIN_ARRAY, STRING, IOException.class);\n    assertDocument(\"['string'\", BEGIN_ARRAY, STRING, IOException.class);\n    assertDocument(\"[123\", BEGIN_ARRAY, NUMBER, IOException.class);\n    assertDocument(\"[123,\", BEGIN_ARRAY, NUMBER, IOException.class);\n    assertDocument(\"{\\\"name\\\":123\", BEGIN_OBJECT, NAME, NUMBER, IOException.class);\n    assertDocument(\"{\\\"name\\\":123,\", BEGIN_OBJECT, NAME, NUMBER, IOException.class);\n    assertDocument(\"{\\\"name\\\":\\\"string\\\"\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n    assertDocument(\"{\\\"name\\\":\\\"string\\\",\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n    assertDocument(\"{\\\"name\\\":'string'\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n    assertDocument(\"{\\\"name\\\":'string',\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n    assertDocument(\"{\\\"name\\\":false\", BEGIN_OBJECT, NAME, BOOLEAN, IOException.class);\n    assertDocument(\"{\\\"name\\\":false,,\", BEGIN_OBJECT, NAME, BOOLEAN, IOException.class);\n  }",
        "begin_line": 1647,
        "end_line": 1687,
        "comment": "",
        "child_ranges": [
            "(line 1648,col 5)-(line 1648,col 58)",
            "(line 1649,col 5)-(line 1649,col 58)",
            "(line 1650,col 5)-(line 1650,col 58)",
            "(line 1651,col 5)-(line 1651,col 58)",
            "(line 1652,col 5)-(line 1652,col 58)",
            "(line 1653,col 5)-(line 1653,col 72)",
            "(line 1654,col 5)-(line 1654,col 72)",
            "(line 1655,col 5)-(line 1655,col 73)",
            "(line 1656,col 5)-(line 1656,col 73)",
            "(line 1657,col 5)-(line 1657,col 73)",
            "(line 1658,col 5)-(line 1658,col 73)",
            "(line 1659,col 5)-(line 1659,col 74)",
            "(line 1660,col 5)-(line 1660,col 92)",
            "(line 1661,col 5)-(line 1661,col 92)",
            "(line 1662,col 5)-(line 1662,col 93)",
            "(line 1663,col 5)-(line 1663,col 92)",
            "(line 1664,col 5)-(line 1664,col 87)",
            "(line 1665,col 5)-(line 1665,col 57)",
            "(line 1666,col 5)-(line 1666,col 62)",
            "(line 1667,col 5)-(line 1667,col 57)",
            "(line 1668,col 5)-(line 1668,col 71)",
            "(line 1669,col 5)-(line 1669,col 72)",
            "(line 1670,col 5)-(line 1670,col 69)",
            "(line 1671,col 5)-(line 1671,col 70)",
            "(line 1672,col 5)-(line 1672,col 67)",
            "(line 1673,col 5)-(line 1673,col 56)",
            "(line 1674,col 5)-(line 1674,col 70)",
            "(line 1675,col 5)-(line 1675,col 74)",
            "(line 1676,col 5)-(line 1676,col 72)",
            "(line 1677,col 5)-(line 1677,col 67)",
            "(line 1678,col 5)-(line 1678,col 68)",
            "(line 1679,col 5)-(line 1679,col 83)",
            "(line 1680,col 5)-(line 1680,col 84)",
            "(line 1681,col 5)-(line 1681,col 90)",
            "(line 1682,col 5)-(line 1682,col 91)",
            "(line 1683,col 5)-(line 1683,col 88)",
            "(line 1684,col 5)-(line 1684,col 89)",
            "(line 1685,col 5)-(line 1685,col 86)",
            "(line 1686,col 5)-(line 1686,col 88)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.testUnterminatedStringFailure()",
        "snippet": "  public void testUnterminatedStringFailure() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[\\\"string\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(JsonToken.STRING, reader.peek());\n    try {\n      reader.nextString();\n      fail();\n    } catch (MalformedJsonException expected) {\n    }\n  }",
        "begin_line": 1693,
        "end_line": 1703,
        "comment": "\n   * This test behave slightly differently in Gson 2.2 and earlier. It fails\n   * during peek rather than during nextString().\n   ",
        "child_ranges": [
            "(line 1694,col 5)-(line 1694,col 60)",
            "(line 1695,col 5)-(line 1695,col 28)",
            "(line 1696,col 5)-(line 1696,col 24)",
            "(line 1697,col 5)-(line 1697,col 50)",
            "(line 1698,col 5)-(line 1702,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.assertDocument(java.lang.String, java.lang.Object...)",
        "snippet": "  private void assertDocument(String document, Object... expectations) throws IOException {\n    JsonReader reader = new JsonReader(reader(document));\n    reader.setLenient(true);\n    for (Object expectation : expectations) {\n      if (expectation == BEGIN_OBJECT) {\n        reader.beginObject();\n      } else if (expectation == BEGIN_ARRAY) {\n        reader.beginArray();\n      } else if (expectation == END_OBJECT) {\n        reader.endObject();\n      } else if (expectation == END_ARRAY) {\n        reader.endArray();\n      } else if (expectation == NAME) {\n        assertEquals(\"name\", reader.nextName());\n      } else if (expectation == BOOLEAN) {\n        assertEquals(false, reader.nextBoolean());\n      } else if (expectation == STRING) {\n        assertEquals(\"string\", reader.nextString());\n      } else if (expectation == NUMBER) {\n        assertEquals(123, reader.nextInt());\n      } else if (expectation == NULL) {\n        reader.nextNull();\n      } else if (expectation == IOException.class) {\n        try {\n          reader.peek();\n          fail();\n        } catch (IOException expected) {\n        }\n      } else {\n        throw new AssertionError();\n      }\n    }\n  }",
        "begin_line": 1705,
        "end_line": 1737,
        "comment": "",
        "child_ranges": [
            "(line 1706,col 5)-(line 1706,col 57)",
            "(line 1707,col 5)-(line 1707,col 28)",
            "(line 1708,col 5)-(line 1736,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "signature": "com.google.gson.stream.JsonReaderTest.reader(java.lang.String)",
        "snippet": "  private Reader reader(final String s) {\n    /* if (true) */ return new StringReader(s);\n    /* return new Reader() {\n      int position = 0;\n      @Override public int read(char[] buffer, int offset, int count) throws IOException {\n        if (position == s.length()) {\n          return -1;\n        } else if (count > 0) {\n          buffer[offset] = s.charAt(position++);\n          return 1;\n        } else {\n          throw new IllegalArgumentException();\n        }\n      }\n      @Override public void close() throws IOException {\n      }\n    }; */\n  }",
        "begin_line": 1742,
        "end_line": 1759,
        "comment": "\n   * Returns a reader that returns one character at a time.\n   ",
        "child_ranges": [
            "(line 1743,col 21)-(line 1743,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderPathTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java",
        "signature": "com.google.gson.stream.JsonReaderPathTest.testPath()",
        "snippet": "  public void testPath() throws IOException {\n    JsonReader reader = new JsonReader(\n        new StringReader(\"{\\\"a\\\":[2,true,false,null,\\\"b\\\",{\\\"c\\\":\\\"d\\\"},[3]]}\"));\n    assertEquals(\"$\", reader.getPath());\n    reader.beginObject();\n    assertEquals(\"$.\", reader.getPath());\n    reader.nextName();\n    assertEquals(\"$.a\", reader.getPath());\n    reader.beginArray();\n    assertEquals(\"$.a[0]\", reader.getPath());\n    reader.nextInt();\n    assertEquals(\"$.a[1]\", reader.getPath());\n    reader.nextBoolean();\n    assertEquals(\"$.a[2]\", reader.getPath());\n    reader.nextBoolean();\n    assertEquals(\"$.a[3]\", reader.getPath());\n    reader.nextNull();\n    assertEquals(\"$.a[4]\", reader.getPath());\n    reader.nextString();\n    assertEquals(\"$.a[5]\", reader.getPath());\n    reader.beginObject();\n    assertEquals(\"$.a[5].\", reader.getPath());\n    reader.nextName();\n    assertEquals(\"$.a[5].c\", reader.getPath());\n    reader.nextString();\n    assertEquals(\"$.a[5].c\", reader.getPath());\n    reader.endObject();\n    assertEquals(\"$.a[6]\", reader.getPath());\n    reader.beginArray();\n    assertEquals(\"$.a[6][0]\", reader.getPath());\n    reader.nextInt();\n    assertEquals(\"$.a[6][1]\", reader.getPath());\n    reader.endArray();\n    assertEquals(\"$.a[7]\", reader.getPath());\n    reader.endArray();\n    assertEquals(\"$.a\", reader.getPath());\n    reader.endObject();\n    assertEquals(\"$\", reader.getPath());\n  }",
        "begin_line": 25,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 26,col 5)-(line 27,col 81)",
            "(line 28,col 5)-(line 28,col 40)",
            "(line 29,col 5)-(line 29,col 25)",
            "(line 30,col 5)-(line 30,col 41)",
            "(line 31,col 5)-(line 31,col 22)",
            "(line 32,col 5)-(line 32,col 42)",
            "(line 33,col 5)-(line 33,col 24)",
            "(line 34,col 5)-(line 34,col 45)",
            "(line 35,col 5)-(line 35,col 21)",
            "(line 36,col 5)-(line 36,col 45)",
            "(line 37,col 5)-(line 37,col 25)",
            "(line 38,col 5)-(line 38,col 45)",
            "(line 39,col 5)-(line 39,col 25)",
            "(line 40,col 5)-(line 40,col 45)",
            "(line 41,col 5)-(line 41,col 22)",
            "(line 42,col 5)-(line 42,col 45)",
            "(line 43,col 5)-(line 43,col 24)",
            "(line 44,col 5)-(line 44,col 45)",
            "(line 45,col 5)-(line 45,col 25)",
            "(line 46,col 5)-(line 46,col 46)",
            "(line 47,col 5)-(line 47,col 22)",
            "(line 48,col 5)-(line 48,col 47)",
            "(line 49,col 5)-(line 49,col 24)",
            "(line 50,col 5)-(line 50,col 47)",
            "(line 51,col 5)-(line 51,col 23)",
            "(line 52,col 5)-(line 52,col 45)",
            "(line 53,col 5)-(line 53,col 24)",
            "(line 54,col 5)-(line 54,col 48)",
            "(line 55,col 5)-(line 55,col 21)",
            "(line 56,col 5)-(line 56,col 48)",
            "(line 57,col 5)-(line 57,col 22)",
            "(line 58,col 5)-(line 58,col 45)",
            "(line 59,col 5)-(line 59,col 22)",
            "(line 60,col 5)-(line 60,col 42)",
            "(line 61,col 5)-(line 61,col 23)",
            "(line 62,col 5)-(line 62,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderPathTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java",
        "signature": "com.google.gson.stream.JsonReaderPathTest.testObjectPath()",
        "snippet": "  public void testObjectPath() throws IOException {\n    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":1,\\\"b\\\":2}\"));\n    assertEquals(\"$\", reader.getPath());\n\n    reader.peek();\n    assertEquals(\"$\", reader.getPath());\n    reader.beginObject();\n    assertEquals(\"$.\", reader.getPath());\n\n    reader.peek();\n    assertEquals(\"$.\", reader.getPath());\n    reader.nextName();\n    assertEquals(\"$.a\", reader.getPath());\n\n    reader.peek();\n    assertEquals(\"$.a\", reader.getPath());\n    reader.nextInt();\n    assertEquals(\"$.a\", reader.getPath());\n\n    reader.peek();\n    assertEquals(\"$.a\", reader.getPath());\n    reader.nextName();\n    assertEquals(\"$.b\", reader.getPath());\n\n    reader.peek();\n    assertEquals(\"$.b\", reader.getPath());\n    reader.nextInt();\n    assertEquals(\"$.b\", reader.getPath());\n\n    reader.peek();\n    assertEquals(\"$.b\", reader.getPath());\n    reader.endObject();\n    assertEquals(\"$\", reader.getPath());\n\n    reader.peek();\n    assertEquals(\"$\", reader.getPath());\n    reader.close();\n    assertEquals(\"$\", reader.getPath());\n  }",
        "begin_line": 65,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 66,col 5)-(line 66,col 78)",
            "(line 67,col 5)-(line 67,col 40)",
            "(line 69,col 5)-(line 69,col 18)",
            "(line 70,col 5)-(line 70,col 40)",
            "(line 71,col 5)-(line 71,col 25)",
            "(line 72,col 5)-(line 72,col 41)",
            "(line 74,col 5)-(line 74,col 18)",
            "(line 75,col 5)-(line 75,col 41)",
            "(line 76,col 5)-(line 76,col 22)",
            "(line 77,col 5)-(line 77,col 42)",
            "(line 79,col 5)-(line 79,col 18)",
            "(line 80,col 5)-(line 80,col 42)",
            "(line 81,col 5)-(line 81,col 21)",
            "(line 82,col 5)-(line 82,col 42)",
            "(line 84,col 5)-(line 84,col 18)",
            "(line 85,col 5)-(line 85,col 42)",
            "(line 86,col 5)-(line 86,col 22)",
            "(line 87,col 5)-(line 87,col 42)",
            "(line 89,col 5)-(line 89,col 18)",
            "(line 90,col 5)-(line 90,col 42)",
            "(line 91,col 5)-(line 91,col 21)",
            "(line 92,col 5)-(line 92,col 42)",
            "(line 94,col 5)-(line 94,col 18)",
            "(line 95,col 5)-(line 95,col 42)",
            "(line 96,col 5)-(line 96,col 23)",
            "(line 97,col 5)-(line 97,col 40)",
            "(line 99,col 5)-(line 99,col 18)",
            "(line 100,col 5)-(line 100,col 40)",
            "(line 101,col 5)-(line 101,col 19)",
            "(line 102,col 5)-(line 102,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderPathTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java",
        "signature": "com.google.gson.stream.JsonReaderPathTest.testArrayPath()",
        "snippet": "  public void testArrayPath() throws IOException {\n    JsonReader reader = new JsonReader(new StringReader(\"[1,2]\"));\n    assertEquals(\"$\", reader.getPath());\n\n    reader.peek();\n    assertEquals(\"$\", reader.getPath());\n    reader.beginArray();\n    assertEquals(\"$[0]\", reader.getPath());\n\n    reader.peek();\n    assertEquals(\"$[0]\", reader.getPath());\n    reader.nextInt();\n    assertEquals(\"$[1]\", reader.getPath());\n\n    reader.peek();\n    assertEquals(\"$[1]\", reader.getPath());\n    reader.nextInt();\n    assertEquals(\"$[2]\", reader.getPath());\n\n    reader.peek();\n    assertEquals(\"$[2]\", reader.getPath());\n    reader.endArray();\n    assertEquals(\"$\", reader.getPath());\n\n    reader.peek();\n    assertEquals(\"$\", reader.getPath());\n    reader.close();\n    assertEquals(\"$\", reader.getPath());\n  }",
        "begin_line": 105,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 106,col 66)",
            "(line 107,col 5)-(line 107,col 40)",
            "(line 109,col 5)-(line 109,col 18)",
            "(line 110,col 5)-(line 110,col 40)",
            "(line 111,col 5)-(line 111,col 24)",
            "(line 112,col 5)-(line 112,col 43)",
            "(line 114,col 5)-(line 114,col 18)",
            "(line 115,col 5)-(line 115,col 43)",
            "(line 116,col 5)-(line 116,col 21)",
            "(line 117,col 5)-(line 117,col 43)",
            "(line 119,col 5)-(line 119,col 18)",
            "(line 120,col 5)-(line 120,col 43)",
            "(line 121,col 5)-(line 121,col 21)",
            "(line 122,col 5)-(line 122,col 43)",
            "(line 124,col 5)-(line 124,col 18)",
            "(line 125,col 5)-(line 125,col 43)",
            "(line 126,col 5)-(line 126,col 22)",
            "(line 127,col 5)-(line 127,col 40)",
            "(line 129,col 5)-(line 129,col 18)",
            "(line 130,col 5)-(line 130,col 40)",
            "(line 131,col 5)-(line 131,col 19)",
            "(line 132,col 5)-(line 132,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderPathTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java",
        "signature": "com.google.gson.stream.JsonReaderPathTest.testMultipleTopLevelValuesInOneDocument()",
        "snippet": "  public void testMultipleTopLevelValuesInOneDocument() throws IOException {\n    JsonReader reader = new JsonReader(new StringReader(\"[][]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    reader.endArray();\n    assertEquals(\"$\", reader.getPath());\n    reader.beginArray();\n    reader.endArray();\n    assertEquals(\"$\", reader.getPath());\n  }",
        "begin_line": 135,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 136,col 5)-(line 136,col 65)",
            "(line 137,col 5)-(line 137,col 28)",
            "(line 138,col 5)-(line 138,col 24)",
            "(line 139,col 5)-(line 139,col 22)",
            "(line 140,col 5)-(line 140,col 40)",
            "(line 141,col 5)-(line 141,col 24)",
            "(line 142,col 5)-(line 142,col 22)",
            "(line 143,col 5)-(line 143,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderPathTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java",
        "signature": "com.google.gson.stream.JsonReaderPathTest.testSkipArrayElements()",
        "snippet": "  public void testSkipArrayElements() throws IOException {\n    JsonReader reader = new JsonReader(new StringReader(\"[1,2,3]\"));\n    reader.beginArray();\n    reader.skipValue();\n    reader.skipValue();\n    assertEquals(\"$[2]\", reader.getPath());\n  }",
        "begin_line": 146,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 147,col 5)-(line 147,col 68)",
            "(line 148,col 5)-(line 148,col 24)",
            "(line 149,col 5)-(line 149,col 23)",
            "(line 150,col 5)-(line 150,col 23)",
            "(line 151,col 5)-(line 151,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderPathTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java",
        "signature": "com.google.gson.stream.JsonReaderPathTest.testSkipObjectNames()",
        "snippet": "  public void testSkipObjectNames() throws IOException {\n    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":1}\"));\n    reader.beginObject();\n    reader.skipValue();\n    assertEquals(\"$.null\", reader.getPath());\n  }",
        "begin_line": 154,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 155,col 5)-(line 155,col 70)",
            "(line 156,col 5)-(line 156,col 25)",
            "(line 157,col 5)-(line 157,col 23)",
            "(line 158,col 5)-(line 158,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderPathTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java",
        "signature": "com.google.gson.stream.JsonReaderPathTest.testSkipObjectValues()",
        "snippet": "  public void testSkipObjectValues() throws IOException {\n    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":1,\\\"b\\\":2}\"));\n    reader.beginObject();\n    reader.nextName();\n    reader.skipValue();\n    assertEquals(\"$.null\", reader.getPath());\n    reader.nextName();\n    assertEquals(\"$.b\", reader.getPath());\n  }",
        "begin_line": 161,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 78)",
            "(line 163,col 5)-(line 163,col 25)",
            "(line 164,col 5)-(line 164,col 22)",
            "(line 165,col 5)-(line 165,col 23)",
            "(line 166,col 5)-(line 166,col 45)",
            "(line 167,col 5)-(line 167,col 22)",
            "(line 168,col 5)-(line 168,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderPathTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java",
        "signature": "com.google.gson.stream.JsonReaderPathTest.testSkipNestedStructures()",
        "snippet": "  public void testSkipNestedStructures() throws IOException {\n    JsonReader reader = new JsonReader(new StringReader(\"[[1,2,3],4]\"));\n    reader.beginArray();\n    reader.skipValue();\n    assertEquals(\"$[1]\", reader.getPath());\n  }",
        "begin_line": 171,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 172,col 5)-(line 172,col 72)",
            "(line 173,col 5)-(line 173,col 24)",
            "(line 174,col 5)-(line 174,col 23)",
            "(line 175,col 5)-(line 175,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderPathTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java",
        "signature": "com.google.gson.stream.JsonReaderPathTest.testArrayOfObjects()",
        "snippet": "  public void testArrayOfObjects() throws IOException {\n    JsonReader reader = new JsonReader(new StringReader(\"[{},{},{}]\"));\n    reader.beginArray();\n    assertEquals(\"$[0]\", reader.getPath());\n    reader.beginObject();\n    assertEquals(\"$[0].\", reader.getPath());\n    reader.endObject();\n    assertEquals(\"$[1]\", reader.getPath());\n    reader.beginObject();\n    assertEquals(\"$[1].\", reader.getPath());\n    reader.endObject();\n    assertEquals(\"$[2]\", reader.getPath());\n    reader.beginObject();\n    assertEquals(\"$[2].\", reader.getPath());\n    reader.endObject();\n    assertEquals(\"$[3]\", reader.getPath());\n    reader.endArray();\n    assertEquals(\"$\", reader.getPath());\n  }",
        "begin_line": 178,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 179,col 5)-(line 179,col 71)",
            "(line 180,col 5)-(line 180,col 24)",
            "(line 181,col 5)-(line 181,col 43)",
            "(line 182,col 5)-(line 182,col 25)",
            "(line 183,col 5)-(line 183,col 44)",
            "(line 184,col 5)-(line 184,col 23)",
            "(line 185,col 5)-(line 185,col 43)",
            "(line 186,col 5)-(line 186,col 25)",
            "(line 187,col 5)-(line 187,col 44)",
            "(line 188,col 5)-(line 188,col 23)",
            "(line 189,col 5)-(line 189,col 43)",
            "(line 190,col 5)-(line 190,col 25)",
            "(line 191,col 5)-(line 191,col 44)",
            "(line 192,col 5)-(line 192,col 23)",
            "(line 193,col 5)-(line 193,col 43)",
            "(line 194,col 5)-(line 194,col 22)",
            "(line 195,col 5)-(line 195,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonReaderPathTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java",
        "signature": "com.google.gson.stream.JsonReaderPathTest.testArrayOfArrays()",
        "snippet": "  public void testArrayOfArrays() throws IOException {\n    JsonReader reader = new JsonReader(new StringReader(\"[[],[],[]]\"));\n    reader.beginArray();\n    assertEquals(\"$[0]\", reader.getPath());\n    reader.beginArray();\n    assertEquals(\"$[0][0]\", reader.getPath());\n    reader.endArray();\n    assertEquals(\"$[1]\", reader.getPath());\n    reader.beginArray();\n    assertEquals(\"$[1][0]\", reader.getPath());\n    reader.endArray();\n    assertEquals(\"$[2]\", reader.getPath());\n    reader.beginArray();\n    assertEquals(\"$[2][0]\", reader.getPath());\n    reader.endArray();\n    assertEquals(\"$[3]\", reader.getPath());\n    reader.endArray();\n    assertEquals(\"$\", reader.getPath());\n  }",
        "begin_line": 198,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 199,col 5)-(line 199,col 71)",
            "(line 200,col 5)-(line 200,col 24)",
            "(line 201,col 5)-(line 201,col 43)",
            "(line 202,col 5)-(line 202,col 24)",
            "(line 203,col 5)-(line 203,col 46)",
            "(line 204,col 5)-(line 204,col 22)",
            "(line 205,col 5)-(line 205,col 43)",
            "(line 206,col 5)-(line 206,col 24)",
            "(line 207,col 5)-(line 207,col 46)",
            "(line 208,col 5)-(line 208,col 22)",
            "(line 209,col 5)-(line 209,col 43)",
            "(line 210,col 5)-(line 210,col 24)",
            "(line 211,col 5)-(line 211,col 46)",
            "(line 212,col 5)-(line 212,col 22)",
            "(line 213,col 5)-(line 213,col 43)",
            "(line 214,col 5)-(line 214,col 22)",
            "(line 215,col 5)-(line 215,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testTopLevelValueTypes()",
        "snippet": "  public void testTopLevelValueTypes() throws IOException {\n    StringWriter string1 = new StringWriter();\n    JsonWriter writer1 = new JsonWriter(string1);\n    writer1.value(true);\n    writer1.close();\n    assertEquals(\"true\", string1.toString());\n\n    StringWriter string2 = new StringWriter();\n    JsonWriter writer2 = new JsonWriter(string2);\n    writer2.nullValue();\n    writer2.close();\n    assertEquals(\"null\", string2.toString());\n\n    StringWriter string3 = new StringWriter();\n    JsonWriter writer3 = new JsonWriter(string3);\n    writer3.value(123);\n    writer3.close();\n    assertEquals(\"123\", string3.toString());\n\n    StringWriter string4 = new StringWriter();\n    JsonWriter writer4 = new JsonWriter(string4);\n    writer4.value(123.4);\n    writer4.close();\n    assertEquals(\"123.4\", string4.toString());\n\n    StringWriter string5 = new StringWriter();\n    JsonWriter writert = new JsonWriter(string5);\n    writert.value(\"a\");\n    writert.close();\n    assertEquals(\"\\\"a\\\"\", string5.toString());\n  }",
        "begin_line": 28,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 29,col 5)-(line 29,col 46)",
            "(line 30,col 5)-(line 30,col 49)",
            "(line 31,col 5)-(line 31,col 24)",
            "(line 32,col 5)-(line 32,col 20)",
            "(line 33,col 5)-(line 33,col 45)",
            "(line 35,col 5)-(line 35,col 46)",
            "(line 36,col 5)-(line 36,col 49)",
            "(line 37,col 5)-(line 37,col 24)",
            "(line 38,col 5)-(line 38,col 20)",
            "(line 39,col 5)-(line 39,col 45)",
            "(line 41,col 5)-(line 41,col 46)",
            "(line 42,col 5)-(line 42,col 49)",
            "(line 43,col 5)-(line 43,col 23)",
            "(line 44,col 5)-(line 44,col 20)",
            "(line 45,col 5)-(line 45,col 44)",
            "(line 47,col 5)-(line 47,col 46)",
            "(line 48,col 5)-(line 48,col 49)",
            "(line 49,col 5)-(line 49,col 25)",
            "(line 50,col 5)-(line 50,col 20)",
            "(line 51,col 5)-(line 51,col 46)",
            "(line 53,col 5)-(line 53,col 46)",
            "(line 54,col 5)-(line 54,col 49)",
            "(line 55,col 5)-(line 55,col 23)",
            "(line 56,col 5)-(line 56,col 20)",
            "(line 57,col 5)-(line 57,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testInvalidTopLevelTypes()",
        "snippet": "  public void testInvalidTopLevelTypes() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.name(\"hello\");\n    try {\n      jsonWriter.value(\"world\");\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 60,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 61,col 5)-(line 61,col 51)",
            "(line 62,col 5)-(line 62,col 57)",
            "(line 63,col 5)-(line 63,col 29)",
            "(line 64,col 5)-(line 68,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testTwoNames()",
        "snippet": "  public void testTwoNames() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginObject();\n    jsonWriter.name(\"a\");\n    try {\n      jsonWriter.name(\"a\");\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 71,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 51)",
            "(line 73,col 5)-(line 73,col 57)",
            "(line 74,col 5)-(line 74,col 29)",
            "(line 75,col 5)-(line 75,col 25)",
            "(line 76,col 5)-(line 80,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testNameWithoutValue()",
        "snippet": "  public void testNameWithoutValue() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginObject();\n    jsonWriter.name(\"a\");\n    try {\n      jsonWriter.endObject();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 83,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 84,col 5)-(line 84,col 51)",
            "(line 85,col 5)-(line 85,col 57)",
            "(line 86,col 5)-(line 86,col 29)",
            "(line 87,col 5)-(line 87,col 25)",
            "(line 88,col 5)-(line 92,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testValueWithoutName()",
        "snippet": "  public void testValueWithoutName() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginObject();\n    try {\n      jsonWriter.value(true);\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 95,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 96,col 5)-(line 96,col 51)",
            "(line 97,col 5)-(line 97,col 57)",
            "(line 98,col 5)-(line 98,col 29)",
            "(line 99,col 5)-(line 103,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues()",
        "snippet": "  public void testMultipleTopLevelValues() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray().endArray();\n    try {\n      jsonWriter.beginArray();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 106,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 107,col 5)-(line 107,col 51)",
            "(line 108,col 5)-(line 108,col 57)",
            "(line 109,col 5)-(line 109,col 39)",
            "(line 110,col 5)-(line 114,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testBadNestingObject()",
        "snippet": "  public void testBadNestingObject() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    jsonWriter.beginObject();\n    try {\n      jsonWriter.endArray();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 117,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 118,col 51)",
            "(line 119,col 5)-(line 119,col 57)",
            "(line 120,col 5)-(line 120,col 28)",
            "(line 121,col 5)-(line 121,col 29)",
            "(line 122,col 5)-(line 126,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testBadNestingArray()",
        "snippet": "  public void testBadNestingArray() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    jsonWriter.beginArray();\n    try {\n      jsonWriter.endObject();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 129,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 130,col 5)-(line 130,col 51)",
            "(line 131,col 5)-(line 131,col 57)",
            "(line 132,col 5)-(line 132,col 28)",
            "(line 133,col 5)-(line 133,col 28)",
            "(line 134,col 5)-(line 138,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testNullName()",
        "snippet": "  public void testNullName() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginObject();\n    try {\n      jsonWriter.name(null);\n      fail();\n    } catch (NullPointerException expected) {\n    }\n  }",
        "begin_line": 141,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 142,col 5)-(line 142,col 51)",
            "(line 143,col 5)-(line 143,col 57)",
            "(line 144,col 5)-(line 144,col 29)",
            "(line 145,col 5)-(line 149,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testNullStringValue()",
        "snippet": "  public void testNullStringValue() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginObject();\n    jsonWriter.name(\"a\");\n    jsonWriter.value((String) null);\n    jsonWriter.endObject();\n    assertEquals(\"{\\\"a\\\":null}\", stringWriter.toString());\n  }",
        "begin_line": 152,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 153,col 51)",
            "(line 154,col 5)-(line 154,col 57)",
            "(line 155,col 5)-(line 155,col 29)",
            "(line 156,col 5)-(line 156,col 25)",
            "(line 157,col 5)-(line 157,col 36)",
            "(line 158,col 5)-(line 158,col 27)",
            "(line 159,col 5)-(line 159,col 58)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testJsonValue()",
        "snippet": "  public void testJsonValue() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginObject();\n    jsonWriter.name(\"a\");\n    jsonWriter.jsonValue(\"{\\\"b\\\":true}\");\n    jsonWriter.name(\"c\");\n    jsonWriter.value(1);\n    jsonWriter.endObject();\n    assertEquals(\"{\\\"a\\\":{\\\"b\\\":true},\\\"c\\\":1}\", stringWriter.toString());\n  }",
        "begin_line": 162,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 51)",
            "(line 164,col 5)-(line 164,col 57)",
            "(line 165,col 5)-(line 165,col 29)",
            "(line 166,col 5)-(line 166,col 25)",
            "(line 167,col 5)-(line 167,col 41)",
            "(line 168,col 5)-(line 168,col 25)",
            "(line 169,col 5)-(line 169,col 24)",
            "(line 170,col 5)-(line 170,col 27)",
            "(line 171,col 5)-(line 171,col 74)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles()",
        "snippet": "  public void testNonFiniteDoubles() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    try {\n      jsonWriter.value(Double.NaN);\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n    try {\n      jsonWriter.value(Double.NEGATIVE_INFINITY);\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n    try {\n      jsonWriter.value(Double.POSITIVE_INFINITY);\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n  }",
        "begin_line": 174,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 175,col 5)-(line 175,col 51)",
            "(line 176,col 5)-(line 176,col 57)",
            "(line 177,col 5)-(line 177,col 28)",
            "(line 178,col 5)-(line 182,col 5)",
            "(line 183,col 5)-(line 187,col 5)",
            "(line 188,col 5)-(line 192,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles()",
        "snippet": "  public void testNonFiniteBoxedDoubles() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    try {\n      jsonWriter.value(new Double(Double.NaN));\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n    try {\n      jsonWriter.value(new Double(Double.NEGATIVE_INFINITY));\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n    try {\n      jsonWriter.value(new Double(Double.POSITIVE_INFINITY));\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n  }",
        "begin_line": 195,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 196,col 5)-(line 196,col 51)",
            "(line 197,col 5)-(line 197,col 57)",
            "(line 198,col 5)-(line 198,col 28)",
            "(line 199,col 5)-(line 203,col 5)",
            "(line 204,col 5)-(line 208,col 5)",
            "(line 209,col 5)-(line 213,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testDoubles()",
        "snippet": "  public void testDoubles() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    jsonWriter.value(-0.0);\n    jsonWriter.value(1.0);\n    jsonWriter.value(Double.MAX_VALUE);\n    jsonWriter.value(Double.MIN_VALUE);\n    jsonWriter.value(0.0);\n    jsonWriter.value(-0.5);\n    jsonWriter.value(2.2250738585072014E-308);\n    jsonWriter.value(Math.PI);\n    jsonWriter.value(Math.E);\n    jsonWriter.endArray();\n    jsonWriter.close();\n    assertEquals(\"[-0.0,\"\n        + \"1.0,\"\n        + \"1.7976931348623157E308,\"\n        + \"4.9E-324,\"\n        + \"0.0,\"\n        + \"-0.5,\"\n        + \"2.2250738585072014E-308,\"\n        + \"3.141592653589793,\"\n        + \"2.718281828459045]\", stringWriter.toString());\n  }",
        "begin_line": 216,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 51)",
            "(line 218,col 5)-(line 218,col 57)",
            "(line 219,col 5)-(line 219,col 28)",
            "(line 220,col 5)-(line 220,col 27)",
            "(line 221,col 5)-(line 221,col 26)",
            "(line 222,col 5)-(line 222,col 39)",
            "(line 223,col 5)-(line 223,col 39)",
            "(line 224,col 5)-(line 224,col 26)",
            "(line 225,col 5)-(line 225,col 27)",
            "(line 226,col 5)-(line 226,col 46)",
            "(line 227,col 5)-(line 227,col 30)",
            "(line 228,col 5)-(line 228,col 29)",
            "(line 229,col 5)-(line 229,col 26)",
            "(line 230,col 5)-(line 230,col 23)",
            "(line 231,col 5)-(line 239,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testLongs()",
        "snippet": "  public void testLongs() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    jsonWriter.value(0);\n    jsonWriter.value(1);\n    jsonWriter.value(-1);\n    jsonWriter.value(Long.MIN_VALUE);\n    jsonWriter.value(Long.MAX_VALUE);\n    jsonWriter.endArray();\n    jsonWriter.close();\n    assertEquals(\"[0,\"\n        + \"1,\"\n        + \"-1,\"\n        + \"-9223372036854775808,\"\n        + \"9223372036854775807]\", stringWriter.toString());\n  }",
        "begin_line": 242,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 243,col 5)-(line 243,col 51)",
            "(line 244,col 5)-(line 244,col 57)",
            "(line 245,col 5)-(line 245,col 28)",
            "(line 246,col 5)-(line 246,col 24)",
            "(line 247,col 5)-(line 247,col 24)",
            "(line 248,col 5)-(line 248,col 25)",
            "(line 249,col 5)-(line 249,col 37)",
            "(line 250,col 5)-(line 250,col 37)",
            "(line 251,col 5)-(line 251,col 26)",
            "(line 252,col 5)-(line 252,col 23)",
            "(line 253,col 5)-(line 257,col 59)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testNumbers()",
        "snippet": "  public void testNumbers() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    jsonWriter.value(new BigInteger(\"0\"));\n    jsonWriter.value(new BigInteger(\"9223372036854775808\"));\n    jsonWriter.value(new BigInteger(\"-9223372036854775809\"));\n    jsonWriter.value(new BigDecimal(\"3.141592653589793238462643383\"));\n    jsonWriter.endArray();\n    jsonWriter.close();\n    assertEquals(\"[0,\"\n        + \"9223372036854775808,\"\n        + \"-9223372036854775809,\"\n        + \"3.141592653589793238462643383]\", stringWriter.toString());\n  }",
        "begin_line": 260,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 261,col 5)-(line 261,col 51)",
            "(line 262,col 5)-(line 262,col 57)",
            "(line 263,col 5)-(line 263,col 28)",
            "(line 264,col 5)-(line 264,col 42)",
            "(line 265,col 5)-(line 265,col 60)",
            "(line 266,col 5)-(line 266,col 61)",
            "(line 267,col 5)-(line 267,col 70)",
            "(line 268,col 5)-(line 268,col 26)",
            "(line 269,col 5)-(line 269,col 23)",
            "(line 270,col 5)-(line 273,col 69)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testBooleans()",
        "snippet": "  public void testBooleans() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    jsonWriter.value(true);\n    jsonWriter.value(false);\n    jsonWriter.endArray();\n    assertEquals(\"[true,false]\", stringWriter.toString());\n  }",
        "begin_line": 276,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 277,col 5)-(line 277,col 51)",
            "(line 278,col 5)-(line 278,col 57)",
            "(line 279,col 5)-(line 279,col 28)",
            "(line 280,col 5)-(line 280,col 27)",
            "(line 281,col 5)-(line 281,col 28)",
            "(line 282,col 5)-(line 282,col 26)",
            "(line 283,col 5)-(line 283,col 58)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testBoxedBooleans()",
        "snippet": "  public void testBoxedBooleans() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    jsonWriter.value((Boolean) true);\n    jsonWriter.value((Boolean) false);\n    jsonWriter.value((Boolean) null);\n    jsonWriter.endArray();\n    assertEquals(\"[true,false,null]\", stringWriter.toString());\n  }",
        "begin_line": 286,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 287,col 5)-(line 287,col 51)",
            "(line 288,col 5)-(line 288,col 57)",
            "(line 289,col 5)-(line 289,col 28)",
            "(line 290,col 5)-(line 290,col 37)",
            "(line 291,col 5)-(line 291,col 38)",
            "(line 292,col 5)-(line 292,col 37)",
            "(line 293,col 5)-(line 293,col 26)",
            "(line 294,col 5)-(line 294,col 63)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testNulls()",
        "snippet": "  public void testNulls() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    jsonWriter.nullValue();\n    jsonWriter.endArray();\n    assertEquals(\"[null]\", stringWriter.toString());\n  }",
        "begin_line": 297,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 298,col 5)-(line 298,col 51)",
            "(line 299,col 5)-(line 299,col 57)",
            "(line 300,col 5)-(line 300,col 28)",
            "(line 301,col 5)-(line 301,col 27)",
            "(line 302,col 5)-(line 302,col 26)",
            "(line 303,col 5)-(line 303,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testStrings()",
        "snippet": "  public void testStrings() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    jsonWriter.value(\"a\");\n    jsonWriter.value(\"a\\\"\");\n    jsonWriter.value(\"\\\"\");\n    jsonWriter.value(\":\");\n    jsonWriter.value(\",\");\n    jsonWriter.value(\"\\b\");\n    jsonWriter.value(\"\\f\");\n    jsonWriter.value(\"\\n\");\n    jsonWriter.value(\"\\r\");\n    jsonWriter.value(\"\\t\");\n    jsonWriter.value(\" \");\n    jsonWriter.value(\"\\\\\");\n    jsonWriter.value(\"{\");\n    jsonWriter.value(\"}\");\n    jsonWriter.value(\"[\");\n    jsonWriter.value(\"]\");\n    jsonWriter.value(\"\\0\");\n    jsonWriter.value(\"\\u0019\");\n    jsonWriter.endArray();\n    assertEquals(\"[\\\"a\\\",\"\n        + \"\\\"a\\\\\\\"\\\",\"\n        + \"\\\"\\\\\\\"\\\",\"\n        + \"\\\":\\\",\"\n        + \"\\\",\\\",\"\n        + \"\\\"\\\\b\\\",\"\n        + \"\\\"\\\\f\\\",\"\n        + \"\\\"\\\\n\\\",\"\n        + \"\\\"\\\\r\\\",\"\n        + \"\\\"\\\\t\\\",\"\n        + \"\\\" \\\",\"\n        + \"\\\"\\\\\\\\\\\",\"\n        + \"\\\"{\\\",\"\n        + \"\\\"}\\\",\"\n        + \"\\\"[\\\",\"\n        + \"\\\"]\\\",\"\n        + \"\\\"\\\\u0000\\\",\"\n        + \"\\\"\\\\u0019\\\"]\", stringWriter.toString());\n  }",
        "begin_line": 306,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 307,col 5)-(line 307,col 51)",
            "(line 308,col 5)-(line 308,col 57)",
            "(line 309,col 5)-(line 309,col 28)",
            "(line 310,col 5)-(line 310,col 26)",
            "(line 311,col 5)-(line 311,col 28)",
            "(line 312,col 5)-(line 312,col 27)",
            "(line 313,col 5)-(line 313,col 26)",
            "(line 314,col 5)-(line 314,col 26)",
            "(line 315,col 5)-(line 315,col 27)",
            "(line 316,col 5)-(line 316,col 27)",
            "(line 317,col 5)-(line 317,col 27)",
            "(line 318,col 5)-(line 318,col 27)",
            "(line 319,col 5)-(line 319,col 27)",
            "(line 320,col 5)-(line 320,col 26)",
            "(line 321,col 5)-(line 321,col 27)",
            "(line 322,col 5)-(line 322,col 26)",
            "(line 323,col 5)-(line 323,col 26)",
            "(line 324,col 5)-(line 324,col 26)",
            "(line 325,col 5)-(line 325,col 26)",
            "(line 326,col 5)-(line 326,col 27)",
            "(line 327,col 5)-(line 327,col 31)",
            "(line 328,col 5)-(line 328,col 26)",
            "(line 329,col 5)-(line 346,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped()",
        "snippet": "  public void testUnicodeLineBreaksEscaped() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    jsonWriter.value(\"\\u2028 \\u2029\");\n    jsonWriter.endArray();\n    assertEquals(\"[\\\"\\\\u2028 \\\\u2029\\\"]\", stringWriter.toString());\n  }",
        "begin_line": 349,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 350,col 5)-(line 350,col 51)",
            "(line 351,col 5)-(line 351,col 57)",
            "(line 352,col 5)-(line 352,col 28)",
            "(line 353,col 5)-(line 353,col 38)",
            "(line 354,col 5)-(line 354,col 26)",
            "(line 355,col 5)-(line 355,col 67)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testEmptyArray()",
        "snippet": "  public void testEmptyArray() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    jsonWriter.endArray();\n    assertEquals(\"[]\", stringWriter.toString());\n  }",
        "begin_line": 358,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 359,col 5)-(line 359,col 51)",
            "(line 360,col 5)-(line 360,col 57)",
            "(line 361,col 5)-(line 361,col 28)",
            "(line 362,col 5)-(line 362,col 26)",
            "(line 363,col 5)-(line 363,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testEmptyObject()",
        "snippet": "  public void testEmptyObject() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginObject();\n    jsonWriter.endObject();\n    assertEquals(\"{}\", stringWriter.toString());\n  }",
        "begin_line": 366,
        "end_line": 372,
        "comment": "",
        "child_ranges": [
            "(line 367,col 5)-(line 367,col 51)",
            "(line 368,col 5)-(line 368,col 57)",
            "(line 369,col 5)-(line 369,col 29)",
            "(line 370,col 5)-(line 370,col 27)",
            "(line 371,col 5)-(line 371,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testObjectsInArrays()",
        "snippet": "  public void testObjectsInArrays() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    jsonWriter.beginObject();\n    jsonWriter.name(\"a\").value(5);\n    jsonWriter.name(\"b\").value(false);\n    jsonWriter.endObject();\n    jsonWriter.beginObject();\n    jsonWriter.name(\"c\").value(6);\n    jsonWriter.name(\"d\").value(true);\n    jsonWriter.endObject();\n    jsonWriter.endArray();\n    assertEquals(\"[{\\\"a\\\":5,\\\"b\\\":false},\"\n        + \"{\\\"c\\\":6,\\\"d\\\":true}]\", stringWriter.toString());\n  }",
        "begin_line": 374,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 375,col 5)-(line 375,col 51)",
            "(line 376,col 5)-(line 376,col 57)",
            "(line 377,col 5)-(line 377,col 28)",
            "(line 378,col 5)-(line 378,col 29)",
            "(line 379,col 5)-(line 379,col 34)",
            "(line 380,col 5)-(line 380,col 38)",
            "(line 381,col 5)-(line 381,col 27)",
            "(line 382,col 5)-(line 382,col 29)",
            "(line 383,col 5)-(line 383,col 34)",
            "(line 384,col 5)-(line 384,col 37)",
            "(line 385,col 5)-(line 385,col 27)",
            "(line 386,col 5)-(line 386,col 26)",
            "(line 387,col 5)-(line 388,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testArraysInObjects()",
        "snippet": "  public void testArraysInObjects() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginObject();\n    jsonWriter.name(\"a\");\n    jsonWriter.beginArray();\n    jsonWriter.value(5);\n    jsonWriter.value(false);\n    jsonWriter.endArray();\n    jsonWriter.name(\"b\");\n    jsonWriter.beginArray();\n    jsonWriter.value(6);\n    jsonWriter.value(true);\n    jsonWriter.endArray();\n    jsonWriter.endObject();\n    assertEquals(\"{\\\"a\\\":[5,false],\"\n        + \"\\\"b\\\":[6,true]}\", stringWriter.toString());\n  }",
        "begin_line": 391,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 392,col 5)-(line 392,col 51)",
            "(line 393,col 5)-(line 393,col 57)",
            "(line 394,col 5)-(line 394,col 29)",
            "(line 395,col 5)-(line 395,col 25)",
            "(line 396,col 5)-(line 396,col 28)",
            "(line 397,col 5)-(line 397,col 24)",
            "(line 398,col 5)-(line 398,col 28)",
            "(line 399,col 5)-(line 399,col 26)",
            "(line 400,col 5)-(line 400,col 25)",
            "(line 401,col 5)-(line 401,col 28)",
            "(line 402,col 5)-(line 402,col 24)",
            "(line 403,col 5)-(line 403,col 27)",
            "(line 404,col 5)-(line 404,col 26)",
            "(line 405,col 5)-(line 405,col 27)",
            "(line 406,col 5)-(line 407,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testDeepNestingArrays()",
        "snippet": "  public void testDeepNestingArrays() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    for (int i = 0; i < 20; i++) {\n      jsonWriter.beginArray();\n    }\n    for (int i = 0; i < 20; i++) {\n      jsonWriter.endArray();\n    }\n    assertEquals(\"[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]\", stringWriter.toString());\n  }",
        "begin_line": 410,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 411,col 5)-(line 411,col 51)",
            "(line 412,col 5)-(line 412,col 57)",
            "(line 413,col 5)-(line 415,col 5)",
            "(line 416,col 5)-(line 418,col 5)",
            "(line 419,col 5)-(line 419,col 86)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testDeepNestingObjects()",
        "snippet": "  public void testDeepNestingObjects() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginObject();\n    for (int i = 0; i < 20; i++) {\n      jsonWriter.name(\"a\");\n      jsonWriter.beginObject();\n    }\n    for (int i = 0; i < 20; i++) {\n      jsonWriter.endObject();\n    }\n    jsonWriter.endObject();\n    assertEquals(\"{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":\"\n        + \"{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\"\n        + \"}}}}}}}}}}}}}}}}}}}}}\", stringWriter.toString());\n  }",
        "begin_line": 422,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 423,col 5)-(line 423,col 51)",
            "(line 424,col 5)-(line 424,col 57)",
            "(line 425,col 5)-(line 425,col 29)",
            "(line 426,col 5)-(line 429,col 5)",
            "(line 430,col 5)-(line 432,col 5)",
            "(line 433,col 5)-(line 433,col 27)",
            "(line 434,col 5)-(line 436,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testRepeatedName()",
        "snippet": "  public void testRepeatedName() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginObject();\n    jsonWriter.name(\"a\").value(true);\n    jsonWriter.name(\"a\").value(false);\n    jsonWriter.endObject();\n    // JsonWriter doesn't attempt to detect duplicate names\n    assertEquals(\"{\\\"a\\\":true,\\\"a\\\":false}\", stringWriter.toString());\n  }",
        "begin_line": 439,
        "end_line": 448,
        "comment": "",
        "child_ranges": [
            "(line 440,col 5)-(line 440,col 51)",
            "(line 441,col 5)-(line 441,col 57)",
            "(line 442,col 5)-(line 442,col 29)",
            "(line 443,col 5)-(line 443,col 37)",
            "(line 444,col 5)-(line 444,col 38)",
            "(line 445,col 5)-(line 445,col 27)",
            "(line 447,col 5)-(line 447,col 70)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testPrettyPrintObject()",
        "snippet": "  public void testPrettyPrintObject() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.setIndent(\"   \");\n\n    jsonWriter.beginObject();\n    jsonWriter.name(\"a\").value(true);\n    jsonWriter.name(\"b\").value(false);\n    jsonWriter.name(\"c\").value(5.0);\n    jsonWriter.name(\"e\").nullValue();\n    jsonWriter.name(\"f\").beginArray();\n    jsonWriter.value(6.0);\n    jsonWriter.value(7.0);\n    jsonWriter.endArray();\n    jsonWriter.name(\"g\").beginObject();\n    jsonWriter.name(\"h\").value(8.0);\n    jsonWriter.name(\"i\").value(9.0);\n    jsonWriter.endObject();\n    jsonWriter.endObject();\n\n    String expected = \"{\\n\"\n        + \"   \\\"a\\\": true,\\n\"\n        + \"   \\\"b\\\": false,\\n\"\n        + \"   \\\"c\\\": 5.0,\\n\"\n        + \"   \\\"e\\\": null,\\n\"\n        + \"   \\\"f\\\": [\\n\"\n        + \"      6.0,\\n\"\n        + \"      7.0\\n\"\n        + \"   ],\\n\"\n        + \"   \\\"g\\\": {\\n\"\n        + \"      \\\"h\\\": 8.0,\\n\"\n        + \"      \\\"i\\\": 9.0\\n\"\n        + \"   }\\n\"\n        + \"}\";\n    assertEquals(expected, stringWriter.toString());\n  }",
        "begin_line": 450,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 451,col 5)-(line 451,col 51)",
            "(line 452,col 5)-(line 452,col 57)",
            "(line 453,col 5)-(line 453,col 32)",
            "(line 455,col 5)-(line 455,col 29)",
            "(line 456,col 5)-(line 456,col 37)",
            "(line 457,col 5)-(line 457,col 38)",
            "(line 458,col 5)-(line 458,col 36)",
            "(line 459,col 5)-(line 459,col 37)",
            "(line 460,col 5)-(line 460,col 38)",
            "(line 461,col 5)-(line 461,col 26)",
            "(line 462,col 5)-(line 462,col 26)",
            "(line 463,col 5)-(line 463,col 26)",
            "(line 464,col 5)-(line 464,col 39)",
            "(line 465,col 5)-(line 465,col 36)",
            "(line 466,col 5)-(line 466,col 36)",
            "(line 467,col 5)-(line 467,col 27)",
            "(line 468,col 5)-(line 468,col 27)",
            "(line 470,col 5)-(line 483,col 14)",
            "(line 484,col 5)-(line 484,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testPrettyPrintArray()",
        "snippet": "  public void testPrettyPrintArray() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.setIndent(\"   \");\n\n    jsonWriter.beginArray();\n    jsonWriter.value(true);\n    jsonWriter.value(false);\n    jsonWriter.value(5.0);\n    jsonWriter.nullValue();\n    jsonWriter.beginObject();\n    jsonWriter.name(\"a\").value(6.0);\n    jsonWriter.name(\"b\").value(7.0);\n    jsonWriter.endObject();\n    jsonWriter.beginArray();\n    jsonWriter.value(8.0);\n    jsonWriter.value(9.0);\n    jsonWriter.endArray();\n    jsonWriter.endArray();\n\n    String expected = \"[\\n\"\n        + \"   true,\\n\"\n        + \"   false,\\n\"\n        + \"   5.0,\\n\"\n        + \"   null,\\n\"\n        + \"   {\\n\"\n        + \"      \\\"a\\\": 6.0,\\n\"\n        + \"      \\\"b\\\": 7.0\\n\"\n        + \"   },\\n\"\n        + \"   [\\n\"\n        + \"      8.0,\\n\"\n        + \"      9.0\\n\"\n        + \"   ]\\n\"\n        + \"]\";\n    assertEquals(expected, stringWriter.toString());\n  }",
        "begin_line": 487,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 488,col 5)-(line 488,col 51)",
            "(line 489,col 5)-(line 489,col 57)",
            "(line 490,col 5)-(line 490,col 32)",
            "(line 492,col 5)-(line 492,col 28)",
            "(line 493,col 5)-(line 493,col 27)",
            "(line 494,col 5)-(line 494,col 28)",
            "(line 495,col 5)-(line 495,col 26)",
            "(line 496,col 5)-(line 496,col 27)",
            "(line 497,col 5)-(line 497,col 29)",
            "(line 498,col 5)-(line 498,col 36)",
            "(line 499,col 5)-(line 499,col 36)",
            "(line 500,col 5)-(line 500,col 27)",
            "(line 501,col 5)-(line 501,col 28)",
            "(line 502,col 5)-(line 502,col 26)",
            "(line 503,col 5)-(line 503,col 26)",
            "(line 504,col 5)-(line 504,col 26)",
            "(line 505,col 5)-(line 505,col 26)",
            "(line 507,col 5)-(line 520,col 14)",
            "(line 521,col 5)-(line 521,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues()",
        "snippet": "  public void testLenientWriterPermitsMultipleTopLevelValues() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter writer = new JsonWriter(stringWriter);\n    writer.setLenient(true);\n    writer.beginArray();\n    writer.endArray();\n    writer.beginArray();\n    writer.endArray();\n    writer.close();\n    assertEquals(\"[][]\", stringWriter.toString());\n  }",
        "begin_line": 524,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 525,col 5)-(line 525,col 51)",
            "(line 526,col 5)-(line 526,col 53)",
            "(line 527,col 5)-(line 527,col 28)",
            "(line 528,col 5)-(line 528,col 24)",
            "(line 529,col 5)-(line 529,col 22)",
            "(line 530,col 5)-(line 530,col 24)",
            "(line 531,col 5)-(line 531,col 22)",
            "(line 532,col 5)-(line 532,col 19)",
            "(line 533,col 5)-(line 533,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues()",
        "snippet": "  public void testStrictWriterDoesNotPermitMultipleTopLevelValues() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter writer = new JsonWriter(stringWriter);\n    writer.beginArray();\n    writer.endArray();\n    try {\n      writer.beginArray();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 536,
        "end_line": 546,
        "comment": "",
        "child_ranges": [
            "(line 537,col 5)-(line 537,col 51)",
            "(line 538,col 5)-(line 538,col 53)",
            "(line 539,col 5)-(line 539,col 24)",
            "(line 540,col 5)-(line 540,col 22)",
            "(line 541,col 5)-(line 545,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure()",
        "snippet": "  public void testClosedWriterThrowsOnStructure() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter writer = new JsonWriter(stringWriter);\n    writer.beginArray();\n    writer.endArray();\n    writer.close();\n    try {\n      writer.beginArray();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      writer.endArray();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      writer.beginObject();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n    try {\n      writer.endObject();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 548,
        "end_line": 574,
        "comment": "",
        "child_ranges": [
            "(line 549,col 5)-(line 549,col 51)",
            "(line 550,col 5)-(line 550,col 53)",
            "(line 551,col 5)-(line 551,col 24)",
            "(line 552,col 5)-(line 552,col 22)",
            "(line 553,col 5)-(line 553,col 19)",
            "(line 554,col 5)-(line 558,col 5)",
            "(line 559,col 5)-(line 563,col 5)",
            "(line 564,col 5)-(line 568,col 5)",
            "(line 569,col 5)-(line 573,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName()",
        "snippet": "  public void testClosedWriterThrowsOnName() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter writer = new JsonWriter(stringWriter);\n    writer.beginArray();\n    writer.endArray();\n    writer.close();\n    try {\n      writer.name(\"a\");\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 576,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 577,col 5)-(line 577,col 51)",
            "(line 578,col 5)-(line 578,col 53)",
            "(line 579,col 5)-(line 579,col 24)",
            "(line 580,col 5)-(line 580,col 22)",
            "(line 581,col 5)-(line 581,col 19)",
            "(line 582,col 5)-(line 586,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue()",
        "snippet": "  public void testClosedWriterThrowsOnValue() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter writer = new JsonWriter(stringWriter);\n    writer.beginArray();\n    writer.endArray();\n    writer.close();\n    try {\n      writer.value(\"a\");\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 589,
        "end_line": 600,
        "comment": "",
        "child_ranges": [
            "(line 590,col 5)-(line 590,col 51)",
            "(line 591,col 5)-(line 591,col 53)",
            "(line 592,col 5)-(line 592,col 24)",
            "(line 593,col 5)-(line 593,col 22)",
            "(line 594,col 5)-(line 594,col 19)",
            "(line 595,col 5)-(line 599,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush()",
        "snippet": "  public void testClosedWriterThrowsOnFlush() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter writer = new JsonWriter(stringWriter);\n    writer.beginArray();\n    writer.endArray();\n    writer.close();\n    try {\n      writer.flush();\n      fail();\n    } catch (IllegalStateException expected) {\n    }\n  }",
        "begin_line": 602,
        "end_line": 613,
        "comment": "",
        "child_ranges": [
            "(line 603,col 5)-(line 603,col 51)",
            "(line 604,col 5)-(line 604,col 53)",
            "(line 605,col 5)-(line 605,col 24)",
            "(line 606,col 5)-(line 606,col 22)",
            "(line 607,col 5)-(line 607,col 19)",
            "(line 608,col 5)-(line 612,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.stream.JsonWriterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "signature": "com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent()",
        "snippet": "  public void testWriterCloseIsIdempotent() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter writer = new JsonWriter(stringWriter);\n    writer.beginArray();\n    writer.endArray();\n    writer.close();\n    writer.close();\n  }",
        "begin_line": 615,
        "end_line": 622,
        "comment": "",
        "child_ranges": [
            "(line 616,col 5)-(line 616,col 51)",
            "(line 617,col 5)-(line 617,col 53)",
            "(line 618,col 5)-(line 618,col 24)",
            "(line 619,col 5)-(line 619,col 22)",
            "(line 620,col 5)-(line 620,col 19)",
            "(line 621,col 5)-(line 621,col 19)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 18)",
            "(line 50,col 5)-(line 50,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.testDummy()",
        "snippet": "  public void testDummy() {    \n    // This is here to prevent Junit for complaining when we disable all tests.\n  }  ",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.disabled_testStringDeserialization()",
        "snippet": "  public void disabled_testStringDeserialization() {    \n    StringBuilder sb = new StringBuilder(8096);\n    sb.append(\"Error Yippie\");\n\n    while (true) {\n      try {\n        String stackTrace = sb.toString();\n        sb.append(stackTrace);\n        String json = \"{\\\"message\\\":\\\"Error message.\\\",\" + \"\\\"stackTrace\\\":\\\"\" + stackTrace + \"\\\"}\";\n        parseLongJson(json);\n        System.out.println(\"Gson could handle a string of size: \" + stackTrace.length());\n      } catch (JsonParseException expected) {\n        break;\n      }\n    }\n  }",
        "begin_line": 57,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 58,col 47)",
            "(line 59,col 5)-(line 59,col 30)",
            "(line 61,col 5)-(line 71,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.parseLongJson(java.lang.String)",
        "snippet": "  private void parseLongJson(String json) throws JsonParseException {\n    ExceptionHolder target = gson.fromJson(json, ExceptionHolder.class);\n    assertTrue(target.message.contains(\"Error\"));\n    assertTrue(target.stackTrace.contains(\"Yippie\"));\n  }",
        "begin_line": 74,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 75,col 5)-(line 75,col 72)",
            "(line 76,col 5)-(line 76,col 49)",
            "(line 77,col 5)-(line 77,col 53)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.ExceptionHolder.ExceptionHolder()",
        "snippet": "    @SuppressWarnings(\"unused\")\n    private ExceptionHolder() {\n      this(\"\", \"\");\n    }",
        "begin_line": 85,
        "end_line": 88,
        "comment": " For use by Gson",
        "child_ranges": [
            "(line 87,col 7)-(line 87,col 19)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.ExceptionHolder.ExceptionHolder(java.lang.String, java.lang.String)",
        "snippet": "    public ExceptionHolder(String message, String stackTrace) {\n      this.message = message;\n      this.stackTrace = stackTrace;\n    }",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 90,col 7)-(line 90,col 29)",
            "(line 91,col 7)-(line 91,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.CollectionEntry.CollectionEntry()",
        "snippet": "    private CollectionEntry() {\n      this(null, null);\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": " For use by Gson",
        "child_ranges": [
            "(line 102,col 7)-(line 102,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.CollectionEntry.CollectionEntry(java.lang.String, java.lang.String)",
        "snippet": "    CollectionEntry(String name, String value) {\n      this.name = name;\n      this.value = value;\n    }",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 106,col 7)-(line 106,col 23)",
            "(line 107,col 7)-(line 107,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.disabled_testLargeCollectionSerialization()",
        "snippet": "  public void disabled_testLargeCollectionSerialization() {\n    int count = 1400000;\n    List<CollectionEntry> list = new ArrayList<CollectionEntry>(count);\n    for (int i = 0; i < count; ++i) {\n      list.add(new CollectionEntry(\"name\"+i,\"value\"+i));\n    }    \n    gson.toJson(list);\n  }",
        "begin_line": 114,
        "end_line": 121,
        "comment": "\n   * Created in response to http://code.google.com/p/google-gson/issues/detail?id=96\n   ",
        "child_ranges": [
            "(line 115,col 5)-(line 115,col 24)",
            "(line 116,col 5)-(line 116,col 71)",
            "(line 117,col 5)-(line 119,col 5)",
            "(line 120,col 5)-(line 120,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.disabled_testLargeCollectionDeserialization()",
        "snippet": "  public void disabled_testLargeCollectionDeserialization() {\n    StringBuilder sb = new StringBuilder();\n    int count = 87000;\n    boolean first = true;\n    sb.append('[');\n    for (int i = 0; i < count; ++i) {\n      if (first) {\n        first = false;\n      } else {\n        sb.append(',');\n      }\n      sb.append(\"{name:'name\").append(i).append(\"',value:'value\").append(i).append(\"'}\");\n    }    \n    sb.append(']');\n    String json = sb.toString();\n    Type collectionType = new TypeToken<ArrayList<CollectionEntry>>(){}.getType();    \n    List<CollectionEntry> list = gson.fromJson(json, collectionType);       \n    assertEquals(count, list.size());\n  }",
        "begin_line": 126,
        "end_line": 144,
        "comment": "\n   * Created in response to http://code.google.com/p/google-gson/issues/detail?id=96\n   ",
        "child_ranges": [
            "(line 127,col 5)-(line 127,col 43)",
            "(line 128,col 5)-(line 128,col 22)",
            "(line 129,col 5)-(line 129,col 25)",
            "(line 130,col 5)-(line 130,col 19)",
            "(line 131,col 5)-(line 138,col 5)",
            "(line 139,col 5)-(line 139,col 19)",
            "(line 140,col 5)-(line 140,col 32)",
            "(line 141,col 5)-(line 141,col 82)",
            "(line 142,col 5)-(line 142,col 69)",
            "(line 143,col 5)-(line 143,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.disabled_testByteArraySerialization()",
        "snippet": "  public void disabled_testByteArraySerialization() {\n    for (int size = 4145152; true; size += 1036288) {\n      byte[] ba = new byte[size];\n      for (int i = 0; i < size; ++i) {\n        ba[i] = 0x05;\n      }\n      gson.toJson(ba);\n      System.out.printf(\"Gson could serialize a byte array of size: %d\\n\", size);\n    }\n  }",
        "begin_line": 150,
        "end_line": 159,
        "comment": " Last I tested, Gson was able to serialize upto 14MB byte array",
        "child_ranges": [
            "(line 151,col 5)-(line 158,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.disable_testByteArrayDeserialization()",
        "snippet": "  public void disable_testByteArrayDeserialization() {\n    for (int numElements = 10639296; true; numElements += 16384) {\n      StringBuilder sb = new StringBuilder(numElements*2);\n      sb.append(\"[\");\n      boolean first = true;\n      for (int i = 0; i < numElements; ++i) {\n        if (first) {\n          first = false;\n        } else {\n          sb.append(\",\");\n        }\n        sb.append(\"5\");\n      }\n      sb.append(\"]\");\n      String json = sb.toString();\n      byte[] ba = gson.fromJson(json, byte[].class);\n      System.out.printf(\"Gson could deserialize a byte array of size: %d\\n\", ba.length);\n    }\n  }",
        "begin_line": 165,
        "end_line": 183,
        "comment": " Last I tested, Gson was able to deserialize a byte array of 11MB",
        "child_ranges": [
            "(line 166,col 5)-(line 182,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.disabled_testSerializeClasses()",
        "snippet": "  public void disabled_testSerializeClasses() {\n    ClassWithList c = new ClassWithList(\"str\"); \n    for (int i = 0; i < COLLECTION_SIZE; ++i) { \n      c.list.add(new ClassWithField(\"element-\" + i)); \n    }\n    StringWriter w = new StringWriter(); \n    long t1 = System.currentTimeMillis(); \n    for (int i = 0; i < NUM_ITERATIONS; ++i) { \n      gson.toJson(c, w); \n    } \n    long t2 = System.currentTimeMillis(); \n    long avg = (t2 - t1) / NUM_ITERATIONS;\n    System.out.printf(\"Serialize classes avg time: %d ms\\n\", avg);     \n  }",
        "begin_line": 194,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 195,col 5)-(line 195,col 47)",
            "(line 196,col 5)-(line 198,col 5)",
            "(line 199,col 5)-(line 199,col 40)",
            "(line 200,col 5)-(line 200,col 41)",
            "(line 201,col 5)-(line 203,col 5)",
            "(line 204,col 5)-(line 204,col 41)",
            "(line 205,col 5)-(line 205,col 42)",
            "(line 206,col 5)-(line 206,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.disabled_testDeserializeClasses()",
        "snippet": "  public void disabled_testDeserializeClasses() {\n    String json = buildJsonForClassWithList();\n    ClassWithList[] target = new ClassWithList[NUM_ITERATIONS];\n    long t1 = System.currentTimeMillis(); \n    for (int i = 0; i < NUM_ITERATIONS; ++i) {\n      target[i] = gson.fromJson(json, ClassWithList.class);\n    }\n    long t2 = System.currentTimeMillis(); \n    long avg = (t2 - t1) / NUM_ITERATIONS;\n    System.out.printf(\"Deserialize classes avg time: %d ms\\n\", avg);     \n  }",
        "begin_line": 209,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 210,col 5)-(line 210,col 46)",
            "(line 211,col 5)-(line 211,col 63)",
            "(line 212,col 5)-(line 212,col 41)",
            "(line 213,col 5)-(line 215,col 5)",
            "(line 216,col 5)-(line 216,col 41)",
            "(line 217,col 5)-(line 217,col 42)",
            "(line 218,col 5)-(line 218,col 68)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.disable_testLargeObjectSerializationAndDeserialization()",
        "snippet": "  public void disable_testLargeObjectSerializationAndDeserialization() {\n    Map<String, Long> largeObject = new HashMap<String, Long>();\n    for (long l = 0; l < 100000; l++) {\n      largeObject.put(\"field\" + l, l);\n    }\n    \n    long t1 = System.currentTimeMillis(); \n    String json = gson.toJson(largeObject);\n    long t2 = System.currentTimeMillis();\n    System.out.printf(\"Large object serialized in: %d ms\\n\", (t2 - t1));\n\n    t1 = System.currentTimeMillis(); \n    gson.fromJson(json, new TypeToken<Map<String, Long>>() {}.getType());\n    t2 = System.currentTimeMillis();\n    System.out.printf(\"Large object deserialized in: %d ms\\n\", (t2 - t1));\n    \n  }",
        "begin_line": 221,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 64)",
            "(line 223,col 5)-(line 225,col 5)",
            "(line 227,col 5)-(line 227,col 41)",
            "(line 228,col 5)-(line 228,col 43)",
            "(line 229,col 5)-(line 229,col 41)",
            "(line 230,col 5)-(line 230,col 72)",
            "(line 232,col 5)-(line 232,col 36)",
            "(line 233,col 5)-(line 233,col 73)",
            "(line 234,col 5)-(line 234,col 36)",
            "(line 235,col 5)-(line 235,col 74)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.disabled_testSerializeExposedClasses()",
        "snippet": "  public void disabled_testSerializeExposedClasses() {\n    ClassWithListOfObjects c1 = new ClassWithListOfObjects(\"str\"); \n    for (int i1 = 0; i1 < COLLECTION_SIZE; ++i1) { \n      c1.list.add(new ClassWithExposedField(\"element-\" + i1)); \n    }\n    ClassWithListOfObjects c = c1; \n    StringWriter w = new StringWriter(); \n    long t1 = System.currentTimeMillis(); \n    for (int i = 0; i < NUM_ITERATIONS; ++i) { \n      gson.toJson(c, w); \n    } \n    long t2 = System.currentTimeMillis(); \n    long avg = (t2 - t1) / NUM_ITERATIONS;\n    System.out.printf(\"Serialize exposed classes avg time: %d ms\\n\", avg);     \n  }",
        "begin_line": 239,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 240,col 5)-(line 240,col 66)",
            "(line 241,col 5)-(line 243,col 5)",
            "(line 244,col 5)-(line 244,col 34)",
            "(line 245,col 5)-(line 245,col 40)",
            "(line 246,col 5)-(line 246,col 41)",
            "(line 247,col 5)-(line 249,col 5)",
            "(line 250,col 5)-(line 250,col 41)",
            "(line 251,col 5)-(line 251,col 42)",
            "(line 252,col 5)-(line 252,col 74)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.disabled_testDeserializeExposedClasses()",
        "snippet": "  public void disabled_testDeserializeExposedClasses() {\n    String json = buildJsonForClassWithList();\n    ClassWithListOfObjects[] target = new ClassWithListOfObjects[NUM_ITERATIONS];\n    long t1 = System.currentTimeMillis(); \n    for (int i = 0; i < NUM_ITERATIONS; ++i) {\n      target[i] = gson.fromJson(json, ClassWithListOfObjects.class);\n    }\n    long t2 = System.currentTimeMillis(); \n    long avg = (t2 - t1) / NUM_ITERATIONS;\n    System.out.printf(\"Deserialize exposed classes avg time: %d ms\\n\", avg);     \n  }",
        "begin_line": 255,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 256,col 5)-(line 256,col 46)",
            "(line 257,col 5)-(line 257,col 81)",
            "(line 258,col 5)-(line 258,col 41)",
            "(line 259,col 5)-(line 261,col 5)",
            "(line 262,col 5)-(line 262,col 41)",
            "(line 263,col 5)-(line 263,col 42)",
            "(line 264,col 5)-(line 264,col 76)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.disabled_testLargeGsonMapRoundTrip()",
        "snippet": "  public void disabled_testLargeGsonMapRoundTrip() throws Exception {\n    Map<Long, Long> original = new HashMap<Long, Long>();\n    for (long i = 0; i < 1000000; i++) {\n      original.put(i, i + 1);\n    }\n\n    Gson gson = new Gson();\n    String json = gson.toJson(original);\n    Type longToLong = new TypeToken<Map<Long, Long>>(){}.getType();\n    gson.fromJson(json, longToLong);\n  }",
        "begin_line": 267,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 268,col 5)-(line 268,col 57)",
            "(line 269,col 5)-(line 271,col 5)",
            "(line 273,col 5)-(line 273,col 27)",
            "(line 274,col 5)-(line 274,col 40)",
            "(line 275,col 5)-(line 275,col 67)",
            "(line 276,col 5)-(line 276,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.buildJsonForClassWithList()",
        "snippet": "  private String buildJsonForClassWithList() {\n    StringBuilder sb = new StringBuilder(\"{\");\n    sb.append(\"field:\").append(\"'str',\");\n    sb.append(\"list:[\");\n    boolean first = true;\n    for (int i = 0; i < COLLECTION_SIZE; ++i) {\n      if (first) {\n        first = false;\n      } else {\n        sb.append(\",\");\n      }\n      sb.append(\"{field:'element-\" + i + \"'}\");\n    }\n    sb.append(\"]\");\n    sb.append(\"}\");\n    String json = sb.toString();\n    return json;\n  }",
        "begin_line": 279,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 280,col 5)-(line 280,col 46)",
            "(line 281,col 5)-(line 281,col 41)",
            "(line 282,col 5)-(line 282,col 24)",
            "(line 283,col 5)-(line 283,col 25)",
            "(line 284,col 5)-(line 291,col 5)",
            "(line 292,col 5)-(line 292,col 19)",
            "(line 293,col 5)-(line 293,col 19)",
            "(line 294,col 5)-(line 294,col 32)",
            "(line 295,col 5)-(line 295,col 16)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.ClassWithList.ClassWithList()",
        "snippet": "    ClassWithList() {\n      this(null);\n    }",
        "begin_line": 302,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 303,col 7)-(line 303,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.ClassWithList.ClassWithList(java.lang.String)",
        "snippet": "    ClassWithList(String field) {\n      this.field = field;\n    }",
        "begin_line": 305,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 306,col 7)-(line 306,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.ClassWithField.ClassWithField()",
        "snippet": "    ClassWithField() {\n      this(\"\");\n    }",
        "begin_line": 313,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 314,col 7)-(line 314,col 15)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.ClassWithField.ClassWithField(java.lang.String)",
        "snippet": "    public ClassWithField(String field) { \n      this.field = field; \n    } ",
        "begin_line": 316,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 317,col 7)-(line 317,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.ClassWithListOfObjects.ClassWithListOfObjects()",
        "snippet": "    ClassWithListOfObjects() {\n      this(null);\n    }",
        "begin_line": 327,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 328,col 7)-(line 328,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.ClassWithListOfObjects.ClassWithListOfObjects(java.lang.String)",
        "snippet": "    ClassWithListOfObjects(String field) {\n      this.field = field;\n    }",
        "begin_line": 330,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 331,col 7)-(line 331,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.ClassWithExposedField.ClassWithExposedField()",
        "snippet": "    ClassWithExposedField() {\n      this(\"\");\n    }",
        "begin_line": 339,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 340,col 7)-(line 340,col 15)"
        ]
    },
    {
        "class_name": "com.google.gson.metrics.PerformanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
        "signature": "com.google.gson.metrics.PerformanceTest.ClassWithExposedField.ClassWithExposedField(java.lang.String)",
        "snippet": "    ClassWithExposedField(String field) { \n      this.field = field; \n    } ",
        "begin_line": 342,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 343,col 7)-(line 343,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.regression.JsonAdapterNullSafeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java",
        "signature": "com.google.gson.regression.JsonAdapterNullSafeTest.testNullSafeBugSerialize()",
        "snippet": "  public void testNullSafeBugSerialize() throws Exception {\n    Device device = new Device(\"ec57803e\");\n    gson.toJson(device);\n  }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 30,col 5)-(line 30,col 43)",
            "(line 31,col 5)-(line 31,col 24)"
        ]
    },
    {
        "class_name": "com.google.gson.regression.JsonAdapterNullSafeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java",
        "signature": "com.google.gson.regression.JsonAdapterNullSafeTest.testNullSafeBugDeserialize()",
        "snippet": "  public void testNullSafeBugDeserialize() throws Exception {\n    Device device = gson.fromJson(\"{'id':'ec57803e2'}\", Device.class);\n    assertEquals(\"ec57803e2\", device.id);\n  }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 35,col 5)-(line 35,col 70)",
            "(line 36,col 5)-(line 36,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.regression.JsonAdapterNullSafeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java",
        "signature": "com.google.gson.regression.JsonAdapterNullSafeTest.Device.Device(java.lang.String)",
        "snippet": "    Device(String id) {\n      this.id = id;\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 7)-(line 43,col 19)"
        ]
    },
    {
        "class_name": "com.google.gson.regression.JsonAdapterNullSafeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java",
        "signature": "com.google.gson.regression.JsonAdapterNullSafeTest.Device.JsonAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken<T>)",
        "snippet": "      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      @Override public <T> TypeAdapter<T> create(final Gson gson, TypeToken<T> type) {\n        if (type.getRawType() != Device.class || recursiveCall.get() != null) {\n          recursiveCall.set(null); // clear for subsequent use\n          return null;\n        }\n        recursiveCall.set(Boolean.TRUE);\n        return (TypeAdapter) gson.getDelegateAdapter(this, type);\n      }",
        "begin_line": 51,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 56,col 9)",
            "(line 57,col 9)-(line 57,col 40)",
            "(line 58,col 9)-(line 58,col 65)"
        ]
    },
    {
        "class_name": "com.google.gson.reflect.TypeTokenTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java",
        "signature": "com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes()",
        "snippet": "  public void testIsAssignableFromRawTypes() {\n    assertTrue(TypeToken.get(Object.class).isAssignableFrom(String.class));\n    assertFalse(TypeToken.get(String.class).isAssignableFrom(Object.class));\n    assertTrue(TypeToken.get(RandomAccess.class).isAssignableFrom(ArrayList.class));\n    assertFalse(TypeToken.get(ArrayList.class).isAssignableFrom(RandomAccess.class));\n  }",
        "begin_line": 39,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 40,col 5)-(line 40,col 75)",
            "(line 41,col 5)-(line 41,col 76)",
            "(line 42,col 5)-(line 42,col 84)",
            "(line 43,col 5)-(line 43,col 85)"
        ]
    },
    {
        "class_name": "com.google.gson.reflect.TypeTokenTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java",
        "signature": "com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters()",
        "snippet": "  public void testIsAssignableFromWithTypeParameters() throws Exception {\n    Type a = getClass().getDeclaredField(\"listOfInteger\").getGenericType();\n    Type b = getClass().getDeclaredField(\"listOfNumber\").getGenericType();\n    assertTrue(TypeToken.get(a).isAssignableFrom(a));\n    assertTrue(TypeToken.get(b).isAssignableFrom(b));\n\n    // listOfInteger = listOfNumber; // doesn't compile; must be false\n    assertFalse(TypeToken.get(a).isAssignableFrom(b));\n    // listOfNumber = listOfInteger; // doesn't compile; must be false\n    assertFalse(TypeToken.get(b).isAssignableFrom(a));\n  }",
        "begin_line": 46,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 75)",
            "(line 48,col 5)-(line 48,col 74)",
            "(line 49,col 5)-(line 49,col 53)",
            "(line 50,col 5)-(line 50,col 53)",
            "(line 53,col 5)-(line 53,col 54)",
            "(line 55,col 5)-(line 55,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.reflect.TypeTokenTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java",
        "signature": "com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards()",
        "snippet": "  public void testIsAssignableFromWithBasicWildcards() throws Exception {\n    Type a = getClass().getDeclaredField(\"listOfString\").getGenericType();\n    Type b = getClass().getDeclaredField(\"listOfUnknown\").getGenericType();\n    assertTrue(TypeToken.get(a).isAssignableFrom(a));\n    assertTrue(TypeToken.get(b).isAssignableFrom(b));\n\n    // listOfString = listOfUnknown  // doesn't compile; must be false\n    assertFalse(TypeToken.get(a).isAssignableFrom(b));\n    listOfUnknown = listOfString; // compiles; must be true\n    // The following assertion is too difficult to support reliably, so disabling\n    // assertTrue(TypeToken.get(b).isAssignableFrom(a));\n  }",
        "begin_line": 58,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 59,col 5)-(line 59,col 74)",
            "(line 60,col 5)-(line 60,col 75)",
            "(line 61,col 5)-(line 61,col 53)",
            "(line 62,col 5)-(line 62,col 53)",
            "(line 65,col 5)-(line 65,col 54)",
            "(line 66,col 5)-(line 66,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.reflect.TypeTokenTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java",
        "signature": "com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards()",
        "snippet": "  public void testIsAssignableFromWithNestedWildcards() throws Exception {\n    Type a = getClass().getDeclaredField(\"listOfSetOfString\").getGenericType();\n    Type b = getClass().getDeclaredField(\"listOfSetOfUnknown\").getGenericType();\n    assertTrue(TypeToken.get(a).isAssignableFrom(a));\n    assertTrue(TypeToken.get(b).isAssignableFrom(b));\n\n    // listOfSetOfString = listOfSetOfUnknown; // doesn't compile; must be false\n    assertFalse(TypeToken.get(a).isAssignableFrom(b));\n    // listOfSetOfUnknown = listOfSetOfString; // doesn't compile; must be false\n    assertFalse(TypeToken.get(b).isAssignableFrom(a));\n  }",
        "begin_line": 71,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 79)",
            "(line 73,col 5)-(line 73,col 80)",
            "(line 74,col 5)-(line 74,col 53)",
            "(line 75,col 5)-(line 75,col 53)",
            "(line 78,col 5)-(line 78,col 54)",
            "(line 80,col 5)-(line 80,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.common.MoreAsserts",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/MoreAsserts.java",
        "signature": "com.google.gson.common.MoreAsserts.assertEquals(int[], int[])",
        "snippet": "  public static void assertEquals(int[] expected, int[] target) {\n    if (expected == null) {\n      Assert.assertNull(target);\n    }\n    Assert.assertEquals(expected.length, target.length);\n    for (int i = 0; i < expected.length; ++i) {\n      Assert.assertEquals(expected[i], target[i]);\n    }\n  }",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 32,col 5)-(line 34,col 5)",
            "(line 35,col 5)-(line 35,col 56)",
            "(line 36,col 5)-(line 38,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.common.MoreAsserts",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/MoreAsserts.java",
        "signature": "com.google.gson.common.MoreAsserts.assertEquals(java.lang.Integer[], java.lang.Integer[])",
        "snippet": "  public static void assertEquals(Integer[] expected, Integer[] target) {\n    if (expected == null) {\n      Assert.assertNull(target);\n    }\n    Assert.assertEquals(expected.length, target.length);\n    for (int i = 0; i < expected.length; ++i) {\n      Assert.assertEquals(expected[i], target[i]);\n    }\n  }",
        "begin_line": 41,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 44,col 5)",
            "(line 45,col 5)-(line 45,col 56)",
            "(line 46,col 5)-(line 48,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.common.MoreAsserts",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/MoreAsserts.java",
        "signature": "com.google.gson.common.MoreAsserts.assertContains(java.util.Collection<T>, T)",
        "snippet": "  public static <T> void assertContains(Collection<T> collection, T value) {\n    for (T entry : collection) {\n      if (entry.equals(value)) {\n        return;\n      }\n    }\n    Assert.fail(value + \" not present in \" + collection);\n  }",
        "begin_line": 56,
        "end_line": 63,
        "comment": "\n   * Asserts that the specified {@code value} is not present in {@code collection}\n   * @param collection the collection to look into\n   * @param value the value that needs to be checked for presence\n   ",
        "child_ranges": [
            "(line 57,col 5)-(line 61,col 5)",
            "(line 62,col 5)-(line 62,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.common.MoreAsserts",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/MoreAsserts.java",
        "signature": "com.google.gson.common.MoreAsserts.assertEqualsAndHashCode(java.lang.Object, java.lang.Object)",
        "snippet": "  public static void assertEqualsAndHashCode(Object a, Object b) {\n    Assert.assertTrue(a.equals(b));\n    Assert.assertTrue(b.equals(a));\n    Assert.assertEquals(a.hashCode(), b.hashCode());\n    Assert.assertFalse(a.equals(null));\n    Assert.assertFalse(a.equals(new Object()));\n  }",
        "begin_line": 65,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 66,col 5)-(line 66,col 35)",
            "(line 67,col 5)-(line 67,col 35)",
            "(line 68,col 5)-(line 68,col 52)",
            "(line 69,col 5)-(line 69,col 39)",
            "(line 70,col 5)-(line 70,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithBaseField.ClassWithBaseField(com.google.gson.common.TestTypes.Base)",
        "snippet": "    public ClassWithBaseField(Base base) {\n      this.base = base;\n    }",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 58,col 7)-(line 58,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithBaseArrayField.ClassWithBaseArrayField(com.google.gson.common.TestTypes.Base[])",
        "snippet": "    public ClassWithBaseArrayField(Base[] base) {\n      this.base = base;\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 7)-(line 66,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithBaseCollectionField.ClassWithBaseCollectionField(java.util.Collection<com.google.gson.common.TestTypes.Base>)",
        "snippet": "    public ClassWithBaseCollectionField(Collection<Base> base) {\n      this.base = base;\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 7)-(line 74,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.BaseSerializer.serialize(com.google.gson.common.TestTypes.Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "    @Override\n    public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {\n      JsonObject obj = new JsonObject();\n      obj.addProperty(Base.SERIALIZER_KEY, NAME);\n      return obj;\n    }",
        "begin_line": 80,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 82,col 7)-(line 82,col 40)",
            "(line 83,col 7)-(line 83,col 49)",
            "(line 84,col 7)-(line 84,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.SubSerializer.serialize(com.google.gson.common.TestTypes.Sub, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "    @Override\n    public JsonElement serialize(Sub src, Type typeOfSrc, JsonSerializationContext context) {\n      JsonObject obj = new JsonObject();\n      obj.addProperty(Base.SERIALIZER_KEY, NAME);\n      return obj;\n    }    ",
        "begin_line": 89,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 91,col 7)-(line 91,col 40)",
            "(line 92,col 7)-(line 92,col 49)",
            "(line 93,col 7)-(line 93,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.StringWrapper.StringWrapper(java.lang.String)",
        "snippet": "    public StringWrapper(String value) {\n      someConstantStringInstanceField = value;\n    }",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 7)-(line 101,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.BagOfPrimitives.BagOfPrimitives()",
        "snippet": "    public BagOfPrimitives() {\n      this(DEFAULT_VALUE, 0, false, \"\");\n    }",
        "begin_line": 112,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 113,col 7)-(line 113,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.BagOfPrimitives.BagOfPrimitives(long, int, boolean, java.lang.String)",
        "snippet": "    public BagOfPrimitives(long longValue, int intValue, boolean booleanValue, String stringValue) {\n      this.longValue = longValue;\n      this.intValue = intValue;\n      this.booleanValue = booleanValue;\n      this.stringValue = stringValue;\n    }",
        "begin_line": 116,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 117,col 7)-(line 117,col 33)",
            "(line 118,col 7)-(line 118,col 31)",
            "(line 119,col 7)-(line 119,col 39)",
            "(line 120,col 7)-(line 120,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.BagOfPrimitives.getIntValue()",
        "snippet": "    public int getIntValue() {\n      return intValue;\n    }",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 124,col 7)-(line 124,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.BagOfPrimitives.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n      sb.append(\"\\\"longValue\\\":\").append(longValue).append(\",\");\n      sb.append(\"\\\"intValue\\\":\").append(intValue).append(\",\");\n      sb.append(\"\\\"booleanValue\\\":\").append(booleanValue).append(\",\");\n      sb.append(\"\\\"stringValue\\\":\\\"\").append(stringValue).append(\"\\\"\");\n      sb.append(\"}\");\n      return sb.toString();\n    }",
        "begin_line": 127,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 128,col 7)-(line 128,col 45)",
            "(line 129,col 7)-(line 129,col 21)",
            "(line 130,col 7)-(line 130,col 64)",
            "(line 131,col 7)-(line 131,col 62)",
            "(line 132,col 7)-(line 132,col 70)",
            "(line 133,col 7)-(line 133,col 71)",
            "(line 134,col 7)-(line 134,col 21)",
            "(line 135,col 7)-(line 135,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.BagOfPrimitives.hashCode()",
        "snippet": "    @Override\n    public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      result = prime * result + (booleanValue ? 1231 : 1237);\n      result = prime * result + intValue;\n      result = prime * result + (int) (longValue ^ (longValue >>> 32));\n      result = prime * result + ((stringValue == null) ? 0 : stringValue.hashCode());\n      return result;\n    }",
        "begin_line": 138,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 140,col 7)-(line 140,col 27)",
            "(line 141,col 7)-(line 141,col 21)",
            "(line 142,col 7)-(line 142,col 61)",
            "(line 143,col 7)-(line 143,col 41)",
            "(line 144,col 7)-(line 144,col 71)",
            "(line 145,col 7)-(line 145,col 85)",
            "(line 146,col 7)-(line 146,col 20)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.BagOfPrimitives.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n      BagOfPrimitives other = (BagOfPrimitives) obj;\n      if (booleanValue != other.booleanValue)\n        return false;\n      if (intValue != other.intValue)\n        return false;\n      if (longValue != other.longValue)\n        return false;\n      if (stringValue == null) {\n        if (other.stringValue != null)\n          return false;\n      } else if (!stringValue.equals(other.stringValue))\n        return false;\n      return true;\n    }",
        "begin_line": 149,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 151,col 7)-(line 152,col 20)",
            "(line 153,col 7)-(line 154,col 21)",
            "(line 155,col 7)-(line 156,col 21)",
            "(line 157,col 7)-(line 157,col 52)",
            "(line 158,col 7)-(line 159,col 21)",
            "(line 160,col 7)-(line 161,col 21)",
            "(line 162,col 7)-(line 163,col 21)",
            "(line 164,col 7)-(line 168,col 21)",
            "(line 169,col 7)-(line 169,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.BagOfPrimitives.toString()",
        "snippet": "    @Override\n    public String toString() {\n      return String.format(\"(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)\",\n          longValue, intValue, booleanValue, stringValue);\n    }",
        "begin_line": 172,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 174,col 7)-(line 175,col 58)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.BagOfPrimitiveWrappers.BagOfPrimitiveWrappers(java.lang.Long, java.lang.Integer, java.lang.Boolean)",
        "snippet": "    public BagOfPrimitiveWrappers(Long longValue, Integer intValue, Boolean booleanValue) {\n      this.longValue = longValue;\n      this.intValue = intValue;\n      this.booleanValue = booleanValue;\n    }",
        "begin_line": 184,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 185,col 7)-(line 185,col 33)",
            "(line 186,col 7)-(line 186,col 31)",
            "(line 187,col 7)-(line 187,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.BagOfPrimitiveWrappers.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n      sb.append(\"\\\"longValue\\\":\").append(longValue).append(\",\");\n      sb.append(\"\\\"intValue\\\":\").append(intValue).append(\",\");\n      sb.append(\"\\\"booleanValue\\\":\").append(booleanValue);\n      sb.append(\"}\");\n      return sb.toString();\n    }",
        "begin_line": 190,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 191,col 7)-(line 191,col 45)",
            "(line 192,col 7)-(line 192,col 21)",
            "(line 193,col 7)-(line 193,col 64)",
            "(line 194,col 7)-(line 194,col 62)",
            "(line 195,col 7)-(line 195,col 58)",
            "(line 196,col 7)-(line 196,col 21)",
            "(line 197,col 7)-(line 197,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.PrimitiveArray.PrimitiveArray()",
        "snippet": "    public PrimitiveArray() {\n      this(new long[0]);\n    }",
        "begin_line": 204,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 205,col 7)-(line 205,col 24)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.PrimitiveArray.PrimitiveArray(long[])",
        "snippet": "    public PrimitiveArray(long[] longArray) {\n      this.longArray = longArray;\n    }",
        "begin_line": 208,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 209,col 7)-(line 209,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.PrimitiveArray.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\\\"longArray\\\":[\");\n\n      boolean first = true;\n      for (long l : longArray) {\n        if (!first) {\n          sb.append(\",\");\n        } else {\n          first = false;\n        }\n        sb.append(l);\n      }\n\n      sb.append(\"]}\");\n      return sb.toString();\n    }",
        "begin_line": 212,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 213,col 7)-(line 213,col 45)",
            "(line 214,col 7)-(line 214,col 36)",
            "(line 216,col 7)-(line 216,col 27)",
            "(line 217,col 7)-(line 224,col 7)",
            "(line 226,col 7)-(line 226,col 22)",
            "(line 227,col 7)-(line 227,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithNoFields.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(Object other) {\n      return other.getClass() == ClassWithNoFields.class;\n    }",
        "begin_line": 233,
        "end_line": 236,
        "comment": " Nothing here..",
        "child_ranges": [
            "(line 235,col 7)-(line 235,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.Nested.Nested()",
        "snippet": "    public Nested() {\n      this(null, null);\n    }",
        "begin_line": 243,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 244,col 7)-(line 244,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.Nested.Nested(com.google.gson.common.TestTypes.BagOfPrimitives, com.google.gson.common.TestTypes.BagOfPrimitives)",
        "snippet": "    public Nested(BagOfPrimitives primitive1, BagOfPrimitives primitive2) {\n      this.primitive1 = primitive1;\n      this.primitive2 = primitive2;\n    }",
        "begin_line": 247,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 248,col 7)-(line 248,col 35)",
            "(line 249,col 7)-(line 249,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.Nested.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n      appendFields(sb);\n      sb.append(\"}\");\n      return sb.toString();\n    }",
        "begin_line": 252,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 253,col 7)-(line 253,col 45)",
            "(line 254,col 7)-(line 254,col 21)",
            "(line 255,col 7)-(line 255,col 23)",
            "(line 256,col 7)-(line 256,col 21)",
            "(line 257,col 7)-(line 257,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.Nested.appendFields(java.lang.StringBuilder)",
        "snippet": "    public void appendFields(StringBuilder sb) {\n      if (primitive1 != null) {\n        sb.append(\"\\\"primitive1\\\":\").append(primitive1.getExpectedJson());\n      }\n      if (primitive1 != null && primitive2 != null) {\n        sb.append(\",\");\n      }\n      if (primitive2 != null) {\n        sb.append(\"\\\"primitive2\\\":\").append(primitive2.getExpectedJson());\n      }\n    }",
        "begin_line": 260,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 261,col 7)-(line 263,col 7)",
            "(line 264,col 7)-(line 266,col 7)",
            "(line 267,col 7)-(line 269,col 7)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithTransientFields.ClassWithTransientFields()",
        "snippet": "    public ClassWithTransientFields() {\n      this(0L);\n    }",
        "begin_line": 278,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 279,col 7)-(line 279,col 15)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithTransientFields.ClassWithTransientFields(long)",
        "snippet": "    public ClassWithTransientFields(long value) {\n      longValue = new long[] { value };\n      transientLongValue = value + 1;\n    }",
        "begin_line": 282,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 283,col 7)-(line 283,col 39)",
            "(line 284,col 7)-(line 284,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithTransientFields.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n      sb.append(\"\\\"longValue\\\":[\").append(longValue[0]).append(\"]\");\n      sb.append(\"}\");\n      return sb.toString();\n    }",
        "begin_line": 287,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 288,col 7)-(line 288,col 45)",
            "(line 289,col 7)-(line 289,col 21)",
            "(line 290,col 7)-(line 290,col 68)",
            "(line 291,col 7)-(line 291,col 21)",
            "(line 292,col 7)-(line 292,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithCustomTypeConverter.ClassWithCustomTypeConverter()",
        "snippet": "    public ClassWithCustomTypeConverter() {\n      this(new BagOfPrimitives(), 10);\n    }",
        "begin_line": 300,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 301,col 7)-(line 301,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithCustomTypeConverter.ClassWithCustomTypeConverter(int)",
        "snippet": "    public ClassWithCustomTypeConverter(int value) {\n      this(new BagOfPrimitives(value, value, false, \"\"), value);\n    }",
        "begin_line": 304,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 305,col 7)-(line 305,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithCustomTypeConverter.ClassWithCustomTypeConverter(com.google.gson.common.TestTypes.BagOfPrimitives, int)",
        "snippet": "    public ClassWithCustomTypeConverter(BagOfPrimitives bag, int value) {\n      this.bag = bag;\n      this.value = value;\n    }",
        "begin_line": 308,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 309,col 7)-(line 309,col 21)",
            "(line 310,col 7)-(line 310,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithCustomTypeConverter.getBag()",
        "snippet": "    public BagOfPrimitives getBag() {\n      return bag;\n    }",
        "begin_line": 313,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 314,col 7)-(line 314,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithCustomTypeConverter.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      return \"{\\\"url\\\":\\\"\" + bag.getExpectedJson() + \"\\\",\\\"value\\\":\" + value + \"}\";\n    }",
        "begin_line": 317,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 318,col 7)-(line 318,col 83)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithCustomTypeConverter.getValue()",
        "snippet": "    public int getValue() {\n      return value;\n    }",
        "begin_line": 321,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 322,col 7)-(line 322,col 19)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ArrayOfObjects.ArrayOfObjects()",
        "snippet": "    public ArrayOfObjects() {\n      elements = new BagOfPrimitives[3];\n      for (int i = 0; i < elements.length; ++i) {\n        elements[i] = new BagOfPrimitives(i, i+2, false, \"i\"+i);\n      }\n    }",
        "begin_line": 328,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 329,col 7)-(line 329,col 40)",
            "(line 330,col 7)-(line 332,col 7)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ArrayOfObjects.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      StringBuilder sb = new StringBuilder(\"{\\\"elements\\\":[\");\n      boolean first = true;\n      for (BagOfPrimitives element : elements) {\n        if (first) {\n          first = false;\n        } else {\n          sb.append(\",\");\n        }\n        sb.append(element.getExpectedJson());\n      }\n      sb.append(\"]}\");\n      return sb.toString();\n    }",
        "begin_line": 334,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 335,col 7)-(line 335,col 62)",
            "(line 336,col 7)-(line 336,col 27)",
            "(line 337,col 7)-(line 344,col 7)",
            "(line 345,col 7)-(line 345,col 22)",
            "(line 346,col 7)-(line 346,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassOverridingEquals.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      if (ref == null) {\n        return \"{}\";\n      }\n      return \"{\\\"ref\\\":\" + ref.getExpectedJson() + \"}\";\n    }",
        "begin_line": 353,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 354,col 7)-(line 356,col 7)",
            "(line 357,col 7)-(line 357,col 55)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassOverridingEquals.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(Object obj) {\n      return true;\n    }",
        "begin_line": 359,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 361,col 7)-(line 361,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassOverridingEquals.hashCode()",
        "snippet": "    @Override\n    public int hashCode() {\n      return 1;\n    }",
        "begin_line": 364,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 366,col 7)-(line 366,col 15)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithArray.ClassWithArray()",
        "snippet": "    public ClassWithArray() {\n      array = null;\n    }",
        "begin_line": 372,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 373,col 7)-(line 373,col 19)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithArray.ClassWithArray(java.lang.Object[])",
        "snippet": "    public ClassWithArray(Object[] array) {\n      this.array = array;\n    }",
        "begin_line": 376,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 377,col 7)-(line 377,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithObjects.ClassWithObjects()",
        "snippet": "    public ClassWithObjects() {\n      this(new BagOfPrimitives());\n    }",
        "begin_line": 383,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 384,col 7)-(line 384,col 34)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithObjects.ClassWithObjects(com.google.gson.common.TestTypes.BagOfPrimitives)",
        "snippet": "    public ClassWithObjects(BagOfPrimitives bag) {\n      this.bag = bag;\n    }",
        "begin_line": 386,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 387,col 7)-(line 387,col 21)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithSerializedNameFields.ClassWithSerializedNameFields()",
        "snippet": "    public ClassWithSerializedNameFields() {\n      this(1, 4);\n    }",
        "begin_line": 395,
        "end_line": 397,
        "comment": "",
        "child_ranges": [
            "(line 396,col 7)-(line 396,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithSerializedNameFields.ClassWithSerializedNameFields(int, int)",
        "snippet": "    public ClassWithSerializedNameFields(int f, int g) {\n      this.f = f;\n      this.g = g;\n    }",
        "begin_line": 398,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 399,col 7)-(line 399,col 17)",
            "(line 400,col 7)-(line 400,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.ClassWithSerializedNameFields.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      return '{' + \"\\\"fooBar\\\":\" + f + \",\\\"Another Foo\\\":\" + g + '}';\n    }",
        "begin_line": 403,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 404,col 7)-(line 404,col 69)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.CrazyLongTypeAdapter.serialize(java.lang.Long, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "    @Override\n    public JsonElement serialize(Long src, Type typeOfSrc, JsonSerializationContext context) {\n      return new JsonPrimitive(src + DIFFERENCE);\n    }",
        "begin_line": 411,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 413,col 7)-(line 413,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.common.TestTypes",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/common/TestTypes.java",
        "signature": "com.google.gson.common.TestTypes.CrazyLongTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "    @Override\n    public Long deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      return json.getAsLong() - DIFFERENCE;\n    }",
        "begin_line": 415,
        "end_line": 419,
        "comment": "",
        "child_ranges": [
            "(line 418,col 7)-(line 418,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.SerializedNameTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/SerializedNameTest.java",
        "signature": "com.google.gson.functional.SerializedNameTest.testFirstNameIsChosenForSerialization()",
        "snippet": "  public void testFirstNameIsChosenForSerialization() {\n    MyClass target = new MyClass(\"v1\", \"v2\");\n    // Ensure name1 occurs exactly once, and name2 and name3 don't appear\n    assertEquals(\"{\\\"name\\\":\\\"v1\\\",\\\"name1\\\":\\\"v2\\\"}\", gson.toJson(target));\n  }",
        "begin_line": 26,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 27,col 5)-(line 27,col 45)",
            "(line 29,col 5)-(line 29,col 76)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.SerializedNameTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/SerializedNameTest.java",
        "signature": "com.google.gson.functional.SerializedNameTest.testMultipleNamesDeserializedCorrectly()",
        "snippet": "  public void testMultipleNamesDeserializedCorrectly() {\n    assertEquals(\"v1\", gson.fromJson(\"{'name':'v1'}\", MyClass.class).a);\n\n    // Both name1 and name2 gets deserialized to b\n    assertEquals(\"v11\", gson.fromJson(\"{'name1':'v11'}\", MyClass.class).b);\n    assertEquals(\"v2\", gson.fromJson(\"{'name2':'v2'}\", MyClass.class).b);\n    assertEquals(\"v3\", gson.fromJson(\"{'name3':'v3'}\", MyClass.class).b);\n  }",
        "begin_line": 32,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 33,col 5)-(line 33,col 72)",
            "(line 36,col 5)-(line 36,col 75)",
            "(line 37,col 5)-(line 37,col 73)",
            "(line 38,col 5)-(line 38,col 73)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.SerializedNameTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/SerializedNameTest.java",
        "signature": "com.google.gson.functional.SerializedNameTest.testMultipleNamesInTheSameString()",
        "snippet": "  public void testMultipleNamesInTheSameString() {\n    // The last value takes precedence\n    assertEquals(\"v3\", gson.fromJson(\"{'name1':'v1','name2':'v2','name3':'v3'}\", MyClass.class).b);\n  }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 99)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.SerializedNameTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/SerializedNameTest.java",
        "signature": "com.google.gson.functional.SerializedNameTest.MyClass.MyClass(java.lang.String, java.lang.String)",
        "snippet": "    MyClass(String a, String b) {\n      this.a = a;\n      this.b = b;\n    }",
        "begin_line": 49,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 50,col 7)-(line 50,col 17)",
            "(line 51,col 7)-(line 51,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonArrayTest.java",
        "signature": "com.google.gson.functional.JsonArrayTest.testStringPrimitiveAddition()",
        "snippet": "  public void testStringPrimitiveAddition() {\n    JsonArray jsonArray = new JsonArray();\n\n    jsonArray.add(\"Hello\");\n    jsonArray.add(\"Goodbye\");\n    jsonArray.add(\"Thank you\");\n    jsonArray.add((String) null);\n    jsonArray.add(\"Yes\");\n\n    assertEquals(\"[\\\"Hello\\\",\\\"Goodbye\\\",\\\"Thank you\\\",null,\\\"Yes\\\"]\", jsonArray.toString());\n  }",
        "begin_line": 31,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 32,col 5)-(line 32,col 42)",
            "(line 34,col 5)-(line 34,col 27)",
            "(line 35,col 5)-(line 35,col 29)",
            "(line 36,col 5)-(line 36,col 31)",
            "(line 37,col 5)-(line 37,col 33)",
            "(line 38,col 5)-(line 38,col 25)",
            "(line 40,col 5)-(line 40,col 93)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonArrayTest.java",
        "signature": "com.google.gson.functional.JsonArrayTest.testIntegerPrimitiveAddition()",
        "snippet": "  public void testIntegerPrimitiveAddition() {\n    JsonArray jsonArray = new JsonArray();\n\n    int x = 1;\n    jsonArray.add(x);\n\n    x = 2;\n    jsonArray.add(x);\n\n    x = -3;\n    jsonArray.add(x);\n\n    jsonArray.add((Integer) null);\n\n    x = 4;\n    jsonArray.add(x);\n\n    x = 0;\n    jsonArray.add(x);\n\n    assertEquals(\"[1,2,-3,null,4,0]\", jsonArray.toString());\n  }",
        "begin_line": 43,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 44,col 42)",
            "(line 46,col 5)-(line 46,col 14)",
            "(line 47,col 5)-(line 47,col 21)",
            "(line 49,col 5)-(line 49,col 10)",
            "(line 50,col 5)-(line 50,col 21)",
            "(line 52,col 5)-(line 52,col 11)",
            "(line 53,col 5)-(line 53,col 21)",
            "(line 55,col 5)-(line 55,col 34)",
            "(line 57,col 5)-(line 57,col 10)",
            "(line 58,col 5)-(line 58,col 21)",
            "(line 60,col 5)-(line 60,col 10)",
            "(line 61,col 5)-(line 61,col 21)",
            "(line 63,col 5)-(line 63,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonArrayTest.java",
        "signature": "com.google.gson.functional.JsonArrayTest.testDoublePrimitiveAddition()",
        "snippet": "  public void testDoublePrimitiveAddition() {\n    JsonArray jsonArray = new JsonArray();\n\n    double x = 1.0;\n    jsonArray.add(x);\n\n    x = 2.13232;\n    jsonArray.add(x);\n\n    x = 0.121;\n    jsonArray.add(x);\n\n    jsonArray.add((Double) null);\n\n    x = -0.00234;\n    jsonArray.add(x);\n\n    jsonArray.add((Double) null);\n\n    assertEquals(\"[1.0,2.13232,0.121,null,-0.00234,null]\", jsonArray.toString());\n  }",
        "begin_line": 66,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 42)",
            "(line 69,col 5)-(line 69,col 19)",
            "(line 70,col 5)-(line 70,col 21)",
            "(line 72,col 5)-(line 72,col 16)",
            "(line 73,col 5)-(line 73,col 21)",
            "(line 75,col 5)-(line 75,col 14)",
            "(line 76,col 5)-(line 76,col 21)",
            "(line 78,col 5)-(line 78,col 33)",
            "(line 80,col 5)-(line 80,col 17)",
            "(line 81,col 5)-(line 81,col 21)",
            "(line 83,col 5)-(line 83,col 33)",
            "(line 85,col 5)-(line 85,col 81)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonArrayTest.java",
        "signature": "com.google.gson.functional.JsonArrayTest.testBooleanPrimitiveAddition()",
        "snippet": "  public void testBooleanPrimitiveAddition() {\n    JsonArray jsonArray = new JsonArray();\n\n    jsonArray.add(true);\n    jsonArray.add(true);\n    jsonArray.add(false);\n    jsonArray.add(false);\n    jsonArray.add((Boolean) null);\n    jsonArray.add(true);\n\n    assertEquals(\"[true,true,false,false,null,true]\", jsonArray.toString());\n  }",
        "begin_line": 88,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 42)",
            "(line 91,col 5)-(line 91,col 24)",
            "(line 92,col 5)-(line 92,col 24)",
            "(line 93,col 5)-(line 93,col 25)",
            "(line 94,col 5)-(line 94,col 25)",
            "(line 95,col 5)-(line 95,col 34)",
            "(line 96,col 5)-(line 96,col 24)",
            "(line 98,col 5)-(line 98,col 76)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonArrayTest.java",
        "signature": "com.google.gson.functional.JsonArrayTest.testCharPrimitiveAddition()",
        "snippet": "  public void testCharPrimitiveAddition() {\n    JsonArray jsonArray = new JsonArray();\n\n    jsonArray.add('a');\n    jsonArray.add('e');\n    jsonArray.add('i');\n    jsonArray.add((char) 111);\n    jsonArray.add((Character) null);\n    jsonArray.add('u');\n    jsonArray.add(\"and sometimes Y\");\n\n    assertEquals(\"[\\\"a\\\",\\\"e\\\",\\\"i\\\",\\\"o\\\",null,\\\"u\\\",\\\"and sometimes Y\\\"]\", jsonArray.toString());\n  }",
        "begin_line": 101,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 102,col 5)-(line 102,col 42)",
            "(line 104,col 5)-(line 104,col 23)",
            "(line 105,col 5)-(line 105,col 23)",
            "(line 106,col 5)-(line 106,col 23)",
            "(line 107,col 5)-(line 107,col 30)",
            "(line 108,col 5)-(line 108,col 36)",
            "(line 109,col 5)-(line 109,col 23)",
            "(line 110,col 5)-(line 110,col 37)",
            "(line 112,col 5)-(line 112,col 99)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonArrayTest.java",
        "signature": "com.google.gson.functional.JsonArrayTest.testMixedPrimitiveAddition()",
        "snippet": "  public void testMixedPrimitiveAddition() {\n    JsonArray jsonArray = new JsonArray();\n\n    jsonArray.add('a');\n    jsonArray.add(\"apple\");\n    jsonArray.add(12121);\n    jsonArray.add((char) 111);\n    jsonArray.add((Boolean) null);\n    jsonArray.add((Character) null);\n    jsonArray.add(12.232);\n    jsonArray.add(BigInteger.valueOf(2323));\n\n    assertEquals(\"[\\\"a\\\",\\\"apple\\\",12121,\\\"o\\\",null,null,12.232,2323]\", jsonArray.toString());\n  }",
        "begin_line": 115,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 116,col 5)-(line 116,col 42)",
            "(line 118,col 5)-(line 118,col 23)",
            "(line 119,col 5)-(line 119,col 27)",
            "(line 120,col 5)-(line 120,col 25)",
            "(line 121,col 5)-(line 121,col 30)",
            "(line 122,col 5)-(line 122,col 34)",
            "(line 123,col 5)-(line 123,col 36)",
            "(line 124,col 5)-(line 124,col 26)",
            "(line 125,col 5)-(line 125,col 44)",
            "(line 127,col 5)-(line 127,col 94)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonArrayTest.java",
        "signature": "com.google.gson.functional.JsonArrayTest.testNullPrimitiveAddition()",
        "snippet": "  public void testNullPrimitiveAddition() {\n    JsonArray jsonArray = new JsonArray();\n\n    jsonArray.add((Character) null);\n    jsonArray.add((Boolean) null);\n    jsonArray.add((Integer) null);\n    jsonArray.add((Double) null);\n    jsonArray.add((Float) null);\n    jsonArray.add((BigInteger) null);\n    jsonArray.add((String) null);\n    jsonArray.add((Boolean) null);\n    jsonArray.add((Number) null);\n\n    assertEquals(\"[null,null,null,null,null,null,null,null,null]\", jsonArray.toString());\n  }",
        "begin_line": 130,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 42)",
            "(line 133,col 5)-(line 133,col 36)",
            "(line 134,col 5)-(line 134,col 34)",
            "(line 135,col 5)-(line 135,col 34)",
            "(line 136,col 5)-(line 136,col 33)",
            "(line 137,col 5)-(line 137,col 32)",
            "(line 138,col 5)-(line 138,col 37)",
            "(line 139,col 5)-(line 139,col 33)",
            "(line 140,col 5)-(line 140,col 34)",
            "(line 141,col 5)-(line 141,col 33)",
            "(line 143,col 5)-(line 143,col 89)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonArrayTest.java",
        "signature": "com.google.gson.functional.JsonArrayTest.testSameAddition()",
        "snippet": "  public void testSameAddition() {\n    JsonArray jsonArray = new JsonArray();\n\n    jsonArray.add('a');\n    jsonArray.add('a');\n    jsonArray.add(true);\n    jsonArray.add(true);\n    jsonArray.add(1212);\n    jsonArray.add(1212);\n    jsonArray.add(34.34);\n    jsonArray.add(34.34);\n    jsonArray.add((Boolean) null);\n    jsonArray.add((Boolean) null);\n\n    assertEquals(\"[\\\"a\\\",\\\"a\\\",true,true,1212,1212,34.34,34.34,null,null]\", jsonArray.toString());\n  }",
        "begin_line": 146,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 147,col 5)-(line 147,col 42)",
            "(line 149,col 5)-(line 149,col 23)",
            "(line 150,col 5)-(line 150,col 23)",
            "(line 151,col 5)-(line 151,col 24)",
            "(line 152,col 5)-(line 152,col 24)",
            "(line 153,col 5)-(line 153,col 24)",
            "(line 154,col 5)-(line 154,col 24)",
            "(line 155,col 5)-(line 155,col 25)",
            "(line 156,col 5)-(line 156,col 25)",
            "(line 157,col 5)-(line 157,col 34)",
            "(line 158,col 5)-(line 158,col 34)",
            "(line 160,col 5)-(line 160,col 98)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeHierarchyAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java",
        "signature": "com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy()",
        "snippet": "  public void testTypeHierarchy() {\n    Manager andy = new Manager();\n    andy.userid = \"andy\";\n    andy.startDate = 2005;\n    andy.minions = new Employee[] {\n        new Employee(\"inder\", 2007),\n        new Employee(\"joel\", 2006),\n        new Employee(\"jesse\", 2006),\n    };\n\n    CEO eric = new CEO();\n    eric.userid = \"eric\";\n    eric.startDate = 2001;\n    eric.assistant = new Employee(\"jerome\", 2006);\n\n    eric.minions = new Employee[] {\n        new Employee(\"larry\", 1998),\n        new Employee(\"sergey\", 1998),\n        andy,\n    };\n\n    Gson gson = new GsonBuilder()\n        .registerTypeHierarchyAdapter(Employee.class, new EmployeeAdapter())\n        .setPrettyPrinting()\n        .create();\n\n    Company company = new Company();\n    company.ceo = eric;\n\n    String json = gson.toJson(company, Company.class);\n    assertEquals(\"{\\n\" +\n        \"  \\\"ceo\\\": {\\n\" +\n        \"    \\\"userid\\\": \\\"eric\\\",\\n\" +\n        \"    \\\"startDate\\\": 2001,\\n\" +\n        \"    \\\"minions\\\": [\\n\" +\n        \"      {\\n\" +\n        \"        \\\"userid\\\": \\\"larry\\\",\\n\" +\n        \"        \\\"startDate\\\": 1998\\n\" +\n        \"      },\\n\" +\n        \"      {\\n\" +\n        \"        \\\"userid\\\": \\\"sergey\\\",\\n\" +\n        \"        \\\"startDate\\\": 1998\\n\" +\n        \"      },\\n\" +\n        \"      {\\n\" +\n        \"        \\\"userid\\\": \\\"andy\\\",\\n\" +\n        \"        \\\"startDate\\\": 2005,\\n\" +\n        \"        \\\"minions\\\": [\\n\" +\n        \"          {\\n\" +\n        \"            \\\"userid\\\": \\\"inder\\\",\\n\" +\n        \"            \\\"startDate\\\": 2007\\n\" +\n        \"          },\\n\" +\n        \"          {\\n\" +\n        \"            \\\"userid\\\": \\\"joel\\\",\\n\" +\n        \"            \\\"startDate\\\": 2006\\n\" +\n        \"          },\\n\" +\n        \"          {\\n\" +\n        \"            \\\"userid\\\": \\\"jesse\\\",\\n\" +\n        \"            \\\"startDate\\\": 2006\\n\" +\n        \"          }\\n\" +\n        \"        ]\\n\" +\n        \"      }\\n\" +\n        \"    ],\\n\" +\n        \"    \\\"assistant\\\": {\\n\" +\n        \"      \\\"userid\\\": \\\"jerome\\\",\\n\" +\n        \"      \\\"startDate\\\": 2006\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"}\", json);\n\n    Company copied = gson.fromJson(json, Company.class);\n    assertEquals(json, gson.toJson(copied, Company.class));\n    assertEquals(copied.ceo.userid, company.ceo.userid);\n    assertEquals(copied.ceo.assistant.userid, company.ceo.assistant.userid);\n    assertEquals(copied.ceo.minions[0].userid, company.ceo.minions[0].userid);\n    assertEquals(copied.ceo.minions[1].userid, company.ceo.minions[1].userid);\n    assertEquals(copied.ceo.minions[2].userid, company.ceo.minions[2].userid);\n    assertEquals(((Manager) copied.ceo.minions[2]).minions[0].userid,\n        ((Manager) company.ceo.minions[2]).minions[0].userid);\n    assertEquals(((Manager) copied.ceo.minions[2]).minions[1].userid,\n        ((Manager) company.ceo.minions[2]).minions[1].userid);\n  }",
        "begin_line": 37,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 33)",
            "(line 39,col 5)-(line 39,col 25)",
            "(line 40,col 5)-(line 40,col 26)",
            "(line 41,col 5)-(line 45,col 6)",
            "(line 47,col 5)-(line 47,col 25)",
            "(line 48,col 5)-(line 48,col 25)",
            "(line 49,col 5)-(line 49,col 26)",
            "(line 50,col 5)-(line 50,col 50)",
            "(line 52,col 5)-(line 56,col 6)",
            "(line 58,col 5)-(line 61,col 18)",
            "(line 63,col 5)-(line 63,col 36)",
            "(line 64,col 5)-(line 64,col 23)",
            "(line 66,col 5)-(line 66,col 54)",
            "(line 67,col 5)-(line 104,col 19)",
            "(line 106,col 5)-(line 106,col 56)",
            "(line 107,col 5)-(line 107,col 59)",
            "(line 108,col 5)-(line 108,col 56)",
            "(line 109,col 5)-(line 109,col 76)",
            "(line 110,col 5)-(line 110,col 78)",
            "(line 111,col 5)-(line 111,col 78)",
            "(line 112,col 5)-(line 112,col 78)",
            "(line 113,col 5)-(line 114,col 62)",
            "(line 115,col 5)-(line 116,col 62)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeHierarchyAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java",
        "signature": "com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst()",
        "snippet": "  public void testRegisterSuperTypeFirst() {\n    Gson gson = new GsonBuilder()\n        .registerTypeHierarchyAdapter(Employee.class, new EmployeeAdapter())\n        .registerTypeHierarchyAdapter(Manager.class, new ManagerAdapter())\n        .create();\n\n    Manager manager = new Manager();\n    manager.userid = \"inder\";\n\n    String json = gson.toJson(manager, Manager.class);\n    assertEquals(\"\\\"inder\\\"\", json);\n    Manager copied = gson.fromJson(json, Manager.class);\n    assertEquals(manager.userid, copied.userid);\n  }",
        "begin_line": 119,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 120,col 5)-(line 123,col 18)",
            "(line 125,col 5)-(line 125,col 36)",
            "(line 126,col 5)-(line 126,col 29)",
            "(line 128,col 5)-(line 128,col 54)",
            "(line 129,col 5)-(line 129,col 36)",
            "(line 130,col 5)-(line 130,col 56)",
            "(line 131,col 5)-(line 131,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeHierarchyAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java",
        "signature": "com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed()",
        "snippet": "  public void testRegisterSubTypeFirstAllowed() {\n    new GsonBuilder()\n        .registerTypeHierarchyAdapter(Manager.class, new ManagerAdapter())\n        .registerTypeHierarchyAdapter(Employee.class, new EmployeeAdapter())\n        .create();\n  }",
        "begin_line": 135,
        "end_line": 140,
        "comment": " This behaviour changed in Gson 2.1; it used to throw. ",
        "child_ranges": [
            "(line 136,col 5)-(line 139,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeHierarchyAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java",
        "signature": "com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "    @Override public Manager deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {\n      Manager result = new Manager();\n      result.userid = json.getAsString();\n      return result;\n    }",
        "begin_line": 143,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 144,col 7)-(line 144,col 37)",
            "(line 145,col 7)-(line 145,col 41)",
            "(line 146,col 7)-(line 146,col 20)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeHierarchyAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java",
        "signature": "com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.serialize(com.google.gson.functional.TypeHierarchyAdapterTest.Manager, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "    @Override public JsonElement serialize(Manager src, Type typeOfSrc, JsonSerializationContext context) {\n      return new JsonPrimitive(src.userid);\n    }",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 149,col 7)-(line 149,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeHierarchyAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java",
        "signature": "com.google.gson.functional.TypeHierarchyAdapterTest.EmployeeAdapter.serialize(com.google.gson.functional.TypeHierarchyAdapterTest.Employee, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "    @Override public JsonElement serialize(Employee employee, Type typeOfSrc,\n        JsonSerializationContext context) {\n      JsonObject result = new JsonObject();\n      result.add(\"userid\", context.serialize(employee.userid, String.class));\n      result.add(\"startDate\", context.serialize(employee.startDate, long.class));\n      if (employee instanceof Manager) {\n        result.add(\"minions\", context.serialize(((Manager) employee).minions, Employee[].class));\n        if (employee instanceof CEO) {\n          result.add(\"assistant\", context.serialize(((CEO) employee).assistant, Employee.class));\n        }\n      }\n      return result;\n    }",
        "begin_line": 154,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 156,col 7)-(line 156,col 43)",
            "(line 157,col 7)-(line 157,col 77)",
            "(line 158,col 7)-(line 158,col 81)",
            "(line 159,col 7)-(line 164,col 7)",
            "(line 165,col 7)-(line 165,col 20)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeHierarchyAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java",
        "signature": "com.google.gson.functional.TypeHierarchyAdapterTest.EmployeeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "    @Override public Employee deserialize(JsonElement json, Type typeOfT,\n        JsonDeserializationContext context) throws JsonParseException {\n      JsonObject object = json.getAsJsonObject();\n      Employee result = null;\n\n      // if the employee has an assistant, she must be the CEO\n      JsonElement assistant = object.get(\"assistant\");\n      if (assistant != null) {\n        result = new CEO();\n        ((CEO) result).assistant = context.deserialize(assistant, Employee.class);\n      }\n\n      // only managers have minions\n      JsonElement minons = object.get(\"minions\");\n      if (minons != null) {\n        if (result == null) {\n          result = new Manager();\n        }\n        ((Manager) result).minions = context.deserialize(minons, Employee[].class);\n      }\n\n      if (result == null) {\n        result = new Employee();\n      }\n      result.userid = context.deserialize(object.get(\"userid\"), String.class);\n      result.startDate = context.<Long>deserialize(object.get(\"startDate\"), long.class);\n      return result;\n    }",
        "begin_line": 168,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 170,col 7)-(line 170,col 49)",
            "(line 171,col 7)-(line 171,col 29)",
            "(line 174,col 7)-(line 174,col 54)",
            "(line 175,col 7)-(line 178,col 7)",
            "(line 181,col 7)-(line 181,col 49)",
            "(line 182,col 7)-(line 187,col 7)",
            "(line 189,col 7)-(line 191,col 7)",
            "(line 192,col 7)-(line 192,col 78)",
            "(line 193,col 7)-(line 193,col 88)",
            "(line 194,col 7)-(line 194,col 20)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeHierarchyAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java",
        "signature": "com.google.gson.functional.TypeHierarchyAdapterTest.Employee.Employee(java.lang.String, long)",
        "snippet": "    Employee(String userid, long startDate) {\n      this.userid = userid;\n      this.startDate = startDate;\n    }",
        "begin_line": 202,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 203,col 7)-(line 203,col 27)",
            "(line 204,col 7)-(line 204,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeHierarchyAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java",
        "signature": "com.google.gson.functional.TypeHierarchyAdapterTest.Employee.Employee()",
        "snippet": "    Employee() {}",
        "begin_line": 207,
        "end_line": 207,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.gson.functional.FieldNamingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/FieldNamingTest.java",
        "signature": "com.google.gson.functional.FieldNamingTest.testIdentity()",
        "snippet": "  public void testIdentity() {\n    Gson gson = getGsonWithNamingPolicy(IDENTITY);\n    assertEquals(\"{'lowerCamel':1,'UpperCamel':2,'_lowerCamelLeadingUnderscore':3,\" +\n        \"'_UpperCamelLeadingUnderscore':4,'lower_words':5,'UPPER_WORDS':6,\" +\n        \"'annotatedName':7,'lowerId':8}\",\n        gson.toJson(new TestNames()).replace('\\\"', '\\''));\n  }",
        "begin_line": 32,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 33,col 5)-(line 33,col 50)",
            "(line 34,col 5)-(line 37,col 58)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.FieldNamingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/FieldNamingTest.java",
        "signature": "com.google.gson.functional.FieldNamingTest.testUpperCamelCase()",
        "snippet": "  public void testUpperCamelCase() {\n    Gson gson = getGsonWithNamingPolicy(UPPER_CAMEL_CASE);\n    assertEquals(\"{'LowerCamel':1,'UpperCamel':2,'_LowerCamelLeadingUnderscore':3,\" +\n        \"'_UpperCamelLeadingUnderscore':4,'Lower_words':5,'UPPER_WORDS':6,\" +\n        \"'annotatedName':7,'LowerId':8}\",\n        gson.toJson(new TestNames()).replace('\\\"', '\\''));\n  }",
        "begin_line": 40,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 41,col 5)-(line 41,col 58)",
            "(line 42,col 5)-(line 45,col 58)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.FieldNamingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/FieldNamingTest.java",
        "signature": "com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces()",
        "snippet": "  public void testUpperCamelCaseWithSpaces() {\n    Gson gson = getGsonWithNamingPolicy(UPPER_CAMEL_CASE_WITH_SPACES);\n    assertEquals(\"{'Lower Camel':1,'Upper Camel':2,'_Lower Camel Leading Underscore':3,\" +\n        \"'_ Upper Camel Leading Underscore':4,'Lower_words':5,'U P P E R_ W O R D S':6,\" +\n        \"'annotatedName':7,'Lower Id':8}\",\n        gson.toJson(new TestNames()).replace('\\\"', '\\''));\n  }",
        "begin_line": 48,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 70)",
            "(line 50,col 5)-(line 53,col 58)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.FieldNamingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/FieldNamingTest.java",
        "signature": "com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores()",
        "snippet": "  public void testLowerCaseWithUnderscores() {\n    Gson gson = getGsonWithNamingPolicy(LOWER_CASE_WITH_UNDERSCORES);\n    assertEquals(\"{'lower_camel':1,'upper_camel':2,'_lower_camel_leading_underscore':3,\" +\n        \"'__upper_camel_leading_underscore':4,'lower_words':5,'u_p_p_e_r__w_o_r_d_s':6,\" +\n        \"'annotatedName':7,'lower_id':8}\",\n        gson.toJson(new TestNames()).replace('\\\"', '\\''));\n  }",
        "begin_line": 56,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 57,col 69)",
            "(line 58,col 5)-(line 61,col 58)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.FieldNamingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/FieldNamingTest.java",
        "signature": "com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes()",
        "snippet": "  public void testLowerCaseWithDashes() {\n    Gson gson = getGsonWithNamingPolicy(LOWER_CASE_WITH_DASHES);\n    assertEquals(\"{'lower-camel':1,'upper-camel':2,'_lower-camel-leading-underscore':3,\" +\n        \"'_-upper-camel-leading-underscore':4,'lower_words':5,'u-p-p-e-r_-w-o-r-d-s':6,\" +\n        \"'annotatedName':7,'lower-id':8}\",\n        gson.toJson(new TestNames()).replace('\\\"', '\\''));\n  }",
        "begin_line": 64,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 65,col 5)-(line 65,col 64)",
            "(line 66,col 5)-(line 69,col 58)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.FieldNamingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/FieldNamingTest.java",
        "signature": "com.google.gson.functional.FieldNamingTest.getGsonWithNamingPolicy(com.google.gson.FieldNamingPolicy)",
        "snippet": "  private Gson getGsonWithNamingPolicy(FieldNamingPolicy fieldNamingPolicy){\n    return new GsonBuilder()\n      .setFieldNamingPolicy(fieldNamingPolicy)\n        .create();\n  }",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 73,col 5)-(line 75,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomSerializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java",
        "signature": "com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields()",
        "snippet": "   public void testBaseClassSerializerInvokedForBaseClassFields() {\n     Gson gson = new GsonBuilder()\n         .registerTypeAdapter(Base.class, new BaseSerializer())\n         .registerTypeAdapter(Sub.class, new SubSerializer())\n         .create();\n     ClassWithBaseField target = new ClassWithBaseField(new Base());\n     JsonObject json = (JsonObject) gson.toJsonTree(target);\n     JsonObject base = json.get(\"base\").getAsJsonObject();\n     assertEquals(BaseSerializer.NAME, base.get(Base.SERIALIZER_KEY).getAsString());\n   }",
        "begin_line": 45,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 46,col 6)-(line 49,col 19)",
            "(line 50,col 6)-(line 50,col 68)",
            "(line 51,col 6)-(line 51,col 60)",
            "(line 52,col 6)-(line 52,col 58)",
            "(line 53,col 6)-(line 53,col 84)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomSerializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java",
        "signature": "com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances()",
        "snippet": "   public void testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances() {\n     Gson gson = new GsonBuilder()\n         .registerTypeAdapter(Base.class, new BaseSerializer())\n         .registerTypeAdapter(Sub.class, new SubSerializer())\n         .create();\n     ClassWithBaseField target = new ClassWithBaseField(new Sub());\n     JsonObject json = (JsonObject) gson.toJsonTree(target);\n     JsonObject base = json.get(\"base\").getAsJsonObject();\n     assertEquals(SubSerializer.NAME, base.get(Base.SERIALIZER_KEY).getAsString());\n   }",
        "begin_line": 56,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 57,col 6)-(line 60,col 19)",
            "(line 61,col 6)-(line 61,col 67)",
            "(line 62,col 6)-(line 62,col 60)",
            "(line 63,col 6)-(line 63,col 58)",
            "(line 64,col 6)-(line 64,col 83)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomSerializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java",
        "signature": "com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances()",
        "snippet": "   public void testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances() {\n     Gson gson = new GsonBuilder()\n         .registerTypeAdapter(Base.class, new BaseSerializer())\n         .registerTypeAdapter(Sub.class, new SubSerializer())\n         .create();\n     ClassWithBaseArrayField target = new ClassWithBaseArrayField(new Base[] {new Sub(), new Sub()});\n     JsonObject json = (JsonObject) gson.toJsonTree(target);\n     JsonArray array = json.get(\"base\").getAsJsonArray();\n     for (JsonElement element : array) {\n       JsonElement serializerKey = element.getAsJsonObject().get(Base.SERIALIZER_KEY);\n      assertEquals(SubSerializer.NAME, serializerKey.getAsString());\n     }\n   }",
        "begin_line": 67,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 68,col 6)-(line 71,col 19)",
            "(line 72,col 6)-(line 72,col 101)",
            "(line 73,col 6)-(line 73,col 60)",
            "(line 74,col 6)-(line 74,col 57)",
            "(line 75,col 6)-(line 78,col 6)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomSerializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java",
        "signature": "com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances()",
        "snippet": "   public void testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances() {\n     Gson gson = new GsonBuilder()\n         .registerTypeAdapter(Base.class, new BaseSerializer())\n         .create();\n     ClassWithBaseField target = new ClassWithBaseField(new Sub());\n     JsonObject json = (JsonObject) gson.toJsonTree(target);\n     JsonObject base = json.get(\"base\").getAsJsonObject();\n     assertEquals(BaseSerializer.NAME, base.get(Base.SERIALIZER_KEY).getAsString());\n   }",
        "begin_line": 81,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 82,col 6)-(line 84,col 19)",
            "(line 85,col 6)-(line 85,col 67)",
            "(line 86,col 6)-(line 86,col 60)",
            "(line 87,col 6)-(line 87,col 58)",
            "(line 88,col 6)-(line 88,col 84)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomSerializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java",
        "signature": "com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull()",
        "snippet": "   public void testSerializerReturnsNull() {\n     Gson gson = new GsonBuilder()\n       .registerTypeAdapter(Base.class, new JsonSerializer<Base>() {\n         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {\n           return null;\n         }\n       })\n       .create();\n       JsonElement json = gson.toJsonTree(new Base());\n       assertTrue(json.isJsonNull());\n   }",
        "begin_line": 91,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 92,col 6)-(line 98,col 17)",
            "(line 99,col 8)-(line 99,col 54)",
            "(line 100,col 8)-(line 100,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomSerializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java",
        "signature": "serialize(Base, Type, JsonSerializationContext)",
        "snippet": "         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {\n           return null;\n         }",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 95,col 12)-(line 95,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault()",
        "snippet": "  public void testClassAnnotationAdapterTakesPrecedenceOverDefault() {\n    Gson gson = new Gson();\n    String json = gson.toJson(new Computer(new User(\"Inderjeet Singh\")));\n    assertEquals(\"{\\\"user\\\":\\\"UserClassAnnotationAdapter\\\"}\", json);\n    Computer computer = gson.fromJson(\"{'user':'Inderjeet Singh'}\", Computer.class);\n    assertEquals(\"UserClassAnnotationAdapter\", computer.user.name);\n  }",
        "begin_line": 34,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 35,col 5)-(line 35,col 27)",
            "(line 36,col 5)-(line 36,col 73)",
            "(line 37,col 5)-(line 37,col 68)",
            "(line 38,col 5)-(line 38,col 84)",
            "(line 39,col 5)-(line 39,col 67)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault()",
        "snippet": "  public void testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault() {\n    Gson gson = new Gson();\n    String json = gson.toJson(new Gizmo(new Part(\"Part\")));\n    assertEquals(\"{\\\"part\\\":\\\"GizmoPartTypeAdapterFactory\\\"}\", json);\n    Gizmo computer = gson.fromJson(\"{'part':'Part'}\", Gizmo.class);\n    assertEquals(\"GizmoPartTypeAdapterFactory\", computer.part.name);\n  }",
        "begin_line": 42,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 27)",
            "(line 44,col 5)-(line 44,col 59)",
            "(line 45,col 5)-(line 45,col 69)",
            "(line 46,col 5)-(line 46,col 67)",
            "(line 47,col 5)-(line 47,col 68)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter()",
        "snippet": "  public void testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(User.class, new RegisteredUserAdapter())\n        .create();\n    String json = gson.toJson(new Computer(new User(\"Inderjeet Singh\")));\n    assertEquals(\"{\\\"user\\\":\\\"RegisteredUserAdapter\\\"}\", json);\n    Computer computer = gson.fromJson(\"{'user':'Inderjeet Singh'}\", Computer.class);\n    assertEquals(\"RegisteredUserAdapter\", computer.user.name);\n  }",
        "begin_line": 50,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 53,col 18)",
            "(line 54,col 5)-(line 54,col 73)",
            "(line 55,col 5)-(line 55,col 63)",
            "(line 56,col 5)-(line 56,col 84)",
            "(line 57,col 5)-(line 57,col 62)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter()",
        "snippet": "  public void testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter() {\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(Part.class, new TypeAdapter<Part>() {\n        @Override public void write(JsonWriter out, Part part) throws IOException {\n          throw new AssertionError();\n        }\n\n        @Override public Part read(JsonReader in) throws IOException {\n          throw new AssertionError();\n        }\n      }).create();\n    String json = gson.toJson(new Gadget(new Part(\"screen\")));\n    assertEquals(\"{\\\"part\\\":\\\"PartJsonFieldAnnotationAdapter\\\"}\", json);\n    Gadget gadget = gson.fromJson(\"{'part':'screen'}\", Gadget.class);\n    assertEquals(\"PartJsonFieldAnnotationAdapter\", gadget.part.name);\n  }",
        "begin_line": 60,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 61,col 5)-(line 70,col 18)",
            "(line 71,col 5)-(line 71,col 62)",
            "(line 72,col 5)-(line 72,col 72)",
            "(line 73,col 5)-(line 73,col 69)",
            "(line 74,col 5)-(line 74,col 69)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Anonymous-a9df11ff-d297-41f7-ab1b-834d6d996b90.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Part)",
        "snippet": "        @Override public void write(JsonWriter out, Part part) throws IOException {\n          throw new AssertionError();\n        }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 11)-(line 64,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Anonymous-513e7593-4530-49c7-b4f1-945ab23f9d49.read(com.google.gson.stream.JsonReader)",
        "snippet": "        @Override public Part read(JsonReader in) throws IOException {\n          throw new AssertionError();\n        }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 11)-(line 68,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation()",
        "snippet": "  public void testFieldAnnotationTakesPrecedenceOverClassAnnotation() {\n    Gson gson = new Gson();\n    String json = gson.toJson(new Computer2(new User(\"Inderjeet Singh\")));\n    assertEquals(\"{\\\"user\\\":\\\"UserFieldAnnotationAdapter\\\"}\", json);\n    Computer2 target = gson.fromJson(\"{'user':'Interjeet Singh'}\", Computer2.class);\n    assertEquals(\"UserFieldAnnotationAdapter\", target.user.name);\n  }",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 78,col 27)",
            "(line 79,col 5)-(line 79,col 74)",
            "(line 80,col 5)-(line 80,col 68)",
            "(line 81,col 5)-(line 81,col 84)",
            "(line 82,col 5)-(line 82,col 65)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gadget(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Part)",
        "snippet": "    Gadget(Part part) {\n      this.part = part;\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 89,col 7)-(line 89,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gizmo.Gizmo(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Part)",
        "snippet": "    Gizmo(Part part) {\n      this.part = part;\n    }",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 7)-(line 97,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Part.Part(java.lang.String)",
        "snippet": "    public Part(String name) {\n      this.name = name;\n    }",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 104,col 7)-(line 104,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.PartJsonFieldAnnotationAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Part)",
        "snippet": "    @Override public void write(JsonWriter out, Part part) throws IOException {\n      out.value(\"PartJsonFieldAnnotationAdapter\");\n    }",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 110,col 7)-(line 110,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.PartJsonFieldAnnotationAdapter.read(com.google.gson.stream.JsonReader)",
        "snippet": "    @Override public Part read(JsonReader in) throws IOException {\n      in.nextString();\n      return new Part(\"PartJsonFieldAnnotationAdapter\");\n    }",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 113,col 7)-(line 113,col 22)",
            "(line 114,col 7)-(line 114,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.GizmoPartTypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken<T>)",
        "snippet": "    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n      return new TypeAdapter<T>() {\n        @Override public void write(JsonWriter out, T value) throws IOException {\n          out.value(\"GizmoPartTypeAdapterFactory\");\n        }\n        @SuppressWarnings(\"unchecked\")\n        @Override public T read(JsonReader in) throws IOException {\n          in.nextString();\n          return (T) new Part(\"GizmoPartTypeAdapterFactory\");\n        }\n      };\n    }",
        "begin_line": 119,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 120,col 7)-(line 129,col 8)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.GizmoPartTypeAdapterFactory.Anonymous-67ebf83d-c7b2-42a6-8141-56d71c038b86.write(com.google.gson.stream.JsonWriter, T)",
        "snippet": "        @Override public void write(JsonWriter out, T value) throws IOException {\n          out.value(\"GizmoPartTypeAdapterFactory\");\n        }",
        "begin_line": 121,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 122,col 11)-(line 122,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.GizmoPartTypeAdapterFactory.Anonymous-126ed846-6b73-465f-a299-fce6815557da.read(com.google.gson.stream.JsonReader)",
        "snippet": "        @SuppressWarnings(\"unchecked\")\n        @Override public T read(JsonReader in) throws IOException {\n          in.nextString();\n          return (T) new Part(\"GizmoPartTypeAdapterFactory\");\n        }",
        "begin_line": 124,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 126,col 11)-(line 126,col 26)",
            "(line 127,col 11)-(line 127,col 61)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Computer.Computer(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.User)",
        "snippet": "    Computer(User user) {\n      this.user = user;\n    }",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 136,col 7)-(line 136,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.User.User(java.lang.String)",
        "snippet": "    private User(String name) {\n      this.name = name;\n    }",
        "begin_line": 143,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 144,col 7)-(line 144,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.UserClassAnnotationAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.User)",
        "snippet": "    @Override public void write(JsonWriter out, User user) throws IOException {\n      out.value(\"UserClassAnnotationAdapter\");\n    }",
        "begin_line": 149,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 150,col 7)-(line 150,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.UserClassAnnotationAdapter.read(com.google.gson.stream.JsonReader)",
        "snippet": "    @Override public User read(JsonReader in) throws IOException {\n      in.nextString();\n      return new User(\"UserClassAnnotationAdapter\");\n    }",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 153,col 7)-(line 153,col 22)",
            "(line 154,col 7)-(line 154,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Computer2.Computer2(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.User)",
        "snippet": "    Computer2(User user) {\n      this.user = user;\n    }",
        "begin_line": 162,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 163,col 7)-(line 163,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.UserFieldAnnotationAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.User)",
        "snippet": "    @Override public void write(JsonWriter out, User user) throws IOException {\n      out.value(\"UserFieldAnnotationAdapter\");\n    }",
        "begin_line": 168,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 169,col 7)-(line 169,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.UserFieldAnnotationAdapter.read(com.google.gson.stream.JsonReader)",
        "snippet": "    @Override public User read(JsonReader in) throws IOException {\n      in.nextString();\n      return new User(\"UserFieldAnnotationAdapter\");\n    }",
        "begin_line": 171,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 172,col 7)-(line 172,col 22)",
            "(line 173,col 7)-(line 173,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.RegisteredUserAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.User)",
        "snippet": "    @Override public void write(JsonWriter out, User user) throws IOException {\n      out.value(\"RegisteredUserAdapter\");\n    }",
        "begin_line": 178,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 179,col 7)-(line 179,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.RegisteredUserAdapter.read(com.google.gson.stream.JsonReader)",
        "snippet": "    @Override public User read(JsonReader in) throws IOException {\n      in.nextString();\n      return new User(\"RegisteredUserAdapter\");\n    }",
        "begin_line": 181,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 182,col 7)-(line 182,col 22)",
            "(line 183,col 7)-(line 183,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields()",
        "snippet": "  public void testJsonAdapterInvokedOnlyForAnnotatedFields() {\n    Gson gson = new Gson();\n    String json = \"{'part1':'name','part2':{'name':'name2'}}\";\n    GadgetWithTwoParts gadget = gson.fromJson(json, GadgetWithTwoParts.class);\n    assertEquals(\"PartJsonFieldAnnotationAdapter\", gadget.part1.name);\n    assertEquals(\"name2\", gadget.part2.name);\n  }",
        "begin_line": 187,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 188,col 27)",
            "(line 189,col 5)-(line 189,col 62)",
            "(line 190,col 5)-(line 190,col 78)",
            "(line 191,col 5)-(line 191,col 70)",
            "(line 192,col 5)-(line 192,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.GadgetWithTwoParts.GadgetWithTwoParts(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Part, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Part)",
        "snippet": "    @SuppressWarnings(\"unused\") GadgetWithTwoParts(Part part1, Part part2) {\n      this.part1 = part1;\n      this.part2 = part2;\n    }",
        "begin_line": 198,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 199,col 7)-(line 199,col 25)",
            "(line 200,col 7)-(line 200,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterWrappedInNullSafeAsRequested()",
        "snippet": "  public void testJsonAdapterWrappedInNullSafeAsRequested() {\n    Gson gson = new Gson();\n    String fromJson = \"{'part':null}\";\n\n    GadgetWithOptionalPart gadget = gson.fromJson(fromJson, GadgetWithOptionalPart.class);\n    assertNull(gadget.part);\n\n    String toJson = gson.toJson(gadget);\n    assertFalse(toJson.contains(\"PartJsonFieldAnnotationAdapter\"));\n  }",
        "begin_line": 204,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 205,col 5)-(line 205,col 27)",
            "(line 206,col 5)-(line 206,col 38)",
            "(line 208,col 5)-(line 208,col 90)",
            "(line 209,col 5)-(line 209,col 28)",
            "(line 211,col 5)-(line 211,col 40)",
            "(line 212,col 5)-(line 212,col 67)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.GadgetWithOptionalPart.GadgetWithOptionalPart(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Part)",
        "snippet": "    private GadgetWithOptionalPart(Part part) {\n      this.part = part;\n    }",
        "begin_line": 219,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 220,col 7)-(line 220,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.SecurityTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/SecurityTest.java",
        "signature": "com.google.gson.functional.SecurityTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gsonBuilder = new GsonBuilder();\n  }",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 40,col 5)-(line 40,col 18)",
            "(line 41,col 5)-(line 41,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.SecurityTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/SecurityTest.java",
        "signature": "com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization()",
        "snippet": "  public void testNonExecutableJsonSerialization() {\n    Gson gson = gsonBuilder.generateNonExecutableJson().create();\n    String json = gson.toJson(new BagOfPrimitives());\n    assertTrue(json.startsWith(JSON_NON_EXECUTABLE_PREFIX));\n  }",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 5)-(line 45,col 65)",
            "(line 46,col 5)-(line 46,col 53)",
            "(line 47,col 5)-(line 47,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.SecurityTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/SecurityTest.java",
        "signature": "com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization()",
        "snippet": "  public void testNonExecutableJsonDeserialization() {\n    String json = JSON_NON_EXECUTABLE_PREFIX + \"{longValue:1}\";\n    Gson gson = gsonBuilder.create();\n    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);\n    assertEquals(1, target.longValue);\n  }",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 63)",
            "(line 52,col 5)-(line 52,col 37)",
            "(line 53,col 5)-(line 53,col 72)",
            "(line 54,col 5)-(line 54,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.SecurityTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/SecurityTest.java",
        "signature": "com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization()",
        "snippet": "  public void testJsonWithNonExectuableTokenSerialization() {\n    Gson gson = gsonBuilder.generateNonExecutableJson().create();\n    String json = gson.toJson(JSON_NON_EXECUTABLE_PREFIX);\n    assertTrue(json.contains(\")]}'\\n\"));\n  }",
        "begin_line": 57,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 58,col 65)",
            "(line 59,col 5)-(line 59,col 58)",
            "(line 60,col 5)-(line 60,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.SecurityTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/SecurityTest.java",
        "signature": "com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization()",
        "snippet": "  public void testJsonWithNonExectuableTokenWithRegularGsonDeserialization() {\n    Gson gson = gsonBuilder.create();\n    String json = JSON_NON_EXECUTABLE_PREFIX + \"{stringValue:')]}\\\\u0027\\\\n'}\";\n    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);\n    assertEquals(\")]}'\\n\", target.stringValue);\n  }  ",
        "begin_line": 67,
        "end_line": 72,
        "comment": "\n   *  Gson should be able to deserialize a stream with non-exectuable token even if it is created\n   *  without {@link GsonBuilder#generateNonExecutableJson()}.\n   ",
        "child_ranges": [
            "(line 68,col 5)-(line 68,col 37)",
            "(line 69,col 5)-(line 69,col 79)",
            "(line 70,col 5)-(line 70,col 72)",
            "(line 71,col 5)-(line 71,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.SecurityTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/SecurityTest.java",
        "signature": "com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization()",
        "snippet": "  public void testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization() {\n    // Gson should be able to deserialize a stream with non-exectuable token even if it is created \n    Gson gson = gsonBuilder.generateNonExecutableJson().create();\n    String json = JSON_NON_EXECUTABLE_PREFIX + \"{intValue:2,stringValue:')]}\\\\u0027\\\\n'}\";\n    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);\n    assertEquals(\")]}'\\n\", target.stringValue);\n    assertEquals(2, target.intValue);\n  }  ",
        "begin_line": 78,
        "end_line": 85,
        "comment": "\n   *  Gson should be able to deserialize a stream with non-exectuable token if it is created\n   *  with {@link GsonBuilder#generateNonExecutableJson()}.\n   ",
        "child_ranges": [
            "(line 80,col 5)-(line 80,col 65)",
            "(line 81,col 5)-(line 81,col 90)",
            "(line 82,col 5)-(line 82,col 72)",
            "(line 83,col 5)-(line 83,col 47)",
            "(line 84,col 5)-(line 84,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CircularReferenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java",
        "signature": "com.google.gson.functional.CircularReferenceTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 18)",
            "(line 44,col 5)-(line 44,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CircularReferenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java",
        "signature": "com.google.gson.functional.CircularReferenceTest.testCircularSerialization()",
        "snippet": "  public void testCircularSerialization() throws Exception {\n    ContainsReferenceToSelfType a = new ContainsReferenceToSelfType();\n    ContainsReferenceToSelfType b = new ContainsReferenceToSelfType();\n    a.children.add(b);\n    b.children.add(a);\n    try {\n      gson.toJson(a);\n      fail(\"Circular types should not get printed!\");\n    } catch (StackOverflowError expected) {\n    }\n  }",
        "begin_line": 47,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 48,col 70)",
            "(line 49,col 5)-(line 49,col 70)",
            "(line 50,col 5)-(line 50,col 22)",
            "(line 51,col 5)-(line 51,col 22)",
            "(line 52,col 5)-(line 56,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CircularReferenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java",
        "signature": "com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization()",
        "snippet": "  public void testSelfReferenceIgnoredInSerialization() throws Exception {\n    ClassOverridingEquals objA = new ClassOverridingEquals();\n    objA.ref = objA;\n\n    String json = gson.toJson(objA);\n    assertFalse(json.contains(\"ref\")); // self-reference is ignored\n  }",
        "begin_line": 59,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 60,col 61)",
            "(line 61,col 5)-(line 61,col 20)",
            "(line 63,col 5)-(line 63,col 36)",
            "(line 64,col 5)-(line 64,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CircularReferenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java",
        "signature": "com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization()",
        "snippet": "  public void testSelfReferenceArrayFieldSerialization() throws Exception {\n    ClassWithSelfReferenceArray objA = new ClassWithSelfReferenceArray();\n    objA.children = new ClassWithSelfReferenceArray[]{objA};\n\n    try {\n      gson.toJson(objA);\n      fail(\"Circular reference to self can not be serialized!\");\n    } catch (StackOverflowError expected) {\n    }\n  }",
        "begin_line": 67,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 68,col 5)-(line 68,col 73)",
            "(line 69,col 5)-(line 69,col 60)",
            "(line 71,col 5)-(line 75,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CircularReferenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java",
        "signature": "com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization()",
        "snippet": "  public void testSelfReferenceCustomHandlerSerialization() throws Exception {\n    ClassWithSelfReference obj = new ClassWithSelfReference();\n    obj.child = obj;\n    Gson gson = new GsonBuilder().registerTypeAdapter(ClassWithSelfReference.class, new JsonSerializer<ClassWithSelfReference>() {\n      public JsonElement serialize(ClassWithSelfReference src, Type typeOfSrc,\n          JsonSerializationContext context) {\n        JsonObject obj = new JsonObject();\n        obj.addProperty(\"property\", \"value\");\n        obj.add(\"child\", context.serialize(src.child));\n        return obj;\n      }\n    }).create();\n    try {\n      gson.toJson(obj);\n      fail(\"Circular reference to self can not be serialized!\");\n    } catch (StackOverflowError expected) {\n    }\n  }",
        "begin_line": 78,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 79,col 5)-(line 79,col 62)",
            "(line 80,col 5)-(line 80,col 20)",
            "(line 81,col 5)-(line 89,col 16)",
            "(line 90,col 5)-(line 94,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CircularReferenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java",
        "signature": "com.google.gson.functional.CircularReferenceTest.Anonymous-c796fb03-0fd3-418e-b22f-d69ad0ab86e6.serialize(com.google.gson.functional.CircularReferenceTest.ClassWithSelfReference, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "      public JsonElement serialize(ClassWithSelfReference src, Type typeOfSrc,\n          JsonSerializationContext context) {\n        JsonObject obj = new JsonObject();\n        obj.addProperty(\"property\", \"value\");\n        obj.add(\"child\", context.serialize(src.child));\n        return obj;\n      }",
        "begin_line": 82,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 42)",
            "(line 85,col 9)-(line 85,col 45)",
            "(line 86,col 9)-(line 86,col 55)",
            "(line 87,col 9)-(line 87,col 19)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CircularReferenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java",
        "signature": "com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization()",
        "snippet": "  public void testDirectedAcyclicGraphSerialization() throws Exception {\n    ContainsReferenceToSelfType a = new ContainsReferenceToSelfType();\n    ContainsReferenceToSelfType b = new ContainsReferenceToSelfType();\n    ContainsReferenceToSelfType c = new ContainsReferenceToSelfType();\n    a.children.add(b);\n    a.children.add(c);\n    b.children.add(c);\n    assertNotNull(gson.toJson(a));\n  }",
        "begin_line": 97,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 98,col 5)-(line 98,col 70)",
            "(line 99,col 5)-(line 99,col 70)",
            "(line 100,col 5)-(line 100,col 70)",
            "(line 101,col 5)-(line 101,col 22)",
            "(line 102,col 5)-(line 102,col 22)",
            "(line 103,col 5)-(line 103,col 22)",
            "(line 104,col 5)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CircularReferenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java",
        "signature": "com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization()",
        "snippet": "  public void testDirectedAcyclicGraphDeserialization() throws Exception {\n    String json = \"{\\\"children\\\":[{\\\"children\\\":[{\\\"children\\\":[]}]},{\\\"children\\\":[]}]}\";\n    ContainsReferenceToSelfType target = gson.fromJson(json, ContainsReferenceToSelfType.class);\n    assertNotNull(target);\n    assertEquals(2, target.children.size());\n  }",
        "begin_line": 107,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 108,col 5)-(line 108,col 90)",
            "(line 109,col 5)-(line 109,col 96)",
            "(line 110,col 5)-(line 110,col 26)",
            "(line 111,col 5)-(line 111,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ThrowableFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java",
        "signature": "com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause()",
        "snippet": "  public void testExceptionWithoutCause() {\n    RuntimeException e = new RuntimeException(\"hello\");\n    String json = gson.toJson(e);\n    assertTrue(json.contains(\"hello\"));\n\n    e = gson.fromJson(\"{'detailMessage':'hello'}\", RuntimeException.class);\n    assertEquals(\"hello\", e.getMessage());\n  }",
        "begin_line": 15,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 16,col 5)-(line 16,col 55)",
            "(line 17,col 5)-(line 17,col 33)",
            "(line 18,col 5)-(line 18,col 39)",
            "(line 20,col 5)-(line 20,col 75)",
            "(line 21,col 5)-(line 21,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ThrowableFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java",
        "signature": "com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause()",
        "snippet": "  public void testExceptionWithCause() {\n    Exception e = new Exception(\"top level\", new IOException(\"io error\"));\n    String json = gson.toJson(e);\n    assertTrue(json.contains(\"{\\\"detailMessage\\\":\\\"top level\\\",\\\"cause\\\":{\\\"detailMessage\\\":\\\"io error\\\"\"));\n\n    e = gson.fromJson(\"{'detailMessage':'top level','cause':{'detailMessage':'io error'}}\", Exception.class);\n    assertEquals(\"top level\", e.getMessage());\n    assertTrue(e.getCause() instanceof Throwable); // cause is not parameterized so type info is lost\n    assertEquals(\"io error\", e.getCause().getMessage());\n  }",
        "begin_line": 24,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 25,col 5)-(line 25,col 74)",
            "(line 26,col 5)-(line 26,col 33)",
            "(line 27,col 5)-(line 27,col 108)",
            "(line 29,col 5)-(line 29,col 109)",
            "(line 30,col 5)-(line 30,col 46)",
            "(line 31,col 5)-(line 31,col 50)",
            "(line 32,col 5)-(line 32,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ThrowableFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java",
        "signature": "com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields()",
        "snippet": "  public void testSerializedNameOnExceptionFields() {\n    MyException e = new MyException();\n    String json = gson.toJson(e);\n    assertTrue(json.contains(\"{\\\"my_custom_name\\\":\\\"myCustomMessageValue\\\"\"));\n  }",
        "begin_line": 35,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 36,col 5)-(line 36,col 38)",
            "(line 37,col 5)-(line 37,col 33)",
            "(line 38,col 5)-(line 38,col 78)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ThrowableFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java",
        "signature": "com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause()",
        "snippet": "  public void testErrorWithoutCause() {\n    OutOfMemoryError e = new OutOfMemoryError(\"hello\");\n    String json = gson.toJson(e);\n    assertTrue(json.contains(\"hello\"));\n\n    e = gson.fromJson(\"{'detailMessage':'hello'}\", OutOfMemoryError.class);\n    assertEquals(\"hello\", e.getMessage());\n  }",
        "begin_line": 41,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 42,col 55)",
            "(line 43,col 5)-(line 43,col 33)",
            "(line 44,col 5)-(line 44,col 39)",
            "(line 46,col 5)-(line 46,col 75)",
            "(line 47,col 5)-(line 47,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ThrowableFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java",
        "signature": "com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause()",
        "snippet": "  public void testErrornWithCause() {\n    Error e = new Error(\"top level\", new IOException(\"io error\"));\n    String json = gson.toJson(e);\n    assertTrue(json.contains(\"top level\"));\n    assertTrue(json.contains(\"io error\"));\n\n    e = gson.fromJson(\"{'detailMessage':'top level','cause':{'detailMessage':'io error'}}\", Error.class);\n    assertEquals(\"top level\", e.getMessage());\n    assertTrue(e.getCause() instanceof Throwable); // cause is not parameterized so type info is lost\n    assertEquals(\"io error\", e.getCause().getMessage());\n  }",
        "begin_line": 50,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 66)",
            "(line 52,col 5)-(line 52,col 33)",
            "(line 53,col 5)-(line 53,col 43)",
            "(line 54,col 5)-(line 54,col 42)",
            "(line 56,col 5)-(line 56,col 105)",
            "(line 57,col 5)-(line 57,col 46)",
            "(line 58,col 5)-(line 58,col 50)",
            "(line 59,col 5)-(line 59,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonParserTest.java",
        "signature": "com.google.gson.functional.JsonParserTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 18)",
            "(line 50,col 5)-(line 50,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonParserTest.java",
        "signature": "com.google.gson.functional.JsonParserTest.testParseInvalidJson()",
        "snippet": "  public void testParseInvalidJson() {\n    try {\n      gson.fromJson(\"[[]\", Object[].class);\n      fail();\n    } catch (JsonSyntaxException expected) { }\n  }",
        "begin_line": 53,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 57,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonParserTest.java",
        "signature": "com.google.gson.functional.JsonParserTest.testDeserializingCustomTree()",
        "snippet": "  public void testDeserializingCustomTree() {\n    JsonObject obj = new JsonObject();\n    obj.addProperty(\"stringValue\", \"foo\");\n    obj.addProperty(\"intValue\", 11);\n    BagOfPrimitives target = gson.fromJson(obj, BagOfPrimitives.class);\n    assertEquals(11, target.intValue);\n    assertEquals(\"foo\", target.stringValue);\n  }",
        "begin_line": 60,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 61,col 5)-(line 61,col 38)",
            "(line 62,col 5)-(line 62,col 42)",
            "(line 63,col 5)-(line 63,col 36)",
            "(line 64,col 5)-(line 64,col 71)",
            "(line 65,col 5)-(line 65,col 38)",
            "(line 66,col 5)-(line 66,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonParserTest.java",
        "signature": "com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree()",
        "snippet": "  public void testBadTypeForDeserializingCustomTree() {\n    JsonObject obj = new JsonObject();\n    obj.addProperty(\"stringValue\", \"foo\");\n    obj.addProperty(\"intValue\", 11);\n    JsonArray array = new JsonArray();\n    array.add(obj);\n    try {\n      gson.fromJson(array, BagOfPrimitives.class);\n      fail(\"BagOfPrimitives is not an array\");\n    } catch (JsonParseException expected) { }\n  }",
        "begin_line": 69,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 70,col 5)-(line 70,col 38)",
            "(line 71,col 5)-(line 71,col 42)",
            "(line 72,col 5)-(line 72,col 36)",
            "(line 73,col 5)-(line 73,col 38)",
            "(line 74,col 5)-(line 74,col 19)",
            "(line 75,col 5)-(line 78,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonParserTest.java",
        "signature": "com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree()",
        "snippet": "  public void testBadFieldTypeForCustomDeserializerCustomTree() {\n    JsonArray array = new JsonArray();\n    array.add(new JsonPrimitive(\"blah\"));\n    JsonObject obj = new JsonObject();\n    obj.addProperty(\"stringValue\", \"foo\");\n    obj.addProperty(\"intValue\", 11);\n    obj.add(\"longValue\", array);\n\n    try {\n      gson.fromJson(obj, BagOfPrimitives.class);\n      fail(\"BagOfPrimitives is not an array\");\n    } catch (JsonParseException expected) { }\n  }",
        "begin_line": 81,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 82,col 38)",
            "(line 83,col 5)-(line 83,col 41)",
            "(line 84,col 5)-(line 84,col 38)",
            "(line 85,col 5)-(line 85,col 42)",
            "(line 86,col 5)-(line 86,col 36)",
            "(line 87,col 5)-(line 87,col 32)",
            "(line 89,col 5)-(line 92,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonParserTest.java",
        "signature": "com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree()",
        "snippet": "  public void testBadFieldTypeForDeserializingCustomTree() {\n    JsonArray array = new JsonArray();\n    array.add(new JsonPrimitive(\"blah\"));\n    JsonObject primitive1 = new JsonObject();\n    primitive1.addProperty(\"string\", \"foo\");\n    primitive1.addProperty(\"intValue\", 11);\n\n    JsonObject obj = new JsonObject();\n    obj.add(\"primitive1\", primitive1);\n    obj.add(\"primitive2\", array);\n\n    try {\n      gson.fromJson(obj, Nested.class);\n      fail(\"Nested has field BagOfPrimitives which is not an array\");\n    } catch (JsonParseException expected) { }\n  }",
        "begin_line": 95,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 96,col 5)-(line 96,col 38)",
            "(line 97,col 5)-(line 97,col 41)",
            "(line 98,col 5)-(line 98,col 45)",
            "(line 99,col 5)-(line 99,col 44)",
            "(line 100,col 5)-(line 100,col 43)",
            "(line 102,col 5)-(line 102,col 38)",
            "(line 103,col 5)-(line 103,col 38)",
            "(line 104,col 5)-(line 104,col 33)",
            "(line 106,col 5)-(line 109,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonParserTest.java",
        "signature": "com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing()",
        "snippet": "  public void testChangingCustomTreeAndDeserializing() {\n    StringReader json =\n      new StringReader(\"{'stringValue':'no message','intValue':10,'longValue':20}\");\n    JsonObject obj = (JsonObject) new JsonParser().parse(json);\n    obj.remove(\"stringValue\");\n    obj.addProperty(\"stringValue\", \"fooBar\");\n    BagOfPrimitives target = gson.fromJson(obj, BagOfPrimitives.class);\n    assertEquals(10, target.intValue);\n    assertEquals(20, target.longValue);\n    assertEquals(\"fooBar\", target.stringValue);\n  }",
        "begin_line": 112,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 113,col 5)-(line 114,col 84)",
            "(line 115,col 5)-(line 115,col 63)",
            "(line 116,col 5)-(line 116,col 30)",
            "(line 117,col 5)-(line 117,col 45)",
            "(line 118,col 5)-(line 118,col 71)",
            "(line 119,col 5)-(line 119,col 38)",
            "(line 120,col 5)-(line 120,col 39)",
            "(line 121,col 5)-(line 121,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonParserTest.java",
        "signature": "com.google.gson.functional.JsonParserTest.testExtraCommasInArrays()",
        "snippet": "  public void testExtraCommasInArrays() {\n    Type type = new TypeToken<List<String>>() {}.getType();\n    assertEquals(list(\"a\", null, \"b\", null, null), gson.fromJson(\"[a,,b,,]\", type));\n    assertEquals(list(null, null), gson.fromJson(\"[,]\", type));\n    assertEquals(list(\"a\", null), gson.fromJson(\"[a,]\", type));\n  }",
        "begin_line": 124,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 125,col 5)-(line 125,col 59)",
            "(line 126,col 5)-(line 126,col 84)",
            "(line 127,col 5)-(line 127,col 63)",
            "(line 128,col 5)-(line 128,col 63)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonParserTest.java",
        "signature": "com.google.gson.functional.JsonParserTest.testExtraCommasInMaps()",
        "snippet": "  public void testExtraCommasInMaps() {\n    Type type = new TypeToken<Map<String, String>>() {}.getType();\n    try {\n      gson.fromJson(\"{a:b,}\", type);\n      fail();\n    } catch (JsonSyntaxException expected) {\n    }\n  }",
        "begin_line": 131,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 132,col 5)-(line 132,col 66)",
            "(line 133,col 5)-(line 137,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonParserTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonParserTest.java",
        "signature": "com.google.gson.functional.JsonParserTest.list(T...)",
        "snippet": "  private <T> List<T> list(T... elements) {\n    return Arrays.asList(elements);\n  }",
        "begin_line": 140,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 141,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 44,col 18)",
            "(line 45,col 5)-(line 45,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization()",
        "snippet": "  public void testPrimitiveIntegerAutoboxedSerialization() {\n    assertEquals(\"1\", gson.toJson(1));\n  }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization()",
        "snippet": "  public void testPrimitiveIntegerAutoboxedDeserialization() {\n    int expected = 1;\n    int actual = gson.fromJson(\"1\", int.class);\n    assertEquals(expected, actual);\n\n    actual = gson.fromJson(\"1\", Integer.class);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 52,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 53,col 5)-(line 53,col 21)",
            "(line 54,col 5)-(line 54,col 47)",
            "(line 55,col 5)-(line 55,col 35)",
            "(line 57,col 5)-(line 57,col 47)",
            "(line 58,col 5)-(line 58,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testByteSerialization()",
        "snippet": "  public void testByteSerialization() {\n    assertEquals(\"1\", gson.toJson(1, byte.class));\n    assertEquals(\"1\", gson.toJson(1, Byte.class));\n  }",
        "begin_line": 61,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 50)",
            "(line 63,col 5)-(line 63,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testShortSerialization()",
        "snippet": "  public void testShortSerialization() {\n    assertEquals(\"1\", gson.toJson(1, short.class));\n    assertEquals(\"1\", gson.toJson(1, Short.class));\n  }",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 51)",
            "(line 68,col 5)-(line 68,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testByteDeserialization()",
        "snippet": "  public void testByteDeserialization() {\n    Byte target = gson.fromJson(\"1\", Byte.class);\n    assertEquals(1, (byte)target);\n    byte primitive = gson.fromJson(\"1\", byte.class);\n    assertEquals(1, primitive);\n  }",
        "begin_line": 71,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 49)",
            "(line 73,col 5)-(line 73,col 34)",
            "(line 74,col 5)-(line 74,col 52)",
            "(line 75,col 5)-(line 75,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization()",
        "snippet": "  public void testPrimitiveIntegerAutoboxedInASingleElementArraySerialization() {\n    int target[] = {-9332};\n    assertEquals(\"[-9332]\", gson.toJson(target));\n    assertEquals(\"[-9332]\", gson.toJson(target, int[].class));\n    assertEquals(\"[-9332]\", gson.toJson(target, Integer[].class));\n  }",
        "begin_line": 78,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 79,col 5)-(line 79,col 27)",
            "(line 80,col 5)-(line 80,col 49)",
            "(line 81,col 5)-(line 81,col 62)",
            "(line 82,col 5)-(line 82,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization()",
        "snippet": "  public void testReallyLongValuesSerialization() {\n    long value = 333961828784581L;\n    assertEquals(\"333961828784581\", gson.toJson(value));\n  }",
        "begin_line": 85,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 86,col 5)-(line 86,col 34)",
            "(line 87,col 5)-(line 87,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization()",
        "snippet": "  public void testReallyLongValuesDeserialization() {\n    String json = \"333961828784581\";\n    long value = gson.fromJson(json, Long.class);\n    assertEquals(333961828784581L, value);\n  }",
        "begin_line": 90,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 91,col 5)-(line 91,col 36)",
            "(line 92,col 5)-(line 92,col 49)",
            "(line 93,col 5)-(line 93,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization()",
        "snippet": "  public void testPrimitiveLongAutoboxedSerialization() {\n    assertEquals(\"1\", gson.toJson(1L, long.class));\n    assertEquals(\"1\", gson.toJson(1L, Long.class));\n  }",
        "begin_line": 96,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 97,col 51)",
            "(line 98,col 5)-(line 98,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization()",
        "snippet": "  public void testPrimitiveLongAutoboxedDeserialization() {\n    long expected = 1L;\n    long actual = gson.fromJson(\"1\", long.class);\n    assertEquals(expected, actual);\n\n    actual = gson.fromJson(\"1\", Long.class);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 101,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 102,col 5)-(line 102,col 23)",
            "(line 103,col 5)-(line 103,col 49)",
            "(line 104,col 5)-(line 104,col 35)",
            "(line 106,col 5)-(line 106,col 44)",
            "(line 107,col 5)-(line 107,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization()",
        "snippet": "  public void testPrimitiveLongAutoboxedInASingleElementArraySerialization() {\n    long[] target = {-23L};\n    assertEquals(\"[-23]\", gson.toJson(target));\n    assertEquals(\"[-23]\", gson.toJson(target, long[].class));\n    assertEquals(\"[-23]\", gson.toJson(target, Long[].class));\n  }",
        "begin_line": 110,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 111,col 5)-(line 111,col 27)",
            "(line 112,col 5)-(line 112,col 47)",
            "(line 113,col 5)-(line 113,col 61)",
            "(line 114,col 5)-(line 114,col 61)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization()",
        "snippet": "  public void testPrimitiveBooleanAutoboxedSerialization() {\n    assertEquals(\"true\", gson.toJson(true));\n    assertEquals(\"false\", gson.toJson(false));\n  }",
        "begin_line": 117,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 118,col 44)",
            "(line 119,col 5)-(line 119,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBooleanDeserialization()",
        "snippet": "  public void testBooleanDeserialization() {\n    boolean value = gson.fromJson(\"false\", boolean.class);\n    assertEquals(false, value);\n    value = gson.fromJson(\"true\", boolean.class);\n    assertEquals(true, value);\n  }",
        "begin_line": 122,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 123,col 5)-(line 123,col 58)",
            "(line 124,col 5)-(line 124,col 31)",
            "(line 125,col 5)-(line 125,col 49)",
            "(line 126,col 5)-(line 126,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization()",
        "snippet": "  public void testPrimitiveBooleanAutoboxedInASingleElementArraySerialization() {\n    boolean target[] = {false};\n    assertEquals(\"[false]\", gson.toJson(target));\n    assertEquals(\"[false]\", gson.toJson(target, boolean[].class));\n    assertEquals(\"[false]\", gson.toJson(target, Boolean[].class));\n  }",
        "begin_line": 129,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 130,col 5)-(line 130,col 31)",
            "(line 131,col 5)-(line 131,col 49)",
            "(line 132,col 5)-(line 132,col 66)",
            "(line 133,col 5)-(line 133,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testNumberSerialization()",
        "snippet": "  public void testNumberSerialization() {\n    Number expected = 1L;\n    String json = gson.toJson(expected);\n    assertEquals(expected.toString(), json);\n\n    json = gson.toJson(expected, Number.class);\n    assertEquals(expected.toString(), json);\n  }",
        "begin_line": 136,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 137,col 25)",
            "(line 138,col 5)-(line 138,col 40)",
            "(line 139,col 5)-(line 139,col 44)",
            "(line 141,col 5)-(line 141,col 47)",
            "(line 142,col 5)-(line 142,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testNumberDeserialization()",
        "snippet": "  public void testNumberDeserialization() {\n    String json = \"1\";\n    Number expected = new Integer(json);\n    Number actual = gson.fromJson(json, Number.class);\n    assertEquals(expected.intValue(), actual.intValue());\n\n    json = String.valueOf(Long.MAX_VALUE);\n    expected = new Long(json);\n    actual = gson.fromJson(json, Number.class);\n    assertEquals(expected.longValue(), actual.longValue());\n\n    json = \"1.0\";\n    actual = gson.fromJson(json, Number.class);\n    assertEquals(1L, actual.longValue());\n  }",
        "begin_line": 145,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 22)",
            "(line 147,col 5)-(line 147,col 40)",
            "(line 148,col 5)-(line 148,col 54)",
            "(line 149,col 5)-(line 149,col 57)",
            "(line 151,col 5)-(line 151,col 42)",
            "(line 152,col 5)-(line 152,col 30)",
            "(line 153,col 5)-(line 153,col 47)",
            "(line 154,col 5)-(line 154,col 59)",
            "(line 156,col 5)-(line 156,col 17)",
            "(line 157,col 5)-(line 157,col 47)",
            "(line 158,col 5)-(line 158,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization()",
        "snippet": "  public void testPrimitiveDoubleAutoboxedSerialization() {\n    assertEquals(\"-122.08234335\", gson.toJson(-122.08234335));\n    assertEquals(\"122.08112002\", gson.toJson(new Double(122.08112002)));\n  }",
        "begin_line": 161,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 62)",
            "(line 163,col 5)-(line 163,col 72)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization()",
        "snippet": "  public void testPrimitiveDoubleAutoboxedDeserialization() {\n    double actual = gson.fromJson(\"-122.08858585\", double.class);\n    assertEquals(-122.08858585, actual);\n\n    actual = gson.fromJson(\"122.023900008000\", Double.class);\n    assertEquals(122.023900008, actual);\n  }",
        "begin_line": 166,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 167,col 5)-(line 167,col 65)",
            "(line 168,col 5)-(line 168,col 40)",
            "(line 170,col 5)-(line 170,col 61)",
            "(line 171,col 5)-(line 171,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization()",
        "snippet": "  public void testPrimitiveDoubleAutoboxedInASingleElementArraySerialization() {\n    double[] target = {-122.08D};\n    assertEquals(\"[-122.08]\", gson.toJson(target));\n    assertEquals(\"[-122.08]\", gson.toJson(target, double[].class));\n    assertEquals(\"[-122.08]\", gson.toJson(target, Double[].class));\n  }",
        "begin_line": 174,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 175,col 5)-(line 175,col 33)",
            "(line 176,col 5)-(line 176,col 51)",
            "(line 177,col 5)-(line 177,col 67)",
            "(line 178,col 5)-(line 178,col 67)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization()",
        "snippet": "  public void testDoubleAsStringRepresentationDeserialization() {\n    String doubleValue = \"1.0043E+5\";\n    Double expected = Double.valueOf(doubleValue);\n    Double actual = gson.fromJson(doubleValue, Double.class);\n    assertEquals(expected, actual);\n\n    double actual1 = gson.fromJson(doubleValue, double.class);\n    assertEquals(expected.doubleValue(), actual1);\n  }",
        "begin_line": 181,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 182,col 5)-(line 182,col 37)",
            "(line 183,col 5)-(line 183,col 50)",
            "(line 184,col 5)-(line 184,col 61)",
            "(line 185,col 5)-(line 185,col 35)",
            "(line 187,col 5)-(line 187,col 62)",
            "(line 188,col 5)-(line 188,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization()",
        "snippet": "  public void testDoubleNoFractAsStringRepresentationDeserialization() {\n    String doubleValue = \"1E+5\";\n    Double expected = Double.valueOf(doubleValue);\n    Double actual = gson.fromJson(doubleValue, Double.class);\n    assertEquals(expected, actual);\n\n    double actual1 = gson.fromJson(doubleValue, double.class);\n    assertEquals(expected.doubleValue(), actual1);\n  }",
        "begin_line": 191,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 192,col 5)-(line 192,col 32)",
            "(line 193,col 5)-(line 193,col 50)",
            "(line 194,col 5)-(line 194,col 61)",
            "(line 195,col 5)-(line 195,col 35)",
            "(line 197,col 5)-(line 197,col 62)",
            "(line 198,col 5)-(line 198,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDoubleArrayDeserialization()",
        "snippet": "  public void testDoubleArrayDeserialization() {\n      String json = \"[0.0, 0.004761904761904762, 3.4013606962703525E-4, 7.936508173034305E-4,\"\n              + \"0.0011904761904761906, 0.0]\";\n      double[] values = gson.fromJson(json, double[].class);\n      assertEquals(6, values.length);\n      assertEquals(0.0, values[0]);\n      assertEquals(0.004761904761904762, values[1]);\n      assertEquals(3.4013606962703525E-4, values[2]);\n      assertEquals(7.936508173034305E-4, values[3]);\n      assertEquals(0.0011904761904761906, values[4]);\n      assertEquals(0.0, values[5]);\n  }",
        "begin_line": 201,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 202,col 7)-(line 203,col 46)",
            "(line 204,col 7)-(line 204,col 60)",
            "(line 205,col 7)-(line 205,col 37)",
            "(line 206,col 7)-(line 206,col 35)",
            "(line 207,col 7)-(line 207,col 52)",
            "(line 208,col 7)-(line 208,col 53)",
            "(line 209,col 7)-(line 209,col 52)",
            "(line 210,col 7)-(line 210,col 53)",
            "(line 211,col 7)-(line 211,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization()",
        "snippet": "  public void testLargeDoubleDeserialization() {\n    String doubleValue = \"1.234567899E8\";\n    Double expected = Double.valueOf(doubleValue);\n    Double actual = gson.fromJson(doubleValue, Double.class);\n    assertEquals(expected, actual);\n\n    double actual1 = gson.fromJson(doubleValue, double.class);\n    assertEquals(expected.doubleValue(), actual1);\n  }",
        "begin_line": 214,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 215,col 5)-(line 215,col 41)",
            "(line 216,col 5)-(line 216,col 50)",
            "(line 217,col 5)-(line 217,col 61)",
            "(line 218,col 5)-(line 218,col 35)",
            "(line 220,col 5)-(line 220,col 62)",
            "(line 221,col 5)-(line 221,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization()",
        "snippet": "  public void testBigDecimalSerialization() {\n    BigDecimal target = new BigDecimal(\"-122.0e-21\");\n    String json = gson.toJson(target);\n    assertEquals(target, new BigDecimal(json));\n  }",
        "begin_line": 224,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 225,col 53)",
            "(line 226,col 5)-(line 226,col 38)",
            "(line 227,col 5)-(line 227,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization()",
        "snippet": "  public void testBigDecimalDeserialization() {\n    BigDecimal target = new BigDecimal(\"-122.0e-21\");\n    String json = \"-122.0e-21\";\n    assertEquals(target, gson.fromJson(json, BigDecimal.class));\n  }",
        "begin_line": 230,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 231,col 5)-(line 231,col 53)",
            "(line 232,col 5)-(line 232,col 31)",
            "(line 233,col 5)-(line 233,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization()",
        "snippet": "  public void testBigDecimalInASingleElementArraySerialization() {\n    BigDecimal[] target = {new BigDecimal(\"-122.08e-21\")};\n    String json = gson.toJson(target);\n    String actual = extractElementFromArray(json);\n    assertEquals(target[0], new BigDecimal(actual));\n\n    json = gson.toJson(target, BigDecimal[].class);\n    actual = extractElementFromArray(json);\n    assertEquals(target[0], new BigDecimal(actual));\n  }",
        "begin_line": 236,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 237,col 5)-(line 237,col 58)",
            "(line 238,col 5)-(line 238,col 38)",
            "(line 239,col 5)-(line 239,col 50)",
            "(line 240,col 5)-(line 240,col 52)",
            "(line 242,col 5)-(line 242,col 51)",
            "(line 243,col 5)-(line 243,col 43)",
            "(line 244,col 5)-(line 244,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization()",
        "snippet": "  public void testSmallValueForBigDecimalSerialization() {\n    BigDecimal target = new BigDecimal(\"1.55\");\n    String actual = gson.toJson(target);\n    assertEquals(target.toString(), actual);\n  }",
        "begin_line": 247,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 248,col 47)",
            "(line 249,col 5)-(line 249,col 40)",
            "(line 250,col 5)-(line 250,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization()",
        "snippet": "  public void testSmallValueForBigDecimalDeserialization() {\n    BigDecimal expected = new BigDecimal(\"1.55\");\n    BigDecimal actual = gson.fromJson(\"1.55\", BigDecimal.class);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 253,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 254,col 49)",
            "(line 255,col 5)-(line 255,col 64)",
            "(line 256,col 5)-(line 256,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization()",
        "snippet": "  public void testBigDecimalPreservePrecisionSerialization() {\n    String expectedValue = \"1.000\";\n    BigDecimal obj = new BigDecimal(expectedValue);\n    String actualValue = gson.toJson(obj);\n\n    assertEquals(expectedValue, actualValue);\n  }",
        "begin_line": 259,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 260,col 5)-(line 260,col 35)",
            "(line 261,col 5)-(line 261,col 51)",
            "(line 262,col 5)-(line 262,col 42)",
            "(line 264,col 5)-(line 264,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization()",
        "snippet": "  public void testBigDecimalPreservePrecisionDeserialization() {\n    String json = \"1.000\";\n    BigDecimal expected = new BigDecimal(json);\n    BigDecimal actual = gson.fromJson(json, BigDecimal.class);\n\n    assertEquals(expected, actual);\n  }",
        "begin_line": 267,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 268,col 5)-(line 268,col 26)",
            "(line 269,col 5)-(line 269,col 47)",
            "(line 270,col 5)-(line 270,col 62)",
            "(line 272,col 5)-(line 272,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization()",
        "snippet": "  public void testBigDecimalAsStringRepresentationDeserialization() {\n    String doubleValue = \"0.05E+5\";\n    BigDecimal expected = new BigDecimal(doubleValue);\n    BigDecimal actual = gson.fromJson(doubleValue, BigDecimal.class);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 275,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 276,col 5)-(line 276,col 35)",
            "(line 277,col 5)-(line 277,col 54)",
            "(line 278,col 5)-(line 278,col 69)",
            "(line 279,col 5)-(line 279,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization()",
        "snippet": "  public void testBigDecimalNoFractAsStringRepresentationDeserialization() {\n    String doubleValue = \"5E+5\";\n    BigDecimal expected = new BigDecimal(doubleValue);\n    BigDecimal actual = gson.fromJson(doubleValue, BigDecimal.class);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 282,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 283,col 5)-(line 283,col 32)",
            "(line 284,col 5)-(line 284,col 54)",
            "(line 285,col 5)-(line 285,col 69)",
            "(line 286,col 5)-(line 286,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization()",
        "snippet": "  public void testBigIntegerSerialization() {\n    BigInteger target = new BigInteger(\"12121211243123245845384534687435634558945453489543985435\");\n    assertEquals(target.toString(), gson.toJson(target));\n  }",
        "begin_line": 289,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 290,col 5)-(line 290,col 99)",
            "(line 291,col 5)-(line 291,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization()",
        "snippet": "  public void testBigIntegerDeserialization() {\n    String json = \"12121211243123245845384534687435634558945453489543985435\";\n    BigInteger target = new BigInteger(json);\n    assertEquals(target, gson.fromJson(json, BigInteger.class));\n  }",
        "begin_line": 294,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 295,col 5)-(line 295,col 77)",
            "(line 296,col 5)-(line 296,col 45)",
            "(line 297,col 5)-(line 297,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization()",
        "snippet": "  public void testBigIntegerInASingleElementArraySerialization() {\n    BigInteger[] target = {new BigInteger(\"1212121243434324323254365345367456456456465464564564\")};\n    String json = gson.toJson(target);\n    String actual = extractElementFromArray(json);\n    assertEquals(target[0], new BigInteger(actual));\n\n    json = gson.toJson(target, BigInteger[].class);\n    actual = extractElementFromArray(json);\n    assertEquals(target[0], new BigInteger(actual));\n  }",
        "begin_line": 300,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 301,col 5)-(line 301,col 99)",
            "(line 302,col 5)-(line 302,col 38)",
            "(line 303,col 5)-(line 303,col 50)",
            "(line 304,col 5)-(line 304,col 52)",
            "(line 306,col 5)-(line 306,col 51)",
            "(line 307,col 5)-(line 307,col 43)",
            "(line 308,col 5)-(line 308,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization()",
        "snippet": "  public void testSmallValueForBigIntegerSerialization() {\n    BigInteger target = new BigInteger(\"15\");\n    String actual = gson.toJson(target);\n    assertEquals(target.toString(), actual);\n  }",
        "begin_line": 311,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 312,col 5)-(line 312,col 45)",
            "(line 313,col 5)-(line 313,col 40)",
            "(line 314,col 5)-(line 314,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization()",
        "snippet": "  public void testSmallValueForBigIntegerDeserialization() {\n    BigInteger expected = new BigInteger(\"15\");\n    BigInteger actual = gson.fromJson(\"15\", BigInteger.class);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 317,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 318,col 5)-(line 318,col 47)",
            "(line 319,col 5)-(line 319,col 62)",
            "(line 320,col 5)-(line 320,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization()",
        "snippet": "  public void testBadValueForBigIntegerDeserialization() {\n    try {\n      gson.fromJson(\"15.099\", BigInteger.class);\n      fail(\"BigInteger can not be decimal values.\");\n    } catch (JsonSyntaxException expected) { }\n  }",
        "begin_line": 323,
        "end_line": 328,
        "comment": "",
        "child_ranges": [
            "(line 324,col 5)-(line 327,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization()",
        "snippet": "  public void testMoreSpecificSerialization() {\n    Gson gson = new Gson();\n    String expected = \"This is a string\";\n    String expectedJson = gson.toJson(expected);\n\n    Serializable serializableString = expected;\n    String actualJson = gson.toJson(serializableString, Serializable.class);\n    assertFalse(expectedJson.equals(actualJson));\n  }",
        "begin_line": 330,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 331,col 5)-(line 331,col 27)",
            "(line 332,col 5)-(line 332,col 41)",
            "(line 333,col 5)-(line 333,col 48)",
            "(line 335,col 5)-(line 335,col 47)",
            "(line 336,col 5)-(line 336,col 76)",
            "(line 337,col 5)-(line 337,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.extractElementFromArray(java.lang.String)",
        "snippet": "  private String extractElementFromArray(String json) {\n    return json.substring(json.indexOf('[') + 1, json.indexOf(']'));\n  }",
        "begin_line": 340,
        "end_line": 342,
        "comment": "",
        "child_ranges": [
            "(line 341,col 5)-(line 341,col 68)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault()",
        "snippet": "  public void testDoubleNaNSerializationNotSupportedByDefault() {\n    try {\n      double nan = Double.NaN;\n      gson.toJson(nan);\n      fail(\"Gson should not accept NaN for serialization\");\n    } catch (IllegalArgumentException expected) {\n    }\n    try {\n      gson.toJson(Double.NaN);\n      fail(\"Gson should not accept NaN for serialization\");\n    } catch (IllegalArgumentException expected) {\n    }\n  }",
        "begin_line": 344,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 345,col 5)-(line 350,col 5)",
            "(line 351,col 5)-(line 355,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization()",
        "snippet": "  public void testDoubleNaNSerialization() {\n    Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\n    double nan = Double.NaN;\n    assertEquals(\"NaN\", gson.toJson(nan));\n    assertEquals(\"NaN\", gson.toJson(Double.NaN));\n  }",
        "begin_line": 358,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 359,col 5)-(line 359,col 81)",
            "(line 360,col 5)-(line 360,col 28)",
            "(line 361,col 5)-(line 361,col 42)",
            "(line 362,col 5)-(line 362,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization()",
        "snippet": "  public void testDoubleNaNDeserialization() {\n    assertTrue(Double.isNaN(gson.fromJson(\"NaN\", Double.class)));\n    assertTrue(Double.isNaN(gson.fromJson(\"NaN\", double.class)));\n  }",
        "begin_line": 365,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 366,col 5)-(line 366,col 65)",
            "(line 367,col 5)-(line 367,col 65)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault()",
        "snippet": "  public void testFloatNaNSerializationNotSupportedByDefault() {\n    try {\n      float nan = Float.NaN;\n      gson.toJson(nan);\n      fail(\"Gson should not accept NaN for serialization\");\n    } catch (IllegalArgumentException expected) {\n    }\n    try {\n      gson.toJson(Float.NaN);\n      fail(\"Gson should not accept NaN for serialization\");\n    } catch (IllegalArgumentException expected) {\n    }\n  }",
        "begin_line": 370,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 371,col 5)-(line 376,col 5)",
            "(line 377,col 5)-(line 381,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization()",
        "snippet": "  public void testFloatNaNSerialization() {\n    Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\n    float nan = Float.NaN;\n    assertEquals(\"NaN\", gson.toJson(nan));\n    assertEquals(\"NaN\", gson.toJson(Float.NaN));\n  }",
        "begin_line": 384,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 385,col 5)-(line 385,col 81)",
            "(line 386,col 5)-(line 386,col 26)",
            "(line 387,col 5)-(line 387,col 42)",
            "(line 388,col 5)-(line 388,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization()",
        "snippet": "  public void testFloatNaNDeserialization() {\n    assertTrue(Float.isNaN(gson.fromJson(\"NaN\", Float.class)));\n    assertTrue(Float.isNaN(gson.fromJson(\"NaN\", float.class)));\n  }",
        "begin_line": 391,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 392,col 5)-(line 392,col 63)",
            "(line 393,col 5)-(line 393,col 63)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported()",
        "snippet": "  public void testBigDecimalNaNDeserializationNotSupported() {\n    try {\n      gson.fromJson(\"NaN\", BigDecimal.class);\n      fail(\"Gson should not accept NaN for deserialization by default.\");\n    } catch (JsonSyntaxException expected) {\n    }\n  }",
        "begin_line": 396,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 397,col 5)-(line 401,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault()",
        "snippet": "  public void testDoubleInfinitySerializationNotSupportedByDefault() {\n    try {\n      double infinity = Double.POSITIVE_INFINITY;\n      gson.toJson(infinity);\n      fail(\"Gson should not accept positive infinity for serialization by default.\");\n    } catch (IllegalArgumentException expected) {\n    }\n    try {\n      gson.toJson(Double.POSITIVE_INFINITY);\n      fail(\"Gson should not accept positive infinity for serialization by default.\");\n    } catch (IllegalArgumentException expected) {\n    }\n  }",
        "begin_line": 404,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 405,col 5)-(line 410,col 5)",
            "(line 411,col 5)-(line 415,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization()",
        "snippet": "  public void testDoubleInfinitySerialization() {\n    Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\n    double infinity = Double.POSITIVE_INFINITY;\n    assertEquals(\"Infinity\", gson.toJson(infinity));\n    assertEquals(\"Infinity\", gson.toJson(Double.POSITIVE_INFINITY));\n  }",
        "begin_line": 418,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 81)",
            "(line 420,col 5)-(line 420,col 47)",
            "(line 421,col 5)-(line 421,col 52)",
            "(line 422,col 5)-(line 422,col 68)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization()",
        "snippet": "  public void testDoubleInfinityDeserialization() {\n    assertTrue(Double.isInfinite(gson.fromJson(\"Infinity\", Double.class)));\n    assertTrue(Double.isInfinite(gson.fromJson(\"Infinity\", double.class)));\n  }",
        "begin_line": 425,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 426,col 5)-(line 426,col 75)",
            "(line 427,col 5)-(line 427,col 75)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault()",
        "snippet": "  public void testFloatInfinitySerializationNotSupportedByDefault() {\n    try {\n      float infinity = Float.POSITIVE_INFINITY;\n      gson.toJson(infinity);\n      fail(\"Gson should not accept positive infinity for serialization by default\");\n    } catch (IllegalArgumentException expected) {\n    }\n    try {\n      gson.toJson(Float.POSITIVE_INFINITY);\n      fail(\"Gson should not accept positive infinity for serialization by default\");\n    } catch (IllegalArgumentException expected) {\n    }\n  }",
        "begin_line": 430,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 431,col 5)-(line 436,col 5)",
            "(line 437,col 5)-(line 441,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization()",
        "snippet": "  public void testFloatInfinitySerialization() {\n    Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\n    float infinity = Float.POSITIVE_INFINITY;\n    assertEquals(\"Infinity\", gson.toJson(infinity));\n    assertEquals(\"Infinity\", gson.toJson(Float.POSITIVE_INFINITY));\n  }",
        "begin_line": 444,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 445,col 5)-(line 445,col 81)",
            "(line 446,col 5)-(line 446,col 45)",
            "(line 447,col 5)-(line 447,col 52)",
            "(line 448,col 5)-(line 448,col 67)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization()",
        "snippet": "  public void testFloatInfinityDeserialization() {\n    assertTrue(Float.isInfinite(gson.fromJson(\"Infinity\", Float.class)));\n    assertTrue(Float.isInfinite(gson.fromJson(\"Infinity\", float.class)));\n  }",
        "begin_line": 451,
        "end_line": 454,
        "comment": "",
        "child_ranges": [
            "(line 452,col 5)-(line 452,col 73)",
            "(line 453,col 5)-(line 453,col 73)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported()",
        "snippet": "  public void testBigDecimalInfinityDeserializationNotSupported() {\n    try {\n      gson.fromJson(\"Infinity\", BigDecimal.class);\n      fail(\"Gson should not accept positive infinity for deserialization with BigDecimal\");\n    } catch (JsonSyntaxException expected) {\n    }\n  }",
        "begin_line": 456,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 457,col 5)-(line 461,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault()",
        "snippet": "  public void testNegativeInfinitySerializationNotSupportedByDefault() {\n    try {\n      double negativeInfinity = Double.NEGATIVE_INFINITY;\n      gson.toJson(negativeInfinity);\n      fail(\"Gson should not accept negative infinity for serialization by default\");\n    } catch (IllegalArgumentException expected) {\n    }\n    try {\n      gson.toJson(Double.NEGATIVE_INFINITY);\n      fail(\"Gson should not accept negative infinity for serialization by default\");\n    } catch (IllegalArgumentException expected) {\n    }\n  }",
        "begin_line": 464,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 465,col 5)-(line 470,col 5)",
            "(line 471,col 5)-(line 475,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization()",
        "snippet": "  public void testNegativeInfinitySerialization() {\n    Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\n    double negativeInfinity = Double.NEGATIVE_INFINITY;\n    assertEquals(\"-Infinity\", gson.toJson(negativeInfinity));\n    assertEquals(\"-Infinity\", gson.toJson(Double.NEGATIVE_INFINITY));\n  }",
        "begin_line": 478,
        "end_line": 483,
        "comment": "",
        "child_ranges": [
            "(line 479,col 5)-(line 479,col 81)",
            "(line 480,col 5)-(line 480,col 55)",
            "(line 481,col 5)-(line 481,col 61)",
            "(line 482,col 5)-(line 482,col 69)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization()",
        "snippet": "  public void testNegativeInfinityDeserialization() {\n    assertTrue(Double.isInfinite(gson.fromJson(\"-Infinity\", double.class)));\n    assertTrue(Double.isInfinite(gson.fromJson(\"-Infinity\", Double.class)));\n  }",
        "begin_line": 485,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 486,col 5)-(line 486,col 76)",
            "(line 487,col 5)-(line 487,col 76)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault()",
        "snippet": "  public void testNegativeInfinityFloatSerializationNotSupportedByDefault() {\n    try {\n      float negativeInfinity = Float.NEGATIVE_INFINITY;\n      gson.toJson(negativeInfinity);\n      fail(\"Gson should not accept negative infinity for serialization by default\");\n    } catch (IllegalArgumentException expected) {\n    }\n    try {\n      gson.toJson(Float.NEGATIVE_INFINITY);\n      fail(\"Gson should not accept negative infinity for serialization by default\");\n    } catch (IllegalArgumentException expected) {\n    }\n  }",
        "begin_line": 490,
        "end_line": 502,
        "comment": "",
        "child_ranges": [
            "(line 491,col 5)-(line 496,col 5)",
            "(line 497,col 5)-(line 501,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization()",
        "snippet": "  public void testNegativeInfinityFloatSerialization() {\n    Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\n    float negativeInfinity = Float.NEGATIVE_INFINITY;\n    assertEquals(\"-Infinity\", gson.toJson(negativeInfinity));\n    assertEquals(\"-Infinity\", gson.toJson(Float.NEGATIVE_INFINITY));\n  }",
        "begin_line": 504,
        "end_line": 509,
        "comment": "",
        "child_ranges": [
            "(line 505,col 5)-(line 505,col 81)",
            "(line 506,col 5)-(line 506,col 53)",
            "(line 507,col 5)-(line 507,col 61)",
            "(line 508,col 5)-(line 508,col 68)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization()",
        "snippet": "  public void testNegativeInfinityFloatDeserialization() {\n    assertTrue(Float.isInfinite(gson.fromJson(\"-Infinity\", float.class)));\n    assertTrue(Float.isInfinite(gson.fromJson(\"-Infinity\", Float.class)));\n  }",
        "begin_line": 511,
        "end_line": 514,
        "comment": "",
        "child_ranges": [
            "(line 512,col 5)-(line 512,col 74)",
            "(line 513,col 5)-(line 513,col 74)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported()",
        "snippet": "  public void testBigDecimalNegativeInfinityDeserializationNotSupported() {\n    try {\n      gson.fromJson(\"-Infinity\", BigDecimal.class);\n      fail(\"Gson should not accept positive infinity for deserialization\");\n    } catch (JsonSyntaxException expected) {\n    }\n  }",
        "begin_line": 516,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 517,col 5)-(line 521,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization()",
        "snippet": "  public void testLongAsStringSerialization() throws Exception {\n    gson = new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create();\n    String result = gson.toJson(15L);\n    assertEquals(\"\\\"15\\\"\", result);\n\n    // Test with an integer and ensure its still a number\n    result = gson.toJson(2);\n    assertEquals(\"2\", result);\n  }",
        "begin_line": 524,
        "end_line": 532,
        "comment": "",
        "child_ranges": [
            "(line 525,col 5)-(line 525,col 97)",
            "(line 526,col 5)-(line 526,col 37)",
            "(line 527,col 5)-(line 527,col 35)",
            "(line 530,col 5)-(line 530,col 28)",
            "(line 531,col 5)-(line 531,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization()",
        "snippet": "  public void testLongAsStringDeserialization() throws Exception {\n    long value = gson.fromJson(\"\\\"15\\\"\", long.class);\n    assertEquals(15, value);\n\n    gson = new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create();\n    value = gson.fromJson(\"\\\"25\\\"\", long.class);\n    assertEquals(25, value);\n  }",
        "begin_line": 534,
        "end_line": 541,
        "comment": "",
        "child_ranges": [
            "(line 535,col 5)-(line 535,col 53)",
            "(line 536,col 5)-(line 536,col 28)",
            "(line 538,col 5)-(line 538,col 97)",
            "(line 539,col 5)-(line 539,col 48)",
            "(line 540,col 5)-(line 540,col 28)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization()",
        "snippet": "  public void testQuotedStringSerializationAndDeserialization() throws Exception {\n    String value = \"String Blah Blah Blah...1, 2, 3\";\n    String serializedForm = gson.toJson(value);\n    assertEquals(\"\\\"\" + value + \"\\\"\", serializedForm);\n\n    String actual = gson.fromJson(serializedForm, String.class);\n    assertEquals(value, actual);\n  }",
        "begin_line": 543,
        "end_line": 550,
        "comment": "",
        "child_ranges": [
            "(line 544,col 5)-(line 544,col 53)",
            "(line 545,col 5)-(line 545,col 47)",
            "(line 546,col 5)-(line 546,col 54)",
            "(line 548,col 5)-(line 548,col 64)",
            "(line 549,col 5)-(line 549,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails()",
        "snippet": "  public void testUnquotedStringDeserializationFails() throws Exception {\n    assertEquals(\"UnquotedSingleWord\", gson.fromJson(\"UnquotedSingleWord\", String.class));\n\n    String value = \"String Blah Blah Blah...1, 2, 3\";\n    try {\n      gson.fromJson(value, String.class);\n      fail();\n    } catch (JsonSyntaxException expected) { }\n  }",
        "begin_line": 552,
        "end_line": 560,
        "comment": "",
        "child_ranges": [
            "(line 553,col 5)-(line 553,col 90)",
            "(line 555,col 5)-(line 555,col 53)",
            "(line 556,col 5)-(line 559,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization()",
        "snippet": "  public void testHtmlCharacterSerialization() throws Exception {\n    String target = \"<script>var a = 12;</script>\";\n    String result = gson.toJson(target);\n    assertFalse(result.equals('\"' + target + '\"'));\n\n    gson = new GsonBuilder().disableHtmlEscaping().create();\n    result = gson.toJson(target);\n    assertTrue(result.equals('\"' + target + '\"'));\n  }",
        "begin_line": 562,
        "end_line": 570,
        "comment": "",
        "child_ranges": [
            "(line 563,col 5)-(line 563,col 51)",
            "(line 564,col 5)-(line 564,col 40)",
            "(line 565,col 5)-(line 565,col 51)",
            "(line 567,col 5)-(line 567,col 60)",
            "(line 568,col 5)-(line 568,col 33)",
            "(line 569,col 5)-(line 569,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField()",
        "snippet": "  public void testDeserializePrimitiveWrapperAsObjectField() {\n    String json = \"{i:10}\";\n    ClassWithIntegerField target = gson.fromJson(json, ClassWithIntegerField.class);\n    assertEquals(10, target.i.intValue());\n  }",
        "begin_line": 572,
        "end_line": 576,
        "comment": "",
        "child_ranges": [
            "(line 573,col 5)-(line 573,col 27)",
            "(line 574,col 5)-(line 574,col 84)",
            "(line 575,col 5)-(line 575,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral()",
        "snippet": "  public void testPrimitiveClassLiteral() {\n    assertEquals(1, gson.fromJson(\"1\", int.class).intValue());\n    assertEquals(1, gson.fromJson(new StringReader(\"1\"), int.class).intValue());\n    assertEquals(1, gson.fromJson(new JsonPrimitive(1), int.class).intValue());\n  }",
        "begin_line": 582,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 583,col 5)-(line 583,col 62)",
            "(line 584,col 5)-(line 584,col 80)",
            "(line 585,col 5)-(line 585,col 79)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive()",
        "snippet": "  public void testDeserializeJsonObjectAsLongPrimitive() {\n    try {\n      gson.fromJson(\"{'abc':1}\", long.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 588,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 589,col 5)-(line 592,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper()",
        "snippet": "  public void testDeserializeJsonArrayAsLongWrapper() {\n    try {\n      gson.fromJson(\"[1,2,3]\", Long.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 595,
        "end_line": 600,
        "comment": "",
        "child_ranges": [
            "(line 596,col 5)-(line 599,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt()",
        "snippet": "  public void testDeserializeJsonArrayAsInt() {\n    try {\n      gson.fromJson(\"[1, 2, 3, 4]\", int.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 602,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 603,col 5)-(line 606,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger()",
        "snippet": "  public void testDeserializeJsonObjectAsInteger() {\n    try {\n      gson.fromJson(\"{}\", Integer.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 609,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 610,col 5)-(line 613,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive()",
        "snippet": "  public void testDeserializeJsonObjectAsShortPrimitive() {\n    try {\n      gson.fromJson(\"{'abc':1}\", short.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 616,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 617,col 5)-(line 620,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper()",
        "snippet": "  public void testDeserializeJsonArrayAsShortWrapper() {\n    try {\n      gson.fromJson(\"['a','b']\", Short.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 623,
        "end_line": 628,
        "comment": "",
        "child_ranges": [
            "(line 624,col 5)-(line 627,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive()",
        "snippet": "  public void testDeserializeJsonArrayAsDoublePrimitive() {\n    try {\n      gson.fromJson(\"[1,2]\", double.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 630,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 631,col 5)-(line 634,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper()",
        "snippet": "  public void testDeserializeJsonObjectAsDoubleWrapper() {\n    try {\n      gson.fromJson(\"{'abc':1}\", Double.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 637,
        "end_line": 642,
        "comment": "",
        "child_ranges": [
            "(line 638,col 5)-(line 641,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive()",
        "snippet": "  public void testDeserializeJsonObjectAsFloatPrimitive() {\n    try {\n      gson.fromJson(\"{'abc':1}\", float.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 644,
        "end_line": 649,
        "comment": "",
        "child_ranges": [
            "(line 645,col 5)-(line 648,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper()",
        "snippet": "  public void testDeserializeJsonArrayAsFloatWrapper() {\n    try {\n      gson.fromJson(\"[1,2,3]\", Float.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 651,
        "end_line": 656,
        "comment": "",
        "child_ranges": [
            "(line 652,col 5)-(line 655,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive()",
        "snippet": "  public void testDeserializeJsonObjectAsBytePrimitive() {\n    try {\n      gson.fromJson(\"{'abc':1}\", byte.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 658,
        "end_line": 663,
        "comment": "",
        "child_ranges": [
            "(line 659,col 5)-(line 662,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper()",
        "snippet": "  public void testDeserializeJsonArrayAsByteWrapper() {\n    try {\n      gson.fromJson(\"[1,2,3,4]\", Byte.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 665,
        "end_line": 670,
        "comment": "",
        "child_ranges": [
            "(line 666,col 5)-(line 669,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive()",
        "snippet": "  public void testDeserializeJsonObjectAsBooleanPrimitive() {\n    try {\n      gson.fromJson(\"{'abc':1}\", boolean.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 672,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 673,col 5)-(line 676,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper()",
        "snippet": "  public void testDeserializeJsonArrayAsBooleanWrapper() {\n    try {\n      gson.fromJson(\"[1,2,3,4]\", Boolean.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 679,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 680,col 5)-(line 683,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal()",
        "snippet": "  public void testDeserializeJsonArrayAsBigDecimal() {\n    try {\n      gson.fromJson(\"[1,2,3,4]\", BigDecimal.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 686,
        "end_line": 691,
        "comment": "",
        "child_ranges": [
            "(line 687,col 5)-(line 690,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal()",
        "snippet": "  public void testDeserializeJsonObjectAsBigDecimal() {\n    try {\n      gson.fromJson(\"{'a':1}\", BigDecimal.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 693,
        "end_line": 698,
        "comment": "",
        "child_ranges": [
            "(line 694,col 5)-(line 697,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger()",
        "snippet": "  public void testDeserializeJsonArrayAsBigInteger() {\n    try {\n      gson.fromJson(\"[1,2,3,4]\", BigInteger.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 700,
        "end_line": 705,
        "comment": "",
        "child_ranges": [
            "(line 701,col 5)-(line 704,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger()",
        "snippet": "  public void testDeserializeJsonObjectAsBigInteger() {\n    try {\n      gson.fromJson(\"{'c':2}\", BigInteger.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 707,
        "end_line": 712,
        "comment": "",
        "child_ranges": [
            "(line 708,col 5)-(line 711,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber()",
        "snippet": "  public void testDeserializeJsonArrayAsNumber() {\n    try {\n      gson.fromJson(\"[1,2,3,4]\", Number.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 714,
        "end_line": 719,
        "comment": "",
        "child_ranges": [
            "(line 715,col 5)-(line 718,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber()",
        "snippet": "  public void testDeserializeJsonObjectAsNumber() {\n    try {\n      gson.fromJson(\"{'c':2}\", Number.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n  }",
        "begin_line": 721,
        "end_line": 726,
        "comment": "",
        "child_ranges": [
            "(line 722,col 5)-(line 725,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds()",
        "snippet": "  public void testDeserializingDecimalPointValueZeroSucceeds() {\n    assertEquals(1, (int) gson.fromJson(\"1.0\", Integer.class));\n  }",
        "begin_line": 728,
        "end_line": 730,
        "comment": "",
        "child_ranges": [
            "(line 729,col 5)-(line 729,col 63)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails()",
        "snippet": "  public void testDeserializingNonZeroDecimalPointValuesAsIntegerFails() {\n    try {\n      gson.fromJson(\"1.02\", Byte.class);\n      fail();\n    } catch (JsonSyntaxException expected) {\n    }\n    try {\n      gson.fromJson(\"1.02\", Short.class);\n      fail();\n    } catch (JsonSyntaxException expected) {\n    }\n    try {\n      gson.fromJson(\"1.02\", Integer.class);\n      fail();\n    } catch (JsonSyntaxException expected) {\n    }\n    try {\n      gson.fromJson(\"1.02\", Long.class);\n      fail();\n    } catch (JsonSyntaxException expected) {\n    }\n  }",
        "begin_line": 732,
        "end_line": 753,
        "comment": "",
        "child_ranges": [
            "(line 733,col 5)-(line 737,col 5)",
            "(line 738,col 5)-(line 742,col 5)",
            "(line 743,col 5)-(line 747,col 5)",
            "(line 748,col 5)-(line 752,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails()",
        "snippet": "  public void testDeserializingBigDecimalAsIntegerFails() {\n    try {\n      gson.fromJson(\"-122.08e-213\", Integer.class);\n      fail();\n    } catch (JsonSyntaxException expected) {\n    }\n  }",
        "begin_line": 755,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 756,col 5)-(line 760,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger()",
        "snippet": "  public void testDeserializingBigIntegerAsInteger() {\n    try {\n      gson.fromJson(\"12121211243123245845384534687435634558945453489543985435\", Integer.class);\n      fail();\n    } catch (JsonSyntaxException expected) {\n    }\n  }",
        "begin_line": 763,
        "end_line": 769,
        "comment": "",
        "child_ranges": [
            "(line 764,col 5)-(line 768,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong()",
        "snippet": "  public void testDeserializingBigIntegerAsLong() {\n    try {\n      gson.fromJson(\"12121211243123245845384534687435634558945453489543985435\", Long.class);\n      fail();\n    } catch (JsonSyntaxException expected) {\n    }\n  }",
        "begin_line": 771,
        "end_line": 777,
        "comment": "",
        "child_ranges": [
            "(line 772,col 5)-(line 776,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero()",
        "snippet": "  public void testValueVeryCloseToZeroIsZero() {\n    assertEquals(0, (byte) gson.fromJson(\"-122.08e-2132\", byte.class));\n    assertEquals(0, (short) gson.fromJson(\"-122.08e-2132\", short.class));\n    assertEquals(0, (int) gson.fromJson(\"-122.08e-2132\", int.class));\n    assertEquals(0, (long) gson.fromJson(\"-122.08e-2132\", long.class));\n    assertEquals(-0.0f, gson.fromJson(\"-122.08e-2132\", float.class));\n    assertEquals(-0.0, gson.fromJson(\"-122.08e-2132\", double.class));\n    assertEquals(0.0f, gson.fromJson(\"122.08e-2132\", float.class));\n    assertEquals(0.0, gson.fromJson(\"122.08e-2132\", double.class));\n  }",
        "begin_line": 779,
        "end_line": 788,
        "comment": "",
        "child_ranges": [
            "(line 780,col 5)-(line 780,col 71)",
            "(line 781,col 5)-(line 781,col 73)",
            "(line 782,col 5)-(line 782,col 69)",
            "(line 783,col 5)-(line 783,col 71)",
            "(line 784,col 5)-(line 784,col 69)",
            "(line 785,col 5)-(line 785,col 69)",
            "(line 786,col 5)-(line 786,col 67)",
            "(line 787,col 5)-(line 787,col 67)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat()",
        "snippet": "  public void testDeserializingBigDecimalAsFloat() {\n    String json = \"-122.08e-2132332\";\n    float actual = gson.fromJson(json, float.class);\n    assertEquals(-0.0f, actual);\n  }",
        "begin_line": 790,
        "end_line": 794,
        "comment": "",
        "child_ranges": [
            "(line 791,col 5)-(line 791,col 37)",
            "(line 792,col 5)-(line 792,col 52)",
            "(line 793,col 5)-(line 793,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble()",
        "snippet": "  public void testDeserializingBigDecimalAsDouble() {\n    String json = \"-122.08e-2132332\";\n    double actual = gson.fromJson(json, double.class);\n    assertEquals(-0.0d, actual);\n  }",
        "begin_line": 796,
        "end_line": 800,
        "comment": "",
        "child_ranges": [
            "(line 797,col 5)-(line 797,col 37)",
            "(line 798,col 5)-(line 798,col 54)",
            "(line 799,col 5)-(line 799,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails()",
        "snippet": "  public void testDeserializingBigDecimalAsBigIntegerFails() {\n    try {\n      gson.fromJson(\"-122.08e-213\", BigInteger.class);\n      fail();\n    } catch (JsonSyntaxException expected) {\n    }\n  }",
        "begin_line": 802,
        "end_line": 808,
        "comment": "",
        "child_ranges": [
            "(line 803,col 5)-(line 807,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal()",
        "snippet": "  public void testDeserializingBigIntegerAsBigDecimal() {\n    BigDecimal actual =\n      gson.fromJson(\"12121211243123245845384534687435634558945453489543985435\", BigDecimal.class);\n    assertEquals(\"12121211243123245845384534687435634558945453489543985435\", actual.toPlainString());\n  }",
        "begin_line": 810,
        "end_line": 814,
        "comment": "",
        "child_ranges": [
            "(line 811,col 5)-(line 812,col 98)",
            "(line 813,col 5)-(line 813,col 101)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
        "signature": "com.google.gson.functional.PrimitiveTest.testStringsAsBooleans()",
        "snippet": "  public void testStringsAsBooleans() {\n    String json = \"['true', 'false', 'TRUE', 'yes', '1']\";\n    assertEquals(Arrays.asList(true, false, true, false, false),\n        gson.<List<Boolean>>fromJson(json, new TypeToken<List<Boolean>>() {}.getType()));\n  }",
        "begin_line": 816,
        "end_line": 820,
        "comment": "",
        "child_ranges": [
            "(line 817,col 5)-(line 817,col 58)",
            "(line 818,col 5)-(line 819,col 89)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.VersioningTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/VersioningTest.java",
        "signature": "com.google.gson.functional.VersioningTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    builder = new GsonBuilder();\n  }",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 42,col 18)",
            "(line 43,col 5)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.VersioningTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/VersioningTest.java",
        "signature": "com.google.gson.functional.VersioningTest.testVersionedUntilSerialization()",
        "snippet": "  public void testVersionedUntilSerialization() {\n    Version1 target = new Version1();\n    Gson gson = builder.setVersion(1.29).create();\n    String json = gson.toJson(target);\n    assertTrue(json.contains(\"\\\"a\\\":\" + A));\n\n    gson = builder.setVersion(1.3).create();\n    json = gson.toJson(target);\n    assertFalse(json.contains(\"\\\"a\\\":\" + A));\n  }",
        "begin_line": 46,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 37)",
            "(line 48,col 5)-(line 48,col 50)",
            "(line 49,col 5)-(line 49,col 38)",
            "(line 50,col 5)-(line 50,col 44)",
            "(line 52,col 5)-(line 52,col 44)",
            "(line 53,col 5)-(line 53,col 31)",
            "(line 54,col 5)-(line 54,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.VersioningTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/VersioningTest.java",
        "signature": "com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization()",
        "snippet": "  public void testVersionedUntilDeserialization() {\n    Gson gson = builder.setVersion(1.3).create();\n    String json = \"{\\\"a\\\":3,\\\"b\\\":4,\\\"c\\\":5}\";\n    Version1 version1 = gson.fromJson(json, Version1.class);\n    assertEquals(A, version1.a);\n  }",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 58,col 49)",
            "(line 59,col 5)-(line 59,col 46)",
            "(line 60,col 5)-(line 60,col 60)",
            "(line 61,col 5)-(line 61,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.VersioningTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/VersioningTest.java",
        "signature": "com.google.gson.functional.VersioningTest.testVersionedClassesSerialization()",
        "snippet": "  public void testVersionedClassesSerialization() {\n    Gson gson = builder.setVersion(1.0).create();\n    String json1 = gson.toJson(new Version1());\n    String json2 = gson.toJson(new Version1_1());\n    assertEquals(json1, json2);\n  }",
        "begin_line": 64,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 65,col 5)-(line 65,col 49)",
            "(line 66,col 5)-(line 66,col 47)",
            "(line 67,col 5)-(line 67,col 49)",
            "(line 68,col 5)-(line 68,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.VersioningTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/VersioningTest.java",
        "signature": "com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization()",
        "snippet": "  public void testVersionedClassesDeserialization() {\n    Gson gson = builder.setVersion(1.0).create();\n    String json = \"{\\\"a\\\":3,\\\"b\\\":4,\\\"c\\\":5}\";\n    Version1 version1 = gson.fromJson(json, Version1.class);\n    assertEquals(3, version1.a);\n    assertEquals(4, version1.b);\n    Version1_1 version1_1 = gson.fromJson(json, Version1_1.class);\n    assertEquals(3, version1_1.a);\n    assertEquals(4, version1_1.b);\n    assertEquals(C, version1_1.c);\n  }",
        "begin_line": 71,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 49)",
            "(line 73,col 5)-(line 73,col 46)",
            "(line 74,col 5)-(line 74,col 60)",
            "(line 75,col 5)-(line 75,col 32)",
            "(line 76,col 5)-(line 76,col 32)",
            "(line 77,col 5)-(line 77,col 66)",
            "(line 78,col 5)-(line 78,col 34)",
            "(line 79,col 5)-(line 79,col 34)",
            "(line 80,col 5)-(line 80,col 34)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.VersioningTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/VersioningTest.java",
        "signature": "com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization()",
        "snippet": "  public void testIgnoreLaterVersionClassSerialization() {\n    Gson gson = builder.setVersion(1.0).create();\n    assertEquals(\"null\", gson.toJson(new Version1_2()));\n  }",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 84,col 5)-(line 84,col 49)",
            "(line 85,col 5)-(line 85,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.VersioningTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/VersioningTest.java",
        "signature": "com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization()",
        "snippet": "  public void testIgnoreLaterVersionClassDeserialization() {\n    Gson gson = builder.setVersion(1.0).create();\n    String json = \"{\\\"a\\\":3,\\\"b\\\":4,\\\"c\\\":5,\\\"d\\\":6}\";\n    Version1_2 version1_2  = gson.fromJson(json, Version1_2.class);\n    // Since the class is versioned to be after 1.0, we expect null\n    // This is the new behavior in Gson 2.0\n    assertNull(version1_2);\n  }",
        "begin_line": 88,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 49)",
            "(line 90,col 5)-(line 90,col 54)",
            "(line 91,col 5)-(line 91,col 67)",
            "(line 94,col 5)-(line 94,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.VersioningTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/VersioningTest.java",
        "signature": "com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization()",
        "snippet": "  public void testVersionedGsonWithUnversionedClassesSerialization() {\n    Gson gson = builder.setVersion(1.0).create();\n    BagOfPrimitives target = new BagOfPrimitives(10, 20, false, \"stringValue\");\n    assertEquals(target.getExpectedJson(), gson.toJson(target));\n  }",
        "begin_line": 97,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 98,col 5)-(line 98,col 49)",
            "(line 99,col 5)-(line 99,col 79)",
            "(line 100,col 5)-(line 100,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.VersioningTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/VersioningTest.java",
        "signature": "com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization()",
        "snippet": "  public void testVersionedGsonWithUnversionedClassesDeserialization() {\n    Gson gson = builder.setVersion(1.0).create();\n    String json = \"{\\\"longValue\\\":10,\\\"intValue\\\":20,\\\"booleanValue\\\":false}\";\n\n    BagOfPrimitives expected = new BagOfPrimitives();\n    expected.longValue = 10;\n    expected.intValue = 20;\n    expected.booleanValue = false;\n    BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 103,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 104,col 5)-(line 104,col 49)",
            "(line 105,col 5)-(line 105,col 78)",
            "(line 107,col 5)-(line 107,col 53)",
            "(line 108,col 5)-(line 108,col 28)",
            "(line 109,col 5)-(line 109,col 27)",
            "(line 110,col 5)-(line 110,col 34)",
            "(line 111,col 5)-(line 111,col 72)",
            "(line 112,col 5)-(line 112,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.VersioningTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/VersioningTest.java",
        "signature": "com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization()",
        "snippet": "  public void testVersionedGsonMixingSinceAndUntilSerialization() {\n    Gson gson = builder.setVersion(1.0).create();\n    SinceUntilMixing target = new SinceUntilMixing();\n    String json = gson.toJson(target);\n    assertFalse(json.contains(\"\\\"b\\\":\" + B));\n\n    gson = builder.setVersion(1.2).create();\n    json = gson.toJson(target);\n    assertTrue(json.contains(\"\\\"b\\\":\" + B));\n\n    gson = builder.setVersion(1.3).create();\n    json = gson.toJson(target);\n    assertFalse(json.contains(\"\\\"b\\\":\" + B));\n  }",
        "begin_line": 115,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 116,col 5)-(line 116,col 49)",
            "(line 117,col 5)-(line 117,col 53)",
            "(line 118,col 5)-(line 118,col 38)",
            "(line 119,col 5)-(line 119,col 45)",
            "(line 121,col 5)-(line 121,col 44)",
            "(line 122,col 5)-(line 122,col 31)",
            "(line 123,col 5)-(line 123,col 44)",
            "(line 125,col 5)-(line 125,col 44)",
            "(line 126,col 5)-(line 126,col 31)",
            "(line 127,col 5)-(line 127,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.VersioningTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/VersioningTest.java",
        "signature": "com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization()",
        "snippet": "  public void testVersionedGsonMixingSinceAndUntilDeserialization() {\n    String json = \"{\\\"a\\\":5,\\\"b\\\":6}\";\n    Gson gson = builder.setVersion(1.0).create();\n    SinceUntilMixing result = gson.fromJson(json, SinceUntilMixing.class);\n    assertEquals(5, result.a);\n    assertEquals(B, result.b);\n\n    gson = builder.setVersion(1.2).create();\n    result = gson.fromJson(json, SinceUntilMixing.class);\n    assertEquals(5, result.a);\n    assertEquals(6, result.b);\n\n    gson = builder.setVersion(1.3).create();\n    result = gson.fromJson(json, SinceUntilMixing.class);\n    assertEquals(5, result.a);\n    assertEquals(B, result.b);\n  }",
        "begin_line": 130,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 38)",
            "(line 132,col 5)-(line 132,col 49)",
            "(line 133,col 5)-(line 133,col 74)",
            "(line 134,col 5)-(line 134,col 30)",
            "(line 135,col 5)-(line 135,col 30)",
            "(line 137,col 5)-(line 137,col 44)",
            "(line 138,col 5)-(line 138,col 57)",
            "(line 139,col 5)-(line 139,col 30)",
            "(line 140,col 5)-(line 140,col 30)",
            "(line 142,col 5)-(line 142,col 44)",
            "(line 143,col 5)-(line 143,col 57)",
            "(line 144,col 5)-(line 144,col 30)",
            "(line 145,col 5)-(line 145,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.Anonymous-aa7e701e-f1b6-44bf-b542-c9dcb019e62a.shouldSkipField(com.google.gson.FieldAttributes)",
        "snippet": "    @Override public boolean shouldSkipField(FieldAttributes f) {\n      return false;\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 7)-(line 41,col 19)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.Anonymous-f91f9b23-96e8-4155-afe0-4edb8abc29f3.shouldSkipClass(java.lang.Class<?>)",
        "snippet": "    @Override public boolean shouldSkipClass(Class<?> clazz) {\n      return clazz == SampleObjectForTest.class;\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 7)-(line 44,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    src = new SampleObjectForTest();\n  }",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 18)",
            "(line 53,col 5)-(line 53,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization()",
        "snippet": "  public void testExclusionStrategySerialization() throws Exception {\n    Gson gson = createGson(new MyExclusionStrategy(String.class), true);\n    String json = gson.toJson(src);\n    assertFalse(json.contains(\"\\\"stringField\\\"\"));\n    assertFalse(json.contains(\"\\\"annotatedField\\\"\"));\n    assertTrue(json.contains(\"\\\"longField\\\"\"));\n  }",
        "begin_line": 56,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 57,col 72)",
            "(line 58,col 5)-(line 58,col 35)",
            "(line 59,col 5)-(line 59,col 50)",
            "(line 60,col 5)-(line 60,col 53)",
            "(line 61,col 5)-(line 61,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization()",
        "snippet": "  public void testExclusionStrategySerializationDoesNotImpactDeserialization() {\n    String json = \"{\\\"annotatedField\\\":1,\\\"stringField\\\":\\\"x\\\",\\\"longField\\\":2}\";\n    Gson gson = createGson(new MyExclusionStrategy(String.class), true);\n    SampleObjectForTest value = gson.fromJson(json, SampleObjectForTest.class);\n    assertEquals(1, value.annotatedField);\n    assertEquals(\"x\", value.stringField);\n    assertEquals(2, value.longField);\n  }",
        "begin_line": 64,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 65,col 5)-(line 65,col 81)",
            "(line 66,col 5)-(line 66,col 72)",
            "(line 67,col 5)-(line 67,col 79)",
            "(line 68,col 5)-(line 68,col 42)",
            "(line 69,col 5)-(line 69,col 41)",
            "(line 70,col 5)-(line 70,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization()",
        "snippet": "  public void testExclusionStrategyDeserialization() throws Exception {\n    Gson gson = createGson(new MyExclusionStrategy(String.class), false);\n    JsonObject json = new JsonObject();\n    json.add(\"annotatedField\", new JsonPrimitive(src.annotatedField + 5));\n    json.add(\"stringField\", new JsonPrimitive(src.stringField + \"blah,blah\"));\n    json.add(\"longField\", new JsonPrimitive(1212311L));\n\n    SampleObjectForTest target = gson.fromJson(json, SampleObjectForTest.class);\n    assertEquals(1212311L, target.longField);\n\n    // assert excluded fields are set to the defaults\n    assertEquals(src.annotatedField, target.annotatedField);\n    assertEquals(src.stringField, target.stringField);\n  }",
        "begin_line": 73,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 74,col 5)-(line 74,col 73)",
            "(line 75,col 5)-(line 75,col 39)",
            "(line 76,col 5)-(line 76,col 74)",
            "(line 77,col 5)-(line 77,col 78)",
            "(line 78,col 5)-(line 78,col 55)",
            "(line 80,col 5)-(line 80,col 80)",
            "(line 81,col 5)-(line 81,col 45)",
            "(line 84,col 5)-(line 84,col 60)",
            "(line 85,col 5)-(line 85,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization()",
        "snippet": "  public void testExclusionStrategySerializationDoesNotImpactSerialization() throws Exception {\n    Gson gson = createGson(new MyExclusionStrategy(String.class), false);\n    String json = gson.toJson(src);\n    assertTrue(json.contains(\"\\\"stringField\\\"\"));\n    assertTrue(json.contains(\"\\\"annotatedField\\\"\"));\n    assertTrue(json.contains(\"\\\"longField\\\"\"));\n  }",
        "begin_line": 88,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 73)",
            "(line 90,col 5)-(line 90,col 35)",
            "(line 91,col 5)-(line 91,col 49)",
            "(line 92,col 5)-(line 92,col 52)",
            "(line 93,col 5)-(line 93,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode()",
        "snippet": "  public void testExclusionStrategyWithMode() throws Exception {\n    SampleObjectForTest testObj = new SampleObjectForTest(\n        src.annotatedField + 5, src.stringField + \"blah,blah\",\n        src.longField + 655L);\n\n    Gson gson = createGson(new MyExclusionStrategy(String.class), false);\n    JsonObject json = gson.toJsonTree(testObj).getAsJsonObject();\n    assertEquals(testObj.annotatedField, json.get(\"annotatedField\").getAsInt());\n    assertEquals(testObj.stringField, json.get(\"stringField\").getAsString());\n    assertEquals(testObj.longField, json.get(\"longField\").getAsLong());\n\n    SampleObjectForTest target = gson.fromJson(json, SampleObjectForTest.class);\n    assertEquals(testObj.longField, target.longField);\n\n    // assert excluded fields are set to the defaults\n    assertEquals(src.annotatedField, target.annotatedField);\n    assertEquals(src.stringField, target.stringField);\n  }",
        "begin_line": 96,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 99,col 30)",
            "(line 101,col 5)-(line 101,col 73)",
            "(line 102,col 5)-(line 102,col 65)",
            "(line 103,col 5)-(line 103,col 80)",
            "(line 104,col 5)-(line 104,col 77)",
            "(line 105,col 5)-(line 105,col 71)",
            "(line 107,col 5)-(line 107,col 80)",
            "(line 108,col 5)-(line 108,col 54)",
            "(line 111,col 5)-(line 111,col 60)",
            "(line 112,col 5)-(line 112,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization()",
        "snippet": "  public void testExcludeTopLevelClassSerialization() {\n    Gson gson = new GsonBuilder()\n        .addSerializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST)\n        .create();\n    assertEquals(\"null\", gson.toJson(new SampleObjectForTest(), SampleObjectForTest.class));\n  }",
        "begin_line": 115,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 116,col 5)-(line 118,col 18)",
            "(line 119,col 5)-(line 119,col 92)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization()",
        "snippet": "  public void testExcludeTopLevelClassSerializationDoesNotImpactDeserialization() {\n    Gson gson = new GsonBuilder()\n        .addSerializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST)\n        .create();\n    String json = \"{\\\"annotatedField\\\":1,\\\"stringField\\\":\\\"x\\\",\\\"longField\\\":2}\";\n    SampleObjectForTest value = gson.fromJson(json, SampleObjectForTest.class);\n    assertEquals(1, value.annotatedField);\n    assertEquals(\"x\", value.stringField);\n    assertEquals(2, value.longField);\n  }",
        "begin_line": 122,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 123,col 5)-(line 125,col 18)",
            "(line 126,col 5)-(line 126,col 81)",
            "(line 127,col 5)-(line 127,col 79)",
            "(line 128,col 5)-(line 128,col 42)",
            "(line 129,col 5)-(line 129,col 41)",
            "(line 130,col 5)-(line 130,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization()",
        "snippet": "  public void testExcludeTopLevelClassDeserialization() {\n    Gson gson = new GsonBuilder()\n        .addDeserializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST)\n        .create();\n    String json = \"{\\\"annotatedField\\\":1,\\\"stringField\\\":\\\"x\\\",\\\"longField\\\":2}\";\n    SampleObjectForTest value = gson.fromJson(json, SampleObjectForTest.class);\n    assertNull(value);\n  }",
        "begin_line": 133,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 134,col 5)-(line 136,col 18)",
            "(line 137,col 5)-(line 137,col 81)",
            "(line 138,col 5)-(line 138,col 79)",
            "(line 139,col 5)-(line 139,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization()",
        "snippet": "  public void testExcludeTopLevelClassDeserializationDoesNotImpactSerialization() {\n    Gson gson = new GsonBuilder()\n        .addDeserializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST)\n        .create();\n    String json = gson.toJson(new SampleObjectForTest(), SampleObjectForTest.class);\n    assertTrue(json.contains(\"\\\"stringField\\\"\"));\n    assertTrue(json.contains(\"\\\"annotatedField\\\"\"));\n    assertTrue(json.contains(\"\\\"longField\\\"\"));\n  }",
        "begin_line": 142,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 143,col 5)-(line 145,col 18)",
            "(line 146,col 5)-(line 146,col 84)",
            "(line 147,col 5)-(line 147,col 49)",
            "(line 148,col 5)-(line 148,col 52)",
            "(line 149,col 5)-(line 149,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.createGson(com.google.gson.ExclusionStrategy, boolean)",
        "snippet": "  private static Gson createGson(ExclusionStrategy exclusionStrategy, boolean serialization) {\n    GsonBuilder gsonBuilder = new GsonBuilder();\n    if (serialization) {\n      gsonBuilder.addSerializationExclusionStrategy(exclusionStrategy);\n    } else {\n      gsonBuilder.addDeserializationExclusionStrategy(exclusionStrategy);\n    }\n    return gsonBuilder\n        .serializeNulls()\n        .create();\n  }",
        "begin_line": 152,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 153,col 48)",
            "(line 154,col 5)-(line 158,col 5)",
            "(line 159,col 5)-(line 161,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.SampleObjectForTest.SampleObjectForTest()",
        "snippet": "    public SampleObjectForTest() {\n      this(5, \"someDefaultValue\", 12345L);\n    }",
        "begin_line": 176,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 177,col 7)-(line 177,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.SampleObjectForTest.SampleObjectForTest(int, java.lang.String, long)",
        "snippet": "    public SampleObjectForTest(int annotatedField, String stringField, long longField) {\n      this.annotatedField = annotatedField;\n      this.stringField = stringField;\n      this.longField = longField;\n    }",
        "begin_line": 180,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 181,col 7)-(line 181,col 43)",
            "(line 182,col 7)-(line 182,col 37)",
            "(line 183,col 7)-(line 183,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.MyExclusionStrategy.MyExclusionStrategy(java.lang.Class<?>)",
        "snippet": "    private MyExclusionStrategy(Class<?> typeToSkip) {\n      this.typeToSkip = typeToSkip;\n    }",
        "begin_line": 190,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 191,col 7)-(line 191,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.MyExclusionStrategy.shouldSkipClass(java.lang.Class<?>)",
        "snippet": "    @Override public boolean shouldSkipClass(Class<?> clazz) {\n      return (clazz == typeToSkip);\n    }",
        "begin_line": 194,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 195,col 7)-(line 195,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExclusionStrategyFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
        "signature": "com.google.gson.functional.ExclusionStrategyFunctionalTest.MyExclusionStrategy.shouldSkipField(com.google.gson.FieldAttributes)",
        "snippet": "    @Override public boolean shouldSkipField(FieldAttributes f) {\n      return f.getAnnotation(Foo.class) != null;\n    }",
        "begin_line": 198,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 199,col 7)-(line 199,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    builder = new GsonBuilder();\n  }",
        "begin_line": 51,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 53,col 5)-(line 53,col 18)",
            "(line 54,col 5)-(line 54,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers()",
        "snippet": "  public void testCustomSerializers() {\n    Gson gson = builder.registerTypeAdapter(\n        ClassWithCustomTypeConverter.class, new JsonSerializer<ClassWithCustomTypeConverter>() {\n          @Override public JsonElement serialize(ClassWithCustomTypeConverter src, Type typeOfSrc,\n              JsonSerializationContext context) {\n        JsonObject json = new JsonObject();\n        json.addProperty(\"bag\", 5);\n        json.addProperty(\"value\", 25);\n        return json;\n      }\n    }).create();\n    ClassWithCustomTypeConverter target = new ClassWithCustomTypeConverter();\n    assertEquals(\"{\\\"bag\\\":5,\\\"value\\\":25}\", gson.toJson(target));\n  }",
        "begin_line": 57,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 67,col 16)",
            "(line 68,col 5)-(line 68,col 77)",
            "(line 69,col 5)-(line 69,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "serialize(ClassWithCustomTypeConverter, Type, JsonSerializationContext)",
        "snippet": "          @Override public JsonElement serialize(ClassWithCustomTypeConverter src, Type typeOfSrc,\n              JsonSerializationContext context) {\n        JsonObject json = new JsonObject();\n        json.addProperty(\"bag\", 5);\n        json.addProperty(\"value\", 25);\n        return json;\n      }",
        "begin_line": 60,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 43)",
            "(line 63,col 9)-(line 63,col 35)",
            "(line 64,col 9)-(line 64,col 38)",
            "(line 65,col 9)-(line 65,col 20)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers()",
        "snippet": "  public void testCustomDeserializers() {\n    Gson gson = new GsonBuilder().registerTypeAdapter(\n        ClassWithCustomTypeConverter.class, new JsonDeserializer<ClassWithCustomTypeConverter>() {\n          @Override public ClassWithCustomTypeConverter deserialize(JsonElement json, Type typeOfT,\n              JsonDeserializationContext context) {\n        JsonObject jsonObject = json.getAsJsonObject();\n        int value = jsonObject.get(\"bag\").getAsInt();\n        return new ClassWithCustomTypeConverter(new BagOfPrimitives(value,\n            value, false, \"\"), value);\n      }\n    }).create();\n    String json = \"{\\\"bag\\\":5,\\\"value\\\":25}\";\n    ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class);\n    assertEquals(5, target.getBag().getIntValue());\n  }",
        "begin_line": 72,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 73,col 5)-(line 82,col 16)",
            "(line 83,col 5)-(line 83,col 45)",
            "(line 84,col 5)-(line 84,col 98)",
            "(line 85,col 5)-(line 85,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.Anonymous-2de75263-294b-422a-b3fe-64f65501d76d.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "          @Override public ClassWithCustomTypeConverter deserialize(JsonElement json, Type typeOfT,\n              JsonDeserializationContext context) {\n        JsonObject jsonObject = json.getAsJsonObject();\n        int value = jsonObject.get(\"bag\").getAsInt();\n        return new ClassWithCustomTypeConverter(new BagOfPrimitives(value,\n            value, false, \"\"), value);\n      }",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 55)",
            "(line 78,col 9)-(line 78,col 53)",
            "(line 79,col 9)-(line 80,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.disable_testCustomSerializersOfSelf()",
        "snippet": "  public void disable_testCustomSerializersOfSelf() {\n    Gson gson = createGsonObjectWithFooTypeAdapter();\n    Gson basicGson = new Gson();\n    Foo newFooObject = new Foo(1, 2L);\n    String jsonFromCustomSerializer = gson.toJson(newFooObject);\n    String jsonFromGson = basicGson.toJson(newFooObject);\n\n    assertEquals(jsonFromGson, jsonFromCustomSerializer);\n  }",
        "begin_line": 88,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 53)",
            "(line 90,col 5)-(line 90,col 32)",
            "(line 91,col 5)-(line 91,col 38)",
            "(line 92,col 5)-(line 92,col 64)",
            "(line 93,col 5)-(line 93,col 57)",
            "(line 95,col 5)-(line 95,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.disable_testCustomDeserializersOfSelf()",
        "snippet": "  public void disable_testCustomDeserializersOfSelf() {\n    Gson gson = createGsonObjectWithFooTypeAdapter();\n    Gson basicGson = new Gson();\n    Foo expectedFoo = new Foo(1, 2L);\n    String json = basicGson.toJson(expectedFoo);\n    Foo newFooObject = gson.fromJson(json, Foo.class);\n\n    assertEquals(expectedFoo.key, newFooObject.key);\n    assertEquals(expectedFoo.value, newFooObject.value);\n  }",
        "begin_line": 98,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 99,col 5)-(line 99,col 53)",
            "(line 100,col 5)-(line 100,col 32)",
            "(line 101,col 5)-(line 101,col 37)",
            "(line 102,col 5)-(line 102,col 48)",
            "(line 103,col 5)-(line 103,col 54)",
            "(line 105,col 5)-(line 105,col 52)",
            "(line 106,col 5)-(line 106,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers()",
        "snippet": "  public void testCustomNestedSerializers() {\n    Gson gson = new GsonBuilder().registerTypeAdapter(\n        BagOfPrimitives.class, new JsonSerializer<BagOfPrimitives>() {\n          @Override public JsonElement serialize(BagOfPrimitives src, Type typeOfSrc,\n          JsonSerializationContext context) {\n        return new JsonPrimitive(6);\n      }\n    }).create();\n    ClassWithCustomTypeConverter target = new ClassWithCustomTypeConverter();\n    assertEquals(\"{\\\"bag\\\":6,\\\"value\\\":10}\", gson.toJson(target));\n  }",
        "begin_line": 109,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 110,col 5)-(line 116,col 16)",
            "(line 117,col 5)-(line 117,col 77)",
            "(line 118,col 5)-(line 118,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "serialize(BagOfPrimitives, Type, JsonSerializationContext)",
        "snippet": "          @Override public JsonElement serialize(BagOfPrimitives src, Type typeOfSrc,\n          JsonSerializationContext context) {\n        return new JsonPrimitive(6);\n      }",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers()",
        "snippet": "  public void testCustomNestedDeserializers() {\n    Gson gson = new GsonBuilder().registerTypeAdapter(\n        BagOfPrimitives.class, new JsonDeserializer<BagOfPrimitives>() {\n          @Override public BagOfPrimitives deserialize(JsonElement json, Type typeOfT,\n          JsonDeserializationContext context) throws JsonParseException {\n        int value = json.getAsInt();\n        return new BagOfPrimitives(value, value, false, \"\");\n      }\n    }).create();\n    String json = \"{\\\"bag\\\":7,\\\"value\\\":25}\";\n    ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class);\n    assertEquals(7, target.getBag().getIntValue());\n  }",
        "begin_line": 121,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 122,col 5)-(line 129,col 16)",
            "(line 130,col 5)-(line 130,col 45)",
            "(line 131,col 5)-(line 131,col 98)",
            "(line 132,col 5)-(line 132,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.Anonymous-bccf15ba-c00a-4efc-9780-45e8847bc78b.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "          @Override public BagOfPrimitives deserialize(JsonElement json, Type typeOfT,\n          JsonDeserializationContext context) throws JsonParseException {\n        int value = json.getAsInt();\n        return new BagOfPrimitives(value, value, false, \"\");\n      }",
        "begin_line": 124,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 36)",
            "(line 127,col 9)-(line 127,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses()",
        "snippet": "  public void testCustomTypeAdapterDoesNotAppliesToSubClasses() {\n    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base> () {\n      @Override\n      public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {\n        JsonObject json = new JsonObject();\n        json.addProperty(\"value\", src.baseValue);\n        return json;\n      }\n    }).create();\n    Base b = new Base();\n    String json = gson.toJson(b);\n    assertTrue(json.contains(\"value\"));\n    b = new Derived();\n    json = gson.toJson(b);\n    assertTrue(json.contains(\"derivedValue\"));\n  }",
        "begin_line": 135,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 136,col 5)-(line 143,col 16)",
            "(line 144,col 5)-(line 144,col 24)",
            "(line 145,col 5)-(line 145,col 33)",
            "(line 146,col 5)-(line 146,col 39)",
            "(line 147,col 5)-(line 147,col 22)",
            "(line 148,col 5)-(line 148,col 26)",
            "(line 149,col 5)-(line 149,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.Anonymous-9c00efdf-92f8-4602-98b6-89af1443ac55.serialize(com.google.gson.functional.CustomTypeAdaptersTest.Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "      @Override\n      public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {\n        JsonObject json = new JsonObject();\n        json.addProperty(\"value\", src.baseValue);\n        return json;\n      }",
        "begin_line": 137,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 43)",
            "(line 140,col 9)-(line 140,col 49)",
            "(line 141,col 9)-(line 141,col 20)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass()",
        "snippet": "  public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() {\n    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base> () {\n      @Override\n      public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {\n        JsonObject json = new JsonObject();\n        json.addProperty(\"value\", src.baseValue);\n        return json;\n      }\n    }).create();\n    Base b = new Base();\n    String json = gson.toJson(b);\n    assertTrue(json.contains(\"value\"));\n    b = new Derived();\n    json = gson.toJson(b, Base.class);\n    assertTrue(json.contains(\"value\"));\n    assertFalse(json.contains(\"derivedValue\"));\n  }",
        "begin_line": 152,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 160,col 16)",
            "(line 161,col 5)-(line 161,col 24)",
            "(line 162,col 5)-(line 162,col 33)",
            "(line 163,col 5)-(line 163,col 39)",
            "(line 164,col 5)-(line 164,col 22)",
            "(line 165,col 5)-(line 165,col 38)",
            "(line 166,col 5)-(line 166,col 39)",
            "(line 167,col 5)-(line 167,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.Anonymous-c78c70fa-86eb-4ecc-a0f5-14a3dd36de76.serialize(com.google.gson.functional.CustomTypeAdaptersTest.Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "      @Override\n      public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {\n        JsonObject json = new JsonObject();\n        json.addProperty(\"value\", src.baseValue);\n        return json;\n      }",
        "begin_line": 154,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 43)",
            "(line 157,col 9)-(line 157,col 49)",
            "(line 158,col 9)-(line 158,col 20)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.createGsonObjectWithFooTypeAdapter()",
        "snippet": "  private Gson createGsonObjectWithFooTypeAdapter() {\n    return new GsonBuilder().registerTypeAdapter(Foo.class, new FooTypeAdapter()).create();\n  }",
        "begin_line": 180,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 181,col 5)-(line 181,col 91)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.Foo.Foo()",
        "snippet": "    public Foo() {\n      this(0, 0L);\n    }",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 189,col 7)-(line 189,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.Foo.Foo(int, long)",
        "snippet": "    public Foo(int key, long value) {\n      this.key = key;\n      this.value = value;\n    }",
        "begin_line": 192,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 193,col 7)-(line 193,col 21)",
            "(line 194,col 7)-(line 194,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.FooTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "    @Override\n    public Foo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      return context.deserialize(json, typeOfT);\n    }",
        "begin_line": 199,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 202,col 7)-(line 202,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.FooTypeAdapter.serialize(com.google.gson.functional.CustomTypeAdaptersTest.Foo, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "    @Override\n    public JsonElement serialize(Foo src, Type typeOfSrc, JsonSerializationContext context) {\n      return context.serialize(src, typeOfSrc);\n    }",
        "begin_line": 205,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 207,col 7)-(line 207,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives()",
        "snippet": "  public void testCustomSerializerInvokedForPrimitives() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(boolean.class, new JsonSerializer<Boolean>() {\n          @Override public JsonElement serialize(Boolean s, Type t, JsonSerializationContext c) {\n            return new JsonPrimitive(s ? 1 : 0);\n          }\n        })\n        .create();\n    assertEquals(\"1\", gson.toJson(true, boolean.class));\n    assertEquals(\"true\", gson.toJson(true, Boolean.class));\n  }",
        "begin_line": 211,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 212,col 5)-(line 218,col 18)",
            "(line 219,col 5)-(line 219,col 56)",
            "(line 220,col 5)-(line 220,col 59)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.Anonymous-a0a3078d-4371-4a22-8d1c-c13181d8a712.serialize(java.lang.Boolean, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "          @Override public JsonElement serialize(Boolean s, Type t, JsonSerializationContext c) {\n            return new JsonPrimitive(s ? 1 : 0);\n          }",
        "begin_line": 214,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 215,col 13)-(line 215,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives()",
        "snippet": "  @SuppressWarnings(\"rawtypes\")\n  public void testCustomDeserializerInvokedForPrimitives() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(boolean.class, new JsonDeserializer() {\n          @Override\n          public Object deserialize(JsonElement json, Type t, JsonDeserializationContext context) {\n            return json.getAsInt() != 0;\n          }\n        })\n        .create();\n    assertEquals(Boolean.TRUE, gson.fromJson(\"1\", boolean.class));\n    assertEquals(Boolean.TRUE, gson.fromJson(\"true\", Boolean.class));\n  }",
        "begin_line": 223,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 232,col 18)",
            "(line 233,col 5)-(line 233,col 66)",
            "(line 234,col 5)-(line 234,col 69)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.Anonymous-5115c1cc-08c6-414d-bbd6-726f31285b42.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "          @Override\n          public Object deserialize(JsonElement json, Type t, JsonDeserializationContext context) {\n            return json.getAsInt() != 0;\n          }",
        "begin_line": 227,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 229,col 13)-(line 229,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer()",
        "snippet": "  public void testCustomByteArraySerializer() {\n    Gson gson = new GsonBuilder().registerTypeAdapter(byte[].class, new JsonSerializer<byte[]>() {\n      @Override\n      public JsonElement serialize(byte[] src, Type typeOfSrc, JsonSerializationContext context) {\n        StringBuilder sb = new StringBuilder(src.length);\n        for (byte b : src) {\n          sb.append(b);\n        }\n        return new JsonPrimitive(sb.toString());\n      }\n    }).create();\n    byte[] data = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    String json = gson.toJson(data);\n    assertEquals(\"\\\"0123456789\\\"\", json);\n  }",
        "begin_line": 237,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 238,col 5)-(line 247,col 16)",
            "(line 248,col 5)-(line 248,col 49)",
            "(line 249,col 5)-(line 249,col 36)",
            "(line 250,col 5)-(line 250,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.Anonymous-21a24ec6-7ba5-4ef7-9f98-07e6df29aabb.serialize(byte[], java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "      @Override\n      public JsonElement serialize(byte[] src, Type typeOfSrc, JsonSerializationContext context) {\n        StringBuilder sb = new StringBuilder(src.length);\n        for (byte b : src) {\n          sb.append(b);\n        }\n        return new JsonPrimitive(sb.toString());\n      }",
        "begin_line": 239,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 57)",
            "(line 242,col 9)-(line 244,col 9)",
            "(line 245,col 9)-(line 245,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator()",
        "snippet": "  public void testCustomByteArrayDeserializerAndInstanceCreator() {\n    GsonBuilder gsonBuilder = new GsonBuilder().registerTypeAdapter(byte[].class,\n        new JsonDeserializer<byte[]>() {\n          @Override public byte[] deserialize(JsonElement json,\n              Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n        String str = json.getAsString();\n        byte[] data = new byte[str.length()];\n        for (int i = 0; i < data.length; ++i) {\n          data[i] = Byte.parseByte(\"\"+str.charAt(i));\n        }\n        return data;\n      }\n    });\n    Gson gson = gsonBuilder.create();\n    String json = \"'0123456789'\";\n    byte[] actual = gson.fromJson(json, byte[].class);\n    byte[] expected = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    for (int i = 0; i < actual.length; ++i) {\n      assertEquals(expected[i], actual[i]);\n    }\n  }",
        "begin_line": 253,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 265,col 7)",
            "(line 266,col 5)-(line 266,col 37)",
            "(line 267,col 5)-(line 267,col 33)",
            "(line 268,col 5)-(line 268,col 54)",
            "(line 269,col 5)-(line 269,col 53)",
            "(line 270,col 5)-(line 272,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.Anonymous-78099c61-d2db-4302-a68a-623ac03d2a0d.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "          @Override public byte[] deserialize(JsonElement json,\n              Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n        String str = json.getAsString();\n        byte[] data = new byte[str.length()];\n        for (int i = 0; i < data.length; ++i) {\n          data[i] = Byte.parseByte(\"\"+str.charAt(i));\n        }\n        return data;\n      }",
        "begin_line": 256,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 258,col 9)-(line 258,col 40)",
            "(line 259,col 9)-(line 259,col 45)",
            "(line 260,col 9)-(line 262,col 9)",
            "(line 263,col 9)-(line 263,col 20)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.StringHolder.StringHolder(java.lang.String)",
        "snippet": "    public StringHolder(String string) {\n      String[] parts = string.split(\":\");\n      part1 = parts[0];\n      part2 = parts[1];\n    }",
        "begin_line": 279,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 280,col 7)-(line 280,col 41)",
            "(line 281,col 7)-(line 281,col 23)",
            "(line 282,col 7)-(line 282,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.StringHolder.StringHolder(java.lang.String, java.lang.String)",
        "snippet": "    public StringHolder(String part1, String part2) {\n      this.part1 = part1;\n      this.part2 = part2;\n    }",
        "begin_line": 284,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 285,col 7)-(line 285,col 25)",
            "(line 286,col 7)-(line 286,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.StringHolderTypeAdapter.createInstance(java.lang.reflect.Type)",
        "snippet": "    @Override public StringHolder createInstance(Type type) {\n      //Fill up with objects that will be thrown away\n      return new StringHolder(\"unknown:thing\");\n    }",
        "begin_line": 293,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 295,col 7)-(line 295,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.StringHolderTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "    @Override public StringHolder deserialize(JsonElement src, Type type,\n        JsonDeserializationContext context) {\n      return new StringHolder(src.getAsString());\n    }",
        "begin_line": 298,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 300,col 7)-(line 300,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.StringHolderTypeAdapter.serialize(com.google.gson.functional.CustomTypeAdaptersTest.StringHolder, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "    @Override public JsonElement serialize(StringHolder src, Type typeOfSrc,\n        JsonSerializationContext context) {\n      String contents = src.part1 + ':' + src.part2;\n      return new JsonPrimitive(contents);\n    }",
        "begin_line": 303,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 305,col 7)-(line 305,col 52)",
            "(line 306,col 7)-(line 306,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType()",
        "snippet": "  public void testCustomAdapterInvokedForCollectionElementSerializationWithType() {\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter())\n      .create();\n    Type setType = new TypeToken<Set<StringHolder>>() {}.getType();\n    StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\n    Set<StringHolder> setOfHolders = new HashSet<StringHolder>();\n    setOfHolders.add(holder);\n    String json = gson.toJson(setOfHolders, setType);\n    assertTrue(json.contains(\"Jacob:Tomaw\"));\n  }",
        "begin_line": 311,
        "end_line": 321,
        "comment": " Test created from Issue 70",
        "child_ranges": [
            "(line 312,col 5)-(line 314,col 16)",
            "(line 315,col 5)-(line 315,col 67)",
            "(line 316,col 5)-(line 316,col 61)",
            "(line 317,col 5)-(line 317,col 65)",
            "(line 318,col 5)-(line 318,col 29)",
            "(line 319,col 5)-(line 319,col 53)",
            "(line 320,col 5)-(line 320,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization()",
        "snippet": "  public void testCustomAdapterInvokedForCollectionElementSerialization() {\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter())\n      .create();\n    StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\n    Set<StringHolder> setOfHolders = new HashSet<StringHolder>();\n    setOfHolders.add(holder);\n    String json = gson.toJson(setOfHolders);\n    assertTrue(json.contains(\"Jacob:Tomaw\"));\n  }",
        "begin_line": 324,
        "end_line": 333,
        "comment": " Test created from Issue 70",
        "child_ranges": [
            "(line 325,col 5)-(line 327,col 16)",
            "(line 328,col 5)-(line 328,col 61)",
            "(line 329,col 5)-(line 329,col 65)",
            "(line 330,col 5)-(line 330,col 29)",
            "(line 331,col 5)-(line 331,col 44)",
            "(line 332,col 5)-(line 332,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization()",
        "snippet": "  public void testCustomAdapterInvokedForCollectionElementDeserialization() {\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter())\n      .create();\n    Type setType = new TypeToken<Set<StringHolder>>() {}.getType();\n    Set<StringHolder> setOfHolders = gson.fromJson(\"['Jacob:Tomaw']\", setType);\n    assertEquals(1, setOfHolders.size());\n    StringHolder foo = setOfHolders.iterator().next();\n    assertEquals(\"Jacob\", foo.part1);\n    assertEquals(\"Tomaw\", foo.part2);\n  }",
        "begin_line": 336,
        "end_line": 346,
        "comment": " Test created from Issue 70",
        "child_ranges": [
            "(line 337,col 5)-(line 339,col 16)",
            "(line 340,col 5)-(line 340,col 67)",
            "(line 341,col 5)-(line 341,col 79)",
            "(line 342,col 5)-(line 342,col 41)",
            "(line 343,col 5)-(line 343,col 54)",
            "(line 344,col 5)-(line 344,col 37)",
            "(line 345,col 5)-(line 345,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType()",
        "snippet": "  public void testCustomAdapterInvokedForMapElementSerializationWithType() {\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter())\n      .create();\n    Type mapType = new TypeToken<Map<String,StringHolder>>() {}.getType();\n    StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\n    Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>();\n    mapOfHolders.put(\"foo\", holder);\n    String json = gson.toJson(mapOfHolders, mapType);\n    assertTrue(json.contains(\"\\\"foo\\\":\\\"Jacob:Tomaw\\\"\"));\n  }",
        "begin_line": 349,
        "end_line": 359,
        "comment": " Test created from Issue 70",
        "child_ranges": [
            "(line 350,col 5)-(line 352,col 16)",
            "(line 353,col 5)-(line 353,col 74)",
            "(line 354,col 5)-(line 354,col 61)",
            "(line 355,col 5)-(line 355,col 81)",
            "(line 356,col 5)-(line 356,col 36)",
            "(line 357,col 5)-(line 357,col 53)",
            "(line 358,col 5)-(line 358,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization()",
        "snippet": "  public void testCustomAdapterInvokedForMapElementSerialization() {\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter())\n      .create();\n    StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\n    Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>();\n    mapOfHolders.put(\"foo\", holder);\n    String json = gson.toJson(mapOfHolders);\n    assertTrue(json.contains(\"\\\"foo\\\":\\\"Jacob:Tomaw\\\"\"));\n  }",
        "begin_line": 362,
        "end_line": 371,
        "comment": " Test created from Issue 70",
        "child_ranges": [
            "(line 363,col 5)-(line 365,col 16)",
            "(line 366,col 5)-(line 366,col 61)",
            "(line 367,col 5)-(line 367,col 81)",
            "(line 368,col 5)-(line 368,col 36)",
            "(line 369,col 5)-(line 369,col 44)",
            "(line 370,col 5)-(line 370,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization()",
        "snippet": "  public void testCustomAdapterInvokedForMapElementDeserialization() {\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter())\n      .create();\n    Type mapType = new TypeToken<Map<String, StringHolder>>() {}.getType();\n    Map<String, StringHolder> mapOfFoo = gson.fromJson(\"{'foo':'Jacob:Tomaw'}\", mapType);\n    assertEquals(1, mapOfFoo.size());\n    StringHolder foo = mapOfFoo.get(\"foo\");\n    assertEquals(\"Jacob\", foo.part1);\n    assertEquals(\"Tomaw\", foo.part2);\n  }",
        "begin_line": 374,
        "end_line": 384,
        "comment": " Test created from Issue 70",
        "child_ranges": [
            "(line 375,col 5)-(line 377,col 16)",
            "(line 378,col 5)-(line 378,col 75)",
            "(line 379,col 5)-(line 379,col 89)",
            "(line 380,col 5)-(line 380,col 37)",
            "(line 381,col 5)-(line 381,col 43)",
            "(line 382,col 5)-(line 382,col 37)",
            "(line 383,col 5)-(line 383,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues()",
        "snippet": "  public void testEnsureCustomSerializerNotInvokedForNullValues() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(DataHolder.class, new DataHolderSerializer())\n        .create();\n    DataHolderWrapper target = new DataHolderWrapper(new DataHolder(\"abc\"));\n    String json = gson.toJson(target);\n    assertEquals(\"{\\\"wrappedData\\\":{\\\"myData\\\":\\\"abc\\\"}}\", json);\n  }",
        "begin_line": 386,
        "end_line": 393,
        "comment": "",
        "child_ranges": [
            "(line 387,col 5)-(line 389,col 18)",
            "(line 390,col 5)-(line 390,col 76)",
            "(line 391,col 5)-(line 391,col 38)",
            "(line 392,col 5)-(line 392,col 65)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues()",
        "snippet": "  public void testEnsureCustomDeserializerNotInvokedForNullValues() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(DataHolder.class, new DataHolderDeserializer())\n        .create();\n    String json = \"{wrappedData:null}\";\n    DataHolderWrapper actual = gson.fromJson(json, DataHolderWrapper.class);\n    assertNull(actual.wrappedData);\n  }",
        "begin_line": 395,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 396,col 5)-(line 398,col 18)",
            "(line 399,col 5)-(line 399,col 39)",
            "(line 400,col 5)-(line 400,col 76)",
            "(line 401,col 5)-(line 401,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate()",
        "snippet": "  public void testRegisterHierarchyAdapterForDate() {\n    Gson gson = new GsonBuilder()\n        .registerTypeHierarchyAdapter(Date.class, new DateTypeAdapter())\n        .create();\n    assertEquals(\"0\", gson.toJson(new Date(0)));\n    assertEquals(\"0\", gson.toJson(new java.sql.Date(0)));\n    assertEquals(new Date(0), gson.fromJson(\"0\", Date.class));\n    assertEquals(new java.sql.Date(0), gson.fromJson(\"0\", java.sql.Date.class));\n  }",
        "begin_line": 405,
        "end_line": 413,
        "comment": " Test created from Issue 352",
        "child_ranges": [
            "(line 406,col 5)-(line 408,col 18)",
            "(line 409,col 5)-(line 409,col 48)",
            "(line 410,col 5)-(line 410,col 57)",
            "(line 411,col 5)-(line 411,col 62)",
            "(line 412,col 5)-(line 412,col 80)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.DataHolder.DataHolder(java.lang.String)",
        "snippet": "    public DataHolder(String data) {\n      this.data = data;\n    }",
        "begin_line": 418,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 419,col 7)-(line 419,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.DataHolderWrapper.DataHolderWrapper(com.google.gson.functional.CustomTypeAdaptersTest.DataHolder)",
        "snippet": "    public DataHolderWrapper(DataHolder data) {\n      this.wrappedData = data;\n    }",
        "begin_line": 426,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 427,col 7)-(line 427,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.DataHolderSerializer.serialize(com.google.gson.functional.CustomTypeAdaptersTest.DataHolder, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "    @Override\n    public JsonElement serialize(DataHolder src, Type typeOfSrc, JsonSerializationContext context) {\n      JsonObject obj = new JsonObject();\n      obj.addProperty(\"myData\", src.data);\n      return obj;\n    }",
        "begin_line": 432,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 434,col 7)-(line 434,col 40)",
            "(line 435,col 7)-(line 435,col 42)",
            "(line 436,col 7)-(line 436,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.DataHolderDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "    @Override\n    public DataHolder deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      JsonObject jsonObj = json.getAsJsonObject();\n      JsonElement jsonElement = jsonObj.get(\"data\");\n      if (jsonElement == null || jsonElement.isJsonNull()) {\n        return new DataHolder(null);\n      }\n      return new DataHolder(jsonElement.getAsString());\n    }",
        "begin_line": 441,
        "end_line": 450,
        "comment": "",
        "child_ranges": [
            "(line 444,col 7)-(line 444,col 50)",
            "(line 445,col 7)-(line 445,col 52)",
            "(line 446,col 7)-(line 448,col 7)",
            "(line 449,col 7)-(line 449,col 55)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.DateTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "    @Override\n    public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {\n      return typeOfT == Date.class\n          ? new Date(json.getAsLong())\n          : new java.sql.Date(json.getAsLong());\n    }",
        "begin_line": 454,
        "end_line": 459,
        "comment": "",
        "child_ranges": [
            "(line 456,col 7)-(line 458,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.CustomTypeAdaptersTest.DateTypeAdapter.serialize(java.util.Date, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "    @Override\n    public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {\n      return new JsonPrimitive(src.getTime());\n    }",
        "begin_line": 460,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 462,col 7)-(line 462,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DelegateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java",
        "signature": "com.google.gson.functional.DelegateTypeAdapterTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    stats = new StatsTypeAdapterFactory();\n    gson = new GsonBuilder()\n      .registerTypeAdapterFactory(stats)\n      .create();\n  }",
        "begin_line": 43,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 45,col 5)-(line 45,col 18)",
            "(line 46,col 5)-(line 46,col 42)",
            "(line 47,col 5)-(line 49,col 16)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DelegateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java",
        "signature": "com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked()",
        "snippet": "  public void testDelegateInvoked() {\n    List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();\n    for (int i = 0; i < 10; ++i) {\n      bags.add(new BagOfPrimitives(i, i, i % 2 == 0, String.valueOf(i)));\n    }\n    String json = gson.toJson(bags);\n    bags = gson.fromJson(json, new TypeToken<List<BagOfPrimitives>>(){}.getType());\n    // 11: 1 list object, and 10 entries. stats invoked on all 5 fields\n    assertEquals(51, stats.numReads);\n    assertEquals(51, stats.numWrites);\n  }",
        "begin_line": 52,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 53,col 5)-(line 53,col 66)",
            "(line 54,col 5)-(line 56,col 5)",
            "(line 57,col 5)-(line 57,col 36)",
            "(line 58,col 5)-(line 58,col 83)",
            "(line 60,col 5)-(line 60,col 37)",
            "(line 61,col 5)-(line 61,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DelegateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java",
        "signature": "com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings()",
        "snippet": "  public void testDelegateInvokedOnStrings() {\n    String[] bags = {\"1\", \"2\", \"3\", \"4\"};\n    String json = gson.toJson(bags);\n    bags = gson.fromJson(json, String[].class);\n    // 1 array object with 4 elements.\n    assertEquals(5, stats.numReads);\n    assertEquals(5, stats.numWrites);\n  }",
        "begin_line": 64,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 65,col 5)-(line 65,col 41)",
            "(line 66,col 5)-(line 66,col 36)",
            "(line 67,col 5)-(line 67,col 47)",
            "(line 69,col 5)-(line 69,col 36)",
            "(line 70,col 5)-(line 70,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DelegateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java",
        "signature": "com.google.gson.functional.DelegateTypeAdapterTest.StatsTypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken<T>)",
        "snippet": "    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n      final TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);\n      return new TypeAdapter<T>() {\n        @Override\n        public void write(JsonWriter out, T value) throws IOException {\n          ++numWrites;\n          delegate.write(out, value);\n        }\n\n        @Override\n        public T read(JsonReader in) throws IOException {\n          ++numReads;\n          return delegate.read(in);\n        }\n      };\n    }",
        "begin_line": 77,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 78,col 7)-(line 78,col 74)",
            "(line 79,col 7)-(line 91,col 8)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DelegateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java",
        "signature": "com.google.gson.functional.DelegateTypeAdapterTest.StatsTypeAdapterFactory.Anonymous-21e9e876-4063-4481-b4a4-77620412bc77.write(com.google.gson.stream.JsonWriter, T)",
        "snippet": "        @Override\n        public void write(JsonWriter out, T value) throws IOException {\n          ++numWrites;\n          delegate.write(out, value);\n        }",
        "begin_line": 80,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 82,col 11)-(line 82,col 22)",
            "(line 83,col 11)-(line 83,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DelegateTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java",
        "signature": "com.google.gson.functional.DelegateTypeAdapterTest.StatsTypeAdapterFactory.Anonymous-6da44667-9a6a-4968-b3c2-6d56d01517a1.read(com.google.gson.stream.JsonReader)",
        "snippet": "        @Override\n        public T read(JsonReader in) throws IOException {\n          ++numReads;\n          return delegate.read(in);\n        }",
        "begin_line": 86,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 88,col 11)-(line 88,col 21)",
            "(line 89,col 11)-(line 89,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapAsArrayTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java",
        "signature": "com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter()",
        "snippet": "  public void testSerializeComplexMapWithTypeAdapter() {\n    Type type = new TypeToken<Map<Point, String>>() {}.getType();\n    Gson gson = new GsonBuilder()\n        .enableComplexMapKeySerialization()\n        .create();\n\n    Map<Point, String> original = new LinkedHashMap<Point, String>();\n    original.put(new Point(5, 5), \"a\");\n    original.put(new Point(8, 8), \"b\");\n    String json = gson.toJson(original, type);\n    assertEquals(\"[[{\\\"x\\\":5,\\\"y\\\":5},\\\"a\\\"],[{\\\"x\\\":8,\\\"y\\\":8},\\\"b\\\"]]\", json);\n    assertEquals(original, gson.<Map<Point, String>>fromJson(json, type));\n\n    // test that registering a type adapter for one map doesn't interfere with others\n    Map<String, Boolean> otherMap = new LinkedHashMap<String, Boolean>();\n    otherMap.put(\"t\", true);\n    otherMap.put(\"f\", false);\n    assertEquals(\"{\\\"t\\\":true,\\\"f\\\":false}\",\n        gson.toJson(otherMap, Map.class));\n    assertEquals(\"{\\\"t\\\":true,\\\"f\\\":false}\",\n        gson.toJson(otherMap, new TypeToken<Map<String, Boolean>>() {}.getType()));\n    assertEquals(otherMap, gson.<Object>fromJson(\"{\\\"t\\\":true,\\\"f\\\":false}\",\n        new TypeToken<Map<String, Boolean>>() {}.getType()));\n  }",
        "begin_line": 31,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 32,col 5)-(line 32,col 65)",
            "(line 33,col 5)-(line 35,col 18)",
            "(line 37,col 5)-(line 37,col 69)",
            "(line 38,col 5)-(line 38,col 39)",
            "(line 39,col 5)-(line 39,col 39)",
            "(line 40,col 5)-(line 40,col 46)",
            "(line 41,col 5)-(line 41,col 80)",
            "(line 42,col 5)-(line 42,col 74)",
            "(line 45,col 5)-(line 45,col 73)",
            "(line 46,col 5)-(line 46,col 28)",
            "(line 47,col 5)-(line 47,col 29)",
            "(line 48,col 5)-(line 49,col 42)",
            "(line 50,col 5)-(line 51,col 83)",
            "(line 52,col 5)-(line 53,col 61)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapAsArrayTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java",
        "signature": "com.google.gson.functional.MapAsArrayTypeAdapterTest.disabled_testTwoTypesCollapseToOneSerialize()",
        "snippet": "  public void disabled_testTwoTypesCollapseToOneSerialize() {\n    Gson gson = new GsonBuilder()\n        .enableComplexMapKeySerialization()\n        .create();\n\n    Map<Number, String> original = new LinkedHashMap<Number, String>();\n    original.put(new Double(1.0), \"a\");\n    original.put(new Float(1.0), \"b\");\n    try {\n      gson.toJson(original, new TypeToken<Map<Number, String>>() {}.getType());\n      fail(); // we no longer hash keys at serialization time\n    } catch (JsonSyntaxException expected) {\n    }\n  }",
        "begin_line": 56,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 59,col 18)",
            "(line 61,col 5)-(line 61,col 71)",
            "(line 62,col 5)-(line 62,col 39)",
            "(line 63,col 5)-(line 63,col 38)",
            "(line 64,col 5)-(line 68,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapAsArrayTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java",
        "signature": "com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize()",
        "snippet": "  public void testTwoTypesCollapseToOneDeserialize() {\n    Gson gson = new GsonBuilder()\n        .enableComplexMapKeySerialization()\n        .create();\n\n    String s = \"[[\\\"1.00\\\",\\\"a\\\"],[\\\"1.0\\\",\\\"b\\\"]]\";\n    try {\n      gson.fromJson(s, new TypeToken<Map<Double, String>>() {}.getType());\n      fail();\n    } catch (JsonSyntaxException expected) {\n    }\n  }",
        "begin_line": 71,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 74,col 18)",
            "(line 76,col 5)-(line 76,col 52)",
            "(line 77,col 5)-(line 81,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapAsArrayTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java",
        "signature": "com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect()",
        "snippet": "  public void testMultipleEnableComplexKeyRegistrationHasNoEffect() throws Exception {\n    Type type = new TypeToken<Map<Point, String>>() {}.getType();\n    Gson gson = new GsonBuilder()\n        .enableComplexMapKeySerialization()\n        .enableComplexMapKeySerialization()\n        .create();\n\n    Map<Point, String> original = new LinkedHashMap<Point, String>();\n    original.put(new Point(6, 5), \"abc\");\n    original.put(new Point(1, 8), \"def\");\n    String json = gson.toJson(original, type);\n    assertEquals(\"[[{\\\"x\\\":6,\\\"y\\\":5},\\\"abc\\\"],[{\\\"x\\\":1,\\\"y\\\":8},\\\"def\\\"]]\", json);\n    assertEquals(original, gson.<Map<Point, String>>fromJson(json, type));\n  }",
        "begin_line": 84,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 85,col 65)",
            "(line 86,col 5)-(line 89,col 18)",
            "(line 91,col 5)-(line 91,col 69)",
            "(line 92,col 5)-(line 92,col 41)",
            "(line 93,col 5)-(line 93,col 41)",
            "(line 94,col 5)-(line 94,col 46)",
            "(line 95,col 5)-(line 95,col 84)",
            "(line 96,col 5)-(line 96,col 74)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapAsArrayTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java",
        "signature": "com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization()",
        "snippet": "  public void testMapWithTypeVariableSerialization() {\n    Gson gson = new GsonBuilder().enableComplexMapKeySerialization().create();\n    PointWithProperty<Point> map = new PointWithProperty<Point>();\n    map.map.put(new Point(2, 3), new Point(4, 5));\n    Type type = new TypeToken<PointWithProperty<Point>>(){}.getType();\n    String json = gson.toJson(map, type);\n    assertEquals(\"{\\\"map\\\":[[{\\\"x\\\":2,\\\"y\\\":3},{\\\"x\\\":4,\\\"y\\\":5}]]}\", json);\n  }",
        "begin_line": 99,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 100,col 5)-(line 100,col 78)",
            "(line 101,col 5)-(line 101,col 66)",
            "(line 102,col 5)-(line 102,col 50)",
            "(line 103,col 5)-(line 103,col 70)",
            "(line 104,col 5)-(line 104,col 41)",
            "(line 105,col 5)-(line 105,col 76)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapAsArrayTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java",
        "signature": "com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization()",
        "snippet": "  public void testMapWithTypeVariableDeserialization() {\n    Gson gson = new GsonBuilder().enableComplexMapKeySerialization().create();\n    String json = \"{map:[[{x:2,y:3},{x:4,y:5}]]}\";\n    Type type = new TypeToken<PointWithProperty<Point>>(){}.getType();\n    PointWithProperty<Point> map = gson.fromJson(json, type);\n    Point key = map.map.keySet().iterator().next();\n    Point value = map.map.values().iterator().next();\n    assertEquals(new Point(2, 3), key);\n    assertEquals(new Point(4, 5), value);\n  }",
        "begin_line": 108,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 109,col 78)",
            "(line 110,col 5)-(line 110,col 50)",
            "(line 111,col 5)-(line 111,col 70)",
            "(line 112,col 5)-(line 112,col 61)",
            "(line 113,col 5)-(line 113,col 51)",
            "(line 114,col 5)-(line 114,col 53)",
            "(line 115,col 5)-(line 115,col 39)",
            "(line 116,col 5)-(line 116,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapAsArrayTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java",
        "signature": "com.google.gson.functional.MapAsArrayTypeAdapterTest.Point.Point(int, int)",
        "snippet": "    Point(int x, int y) {\n      this.x = x;\n      this.y = y;\n    }",
        "begin_line": 122,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 123,col 7)-(line 123,col 17)",
            "(line 124,col 7)-(line 124,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapAsArrayTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java",
        "signature": "com.google.gson.functional.MapAsArrayTypeAdapterTest.Point.Point()",
        "snippet": "    Point() {}",
        "begin_line": 126,
        "end_line": 126,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.gson.functional.MapAsArrayTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java",
        "signature": "com.google.gson.functional.MapAsArrayTypeAdapterTest.Point.equals(java.lang.Object)",
        "snippet": "    @Override public boolean equals(Object o) {\n      return o instanceof Point && ((Point) o).x == x && ((Point) o).y == y;\n    }",
        "begin_line": 127,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 128,col 7)-(line 128,col 76)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapAsArrayTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java",
        "signature": "com.google.gson.functional.MapAsArrayTypeAdapterTest.Point.hashCode()",
        "snippet": "    @Override public int hashCode() {\n      return x * 37 + y;\n    }",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 131,col 7)-(line 131,col 24)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapAsArrayTypeAdapterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java",
        "signature": "com.google.gson.functional.MapAsArrayTypeAdapterTest.Point.toString()",
        "snippet": "    @Override public String toString() {\n      return \"(\" + x + \",\" + y + \")\";\n    }",
        "begin_line": 133,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 134,col 7)-(line 134,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveCharacterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java",
        "signature": "com.google.gson.functional.PrimitiveCharacterTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 5)-(line 34,col 18)",
            "(line 35,col 5)-(line 35,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveCharacterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java",
        "signature": "com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization()",
        "snippet": "  public void testPrimitiveCharacterAutoboxedSerialization() {\n    assertEquals(\"\\\"A\\\"\", gson.toJson('A'));\n    assertEquals(\"\\\"A\\\"\", gson.toJson('A', char.class));\n    assertEquals(\"\\\"A\\\"\", gson.toJson('A', Character.class));\n  }",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 39,col 5)-(line 39,col 44)",
            "(line 40,col 5)-(line 40,col 56)",
            "(line 41,col 5)-(line 41,col 61)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrimitiveCharacterTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java",
        "signature": "com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization()",
        "snippet": "  public void testPrimitiveCharacterAutoboxedDeserialization() {\n    char expected = 'a';\n    char actual = gson.fromJson(\"a\", char.class);\n    assertEquals(expected, actual);\n\n    actual = gson.fromJson(\"\\\"a\\\"\", char.class);\n    assertEquals(expected, actual);\n\n    actual = gson.fromJson(\"a\", Character.class);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 44,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 45,col 5)-(line 45,col 24)",
            "(line 46,col 5)-(line 46,col 49)",
            "(line 47,col 5)-(line 47,col 35)",
            "(line 49,col 5)-(line 49,col 48)",
            "(line 50,col 5)-(line 50,col 35)",
            "(line 52,col 5)-(line 52,col 49)",
            "(line 53,col 5)-(line 53,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 51,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 53,col 5)-(line 53,col 18)",
            "(line 54,col 5)-(line 54,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.testSubClassSerialization()",
        "snippet": "  public void testSubClassSerialization() throws Exception {\n    SubTypeOfNested target = new SubTypeOfNested(new BagOfPrimitives(10, 20, false, \"stringValue\"),\n        new BagOfPrimitives(30, 40, true, \"stringValue\"));\n    assertEquals(target.getExpectedJson(), gson.toJson(target));\n  }",
        "begin_line": 57,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 59,col 58)",
            "(line 60,col 5)-(line 60,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.testSubClassDeserialization()",
        "snippet": "  public void testSubClassDeserialization() throws Exception {\n    String json = \"{\\\"value\\\":5,\\\"primitive1\\\":{\\\"longValue\\\":10,\\\"intValue\\\":20,\"\n        + \"\\\"booleanValue\\\":false,\\\"stringValue\\\":\\\"stringValue\\\"},\\\"primitive2\\\":\"\n        + \"{\\\"longValue\\\":30,\\\"intValue\\\":40,\\\"booleanValue\\\":true,\"\n        + \"\\\"stringValue\\\":\\\"stringValue\\\"}}\";\n    SubTypeOfNested target = gson.fromJson(json, SubTypeOfNested.class);\n    assertEquals(json, target.getExpectedJson());\n  }",
        "begin_line": 63,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 67,col 46)",
            "(line 68,col 5)-(line 68,col 72)",
            "(line 69,col 5)-(line 69,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization()",
        "snippet": "  public void testClassWithBaseFieldSerialization() {\n    ClassWithBaseField sub = new ClassWithBaseField(new Sub());\n    JsonObject json = (JsonObject) gson.toJsonTree(sub);\n    JsonElement base = json.getAsJsonObject().get(ClassWithBaseField.FIELD_KEY);\n    assertEquals(Sub.SUB_NAME, base.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString());\n  }",
        "begin_line": 72,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 73,col 5)-(line 73,col 63)",
            "(line 74,col 5)-(line 74,col 56)",
            "(line 75,col 5)-(line 75,col 80)",
            "(line 76,col 5)-(line 76,col 92)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization()",
        "snippet": "  public void testClassWithBaseArrayFieldSerialization() {\n    Base[] baseClasses = new Base[]{ new Sub(), new Sub()};\n    ClassWithBaseArrayField sub = new ClassWithBaseArrayField(baseClasses);\n    JsonObject json = gson.toJsonTree(sub).getAsJsonObject();\n    JsonArray bases = json.get(ClassWithBaseArrayField.FIELD_KEY).getAsJsonArray();\n    for (JsonElement element : bases) { \n      assertEquals(Sub.SUB_NAME, element.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString());\n    }\n  }",
        "begin_line": 79,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 80,col 5)-(line 80,col 59)",
            "(line 81,col 5)-(line 81,col 75)",
            "(line 82,col 5)-(line 82,col 61)",
            "(line 83,col 5)-(line 83,col 83)",
            "(line 84,col 5)-(line 86,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization()",
        "snippet": "  public void testClassWithBaseCollectionFieldSerialization() {\n    Collection<Base> baseClasses = new ArrayList<Base>();\n    baseClasses.add(new Sub());\n    baseClasses.add(new Sub());\n    ClassWithBaseCollectionField sub = new ClassWithBaseCollectionField(baseClasses);\n    JsonObject json = gson.toJsonTree(sub).getAsJsonObject();\n    JsonArray bases = json.get(ClassWithBaseArrayField.FIELD_KEY).getAsJsonArray();\n    for (JsonElement element : bases) { \n      assertEquals(Sub.SUB_NAME, element.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString());\n    }\n  }",
        "begin_line": 89,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 90,col 5)-(line 90,col 57)",
            "(line 91,col 5)-(line 91,col 31)",
            "(line 92,col 5)-(line 92,col 31)",
            "(line 93,col 5)-(line 93,col 85)",
            "(line 94,col 5)-(line 94,col 61)",
            "(line 95,col 5)-(line 95,col 83)",
            "(line 96,col 5)-(line 98,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub()",
        "snippet": "  public void testBaseSerializedAsSub() {\n    Base base = new Sub();\n    JsonObject json = gson.toJsonTree(base).getAsJsonObject();\n    assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString());\n  }",
        "begin_line": 101,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 102,col 5)-(line 102,col 26)",
            "(line 103,col 5)-(line 103,col 62)",
            "(line 104,col 5)-(line 104,col 74)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod()",
        "snippet": "  public void testBaseSerializedAsSubForToJsonMethod() {\n    Base base = new Sub();\n    String json = gson.toJson(base);\n    assertTrue(json.contains(Sub.SUB_NAME));\n  }",
        "begin_line": 107,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 108,col 5)-(line 108,col 26)",
            "(line 109,col 5)-(line 109,col 36)",
            "(line 110,col 5)-(line 110,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType()",
        "snippet": "  public void testBaseSerializedAsBaseWhenSpecifiedWithExplicitType() {\n    Base base = new Sub();\n    JsonObject json = gson.toJsonTree(base, Base.class).getAsJsonObject();\n    assertEquals(Base.BASE_NAME, json.get(Base.BASE_FIELD_KEY).getAsString());\n    assertNull(json.get(Sub.SUB_FIELD_KEY));\n  }",
        "begin_line": 113,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 26)",
            "(line 115,col 5)-(line 115,col 74)",
            "(line 116,col 5)-(line 116,col 78)",
            "(line 117,col 5)-(line 117,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod()",
        "snippet": "  public void testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod() {\n    Base base = new Sub();\n    String json = gson.toJson(base, Base.class);\n    assertTrue(json.contains(Base.BASE_NAME));\n    assertFalse(json.contains(Sub.SUB_FIELD_KEY));\n  }",
        "begin_line": 120,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 26)",
            "(line 122,col 5)-(line 122,col 48)",
            "(line 123,col 5)-(line 123,col 46)",
            "(line 124,col 5)-(line 124,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType()",
        "snippet": "  public void testBaseSerializedAsSubWhenSpecifiedWithExplicitType() {\n    Base base = new Sub();\n    JsonObject json = gson.toJsonTree(base, Sub.class).getAsJsonObject();\n    assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString());\n  }",
        "begin_line": 127,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 128,col 5)-(line 128,col 26)",
            "(line 129,col 5)-(line 129,col 73)",
            "(line 130,col 5)-(line 130,col 74)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod()",
        "snippet": "  public void testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod() {\n    Base base = new Sub();\n    String json = gson.toJson(base, Sub.class);\n    assertTrue(json.contains(Sub.SUB_NAME));\n  }",
        "begin_line": 133,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 134,col 5)-(line 134,col 26)",
            "(line 135,col 5)-(line 135,col 47)",
            "(line 136,col 5)-(line 136,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "SubTypeOfNested(BagOfPrimitives, BagOfPrimitives)",
        "snippet": "    public SubTypeOfNested(BagOfPrimitives primitive1, BagOfPrimitives primitive2) {\n      super(primitive1, primitive2);\n    }",
        "begin_line": 142,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 143,col 7)-(line 143,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.SubTypeOfNested.appendFields(java.lang.StringBuilder)",
        "snippet": "    @Override\n    public void appendFields(StringBuilder sb) {\n      sb.append(\"\\\"value\\\":\").append(value).append(\",\");\n      super.appendFields(sb);\n    }",
        "begin_line": 146,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 148,col 7)-(line 148,col 56)",
            "(line 149,col 7)-(line 149,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization()",
        "snippet": "  public void testSubInterfacesOfCollectionSerialization() throws Exception {\n    List<Integer> list = new LinkedList<Integer>();\n    list.add(0);\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    Queue<Long> queue = new LinkedList<Long>();\n    queue.add(0L);\n    queue.add(1L);\n    queue.add(2L);\n    queue.add(3L);\n    Set<Float> set = new TreeSet<Float>();\n    set.add(0.1F);\n    set.add(0.2F);\n    set.add(0.3F);\n    set.add(0.4F);\n    SortedSet<Character> sortedSet = new TreeSet<Character>();\n    sortedSet.add('a');\n    sortedSet.add('b');\n    sortedSet.add('c');\n    sortedSet.add('d');\n    ClassWithSubInterfacesOfCollection target =\n        new ClassWithSubInterfacesOfCollection(list, queue, set, sortedSet);\n    assertEquals(target.getExpectedJson(), gson.toJson(target));\n  }",
        "begin_line": 153,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 154,col 5)-(line 154,col 51)",
            "(line 155,col 5)-(line 155,col 16)",
            "(line 156,col 5)-(line 156,col 16)",
            "(line 157,col 5)-(line 157,col 16)",
            "(line 158,col 5)-(line 158,col 16)",
            "(line 159,col 5)-(line 159,col 47)",
            "(line 160,col 5)-(line 160,col 18)",
            "(line 161,col 5)-(line 161,col 18)",
            "(line 162,col 5)-(line 162,col 18)",
            "(line 163,col 5)-(line 163,col 18)",
            "(line 164,col 5)-(line 164,col 42)",
            "(line 165,col 5)-(line 165,col 18)",
            "(line 166,col 5)-(line 166,col 18)",
            "(line 167,col 5)-(line 167,col 18)",
            "(line 168,col 5)-(line 168,col 18)",
            "(line 169,col 5)-(line 169,col 62)",
            "(line 170,col 5)-(line 170,col 23)",
            "(line 171,col 5)-(line 171,col 23)",
            "(line 172,col 5)-(line 172,col 23)",
            "(line 173,col 5)-(line 173,col 23)",
            "(line 174,col 5)-(line 175,col 76)",
            "(line 176,col 5)-(line 176,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization()",
        "snippet": "  public void testSubInterfacesOfCollectionDeserialization() throws Exception {\n    String json = \"{\\\"list\\\":[0,1,2,3],\\\"queue\\\":[0,1,2,3],\\\"set\\\":[0.1,0.2,0.3,0.4],\"\n        + \"\\\"sortedSet\\\":[\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\"]\"\n        + \"}\";\n    ClassWithSubInterfacesOfCollection target = \n      gson.fromJson(json, ClassWithSubInterfacesOfCollection.class);\n    assertTrue(target.listContains(0, 1, 2, 3));\n    assertTrue(target.queueContains(0, 1, 2, 3));\n    assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F));\n    assertTrue(target.sortedSetContains('a', 'b', 'c', 'd'));\n  }",
        "begin_line": 179,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 180,col 5)-(line 182,col 14)",
            "(line 183,col 5)-(line 184,col 68)",
            "(line 185,col 5)-(line 185,col 48)",
            "(line 186,col 5)-(line 186,col 49)",
            "(line 187,col 5)-(line 187,col 59)",
            "(line 188,col 5)-(line 188,col 61)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.ClassWithSubInterfacesOfCollection.ClassWithSubInterfacesOfCollection(java.util.List<java.lang.Integer>, java.util.Queue<java.lang.Long>, java.util.Set<java.lang.Float>, java.util.SortedSet<java.lang.Character>)",
        "snippet": "    public ClassWithSubInterfacesOfCollection(List<Integer> list, Queue<Long> queue, Set<Float> set,\n        SortedSet<Character> sortedSet) {\n      this.list = list;\n      this.queue = queue;\n      this.set = set;\n      this.sortedSet = sortedSet;\n    }",
        "begin_line": 197,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 199,col 7)-(line 199,col 23)",
            "(line 200,col 7)-(line 200,col 25)",
            "(line 201,col 7)-(line 201,col 21)",
            "(line 202,col 7)-(line 202,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.ClassWithSubInterfacesOfCollection.listContains(int...)",
        "snippet": "    boolean listContains(int... values) {\n      for (int value : values) {\n        if (!list.contains(value)) {\n          return false;\n        }\n      }\n      return true;\n    }",
        "begin_line": 205,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 206,col 7)-(line 210,col 7)",
            "(line 211,col 7)-(line 211,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.ClassWithSubInterfacesOfCollection.queueContains(long...)",
        "snippet": "    boolean queueContains(long... values) {\n      for (long value : values) {\n        if (!queue.contains(value)) {\n          return false;\n        }\n      }\n      return true;      \n    }",
        "begin_line": 214,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 215,col 7)-(line 219,col 7)",
            "(line 220,col 7)-(line 220,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.ClassWithSubInterfacesOfCollection.setContains(float...)",
        "snippet": "    boolean setContains(float... values) {\n      for (float value : values) {\n        if (!set.contains(value)) {\n          return false;\n        }\n      }\n      return true;\n    }",
        "begin_line": 223,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 224,col 7)-(line 228,col 7)",
            "(line 229,col 7)-(line 229,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.ClassWithSubInterfacesOfCollection.sortedSetContains(char...)",
        "snippet": "    boolean sortedSetContains(char... values) {\n      for (char value : values) {\n        if (!sortedSet.contains(value)) {\n          return false;\n        }\n      }\n      return true;      \n    }",
        "begin_line": 232,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 233,col 7)-(line 237,col 7)",
            "(line 238,col 7)-(line 238,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.ClassWithSubInterfacesOfCollection.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n      sb.append(\"\\\"list\\\":\");\n      append(sb, list).append(\",\");\n      sb.append(\"\\\"queue\\\":\");\n      append(sb, queue).append(\",\");\n      sb.append(\"\\\"set\\\":\");\n      append(sb, set).append(\",\");\n      sb.append(\"\\\"sortedSet\\\":\");\n      append(sb, sortedSet);\n      sb.append(\"}\");\n      return sb.toString();\n    }",
        "begin_line": 241,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 242,col 7)-(line 242,col 45)",
            "(line 243,col 7)-(line 243,col 21)",
            "(line 244,col 7)-(line 244,col 29)",
            "(line 245,col 7)-(line 245,col 35)",
            "(line 246,col 7)-(line 246,col 30)",
            "(line 247,col 7)-(line 247,col 36)",
            "(line 248,col 7)-(line 248,col 28)",
            "(line 249,col 7)-(line 249,col 34)",
            "(line 250,col 7)-(line 250,col 34)",
            "(line 251,col 7)-(line 251,col 28)",
            "(line 252,col 7)-(line 252,col 21)",
            "(line 253,col 7)-(line 253,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InheritanceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
        "signature": "com.google.gson.functional.InheritanceTest.ClassWithSubInterfacesOfCollection.append(java.lang.StringBuilder, java.util.Collection<?>)",
        "snippet": "    private StringBuilder append(StringBuilder sb, Collection<?> c) {\n      sb.append(\"[\");\n      boolean first = true;\n      for (Object o : c) {\n        if (!first) {\n          sb.append(\",\");\n        } else {\n          first = false;\n        }\n        if (o instanceof String || o instanceof Character) {\n          sb.append('\\\"');\n        }\n        sb.append(o.toString());\n        if (o instanceof String || o instanceof Character) {\n          sb.append('\\\"');\n        }\n      }\n      sb.append(\"]\");\n      return sb;\n    }",
        "begin_line": 256,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 257,col 7)-(line 257,col 21)",
            "(line 258,col 7)-(line 258,col 27)",
            "(line 259,col 7)-(line 272,col 7)",
            "(line 273,col 7)-(line 273,col 21)",
            "(line 274,col 7)-(line 274,col 16)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 57,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 59,col 5)-(line 59,col 18)",
            "(line 60,col 5)-(line 60,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapSerialization()",
        "snippet": "  public void testMapSerialization() {\n    Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n    map.put(\"a\", 1);\n    map.put(\"b\", 2);\n    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n    String json = gson.toJson(map, typeOfMap);\n    assertTrue(json.contains(\"\\\"a\\\":1\"));\n    assertTrue(json.contains(\"\\\"b\\\":2\"));\n  }",
        "begin_line": 63,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 64,col 68)",
            "(line 65,col 5)-(line 65,col 20)",
            "(line 66,col 5)-(line 66,col 20)",
            "(line 67,col 5)-(line 67,col 72)",
            "(line 68,col 5)-(line 68,col 46)",
            "(line 69,col 5)-(line 69,col 41)",
            "(line 70,col 5)-(line 70,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapDeserialization()",
        "snippet": "  public void testMapDeserialization() {\n    String json = \"{\\\"a\\\":1,\\\"b\\\":2}\";\n    Type typeOfMap = new TypeToken<Map<String,Integer>>(){}.getType();\n    Map<String, Integer> target = gson.fromJson(json, typeOfMap);\n    assertEquals(1, target.get(\"a\").intValue());\n    assertEquals(2, target.get(\"b\").intValue());\n  }",
        "begin_line": 73,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 74,col 5)-(line 74,col 38)",
            "(line 75,col 5)-(line 75,col 70)",
            "(line 76,col 5)-(line 76,col 65)",
            "(line 77,col 5)-(line 77,col 48)",
            "(line 78,col 5)-(line 78,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testRawMapSerialization()",
        "snippet": "  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testRawMapSerialization() {\n    Map map = new LinkedHashMap();\n    map.put(\"a\", 1);\n    map.put(\"b\", \"string\");\n    String json = gson.toJson(map);\n    assertTrue(json.contains(\"\\\"a\\\":1\"));\n    assertTrue(json.contains(\"\\\"b\\\":\\\"string\\\"\"));\n  }",
        "begin_line": 81,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 83,col 5)-(line 83,col 34)",
            "(line 84,col 5)-(line 84,col 20)",
            "(line 85,col 5)-(line 85,col 27)",
            "(line 86,col 5)-(line 86,col 35)",
            "(line 87,col 5)-(line 87,col 41)",
            "(line 88,col 5)-(line 88,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapSerializationEmpty()",
        "snippet": "  public void testMapSerializationEmpty() {\n    Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n    String json = gson.toJson(map, typeOfMap);\n    assertEquals(\"{}\", json);\n  }",
        "begin_line": 91,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 92,col 68)",
            "(line 93,col 5)-(line 93,col 72)",
            "(line 94,col 5)-(line 94,col 46)",
            "(line 95,col 5)-(line 95,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapDeserializationEmpty()",
        "snippet": "  public void testMapDeserializationEmpty() {\n    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n    Map<String, Integer> map = gson.fromJson(\"{}\", typeOfMap);\n    assertTrue(map.isEmpty());\n  }",
        "begin_line": 98,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 99,col 5)-(line 99,col 72)",
            "(line 100,col 5)-(line 100,col 62)",
            "(line 101,col 5)-(line 101,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapSerializationWithNullValue()",
        "snippet": "  public void testMapSerializationWithNullValue() {\n    Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n    map.put(\"abc\", null);\n    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n    String json = gson.toJson(map, typeOfMap);\n\n    // Maps are represented as JSON objects, so ignoring null field\n    assertEquals(\"{}\", json);\n  }",
        "begin_line": 104,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 105,col 5)-(line 105,col 68)",
            "(line 106,col 5)-(line 106,col 25)",
            "(line 107,col 5)-(line 107,col 72)",
            "(line 108,col 5)-(line 108,col 46)",
            "(line 111,col 5)-(line 111,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapDeserializationWithNullValue()",
        "snippet": "  public void testMapDeserializationWithNullValue() {\n    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n    Map<String, Integer> map = gson.fromJson(\"{\\\"abc\\\":null}\", typeOfMap);\n    assertEquals(1, map.size());\n    assertNull(map.get(\"abc\"));\n  }",
        "begin_line": 114,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 115,col 5)-(line 115,col 72)",
            "(line 116,col 5)-(line 116,col 74)",
            "(line 117,col 5)-(line 117,col 32)",
            "(line 118,col 5)-(line 118,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls()",
        "snippet": "  public void testMapSerializationWithNullValueButSerializeNulls() {\n    gson = new GsonBuilder().serializeNulls().create();\n    Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n    map.put(\"abc\", null);\n    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n    String json = gson.toJson(map, typeOfMap);\n\n    assertEquals(\"{\\\"abc\\\":null}\", json);\n  }",
        "begin_line": 121,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 122,col 5)-(line 122,col 55)",
            "(line 123,col 5)-(line 123,col 68)",
            "(line 124,col 5)-(line 124,col 25)",
            "(line 125,col 5)-(line 125,col 72)",
            "(line 126,col 5)-(line 126,col 46)",
            "(line 128,col 5)-(line 128,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapSerializationWithNullKey()",
        "snippet": "  public void testMapSerializationWithNullKey() {\n    Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n    map.put(null, 123);\n    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n    String json = gson.toJson(map, typeOfMap);\n\n    assertEquals(\"{\\\"null\\\":123}\", json);\n  }",
        "begin_line": 131,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 132,col 5)-(line 132,col 68)",
            "(line 133,col 5)-(line 133,col 23)",
            "(line 134,col 5)-(line 134,col 72)",
            "(line 135,col 5)-(line 135,col 46)",
            "(line 137,col 5)-(line 137,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapDeserializationWithNullKey()",
        "snippet": "  public void testMapDeserializationWithNullKey() {\n    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n    Map<String, Integer> map = gson.fromJson(\"{\\\"null\\\":123}\", typeOfMap);\n    assertEquals(1, map.size());\n    assertEquals(123, map.get(\"null\").intValue());\n    assertNull(map.get(null));\n\n    map = gson.fromJson(\"{null:123}\", typeOfMap);\n    assertEquals(1, map.size());\n    assertEquals(123, map.get(\"null\").intValue());\n    assertNull(map.get(null));\n  }",
        "begin_line": 140,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 141,col 72)",
            "(line 142,col 5)-(line 142,col 74)",
            "(line 143,col 5)-(line 143,col 32)",
            "(line 144,col 5)-(line 144,col 50)",
            "(line 145,col 5)-(line 145,col 30)",
            "(line 147,col 5)-(line 147,col 49)",
            "(line 148,col 5)-(line 148,col 32)",
            "(line 149,col 5)-(line 149,col 50)",
            "(line 150,col 5)-(line 150,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys()",
        "snippet": "  public void testMapSerializationWithIntegerKeys() {\n    Map<Integer, String> map = new LinkedHashMap<Integer, String>();\n    map.put(123, \"456\");\n    Type typeOfMap = new TypeToken<Map<Integer, String>>() {}.getType();\n    String json = gson.toJson(map, typeOfMap);\n\n    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n  }",
        "begin_line": 153,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 154,col 5)-(line 154,col 68)",
            "(line 155,col 5)-(line 155,col 24)",
            "(line 156,col 5)-(line 156,col 72)",
            "(line 157,col 5)-(line 157,col 46)",
            "(line 159,col 5)-(line 159,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys()",
        "snippet": "  public void testMapDeserializationWithIntegerKeys() {\n    Type typeOfMap = new TypeToken<Map<Integer, String>>() {}.getType();\n    Map<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n    assertEquals(1, map.size());\n    assertTrue(map.containsKey(123));\n    assertEquals(\"456\", map.get(123));\n  }",
        "begin_line": 162,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 72)",
            "(line 164,col 5)-(line 164,col 77)",
            "(line 165,col 5)-(line 165,col 32)",
            "(line 166,col 5)-(line 166,col 37)",
            "(line 167,col 5)-(line 167,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapDeserializationWithUnquotedIntegerKeys()",
        "snippet": "  public void testMapDeserializationWithUnquotedIntegerKeys() {\n    Type typeOfMap = new TypeToken<Map<Integer, String>>() {}.getType();\n    Map<Integer, String> map = gson.fromJson(\"{123:\\\"456\\\"}\", typeOfMap);\n    assertEquals(1, map.size());\n    assertTrue(map.containsKey(123));\n    assertEquals(\"456\", map.get(123));\n  }",
        "begin_line": 170,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 171,col 5)-(line 171,col 72)",
            "(line 172,col 5)-(line 172,col 73)",
            "(line 173,col 5)-(line 173,col 32)",
            "(line 174,col 5)-(line 174,col 37)",
            "(line 175,col 5)-(line 175,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapDeserializationWithLongKeys()",
        "snippet": "  public void testMapDeserializationWithLongKeys() {\n    long longValue = 9876543210L;\n    String json = String.format(\"{\\\"%d\\\":\\\"456\\\"}\", longValue);\n    Type typeOfMap = new TypeToken<Map<Long, String>>() {}.getType();\n    Map<Long, String> map = gson.fromJson(json, typeOfMap);\n    assertEquals(1, map.size());\n    assertTrue(map.containsKey(longValue));\n    assertEquals(\"456\", map.get(longValue));\n  }",
        "begin_line": 178,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 179,col 5)-(line 179,col 33)",
            "(line 180,col 5)-(line 180,col 63)",
            "(line 181,col 5)-(line 181,col 69)",
            "(line 182,col 5)-(line 182,col 59)",
            "(line 183,col 5)-(line 183,col 32)",
            "(line 184,col 5)-(line 184,col 43)",
            "(line 185,col 5)-(line 185,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapDeserializationWithUnquotedLongKeys()",
        "snippet": "  public void testMapDeserializationWithUnquotedLongKeys() {\n    long longKey = 9876543210L;\n    String json = String.format(\"{%d:\\\"456\\\"}\", longKey);\n    Type typeOfMap = new TypeToken<Map<Long, String>>() {}.getType();\n    Map<Long, String> map = gson.fromJson(json, typeOfMap);\n    assertEquals(1, map.size());\n    assertTrue(map.containsKey(longKey));\n    assertEquals(\"456\", map.get(longKey));\n  }",
        "begin_line": 188,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 31)",
            "(line 190,col 5)-(line 190,col 57)",
            "(line 191,col 5)-(line 191,col 69)",
            "(line 192,col 5)-(line 192,col 59)",
            "(line 193,col 5)-(line 193,col 32)",
            "(line 194,col 5)-(line 194,col 41)",
            "(line 195,col 5)-(line 195,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testHashMapDeserialization()",
        "snippet": "  public void testHashMapDeserialization() throws Exception {\n    Type typeOfMap = new TypeToken<HashMap<Integer, String>>() {}.getType();\n    HashMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n    assertEquals(1, map.size());\n    assertTrue(map.containsKey(123));\n    assertEquals(\"456\", map.get(123));\n  }",
        "begin_line": 198,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 199,col 5)-(line 199,col 76)",
            "(line 200,col 5)-(line 200,col 81)",
            "(line 201,col 5)-(line 201,col 32)",
            "(line 202,col 5)-(line 202,col 37)",
            "(line 203,col 5)-(line 203,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testSortedMap()",
        "snippet": "  public void testSortedMap() throws Exception {\n    Type typeOfMap = new TypeToken<SortedMap<Integer, String>>() {}.getType();\n    SortedMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n    assertEquals(1, map.size());\n    assertTrue(map.containsKey(123));\n    assertEquals(\"456\", map.get(123));\n  }",
        "begin_line": 206,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 207,col 5)-(line 207,col 78)",
            "(line 208,col 5)-(line 208,col 83)",
            "(line 209,col 5)-(line 209,col 32)",
            "(line 210,col 5)-(line 210,col 37)",
            "(line 211,col 5)-(line 211,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testConcurrentMap()",
        "snippet": "  public void testConcurrentMap() throws Exception {\n    Type typeOfMap = new TypeToken<ConcurrentMap<Integer, String>>() {}.getType();\n    ConcurrentMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n    assertEquals(1, map.size());\n    assertTrue(map.containsKey(123));\n    assertEquals(\"456\", map.get(123));\n    String json = gson.toJson(map);\n    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n  }",
        "begin_line": 214,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 215,col 5)-(line 215,col 82)",
            "(line 216,col 5)-(line 216,col 87)",
            "(line 217,col 5)-(line 217,col 32)",
            "(line 218,col 5)-(line 218,col 37)",
            "(line 219,col 5)-(line 219,col 38)",
            "(line 220,col 5)-(line 220,col 35)",
            "(line 221,col 5)-(line 221,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testConcurrentHashMap()",
        "snippet": "  public void testConcurrentHashMap() throws Exception {\n    Type typeOfMap = new TypeToken<ConcurrentHashMap<Integer, String>>() {}.getType();\n    ConcurrentHashMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n    assertEquals(1, map.size());\n    assertTrue(map.containsKey(123));\n    assertEquals(\"456\", map.get(123));\n    String json = gson.toJson(map);\n    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n  }",
        "begin_line": 224,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 225,col 86)",
            "(line 226,col 5)-(line 226,col 91)",
            "(line 227,col 5)-(line 227,col 32)",
            "(line 228,col 5)-(line 228,col 37)",
            "(line 229,col 5)-(line 229,col 38)",
            "(line 230,col 5)-(line 230,col 35)",
            "(line 231,col 5)-(line 231,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testConcurrentNavigableMap()",
        "snippet": "  public void testConcurrentNavigableMap() throws Exception {\n    Type typeOfMap = new TypeToken<ConcurrentNavigableMap<Integer, String>>() {}.getType();\n    ConcurrentNavigableMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n    assertEquals(1, map.size());\n    assertTrue(map.containsKey(123));\n    assertEquals(\"456\", map.get(123));\n    String json = gson.toJson(map);\n    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n  }",
        "begin_line": 234,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 235,col 5)-(line 235,col 91)",
            "(line 236,col 5)-(line 236,col 96)",
            "(line 237,col 5)-(line 237,col 32)",
            "(line 238,col 5)-(line 238,col 37)",
            "(line 239,col 5)-(line 239,col 38)",
            "(line 240,col 5)-(line 240,col 35)",
            "(line 241,col 5)-(line 241,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testConcurrentSkipListMap()",
        "snippet": "  public void testConcurrentSkipListMap() throws Exception {\n    Type typeOfMap = new TypeToken<ConcurrentSkipListMap<Integer, String>>() {}.getType();\n    ConcurrentSkipListMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n    assertEquals(1, map.size());\n    assertTrue(map.containsKey(123));\n    assertEquals(\"456\", map.get(123));\n    String json = gson.toJson(map);\n    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n  }",
        "begin_line": 244,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 245,col 90)",
            "(line 246,col 5)-(line 246,col 95)",
            "(line 247,col 5)-(line 247,col 32)",
            "(line 248,col 5)-(line 248,col 37)",
            "(line 249,col 5)-(line 249,col 38)",
            "(line 250,col 5)-(line 250,col 35)",
            "(line 251,col 5)-(line 251,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization()",
        "snippet": "  public void testParameterizedMapSubclassSerialization() {\n    MyParameterizedMap<String, String> map = new MyParameterizedMap<String, String>(10);\n    map.put(\"a\", \"b\");\n    Type type = new TypeToken<MyParameterizedMap<String, String>>() {}.getType();\n    String json = gson.toJson(map, type);\n    assertTrue(json.contains(\"\\\"a\\\":\\\"b\\\"\"));\n  }",
        "begin_line": 254,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 255,col 5)-(line 255,col 88)",
            "(line 256,col 5)-(line 256,col 22)",
            "(line 257,col 5)-(line 257,col 81)",
            "(line 258,col 5)-(line 258,col 41)",
            "(line 259,col 5)-(line 259,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.MyParameterizedMap.MyParameterizedMap(int)",
        "snippet": "    MyParameterizedMap(int foo) {\n      this.foo = foo;\n    }",
        "begin_line": 265,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 266,col 7)-(line 266,col 21)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapSubclassSerialization()",
        "snippet": "  public void testMapSubclassSerialization() {\n    MyMap map = new MyMap();\n    map.put(\"a\", \"b\");\n    String json = gson.toJson(map, MyMap.class);\n    assertTrue(json.contains(\"\\\"a\\\":\\\"b\\\"\"));\n  }",
        "begin_line": 270,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 271,col 5)-(line 271,col 28)",
            "(line 272,col 5)-(line 272,col 22)",
            "(line 273,col 5)-(line 273,col 48)",
            "(line 274,col 5)-(line 274,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization()",
        "snippet": "  public void testMapStandardSubclassDeserialization() {\n    String json = \"{a:'1',b:'2'}\";\n    Type type = new TypeToken<LinkedHashMap<String, String>>() {}.getType();\n    LinkedHashMap<String, Integer> map = gson.fromJson(json, type);\n    assertEquals(\"1\", map.get(\"a\"));\n    assertEquals(\"2\", map.get(\"b\"));\n  }",
        "begin_line": 277,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 34)",
            "(line 279,col 5)-(line 279,col 76)",
            "(line 280,col 5)-(line 280,col 67)",
            "(line 281,col 5)-(line 281,col 36)",
            "(line 282,col 5)-(line 282,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapSubclassDeserialization()",
        "snippet": "  public void testMapSubclassDeserialization() {\n    Gson gson = new GsonBuilder().registerTypeAdapter(MyMap.class, new InstanceCreator<MyMap>() {\n      public MyMap createInstance(Type type) {\n        return new MyMap();\n      }\n    }).create();\n    String json = \"{\\\"a\\\":1,\\\"b\\\":2}\";\n    MyMap map = gson.fromJson(json, MyMap.class);\n    assertEquals(\"1\", map.get(\"a\"));\n    assertEquals(\"2\", map.get(\"b\"));\n  }",
        "begin_line": 285,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 286,col 5)-(line 290,col 16)",
            "(line 291,col 5)-(line 291,col 38)",
            "(line 292,col 5)-(line 292,col 49)",
            "(line 293,col 5)-(line 293,col 36)",
            "(line 294,col 5)-(line 294,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.Anonymous-661dd134-48f9-4d63-8d95-d5263a7a0fd6.createInstance(java.lang.reflect.Type)",
        "snippet": "      public MyMap createInstance(Type type) {\n        return new MyMap();\n      }",
        "begin_line": 287,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 288,col 9)-(line 288,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType()",
        "snippet": "  public void testCustomSerializerForSpecificMapType() {\n    Type type = $Gson$Types.newParameterizedTypeWithOwner(\n        null, Map.class, String.class, Long.class);\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(type, new JsonSerializer<Map<String, Long>>() {\n          public JsonElement serialize(Map<String, Long> src, Type typeOfSrc,\n              JsonSerializationContext context) {\n            JsonArray array = new JsonArray();\n            for (long value : src.values()) {\n              array.add(new JsonPrimitive(value));\n            }\n            return array;\n          }\n        }).create();\n\n    Map<String, Long> src = new LinkedHashMap<String, Long>();\n    src.put(\"one\", 1L);\n    src.put(\"two\", 2L);\n    src.put(\"three\", 3L);\n\n    assertEquals(\"[1,2,3]\", gson.toJson(src, type));\n  }",
        "begin_line": 297,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 298,col 5)-(line 299,col 51)",
            "(line 300,col 5)-(line 310,col 20)",
            "(line 312,col 5)-(line 312,col 62)",
            "(line 313,col 5)-(line 313,col 23)",
            "(line 314,col 5)-(line 314,col 23)",
            "(line 315,col 5)-(line 315,col 25)",
            "(line 317,col 5)-(line 317,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.Anonymous-a16b3297-260c-49c0-8d4a-59ef7d5bf146.serialize(java.util.Map<java.lang.String, java.lang.Long>, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "          public JsonElement serialize(Map<String, Long> src, Type typeOfSrc,\n              JsonSerializationContext context) {\n            JsonArray array = new JsonArray();\n            for (long value : src.values()) {\n              array.add(new JsonPrimitive(value));\n            }\n            return array;\n          }",
        "begin_line": 302,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 304,col 13)-(line 304,col 46)",
            "(line 305,col 13)-(line 307,col 13)",
            "(line 308,col 13)-(line 308,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapSerializationWithNullValues()",
        "snippet": "  public void testMapSerializationWithNullValues() {\n    ClassWithAMap target = new ClassWithAMap();\n    target.map.put(\"name1\", null);\n    target.map.put(\"name2\", \"value2\");\n    String json = gson.toJson(target);\n    assertFalse(json.contains(\"name1\"));\n    assertTrue(json.contains(\"name2\"));\n  }",
        "begin_line": 330,
        "end_line": 337,
        "comment": "\n   * Created in response to http://code.google.com/p/google-gson/issues/detail?id=99\n   ",
        "child_ranges": [
            "(line 331,col 5)-(line 331,col 47)",
            "(line 332,col 5)-(line 332,col 34)",
            "(line 333,col 5)-(line 333,col 38)",
            "(line 334,col 5)-(line 334,col 38)",
            "(line 335,col 5)-(line 335,col 40)",
            "(line 336,col 5)-(line 336,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized()",
        "snippet": "  public void testMapSerializationWithNullValuesSerialized() {\n    Gson gson = new GsonBuilder().serializeNulls().create();\n    ClassWithAMap target = new ClassWithAMap();\n    target.map.put(\"name1\", null);\n    target.map.put(\"name2\", \"value2\");\n    String json = gson.toJson(target);\n    assertTrue(json.contains(\"name1\"));\n    assertTrue(json.contains(\"name2\"));\n  }",
        "begin_line": 342,
        "end_line": 350,
        "comment": "\n   * Created in response to http://code.google.com/p/google-gson/issues/detail?id=99\n   ",
        "child_ranges": [
            "(line 343,col 5)-(line 343,col 60)",
            "(line 344,col 5)-(line 344,col 47)",
            "(line 345,col 5)-(line 345,col 34)",
            "(line 346,col 5)-(line 346,col 38)",
            "(line 347,col 5)-(line 347,col 38)",
            "(line 348,col 5)-(line 348,col 39)",
            "(line 349,col 5)-(line 349,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues()",
        "snippet": "  public void testMapSerializationWithWildcardValues() {\n    Map<String, ? extends Collection<? extends Integer>> map =\n        new LinkedHashMap<String, Collection<Integer>>();\n    map.put(\"test\", null);\n    Type typeOfMap =\n        new TypeToken<Map<String, ? extends Collection<? extends Integer>>>() {}.getType();\n    String json = gson.toJson(map, typeOfMap);\n\n    assertEquals(\"{}\", json);\n  }",
        "begin_line": 352,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 353,col 5)-(line 354,col 57)",
            "(line 355,col 5)-(line 355,col 26)",
            "(line 356,col 5)-(line 357,col 91)",
            "(line 358,col 5)-(line 358,col 46)",
            "(line 360,col 5)-(line 360,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues()",
        "snippet": "  public void testMapDeserializationWithWildcardValues() {\n    Type typeOfMap = new TypeToken<Map<String, ? extends Long>>() {}.getType();\n    Map<String, ? extends Long> map = gson.fromJson(\"{\\\"test\\\":123}\", typeOfMap);\n    assertEquals(1, map.size());\n    assertEquals(new Long(123L), map.get(\"test\"));\n  }",
        "begin_line": 363,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 364,col 5)-(line 364,col 79)",
            "(line 365,col 5)-(line 365,col 81)",
            "(line 366,col 5)-(line 366,col 32)",
            "(line 367,col 5)-(line 367,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapOfMapSerialization()",
        "snippet": "  public void testMapOfMapSerialization() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n    Map<String, String> nestedMap = new HashMap<String, String>();\n    nestedMap.put(\"1\", \"1\");\n    nestedMap.put(\"2\", \"2\");\n    map.put(\"nestedMap\", nestedMap);\n    String json = gson.toJson(map);\n    assertTrue(json.contains(\"nestedMap\"));\n    assertTrue(json.contains(\"\\\"1\\\":\\\"1\\\"\"));\n    assertTrue(json.contains(\"\\\"2\\\":\\\"2\\\"\"));\n  }",
        "begin_line": 381,
        "end_line": 391,
        "comment": "\n   * From bug report http://code.google.com/p/google-gson/issues/detail?id=95\n   ",
        "child_ranges": [
            "(line 382,col 5)-(line 382,col 86)",
            "(line 383,col 5)-(line 383,col 66)",
            "(line 384,col 5)-(line 384,col 28)",
            "(line 385,col 5)-(line 385,col 28)",
            "(line 386,col 5)-(line 386,col 36)",
            "(line 387,col 5)-(line 387,col 35)",
            "(line 388,col 5)-(line 388,col 43)",
            "(line 389,col 5)-(line 389,col 45)",
            "(line 390,col 5)-(line 390,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapOfMapDeserialization()",
        "snippet": "  public void testMapOfMapDeserialization() {\n    String json = \"{nestedMap:{'2':'2','1':'1'}}\";\n    Type type = new TypeToken<Map<String, Map<String, String>>>(){}.getType();\n    Map<String, Map<String, String>> map = gson.fromJson(json, type);\n    Map<String, String> nested = map.get(\"nestedMap\");\n    assertEquals(\"1\", nested.get(\"1\"));\n    assertEquals(\"2\", nested.get(\"2\"));\n  }",
        "begin_line": 396,
        "end_line": 403,
        "comment": "\n   * From bug report http://code.google.com/p/google-gson/issues/detail?id=95\n   ",
        "child_ranges": [
            "(line 397,col 5)-(line 397,col 50)",
            "(line 398,col 5)-(line 398,col 78)",
            "(line 399,col 5)-(line 399,col 69)",
            "(line 400,col 5)-(line 400,col 54)",
            "(line 401,col 5)-(line 401,col 39)",
            "(line 402,col 5)-(line 402,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapWithQuotes()",
        "snippet": "  public void testMapWithQuotes() {\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"a\\\"b\", \"c\\\"d\");\n    String json = gson.toJson(map);\n    assertEquals(\"{\\\"a\\\\\\\"b\\\":\\\"c\\\\\\\"d\\\"}\", json);\n  }",
        "begin_line": 408,
        "end_line": 413,
        "comment": "\n   * From bug report http://code.google.com/p/google-gson/issues/detail?id=178\n   ",
        "child_ranges": [
            "(line 409,col 5)-(line 409,col 60)",
            "(line 410,col 5)-(line 410,col 28)",
            "(line 411,col 5)-(line 411,col 35)",
            "(line 412,col 5)-(line 412,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey()",
        "snippet": "  public void testWriteMapsWithEmptyStringKey() {\n    Map<String, Boolean> map = new HashMap<String, Boolean>();\n    map.put(\"\", true);\n    assertEquals(\"{\\\"\\\":true}\", gson.toJson(map));\n\n  }",
        "begin_line": 418,
        "end_line": 423,
        "comment": "\n   * From issue 227.\n   ",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 62)",
            "(line 420,col 5)-(line 420,col 22)",
            "(line 421,col 5)-(line 421,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey()",
        "snippet": "  public void testReadMapsWithEmptyStringKey() {\n    Map<String, Boolean> map = gson.fromJson(\"{\\\"\\\":true}\", new TypeToken<Map<String, Boolean>>() {}.getType());\n    assertEquals(Boolean.TRUE, map.get(\"\"));\n  }",
        "begin_line": 425,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 426,col 5)-(line 426,col 112)",
            "(line 427,col 5)-(line 427,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testSerializeMaps()",
        "snippet": "  public void testSerializeMaps() {\n    Map<String, Object> map = new LinkedHashMap<String, Object>();\n    map.put(\"a\", 12);\n    map.put(\"b\", null);\n\n    LinkedHashMap<String, Object> innerMap = new LinkedHashMap<String, Object>();\n    innerMap.put(\"test\", 1);\n    innerMap.put(\"TestStringArray\", new String[] { \"one\", \"two\" });\n    map.put(\"c\", innerMap);\n\n    assertEquals(\"{\\\"a\\\":12,\\\"b\\\":null,\\\"c\\\":{\\\"test\\\":1,\\\"TestStringArray\\\":[\\\"one\\\",\\\"two\\\"]}}\",\n        new GsonBuilder().serializeNulls().create().toJson(map));\n    assertEquals(\"{\\n  \\\"a\\\": 12,\\n  \\\"b\\\": null,\\n  \\\"c\\\": \"\n  \t\t+ \"{\\n    \\\"test\\\": 1,\\n    \\\"TestStringArray\\\": \"\n  \t\t+ \"[\\n      \\\"one\\\",\\n      \\\"two\\\"\\n    ]\\n  }\\n}\",\n        new GsonBuilder().setPrettyPrinting().serializeNulls().create().toJson(map));\n    assertEquals(\"{\\\"a\\\":12,\\\"c\\\":{\\\"test\\\":1,\\\"TestStringArray\\\":[\\\"one\\\",\\\"two\\\"]}}\",\n        new GsonBuilder().create().toJson(map));\n    assertEquals(\"{\\n  \\\"a\\\": 12,\\n  \\\"c\\\": \"\n        + \"{\\n    \\\"test\\\": 1,\\n    \\\"TestStringArray\\\": \"\n        + \"[\\n      \\\"one\\\",\\n      \\\"two\\\"\\n    ]\\n  }\\n}\",\n        new GsonBuilder().setPrettyPrinting().create().toJson(map));\n\n    innerMap.put(\"d\", \"e\");\n    assertEquals(\"{\\\"a\\\":12,\\\"c\\\":{\\\"test\\\":1,\\\"TestStringArray\\\":[\\\"one\\\",\\\"two\\\"],\\\"d\\\":\\\"e\\\"}}\",\n        new Gson().toJson(map));\n  }",
        "begin_line": 433,
        "end_line": 459,
        "comment": "\n   * From bug report http://code.google.com/p/google-gson/issues/detail?id=204\n   ",
        "child_ranges": [
            "(line 434,col 5)-(line 434,col 66)",
            "(line 435,col 5)-(line 435,col 21)",
            "(line 436,col 5)-(line 436,col 23)",
            "(line 438,col 5)-(line 438,col 81)",
            "(line 439,col 5)-(line 439,col 28)",
            "(line 440,col 5)-(line 440,col 67)",
            "(line 441,col 5)-(line 441,col 27)",
            "(line 443,col 5)-(line 444,col 65)",
            "(line 445,col 5)-(line 448,col 85)",
            "(line 449,col 5)-(line 450,col 48)",
            "(line 451,col 5)-(line 454,col 68)",
            "(line 456,col 5)-(line 456,col 27)",
            "(line 457,col 5)-(line 458,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testInterfaceTypeMap()",
        "snippet": "  public final void testInterfaceTypeMap() {\n    MapClass element = new MapClass();\n    TestTypes.Sub subType = new TestTypes.Sub();\n    element.addBase(\"Test\", subType);\n    element.addSub(\"Test\", subType);\n\n    String subTypeJson = new Gson().toJson(subType);\n    String expected = \"{\\\"bases\\\":{\\\"Test\\\":\" + subTypeJson + \"},\"\n      + \"\\\"subs\\\":{\\\"Test\\\":\" + subTypeJson + \"}}\";\n\n    Gson gsonWithComplexKeys = new GsonBuilder()\n        .enableComplexMapKeySerialization()\n        .create();\n    String json = gsonWithComplexKeys.toJson(element);\n    assertEquals(expected, json);\n\n    Gson gson = new Gson();\n    json = gson.toJson(element);\n    assertEquals(expected, json);\n  }",
        "begin_line": 461,
        "end_line": 480,
        "comment": "",
        "child_ranges": [
            "(line 462,col 5)-(line 462,col 38)",
            "(line 463,col 5)-(line 463,col 48)",
            "(line 464,col 5)-(line 464,col 37)",
            "(line 465,col 5)-(line 465,col 36)",
            "(line 467,col 5)-(line 467,col 52)",
            "(line 468,col 5)-(line 469,col 51)",
            "(line 471,col 5)-(line 473,col 18)",
            "(line 474,col 5)-(line 474,col 54)",
            "(line 475,col 5)-(line 475,col 33)",
            "(line 477,col 5)-(line 477,col 27)",
            "(line 478,col 5)-(line 478,col 32)",
            "(line 479,col 5)-(line 479,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer()",
        "snippet": "  public final void testInterfaceTypeMapWithSerializer() {\n    MapClass element = new MapClass();\n    TestTypes.Sub subType = new TestTypes.Sub();\n    element.addBase(\"Test\", subType);\n    element.addSub(\"Test\", subType);\n\n    Gson tempGson = new Gson();\n    String subTypeJson = tempGson.toJson(subType);\n    final JsonElement baseTypeJsonElement = tempGson.toJsonTree(subType, TestTypes.Base.class);\n    String baseTypeJson = tempGson.toJson(baseTypeJsonElement);\n    String expected = \"{\\\"bases\\\":{\\\"Test\\\":\" + baseTypeJson + \"},\"\n        + \"\\\"subs\\\":{\\\"Test\\\":\" + subTypeJson + \"}}\";\n\n    JsonSerializer<TestTypes.Base> baseTypeAdapter = new JsonSerializer<TestTypes.Base>() {\n      public JsonElement serialize(TestTypes.Base src, Type typeOfSrc,\n          JsonSerializationContext context) {\n        return baseTypeJsonElement;\n      }\n    };\n\n    Gson gson = new GsonBuilder()\n        .enableComplexMapKeySerialization()\n        .registerTypeAdapter(TestTypes.Base.class, baseTypeAdapter)\n        .create();\n    String json = gson.toJson(element);\n    assertEquals(expected, json);\n\n    gson = new GsonBuilder()\n        .registerTypeAdapter(TestTypes.Base.class, baseTypeAdapter)\n        .create();\n    json = gson.toJson(element);\n    assertEquals(expected, json);\n  }",
        "begin_line": 482,
        "end_line": 514,
        "comment": "",
        "child_ranges": [
            "(line 483,col 5)-(line 483,col 38)",
            "(line 484,col 5)-(line 484,col 48)",
            "(line 485,col 5)-(line 485,col 37)",
            "(line 486,col 5)-(line 486,col 36)",
            "(line 488,col 5)-(line 488,col 31)",
            "(line 489,col 5)-(line 489,col 50)",
            "(line 490,col 5)-(line 490,col 95)",
            "(line 491,col 5)-(line 491,col 63)",
            "(line 492,col 5)-(line 493,col 53)",
            "(line 495,col 5)-(line 500,col 6)",
            "(line 502,col 5)-(line 505,col 18)",
            "(line 506,col 5)-(line 506,col 39)",
            "(line 507,col 5)-(line 507,col 33)",
            "(line 509,col 5)-(line 511,col 18)",
            "(line 512,col 5)-(line 512,col 32)",
            "(line 513,col 5)-(line 513,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "serialize(TestTypes.Base, Type, JsonSerializationContext)",
        "snippet": "      public JsonElement serialize(TestTypes.Base src, Type typeOfSrc,\n          JsonSerializationContext context) {\n        return baseTypeJsonElement;\n      }",
        "begin_line": 496,
        "end_line": 499,
        "comment": "",
        "child_ranges": [
            "(line 498,col 9)-(line 498,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testGeneralMapField()",
        "snippet": "  public void testGeneralMapField() throws Exception {\n    MapWithGeneralMapParameters map = new MapWithGeneralMapParameters();\n    map.map.put(\"string\", \"testString\");\n    map.map.put(\"stringArray\", new String[]{\"one\", \"two\"});\n    map.map.put(\"objectArray\", new Object[]{1, 2L, \"three\"});\n\n    String expected = \"{\\\"map\\\":{\\\"string\\\":\\\"testString\\\",\\\"stringArray\\\":\"\n        + \"[\\\"one\\\",\\\"two\\\"],\\\"objectArray\\\":[1,2,\\\"three\\\"]}}\";\n    assertEquals(expected, gson.toJson(map));\n\n    gson = new GsonBuilder()\n        .enableComplexMapKeySerialization()\n        .create();\n    assertEquals(expected, gson.toJson(map));\n  }",
        "begin_line": 516,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 517,col 5)-(line 517,col 72)",
            "(line 518,col 5)-(line 518,col 40)",
            "(line 519,col 5)-(line 519,col 59)",
            "(line 520,col 5)-(line 520,col 61)",
            "(line 522,col 5)-(line 523,col 64)",
            "(line 524,col 5)-(line 524,col 45)",
            "(line 526,col 5)-(line 528,col 18)",
            "(line 529,col 5)-(line 529,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testComplexKeysSerialization()",
        "snippet": "  public void testComplexKeysSerialization() {\n    Map<Point, String> map = new LinkedHashMap<Point, String>();\n    map.put(new Point(2, 3), \"a\");\n    map.put(new Point(5, 7), \"b\");\n    String json = \"{\\\"2,3\\\":\\\"a\\\",\\\"5,7\\\":\\\"b\\\"}\";\n    assertEquals(json, gson.toJson(map, new TypeToken<Map<Point, String>>() {}.getType()));\n    assertEquals(json, gson.toJson(map, Map.class));\n  }",
        "begin_line": 532,
        "end_line": 539,
        "comment": "",
        "child_ranges": [
            "(line 533,col 5)-(line 533,col 64)",
            "(line 534,col 5)-(line 534,col 34)",
            "(line 535,col 5)-(line 535,col 34)",
            "(line 536,col 5)-(line 536,col 50)",
            "(line 537,col 5)-(line 537,col 91)",
            "(line 538,col 5)-(line 538,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testComplexKeysDeserialization()",
        "snippet": "  public void testComplexKeysDeserialization() {\n    String json = \"{'2,3':'a','5,7':'b'}\";\n    try {\n      gson.fromJson(json, new TypeToken<Map<Point, String>>() {}.getType());\n      fail();\n    } catch (JsonParseException expected) {\n    }\n  }",
        "begin_line": 541,
        "end_line": 548,
        "comment": "",
        "child_ranges": [
            "(line 542,col 5)-(line 542,col 42)",
            "(line 543,col 5)-(line 547,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testStringKeyDeserialization()",
        "snippet": "  public void testStringKeyDeserialization() {\n    String json = \"{'2,3':'a','5,7':'b'}\";\n    Map<String, String> map = new LinkedHashMap<String, String>();\n    map.put(\"2,3\", \"a\");\n    map.put(\"5,7\", \"b\");\n    assertEquals(map, gson.fromJson(json, new TypeToken<Map<String, String>>() {}.getType()));\n  }",
        "begin_line": 550,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 551,col 5)-(line 551,col 42)",
            "(line 552,col 5)-(line 552,col 66)",
            "(line 553,col 5)-(line 553,col 24)",
            "(line 554,col 5)-(line 554,col 24)",
            "(line 555,col 5)-(line 555,col 94)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testNumberKeyDeserialization()",
        "snippet": "  public void testNumberKeyDeserialization() {\n    String json = \"{'2.3':'a','5.7':'b'}\";\n    Map<Double, String> map = new LinkedHashMap<Double, String>();\n    map.put(2.3, \"a\");\n    map.put(5.7, \"b\");\n    assertEquals(map, gson.fromJson(json, new TypeToken<Map<Double, String>>() {}.getType()));\n  }",
        "begin_line": 558,
        "end_line": 564,
        "comment": "",
        "child_ranges": [
            "(line 559,col 5)-(line 559,col 42)",
            "(line 560,col 5)-(line 560,col 66)",
            "(line 561,col 5)-(line 561,col 22)",
            "(line 562,col 5)-(line 562,col 22)",
            "(line 563,col 5)-(line 563,col 94)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testBooleanKeyDeserialization()",
        "snippet": "  public void testBooleanKeyDeserialization() {\n    String json = \"{'true':'a','false':'b'}\";\n    Map<Boolean, String> map = new LinkedHashMap<Boolean, String>();\n    map.put(true, \"a\");\n    map.put(false, \"b\");\n    assertEquals(map, gson.fromJson(json, new TypeToken<Map<Boolean, String>>() {}.getType()));\n  }",
        "begin_line": 566,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 567,col 5)-(line 567,col 45)",
            "(line 568,col 5)-(line 568,col 68)",
            "(line 569,col 5)-(line 569,col 23)",
            "(line 570,col 5)-(line 570,col 24)",
            "(line 571,col 5)-(line 571,col 95)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys()",
        "snippet": "  public void testMapDeserializationWithDuplicateKeys() {\n    try {\n      gson.fromJson(\"{'a':1,'a':2}\", new TypeToken<Map<String, Integer>>() {}.getType());\n      fail();\n    } catch (JsonSyntaxException expected) {\n    }\n  }",
        "begin_line": 574,
        "end_line": 580,
        "comment": "",
        "child_ranges": [
            "(line 575,col 5)-(line 579,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testSerializeMapOfMaps()",
        "snippet": "  public void testSerializeMapOfMaps() {\n    Type type = new TypeToken<Map<String, Map<String, String>>>() {}.getType();\n    Map<String, Map<String, String>> map = newMap(\n        \"a\", newMap(\"ka1\", \"va1\", \"ka2\", \"va2\"),\n        \"b\", newMap(\"kb1\", \"vb1\", \"kb2\", \"vb2\"));\n    assertEquals(\"{'a':{'ka1':'va1','ka2':'va2'},'b':{'kb1':'vb1','kb2':'vb2'}}\",\n        gson.toJson(map, type).replace('\"', '\\''));\n  }",
        "begin_line": 582,
        "end_line": 589,
        "comment": "",
        "child_ranges": [
            "(line 583,col 5)-(line 583,col 79)",
            "(line 584,col 5)-(line 586,col 49)",
            "(line 587,col 5)-(line 588,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testDeerializeMapOfMaps()",
        "snippet": "  public void testDeerializeMapOfMaps() {\n    Type type = new TypeToken<Map<String, Map<String, String>>>() {}.getType();\n    Map<String, Map<String, String>> map = newMap(\n        \"a\", newMap(\"ka1\", \"va1\", \"ka2\", \"va2\"),\n        \"b\", newMap(\"kb1\", \"vb1\", \"kb2\", \"vb2\"));\n    String json = \"{'a':{'ka1':'va1','ka2':'va2'},'b':{'kb1':'vb1','kb2':'vb2'}}\";\n    assertEquals(map, gson.fromJson(json, type));\n  }",
        "begin_line": 591,
        "end_line": 598,
        "comment": "",
        "child_ranges": [
            "(line 592,col 5)-(line 592,col 79)",
            "(line 593,col 5)-(line 595,col 49)",
            "(line 596,col 5)-(line 596,col 82)",
            "(line 597,col 5)-(line 597,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.newMap(K, V, K, V)",
        "snippet": "  private <K, V> Map<K, V> newMap(K key1, V value1, K key2, V value2) {\n    Map<K, V> result = new LinkedHashMap<K, V>();\n    result.put(key1, value1);\n    result.put(key2, value2);\n    return result;\n  }",
        "begin_line": 600,
        "end_line": 605,
        "comment": "",
        "child_ranges": [
            "(line 601,col 5)-(line 601,col 49)",
            "(line 602,col 5)-(line 602,col 29)",
            "(line 603,col 5)-(line 603,col 29)",
            "(line 604,col 5)-(line 604,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader()",
        "snippet": "  public void testMapNamePromotionWithJsonElementReader() {\n    String json = \"{'2.3':'a'}\";\n    Map<Double, String> map = new LinkedHashMap<Double, String>();\n    map.put(2.3, \"a\");\n    JsonElement tree = new JsonParser().parse(json);\n    assertEquals(map, gson.fromJson(tree, new TypeToken<Map<Double, String>>() {}.getType()));\n  }",
        "begin_line": 607,
        "end_line": 613,
        "comment": "",
        "child_ranges": [
            "(line 608,col 5)-(line 608,col 32)",
            "(line 609,col 5)-(line 609,col 66)",
            "(line 610,col 5)-(line 610,col 22)",
            "(line 611,col 5)-(line 611,col 52)",
            "(line 612,col 5)-(line 612,col 94)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.Point.Point(int, int)",
        "snippet": "    Point(int x, int y) {\n      this.x = x;\n      this.y = y;\n    }",
        "begin_line": 619,
        "end_line": 622,
        "comment": "",
        "child_ranges": [
            "(line 620,col 7)-(line 620,col 17)",
            "(line 621,col 7)-(line 621,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.Point.equals(java.lang.Object)",
        "snippet": "    @Override public boolean equals(Object o) {\n      return o instanceof Point && x == ((Point) o).x && y == ((Point) o).y;\n    }",
        "begin_line": 624,
        "end_line": 626,
        "comment": "",
        "child_ranges": [
            "(line 625,col 7)-(line 625,col 76)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.Point.hashCode()",
        "snippet": "    @Override public int hashCode() {\n      return x * 37 + y;\n    }",
        "begin_line": 628,
        "end_line": 630,
        "comment": "",
        "child_ranges": [
            "(line 629,col 7)-(line 629,col 24)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "com.google.gson.functional.MapTest.Point.toString()",
        "snippet": "    @Override public String toString() {\n      return x + \",\" + y;\n    }",
        "begin_line": 632,
        "end_line": 634,
        "comment": "",
        "child_ranges": [
            "(line 633,col 7)-(line 633,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "addBase(String, TestTypes.Base)",
        "snippet": "    public final void addBase(String name, TestTypes.Base value) {\n      bases.put(name, value);\n    }",
        "begin_line": 641,
        "end_line": 643,
        "comment": "",
        "child_ranges": [
            "(line 642,col 7)-(line 642,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MapTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MapTest.java",
        "signature": "addSub(String, TestTypes.Sub)",
        "snippet": "    public final void addSub(String name, TestTypes.Sub value) {\n      subs.put(name, value);\n    }",
        "begin_line": 645,
        "end_line": 647,
        "comment": "",
        "child_ranges": [
            "(line 646,col 7)-(line 646,col 28)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrintFormattingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java",
        "signature": "com.google.gson.functional.PrintFormattingTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 44,col 18)",
            "(line 45,col 5)-(line 45,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrintFormattingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java",
        "signature": "com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace()",
        "snippet": "  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testCompactFormattingLeavesNoWhiteSpace() {\n    List list = new ArrayList();\n    list.add(new BagOfPrimitives());\n    list.add(new Nested());\n    list.add(new PrimitiveArray());\n    list.add(new ClassWithTransientFields());\n\n    String json = gson.toJson(list);\n    assertContainsNoWhiteSpace(json);\n  }",
        "begin_line": 48,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 50,col 5)-(line 50,col 32)",
            "(line 51,col 5)-(line 51,col 36)",
            "(line 52,col 5)-(line 52,col 27)",
            "(line 53,col 5)-(line 53,col 35)",
            "(line 54,col 5)-(line 54,col 45)",
            "(line 56,col 5)-(line 56,col 36)",
            "(line 57,col 5)-(line 57,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrintFormattingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java",
        "signature": "com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues()",
        "snippet": "  public void testJsonObjectWithNullValues() {\n    JsonObject obj = new JsonObject();\n    obj.addProperty(\"field1\", \"value1\");\n    obj.addProperty(\"field2\", (String) null);\n    String json = gson.toJson(obj);\n    assertTrue(json.contains(\"field1\"));\n    assertFalse(json.contains(\"field2\"));\n  }",
        "begin_line": 60,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 61,col 5)-(line 61,col 38)",
            "(line 62,col 5)-(line 62,col 40)",
            "(line 63,col 5)-(line 63,col 45)",
            "(line 64,col 5)-(line 64,col 35)",
            "(line 65,col 5)-(line 65,col 40)",
            "(line 66,col 5)-(line 66,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrintFormattingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java",
        "signature": "com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized()",
        "snippet": "  public void testJsonObjectWithNullValuesSerialized() {\n    gson = new GsonBuilder().serializeNulls().create();\n    JsonObject obj = new JsonObject();\n    obj.addProperty(\"field1\", \"value1\");\n    obj.addProperty(\"field2\", (String) null);\n    String json = gson.toJson(obj);\n    assertTrue(json.contains(\"field1\"));\n    assertTrue(json.contains(\"field2\"));\n  }",
        "begin_line": 69,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 70,col 5)-(line 70,col 55)",
            "(line 71,col 5)-(line 71,col 38)",
            "(line 72,col 5)-(line 72,col 40)",
            "(line 73,col 5)-(line 73,col 45)",
            "(line 74,col 5)-(line 74,col 35)",
            "(line 75,col 5)-(line 75,col 40)",
            "(line 76,col 5)-(line 76,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrintFormattingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java",
        "signature": "com.google.gson.functional.PrintFormattingTest.assertContainsNoWhiteSpace(java.lang.String)",
        "snippet": "  private static void assertContainsNoWhiteSpace(String str) {\n    for (char c : str.toCharArray()) {\n      assertFalse(Character.isWhitespace(c));\n    }\n  }",
        "begin_line": 79,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 80,col 5)-(line 82,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    this.oldTimeZone = TimeZone.getDefault();\n    TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\n    Locale.setDefault(Locale.US);\n    gson = new Gson();\n  }",
        "begin_line": 71,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 73,col 5)-(line 73,col 18)",
            "(line 74,col 5)-(line 74,col 45)",
            "(line 75,col 5)-(line 75,col 69)",
            "(line 76,col 5)-(line 76,col 33)",
            "(line 77,col 5)-(line 77,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.tearDown()",
        "snippet": "  @Override\n  protected void tearDown() throws Exception {\n    TimeZone.setDefault(oldTimeZone);\n    super.tearDown();\n  }",
        "begin_line": 80,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 82,col 37)",
            "(line 83,col 5)-(line 83,col 21)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization()",
        "snippet": "  public void testClassSerialization() {\n    try {\n      gson.toJson(String.class);  \n    } catch (UnsupportedOperationException expected) {}\n    // Override with a custom type adapter for class.\n    gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\n    assertEquals(\"\\\"java.lang.String\\\"\", gson.toJson(String.class));  \n  }",
        "begin_line": 86,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 87,col 5)-(line 89,col 55)",
            "(line 91,col 5)-(line 91,col 97)",
            "(line 92,col 5)-(line 92,col 68)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization()",
        "snippet": "  public void testClassDeserialization() {\n    try {\n      gson.fromJson(\"String.class\", String.class.getClass());  \n    } catch (UnsupportedOperationException expected) {}\n    // Override with a custom type adapter for class.\n    gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\n    assertEquals(String.class, gson.fromJson(\"java.lang.String\", Class.class));  \n  }",
        "begin_line": 95,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 96,col 5)-(line 98,col 55)",
            "(line 100,col 5)-(line 100,col 97)",
            "(line 101,col 5)-(line 101,col 79)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization()",
        "snippet": "  public void testUrlSerialization() throws Exception {\n    String urlValue = \"http://google.com/\";\n    URL url = new URL(urlValue);\n    assertEquals(\"\\\"http://google.com/\\\"\", gson.toJson(url));\n  }",
        "begin_line": 104,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 105,col 5)-(line 105,col 43)",
            "(line 106,col 5)-(line 106,col 32)",
            "(line 107,col 5)-(line 107,col 61)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization()",
        "snippet": "  public void testUrlDeserialization() {\n    String urlValue = \"http://google.com/\";\n    String json = \"'http:\\\\/\\\\/google.com\\\\/'\";\n    URL target = gson.fromJson(json, URL.class);\n    assertEquals(urlValue, target.toExternalForm());\n\n    gson.fromJson('\"' + urlValue + '\"', URL.class);\n    assertEquals(urlValue, target.toExternalForm());\n  }",
        "begin_line": 110,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 111,col 5)-(line 111,col 43)",
            "(line 112,col 5)-(line 112,col 47)",
            "(line 113,col 5)-(line 113,col 48)",
            "(line 114,col 5)-(line 114,col 52)",
            "(line 116,col 5)-(line 116,col 51)",
            "(line 117,col 5)-(line 117,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization()",
        "snippet": "  public void testUrlNullSerialization() throws Exception {\n    ClassWithUrlField target = new ClassWithUrlField();\n    assertEquals(\"{}\", gson.toJson(target));\n  }",
        "begin_line": 120,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 55)",
            "(line 122,col 5)-(line 122,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization()",
        "snippet": "  public void testUrlNullDeserialization() {\n    String json = \"{}\";\n    ClassWithUrlField target = gson.fromJson(json, ClassWithUrlField.class);\n    assertNull(target.url);\n  }",
        "begin_line": 125,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 126,col 5)-(line 126,col 23)",
            "(line 127,col 5)-(line 127,col 76)",
            "(line 128,col 5)-(line 128,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization()",
        "snippet": "  public void testUriSerialization() throws Exception {\n    String uriValue = \"http://google.com/\";\n    URI uri = new URI(uriValue);\n    assertEquals(\"\\\"http://google.com/\\\"\", gson.toJson(uri));\n  }",
        "begin_line": 135,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 136,col 5)-(line 136,col 43)",
            "(line 137,col 5)-(line 137,col 32)",
            "(line 138,col 5)-(line 138,col 61)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization()",
        "snippet": "  public void testUriDeserialization() {\n    String uriValue = \"http://google.com/\";\n    String json = '\"' + uriValue + '\"';\n    URI target = gson.fromJson(json, URI.class);\n    assertEquals(uriValue, target.toASCIIString());\n  }",
        "begin_line": 141,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 142,col 5)-(line 142,col 43)",
            "(line 143,col 5)-(line 143,col 39)",
            "(line 144,col 5)-(line 144,col 48)",
            "(line 145,col 5)-(line 145,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization()",
        "snippet": "  public void testNullSerialization() throws Exception {\n    testNullSerializationAndDeserialization(Boolean.class);\n    testNullSerializationAndDeserialization(Byte.class);\n    testNullSerializationAndDeserialization(Short.class);\n    testNullSerializationAndDeserialization(Integer.class);\n    testNullSerializationAndDeserialization(Long.class);\n    testNullSerializationAndDeserialization(Double.class);\n    testNullSerializationAndDeserialization(Float.class);\n    testNullSerializationAndDeserialization(Number.class);\n    testNullSerializationAndDeserialization(Character.class);\n    testNullSerializationAndDeserialization(String.class);\n    testNullSerializationAndDeserialization(StringBuilder.class);\n    testNullSerializationAndDeserialization(StringBuffer.class);\n    testNullSerializationAndDeserialization(BigDecimal.class);\n    testNullSerializationAndDeserialization(BigInteger.class);\n    testNullSerializationAndDeserialization(TreeSet.class);\n    testNullSerializationAndDeserialization(ArrayList.class);\n    testNullSerializationAndDeserialization(HashSet.class);\n    testNullSerializationAndDeserialization(Properties.class);\n    testNullSerializationAndDeserialization(URL.class);\n    testNullSerializationAndDeserialization(URI.class);\n    testNullSerializationAndDeserialization(UUID.class);\n    testNullSerializationAndDeserialization(Locale.class);\n    testNullSerializationAndDeserialization(InetAddress.class);\n    testNullSerializationAndDeserialization(BitSet.class);\n    testNullSerializationAndDeserialization(Date.class);\n    testNullSerializationAndDeserialization(GregorianCalendar.class);\n    testNullSerializationAndDeserialization(Calendar.class);\n    testNullSerializationAndDeserialization(Time.class);\n    testNullSerializationAndDeserialization(Timestamp.class);\n    testNullSerializationAndDeserialization(java.sql.Date.class);\n    testNullSerializationAndDeserialization(Enum.class);\n    testNullSerializationAndDeserialization(Class.class);\n  }",
        "begin_line": 148,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 59)",
            "(line 150,col 5)-(line 150,col 56)",
            "(line 151,col 5)-(line 151,col 57)",
            "(line 152,col 5)-(line 152,col 59)",
            "(line 153,col 5)-(line 153,col 56)",
            "(line 154,col 5)-(line 154,col 58)",
            "(line 155,col 5)-(line 155,col 57)",
            "(line 156,col 5)-(line 156,col 58)",
            "(line 157,col 5)-(line 157,col 61)",
            "(line 158,col 5)-(line 158,col 58)",
            "(line 159,col 5)-(line 159,col 65)",
            "(line 160,col 5)-(line 160,col 64)",
            "(line 161,col 5)-(line 161,col 62)",
            "(line 162,col 5)-(line 162,col 62)",
            "(line 163,col 5)-(line 163,col 59)",
            "(line 164,col 5)-(line 164,col 61)",
            "(line 165,col 5)-(line 165,col 59)",
            "(line 166,col 5)-(line 166,col 62)",
            "(line 167,col 5)-(line 167,col 55)",
            "(line 168,col 5)-(line 168,col 55)",
            "(line 169,col 5)-(line 169,col 56)",
            "(line 170,col 5)-(line 170,col 58)",
            "(line 171,col 5)-(line 171,col 63)",
            "(line 172,col 5)-(line 172,col 58)",
            "(line 173,col 5)-(line 173,col 56)",
            "(line 174,col 5)-(line 174,col 69)",
            "(line 175,col 5)-(line 175,col 60)",
            "(line 176,col 5)-(line 176,col 56)",
            "(line 177,col 5)-(line 177,col 61)",
            "(line 178,col 5)-(line 178,col 65)",
            "(line 179,col 5)-(line 179,col 56)",
            "(line 180,col 5)-(line 180,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerializationAndDeserialization(java.lang.Class<?>)",
        "snippet": "  private void testNullSerializationAndDeserialization(Class<?> c) {\n    assertEquals(\"null\", gson.toJson(null, c));\n    assertEquals(null, gson.fromJson(\"null\", c));\n  }",
        "begin_line": 183,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 47)",
            "(line 185,col 5)-(line 185,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization()",
        "snippet": "  public void testUuidSerialization() throws Exception {\n    String uuidValue = \"c237bec1-19ef-4858-a98e-521cf0aad4c0\";\n    UUID uuid = UUID.fromString(uuidValue);\n    assertEquals('\"' + uuidValue + '\"', gson.toJson(uuid));\n  }",
        "begin_line": 188,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 62)",
            "(line 190,col 5)-(line 190,col 43)",
            "(line 191,col 5)-(line 191,col 59)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization()",
        "snippet": "  public void testUuidDeserialization() {\n    String uuidValue = \"c237bec1-19ef-4858-a98e-521cf0aad4c0\";\n    String json = '\"' + uuidValue + '\"';\n    UUID target = gson.fromJson(json, UUID.class);\n    assertEquals(uuidValue, target.toString());\n  }",
        "begin_line": 194,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 195,col 5)-(line 195,col 62)",
            "(line 196,col 5)-(line 196,col 40)",
            "(line 197,col 5)-(line 197,col 50)",
            "(line 198,col 5)-(line 198,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage()",
        "snippet": "  public void testLocaleSerializationWithLanguage() {\n    Locale target = new Locale(\"en\");\n    assertEquals(\"\\\"en\\\"\", gson.toJson(target));\n  }",
        "begin_line": 201,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 37)",
            "(line 203,col 5)-(line 203,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage()",
        "snippet": "  public void testLocaleDeserializationWithLanguage() {\n    String json = \"\\\"en\\\"\";\n    Locale locale = gson.fromJson(json, Locale.class);\n    assertEquals(\"en\", locale.getLanguage());\n  }",
        "begin_line": 206,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 207,col 5)-(line 207,col 27)",
            "(line 208,col 5)-(line 208,col 54)",
            "(line 209,col 5)-(line 209,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry()",
        "snippet": "  public void testLocaleSerializationWithLanguageCountry() {\n    Locale target = Locale.CANADA_FRENCH;\n    assertEquals(\"\\\"fr_CA\\\"\", gson.toJson(target));\n  }",
        "begin_line": 212,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 213,col 5)-(line 213,col 41)",
            "(line 214,col 5)-(line 214,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry()",
        "snippet": "  public void testLocaleDeserializationWithLanguageCountry() {\n    String json = \"\\\"fr_CA\\\"\";\n    Locale locale = gson.fromJson(json, Locale.class);\n    assertEquals(Locale.CANADA_FRENCH, locale);\n  }",
        "begin_line": 217,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 218,col 5)-(line 218,col 30)",
            "(line 219,col 5)-(line 219,col 54)",
            "(line 220,col 5)-(line 220,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant()",
        "snippet": "  public void testLocaleSerializationWithLanguageCountryVariant() {\n    Locale target = new Locale(\"de\", \"DE\", \"EURO\");\n    String json = gson.toJson(target);\n    assertEquals(\"\\\"de_DE_EURO\\\"\", json);\n  }",
        "begin_line": 223,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 224,col 5)-(line 224,col 51)",
            "(line 225,col 5)-(line 225,col 38)",
            "(line 226,col 5)-(line 226,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant()",
        "snippet": "  public void testLocaleDeserializationWithLanguageCountryVariant() {\n    String json = \"\\\"de_DE_EURO\\\"\";\n    Locale locale = gson.fromJson(json, Locale.class);\n    assertEquals(\"de\", locale.getLanguage());\n    assertEquals(\"DE\", locale.getCountry());\n    assertEquals(\"EURO\", locale.getVariant());\n  }",
        "begin_line": 229,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 230,col 5)-(line 230,col 35)",
            "(line 231,col 5)-(line 231,col 54)",
            "(line 232,col 5)-(line 232,col 45)",
            "(line 233,col 5)-(line 233,col 44)",
            "(line 234,col 5)-(line 234,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization()",
        "snippet": "  public void testBigDecimalFieldSerialization() {\n    ClassWithBigDecimal target = new ClassWithBigDecimal(\"-122.01e-21\");\n    String json = gson.toJson(target);\n    String actual = json.substring(json.indexOf(':') + 1, json.indexOf('}'));\n    assertEquals(target.value, new BigDecimal(actual));\n  }",
        "begin_line": 237,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 238,col 5)-(line 238,col 72)",
            "(line 239,col 5)-(line 239,col 38)",
            "(line 240,col 5)-(line 240,col 77)",
            "(line 241,col 5)-(line 241,col 55)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization()",
        "snippet": "  public void testBigDecimalFieldDeserialization() {\n    ClassWithBigDecimal expected = new ClassWithBigDecimal(\"-122.01e-21\");\n    String json = expected.getExpectedJson();\n    ClassWithBigDecimal actual = gson.fromJson(json, ClassWithBigDecimal.class);\n    assertEquals(expected.value, actual.value);\n  }",
        "begin_line": 244,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 245,col 74)",
            "(line 246,col 5)-(line 246,col 45)",
            "(line 247,col 5)-(line 247,col 80)",
            "(line 248,col 5)-(line 248,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization()",
        "snippet": "  public void testBadValueForBigDecimalDeserialization() {\n    try {\n      gson.fromJson(\"{\\\"value\\\"=1.5e-1.0031}\", ClassWithBigDecimal.class);\n      fail(\"Exponent of a BigDecimal must be an integer value.\");\n    } catch (JsonParseException expected) { }\n  }",
        "begin_line": 251,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 252,col 5)-(line 255,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization()",
        "snippet": "  public void testBigIntegerFieldSerialization() {\n    ClassWithBigInteger target = new ClassWithBigInteger(\"23232323215323234234324324324324324324\");\n    String json = gson.toJson(target);\n    assertEquals(target.getExpectedJson(), json);\n  }",
        "begin_line": 258,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 99)",
            "(line 260,col 5)-(line 260,col 38)",
            "(line 261,col 5)-(line 261,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization()",
        "snippet": "  public void testBigIntegerFieldDeserialization() {\n    ClassWithBigInteger expected = new ClassWithBigInteger(\"879697697697697697697697697697697697\");\n    String json = expected.getExpectedJson();\n    ClassWithBigInteger actual = gson.fromJson(json, ClassWithBigInteger.class);\n    assertEquals(expected.value, actual.value);\n  }",
        "begin_line": 264,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 265,col 5)-(line 265,col 99)",
            "(line 266,col 5)-(line 266,col 45)",
            "(line 267,col 5)-(line 267,col 80)",
            "(line 268,col 5)-(line 268,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter()",
        "snippet": "  public void testOverrideBigIntegerTypeAdapter() throws Exception {\n    gson = new GsonBuilder()\n        .registerTypeAdapter(BigInteger.class, new NumberAsStringAdapter(BigInteger.class))\n        .create();\n    assertEquals(\"\\\"123\\\"\", gson.toJson(new BigInteger(\"123\"), BigInteger.class));\n    assertEquals(new BigInteger(\"123\"), gson.fromJson(\"\\\"123\\\"\", BigInteger.class));\n  }",
        "begin_line": 271,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 274,col 18)",
            "(line 275,col 5)-(line 275,col 82)",
            "(line 276,col 5)-(line 276,col 84)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter()",
        "snippet": "  public void testOverrideBigDecimalTypeAdapter() throws Exception {\n    gson = new GsonBuilder()\n        .registerTypeAdapter(BigDecimal.class, new NumberAsStringAdapter(BigDecimal.class))\n        .create();\n    assertEquals(\"\\\"1.1\\\"\", gson.toJson(new BigDecimal(\"1.1\"), BigDecimal.class));\n    assertEquals(new BigDecimal(\"1.1\"), gson.fromJson(\"\\\"1.1\\\"\", BigDecimal.class));\n  }",
        "begin_line": 279,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 280,col 5)-(line 282,col 18)",
            "(line 283,col 5)-(line 283,col 82)",
            "(line 284,col 5)-(line 284,col 84)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization()",
        "snippet": "  public void testSetSerialization() throws Exception {\n    Gson gson = new Gson();\n    HashSet<String> s = new HashSet<String>();\n    s.add(\"blah\");\n    String json = gson.toJson(s);\n    assertEquals(\"[\\\"blah\\\"]\", json);\n\n    json = gson.toJson(s, Set.class);\n    assertEquals(\"[\\\"blah\\\"]\", json);\n  }",
        "begin_line": 287,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 27)",
            "(line 289,col 5)-(line 289,col 46)",
            "(line 290,col 5)-(line 290,col 18)",
            "(line 291,col 5)-(line 291,col 33)",
            "(line 292,col 5)-(line 292,col 37)",
            "(line 294,col 5)-(line 294,col 37)",
            "(line 295,col 5)-(line 295,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization()",
        "snippet": "  public void testBitSetSerialization() throws Exception {\n    Gson gson = new Gson();\n    BitSet bits = new BitSet();\n    bits.set(1);\n    bits.set(3, 6);\n    bits.set(9);\n    String json = gson.toJson(bits);\n    assertEquals(\"[0,1,0,1,1,1,0,0,0,1]\", json);\n  }",
        "begin_line": 298,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 299,col 5)-(line 299,col 27)",
            "(line 300,col 5)-(line 300,col 31)",
            "(line 301,col 5)-(line 301,col 16)",
            "(line 302,col 5)-(line 302,col 19)",
            "(line 303,col 5)-(line 303,col 16)",
            "(line 304,col 5)-(line 304,col 36)",
            "(line 305,col 5)-(line 305,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization()",
        "snippet": "  public void testBitSetDeserialization() throws Exception {\n    BitSet expected = new BitSet();\n    expected.set(0);\n    expected.set(2, 6);\n    expected.set(8);\n\n    Gson gson = new Gson();\n    String json = gson.toJson(expected);\n    assertEquals(expected, gson.fromJson(json, BitSet.class));\n\n    json = \"[1,0,1,1,1,1,0,0,1,0,0,0]\";\n    assertEquals(expected, gson.fromJson(json, BitSet.class));\n\n    json = \"[\\\"1\\\",\\\"0\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"0\\\",\\\"0\\\",\\\"1\\\"]\";\n    assertEquals(expected, gson.fromJson(json, BitSet.class));\n\n    json = \"[true,false,true,true,true,true,false,false,true,false,false]\";\n    assertEquals(expected, gson.fromJson(json, BitSet.class));\n  }",
        "begin_line": 308,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 35)",
            "(line 310,col 5)-(line 310,col 20)",
            "(line 311,col 5)-(line 311,col 23)",
            "(line 312,col 5)-(line 312,col 20)",
            "(line 314,col 5)-(line 314,col 27)",
            "(line 315,col 5)-(line 315,col 40)",
            "(line 316,col 5)-(line 316,col 62)",
            "(line 318,col 5)-(line 318,col 39)",
            "(line 319,col 5)-(line 319,col 62)",
            "(line 321,col 5)-(line 321,col 69)",
            "(line 322,col 5)-(line 322,col 62)",
            "(line 324,col 5)-(line 324,col 75)",
            "(line 325,col 5)-(line 325,col 62)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization()",
        "snippet": "  public void testDefaultDateSerialization() {\n    Date now = new Date(1315806903103L);\n    String json = gson.toJson(now);\n    assertEquals(\"\\\"Sep 11, 2011 10:55:03 PM\\\"\", json);\n  }",
        "begin_line": 328,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 329,col 5)-(line 329,col 40)",
            "(line 330,col 5)-(line 330,col 35)",
            "(line 331,col 5)-(line 331,col 55)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization()",
        "snippet": "  public void testDefaultDateDeserialization() {\n    String json = \"'Dec 13, 2009 07:18:02 AM'\";\n    Date extracted = gson.fromJson(json, Date.class);\n    assertEqualsDate(extracted, 2009, 11, 13);\n    assertEqualsTime(extracted, 7, 18, 2);\n  }",
        "begin_line": 334,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 335,col 5)-(line 335,col 47)",
            "(line 336,col 5)-(line 336,col 53)",
            "(line 337,col 5)-(line 337,col 46)",
            "(line 338,col 5)-(line 338,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.assertEqualsDate(java.util.Date, int, int, int)",
        "snippet": "  @SuppressWarnings(\"deprecation\")\n  private void assertEqualsDate(Date date, int year, int month, int day) {\n    assertEquals(year-1900, date.getYear());\n    assertEquals(month, date.getMonth());\n    assertEquals(day, date.getDate());\n  }",
        "begin_line": 343,
        "end_line": 348,
        "comment": " millisecond portion.",
        "child_ranges": [
            "(line 345,col 5)-(line 345,col 44)",
            "(line 346,col 5)-(line 346,col 41)",
            "(line 347,col 5)-(line 347,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.assertEqualsTime(java.util.Date, int, int, int)",
        "snippet": "  @SuppressWarnings(\"deprecation\")\n  private void assertEqualsTime(Date date, int hours, int minutes, int seconds) {\n    assertEquals(hours, date.getHours());\n    assertEquals(minutes, date.getMinutes());\n    assertEquals(seconds, date.getSeconds());\n  }",
        "begin_line": 350,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 352,col 5)-(line 352,col 41)",
            "(line 353,col 5)-(line 353,col 45)",
            "(line 354,col 5)-(line 354,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization()",
        "snippet": "  public void testDefaultJavaSqlDateSerialization() {\n    java.sql.Date instant = new java.sql.Date(1259875082000L);\n    String json = gson.toJson(instant);\n    assertEquals(\"\\\"Dec 3, 2009\\\"\", json);\n  }",
        "begin_line": 357,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 358,col 5)-(line 358,col 62)",
            "(line 359,col 5)-(line 359,col 39)",
            "(line 360,col 5)-(line 360,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization()",
        "snippet": "  public void testDefaultJavaSqlDateDeserialization() {\n    String json = \"'Dec 3, 2009'\";\n    java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class);\n    assertEqualsDate(extracted, 2009, 11, 3);\n  }",
        "begin_line": 363,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 364,col 5)-(line 364,col 34)",
            "(line 365,col 5)-(line 365,col 71)",
            "(line 366,col 5)-(line 366,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization()",
        "snippet": "  public void testDefaultJavaSqlTimestampSerialization() {\n    Timestamp now = new java.sql.Timestamp(1259875082000L);\n    String json = gson.toJson(now);\n    assertEquals(\"\\\"Dec 3, 2009 1:18:02 PM\\\"\", json);\n  }",
        "begin_line": 369,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 370,col 5)-(line 370,col 59)",
            "(line 371,col 5)-(line 371,col 35)",
            "(line 372,col 5)-(line 372,col 53)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization()",
        "snippet": "  public void testDefaultJavaSqlTimestampDeserialization() {\n    String json = \"'Dec 3, 2009 1:18:02 PM'\";\n    Timestamp extracted = gson.fromJson(json, Timestamp.class);\n    assertEqualsDate(extracted, 2009, 11, 3);\n    assertEqualsTime(extracted, 13, 18, 2);\n  }",
        "begin_line": 375,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 376,col 5)-(line 376,col 45)",
            "(line 377,col 5)-(line 377,col 63)",
            "(line 378,col 5)-(line 378,col 45)",
            "(line 379,col 5)-(line 379,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization()",
        "snippet": "  public void testDefaultJavaSqlTimeSerialization() {\n    Time now = new Time(1259875082000L);\n    String json = gson.toJson(now);\n    assertEquals(\"\\\"01:18:02 PM\\\"\", json);\n  }",
        "begin_line": 382,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 383,col 5)-(line 383,col 40)",
            "(line 384,col 5)-(line 384,col 35)",
            "(line 385,col 5)-(line 385,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization()",
        "snippet": "  public void testDefaultJavaSqlTimeDeserialization() {\n    String json = \"'1:18:02 PM'\";\n    Time extracted = gson.fromJson(json, Time.class);\n    assertEqualsTime(extracted, 13, 18, 2);\n  }",
        "begin_line": 388,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 389,col 5)-(line 389,col 33)",
            "(line 390,col 5)-(line 390,col 53)",
            "(line 391,col 5)-(line 391,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder()",
        "snippet": "  public void testDefaultDateSerializationUsingBuilder() throws Exception {\n    Gson gson = new GsonBuilder().create();\n    Date now = new Date(1315806903103L);\n    String json = gson.toJson(now);\n    assertEquals(\"\\\"Sep 11, 2011 10:55:03 PM\\\"\", json);\n  }",
        "begin_line": 394,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 395,col 5)-(line 395,col 43)",
            "(line 396,col 5)-(line 396,col 40)",
            "(line 397,col 5)-(line 397,col 35)",
            "(line 398,col 5)-(line 398,col 55)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder()",
        "snippet": "  public void testDefaultDateDeserializationUsingBuilder() throws Exception {\n    Gson gson = new GsonBuilder().create();\n    Date now = new Date(1315806903103L);\n    String json = gson.toJson(now);\n    Date extracted = gson.fromJson(json, Date.class);\n    assertEquals(now.toString(), extracted.toString());\n  }",
        "begin_line": 401,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 402,col 5)-(line 402,col 43)",
            "(line 403,col 5)-(line 403,col 40)",
            "(line 404,col 5)-(line 404,col 35)",
            "(line 405,col 5)-(line 405,col 53)",
            "(line 406,col 5)-(line 406,col 55)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization()",
        "snippet": "  public void testDefaultCalendarSerialization() throws Exception {\n    Gson gson = new GsonBuilder().create();\n    String json = gson.toJson(Calendar.getInstance());\n    assertTrue(json.contains(\"year\"));\n    assertTrue(json.contains(\"month\"));\n    assertTrue(json.contains(\"dayOfMonth\"));\n    assertTrue(json.contains(\"hourOfDay\"));\n    assertTrue(json.contains(\"minute\"));\n    assertTrue(json.contains(\"second\"));\n  }",
        "begin_line": 409,
        "end_line": 418,
        "comment": "",
        "child_ranges": [
            "(line 410,col 5)-(line 410,col 43)",
            "(line 411,col 5)-(line 411,col 54)",
            "(line 412,col 5)-(line 412,col 38)",
            "(line 413,col 5)-(line 413,col 39)",
            "(line 414,col 5)-(line 414,col 44)",
            "(line 415,col 5)-(line 415,col 43)",
            "(line 416,col 5)-(line 416,col 40)",
            "(line 417,col 5)-(line 417,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization()",
        "snippet": "  public void testDefaultCalendarDeserialization() throws Exception {\n    Gson gson = new GsonBuilder().create();\n    String json = \"{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}\";\n    Calendar cal = gson.fromJson(json, Calendar.class);\n    assertEquals(2009, cal.get(Calendar.YEAR));\n    assertEquals(2, cal.get(Calendar.MONTH));\n    assertEquals(11, cal.get(Calendar.DAY_OF_MONTH));\n    assertEquals(14, cal.get(Calendar.HOUR_OF_DAY));\n    assertEquals(29, cal.get(Calendar.MINUTE));\n    assertEquals(23, cal.get(Calendar.SECOND));\n  }",
        "begin_line": 420,
        "end_line": 430,
        "comment": "",
        "child_ranges": [
            "(line 421,col 5)-(line 421,col 43)",
            "(line 422,col 5)-(line 422,col 87)",
            "(line 423,col 5)-(line 423,col 55)",
            "(line 424,col 5)-(line 424,col 47)",
            "(line 425,col 5)-(line 425,col 45)",
            "(line 426,col 5)-(line 426,col 53)",
            "(line 427,col 5)-(line 427,col 52)",
            "(line 428,col 5)-(line 428,col 47)",
            "(line 429,col 5)-(line 429,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization()",
        "snippet": "  public void testDefaultGregorianCalendarSerialization() throws Exception {\n    Gson gson = new GsonBuilder().create();\n    GregorianCalendar cal = new GregorianCalendar();\n    String json = gson.toJson(cal);\n    assertTrue(json.contains(\"year\"));\n    assertTrue(json.contains(\"month\"));\n    assertTrue(json.contains(\"dayOfMonth\"));\n    assertTrue(json.contains(\"hourOfDay\"));\n    assertTrue(json.contains(\"minute\"));\n    assertTrue(json.contains(\"second\"));\n  }",
        "begin_line": 432,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 433,col 5)-(line 433,col 43)",
            "(line 434,col 5)-(line 434,col 52)",
            "(line 435,col 5)-(line 435,col 35)",
            "(line 436,col 5)-(line 436,col 38)",
            "(line 437,col 5)-(line 437,col 39)",
            "(line 438,col 5)-(line 438,col 44)",
            "(line 439,col 5)-(line 439,col 43)",
            "(line 440,col 5)-(line 440,col 40)",
            "(line 441,col 5)-(line 441,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization()",
        "snippet": "  public void testDefaultGregorianCalendarDeserialization() throws Exception {\n    Gson gson = new GsonBuilder().create();\n    String json = \"{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}\";\n    GregorianCalendar cal = gson.fromJson(json, GregorianCalendar.class);\n    assertEquals(2009, cal.get(Calendar.YEAR));\n    assertEquals(2, cal.get(Calendar.MONTH));\n    assertEquals(11, cal.get(Calendar.DAY_OF_MONTH));\n    assertEquals(14, cal.get(Calendar.HOUR_OF_DAY));\n    assertEquals(29, cal.get(Calendar.MINUTE));\n    assertEquals(23, cal.get(Calendar.SECOND));\n  }",
        "begin_line": 444,
        "end_line": 454,
        "comment": "",
        "child_ranges": [
            "(line 445,col 5)-(line 445,col 43)",
            "(line 446,col 5)-(line 446,col 87)",
            "(line 447,col 5)-(line 447,col 73)",
            "(line 448,col 5)-(line 448,col 47)",
            "(line 449,col 5)-(line 449,col 45)",
            "(line 450,col 5)-(line 450,col 53)",
            "(line 451,col 5)-(line 451,col 52)",
            "(line 452,col 5)-(line 452,col 47)",
            "(line 453,col 5)-(line 453,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern()",
        "snippet": "  public void testDateSerializationWithPattern() throws Exception {\n    String pattern = \"yyyy-MM-dd\";\n    Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();\n    Date now = new Date(1315806903103L);\n    String json = gson.toJson(now);\n    assertEquals(\"\\\"2011-09-11\\\"\", json);\n  }",
        "begin_line": 456,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 457,col 5)-(line 457,col 34)",
            "(line 458,col 5)-(line 458,col 97)",
            "(line 459,col 5)-(line 459,col 40)",
            "(line 460,col 5)-(line 460,col 35)",
            "(line 461,col 5)-(line 461,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern()",
        "snippet": "  @SuppressWarnings(\"deprecation\")\n  public void testDateDeserializationWithPattern() throws Exception {\n    String pattern = \"yyyy-MM-dd\";\n    Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();\n    Date now = new Date(1315806903103L);\n    String json = gson.toJson(now);\n    Date extracted = gson.fromJson(json, Date.class);\n    assertEquals(now.getYear(), extracted.getYear());\n    assertEquals(now.getMonth(), extracted.getMonth());\n    assertEquals(now.getDay(), extracted.getDay());\n  }",
        "begin_line": 464,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 466,col 5)-(line 466,col 34)",
            "(line 467,col 5)-(line 467,col 97)",
            "(line 468,col 5)-(line 468,col 40)",
            "(line 469,col 5)-(line 469,col 35)",
            "(line 470,col 5)-(line 470,col 53)",
            "(line 471,col 5)-(line 471,col 53)",
            "(line 472,col 5)-(line 472,col 55)",
            "(line 473,col 5)-(line 473,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter()",
        "snippet": "  public void testDateSerializationWithPatternNotOverridenByTypeAdapter() throws Exception {\n    String pattern = \"yyyy-MM-dd\";\n    Gson gson = new GsonBuilder()\n        .setDateFormat(pattern)\n        .registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {\n          public Date deserialize(JsonElement json, Type typeOfT,\n              JsonDeserializationContext context)\n              throws JsonParseException {\n            return new Date(1315806903103L);\n          }\n        })\n        .create();\n\n    Date now = new Date(1315806903103L);\n    String json = gson.toJson(now);\n    assertEquals(\"\\\"2011-09-11\\\"\", json);\n  }",
        "begin_line": 476,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 477,col 5)-(line 477,col 34)",
            "(line 478,col 5)-(line 487,col 18)",
            "(line 489,col 5)-(line 489,col 40)",
            "(line 490,col 5)-(line 490,col 35)",
            "(line 491,col 5)-(line 491,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.Anonymous-2d84c159-d664-4011-acc4-39f96d8f0df1.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "          public Date deserialize(JsonElement json, Type typeOfT,\n              JsonDeserializationContext context)\n              throws JsonParseException {\n            return new Date(1315806903103L);\n          }",
        "begin_line": 481,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 484,col 13)-(line 484,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection()",
        "snippet": "  public void testDateSerializationInCollection() throws Exception {\n    Type listOfDates = new TypeToken<List<Date>>() {}.getType();\n    TimeZone defaultTimeZone = TimeZone.getDefault();\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n    Locale defaultLocale = Locale.getDefault();\n    Locale.setDefault(Locale.US);\n    try {\n      Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\").create();\n      List<Date> dates = Arrays.asList(new Date(0));\n      String json = gson.toJson(dates, listOfDates);\n      assertEquals(\"[\\\"1970-01-01\\\"]\", json);\n      assertEquals(0L, gson.<List<Date>>fromJson(\"[\\\"1970-01-01\\\"]\", listOfDates).get(0).getTime());\n    } finally {\n      TimeZone.setDefault(defaultTimeZone);\n      Locale.setDefault(defaultLocale);\n    }\n  }",
        "begin_line": 495,
        "end_line": 511,
        "comment": " http://code.google.com/p/google-gson/issues/detail?id=230",
        "child_ranges": [
            "(line 496,col 5)-(line 496,col 64)",
            "(line 497,col 5)-(line 497,col 53)",
            "(line 498,col 5)-(line 498,col 53)",
            "(line 499,col 5)-(line 499,col 47)",
            "(line 500,col 5)-(line 500,col 33)",
            "(line 501,col 5)-(line 510,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization()",
        "snippet": "  public void testTimestampSerialization() throws Exception {\n    TimeZone defaultTimeZone = TimeZone.getDefault();\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n    Locale defaultLocale = Locale.getDefault();\n    Locale.setDefault(Locale.US);\n    try {\n      Timestamp timestamp = new Timestamp(0L);\n      Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\").create();\n      String json = gson.toJson(timestamp, Timestamp.class);\n      assertEquals(\"\\\"1970-01-01\\\"\", json);\n      assertEquals(0, gson.fromJson(\"\\\"1970-01-01\\\"\", Timestamp.class).getTime());\n    } finally {\n      TimeZone.setDefault(defaultTimeZone);\n      Locale.setDefault(defaultLocale);\n    }\n  }",
        "begin_line": 514,
        "end_line": 529,
        "comment": " http://code.google.com/p/google-gson/issues/detail?id=230",
        "child_ranges": [
            "(line 515,col 5)-(line 515,col 53)",
            "(line 516,col 5)-(line 516,col 53)",
            "(line 517,col 5)-(line 517,col 47)",
            "(line 518,col 5)-(line 518,col 33)",
            "(line 519,col 5)-(line 528,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization()",
        "snippet": "  public void testSqlDateSerialization() throws Exception {\n    TimeZone defaultTimeZone = TimeZone.getDefault();\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n    Locale defaultLocale = Locale.getDefault();\n    Locale.setDefault(Locale.US);\n    try {\n      java.sql.Date sqlDate = new java.sql.Date(0L);\n      Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\").create();\n      String json = gson.toJson(sqlDate, Timestamp.class);\n      assertEquals(\"\\\"1970-01-01\\\"\", json);\n      assertEquals(0, gson.fromJson(\"\\\"1970-01-01\\\"\", java.sql.Date.class).getTime());\n    } finally {\n      TimeZone.setDefault(defaultTimeZone);\n      Locale.setDefault(defaultLocale);\n    }\n  }",
        "begin_line": 532,
        "end_line": 547,
        "comment": " http://code.google.com/p/google-gson/issues/detail?id=230",
        "child_ranges": [
            "(line 533,col 5)-(line 533,col 53)",
            "(line 534,col 5)-(line 534,col 53)",
            "(line 535,col 5)-(line 535,col 47)",
            "(line 536,col 5)-(line 536,col 33)",
            "(line 537,col 5)-(line 546,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization()",
        "snippet": "  public void testJsonPrimitiveSerialization() {\n    assertEquals(\"5\", gson.toJson(new JsonPrimitive(5), JsonElement.class));\n    assertEquals(\"true\", gson.toJson(new JsonPrimitive(true), JsonElement.class));\n    assertEquals(\"\\\"foo\\\"\", gson.toJson(new JsonPrimitive(\"foo\"), JsonElement.class));\n    assertEquals(\"\\\"a\\\"\", gson.toJson(new JsonPrimitive('a'), JsonElement.class));\n  }",
        "begin_line": 549,
        "end_line": 554,
        "comment": "",
        "child_ranges": [
            "(line 550,col 5)-(line 550,col 76)",
            "(line 551,col 5)-(line 551,col 82)",
            "(line 552,col 5)-(line 552,col 86)",
            "(line 553,col 5)-(line 553,col 82)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization()",
        "snippet": "  public void testJsonPrimitiveDeserialization() {\n    assertEquals(new JsonPrimitive(5), gson.fromJson(\"5\", JsonElement.class));\n    assertEquals(new JsonPrimitive(5), gson.fromJson(\"5\", JsonPrimitive.class));\n    assertEquals(new JsonPrimitive(true), gson.fromJson(\"true\", JsonElement.class));\n    assertEquals(new JsonPrimitive(true), gson.fromJson(\"true\", JsonPrimitive.class));\n    assertEquals(new JsonPrimitive(\"foo\"), gson.fromJson(\"\\\"foo\\\"\", JsonElement.class));\n    assertEquals(new JsonPrimitive(\"foo\"), gson.fromJson(\"\\\"foo\\\"\", JsonPrimitive.class));\n    assertEquals(new JsonPrimitive('a'), gson.fromJson(\"\\\"a\\\"\", JsonElement.class));\n    assertEquals(new JsonPrimitive('a'), gson.fromJson(\"\\\"a\\\"\", JsonPrimitive.class));\n  }",
        "begin_line": 556,
        "end_line": 565,
        "comment": "",
        "child_ranges": [
            "(line 557,col 5)-(line 557,col 78)",
            "(line 558,col 5)-(line 558,col 80)",
            "(line 559,col 5)-(line 559,col 84)",
            "(line 560,col 5)-(line 560,col 86)",
            "(line 561,col 5)-(line 561,col 88)",
            "(line 562,col 5)-(line 562,col 90)",
            "(line 563,col 5)-(line 563,col 84)",
            "(line 564,col 5)-(line 564,col 86)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization()",
        "snippet": "  public void testJsonNullSerialization() {\n    assertEquals(\"null\", gson.toJson(JsonNull.INSTANCE, JsonElement.class));\n    assertEquals(\"null\", gson.toJson(JsonNull.INSTANCE, JsonNull.class));\n  }",
        "begin_line": 567,
        "end_line": 570,
        "comment": "",
        "child_ranges": [
            "(line 568,col 5)-(line 568,col 76)",
            "(line 569,col 5)-(line 569,col 73)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization()",
        "snippet": "  public void testNullJsonElementSerialization() {\n    assertEquals(\"null\", gson.toJson(null, JsonElement.class));\n    assertEquals(\"null\", gson.toJson(null, JsonNull.class));\n  }",
        "begin_line": 572,
        "end_line": 575,
        "comment": "",
        "child_ranges": [
            "(line 573,col 5)-(line 573,col 63)",
            "(line 574,col 5)-(line 574,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization()",
        "snippet": "  public void testJsonArraySerialization() {\n    JsonArray array = new JsonArray();\n    array.add(new JsonPrimitive(1));\n    array.add(new JsonPrimitive(2));\n    array.add(new JsonPrimitive(3));\n    assertEquals(\"[1,2,3]\", gson.toJson(array, JsonElement.class));\n  }",
        "begin_line": 577,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 578,col 5)-(line 578,col 38)",
            "(line 579,col 5)-(line 579,col 36)",
            "(line 580,col 5)-(line 580,col 36)",
            "(line 581,col 5)-(line 581,col 36)",
            "(line 582,col 5)-(line 582,col 67)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization()",
        "snippet": "  public void testJsonArrayDeserialization() {\n    JsonArray array = new JsonArray();\n    array.add(new JsonPrimitive(1));\n    array.add(new JsonPrimitive(2));\n    array.add(new JsonPrimitive(3));\n\n    String json = \"[1,2,3]\";\n    assertEquals(array, gson.fromJson(json, JsonElement.class));\n    assertEquals(array, gson.fromJson(json, JsonArray.class));\n  }",
        "begin_line": 585,
        "end_line": 594,
        "comment": "",
        "child_ranges": [
            "(line 586,col 5)-(line 586,col 38)",
            "(line 587,col 5)-(line 587,col 36)",
            "(line 588,col 5)-(line 588,col 36)",
            "(line 589,col 5)-(line 589,col 36)",
            "(line 591,col 5)-(line 591,col 28)",
            "(line 592,col 5)-(line 592,col 64)",
            "(line 593,col 5)-(line 593,col 62)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization()",
        "snippet": "  public void testJsonObjectSerialization() {\n    JsonObject object = new JsonObject();\n    object.add(\"foo\", new JsonPrimitive(1));\n    object.add(\"bar\", new JsonPrimitive(2));\n    assertEquals(\"{\\\"foo\\\":1,\\\"bar\\\":2}\", gson.toJson(object, JsonElement.class));\n  }",
        "begin_line": 596,
        "end_line": 601,
        "comment": "",
        "child_ranges": [
            "(line 597,col 5)-(line 597,col 41)",
            "(line 598,col 5)-(line 598,col 44)",
            "(line 599,col 5)-(line 599,col 44)",
            "(line 600,col 5)-(line 600,col 82)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization()",
        "snippet": "  public void testJsonObjectDeserialization() {\n    JsonObject object = new JsonObject();\n    object.add(\"foo\", new JsonPrimitive(1));\n    object.add(\"bar\", new JsonPrimitive(2));\n\n    String json = \"{\\\"foo\\\":1,\\\"bar\\\":2}\";\n    JsonElement actual = gson.fromJson(json, JsonElement.class);\n    assertEquals(object, actual);\n\n    JsonObject actualObj = gson.fromJson(json, JsonObject.class);\n    assertEquals(object, actualObj);\n  }",
        "begin_line": 603,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 604,col 5)-(line 604,col 41)",
            "(line 605,col 5)-(line 605,col 44)",
            "(line 606,col 5)-(line 606,col 44)",
            "(line 608,col 5)-(line 608,col 42)",
            "(line 609,col 5)-(line 609,col 64)",
            "(line 610,col 5)-(line 610,col 33)",
            "(line 612,col 5)-(line 612,col 65)",
            "(line 613,col 5)-(line 613,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization()",
        "snippet": "  public void testJsonNullDeserialization() {\n    assertEquals(JsonNull.INSTANCE, gson.fromJson(\"null\", JsonElement.class));\n    assertEquals(JsonNull.INSTANCE, gson.fromJson(\"null\", JsonNull.class));\n  }",
        "begin_line": 616,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 617,col 5)-(line 617,col 78)",
            "(line 618,col 5)-(line 618,col 75)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonElementTypeMismatch()",
        "snippet": "  public void testJsonElementTypeMismatch() {\n    try {\n      gson.fromJson(\"\\\"abc\\\"\", JsonObject.class);\n      fail();\n    } catch (JsonSyntaxException expected) {\n      assertEquals(\"Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive\",\n          expected.getMessage());\n    }\n  }",
        "begin_line": 621,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 622,col 5)-(line 628,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithBigDecimal.ClassWithBigDecimal(java.lang.String)",
        "snippet": "    ClassWithBigDecimal(String value) {\n      this.value = new BigDecimal(value);\n    }",
        "begin_line": 633,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 634,col 7)-(line 634,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithBigDecimal.getExpectedJson()",
        "snippet": "    String getExpectedJson() {\n      return \"{\\\"value\\\":\" + value.toEngineeringString() + \"}\";\n    }",
        "begin_line": 636,
        "end_line": 638,
        "comment": "",
        "child_ranges": [
            "(line 637,col 7)-(line 637,col 63)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithBigInteger.ClassWithBigInteger(java.lang.String)",
        "snippet": "    ClassWithBigInteger(String value) {\n      this.value = new BigInteger(value);\n    }",
        "begin_line": 643,
        "end_line": 645,
        "comment": "",
        "child_ranges": [
            "(line 644,col 7)-(line 644,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithBigInteger.getExpectedJson()",
        "snippet": "    String getExpectedJson() {\n      return \"{\\\"value\\\":\" + value + \"}\";\n    }",
        "begin_line": 646,
        "end_line": 648,
        "comment": "",
        "child_ranges": [
            "(line 647,col 7)-(line 647,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization()",
        "snippet": "  public void testPropertiesSerialization() {\n    Properties props = new Properties();\n    props.setProperty(\"foo\", \"bar\");\n    String json = gson.toJson(props);\n    String expected = \"{\\\"foo\\\":\\\"bar\\\"}\";\n    assertEquals(expected, json);\n  }",
        "begin_line": 651,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 652,col 5)-(line 652,col 40)",
            "(line 653,col 5)-(line 653,col 36)",
            "(line 654,col 5)-(line 654,col 37)",
            "(line 655,col 5)-(line 655,col 42)",
            "(line 656,col 5)-(line 656,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization()",
        "snippet": "  public void testPropertiesDeserialization() {\n    String json = \"{foo:'bar'}\";\n    Properties props = gson.fromJson(json, Properties.class);\n    assertEquals(\"bar\", props.getProperty(\"foo\"));\n  }",
        "begin_line": 659,
        "end_line": 663,
        "comment": "",
        "child_ranges": [
            "(line 660,col 5)-(line 660,col 32)",
            "(line 661,col 5)-(line 661,col 61)",
            "(line 662,col 5)-(line 662,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization()",
        "snippet": "  public void testTreeSetSerialization() {\n    TreeSet<String> treeSet = new TreeSet<String>();\n    treeSet.add(\"Value1\");\n    String json = gson.toJson(treeSet);\n    assertEquals(\"[\\\"Value1\\\"]\", json);\n  }",
        "begin_line": 665,
        "end_line": 670,
        "comment": "",
        "child_ranges": [
            "(line 666,col 5)-(line 666,col 52)",
            "(line 667,col 5)-(line 667,col 26)",
            "(line 668,col 5)-(line 668,col 39)",
            "(line 669,col 5)-(line 669,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization()",
        "snippet": "  public void testTreeSetDeserialization() {\n    String json = \"['Value1']\";\n    Type type = new TypeToken<TreeSet<String>>() {}.getType();\n    TreeSet<String> treeSet = gson.fromJson(json, type);\n    assertTrue(treeSet.contains(\"Value1\"));\n  }",
        "begin_line": 672,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 673,col 5)-(line 673,col 31)",
            "(line 674,col 5)-(line 674,col 62)",
            "(line 675,col 5)-(line 675,col 56)",
            "(line 676,col 5)-(line 676,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization()",
        "snippet": "  public void testStringBuilderSerialization() {\n    StringBuilder sb = new StringBuilder(\"abc\");\n    String json = gson.toJson(sb);\n    assertEquals(\"\\\"abc\\\"\", json);\n  }",
        "begin_line": 679,
        "end_line": 683,
        "comment": "",
        "child_ranges": [
            "(line 680,col 5)-(line 680,col 48)",
            "(line 681,col 5)-(line 681,col 34)",
            "(line 682,col 5)-(line 682,col 34)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization()",
        "snippet": "  public void testStringBuilderDeserialization() {\n    StringBuilder sb = gson.fromJson(\"'abc'\", StringBuilder.class);\n    assertEquals(\"abc\", sb.toString());\n  }",
        "begin_line": 685,
        "end_line": 688,
        "comment": "",
        "child_ranges": [
            "(line 686,col 5)-(line 686,col 67)",
            "(line 687,col 5)-(line 687,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization()",
        "snippet": "  public void testStringBufferSerialization() {\n    StringBuffer sb = new StringBuffer(\"abc\");\n    String json = gson.toJson(sb);\n    assertEquals(\"\\\"abc\\\"\", json);\n  }",
        "begin_line": 690,
        "end_line": 694,
        "comment": "",
        "child_ranges": [
            "(line 691,col 5)-(line 691,col 46)",
            "(line 692,col 5)-(line 692,col 34)",
            "(line 693,col 5)-(line 693,col 34)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization()",
        "snippet": "  public void testStringBufferDeserialization() {\n    StringBuffer sb = gson.fromJson(\"'abc'\", StringBuffer.class);\n    assertEquals(\"abc\", sb.toString());\n  }",
        "begin_line": 696,
        "end_line": 699,
        "comment": "",
        "child_ranges": [
            "(line 697,col 5)-(line 697,col 65)",
            "(line 698,col 5)-(line 698,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.MyClassTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Class)",
        "snippet": "    @Override\n    public void write(JsonWriter out, Class value) throws IOException {\n      out.value(value.getName());\n    }",
        "begin_line": 703,
        "end_line": 706,
        "comment": "",
        "child_ranges": [
            "(line 705,col 7)-(line 705,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.MyClassTypeAdapter.read(com.google.gson.stream.JsonReader)",
        "snippet": "    @Override\n    public Class read(JsonReader in) throws IOException {\n      String className = in.nextString();\n      try {\n        return Class.forName(className);\n      } catch (ClassNotFoundException e) {\n        throw new IOException(e);\n      }\n    }",
        "begin_line": 707,
        "end_line": 715,
        "comment": "",
        "child_ranges": [
            "(line 709,col 7)-(line 709,col 41)",
            "(line 710,col 7)-(line 714,col 7)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.NumberAsStringAdapter.NumberAsStringAdapter(java.lang.Class<? extends java.lang.Number>)",
        "snippet": "    NumberAsStringAdapter(Class<? extends Number> type) throws Exception {\n      this.constructor = type.getConstructor(String.class);\n    }",
        "begin_line": 720,
        "end_line": 722,
        "comment": "",
        "child_ranges": [
            "(line 721,col 7)-(line 721,col 59)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.NumberAsStringAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Number)",
        "snippet": "    @Override public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value.toString());\n    }",
        "begin_line": 723,
        "end_line": 725,
        "comment": "",
        "child_ranges": [
            "(line 724,col 7)-(line 724,col 34)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.DefaultTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.DefaultTypeAdaptersTest.NumberAsStringAdapter.read(com.google.gson.stream.JsonReader)",
        "snippet": "    @Override public Number read(JsonReader in) throws IOException {\n      try {\n        return constructor.newInstance(in.nextString());\n      } catch (Exception e) {\n        throw new AssertionError(e);\n      }\n    }",
        "begin_line": 726,
        "end_line": 732,
        "comment": "",
        "child_ranges": [
            "(line 727,col 7)-(line 731,col 7)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrettyPrintingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java",
        "signature": "com.google.gson.functional.PrettyPrintingTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new GsonBuilder().setPrettyPrinting().create();\n  }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 18)",
            "(line 48,col 5)-(line 48,col 58)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrettyPrintingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java",
        "signature": "com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList()",
        "snippet": "  public void testPrettyPrintList() {\n    BagOfPrimitives b = new BagOfPrimitives();\n    List<BagOfPrimitives> listOfB = new LinkedList<BagOfPrimitives>();\n    for (int i = 0; i < 15; ++i) {\n      listOfB.add(b);\n    }\n    Type typeOfSrc = new TypeToken<List<BagOfPrimitives>>() {}.getType();\n    String json = gson.toJson(listOfB, typeOfSrc);\n    print(json);\n  }",
        "begin_line": 51,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 46)",
            "(line 53,col 5)-(line 53,col 70)",
            "(line 54,col 5)-(line 56,col 5)",
            "(line 57,col 5)-(line 57,col 73)",
            "(line 58,col 5)-(line 58,col 50)",
            "(line 59,col 5)-(line 59,col 16)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrettyPrintingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java",
        "signature": "com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects()",
        "snippet": "  public void testPrettyPrintArrayOfObjects() {\n    ArrayOfObjects target = new ArrayOfObjects();\n    String json = gson.toJson(target);\n    print(json);\n  }",
        "begin_line": 62,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 63,col 5)-(line 63,col 49)",
            "(line 64,col 5)-(line 64,col 38)",
            "(line 65,col 5)-(line 65,col 16)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrettyPrintingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java",
        "signature": "com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives()",
        "snippet": "  public void testPrettyPrintArrayOfPrimitives() {\n    int[] ints = new int[] { 1, 2, 3, 4, 5 };\n    String json = gson.toJson(ints);\n    assertEquals(\"[\\n  1,\\n  2,\\n  3,\\n  4,\\n  5\\n]\", json);\n  }",
        "begin_line": 68,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 69,col 45)",
            "(line 70,col 5)-(line 70,col 36)",
            "(line 71,col 5)-(line 71,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrettyPrintingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java",
        "signature": "com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays()",
        "snippet": "  public void testPrettyPrintArrayOfPrimitiveArrays() {\n    int[][] ints = new int[][] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 },\n        { 9, 0 }, { 10 } };\n    String json = gson.toJson(ints);\n    assertEquals(\"[\\n  [\\n    1,\\n    2\\n  ],\\n  [\\n    3,\\n    4\\n  ],\\n  [\\n    5,\\n    6\\n  ],\"\n        + \"\\n  [\\n    7,\\n    8\\n  ],\\n  [\\n    9,\\n    0\\n  ],\\n  [\\n    10\\n  ]\\n]\", json);\n  }",
        "begin_line": 74,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 75,col 5)-(line 76,col 27)",
            "(line 77,col 5)-(line 77,col 36)",
            "(line 78,col 5)-(line 79,col 93)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrettyPrintingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java",
        "signature": "com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays()",
        "snippet": "  public void testPrettyPrintListOfPrimitiveArrays() {\n    List<Integer[]> list = Arrays.asList(new Integer[][] { { 1, 2 }, { 3, 4 },\n        { 5, 6 }, { 7, 8 }, { 9, 0 }, { 10 } });\n    String json = gson.toJson(list);\n    assertEquals(\"[\\n  [\\n    1,\\n    2\\n  ],\\n  [\\n    3,\\n    4\\n  ],\\n  [\\n    5,\\n    6\\n  ],\"\n        + \"\\n  [\\n    7,\\n    8\\n  ],\\n  [\\n    9,\\n    0\\n  ],\\n  [\\n    10\\n  ]\\n]\", json);\n  }",
        "begin_line": 82,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 83,col 5)-(line 84,col 48)",
            "(line 85,col 5)-(line 85,col 36)",
            "(line 86,col 5)-(line 87,col 93)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrettyPrintingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java",
        "signature": "com.google.gson.functional.PrettyPrintingTest.testMap()",
        "snippet": "  public void testMap() {\n    Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n    map.put(\"abc\", 1);\n    map.put(\"def\", 5);\n    String json = gson.toJson(map);\n    assertEquals(\"{\\n  \\\"abc\\\": 1,\\n  \\\"def\\\": 5\\n}\", json);\n  }",
        "begin_line": 90,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 91,col 5)-(line 91,col 68)",
            "(line 92,col 5)-(line 92,col 22)",
            "(line 93,col 5)-(line 93,col 22)",
            "(line 94,col 5)-(line 94,col 35)",
            "(line 95,col 5)-(line 95,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrettyPrintingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java",
        "signature": "com.google.gson.functional.PrettyPrintingTest.testEmptyMapField()",
        "snippet": "  public void testEmptyMapField() {\n    ClassWithMap obj = new ClassWithMap();\n    obj.map = new LinkedHashMap<String, Integer>();\n    String json = gson.toJson(obj);\n    assertTrue(json.contains(\"{\\n  \\\"map\\\": {},\\n  \\\"value\\\": 2\\n}\"));\n  }",
        "begin_line": 99,
        "end_line": 104,
        "comment": " In response to bug 153",
        "child_ranges": [
            "(line 100,col 5)-(line 100,col 42)",
            "(line 101,col 5)-(line 101,col 51)",
            "(line 102,col 5)-(line 102,col 35)",
            "(line 103,col 5)-(line 103,col 70)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrettyPrintingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java",
        "signature": "com.google.gson.functional.PrettyPrintingTest.testMultipleArrays()",
        "snippet": "  public void testMultipleArrays() {\n    int[][][] ints = new int[][][] { { { 1 }, { 2 } } };\n    String json = gson.toJson(ints);\n    assertEquals(\"[\\n  [\\n    [\\n      1\\n    ],\\n    [\\n      2\\n    ]\\n  ]\\n]\", json);\n  }",
        "begin_line": 112,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 113,col 5)-(line 113,col 56)",
            "(line 114,col 5)-(line 114,col 36)",
            "(line 115,col 5)-(line 115,col 88)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.PrettyPrintingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java",
        "signature": "com.google.gson.functional.PrettyPrintingTest.print(java.lang.String)",
        "snippet": "  private void print(String msg) {\n    if (DEBUG) {\n      System.out.println(msg);\n    }\n  }",
        "begin_line": 118,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 121,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 55,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 57,col 18)",
            "(line 58,col 5)-(line 58,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization()",
        "snippet": "  public void testTopLevelCollectionOfIntegersSerialization() {\n    Collection<Integer> target = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\n    Type targetType = new TypeToken<Collection<Integer>>() {}.getType();\n    String json = gson.toJson(target, targetType);\n    assertEquals(\"[1,2,3,4,5,6,7,8,9]\", json);\n  }",
        "begin_line": 61,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 74)",
            "(line 63,col 5)-(line 63,col 72)",
            "(line 64,col 5)-(line 64,col 50)",
            "(line 65,col 5)-(line 65,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization()",
        "snippet": "  public void testTopLevelCollectionOfIntegersDeserialization() {\n    String json = \"[0,1,2,3,4,5,6,7,8,9]\";\n    Type collectionType = new TypeToken<Collection<Integer>>() { }.getType();\n    Collection<Integer> target = gson.fromJson(json, collectionType);\n    int[] expected = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    MoreAsserts.assertEquals(expected, toIntArray(target));\n  }",
        "begin_line": 68,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 69,col 42)",
            "(line 70,col 5)-(line 70,col 77)",
            "(line 71,col 5)-(line 71,col 69)",
            "(line 72,col 5)-(line 72,col 52)",
            "(line 73,col 5)-(line 73,col 59)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization()",
        "snippet": "  public void testTopLevelListOfIntegerCollectionsDeserialization() throws Exception {\n    String json = \"[[1,2,3],[4,5,6],[7,8,9]]\";\n    Type collectionType = new TypeToken<Collection<Collection<Integer>>>() {}.getType();\n    List<Collection<Integer>> target = gson.fromJson(json, collectionType);\n    int[][] expected = new int[3][3];\n    for (int i = 0; i < 3; ++i) {\n      int start = (3 * i) + 1;\n      for (int j = 0; j < 3; ++j) {\n        expected[i][j] = start + j;\n      }\n    }\n\n    for (int i = 0; i < 3; i++) {\n      MoreAsserts.assertEquals(expected[i], toIntArray(target.get(i)));\n    }\n  }",
        "begin_line": 76,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 77,col 5)-(line 77,col 46)",
            "(line 78,col 5)-(line 78,col 88)",
            "(line 79,col 5)-(line 79,col 75)",
            "(line 80,col 5)-(line 80,col 37)",
            "(line 81,col 5)-(line 86,col 5)",
            "(line 88,col 5)-(line 90,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testLinkedListSerialization()",
        "snippet": "  public void testLinkedListSerialization() {\n    List<String> list = new LinkedList<String>();\n    list.add(\"a1\");\n    list.add(\"a2\");\n    Type linkedListType = new TypeToken<LinkedList<String>>() {}.getType();\n    String json = gson.toJson(list, linkedListType);\n    assertTrue(json.contains(\"a1\"));\n    assertTrue(json.contains(\"a2\"));\n  }",
        "begin_line": 93,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 94,col 5)-(line 94,col 49)",
            "(line 95,col 5)-(line 95,col 19)",
            "(line 96,col 5)-(line 96,col 19)",
            "(line 97,col 5)-(line 97,col 75)",
            "(line 98,col 5)-(line 98,col 52)",
            "(line 99,col 5)-(line 99,col 36)",
            "(line 100,col 5)-(line 100,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testLinkedListDeserialization()",
        "snippet": "  public void testLinkedListDeserialization() {\n    String json = \"['a1','a2']\";\n    Type linkedListType = new TypeToken<LinkedList<String>>() {}.getType();\n    List<String> list = gson.fromJson(json, linkedListType);\n    assertEquals(\"a1\", list.get(0));\n    assertEquals(\"a2\", list.get(1));\n  }",
        "begin_line": 103,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 104,col 5)-(line 104,col 32)",
            "(line 105,col 5)-(line 105,col 75)",
            "(line 106,col 5)-(line 106,col 60)",
            "(line 107,col 5)-(line 107,col 36)",
            "(line 108,col 5)-(line 108,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testQueueSerialization()",
        "snippet": "  public void testQueueSerialization() {\n    Queue<String> queue = new LinkedList<String>();\n    queue.add(\"a1\");\n    queue.add(\"a2\");\n    Type queueType = new TypeToken<Queue<String>>() {}.getType();\n    String json = gson.toJson(queue, queueType);\n    assertTrue(json.contains(\"a1\"));\n    assertTrue(json.contains(\"a2\"));\n  }",
        "begin_line": 111,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 112,col 5)-(line 112,col 51)",
            "(line 113,col 5)-(line 113,col 20)",
            "(line 114,col 5)-(line 114,col 20)",
            "(line 115,col 5)-(line 115,col 65)",
            "(line 116,col 5)-(line 116,col 48)",
            "(line 117,col 5)-(line 117,col 36)",
            "(line 118,col 5)-(line 118,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testQueueDeserialization()",
        "snippet": "  public void testQueueDeserialization() {\n    String json = \"['a1','a2']\";\n    Type queueType = new TypeToken<Queue<String>>() {}.getType();\n    Queue<String> queue = gson.fromJson(json, queueType);\n    assertEquals(\"a1\", queue.element());\n    queue.remove();\n    assertEquals(\"a2\", queue.element());\n  }",
        "begin_line": 121,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 122,col 5)-(line 122,col 32)",
            "(line 123,col 5)-(line 123,col 65)",
            "(line 124,col 5)-(line 124,col 57)",
            "(line 125,col 5)-(line 125,col 40)",
            "(line 126,col 5)-(line 126,col 19)",
            "(line 127,col 5)-(line 127,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testPriorityQueue()",
        "snippet": "  public void testPriorityQueue() throws Exception {\n    Type type = new TypeToken<PriorityQueue<Integer>>(){}.getType();\n    PriorityQueue<Integer> queue = gson.fromJson(\"[10, 20, 22]\", type);\n    assertEquals(3, queue.size());\n    String json = gson.toJson(queue);\n    assertEquals(10, queue.remove().intValue());\n    assertEquals(20, queue.remove().intValue());\n    assertEquals(22, queue.remove().intValue());\n    assertEquals(\"[10,20,22]\", json);\n  }",
        "begin_line": 130,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 68)",
            "(line 132,col 5)-(line 132,col 71)",
            "(line 133,col 5)-(line 133,col 34)",
            "(line 134,col 5)-(line 134,col 37)",
            "(line 135,col 5)-(line 135,col 48)",
            "(line 136,col 5)-(line 136,col 48)",
            "(line 137,col 5)-(line 137,col 48)",
            "(line 138,col 5)-(line 138,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testVector()",
        "snippet": "  public void testVector() {\n    Type type = new TypeToken<Vector<Integer>>(){}.getType();\n    Vector<Integer> target = gson.fromJson(\"[10, 20, 31]\", type);\n    assertEquals(3, target.size());\n    assertEquals(10, target.get(0).intValue());\n    assertEquals(20, target.get(1).intValue());\n    assertEquals(31, target.get(2).intValue());\n    String json = gson.toJson(target);\n    assertEquals(\"[10,20,31]\", json);\n  }",
        "begin_line": 141,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 142,col 5)-(line 142,col 61)",
            "(line 143,col 5)-(line 143,col 65)",
            "(line 144,col 5)-(line 144,col 35)",
            "(line 145,col 5)-(line 145,col 47)",
            "(line 146,col 5)-(line 146,col 47)",
            "(line 147,col 5)-(line 147,col 47)",
            "(line 148,col 5)-(line 148,col 38)",
            "(line 149,col 5)-(line 149,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testStack()",
        "snippet": "  public void testStack() {\n    Type type = new TypeToken<Stack<Integer>>(){}.getType();\n    Stack<Integer> target = gson.fromJson(\"[11, 13, 17]\", type);\n    assertEquals(3, target.size());\n    String json = gson.toJson(target);\n    assertEquals(17, target.pop().intValue());\n    assertEquals(13, target.pop().intValue());\n    assertEquals(11, target.pop().intValue());\n    assertEquals(\"[11,13,17]\", json);\n  }",
        "begin_line": 152,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 153,col 60)",
            "(line 154,col 5)-(line 154,col 64)",
            "(line 155,col 5)-(line 155,col 35)",
            "(line 156,col 5)-(line 156,col 38)",
            "(line 157,col 5)-(line 157,col 46)",
            "(line 158,col 5)-(line 158,col 46)",
            "(line 159,col 5)-(line 159,col 46)",
            "(line 160,col 5)-(line 160,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testNullsInListSerialization()",
        "snippet": "  public void testNullsInListSerialization() {\n    List<String> list = new ArrayList<String>();\n    list.add(\"foo\");\n    list.add(null);\n    list.add(\"bar\");\n    String expected = \"[\\\"foo\\\",null,\\\"bar\\\"]\";\n    Type typeOfList = new TypeToken<List<String>>() {}.getType();\n    String json = gson.toJson(list, typeOfList);\n    assertEquals(expected, json);\n  }",
        "begin_line": 163,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 164,col 5)-(line 164,col 48)",
            "(line 165,col 5)-(line 165,col 20)",
            "(line 166,col 5)-(line 166,col 19)",
            "(line 167,col 5)-(line 167,col 20)",
            "(line 168,col 5)-(line 168,col 47)",
            "(line 169,col 5)-(line 169,col 65)",
            "(line 170,col 5)-(line 170,col 48)",
            "(line 171,col 5)-(line 171,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testNullsInListDeserialization()",
        "snippet": "  public void testNullsInListDeserialization() {\n    List<String> expected = new ArrayList<String>();\n    expected.add(\"foo\");\n    expected.add(null);\n    expected.add(\"bar\");\n    String json = \"[\\\"foo\\\",null,\\\"bar\\\"]\";\n    Type expectedType = new TypeToken<List<String>>() {}.getType();\n    List<String> target = gson.fromJson(json, expectedType);\n    for (int i = 0; i < expected.size(); ++i) {\n      assertEquals(expected.get(i), target.get(i));\n    }\n  }",
        "begin_line": 174,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 175,col 5)-(line 175,col 52)",
            "(line 176,col 5)-(line 176,col 24)",
            "(line 177,col 5)-(line 177,col 23)",
            "(line 178,col 5)-(line 178,col 24)",
            "(line 179,col 5)-(line 179,col 43)",
            "(line 180,col 5)-(line 180,col 67)",
            "(line 181,col 5)-(line 181,col 60)",
            "(line 182,col 5)-(line 184,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization()",
        "snippet": "  public void testCollectionOfObjectSerialization() {\n    List<Object> target = new ArrayList<Object>();\n    target.add(\"Hello\");\n    target.add(\"World\");\n    assertEquals(\"[\\\"Hello\\\",\\\"World\\\"]\", gson.toJson(target));\n\n    Type type = new TypeToken<List<Object>>() {}.getType();\n    assertEquals(\"[\\\"Hello\\\",\\\"World\\\"]\", gson.toJson(target, type));\n  }",
        "begin_line": 187,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 188,col 50)",
            "(line 189,col 5)-(line 189,col 24)",
            "(line 190,col 5)-(line 190,col 24)",
            "(line 191,col 5)-(line 191,col 63)",
            "(line 193,col 5)-(line 193,col 59)",
            "(line 194,col 5)-(line 194,col 69)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization()",
        "snippet": "  public void testCollectionOfObjectWithNullSerialization() {\n    List<Object> target = new ArrayList<Object>();\n    target.add(\"Hello\");\n    target.add(null);\n    target.add(\"World\");\n    assertEquals(\"[\\\"Hello\\\",null,\\\"World\\\"]\", gson.toJson(target));\n\n    Type type = new TypeToken<List<Object>>() {}.getType();\n    assertEquals(\"[\\\"Hello\\\",null,\\\"World\\\"]\", gson.toJson(target, type));\n  }",
        "begin_line": 197,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 198,col 5)-(line 198,col 50)",
            "(line 199,col 5)-(line 199,col 24)",
            "(line 200,col 5)-(line 200,col 21)",
            "(line 201,col 5)-(line 201,col 24)",
            "(line 202,col 5)-(line 202,col 68)",
            "(line 204,col 5)-(line 204,col 59)",
            "(line 205,col 5)-(line 205,col 74)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization()",
        "snippet": "  public void testCollectionOfStringsSerialization() {\n    List<String> target = new ArrayList<String>();\n    target.add(\"Hello\");\n    target.add(\"World\");\n    assertEquals(\"[\\\"Hello\\\",\\\"World\\\"]\", gson.toJson(target));\n  }",
        "begin_line": 208,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 209,col 5)-(line 209,col 50)",
            "(line 210,col 5)-(line 210,col 24)",
            "(line 211,col 5)-(line 211,col 24)",
            "(line 212,col 5)-(line 212,col 63)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization()",
        "snippet": "  public void testCollectionOfBagOfPrimitivesSerialization() {\n    List<BagOfPrimitives> target = new ArrayList<BagOfPrimitives>();\n    BagOfPrimitives objA = new BagOfPrimitives(3L, 1, true, \"blah\");\n    BagOfPrimitives objB = new BagOfPrimitives(2L, 6, false, \"blahB\");\n    target.add(objA);\n    target.add(objB);\n\n    String result = gson.toJson(target);\n    assertTrue(result.startsWith(\"[\"));\n    assertTrue(result.endsWith(\"]\"));\n    for (BagOfPrimitives obj : target) {\n      assertTrue(result.contains(obj.getExpectedJson()));\n    }\n  }",
        "begin_line": 215,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 216,col 5)-(line 216,col 68)",
            "(line 217,col 5)-(line 217,col 68)",
            "(line 218,col 5)-(line 218,col 70)",
            "(line 219,col 5)-(line 219,col 21)",
            "(line 220,col 5)-(line 220,col 21)",
            "(line 222,col 5)-(line 222,col 40)",
            "(line 223,col 5)-(line 223,col 39)",
            "(line 224,col 5)-(line 224,col 37)",
            "(line 225,col 5)-(line 227,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization()",
        "snippet": "  public void testCollectionOfStringsDeserialization() {\n    String json = \"[\\\"Hello\\\",\\\"World\\\"]\";\n    Type collectionType = new TypeToken<Collection<String>>() { }.getType();\n    Collection<String> target = gson.fromJson(json, collectionType);\n\n    assertTrue(target.contains(\"Hello\"));\n    assertTrue(target.contains(\"World\"));\n  }",
        "begin_line": 230,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 231,col 5)-(line 231,col 42)",
            "(line 232,col 5)-(line 232,col 76)",
            "(line 233,col 5)-(line 233,col 68)",
            "(line 235,col 5)-(line 235,col 41)",
            "(line 236,col 5)-(line 236,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization()",
        "snippet": "  public void testRawCollectionOfIntegersSerialization() {\n    Collection<Integer> target = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\n    assertEquals(\"[1,2,3,4,5,6,7,8,9]\", gson.toJson(target));\n  }",
        "begin_line": 239,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 240,col 5)-(line 240,col 74)",
            "(line 241,col 5)-(line 241,col 61)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testRawCollectionSerialization()",
        "snippet": "  @SuppressWarnings(\"rawtypes\")\n  public void testRawCollectionSerialization() {\n    BagOfPrimitives bag1 = new BagOfPrimitives();\n    Collection target = Arrays.asList(bag1, bag1);\n    String json = gson.toJson(target);\n    assertTrue(json.contains(bag1.getExpectedJson()));\n  }",
        "begin_line": 244,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 246,col 5)-(line 246,col 49)",
            "(line 247,col 5)-(line 247,col 50)",
            "(line 248,col 5)-(line 248,col 38)",
            "(line 249,col 5)-(line 249,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed()",
        "snippet": "  @SuppressWarnings(\"rawtypes\")\n  public void testRawCollectionDeserializationNotAlllowed() {\n    String json = \"[0,1,2,3,4,5,6,7,8,9]\";\n    Collection integers = gson.fromJson(json, Collection.class);\n    // JsonReader converts numbers to double by default so we need a floating point comparison\n    assertEquals(Arrays.asList(0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0), integers);\n\n    json = \"[\\\"Hello\\\", \\\"World\\\"]\";\n    Collection strings = gson.fromJson(json, Collection.class);\n    assertTrue(strings.contains(\"Hello\"));\n    assertTrue(strings.contains(\"World\"));\n  }",
        "begin_line": 252,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 254,col 42)",
            "(line 255,col 5)-(line 255,col 64)",
            "(line 257,col 5)-(line 257,col 92)",
            "(line 259,col 5)-(line 259,col 36)",
            "(line 260,col 5)-(line 260,col 63)",
            "(line 261,col 5)-(line 261,col 42)",
            "(line 262,col 5)-(line 262,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed()",
        "snippet": "  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  public void testRawCollectionOfBagOfPrimitivesNotAllowed() {\n    BagOfPrimitives bag = new BagOfPrimitives(10, 20, false, \"stringValue\");\n    String json = '[' + bag.getExpectedJson() + ',' + bag.getExpectedJson() + ']';\n    Collection target = gson.fromJson(json, Collection.class);\n    assertEquals(2, target.size());\n    for (Object bag1 : target) {\n      // Gson 2.0 converts raw objects into maps\n      Map<String, Object> values = (Map<String, Object>) bag1;\n      assertTrue(values.containsValue(10.0));\n      assertTrue(values.containsValue(20.0));\n      assertTrue(values.containsValue(\"stringValue\"));\n    }\n  }",
        "begin_line": 265,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 267,col 5)-(line 267,col 76)",
            "(line 268,col 5)-(line 268,col 82)",
            "(line 269,col 5)-(line 269,col 62)",
            "(line 270,col 5)-(line 270,col 35)",
            "(line 271,col 5)-(line 277,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization()",
        "snippet": "  public void testWildcardPrimitiveCollectionSerilaization() throws Exception {\n    Collection<? extends Integer> target = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\n    Type collectionType = new TypeToken<Collection<? extends Integer>>() { }.getType();\n    String json = gson.toJson(target, collectionType);\n    assertEquals(\"[1,2,3,4,5,6,7,8,9]\", json);\n\n    json = gson.toJson(target);\n    assertEquals(\"[1,2,3,4,5,6,7,8,9]\", json);\n  }",
        "begin_line": 280,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 281,col 5)-(line 281,col 84)",
            "(line 282,col 5)-(line 282,col 87)",
            "(line 283,col 5)-(line 283,col 54)",
            "(line 284,col 5)-(line 284,col 46)",
            "(line 286,col 5)-(line 286,col 31)",
            "(line 287,col 5)-(line 287,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization()",
        "snippet": "  public void testWildcardPrimitiveCollectionDeserilaization() throws Exception {\n    String json = \"[1,2,3,4,5,6,7,8,9]\";\n    Type collectionType = new TypeToken<Collection<? extends Integer>>() { }.getType();\n    Collection<? extends Integer> target = gson.fromJson(json, collectionType);\n    assertEquals(9, target.size());\n    assertTrue(target.contains(1));\n    assertTrue(target.contains(9));\n  }",
        "begin_line": 290,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 291,col 5)-(line 291,col 40)",
            "(line 292,col 5)-(line 292,col 87)",
            "(line 293,col 5)-(line 293,col 79)",
            "(line 294,col 5)-(line 294,col 35)",
            "(line 295,col 5)-(line 295,col 35)",
            "(line 296,col 5)-(line 296,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testWildcardCollectionField()",
        "snippet": "  public void testWildcardCollectionField() throws Exception {\n    Collection<BagOfPrimitives> collection = new ArrayList<BagOfPrimitives>();\n    BagOfPrimitives objA = new BagOfPrimitives(3L, 1, true, \"blah\");\n    BagOfPrimitives objB = new BagOfPrimitives(2L, 6, false, \"blahB\");\n    collection.add(objA);\n    collection.add(objB);\n\n    ObjectWithWildcardCollection target = new ObjectWithWildcardCollection(collection);\n    String json = gson.toJson(target);\n    assertTrue(json.contains(objA.getExpectedJson()));\n    assertTrue(json.contains(objB.getExpectedJson()));\n\n    target = gson.fromJson(json, ObjectWithWildcardCollection.class);\n    Collection<? extends BagOfPrimitives> deserializedCollection = target.getCollection();\n    assertEquals(2, deserializedCollection.size());\n    assertTrue(deserializedCollection.contains(objA));\n    assertTrue(deserializedCollection.contains(objB));\n  }",
        "begin_line": 299,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 78)",
            "(line 301,col 5)-(line 301,col 68)",
            "(line 302,col 5)-(line 302,col 70)",
            "(line 303,col 5)-(line 303,col 25)",
            "(line 304,col 5)-(line 304,col 25)",
            "(line 306,col 5)-(line 306,col 87)",
            "(line 307,col 5)-(line 307,col 38)",
            "(line 308,col 5)-(line 308,col 54)",
            "(line 309,col 5)-(line 309,col 54)",
            "(line 311,col 5)-(line 311,col 69)",
            "(line 312,col 5)-(line 312,col 90)",
            "(line 313,col 5)-(line 313,col 51)",
            "(line 314,col 5)-(line 314,col 54)",
            "(line 315,col 5)-(line 315,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testFieldIsArrayList()",
        "snippet": "  public void testFieldIsArrayList() {\n    HasArrayListField object = new HasArrayListField();\n    object.longs.add(1L);\n    object.longs.add(3L);\n    String json = gson.toJson(object, HasArrayListField.class);\n    assertEquals(\"{\\\"longs\\\":[1,3]}\", json);\n    HasArrayListField copy = gson.fromJson(\"{\\\"longs\\\":[1,3]}\", HasArrayListField.class);\n    assertEquals(Arrays.asList(1L, 3L), copy.longs);\n  }",
        "begin_line": 318,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 319,col 5)-(line 319,col 55)",
            "(line 320,col 5)-(line 320,col 25)",
            "(line 321,col 5)-(line 321,col 25)",
            "(line 322,col 5)-(line 322,col 63)",
            "(line 323,col 5)-(line 323,col 44)",
            "(line 324,col 5)-(line 324,col 89)",
            "(line 325,col 5)-(line 325,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter()",
        "snippet": "  public void testUserCollectionTypeAdapter() {\n    Type listOfString = new TypeToken<List<String>>() {}.getType();\n    Object stringListSerializer = new JsonSerializer<List<String>>() {\n      public JsonElement serialize(List<String> src, Type typeOfSrc,\n          JsonSerializationContext context) {\n        return new JsonPrimitive(src.get(0) + \";\" + src.get(1));\n      }\n    };\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(listOfString, stringListSerializer)\n        .create();\n    assertEquals(\"\\\"ab;cd\\\"\", gson.toJson(Arrays.asList(\"ab\", \"cd\"), listOfString));\n  }",
        "begin_line": 328,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 329,col 5)-(line 329,col 67)",
            "(line 330,col 5)-(line 335,col 6)",
            "(line 336,col 5)-(line 338,col 18)",
            "(line 339,col 5)-(line 339,col 84)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.Anonymous-7a39d71b-37ec-4008-9ae7-06f21c3a5e1d.serialize(java.util.List<java.lang.String>, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "      public JsonElement serialize(List<String> src, Type typeOfSrc,\n          JsonSerializationContext context) {\n        return new JsonPrimitive(src.get(0) + \";\" + src.get(1));\n      }",
        "begin_line": 331,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.toIntArray(java.util.Collection)",
        "snippet": "  @SuppressWarnings(\"rawtypes\")\n  private static int[] toIntArray(Collection collection) {\n    int[] ints = new int[collection.size()];\n    int i = 0;\n    for (Iterator iterator = collection.iterator(); iterator.hasNext(); ++i) {\n      Object obj = iterator.next();\n      if (obj instanceof Integer) {\n        ints[i] = ((Integer)obj).intValue();\n      } else if (obj instanceof Long) {\n        ints[i] = ((Long)obj).intValue();\n      }\n    }\n    return ints;\n  }",
        "begin_line": 346,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 348,col 5)-(line 348,col 44)",
            "(line 349,col 5)-(line 349,col 14)",
            "(line 350,col 5)-(line 357,col 5)",
            "(line 358,col 5)-(line 358,col 16)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "ObjectWithWildcardCollection(Collection)",
        "snippet": "    public ObjectWithWildcardCollection(Collection<? extends BagOfPrimitives> collection) {\n      this.collection = collection;\n    }",
        "begin_line": 364,
        "end_line": 366,
        "comment": "",
        "child_ranges": [
            "(line 365,col 7)-(line 365,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.ObjectWithWildcardCollection.getCollection()",
        "snippet": "    public Collection<? extends BagOfPrimitives> getCollection() {\n      return collection;\n    }",
        "begin_line": 368,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 369,col 7)-(line 369,col 24)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.Entry.Entry(int)",
        "snippet": "    Entry(int value) {\n      this.value = value;\n    }",
        "begin_line": 375,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 376,col 7)-(line 376,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testSetSerialization()",
        "snippet": "  public void testSetSerialization() {\n    Set<Entry> set = new HashSet<Entry>();\n    set.add(new Entry(1));\n    set.add(new Entry(2));\n    String json = gson.toJson(set);\n    assertTrue(json.contains(\"1\"));\n    assertTrue(json.contains(\"2\"));\n  }",
        "begin_line": 379,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 380,col 5)-(line 380,col 42)",
            "(line 381,col 5)-(line 381,col 26)",
            "(line 382,col 5)-(line 382,col 26)",
            "(line 383,col 5)-(line 383,col 35)",
            "(line 384,col 5)-(line 384,col 35)",
            "(line 385,col 5)-(line 385,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CollectionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
        "signature": "com.google.gson.functional.CollectionTest.testSetDeserialization()",
        "snippet": "  public void testSetDeserialization() {\n    String json = \"[{value:1},{value:2}]\";\n    Type type = new TypeToken<Set<Entry>>() {}.getType();\n    Set<Entry> set = gson.fromJson(json, type);\n    assertEquals(2, set.size());\n    for (Entry entry : set) {\n      assertTrue(entry.value == 1 || entry.value == 2);\n    }\n  }",
        "begin_line": 387,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 388,col 5)-(line 388,col 42)",
            "(line 389,col 5)-(line 389,col 57)",
            "(line 390,col 5)-(line 390,col 47)",
            "(line 391,col 5)-(line 391,col 32)",
            "(line 392,col 5)-(line 394,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ReadersWritersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java",
        "signature": "com.google.gson.functional.ReadersWritersTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 18)",
            "(line 48,col 5)-(line 48,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ReadersWritersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java",
        "signature": "com.google.gson.functional.ReadersWritersTest.testWriterForSerialization()",
        "snippet": "  public void testWriterForSerialization() throws Exception {\n    Writer writer = new StringWriter();\n    BagOfPrimitives src = new BagOfPrimitives();\n    gson.toJson(src, writer);\n    assertEquals(src.getExpectedJson(), writer.toString());\n  }",
        "begin_line": 51,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 39)",
            "(line 53,col 5)-(line 53,col 48)",
            "(line 54,col 5)-(line 54,col 29)",
            "(line 55,col 5)-(line 55,col 59)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ReadersWritersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java",
        "signature": "com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization()",
        "snippet": "  public void testReaderForDeserialization() throws Exception {\n    BagOfPrimitives expected = new BagOfPrimitives();\n    Reader json = new StringReader(expected.getExpectedJson());\n    BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 59,col 5)-(line 59,col 53)",
            "(line 60,col 5)-(line 60,col 63)",
            "(line 61,col 5)-(line 61,col 72)",
            "(line 62,col 5)-(line 62,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ReadersWritersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java",
        "signature": "com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter()",
        "snippet": "  public void testTopLevelNullObjectSerializationWithWriter() {\n    StringWriter writer = new StringWriter();\n    gson.toJson(null, writer);\n    assertEquals(\"null\", writer.toString());\n  }",
        "begin_line": 65,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 66,col 5)-(line 66,col 45)",
            "(line 67,col 5)-(line 67,col 30)",
            "(line 68,col 5)-(line 68,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ReadersWritersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java",
        "signature": "com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader()",
        "snippet": "  public void testTopLevelNullObjectDeserializationWithReader() {\n    StringReader reader = new StringReader(\"null\");\n    Integer nullIntObject = gson.fromJson(reader, Integer.class);\n    assertNull(nullIntObject);\n  }",
        "begin_line": 71,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 51)",
            "(line 73,col 5)-(line 73,col 65)",
            "(line 74,col 5)-(line 74,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ReadersWritersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java",
        "signature": "com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls()",
        "snippet": "  public void testTopLevelNullObjectSerializationWithWriterAndSerializeNulls() {\n    Gson gson = new GsonBuilder().serializeNulls().create();\n    StringWriter writer = new StringWriter();\n    gson.toJson(null, writer);\n    assertEquals(\"null\", writer.toString());\n  }",
        "begin_line": 77,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 78,col 60)",
            "(line 79,col 5)-(line 79,col 45)",
            "(line 80,col 5)-(line 80,col 30)",
            "(line 81,col 5)-(line 81,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ReadersWritersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java",
        "signature": "com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls()",
        "snippet": "  public void testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls() {\n    Gson gson = new GsonBuilder().serializeNulls().create();\n    StringReader reader = new StringReader(\"null\");\n    Integer nullIntObject = gson.fromJson(reader, Integer.class);\n    assertNull(nullIntObject);\n  }",
        "begin_line": 84,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 85,col 60)",
            "(line 86,col 5)-(line 86,col 51)",
            "(line 87,col 5)-(line 87,col 65)",
            "(line 88,col 5)-(line 88,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ReadersWritersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java",
        "signature": "com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings()",
        "snippet": "  public void testReadWriteTwoStrings() throws IOException {\n    Gson gson= new Gson();\n    CharArrayWriter writer= new CharArrayWriter();\n    writer.write(gson.toJson(\"one\").toCharArray());\n    writer.write(gson.toJson(\"two\").toCharArray());\n    CharArrayReader reader = new CharArrayReader(writer.toCharArray());\n    JsonStreamParser parser = new JsonStreamParser(reader);\n    String actualOne = gson.fromJson(parser.next(), String.class);\n    assertEquals(\"one\", actualOne);\n    String actualTwo = gson.fromJson(parser.next(), String.class);\n    assertEquals(\"two\", actualTwo);\n  }",
        "begin_line": 91,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 92,col 26)",
            "(line 93,col 5)-(line 93,col 50)",
            "(line 94,col 5)-(line 94,col 51)",
            "(line 95,col 5)-(line 95,col 51)",
            "(line 96,col 5)-(line 96,col 71)",
            "(line 97,col 5)-(line 97,col 59)",
            "(line 98,col 5)-(line 98,col 66)",
            "(line 99,col 5)-(line 99,col 35)",
            "(line 100,col 5)-(line 100,col 66)",
            "(line 101,col 5)-(line 101,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ReadersWritersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java",
        "signature": "com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects()",
        "snippet": "  public void testReadWriteTwoObjects() throws IOException {\n    Gson gson= new Gson();\n    CharArrayWriter writer= new CharArrayWriter();\n    BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, \"one\");\n    writer.write(gson.toJson(expectedOne).toCharArray());\n    BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, \"two\");\n    writer.write(gson.toJson(expectedTwo).toCharArray());\n    CharArrayReader reader = new CharArrayReader(writer.toCharArray());\n    JsonStreamParser parser = new JsonStreamParser(reader);\n    BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class);\n    assertEquals(\"one\", actualOne.stringValue);\n    BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class);\n    assertEquals(\"two\", actualTwo.stringValue);\n    assertFalse(parser.hasNext());\n  }",
        "begin_line": 104,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 105,col 5)-(line 105,col 26)",
            "(line 106,col 5)-(line 106,col 50)",
            "(line 107,col 5)-(line 107,col 73)",
            "(line 108,col 5)-(line 108,col 57)",
            "(line 109,col 5)-(line 109,col 74)",
            "(line 110,col 5)-(line 110,col 57)",
            "(line 111,col 5)-(line 111,col 71)",
            "(line 112,col 5)-(line 112,col 59)",
            "(line 113,col 5)-(line 113,col 84)",
            "(line 114,col 5)-(line 114,col 47)",
            "(line 115,col 5)-(line 115,col 84)",
            "(line 116,col 5)-(line 116,col 47)",
            "(line 117,col 5)-(line 117,col 34)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ReadersWritersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java",
        "signature": "com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings()",
        "snippet": "  public void testTypeMismatchThrowsJsonSyntaxExceptionForStrings() {\n    try {\n      gson.fromJson(\"true\", new TypeToken<Map<String, String>>() {}.getType());\n      fail();\n    } catch (JsonSyntaxException expected) {\n    }\n  }",
        "begin_line": 120,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 125,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ReadersWritersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java",
        "signature": "com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders()",
        "snippet": "  public void testTypeMismatchThrowsJsonSyntaxExceptionForReaders() {\n    try {\n      gson.fromJson(new StringReader(\"true\"), new TypeToken<Map<String, String>>() {}.getType());\n      fail();\n    } catch (JsonSyntaxException expected) {\n    }\n  }",
        "begin_line": 128,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 129,col 5)-(line 133,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize()",
        "snippet": "  public void testSerialize() throws IOException {\n    Truck truck = new Truck();\n    truck.passengers = Arrays.asList(new Person(\"Jesse\", 29), new Person(\"Jodie\", 29));\n    truck.horsePower = 300;\n\n    assertEquals(\"{'horsePower':300.0,\"\n        + \"'passengers':[{'age':29,'name':'Jesse'},{'age':29,'name':'Jodie'}]}\",\n        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n  }",
        "begin_line": 46,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 30)",
            "(line 48,col 5)-(line 48,col 87)",
            "(line 49,col 5)-(line 49,col 27)",
            "(line 51,col 5)-(line 53,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize()",
        "snippet": "  public void testDeserialize() throws IOException {\n    String json = \"{'horsePower':300.0,\"\n        + \"'passengers':[{'age':29,'name':'Jesse'},{'age':29,'name':'Jodie'}]}\";\n    Truck truck = fromJson(truckAdapter, json);\n    assertEquals(300.0, truck.horsePower);\n    assertEquals(Arrays.asList(new Person(\"Jesse\", 29), new Person(\"Jodie\", 29)), truck.passengers);\n  }",
        "begin_line": 56,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 58,col 80)",
            "(line 59,col 5)-(line 59,col 47)",
            "(line 60,col 5)-(line 60,col 42)",
            "(line 61,col 5)-(line 61,col 100)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField()",
        "snippet": "  public void testSerializeNullField() throws IOException {\n    Truck truck = new Truck();\n    truck.passengers = null;\n    assertEquals(\"{'horsePower':0.0,'passengers':null}\",\n        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n  }",
        "begin_line": 64,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 65,col 5)-(line 65,col 30)",
            "(line 66,col 5)-(line 66,col 28)",
            "(line 67,col 5)-(line 68,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField()",
        "snippet": "  public void testDeserializeNullField() throws IOException {\n    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':null}\");\n    assertNull(truck.passengers);\n  }",
        "begin_line": 71,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 81)",
            "(line 73,col 5)-(line 73,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject()",
        "snippet": "  public void testSerializeNullObject() throws IOException {\n    Truck truck = new Truck();\n    truck.passengers = Arrays.asList((Person) null);\n    assertEquals(\"{'horsePower':0.0,'passengers':[null]}\",\n        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n  }",
        "begin_line": 76,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 77,col 5)-(line 77,col 30)",
            "(line 78,col 5)-(line 78,col 52)",
            "(line 79,col 5)-(line 80,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject()",
        "snippet": "  public void testDeserializeNullObject() throws IOException {\n    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':[null]}\");\n    assertEquals(Arrays.asList((Person) null), truck.passengers);\n  }",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 84,col 5)-(line 84,col 83)",
            "(line 85,col 5)-(line 85,col 65)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter()",
        "snippet": "  public void testSerializeWithCustomTypeAdapter() throws IOException {\n    usePersonNameAdapter();\n    Truck truck = new Truck();\n    truck.passengers = Arrays.asList(new Person(\"Jesse\", 29), new Person(\"Jodie\", 29));\n    assertEquals(\"{'horsePower':0.0,'passengers':['Jesse','Jodie']}\",\n        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n  }",
        "begin_line": 88,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 27)",
            "(line 90,col 5)-(line 90,col 30)",
            "(line 91,col 5)-(line 91,col 87)",
            "(line 92,col 5)-(line 93,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter()",
        "snippet": "  public void testDeserializeWithCustomTypeAdapter() throws IOException {\n    usePersonNameAdapter();\n    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':['Jesse','Jodie']}\");\n    assertEquals(Arrays.asList(new Person(\"Jesse\", -1), new Person(\"Jodie\", -1)), truck.passengers);\n  }",
        "begin_line": 96,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 97,col 27)",
            "(line 98,col 5)-(line 98,col 94)",
            "(line 99,col 5)-(line 99,col 100)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.usePersonNameAdapter()",
        "snippet": "  private void usePersonNameAdapter() {\n    TypeAdapter<Person> personNameAdapter = new TypeAdapter<Person>() {\n      @Override public Person read(JsonReader in) throws IOException {\n        String name = in.nextString();\n        return new Person(name, -1);\n      }\n      @Override public void write(JsonWriter out, Person value) throws IOException {\n        out.value(value.name);\n      }\n    };\n    miniGson = new GsonBuilder().registerTypeAdapter(Person.class, personNameAdapter).create();\n    truckAdapter = miniGson.getAdapter(Truck.class);\n  }",
        "begin_line": 102,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 111,col 6)",
            "(line 112,col 5)-(line 112,col 95)",
            "(line 113,col 5)-(line 113,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.Anonymous-35c3ea72-3b6e-4c67-a8c4-23b88f9f8c37.read(com.google.gson.stream.JsonReader)",
        "snippet": "      @Override public Person read(JsonReader in) throws IOException {\n        String name = in.nextString();\n        return new Person(name, -1);\n      }",
        "begin_line": 104,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 38)",
            "(line 106,col 9)-(line 106,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.Anonymous-002fd423-2e6a-4c5b-a402-d19ede4d5532.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.StreamingTypeAdaptersTest.Person)",
        "snippet": "      @Override public void write(JsonWriter out, Person value) throws IOException {\n        out.value(value.name);\n      }",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap()",
        "snippet": "  public void testSerializeMap() throws IOException {\n    Map<String, Double> map = new LinkedHashMap<String, Double>();\n    map.put(\"a\", 5.0);\n    map.put(\"b\", 10.0);\n    assertEquals(\"{'a':5.0,'b':10.0}\", toJson(mapAdapter, map).replace('\"', '\\''));\n  }",
        "begin_line": 116,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 117,col 5)-(line 117,col 66)",
            "(line 118,col 5)-(line 118,col 22)",
            "(line 119,col 5)-(line 119,col 23)",
            "(line 120,col 5)-(line 120,col 83)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap()",
        "snippet": "  public void testDeserializeMap() throws IOException {\n    Map<String, Double> map = new LinkedHashMap<String, Double>();\n    map.put(\"a\", 5.0);\n    map.put(\"b\", 10.0);\n    assertEquals(map, fromJson(mapAdapter, \"{'a':5.0,'b':10.0}\"));\n  }",
        "begin_line": 123,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 124,col 5)-(line 124,col 66)",
            "(line 125,col 5)-(line 125,col 22)",
            "(line 126,col 5)-(line 126,col 23)",
            "(line 127,col 5)-(line 127,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray()",
        "snippet": "  public void testSerialize1dArray() throws IOException {\n    TypeAdapter<double[]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[]>() {});\n    assertEquals(\"[1.0,2.0,3.0]\", toJson(arrayAdapter, new double[]{1.0, 2.0, 3.0}));\n  }",
        "begin_line": 130,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 91)",
            "(line 132,col 5)-(line 132,col 85)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize1dArray()",
        "snippet": "  public void testDeserialize1dArray() throws IOException {\n    TypeAdapter<double[]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[]>() {});\n    double[] array = fromJson(arrayAdapter, \"[1.0,2.0,3.0]\");\n    assertTrue(Arrays.toString(array), Arrays.equals(new double[]{1.0, 2.0, 3.0}, array));\n  }",
        "begin_line": 135,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 136,col 5)-(line 136,col 91)",
            "(line 137,col 5)-(line 137,col 61)",
            "(line 138,col 5)-(line 138,col 90)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray()",
        "snippet": "  public void testSerialize2dArray() throws IOException {\n    TypeAdapter<double[][]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[][]>() {});\n    double[][] array = { {1.0, 2.0 }, { 3.0 } };\n    assertEquals(\"[[1.0,2.0],[3.0]]\", toJson(arrayAdapter, array));\n  }",
        "begin_line": 141,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 142,col 5)-(line 142,col 95)",
            "(line 143,col 5)-(line 143,col 48)",
            "(line 144,col 5)-(line 144,col 67)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize2dArray()",
        "snippet": "  public void testDeserialize2dArray() throws IOException {\n    TypeAdapter<double[][]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[][]>() {});\n    double[][] array = fromJson(arrayAdapter, \"[[1.0,2.0],[3.0]]\");\n    double[][] expected = { {1.0, 2.0 }, { 3.0 } };\n    assertTrue(Arrays.toString(array), Arrays.deepEquals(expected, array));\n  }",
        "begin_line": 147,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 148,col 5)-(line 148,col 95)",
            "(line 149,col 5)-(line 149,col 67)",
            "(line 150,col 5)-(line 150,col 51)",
            "(line 151,col 5)-(line 151,col 75)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe()",
        "snippet": "  public void testNullSafe() {\n    TypeAdapter<Person> typeAdapter = new TypeAdapter<Person>() {\n      @Override public Person read(JsonReader in) throws IOException {\n        String[] values = in.nextString().split(\",\");\n        return new Person(values[0], Integer.parseInt(values[1]));\n      }\n      public void write(JsonWriter out, Person person) throws IOException {\n        out.value(person.name + \",\" + person.age);\n      }\n    };\n    Gson gson = new GsonBuilder().registerTypeAdapter(\n        Person.class, typeAdapter).create();\n    Truck truck = new Truck();\n    truck.horsePower = 1.0D;\n    truck.passengers = new ArrayList<Person>();\n    truck.passengers.add(null);\n    truck.passengers.add(new Person(\"jesse\", 30));\n    try {\n      gson.toJson(truck, Truck.class);\n      fail();\n    } catch (NullPointerException expected) {}\n    String json = \"{horsePower:1.0,passengers:[null,'jesse,30']}\";\n    try {\n      gson.fromJson(json, Truck.class);\n      fail();\n    } catch (JsonSyntaxException expected) {}\n    gson = new GsonBuilder().registerTypeAdapter(Person.class, typeAdapter.nullSafe()).create();\n    assertEquals(\"{\\\"horsePower\\\":1.0,\\\"passengers\\\":[null,\\\"jesse,30\\\"]}\",\n        gson.toJson(truck, Truck.class));\n    truck = gson.fromJson(json, Truck.class);\n    assertEquals(1.0D, truck.horsePower);\n    assertNull(truck.passengers.get(0));\n    assertEquals(\"jesse\", truck.passengers.get(1).name);\n  }",
        "begin_line": 154,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 155,col 5)-(line 163,col 6)",
            "(line 164,col 5)-(line 165,col 44)",
            "(line 166,col 5)-(line 166,col 30)",
            "(line 167,col 5)-(line 167,col 28)",
            "(line 168,col 5)-(line 168,col 47)",
            "(line 169,col 5)-(line 169,col 31)",
            "(line 170,col 5)-(line 170,col 50)",
            "(line 171,col 5)-(line 174,col 46)",
            "(line 175,col 5)-(line 175,col 66)",
            "(line 176,col 5)-(line 179,col 45)",
            "(line 180,col 5)-(line 180,col 96)",
            "(line 181,col 5)-(line 182,col 41)",
            "(line 183,col 5)-(line 183,col 45)",
            "(line 184,col 5)-(line 184,col 41)",
            "(line 185,col 5)-(line 185,col 40)",
            "(line 186,col 5)-(line 186,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.Anonymous-9b298af6-702a-48f5-a516-0e12b97898a2.read(com.google.gson.stream.JsonReader)",
        "snippet": "      @Override public Person read(JsonReader in) throws IOException {\n        String[] values = in.nextString().split(\",\");\n        return new Person(values[0], Integer.parseInt(values[1]));\n      }",
        "begin_line": 156,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 53)",
            "(line 158,col 9)-(line 158,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.Anonymous-211668d7-c118-4fc4-a9d1-a4f85f381fa5.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.StreamingTypeAdaptersTest.Person)",
        "snippet": "      public void write(JsonWriter out, Person person) throws IOException {\n        out.value(person.name + \",\" + person.age);\n      }",
        "begin_line": 160,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive()",
        "snippet": "  public void testSerializeRecursive() throws IOException {\n    TypeAdapter<Node> nodeAdapter = miniGson.getAdapter(Node.class);\n    Node root = new Node(\"root\");\n    root.left = new Node(\"left\");\n    root.right = new Node(\"right\");\n    assertEquals(\"{'label':'root',\"\n        + \"'left':{'label':'left','left':null,'right':null},\"\n        + \"'right':{'label':'right','left':null,'right':null}}\",\n        toJson(nodeAdapter, root).replace('\"', '\\''));\n  }",
        "begin_line": 189,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 190,col 5)-(line 190,col 68)",
            "(line 191,col 5)-(line 191,col 33)",
            "(line 192,col 5)-(line 192,col 33)",
            "(line 193,col 5)-(line 193,col 35)",
            "(line 194,col 5)-(line 197,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree()",
        "snippet": "  public void testFromJsonTree() {\n    JsonObject truckObject = new JsonObject();\n    truckObject.add(\"horsePower\", new JsonPrimitive(300));\n    JsonArray passengersArray = new JsonArray();\n    JsonObject jesseObject = new JsonObject();\n    jesseObject.add(\"age\", new JsonPrimitive(30));\n    jesseObject.add(\"name\", new JsonPrimitive(\"Jesse\"));\n    passengersArray.add(jesseObject);\n    truckObject.add(\"passengers\", passengersArray);\n\n    Truck truck = truckAdapter.fromJsonTree(truckObject);\n    assertEquals(300.0, truck.horsePower);\n    assertEquals(Arrays.asList(new Person(\"Jesse\", 30)), truck.passengers);\n  }",
        "begin_line": 200,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 201,col 5)-(line 201,col 46)",
            "(line 202,col 5)-(line 202,col 58)",
            "(line 203,col 5)-(line 203,col 48)",
            "(line 204,col 5)-(line 204,col 46)",
            "(line 205,col 5)-(line 205,col 50)",
            "(line 206,col 5)-(line 206,col 56)",
            "(line 207,col 5)-(line 207,col 37)",
            "(line 208,col 5)-(line 208,col 51)",
            "(line 210,col 5)-(line 210,col 57)",
            "(line 211,col 5)-(line 211,col 42)",
            "(line 212,col 5)-(line 212,col 75)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.Person.Person(java.lang.String, int)",
        "snippet": "    Person(String name, int age) {\n      this.name = name;\n      this.age = age;\n    }",
        "begin_line": 223,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 224,col 7)-(line 224,col 23)",
            "(line 225,col 7)-(line 225,col 21)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.Person.equals(java.lang.Object)",
        "snippet": "    @Override public boolean equals(Object o) {\n      return o instanceof Person\n          && ((Person) o).name.equals(name)\n          && ((Person) o).age == age;\n    }",
        "begin_line": 228,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 229,col 7)-(line 231,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.Person.hashCode()",
        "snippet": "    @Override public int hashCode() {\n      return name.hashCode() ^ age;\n    }",
        "begin_line": 233,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 234,col 7)-(line 234,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.Node.Node(java.lang.String)",
        "snippet": "    Node(String label) {\n      this.label = label;\n    }",
        "begin_line": 242,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 243,col 7)-(line 243,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.toJson(com.google.gson.TypeAdapter<T>, T)",
        "snippet": "  private static <T> String toJson(TypeAdapter<T> typeAdapter, T value) throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter writer = new JsonWriter(stringWriter);\n    typeAdapter.write(writer, value);\n    return stringWriter.toString();\n  }",
        "begin_line": 248,
        "end_line": 253,
        "comment": " TODO: remove this when TypeAdapter.toJson() is public",
        "child_ranges": [
            "(line 249,col 5)-(line 249,col 51)",
            "(line 250,col 5)-(line 250,col 53)",
            "(line 251,col 5)-(line 251,col 37)",
            "(line 252,col 5)-(line 252,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StreamingTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.StreamingTypeAdaptersTest.fromJson(com.google.gson.TypeAdapter<T>, java.lang.String)",
        "snippet": "  private <T> T fromJson(TypeAdapter<T> typeAdapter, String json) throws IOException {\n    JsonReader reader = new JsonReader(new StringReader(json));\n    reader.setLenient(true); // TODO: non-lenient?\n    return typeAdapter.read(reader);\n  }",
        "begin_line": 256,
        "end_line": 260,
        "comment": " TODO: remove this when TypeAdapter.fromJson() is public",
        "child_ranges": [
            "(line 257,col 5)-(line 257,col 63)",
            "(line 258,col 5)-(line 258,col 28)",
            "(line 259,col 5)-(line 259,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 40,col 5)-(line 40,col 18)",
            "(line 41,col 5)-(line 41,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields()",
        "snippet": "  public void testSubclassFields() {\n    ClassWithBaseFields target = new ClassWithBaseFields(new Sub(1, 2));\n    String json = gson.toJson(target);\n    assertTrue(json.contains(\"\\\"b\\\":1\"));\n    assertTrue(json.contains(\"\\\"s\\\":2\"));\n  }",
        "begin_line": 44,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 45,col 5)-(line 45,col 72)",
            "(line 46,col 5)-(line 46,col 38)",
            "(line 47,col 5)-(line 47,col 41)",
            "(line 48,col 5)-(line 48,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields()",
        "snippet": "  public void testListOfSubclassFields() {\n    Collection<Base> list = new ArrayList<Base>();\n    list.add(new Base(1));\n    list.add(new Sub(2, 3));\n    ClassWithContainersOfBaseFields target = new ClassWithContainersOfBaseFields(list, null);\n    String json = gson.toJson(target);\n    assertTrue(json, json.contains(\"{\\\"b\\\":1}\"));\n    assertTrue(json, json.contains(\"{\\\"s\\\":3,\\\"b\\\":2}\"));\n  }",
        "begin_line": 51,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 50)",
            "(line 53,col 5)-(line 53,col 26)",
            "(line 54,col 5)-(line 54,col 28)",
            "(line 55,col 5)-(line 55,col 93)",
            "(line 56,col 5)-(line 56,col 38)",
            "(line 57,col 5)-(line 57,col 49)",
            "(line 58,col 5)-(line 58,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields()",
        "snippet": "  public void testMapOfSubclassFields() {\n    Map<String, Base> map = new HashMap<String, Base>();\n    map.put(\"base\", new Base(1));\n    map.put(\"sub\", new Sub(2, 3));\n    ClassWithContainersOfBaseFields target = new ClassWithContainersOfBaseFields(null, map);\n    JsonObject json = gson.toJsonTree(target).getAsJsonObject().get(\"map\").getAsJsonObject();\n    assertEquals(1, json.get(\"base\").getAsJsonObject().get(\"b\").getAsInt());\n    JsonObject sub = json.get(\"sub\").getAsJsonObject();\n    assertEquals(2, sub.get(\"b\").getAsInt());\n    assertEquals(3, sub.get(\"s\").getAsInt());\n  }",
        "begin_line": 61,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 56)",
            "(line 63,col 5)-(line 63,col 33)",
            "(line 64,col 5)-(line 64,col 34)",
            "(line 65,col 5)-(line 65,col 92)",
            "(line 66,col 5)-(line 66,col 93)",
            "(line 67,col 5)-(line 67,col 76)",
            "(line 68,col 5)-(line 68,col 55)",
            "(line 69,col 5)-(line 69,col 45)",
            "(line 70,col 5)-(line 70,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields()",
        "snippet": "  public void testParameterizedSubclassFields() {\n    ClassWithParameterizedBaseFields target = new ClassWithParameterizedBaseFields(\n        new ParameterizedSub<String>(\"one\", \"two\"));\n    String json = gson.toJson(target);\n    assertTrue(json.contains(\"\\\"t\\\":\\\"one\\\"\"));\n    assertFalse(json.contains(\"\\\"s\\\"\"));\n  }",
        "begin_line": 76,
        "end_line": 82,
        "comment": "\n   * For parameterized type, Gson ignores the more-specific type and sticks to the declared type\n   ",
        "child_ranges": [
            "(line 77,col 5)-(line 78,col 52)",
            "(line 79,col 5)-(line 79,col 38)",
            "(line 80,col 5)-(line 80,col 47)",
            "(line 81,col 5)-(line 81,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields()",
        "snippet": "  public void testListOfParameterizedSubclassFields() {\n    Collection<ParameterizedBase<String>> list = new ArrayList<ParameterizedBase<String>>();\n    list.add(new ParameterizedBase<String>(\"one\"));\n    list.add(new ParameterizedSub<String>(\"two\", \"three\"));\n    ClassWithContainersOfParameterizedBaseFields target =\n      new ClassWithContainersOfParameterizedBaseFields(list, null);\n    String json = gson.toJson(target);\n    assertTrue(json, json.contains(\"{\\\"t\\\":\\\"one\\\"}\"));\n    assertFalse(json, json.contains(\"\\\"s\\\":\"));\n  }",
        "begin_line": 88,
        "end_line": 97,
        "comment": "\n   * For parameterized type in a List, Gson ignores the more-specific type and sticks to\n   * the declared type\n   ",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 92)",
            "(line 90,col 5)-(line 90,col 51)",
            "(line 91,col 5)-(line 91,col 59)",
            "(line 92,col 5)-(line 93,col 67)",
            "(line 94,col 5)-(line 94,col 38)",
            "(line 95,col 5)-(line 95,col 55)",
            "(line 96,col 5)-(line 96,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields()",
        "snippet": "  public void testMapOfParameterizedSubclassFields() {\n    Map<String, ParameterizedBase<String>> map = new HashMap<String, ParameterizedBase<String>>();\n    map.put(\"base\", new ParameterizedBase<String>(\"one\"));\n    map.put(\"sub\", new ParameterizedSub<String>(\"two\", \"three\"));\n    ClassWithContainersOfParameterizedBaseFields target =\n      new ClassWithContainersOfParameterizedBaseFields(null, map);\n    JsonObject json = gson.toJsonTree(target).getAsJsonObject().get(\"map\").getAsJsonObject();\n    assertEquals(\"one\", json.get(\"base\").getAsJsonObject().get(\"t\").getAsString());\n    JsonObject sub = json.get(\"sub\").getAsJsonObject();\n    assertEquals(\"two\", sub.get(\"t\").getAsString());\n    assertNull(sub.get(\"s\"));\n  }",
        "begin_line": 103,
        "end_line": 114,
        "comment": "\n   * For parameterized type in a map, Gson ignores the more-specific type and sticks to the\n   * declared type\n   ",
        "child_ranges": [
            "(line 104,col 5)-(line 104,col 98)",
            "(line 105,col 5)-(line 105,col 58)",
            "(line 106,col 5)-(line 106,col 65)",
            "(line 107,col 5)-(line 108,col 66)",
            "(line 109,col 5)-(line 109,col 93)",
            "(line 110,col 5)-(line 110,col 83)",
            "(line 111,col 5)-(line 111,col 55)",
            "(line 112,col 5)-(line 112,col 52)",
            "(line 113,col 5)-(line 113,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Base(int)",
        "snippet": "    Base(int b) {\n      this.b = b;\n    }",
        "begin_line": 118,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 7)-(line 119,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.Sub.Sub(int, int)",
        "snippet": "    Sub(int b, int s) {\n      super(b);\n      this.s = s;\n    }",
        "begin_line": 125,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 126,col 7)-(line 126,col 15)",
            "(line 127,col 7)-(line 127,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.ClassWithBaseFields.ClassWithBaseFields(com.google.gson.functional.MoreSpecificTypeSerializationTest.Base)",
        "snippet": "    ClassWithBaseFields(Base b) {\n      this.b = b;\n    }",
        "begin_line": 133,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 134,col 7)-(line 134,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.ClassWithContainersOfBaseFields.ClassWithContainersOfBaseFields(java.util.Collection<com.google.gson.functional.MoreSpecificTypeSerializationTest.Base>, java.util.Map<java.lang.String, com.google.gson.functional.MoreSpecificTypeSerializationTest.Base>)",
        "snippet": "    ClassWithContainersOfBaseFields(Collection<Base> collection, Map<String, Base> map) {\n      this.collection = collection;\n      this.map = map;\n    }",
        "begin_line": 141,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 142,col 7)-(line 142,col 35)",
            "(line 143,col 7)-(line 143,col 21)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.ParameterizedBase.ParameterizedBase(T)",
        "snippet": "    ParameterizedBase(T t) {\n      this.t = t;\n    }",
        "begin_line": 149,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 150,col 7)-(line 150,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.ParameterizedSub.ParameterizedSub(T, T)",
        "snippet": "    ParameterizedSub(T t, T s) {\n      super(t);\n      this.s = s;\n    }",
        "begin_line": 156,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 157,col 7)-(line 157,col 15)",
            "(line 158,col 7)-(line 158,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.ClassWithParameterizedBaseFields.ClassWithParameterizedBaseFields(com.google.gson.functional.MoreSpecificTypeSerializationTest.ParameterizedBase<java.lang.String>)",
        "snippet": "    ClassWithParameterizedBaseFields(ParameterizedBase<String> b) {\n      this.b = b;\n    }",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 165,col 7)-(line 165,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.MoreSpecificTypeSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
        "signature": "com.google.gson.functional.MoreSpecificTypeSerializationTest.ClassWithContainersOfParameterizedBaseFields.ClassWithContainersOfParameterizedBaseFields(java.util.Collection<com.google.gson.functional.MoreSpecificTypeSerializationTest.ParameterizedBase<java.lang.String>>, java.util.Map<java.lang.String, com.google.gson.functional.MoreSpecificTypeSerializationTest.ParameterizedBase<java.lang.String>>)",
        "snippet": "    ClassWithContainersOfParameterizedBaseFields(Collection<ParameterizedBase<String>> collection,\n        Map<String, ParameterizedBase<String>> map) {\n      this.collection = collection;\n      this.map = map;\n    }",
        "begin_line": 172,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 174,col 7)-(line 174,col 35)",
            "(line 175,col 7)-(line 175,col 21)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.LeniencyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/LeniencyTest.java",
        "signature": "com.google.gson.functional.LeniencyTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new GsonBuilder().setLenient().create();\n  }",
        "begin_line": 33,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 35,col 5)-(line 35,col 18)",
            "(line 36,col 5)-(line 36,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.LeniencyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/LeniencyTest.java",
        "signature": "com.google.gson.functional.LeniencyTest.testLenientFromJson()",
        "snippet": "  public void testLenientFromJson() {\n    List<String> json = gson.fromJson(\"\"\n        + \"[ # One!\\n\"\n        + \"  'Hi' #Element!\\n\"\n        + \"] # Array!\", new TypeToken<List<String>>() {}.getType());\n    assertEquals(singletonList(\"Hi\"), json);\n  }",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 40,col 5)-(line 43,col 68)",
            "(line 44,col 5)-(line 44,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 16,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 18,col 5)-(line 18,col 18)",
            "(line 19,col 5)-(line 19,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testStringValueSerialization()",
        "snippet": "  public void testStringValueSerialization() throws Exception {\n    String value = \"someRandomStringValue\";\n    assertEquals('\"' + value + '\"', gson.toJson(value));\n  }",
        "begin_line": 22,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 23,col 5)-(line 23,col 43)",
            "(line 24,col 5)-(line 24,col 56)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testStringValueDeserialization()",
        "snippet": "  public void testStringValueDeserialization() throws Exception {\n    String value = \"someRandomStringValue\";\n    String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\n    assertEquals(value, actual);\n  }",
        "begin_line": 27,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 28,col 5)-(line 28,col 43)",
            "(line 29,col 5)-(line 29,col 69)",
            "(line 30,col 5)-(line 30,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization()",
        "snippet": "  public void testSingleQuoteInStringSerialization() throws Exception {\n    String valueWithQuotes = \"beforeQuote'afterQuote\";\n    String jsonRepresentation = gson.toJson(valueWithQuotes);\n    assertEquals(valueWithQuotes, gson.fromJson(jsonRepresentation, String.class));\n  }",
        "begin_line": 33,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 34,col 5)-(line 34,col 54)",
            "(line 35,col 5)-(line 35,col 61)",
            "(line 36,col 5)-(line 36,col 83)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization()",
        "snippet": "  public void testEscapedCtrlNInStringSerialization() throws Exception {\n    String value = \"a\\nb\";\n    String json = gson.toJson(value);\n    assertEquals(\"\\\"a\\\\nb\\\"\", json);\n  }",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 40,col 5)-(line 40,col 26)",
            "(line 41,col 5)-(line 41,col 37)",
            "(line 42,col 5)-(line 42,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization()",
        "snippet": "  public void testEscapedCtrlNInStringDeserialization() throws Exception {\n    String json = \"'a\\\\nb'\";\n    String actual = gson.fromJson(json, String.class);\n    assertEquals(\"a\\nb\", actual);\n  }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 46,col 5)-(line 46,col 28)",
            "(line 47,col 5)-(line 47,col 54)",
            "(line 48,col 5)-(line 48,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization()",
        "snippet": "  public void testEscapedCtrlRInStringSerialization() throws Exception {\n    String value = \"a\\rb\";\n    String json = gson.toJson(value);\n    assertEquals(\"\\\"a\\\\rb\\\"\", json);\n  }",
        "begin_line": 51,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 26)",
            "(line 53,col 5)-(line 53,col 37)",
            "(line 54,col 5)-(line 54,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization()",
        "snippet": "  public void testEscapedCtrlRInStringDeserialization() throws Exception {\n    String json = \"'a\\\\rb'\";\n    String actual = gson.fromJson(json, String.class);\n    assertEquals(\"a\\rb\", actual);\n  }",
        "begin_line": 57,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 58,col 28)",
            "(line 59,col 5)-(line 59,col 54)",
            "(line 60,col 5)-(line 60,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization()",
        "snippet": "  public void testEscapedBackslashInStringSerialization() throws Exception {\n    String value = \"a\\\\b\";\n    String json = gson.toJson(value);\n    assertEquals(\"\\\"a\\\\\\\\b\\\"\", json);\n  }",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 64,col 26)",
            "(line 65,col 5)-(line 65,col 37)",
            "(line 66,col 5)-(line 66,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization()",
        "snippet": "  public void testEscapedBackslashInStringDeserialization() throws Exception {\n    String actual = gson.fromJson(\"'a\\\\\\\\b'\", String.class);\n    assertEquals(\"a\\\\b\", actual);\n  }",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 70,col 5)-(line 70,col 60)",
            "(line 71,col 5)-(line 71,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization()",
        "snippet": "  public void testSingleQuoteInStringDeserialization() throws Exception {\n    String value = \"beforeQuote'afterQuote\";\n    String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\n    assertEquals(value, actual);\n  }",
        "begin_line": 74,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 75,col 5)-(line 75,col 44)",
            "(line 76,col 5)-(line 76,col 69)",
            "(line 77,col 5)-(line 77,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization()",
        "snippet": "  public void testEscapingQuotesInStringSerialization() throws Exception {\n    String valueWithQuotes = \"beforeQuote\\\"afterQuote\";\n    String jsonRepresentation = gson.toJson(valueWithQuotes);\n    String target = gson.fromJson(jsonRepresentation, String.class);\n    assertEquals(valueWithQuotes, target);\n  }",
        "begin_line": 80,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 81,col 5)-(line 81,col 55)",
            "(line 82,col 5)-(line 82,col 61)",
            "(line 83,col 5)-(line 83,col 68)",
            "(line 84,col 5)-(line 84,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization()",
        "snippet": "  public void testEscapingQuotesInStringDeserialization() throws Exception {\n    String value = \"beforeQuote\\\\\\\"afterQuote\";\n    String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\n    String expected = \"beforeQuote\\\"afterQuote\";\n    assertEquals(expected, actual);\n  }",
        "begin_line": 87,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 88,col 47)",
            "(line 89,col 5)-(line 89,col 69)",
            "(line 90,col 5)-(line 90,col 48)",
            "(line 91,col 5)-(line 91,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization()",
        "snippet": "  public void testStringValueAsSingleElementArraySerialization() throws Exception {\n    String[] target = {\"abc\"};\n    assertEquals(\"[\\\"abc\\\"]\", gson.toJson(target));\n    assertEquals(\"[\\\"abc\\\"]\", gson.toJson(target, String[].class));\n  }",
        "begin_line": 94,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 95,col 5)-(line 95,col 30)",
            "(line 96,col 5)-(line 96,col 51)",
            "(line 97,col 5)-(line 97,col 67)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization()",
        "snippet": "  public void testStringWithEscapedSlashDeserialization() {\n    String value = \"/\";\n    String json = \"'\\\\/'\";\n    String actual = gson.fromJson(json, String.class);\n    assertEquals(value, actual);\n  }",
        "begin_line": 100,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 101,col 23)",
            "(line 102,col 5)-(line 102,col 26)",
            "(line 103,col 5)-(line 103,col 54)",
            "(line 104,col 5)-(line 104,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testAssignmentCharSerialization()",
        "snippet": "  public void testAssignmentCharSerialization() {\n    String value = \"abc=\";\n    String json = gson.toJson(value);\n    assertEquals(\"\\\"abc\\\\u003d\\\"\", json);\n  }",
        "begin_line": 110,
        "end_line": 114,
        "comment": "\n   * Created in response to http://groups.google.com/group/google-gson/browse_thread/thread/2431d4a3d0d6cb23\n   ",
        "child_ranges": [
            "(line 111,col 5)-(line 111,col 26)",
            "(line 112,col 5)-(line 112,col 37)",
            "(line 113,col 5)-(line 113,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testAssignmentCharDeserialization()",
        "snippet": "  public void testAssignmentCharDeserialization() {\n    String json = \"\\\"abc=\\\"\";\n    String value = gson.fromJson(json, String.class);\n    assertEquals(\"abc=\", value);\n\n    json = \"'abc\\u003d'\";\n    value = gson.fromJson(json, String.class);\n    assertEquals(\"abc=\", value);\n  }",
        "begin_line": 119,
        "end_line": 127,
        "comment": "\n   * Created in response to http://groups.google.com/group/google-gson/browse_thread/thread/2431d4a3d0d6cb23\n   ",
        "child_ranges": [
            "(line 120,col 5)-(line 120,col 29)",
            "(line 121,col 5)-(line 121,col 53)",
            "(line 122,col 5)-(line 122,col 32)",
            "(line 124,col 5)-(line 124,col 25)",
            "(line 125,col 5)-(line 125,col 46)",
            "(line 126,col 5)-(line 126,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization()",
        "snippet": "  public void testJavascriptKeywordsInStringSerialization() {\n    String value = \"null true false function\";\n    String json = gson.toJson(value);\n    assertEquals(\"\\\"\" + value + \"\\\"\", json);\n  }",
        "begin_line": 129,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 130,col 5)-(line 130,col 46)",
            "(line 131,col 5)-(line 131,col 37)",
            "(line 132,col 5)-(line 132,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.StringTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/StringTest.java",
        "signature": "com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization()",
        "snippet": "  public void testJavascriptKeywordsInStringDeserialization() {\n    String json = \"'null true false function'\";\n    String value = gson.fromJson(json, String.class);\n    assertEquals(json.substring(1, json.length() - 1), value);\n  }",
        "begin_line": 135,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 136,col 5)-(line 136,col 47)",
            "(line 137,col 5)-(line 137,col 53)",
            "(line 138,col 5)-(line 138,col 62)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 44,col 18)",
            "(line 45,col 5)-(line 45,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization()",
        "snippet": "  public void testTopLevelArrayOfIntsSerialization() {\n    int[] target = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    assertEquals(\"[1,2,3,4,5,6,7,8,9]\", gson.toJson(target));\n  }",
        "begin_line": 48,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 47)",
            "(line 50,col 5)-(line 50,col 61)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization()",
        "snippet": "  public void testTopLevelArrayOfIntsDeserialization() {\n    int[] expected = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n    int[] actual = gson.fromJson(\"[1,2,3,4,5,6,7,8,9]\", int[].class);\n    MoreAsserts.assertEquals(expected, actual);\n  }",
        "begin_line": 53,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 51)",
            "(line 55,col 5)-(line 55,col 69)",
            "(line 56,col 5)-(line 56,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization()",
        "snippet": "  public void testInvalidArrayDeserialization() {\n    String json = \"[1, 2 3, 4, 5]\";\n    try {\n      gson.fromJson(json, int[].class);\n      fail(\"Gson should not deserialize array elements with missing ,\");\n    } catch (JsonParseException expected) {\n    }\n  }",
        "begin_line": 59,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 60,col 35)",
            "(line 61,col 5)-(line 65,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testEmptyArraySerialization()",
        "snippet": "  public void testEmptyArraySerialization() {\n    int[] target = {};\n    assertEquals(\"[]\", gson.toJson(target));\n  }",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 69,col 22)",
            "(line 70,col 5)-(line 70,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization()",
        "snippet": "  public void testEmptyArrayDeserialization() {\n    int[] actualObject = gson.fromJson(\"[]\", int[].class);\n    assertTrue(actualObject.length == 0);\n\n    Integer[] actualObject2 = gson.fromJson(\"[]\", Integer[].class);\n    assertTrue(actualObject2.length == 0);\n\n    actualObject = gson.fromJson(\"[ ]\", int[].class);\n    assertTrue(actualObject.length == 0);\n  }",
        "begin_line": 73,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 74,col 5)-(line 74,col 58)",
            "(line 75,col 5)-(line 75,col 41)",
            "(line 77,col 5)-(line 77,col 67)",
            "(line 78,col 5)-(line 78,col 42)",
            "(line 80,col 5)-(line 80,col 53)",
            "(line 81,col 5)-(line 81,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testNullsInArraySerialization()",
        "snippet": "  public void testNullsInArraySerialization() {\n    String[] array = {\"foo\", null, \"bar\"};\n    String expected = \"[\\\"foo\\\",null,\\\"bar\\\"]\";\n    String json = gson.toJson(array);\n    assertEquals(expected, json);\n  }",
        "begin_line": 84,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 85,col 42)",
            "(line 86,col 5)-(line 86,col 47)",
            "(line 87,col 5)-(line 87,col 37)",
            "(line 88,col 5)-(line 88,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization()",
        "snippet": "  public void testNullsInArrayDeserialization() {\n    String json = \"[\\\"foo\\\",null,\\\"bar\\\"]\";\n    String[] expected = {\"foo\", null, \"bar\"};\n    String[] target = gson.fromJson(json, expected.getClass());\n    for (int i = 0; i < expected.length; ++i) {\n      assertEquals(expected[i], target[i]);\n    }\n  }",
        "begin_line": 91,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 92,col 43)",
            "(line 93,col 5)-(line 93,col 45)",
            "(line 94,col 5)-(line 94,col 63)",
            "(line 95,col 5)-(line 97,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization()",
        "snippet": "  public void testSingleNullInArraySerialization() {\n    BagOfPrimitives[] array = new BagOfPrimitives[1];\n    array[0] = null;\n    String json = gson.toJson(array);\n    assertEquals(\"[null]\", json);\n  }",
        "begin_line": 100,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 101,col 53)",
            "(line 102,col 5)-(line 102,col 20)",
            "(line 103,col 5)-(line 103,col 37)",
            "(line 104,col 5)-(line 104,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization()",
        "snippet": "  public void testSingleNullInArrayDeserialization() {\n    BagOfPrimitives[] array = gson.fromJson(\"[null]\", BagOfPrimitives[].class);\n    assertNull(array[0]);\n  }",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 108,col 5)-(line 108,col 79)",
            "(line 109,col 5)-(line 109,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization()",
        "snippet": "  public void testNullsInArrayWithSerializeNullPropertySetSerialization() {\n    gson = new GsonBuilder().serializeNulls().create();\n    String[] array = {\"foo\", null, \"bar\"};\n    String expected = \"[\\\"foo\\\",null,\\\"bar\\\"]\";\n    String json = gson.toJson(array);\n    assertEquals(expected, json);\n  }",
        "begin_line": 112,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 113,col 5)-(line 113,col 55)",
            "(line 114,col 5)-(line 114,col 42)",
            "(line 115,col 5)-(line 115,col 47)",
            "(line 116,col 5)-(line 116,col 37)",
            "(line 117,col 5)-(line 117,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization()",
        "snippet": "  public void testArrayOfStringsSerialization() {\n    String[] target = {\"Hello\", \"World\"};\n    assertEquals(\"[\\\"Hello\\\",\\\"World\\\"]\", gson.toJson(target));\n  }",
        "begin_line": 120,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 41)",
            "(line 122,col 5)-(line 122,col 63)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization()",
        "snippet": "  public void testArrayOfStringsDeserialization() {\n    String json = \"[\\\"Hello\\\",\\\"World\\\"]\";\n    String[] target = gson.fromJson(json, String[].class);\n    assertEquals(\"Hello\", target[0]);\n    assertEquals(\"World\", target[1]);\n  }",
        "begin_line": 125,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 126,col 5)-(line 126,col 42)",
            "(line 127,col 5)-(line 127,col 58)",
            "(line 128,col 5)-(line 128,col 37)",
            "(line 129,col 5)-(line 129,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testSingleStringArraySerialization()",
        "snippet": "  public void testSingleStringArraySerialization() throws Exception {\n    String[] s = { \"hello\" };\n    String output = gson.toJson(s);\n    assertEquals(\"[\\\"hello\\\"]\", output);\n  }",
        "begin_line": 132,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 133,col 5)-(line 133,col 29)",
            "(line 134,col 5)-(line 134,col 35)",
            "(line 135,col 5)-(line 135,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization()",
        "snippet": "  public void testSingleStringArrayDeserialization() throws Exception {\n    String json = \"[\\\"hello\\\"]\";\n    String[] arrayType = gson.fromJson(json, String[].class);\n    assertEquals(1, arrayType.length);\n    assertEquals(\"hello\", arrayType[0]);\n  }",
        "begin_line": 138,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 139,col 5)-(line 139,col 32)",
            "(line 140,col 5)-(line 140,col 61)",
            "(line 141,col 5)-(line 141,col 38)",
            "(line 142,col 5)-(line 142,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testArrayOfCollectionSerialization() throws Exception {\n    StringBuilder sb = new StringBuilder(\"[\");\n    int arraySize = 3;\n\n    Type typeToSerialize = new TypeToken<Collection<Integer>[]>() {}.getType();\n    Collection<Integer>[] arrayOfCollection = new ArrayList[arraySize];\n    for (int i = 0; i < arraySize; ++i) {\n      int startValue = (3 * i) + 1;\n      sb.append('[').append(startValue).append(',').append(startValue + 1).append(']');\n      ArrayList<Integer> tmpList = new ArrayList<Integer>();\n      tmpList.add(startValue);\n      tmpList.add(startValue + 1);\n      arrayOfCollection[i] = tmpList;\n\n      if (i < arraySize - 1) {\n        sb.append(',');\n      }\n    }\n    sb.append(']');\n\n    String json = gson.toJson(arrayOfCollection, typeToSerialize);\n    assertEquals(sb.toString(), json);\n  }",
        "begin_line": 145,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 147,col 5)-(line 147,col 46)",
            "(line 148,col 5)-(line 148,col 22)",
            "(line 150,col 5)-(line 150,col 79)",
            "(line 151,col 5)-(line 151,col 71)",
            "(line 152,col 5)-(line 163,col 5)",
            "(line 164,col 5)-(line 164,col 19)",
            "(line 166,col 5)-(line 166,col 66)",
            "(line 167,col 5)-(line 167,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization()",
        "snippet": "  public void testArrayOfCollectionDeserialization() throws Exception {\n    String json = \"[[1,2],[3,4]]\";\n    Type type = new TypeToken<Collection<Integer>[]>() {}.getType();\n    Collection<Integer>[] target = gson.fromJson(json, type);\n\n    assertEquals(2, target.length);\n    MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0]));\n    MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0]));\n  }",
        "begin_line": 170,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 171,col 5)-(line 171,col 34)",
            "(line 172,col 5)-(line 172,col 68)",
            "(line 173,col 5)-(line 173,col 61)",
            "(line 175,col 5)-(line 175,col 35)",
            "(line 176,col 5)-(line 176,col 88)",
            "(line 177,col 5)-(line 177,col 88)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization()",
        "snippet": "  public void testArrayOfPrimitivesAsObjectsSerialization() throws Exception {\n    Object[] objs = new Object[] {1, \"abc\", 0.3f, 5L};\n    String json = gson.toJson(objs);\n    assertTrue(json.contains(\"abc\"));\n    assertTrue(json.contains(\"0.3\"));\n    assertTrue(json.contains(\"5\"));\n  }",
        "begin_line": 180,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 181,col 5)-(line 181,col 54)",
            "(line 182,col 5)-(line 182,col 36)",
            "(line 183,col 5)-(line 183,col 37)",
            "(line 184,col 5)-(line 184,col 37)",
            "(line 185,col 5)-(line 185,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization()",
        "snippet": "  public void testArrayOfPrimitivesAsObjectsDeserialization() throws Exception {\n    String json = \"[1,'abc',0.3,1.1,5]\";\n    Object[] objs = gson.fromJson(json, Object[].class);\n    assertEquals(1, ((Number)objs[0]).intValue());\n    assertEquals(\"abc\", objs[1]);\n    assertEquals(0.3, ((Number)objs[2]).doubleValue());\n    assertEquals(new BigDecimal(\"1.1\"), new BigDecimal(objs[3].toString()));\n    assertEquals(5, ((Number)objs[4]).shortValue());\n  }",
        "begin_line": 188,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 40)",
            "(line 190,col 5)-(line 190,col 56)",
            "(line 191,col 5)-(line 191,col 50)",
            "(line 192,col 5)-(line 192,col 33)",
            "(line 193,col 5)-(line 193,col 55)",
            "(line 194,col 5)-(line 194,col 76)",
            "(line 195,col 5)-(line 195,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization()",
        "snippet": "  public void testObjectArrayWithNonPrimitivesSerialization() throws Exception {\n    ClassWithObjects classWithObjects = new ClassWithObjects();\n    BagOfPrimitives bagOfPrimitives = new BagOfPrimitives();\n    String classWithObjectsJson = gson.toJson(classWithObjects);\n    String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives);\n\n    Object[] objects = new Object[] { classWithObjects, bagOfPrimitives };\n    String json = gson.toJson(objects);\n\n    assertTrue(json.contains(classWithObjectsJson));\n    assertTrue(json.contains(bagOfPrimitivesJson));\n  }",
        "begin_line": 198,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 199,col 5)-(line 199,col 63)",
            "(line 200,col 5)-(line 200,col 60)",
            "(line 201,col 5)-(line 201,col 64)",
            "(line 202,col 5)-(line 202,col 62)",
            "(line 204,col 5)-(line 204,col 74)",
            "(line 205,col 5)-(line 205,col 39)",
            "(line 207,col 5)-(line 207,col 52)",
            "(line 208,col 5)-(line 208,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testArrayOfNullSerialization()",
        "snippet": "  public void testArrayOfNullSerialization() {\n    Object[] array = new Object[] {null};\n    String json = gson.toJson(array);\n    assertEquals(\"[null]\", json);\n  }",
        "begin_line": 211,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 212,col 5)-(line 212,col 41)",
            "(line 213,col 5)-(line 213,col 37)",
            "(line 214,col 5)-(line 214,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization()",
        "snippet": "  public void testArrayOfNullDeserialization() {\n    String[] values = gson.fromJson(\"[null]\", String[].class);\n    assertNull(values[0]);\n  }",
        "begin_line": 217,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 218,col 5)-(line 218,col 62)",
            "(line 219,col 5)-(line 219,col 26)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization()",
        "snippet": "  public void testMultidimenstionalArraysSerialization() {\n    String[][] items = new String[][]{\n        {\"3m Co\", \"71.72\", \"0.02\", \"0.03\", \"4/2 12:00am\", \"Manufacturing\"},\n        {\"Alcoa Inc\", \"29.01\", \"0.42\", \"1.47\", \"4/1 12:00am\", \"Manufacturing\"}\n    };\n    String json = gson.toJson(items);\n    assertTrue(json.contains(\"[[\\\"3m Co\"));\n    assertTrue(json.contains(\"Manufacturing\\\"]]\"));\n  }",
        "begin_line": 225,
        "end_line": 233,
        "comment": "\n   * Regression tests for Issue 272\n   ",
        "child_ranges": [
            "(line 226,col 5)-(line 229,col 6)",
            "(line 230,col 5)-(line 230,col 37)",
            "(line 231,col 5)-(line 231,col 43)",
            "(line 232,col 5)-(line 232,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization()",
        "snippet": "  public void testMultiDimenstionalObjectArraysSerialization() {\n    Object[][] array = new Object[][] { new Object[] { 1, 2 } };\n    assertEquals(\"[[1,2]]\", gson.toJson(array));\n  }",
        "begin_line": 235,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 236,col 5)-(line 236,col 64)",
            "(line 237,col 5)-(line 237,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization()",
        "snippet": "  public void testMixingTypesInObjectArraySerialization() {\n    Object[] array = new Object[] { 1, 2, new Object[] { \"one\", \"two\", 3 } };\n    assertEquals(\"[1,2,[\\\"one\\\",\\\"two\\\",3]]\", gson.toJson(array));\n  }",
        "begin_line": 243,
        "end_line": 246,
        "comment": "\n   * Regression test for Issue 205\n   ",
        "child_ranges": [
            "(line 244,col 5)-(line 244,col 77)",
            "(line 245,col 5)-(line 245,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization()",
        "snippet": "  public void testMultidimenstionalArraysDeserialization() {\n    String json = \"[['3m Co','71.72','0.02','0.03','4/2 12:00am','Manufacturing'],\"\n      + \"['Alcoa Inc','29.01','0.42','1.47','4/1 12:00am','Manufacturing']]\";\n    String[][] items = gson.fromJson(json, String[][].class);\n    assertEquals(\"3m Co\", items[0][0]);\n    assertEquals(\"Manufacturing\", items[1][5]);\n  }",
        "begin_line": 251,
        "end_line": 257,
        "comment": "\n   * Regression tests for Issue 272\n   ",
        "child_ranges": [
            "(line 252,col 5)-(line 253,col 77)",
            "(line 254,col 5)-(line 254,col 61)",
            "(line 255,col 5)-(line 255,col 39)",
            "(line 256,col 5)-(line 256,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ArrayTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
        "signature": "com.google.gson.functional.ArrayTest.testArrayElementsAreArrays()",
        "snippet": "  public void testArrayElementsAreArrays() {\n    Object[] stringArrays = {\n        new String[] {\"test1\", \"test2\"},\n        new String[] {\"test3\", \"test4\"}\n    };\n    assertEquals(\"[[\\\"test1\\\",\\\"test2\\\"],[\\\"test3\\\",\\\"test4\\\"]]\",\n        new Gson().toJson(stringArrays));\n  }",
        "begin_line": 260,
        "end_line": 267,
        "comment": " http://code.google.com/p/google-gson/issues/detail?id=342 ",
        "child_ranges": [
            "(line 261,col 5)-(line 264,col 6)",
            "(line 265,col 5)-(line 266,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InterfaceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InterfaceTest.java",
        "signature": "com.google.gson.functional.InterfaceTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n    obj = new TestObject(\"StringValue\");\n  }",
        "begin_line": 35,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 37,col 5)-(line 37,col 18)",
            "(line 38,col 5)-(line 38,col 22)",
            "(line 39,col 5)-(line 39,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InterfaceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InterfaceTest.java",
        "signature": "com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface()",
        "snippet": "  public void testSerializingObjectImplementingInterface() throws Exception {\n    assertEquals(OBJ_JSON, gson.toJson(obj));\n  }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InterfaceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InterfaceTest.java",
        "signature": "com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField()",
        "snippet": "  public void testSerializingInterfaceObjectField() throws Exception {\n    TestObjectWrapper objWrapper = new TestObjectWrapper(obj);\n    assertEquals(\"{\\\"obj\\\":\" + OBJ_JSON + \"}\", gson.toJson(objWrapper));\n  }",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 62)",
            "(line 48,col 5)-(line 48,col 72)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InterfaceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InterfaceTest.java",
        "signature": "com.google.gson.functional.InterfaceTest.TestObject.TestObject(java.lang.String)",
        "snippet": "    private TestObject(String value) {\n      this.someStringValue = value;\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 7)-(line 60,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InterfaceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InterfaceTest.java",
        "signature": "com.google.gson.functional.InterfaceTest.TestObjectWrapper.TestObjectWrapper(com.google.gson.functional.InterfaceTest.TestObjectInterface)",
        "snippet": "    private TestObjectWrapper(TestObjectInterface obj) {\n      this.obj = obj;\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 7)-(line 69,col 21)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExposeFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
        "signature": "com.google.gson.functional.ExposeFieldsTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new GsonBuilder()\n        .excludeFieldsWithoutExposeAnnotation()\n        .registerTypeAdapter(SomeInterface.class, new SomeInterfaceInstanceCreator())\n        .create();\n  }",
        "begin_line": 37,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 39,col 5)-(line 39,col 18)",
            "(line 40,col 5)-(line 43,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExposeFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
        "signature": "com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization()",
        "snippet": "  public void testNullExposeFieldSerialization() throws Exception {\n    ClassWithExposedFields object = new ClassWithExposedFields(null, 1);\n    String json = gson.toJson(object);\n\n    assertEquals(object.getExpectedJson(), json);\n  }",
        "begin_line": 46,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 72)",
            "(line 48,col 5)-(line 48,col 38)",
            "(line 50,col 5)-(line 50,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExposeFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
        "signature": "com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization()",
        "snippet": "  public void testArrayWithOneNullExposeFieldObjectSerialization() throws Exception {\n    ClassWithExposedFields object1 = new ClassWithExposedFields(1, 1);\n    ClassWithExposedFields object2 = new ClassWithExposedFields(null, 1);\n    ClassWithExposedFields object3 = new ClassWithExposedFields(2, 2);\n    ClassWithExposedFields[] objects = { object1, object2, object3 };\n\n    String json = gson.toJson(objects);\n    String expected = new StringBuilder()\n        .append('[').append(object1.getExpectedJson()).append(',')\n        .append(object2.getExpectedJson()).append(',')\n        .append(object3.getExpectedJson()).append(']')\n        .toString();\n\n    assertEquals(expected, json);\n  }",
        "begin_line": 53,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 70)",
            "(line 55,col 5)-(line 55,col 73)",
            "(line 56,col 5)-(line 56,col 70)",
            "(line 57,col 5)-(line 57,col 69)",
            "(line 59,col 5)-(line 59,col 39)",
            "(line 60,col 5)-(line 64,col 20)",
            "(line 66,col 5)-(line 66,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExposeFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
        "signature": "com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization()",
        "snippet": "  public void testExposeAnnotationSerialization() throws Exception {\n    ClassWithExposedFields target = new ClassWithExposedFields(1, 2);\n    assertEquals(target.getExpectedJson(), gson.toJson(target));\n  }",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 70,col 5)-(line 70,col 69)",
            "(line 71,col 5)-(line 71,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExposeFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
        "signature": "com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization()",
        "snippet": "  public void testExposeAnnotationDeserialization() throws Exception {\n    String json = \"{a:3,b:4,d:20.0}\";\n    ClassWithExposedFields target = gson.fromJson(json, ClassWithExposedFields.class);\n\n    assertEquals(3, (int) target.a);\n    assertNull(target.b);\n    assertFalse(target.d == 20);\n  }",
        "begin_line": 74,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 75,col 5)-(line 75,col 37)",
            "(line 76,col 5)-(line 76,col 86)",
            "(line 78,col 5)-(line 78,col 36)",
            "(line 79,col 5)-(line 79,col 25)",
            "(line 80,col 5)-(line 80,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExposeFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
        "signature": "com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization()",
        "snippet": "  public void testNoExposedFieldSerialization() throws Exception {\n    ClassWithNoExposedFields obj = new ClassWithNoExposedFields();\n    String json = gson.toJson(obj);\n\n    assertEquals(\"{}\", json);\n  }",
        "begin_line": 83,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 84,col 5)-(line 84,col 66)",
            "(line 85,col 5)-(line 85,col 35)",
            "(line 87,col 5)-(line 87,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExposeFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
        "signature": "com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization()",
        "snippet": "  public void testNoExposedFieldDeserialization() throws Exception {\n    String json = \"{a:4,b:5}\";\n    ClassWithNoExposedFields obj = gson.fromJson(json, ClassWithNoExposedFields.class);\n\n    assertEquals(0, obj.a);\n    assertEquals(1, obj.b);\n  }",
        "begin_line": 90,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 91,col 5)-(line 91,col 30)",
            "(line 92,col 5)-(line 92,col 87)",
            "(line 94,col 5)-(line 94,col 27)",
            "(line 95,col 5)-(line 95,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExposeFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
        "signature": "com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization()",
        "snippet": "  public void testExposedInterfaceFieldSerialization() throws Exception {\n    String expected = \"{\\\"interfaceField\\\":{}}\";\n    ClassWithInterfaceField target = new ClassWithInterfaceField(new SomeObject());\n    String actual = gson.toJson(target);\n    \n    assertEquals(expected, actual);\n  }",
        "begin_line": 98,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 99,col 5)-(line 99,col 48)",
            "(line 100,col 5)-(line 100,col 83)",
            "(line 101,col 5)-(line 101,col 40)",
            "(line 103,col 5)-(line 103,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExposeFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
        "signature": "com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization()",
        "snippet": "  public void testExposedInterfaceFieldDeserialization() throws Exception {\n    String json = \"{\\\"interfaceField\\\":{}}\";\n    ClassWithInterfaceField obj = gson.fromJson(json, ClassWithInterfaceField.class);\n\n    assertNotNull(obj.interfaceField);\n  }",
        "begin_line": 106,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 107,col 5)-(line 107,col 44)",
            "(line 108,col 5)-(line 108,col 85)",
            "(line 110,col 5)-(line 110,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExposeFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
        "signature": "com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields.ClassWithExposedFields(java.lang.Integer, java.lang.Integer)",
        "snippet": "    public ClassWithExposedFields(Integer a, Integer b) {\n      this(a, b, 1L, 2.0, 'a');\n    }",
        "begin_line": 120,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 121,col 7)-(line 121,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExposeFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
        "signature": "com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields.ClassWithExposedFields(java.lang.Integer, java.lang.Integer, long, double, char)",
        "snippet": "    public ClassWithExposedFields(Integer a, Integer b, long c, double d, char e) {\n      this.a = a;\n      this.b = b;\n      this.c = c;\n      this.d = d;\n      this.e = e;\n    }",
        "begin_line": 123,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 124,col 7)-(line 124,col 17)",
            "(line 125,col 7)-(line 125,col 17)",
            "(line 126,col 7)-(line 126,col 17)",
            "(line 127,col 7)-(line 127,col 17)",
            "(line 128,col 7)-(line 128,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExposeFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
        "signature": "com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      StringBuilder sb = new StringBuilder(\"{\");\n      if (a != null) {\n        sb.append(\"\\\"a\\\":\").append(a).append(\",\");\n      }\n      sb.append(\"\\\"d\\\":\").append(d);\n      sb.append(\"}\");\n      return sb.toString();\n    }",
        "begin_line": 131,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 132,col 7)-(line 132,col 48)",
            "(line 133,col 7)-(line 135,col 7)",
            "(line 136,col 7)-(line 136,col 36)",
            "(line 137,col 7)-(line 137,col 21)",
            "(line 138,col 7)-(line 138,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExposeFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
        "signature": "com.google.gson.functional.ExposeFieldsTest.SomeInterfaceInstanceCreator.createInstance(java.lang.reflect.Type)",
        "snippet": "    @Override public SomeInterface createInstance(Type type) {\n      return new SomeObject();\n    }",
        "begin_line": 156,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 157,col 7)-(line 157,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ExposeFieldsTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
        "signature": "com.google.gson.functional.ExposeFieldsTest.ClassWithInterfaceField.ClassWithInterfaceField(com.google.gson.functional.ExposeFieldsTest.SomeInterface)",
        "snippet": "    public ClassWithInterfaceField(SomeInterface interfaceField) {\n      this.interfaceField = interfaceField;\n    }",
        "begin_line": 165,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 166,col 7)-(line 166,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n\n    TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\n    Locale.setDefault(Locale.US);\n  }",
        "begin_line": 58,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 60,col 18)",
            "(line 61,col 5)-(line 61,col 22)",
            "(line 63,col 5)-(line 63,col 69)",
            "(line 64,col 5)-(line 64,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.tearDown()",
        "snippet": "  @Override\n  protected void tearDown() throws Exception {\n    TimeZone.setDefault(oldTimeZone);\n    super.tearDown();\n  }",
        "begin_line": 67,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 69,col 37)",
            "(line 70,col 5)-(line 70,col 21)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization()",
        "snippet": "  public void testJsonInSingleQuotesDeserialization() {\n    String json = \"{'stringValue':'no message','intValue':10,'longValue':20}\";\n    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);\n    assertEquals(\"no message\", target.stringValue);\n    assertEquals(10, target.intValue);\n    assertEquals(20, target.longValue);\n  }",
        "begin_line": 72,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 73,col 5)-(line 73,col 78)",
            "(line 74,col 5)-(line 74,col 72)",
            "(line 75,col 5)-(line 75,col 51)",
            "(line 76,col 5)-(line 76,col 38)",
            "(line 77,col 5)-(line 77,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization()",
        "snippet": "  public void testJsonInMixedQuotesDeserialization() {\n    String json = \"{\\\"stringValue\\\":'no message','intValue':10,'longValue':20}\";\n    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);\n    assertEquals(\"no message\", target.stringValue);\n    assertEquals(10, target.intValue);\n    assertEquals(20, target.longValue);\n  }",
        "begin_line": 80,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 81,col 5)-(line 81,col 80)",
            "(line 82,col 5)-(line 82,col 72)",
            "(line 83,col 5)-(line 83,col 51)",
            "(line 84,col 5)-(line 84,col 38)",
            "(line 85,col 5)-(line 85,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization()",
        "snippet": "  public void testBagOfPrimitivesSerialization() throws Exception {\n    BagOfPrimitives target = new BagOfPrimitives(10, 20, false, \"stringValue\");\n    assertEquals(target.getExpectedJson(), gson.toJson(target));\n  }",
        "begin_line": 88,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 79)",
            "(line 90,col 5)-(line 90,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization()",
        "snippet": "  public void testBagOfPrimitivesDeserialization() throws Exception {\n    BagOfPrimitives src = new BagOfPrimitives(10, 20, false, \"stringValue\");\n    String json = src.getExpectedJson();\n    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);\n    assertEquals(json, target.getExpectedJson());\n  }",
        "begin_line": 93,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 94,col 5)-(line 94,col 76)",
            "(line 95,col 5)-(line 95,col 40)",
            "(line 96,col 5)-(line 96,col 72)",
            "(line 97,col 5)-(line 97,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization()",
        "snippet": "  public void testBagOfPrimitiveWrappersSerialization() throws Exception {\n    BagOfPrimitiveWrappers target = new BagOfPrimitiveWrappers(10L, 20, false);\n    assertEquals(target.getExpectedJson(), gson.toJson(target));\n  }",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 101,col 79)",
            "(line 102,col 5)-(line 102,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization()",
        "snippet": "  public void testBagOfPrimitiveWrappersDeserialization() throws Exception {\n    BagOfPrimitiveWrappers target = new BagOfPrimitiveWrappers(10L, 20, false);\n    String jsonString = target.getExpectedJson();\n    target = gson.fromJson(jsonString, BagOfPrimitiveWrappers.class);\n    assertEquals(jsonString, target.getExpectedJson());\n  }",
        "begin_line": 105,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 106,col 79)",
            "(line 107,col 5)-(line 107,col 49)",
            "(line 108,col 5)-(line 108,col 69)",
            "(line 109,col 5)-(line 109,col 55)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization()",
        "snippet": "  public void testClassWithTransientFieldsSerialization() throws Exception {\n    ClassWithTransientFields<Long> target = new ClassWithTransientFields<Long>(1L);\n    assertEquals(target.getExpectedJson(), gson.toJson(target));\n  }",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 113,col 5)-(line 113,col 83)",
            "(line 114,col 5)-(line 114,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization()",
        "snippet": "  @SuppressWarnings(\"rawtypes\")\n  public void testClassWithTransientFieldsDeserialization() throws Exception {\n    String json = \"{\\\"longValue\\\":[1]}\";\n    ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class);\n    assertEquals(json, target.getExpectedJson());\n  }",
        "begin_line": 117,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 40)",
            "(line 120,col 5)-(line 120,col 90)",
            "(line 121,col 5)-(line 121,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored()",
        "snippet": "  @SuppressWarnings(\"rawtypes\")\n  public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored()\n      throws Exception {\n    String json = \"{\\\"transientLongValue\\\":1,\\\"longValue\\\":[1]}\";\n    ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class);\n    assertFalse(target.transientLongValue != 1);\n  }",
        "begin_line": 124,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 127,col 5)-(line 127,col 65)",
            "(line 128,col 5)-(line 128,col 90)",
            "(line 129,col 5)-(line 129,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization()",
        "snippet": "  public void testClassWithNoFieldsSerialization() throws Exception {\n    assertEquals(\"{}\", gson.toJson(new ClassWithNoFields()));\n  }",
        "begin_line": 132,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 133,col 5)-(line 133,col 61)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization()",
        "snippet": "  public void testClassWithNoFieldsDeserialization() throws Exception {\n    String json = \"{}\";\n    ClassWithNoFields target = gson.fromJson(json, ClassWithNoFields.class);\n    ClassWithNoFields expected = new ClassWithNoFields();\n    assertEquals(expected, target);\n  }",
        "begin_line": 136,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 137,col 23)",
            "(line 138,col 5)-(line 138,col 76)",
            "(line 139,col 5)-(line 139,col 57)",
            "(line 140,col 5)-(line 140,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testNestedSerialization()",
        "snippet": "  public void testNestedSerialization() throws Exception {\n    Nested target = new Nested(new BagOfPrimitives(10, 20, false, \"stringValue\"),\n       new BagOfPrimitives(30, 40, true, \"stringValue\"));\n    assertEquals(target.getExpectedJson(), gson.toJson(target));\n  }",
        "begin_line": 143,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 144,col 5)-(line 145,col 57)",
            "(line 146,col 5)-(line 146,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testNestedDeserialization()",
        "snippet": "  public void testNestedDeserialization() throws Exception {\n    String json = \"{\\\"primitive1\\\":{\\\"longValue\\\":10,\\\"intValue\\\":20,\\\"booleanValue\\\":false,\"\n        + \"\\\"stringValue\\\":\\\"stringValue\\\"},\\\"primitive2\\\":{\\\"longValue\\\":30,\\\"intValue\\\":40,\"\n        + \"\\\"booleanValue\\\":true,\\\"stringValue\\\":\\\"stringValue\\\"}}\";\n    Nested target = gson.fromJson(json, Nested.class);\n    assertEquals(json, target.getExpectedJson());\n  }",
        "begin_line": 149,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 150,col 5)-(line 152,col 68)",
            "(line 153,col 5)-(line 153,col 54)",
            "(line 154,col 5)-(line 154,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testNullSerialization()",
        "snippet": "  public void testNullSerialization() throws Exception {\n    assertEquals(\"null\", gson.toJson(null));\n  }",
        "begin_line": 156,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 157,col 5)-(line 157,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testEmptyStringDeserialization()",
        "snippet": "  public void testEmptyStringDeserialization() throws Exception {\n    Object object = gson.fromJson(\"\", Object.class);\n    assertNull(object);\n  }",
        "begin_line": 160,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 161,col 5)-(line 161,col 52)",
            "(line 162,col 5)-(line 162,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testTruncatedDeserialization()",
        "snippet": "  public void testTruncatedDeserialization() {\n    try {\n      gson.fromJson(\"[\\\"a\\\", \\\"b\\\",\", new TypeToken<List<String>>() {}.getType());\n      fail();\n    } catch (JsonParseException expected) {\n    }\n  }",
        "begin_line": 165,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 166,col 5)-(line 170,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testNullDeserialization()",
        "snippet": "  public void testNullDeserialization() throws Exception {\n    String myNullObject = null;\n    Object object = gson.fromJson(myNullObject, Object.class);\n    assertNull(object);\n  }",
        "begin_line": 173,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 31)",
            "(line 175,col 5)-(line 175,col 62)",
            "(line 176,col 5)-(line 176,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testNullFieldsSerialization()",
        "snippet": "  public void testNullFieldsSerialization() throws Exception {\n    Nested target = new Nested(new BagOfPrimitives(10, 20, false, \"stringValue\"), null);\n    assertEquals(target.getExpectedJson(), gson.toJson(target));\n  }",
        "begin_line": 179,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 180,col 5)-(line 180,col 88)",
            "(line 181,col 5)-(line 181,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testNullFieldsDeserialization()",
        "snippet": "  public void testNullFieldsDeserialization() throws Exception {\n    String json = \"{\\\"primitive1\\\":{\\\"longValue\\\":10,\\\"intValue\\\":20,\\\"booleanValue\\\":false\"\n        + \",\\\"stringValue\\\":\\\"stringValue\\\"}}\";\n    Nested target = gson.fromJson(json, Nested.class);\n    assertEquals(json, target.getExpectedJson());\n  }",
        "begin_line": 184,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 185,col 5)-(line 186,col 47)",
            "(line 187,col 5)-(line 187,col 54)",
            "(line 188,col 5)-(line 188,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization()",
        "snippet": "  public void testArrayOfObjectsSerialization() throws Exception {\n    ArrayOfObjects target = new ArrayOfObjects();\n    assertEquals(target.getExpectedJson(), gson.toJson(target));\n  }",
        "begin_line": 191,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 192,col 5)-(line 192,col 49)",
            "(line 193,col 5)-(line 193,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization()",
        "snippet": "  public void testArrayOfObjectsDeserialization() throws Exception {\n    String json = new ArrayOfObjects().getExpectedJson();\n    ArrayOfObjects target = gson.fromJson(json, ArrayOfObjects.class);\n    assertEquals(json, target.getExpectedJson());\n  }",
        "begin_line": 196,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 197,col 5)-(line 197,col 57)",
            "(line 198,col 5)-(line 198,col 70)",
            "(line 199,col 5)-(line 199,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization()",
        "snippet": "  public void testArrayOfArraysSerialization() throws Exception {\n    ArrayOfArrays target = new ArrayOfArrays();\n    assertEquals(target.getExpectedJson(), gson.toJson(target));\n  }",
        "begin_line": 202,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 203,col 5)-(line 203,col 47)",
            "(line 204,col 5)-(line 204,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization()",
        "snippet": "  public void testArrayOfArraysDeserialization() throws Exception {\n    String json = new ArrayOfArrays().getExpectedJson();\n    ArrayOfArrays target = gson.fromJson(json, ArrayOfArrays.class);\n    assertEquals(json, target.getExpectedJson());\n  }",
        "begin_line": 207,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 208,col 5)-(line 208,col 56)",
            "(line 209,col 5)-(line 209,col 68)",
            "(line 210,col 5)-(line 210,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields()",
        "snippet": "  public void testArrayOfObjectsAsFields() throws Exception {\n    ClassWithObjects classWithObjects = new ClassWithObjects();\n    BagOfPrimitives bagOfPrimitives = new BagOfPrimitives();\n    String stringValue = \"someStringValueInArray\";\n    String classWithObjectsJson = gson.toJson(classWithObjects);\n    String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives);\n\n    ClassWithArray classWithArray = new ClassWithArray(\n        new Object[] { stringValue, classWithObjects, bagOfPrimitives });\n    String json = gson.toJson(classWithArray);\n\n    assertTrue(json.contains(classWithObjectsJson));\n    assertTrue(json.contains(bagOfPrimitivesJson));\n    assertTrue(json.contains(\"\\\"\" + stringValue + \"\\\"\"));\n  }",
        "begin_line": 213,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 214,col 5)-(line 214,col 63)",
            "(line 215,col 5)-(line 215,col 60)",
            "(line 216,col 5)-(line 216,col 50)",
            "(line 217,col 5)-(line 217,col 64)",
            "(line 218,col 5)-(line 218,col 62)",
            "(line 220,col 5)-(line 221,col 73)",
            "(line 222,col 5)-(line 222,col 46)",
            "(line 224,col 5)-(line 224,col 52)",
            "(line 225,col 5)-(line 225,col 51)",
            "(line 226,col 5)-(line 226,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testNullArraysDeserialization()",
        "snippet": "  public void testNullArraysDeserialization() throws Exception {\n    String json = \"{\\\"array\\\": null}\";\n    ClassWithArray target = gson.fromJson(json, ClassWithArray.class);\n    assertNull(target.array);\n  }",
        "begin_line": 232,
        "end_line": 236,
        "comment": "\n   * Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?id=14\n   ",
        "child_ranges": [
            "(line 233,col 5)-(line 233,col 38)",
            "(line 234,col 5)-(line 234,col 70)",
            "(line 235,col 5)-(line 235,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization()",
        "snippet": "  public void testNullObjectFieldsDeserialization() throws Exception {\n    String json = \"{\\\"bag\\\": null}\";\n    ClassWithObjects target = gson.fromJson(json, ClassWithObjects.class);\n    assertNull(target.bag);\n  }",
        "begin_line": 241,
        "end_line": 245,
        "comment": "\n   * Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?id=14\n   ",
        "child_ranges": [
            "(line 242,col 5)-(line 242,col 36)",
            "(line 243,col 5)-(line 243,col 74)",
            "(line 244,col 5)-(line 244,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization()",
        "snippet": "  public void testEmptyCollectionInAnObjectDeserialization() throws Exception {\n    String json = \"{\\\"children\\\":[]}\";\n    ClassWithCollectionField target = gson.fromJson(json, ClassWithCollectionField.class);\n    assertNotNull(target);\n    assertTrue(target.children.isEmpty());\n  }",
        "begin_line": 247,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 248,col 38)",
            "(line 249,col 5)-(line 249,col 90)",
            "(line 250,col 5)-(line 250,col 26)",
            "(line 251,col 5)-(line 251,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization()",
        "snippet": "  public void testPrimitiveArrayInAnObjectDeserialization() throws Exception {\n    String json = \"{\\\"longArray\\\":[0,1,2,3,4,5,6,7,8,9]}\";\n    PrimitiveArray target = gson.fromJson(json, PrimitiveArray.class);\n    assertEquals(json, target.getExpectedJson());\n  }",
        "begin_line": 258,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 58)",
            "(line 260,col 5)-(line 260,col 70)",
            "(line 261,col 5)-(line 261,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization()",
        "snippet": "  public void testNullPrimitiveFieldsDeserialization() throws Exception {\n    String json = \"{\\\"longValue\\\":null}\";\n    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);\n    assertEquals(BagOfPrimitives.DEFAULT_VALUE, target.longValue);\n  }",
        "begin_line": 267,
        "end_line": 271,
        "comment": "\n   * Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?id=14\n   ",
        "child_ranges": [
            "(line 268,col 5)-(line 268,col 41)",
            "(line 269,col 5)-(line 269,col 72)",
            "(line 270,col 5)-(line 270,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization()",
        "snippet": "  public void testEmptyCollectionInAnObjectSerialization() throws Exception {\n    ClassWithCollectionField target = new ClassWithCollectionField();\n    assertEquals(\"{\\\"children\\\":[]}\", gson.toJson(target));\n  }",
        "begin_line": 273,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 274,col 5)-(line 274,col 69)",
            "(line 275,col 5)-(line 275,col 59)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization()",
        "snippet": "  public void testPrivateNoArgConstructorDeserialization() throws Exception {\n    ClassWithPrivateNoArgsConstructor target =\n      gson.fromJson(\"{\\\"a\\\":20}\", ClassWithPrivateNoArgsConstructor.class);\n    assertEquals(20, target.a);\n  }",
        "begin_line": 278,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 279,col 5)-(line 280,col 75)",
            "(line 281,col 5)-(line 281,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization()",
        "snippet": "  public void testAnonymousLocalClassesSerialization() throws Exception {\n    assertEquals(\"null\", gson.toJson(new ClassWithNoFields() {\n      // empty anonymous class\n    }));\n  }",
        "begin_line": 284,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 285,col 5)-(line 287,col 8)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization()",
        "snippet": "  public void testAnonymousLocalClassesCustomSerialization() throws Exception {\n    gson = new GsonBuilder()\n        .registerTypeHierarchyAdapter(ClassWithNoFields.class,\n            new JsonSerializer<ClassWithNoFields>() {\n              public JsonElement serialize(\n                  ClassWithNoFields src, Type typeOfSrc, JsonSerializationContext context) {\n                return new JsonObject();\n              }\n            }).create();\n\n    assertEquals(\"null\", gson.toJson(new ClassWithNoFields() {\n      // empty anonymous class\n    }));\n  }",
        "begin_line": 290,
        "end_line": 303,
        "comment": "",
        "child_ranges": [
            "(line 291,col 5)-(line 298,col 24)",
            "(line 300,col 5)-(line 302,col 8)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "serialize(ClassWithNoFields, Type, JsonSerializationContext)",
        "snippet": "              public JsonElement serialize(\n                  ClassWithNoFields src, Type typeOfSrc, JsonSerializationContext context) {\n                return new JsonObject();\n              }",
        "begin_line": 294,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 296,col 17)-(line 296,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization()",
        "snippet": "  public void testPrimitiveArrayFieldSerialization() {\n    PrimitiveArray target = new PrimitiveArray(new long[] { 1L, 2L, 3L });\n    assertEquals(target.getExpectedJson(), gson.toJson(target));\n  }",
        "begin_line": 305,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 306,col 5)-(line 306,col 74)",
            "(line 307,col 5)-(line 307,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization()",
        "snippet": "  public void testClassWithObjectFieldSerialization() {\n    ClassWithObjectField obj = new ClassWithObjectField();\n    obj.member = \"abc\";\n    String json = gson.toJson(obj);\n    assertTrue(json.contains(\"abc\"));\n  }",
        "begin_line": 314,
        "end_line": 319,
        "comment": "\n   * Tests that a class field with type Object can be serialized properly.\n   * See issue 54\n   ",
        "child_ranges": [
            "(line 315,col 5)-(line 315,col 58)",
            "(line 316,col 5)-(line 316,col 23)",
            "(line 317,col 5)-(line 317,col 35)",
            "(line 318,col 5)-(line 318,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testInnerClassSerialization()",
        "snippet": "  public void testInnerClassSerialization() {\n    Parent p = new Parent();\n    Parent.Child c = p.new Child();\n    String json = gson.toJson(c);\n    assertTrue(json.contains(\"value2\"));\n    assertFalse(json.contains(\"value1\"));\n  }",
        "begin_line": 326,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 327,col 5)-(line 327,col 28)",
            "(line 328,col 5)-(line 328,col 35)",
            "(line 329,col 5)-(line 329,col 33)",
            "(line 330,col 5)-(line 330,col 40)",
            "(line 331,col 5)-(line 331,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testInnerClassDeserialization()",
        "snippet": "  public void testInnerClassDeserialization() {\n    final Parent p = new Parent();\n    Gson gson = new GsonBuilder().registerTypeAdapter(\n        Parent.Child.class, new InstanceCreator<Parent.Child>() {\n      public Parent.Child createInstance(Type type) {\n        return p.new Child();\n      }\n    }).create();\n    String json = \"{'value2':3}\";\n    Parent.Child c = gson.fromJson(json, Parent.Child.class);\n    assertEquals(3, c.value2);\n  }",
        "begin_line": 334,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 335,col 5)-(line 335,col 34)",
            "(line 336,col 5)-(line 341,col 16)",
            "(line 342,col 5)-(line 342,col 33)",
            "(line 343,col 5)-(line 343,col 61)",
            "(line 344,col 5)-(line 344,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.Anonymous-fd5bd85b-ca21-49de-86d5-a0a025d4959f.createInstance(java.lang.reflect.Type)",
        "snippet": "      public Parent.Child createInstance(Type type) {\n        return p.new Child();\n      }",
        "begin_line": 338,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.ArrayOfArrays.ArrayOfArrays()",
        "snippet": "    public ArrayOfArrays() {\n      elements = new BagOfPrimitives[3][2];\n      for (int i = 0; i < elements.length; ++i) {\n        BagOfPrimitives[] row = elements[i];\n        for (int j = 0; j < row.length; ++j) {\n          row[j] = new BagOfPrimitives(i+j, i*j, false, i+\"_\"+j);\n        }\n      }\n    }",
        "begin_line": 357,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 358,col 7)-(line 358,col 43)",
            "(line 359,col 7)-(line 364,col 7)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.ArrayOfArrays.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      StringBuilder sb = new StringBuilder(\"{\\\"elements\\\":[\");\n      boolean first = true;\n      for (BagOfPrimitives[] row : elements) {\n        if (first) {\n          first = false;\n        } else {\n          sb.append(\",\");\n        }\n        boolean firstOfRow = true;\n        sb.append(\"[\");\n        for (BagOfPrimitives element : row) {\n          if (firstOfRow) {\n            firstOfRow = false;\n          } else {\n            sb.append(\",\");\n          }\n          sb.append(element.getExpectedJson());\n        }\n        sb.append(\"]\");\n      }\n      sb.append(\"]}\");\n      return sb.toString();\n    }",
        "begin_line": 366,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 367,col 7)-(line 367,col 62)",
            "(line 368,col 7)-(line 368,col 27)",
            "(line 369,col 7)-(line 386,col 7)",
            "(line 387,col 7)-(line 387,col 22)",
            "(line 388,col 7)-(line 388,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.ClassWithPrivateNoArgsConstructor.ClassWithPrivateNoArgsConstructor()",
        "snippet": "    private ClassWithPrivateNoArgsConstructor() {\n      a = 10;\n    }",
        "begin_line": 394,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 395,col 7)-(line 395,col 13)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization()",
        "snippet": "  public void testObjectFieldNamesWithoutQuotesDeserialization() {\n    String json = \"{longValue:1,'booleanValue':true,\\\"stringValue\\\":'bar'}\";\n    BagOfPrimitives bag = gson.fromJson(json, BagOfPrimitives.class);\n    assertEquals(1, bag.longValue);\n    assertTrue(bag.booleanValue);\n    assertEquals(\"bar\", bag.stringValue);\n  }",
        "begin_line": 402,
        "end_line": 408,
        "comment": "\n   * In response to Issue 41 http://code.google.com/p/google-gson/issues/detail?id=41\n   ",
        "child_ranges": [
            "(line 403,col 5)-(line 403,col 76)",
            "(line 404,col 5)-(line 404,col 69)",
            "(line 405,col 5)-(line 405,col 35)",
            "(line 406,col 5)-(line 406,col 33)",
            "(line 407,col 5)-(line 407,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization()",
        "snippet": "  public void testStringFieldWithNumberValueDeserialization() {\n    String json = \"{\\\"stringValue\\\":1}\";\n    BagOfPrimitives bag = gson.fromJson(json, BagOfPrimitives.class);\n    assertEquals(\"1\", bag.stringValue);\n\n    json = \"{\\\"stringValue\\\":1.5E+6}\";\n    bag = gson.fromJson(json, BagOfPrimitives.class);\n    assertEquals(\"1.5E+6\", bag.stringValue);\n\n    json = \"{\\\"stringValue\\\":true}\";\n    bag = gson.fromJson(json, BagOfPrimitives.class);\n    assertEquals(\"true\", bag.stringValue);\n  }",
        "begin_line": 410,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 411,col 5)-(line 411,col 40)",
            "(line 412,col 5)-(line 412,col 69)",
            "(line 413,col 5)-(line 413,col 39)",
            "(line 415,col 5)-(line 415,col 38)",
            "(line 416,col 5)-(line 416,col 53)",
            "(line 417,col 5)-(line 417,col 44)",
            "(line 419,col 5)-(line 419,col 36)",
            "(line 420,col 5)-(line 420,col 53)",
            "(line 421,col 5)-(line 421,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization()",
        "snippet": "  public void testStringFieldWithEmptyValueSerialization() {\n    ClassWithEmptyStringFields target = new ClassWithEmptyStringFields();\n    target.a = \"5794749\";\n    String json = gson.toJson(target);\n    assertTrue(json.contains(\"\\\"a\\\":\\\"5794749\\\"\"));\n    assertTrue(json.contains(\"\\\"b\\\":\\\"\\\"\"));\n    assertTrue(json.contains(\"\\\"c\\\":\\\"\\\"\"));\n  }",
        "begin_line": 427,
        "end_line": 434,
        "comment": "\n   * Created to reproduce issue 140\n   ",
        "child_ranges": [
            "(line 428,col 5)-(line 428,col 73)",
            "(line 429,col 5)-(line 429,col 25)",
            "(line 430,col 5)-(line 430,col 38)",
            "(line 431,col 5)-(line 431,col 51)",
            "(line 432,col 5)-(line 432,col 44)",
            "(line 433,col 5)-(line 433,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization()",
        "snippet": "  public void testStringFieldWithEmptyValueDeserialization() {\n    String json = \"{a:\\\"5794749\\\",b:\\\"\\\",c:\\\"\\\"}\";\n    ClassWithEmptyStringFields target = gson.fromJson(json, ClassWithEmptyStringFields.class);\n    assertEquals(\"5794749\", target.a);\n    assertEquals(\"\", target.b);\n    assertEquals(\"\", target.c);\n  }",
        "begin_line": 439,
        "end_line": 445,
        "comment": "\n   * Created to reproduce issue 140\n   ",
        "child_ranges": [
            "(line 440,col 5)-(line 440,col 50)",
            "(line 441,col 5)-(line 441,col 94)",
            "(line 442,col 5)-(line 442,col 38)",
            "(line 443,col 5)-(line 443,col 31)",
            "(line 444,col 5)-(line 444,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testJsonObjectSerialization()",
        "snippet": "  public void testJsonObjectSerialization() {\n    Gson gson = new GsonBuilder().serializeNulls().create();\n    JsonObject obj = new JsonObject();\n    String json = gson.toJson(obj);\n    assertEquals(\"{}\", json);\n  }",
        "begin_line": 453,
        "end_line": 458,
        "comment": "",
        "child_ranges": [
            "(line 454,col 5)-(line 454,col 60)",
            "(line 455,col 5)-(line 455,col 38)",
            "(line 456,col 5)-(line 456,col 35)",
            "(line 457,col 5)-(line 457,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testSingletonLists()",
        "snippet": "  public void testSingletonLists() {\n    Gson gson = new Gson();\n    Product product = new Product();\n    assertEquals(\"{\\\"attributes\\\":[],\\\"departments\\\":[]}\",\n        gson.toJson(product));\n    gson.fromJson(gson.toJson(product), Product.class);\n\n    product.departments.add(new Department());\n    assertEquals(\"{\\\"attributes\\\":[],\\\"departments\\\":[{\\\"name\\\":\\\"abc\\\",\\\"code\\\":\\\"123\\\"}]}\",\n        gson.toJson(product));\n    gson.fromJson(gson.toJson(product), Product.class);\n\n    product.attributes.add(\"456\");\n    assertEquals(\"{\\\"attributes\\\":[\\\"456\\\"],\\\"departments\\\":[{\\\"name\\\":\\\"abc\\\",\\\"code\\\":\\\"123\\\"}]}\",\n        gson.toJson(product));\n    gson.fromJson(gson.toJson(product), Product.class);\n  }",
        "begin_line": 463,
        "end_line": 479,
        "comment": "\n   * Test for issue 215.\n   ",
        "child_ranges": [
            "(line 464,col 5)-(line 464,col 27)",
            "(line 465,col 5)-(line 465,col 36)",
            "(line 466,col 5)-(line 467,col 30)",
            "(line 468,col 5)-(line 468,col 55)",
            "(line 470,col 5)-(line 470,col 46)",
            "(line 471,col 5)-(line 472,col 30)",
            "(line 473,col 5)-(line 473,col 55)",
            "(line 475,col 5)-(line 475,col 34)",
            "(line 476,col 5)-(line 477,col 30)",
            "(line 478,col 5)-(line 478,col 55)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ObjectTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
        "signature": "com.google.gson.functional.ObjectTest.testDateAsMapObjectField()",
        "snippet": "  public void testDateAsMapObjectField() {\n    HasObjectMap a = new HasObjectMap();\n    a.map.put(\"date\", new Date(0));\n    assertEquals(\"{\\\"map\\\":{\\\"date\\\":\\\"Dec 31, 1969 4:00:00 PM\\\"}}\", gson.toJson(a));\n  }",
        "begin_line": 482,
        "end_line": 486,
        "comment": " http://code.google.com/p/google-gson/issues/detail?id=270",
        "child_ranges": [
            "(line 483,col 5)-(line 483,col 40)",
            "(line 484,col 5)-(line 484,col 35)",
            "(line 485,col 5)-(line 485,col 85)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gsonBuilder = new GsonBuilder().serializeNulls();\n  }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 18)",
            "(line 48,col 5)-(line 48,col 53)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization()",
        "snippet": "  public void testTopLevelNullObjectSerialization() {\n    Gson gson = gsonBuilder.create();\n    String actual = gson.toJson(null);\n    assertEquals(\"null\", actual);\n\n    actual = gson.toJson(null, String.class);\n    assertEquals(\"null\", actual);\n  }",
        "begin_line": 51,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 37)",
            "(line 53,col 5)-(line 53,col 38)",
            "(line 54,col 5)-(line 54,col 33)",
            "(line 56,col 5)-(line 56,col 45)",
            "(line 57,col 5)-(line 57,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization()",
        "snippet": "  public void testTopLevelNullObjectDeserialization() throws Exception {\n    Gson gson = gsonBuilder.create();\n    String actual = gson.fromJson(\"null\", String.class);\n    assertNull(actual);\n  }",
        "begin_line": 60,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 61,col 5)-(line 61,col 37)",
            "(line 62,col 5)-(line 62,col 56)",
            "(line 63,col 5)-(line 63,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls()",
        "snippet": "  public void testExplicitSerializationOfNulls() {\n    Gson gson = gsonBuilder.create();\n    ClassWithObjects target = new ClassWithObjects(null);\n    String actual = gson.toJson(target);\n    String expected = \"{\\\"bag\\\":null}\";\n    assertEquals(expected, actual);\n  }",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 37)",
            "(line 68,col 5)-(line 68,col 57)",
            "(line 69,col 5)-(line 69,col 40)",
            "(line 70,col 5)-(line 70,col 39)",
            "(line 71,col 5)-(line 71,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls()",
        "snippet": "  public void testExplicitDeserializationOfNulls() throws Exception {\n    Gson gson = gsonBuilder.create();\n    ClassWithObjects target = gson.fromJson(\"{\\\"bag\\\":null}\", ClassWithObjects.class);\n    assertNull(target.bag);\n  }",
        "begin_line": 74,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 75,col 5)-(line 75,col 37)",
            "(line 76,col 5)-(line 76,col 86)",
            "(line 77,col 5)-(line 77,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers()",
        "snippet": "  public void testExplicitSerializationOfNullArrayMembers() {\n    Gson gson = gsonBuilder.create();\n    ClassWithMembers target = new ClassWithMembers();\n    String json = gson.toJson(target);\n    assertTrue(json.contains(\"\\\"array\\\":null\"));\n  }",
        "begin_line": 80,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 81,col 5)-(line 81,col 37)",
            "(line 82,col 5)-(line 82,col 53)",
            "(line 83,col 5)-(line 83,col 38)",
            "(line 84,col 5)-(line 84,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization()",
        "snippet": "  public void testNullWrappedPrimitiveMemberSerialization() {\n    Gson gson = gsonBuilder.serializeNulls().create();\n    ClassWithNullWrappedPrimitive target = new ClassWithNullWrappedPrimitive();\n    String json = gson.toJson(target);\n    assertTrue(json.contains(\"\\\"value\\\":null\"));\n  }",
        "begin_line": 90,
        "end_line": 95,
        "comment": " \r\n   * Added to verify http://code.google.com/p/google-gson/issues/detail?id=68\r\n   ",
        "child_ranges": [
            "(line 91,col 5)-(line 91,col 54)",
            "(line 92,col 5)-(line 92,col 79)",
            "(line 93,col 5)-(line 93,col 38)",
            "(line 94,col 5)-(line 94,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization()",
        "snippet": "  public void testNullWrappedPrimitiveMemberDeserialization() {\n    Gson gson = gsonBuilder.create();\n    String json = \"{'value':null}\";\n    ClassWithNullWrappedPrimitive target = gson.fromJson(json, ClassWithNullWrappedPrimitive.class);\n    assertNull(target.value);\n  }",
        "begin_line": 100,
        "end_line": 105,
        "comment": " \r\n   * Added to verify http://code.google.com/p/google-gson/issues/detail?id=68\r\n   ",
        "child_ranges": [
            "(line 101,col 5)-(line 101,col 37)",
            "(line 102,col 5)-(line 102,col 35)",
            "(line 103,col 5)-(line 103,col 100)",
            "(line 104,col 5)-(line 104,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers()",
        "snippet": "  public void testExplicitSerializationOfNullCollectionMembers() {\n    Gson gson = gsonBuilder.create();\n    ClassWithMembers target = new ClassWithMembers();\n    String json = gson.toJson(target);\n    assertTrue(json.contains(\"\\\"col\\\":null\"));\n  }",
        "begin_line": 107,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 108,col 5)-(line 108,col 37)",
            "(line 109,col 5)-(line 109,col 53)",
            "(line 110,col 5)-(line 110,col 38)",
            "(line 111,col 5)-(line 111,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers()",
        "snippet": "  public void testExplicitSerializationOfNullStringMembers() {\n    Gson gson = gsonBuilder.create();\n    ClassWithMembers target = new ClassWithMembers();\n    String json = gson.toJson(target);\n    assertTrue(json.contains(\"\\\"str\\\":null\"));\n  }",
        "begin_line": 114,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 115,col 5)-(line 115,col 37)",
            "(line 116,col 5)-(line 116,col 53)",
            "(line 117,col 5)-(line 117,col 38)",
            "(line 118,col 5)-(line 118,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls()",
        "snippet": "  public void testCustomSerializationOfNulls() {\n    gsonBuilder.registerTypeAdapter(ClassWithObjects.class, new ClassWithObjectsSerializer());\n    Gson gson = gsonBuilder.create();\n    ClassWithObjects target = new ClassWithObjects(new BagOfPrimitives());\n    String actual = gson.toJson(target);\n    String expected = \"{\\\"bag\\\":null}\";\n    assertEquals(expected, actual);\n  }",
        "begin_line": 121,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 122,col 5)-(line 122,col 94)",
            "(line 123,col 5)-(line 123,col 37)",
            "(line 124,col 5)-(line 124,col 74)",
            "(line 125,col 5)-(line 125,col 40)",
            "(line 126,col 5)-(line 126,col 39)",
            "(line 127,col 5)-(line 127,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls()",
        "snippet": "  public void testPrintPrintingObjectWithNulls() throws Exception {\n    gsonBuilder = new GsonBuilder();\n    Gson gson = gsonBuilder.create();\n    String result = gson.toJson(new ClassWithMembers());\n    assertEquals(\"{}\", result);\n\n    gson = gsonBuilder.serializeNulls().create();\n    result = gson.toJson(new ClassWithMembers());\n    assertTrue(result.contains(\"\\\"str\\\":null\"));\n  }",
        "begin_line": 130,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 36)",
            "(line 132,col 5)-(line 132,col 37)",
            "(line 133,col 5)-(line 133,col 56)",
            "(line 134,col 5)-(line 134,col 31)",
            "(line 136,col 5)-(line 136,col 49)",
            "(line 137,col 5)-(line 137,col 49)",
            "(line 138,col 5)-(line 138,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls()",
        "snippet": "  public void testPrintPrintingArraysWithNulls() throws Exception {\n    gsonBuilder = new GsonBuilder();\n    Gson gson = gsonBuilder.create();\n    String result = gson.toJson(new String[] { \"1\", null, \"3\" });\n    assertEquals(\"[\\\"1\\\",null,\\\"3\\\"]\", result);\n\n    gson = gsonBuilder.serializeNulls().create();\n    result = gson.toJson(new String[] { \"1\", null, \"3\" });\n    assertEquals(\"[\\\"1\\\",null,\\\"3\\\"]\", result);\n  }",
        "begin_line": 141,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 142,col 5)-(line 142,col 36)",
            "(line 143,col 5)-(line 143,col 37)",
            "(line 144,col 5)-(line 144,col 65)",
            "(line 145,col 5)-(line 145,col 47)",
            "(line 147,col 5)-(line 147,col 49)",
            "(line 148,col 5)-(line 148,col 58)",
            "(line 149,col 5)-(line 149,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull()",
        "snippet": "  public void testAbsentJsonElementsAreSetToNull() {\n    Gson gson = new Gson();\n    ClassWithInitializedMembers target =\n        gson.fromJson(\"{array:[1,2,3]}\", ClassWithInitializedMembers.class);\n    assertTrue(target.array.length == 3 && target.array[1] == 2);\n    assertEquals(ClassWithInitializedMembers.MY_STRING_DEFAULT, target.str1);\n    assertNull(target.str2);\n    assertEquals(ClassWithInitializedMembers.MY_INT_DEFAULT, target.int1);\n    assertEquals(0, target.int2); // test the default value of a primitive int field per JVM spec\n    assertEquals(ClassWithInitializedMembers.MY_BOOLEAN_DEFAULT, target.bool1);\n    assertFalse(target.bool2); // test the default value of a primitive boolean field per JVM spec\n  }",
        "begin_line": 153,
        "end_line": 164,
        "comment": " test for issue 389",
        "child_ranges": [
            "(line 154,col 5)-(line 154,col 27)",
            "(line 155,col 5)-(line 156,col 76)",
            "(line 157,col 5)-(line 157,col 65)",
            "(line 158,col 5)-(line 158,col 77)",
            "(line 159,col 5)-(line 159,col 28)",
            "(line 160,col 5)-(line 160,col 74)",
            "(line 161,col 5)-(line 161,col 33)",
            "(line 162,col 5)-(line 162,col 79)",
            "(line 163,col 5)-(line 163,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithInitializedMembers()",
        "snippet": "    public ClassWithInitializedMembers() {\n      str1 = MY_STRING_DEFAULT;\n    }",
        "begin_line": 178,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 179,col 7)-(line 179,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "serialize(ClassWithObjects, Type, JsonSerializationContext)",
        "snippet": "    @Override public JsonElement serialize(ClassWithObjects src, Type typeOfSrc,\n        JsonSerializationContext context) {\n      JsonObject obj = new JsonObject();\n      obj.add(\"bag\", JsonNull.INSTANCE);\n      return obj;\n    }",
        "begin_line": 195,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 197,col 7)-(line 197,col 40)",
            "(line 198,col 7)-(line 198,col 40)",
            "(line 199,col 7)-(line 199,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization()",
        "snippet": "  public void testExplicitNullSetsFieldToNullDuringDeserialization() {\n    Gson gson = new Gson();\n    String json = \"{value:null}\";\n    ObjectWithField obj = gson.fromJson(json, ObjectWithField.class);\n    assertNull(obj.value);    \n  }",
        "begin_line": 203,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 204,col 5)-(line 204,col 27)",
            "(line 205,col 5)-(line 205,col 33)",
            "(line 206,col 5)-(line 206,col 69)",
            "(line 207,col 5)-(line 207,col 26)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization()",
        "snippet": "  public void testCustomTypeAdapterPassesNullSerialization() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(ObjectWithField.class, new JsonSerializer<ObjectWithField>() {\n          @Override public JsonElement serialize(ObjectWithField src, Type typeOfSrc,\n              JsonSerializationContext context) {\n            return context.serialize(null);\n          }\n        }).create();\n    ObjectWithField target = new ObjectWithField();\n    target.value = \"value1\";\n    String json = gson.toJson(target);\n    assertFalse(json.contains(\"value1\"));\n  }",
        "begin_line": 210,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 211,col 5)-(line 217,col 20)",
            "(line 218,col 5)-(line 218,col 51)",
            "(line 219,col 5)-(line 219,col 28)",
            "(line 220,col 5)-(line 220,col 38)",
            "(line 221,col 5)-(line 221,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.Anonymous-282a8f84-63c3-4ac1-a680-9272a336851b.serialize(com.google.gson.functional.NullObjectAndFieldTest.ObjectWithField, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "          @Override public JsonElement serialize(ObjectWithField src, Type typeOfSrc,\n              JsonSerializationContext context) {\n            return context.serialize(null);\n          }",
        "begin_line": 213,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 215,col 13)-(line 215,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization()",
        "snippet": "  public void testCustomTypeAdapterPassesNullDesrialization() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(ObjectWithField.class, new JsonDeserializer<ObjectWithField>() {\n          @Override public ObjectWithField deserialize(JsonElement json, Type type,\n              JsonDeserializationContext context) {\n            return context.deserialize(null, type);\n          }\n        }).create();\n    String json = \"{value:'value1'}\";\n    ObjectWithField target = gson.fromJson(json, ObjectWithField.class);\n    assertNull(target);\n  }",
        "begin_line": 224,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 231,col 20)",
            "(line 232,col 5)-(line 232,col 37)",
            "(line 233,col 5)-(line 233,col 72)",
            "(line 234,col 5)-(line 234,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NullObjectAndFieldTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
        "signature": "com.google.gson.functional.NullObjectAndFieldTest.Anonymous-148002bc-26df-4d13-ab9b-a4a06fb5f288.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "          @Override public ObjectWithField deserialize(JsonElement json, Type type,\n              JsonDeserializationContext context) {\n            return context.deserialize(null, type);\n          }",
        "begin_line": 227,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 229,col 13)-(line 229,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JavaUtilConcurrentAtomicTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java",
        "signature": "com.google.gson.functional.JavaUtilConcurrentAtomicTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 39,col 5)-(line 39,col 18)",
            "(line 40,col 5)-(line 40,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JavaUtilConcurrentAtomicTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java",
        "signature": "com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicBoolean()",
        "snippet": "  public void testAtomicBoolean() throws Exception {\n    AtomicBoolean target = gson.fromJson(\"true\", AtomicBoolean.class);\n    assertTrue(target.get());\n    String json = gson.toJson(target);\n    assertEquals(\"true\", json);\n  }",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 44,col 70)",
            "(line 45,col 5)-(line 45,col 29)",
            "(line 46,col 5)-(line 46,col 38)",
            "(line 47,col 5)-(line 47,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JavaUtilConcurrentAtomicTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java",
        "signature": "com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicInteger()",
        "snippet": "  public void testAtomicInteger() throws Exception {\n    AtomicInteger target = gson.fromJson(\"10\", AtomicInteger.class);\n    assertEquals(10, target.get());\n    String json = gson.toJson(target);\n    assertEquals(\"10\", json);\n  }",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 68)",
            "(line 52,col 5)-(line 52,col 35)",
            "(line 53,col 5)-(line 53,col 38)",
            "(line 54,col 5)-(line 54,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JavaUtilConcurrentAtomicTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java",
        "signature": "com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicLong()",
        "snippet": "  public void testAtomicLong() throws Exception {\n    AtomicLong target = gson.fromJson(\"10\", AtomicLong.class);\n    assertEquals(10, target.get());\n    String json = gson.toJson(target);\n    assertEquals(\"10\", json);\n  }",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 58,col 62)",
            "(line 59,col 5)-(line 59,col 35)",
            "(line 60,col 5)-(line 60,col 38)",
            "(line 61,col 5)-(line 61,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JavaUtilConcurrentAtomicTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java",
        "signature": "com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicLongWithStringSerializationPolicy()",
        "snippet": "  public void testAtomicLongWithStringSerializationPolicy() throws Exception {\n    Gson gson = new GsonBuilder()\n        .setLongSerializationPolicy(LongSerializationPolicy.STRING)\n        .create();\n    AtomicLongHolder target = gson.fromJson(\"{'value':'10'}\", AtomicLongHolder.class);\n    assertEquals(10, target.value.get());\n    String json = gson.toJson(target);\n    assertEquals(\"{\\\"value\\\":\\\"10\\\"}\", json);\n  }",
        "begin_line": 64,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 65,col 5)-(line 67,col 18)",
            "(line 68,col 5)-(line 68,col 86)",
            "(line 69,col 5)-(line 69,col 41)",
            "(line 70,col 5)-(line 70,col 38)",
            "(line 71,col 5)-(line 71,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JavaUtilConcurrentAtomicTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java",
        "signature": "com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicIntegerArray()",
        "snippet": "  public void testAtomicIntegerArray() throws Exception {\n    AtomicIntegerArray target = gson.fromJson(\"[10, 13, 14]\", AtomicIntegerArray.class);\n    assertEquals(3, target.length());\n    assertEquals(10, target.get(0));\n    assertEquals(13, target.get(1));\n    assertEquals(14, target.get(2));\n    String json = gson.toJson(target);\n    assertEquals(\"[10,13,14]\", json);\n  }",
        "begin_line": 74,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 75,col 5)-(line 75,col 88)",
            "(line 76,col 5)-(line 76,col 37)",
            "(line 77,col 5)-(line 77,col 36)",
            "(line 78,col 5)-(line 78,col 36)",
            "(line 79,col 5)-(line 79,col 36)",
            "(line 80,col 5)-(line 80,col 38)",
            "(line 81,col 5)-(line 81,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JavaUtilConcurrentAtomicTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java",
        "signature": "com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicLongArray()",
        "snippet": "  public void testAtomicLongArray() throws Exception {\n    AtomicLongArray target = gson.fromJson(\"[10, 13, 14]\", AtomicLongArray.class);\n    assertEquals(3, target.length());\n    assertEquals(10, target.get(0));\n    assertEquals(13, target.get(1));\n    assertEquals(14, target.get(2));\n    String json = gson.toJson(target);\n    assertEquals(\"[10,13,14]\", json);\n  }",
        "begin_line": 84,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 85,col 82)",
            "(line 86,col 5)-(line 86,col 37)",
            "(line 87,col 5)-(line 87,col 36)",
            "(line 88,col 5)-(line 88,col 36)",
            "(line 89,col 5)-(line 89,col 36)",
            "(line 90,col 5)-(line 90,col 38)",
            "(line 91,col 5)-(line 91,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JavaUtilConcurrentAtomicTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java",
        "signature": "com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicLongArrayWithStringSerializationPolicy()",
        "snippet": "  public void testAtomicLongArrayWithStringSerializationPolicy() throws Exception {\n    Gson gson = new GsonBuilder()\n        .setLongSerializationPolicy(LongSerializationPolicy.STRING)\n        .create();\n    AtomicLongArray target = gson.fromJson(\"['10', '13', '14']\", AtomicLongArray.class);\n    assertEquals(3, target.length());\n    assertEquals(10, target.get(0));\n    assertEquals(13, target.get(1));\n    assertEquals(14, target.get(2));\n    String json = gson.toJson(target);\n    assertEquals(\"[\\\"10\\\",\\\"13\\\",\\\"14\\\"]\", json);\n  }",
        "begin_line": 94,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 95,col 5)-(line 97,col 18)",
            "(line 98,col 5)-(line 98,col 88)",
            "(line 99,col 5)-(line 99,col 37)",
            "(line 100,col 5)-(line 100,col 36)",
            "(line 101,col 5)-(line 101,col 36)",
            "(line 102,col 5)-(line 102,col 36)",
            "(line 103,col 5)-(line 103,col 38)",
            "(line 104,col 5)-(line 104,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeVariableTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
        "signature": "com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables()",
        "snippet": "  public void testAdvancedTypeVariables() throws Exception {\n    Gson gson = new Gson();\n    Bar bar1 = new Bar(\"someString\", 1, true);\n    ArrayList<Integer> arrayList = new ArrayList<Integer>();\n    arrayList.add(1);\n    arrayList.add(2);\n    arrayList.add(3);\n    bar1.map.put(\"key1\", arrayList);\n    bar1.map.put(\"key2\", new ArrayList<Integer>());\n    String json = gson.toJson(bar1);\n\n    Bar bar2 = gson.fromJson(json, Bar.class);\n    assertEquals(bar1, bar2);\n  }",
        "begin_line": 38,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 39,col 5)-(line 39,col 27)",
            "(line 40,col 5)-(line 40,col 46)",
            "(line 41,col 5)-(line 41,col 60)",
            "(line 42,col 5)-(line 42,col 21)",
            "(line 43,col 5)-(line 43,col 21)",
            "(line 44,col 5)-(line 44,col 21)",
            "(line 45,col 5)-(line 45,col 36)",
            "(line 46,col 5)-(line 46,col 51)",
            "(line 47,col 5)-(line 47,col 36)",
            "(line 49,col 5)-(line 49,col 46)",
            "(line 50,col 5)-(line 50,col 29)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeVariableTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
        "signature": "com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter()",
        "snippet": "  public void testTypeVariablesViaTypeParameter() throws Exception {\n    Gson gson = new Gson();\n    Foo<String, Integer> original = new Foo<String, Integer>(\"e\", 5, false);\n    original.map.put(\"f\", Arrays.asList(6, 7));\n    Type type = new TypeToken<Foo<String, Integer>>() {}.getType();\n    String json = gson.toJson(original, type);\n    assertEquals(\"{\\\"someSField\\\":\\\"e\\\",\\\"someTField\\\":5,\\\"map\\\":{\\\"f\\\":[6,7]},\\\"redField\\\":false}\",\n        json);\n    assertEquals(original, gson.<Foo<String, Integer>>fromJson(json, type));\n  }",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 27)",
            "(line 55,col 5)-(line 55,col 76)",
            "(line 56,col 5)-(line 56,col 47)",
            "(line 57,col 5)-(line 57,col 67)",
            "(line 58,col 5)-(line 58,col 46)",
            "(line 59,col 5)-(line 60,col 14)",
            "(line 61,col 5)-(line 61,col 76)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeVariableTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
        "signature": "com.google.gson.functional.TypeVariableTest.testBasicTypeVariables()",
        "snippet": "  public void testBasicTypeVariables() throws Exception {\n    Gson gson = new Gson();\n    Blue blue1 = new Blue(true);\n    String json = gson.toJson(blue1);\n\n    Blue blue2 = gson.fromJson(json, Blue.class);\n    assertEquals(blue1, blue2);\n  }",
        "begin_line": 64,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 65,col 5)-(line 65,col 27)",
            "(line 66,col 5)-(line 66,col 32)",
            "(line 67,col 5)-(line 67,col 37)",
            "(line 69,col 5)-(line 69,col 49)",
            "(line 70,col 5)-(line 70,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeVariableTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
        "signature": "com.google.gson.functional.TypeVariableTest.Blue.Blue()",
        "snippet": "    public Blue() {\n      super(false);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 7)-(line 75,col 19)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeVariableTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
        "signature": "com.google.gson.functional.TypeVariableTest.Blue.Blue(boolean)",
        "snippet": "    public Blue(boolean value) {\n      super(value);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 79,col 7)-(line 79,col 19)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeVariableTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
        "signature": "com.google.gson.functional.TypeVariableTest.Blue.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(Object o) {\n      if (!(o instanceof Blue)) {\n        return false;\n      }\n      Blue blue = (Blue) o;\n      return redField.equals(blue.redField);\n    }",
        "begin_line": 83,
        "end_line": 90,
        "comment": " Technically, we should implement hashcode too",
        "child_ranges": [
            "(line 85,col 7)-(line 87,col 7)",
            "(line 88,col 7)-(line 88,col 27)",
            "(line 89,col 7)-(line 89,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeVariableTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
        "signature": "com.google.gson.functional.TypeVariableTest.Red.Red()",
        "snippet": "    public Red() {}",
        "begin_line": 96,
        "end_line": 96,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.gson.functional.TypeVariableTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
        "signature": "com.google.gson.functional.TypeVariableTest.Red.Red(S)",
        "snippet": "    public Red(S redField) {\n      this.redField = redField;\n    }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 99,col 7)-(line 99,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeVariableTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
        "signature": "com.google.gson.functional.TypeVariableTest.Foo.Foo()",
        "snippet": "    public Foo() {}",
        "begin_line": 108,
        "end_line": 108,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.gson.functional.TypeVariableTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
        "signature": "com.google.gson.functional.TypeVariableTest.Foo.Foo(S, T, java.lang.Boolean)",
        "snippet": "    public Foo(S sValue, T tValue, Boolean redField) {\n      super(redField);\n      this.someSField = sValue;\n      this.someTField = tValue;\n    }",
        "begin_line": 110,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 111,col 7)-(line 111,col 22)",
            "(line 112,col 7)-(line 112,col 31)",
            "(line 113,col 7)-(line 113,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeVariableTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
        "signature": "com.google.gson.functional.TypeVariableTest.Foo.equals(java.lang.Object)",
        "snippet": "    @Override\n    @SuppressWarnings(\"unchecked\")\n    public boolean equals(Object o) {\n      if (!(o instanceof Foo<?, ?>)) {\n        return false;\n      }\n      Foo<S, T> realFoo = (Foo<S, T>) o;\n      return redField.equals(realFoo.redField)\n        && someTField.equals(realFoo.someTField)\n        && someSField.equals(realFoo.someSField)\n        && map.equals(realFoo.map);\n    }",
        "begin_line": 117,
        "end_line": 128,
        "comment": " Technically, we should implement hashcode too",
        "child_ranges": [
            "(line 120,col 7)-(line 122,col 7)",
            "(line 123,col 7)-(line 123,col 40)",
            "(line 124,col 7)-(line 127,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeVariableTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
        "signature": "com.google.gson.functional.TypeVariableTest.Bar.Bar()",
        "snippet": "    public Bar() {\n      this(\"\", 0, false);\n    }",
        "begin_line": 132,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 133,col 7)-(line 133,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeVariableTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
        "signature": "com.google.gson.functional.TypeVariableTest.Bar.Bar(java.lang.String, java.lang.Integer, boolean)",
        "snippet": "    public Bar(String s, Integer i, boolean b) {\n      super(s, i, b);\n    }",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 137,col 7)-(line 137,col 21)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming()",
        "snippet": "  public void testNonstreamingFollowedByNonstreaming() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(Foo.class, newSerializer(\"serializer 1\"))\n        .registerTypeAdapter(Foo.class, newSerializer(\"serializer 2\"))\n        .registerTypeAdapter(Foo.class, newDeserializer(\"deserializer 1\"))\n        .registerTypeAdapter(Foo.class, newDeserializer(\"deserializer 2\"))\n        .create();\n    assertEquals(\"\\\"foo via serializer 2\\\"\", gson.toJson(new Foo(\"foo\")));\n    assertEquals(\"foo via deserializer 2\", gson.fromJson(\"foo\", Foo.class).name);\n  }",
        "begin_line": 35,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 36,col 5)-(line 41,col 18)",
            "(line 42,col 5)-(line 42,col 74)",
            "(line 43,col 5)-(line 43,col 81)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming()",
        "snippet": "  public void testStreamingFollowedByStreaming() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(Foo.class, newTypeAdapter(\"type adapter 1\"))\n        .registerTypeAdapter(Foo.class, newTypeAdapter(\"type adapter 2\"))\n        .create();\n    assertEquals(\"\\\"foo via type adapter 2\\\"\", gson.toJson(new Foo(\"foo\")));\n    assertEquals(\"foo via type adapter 2\", gson.fromJson(\"foo\", Foo.class).name);\n  }",
        "begin_line": 46,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 50,col 18)",
            "(line 51,col 5)-(line 51,col 76)",
            "(line 52,col 5)-(line 52,col 81)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter()",
        "snippet": "  public void testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(Foo.class, newSerializer(\"serializer\"))\n        .registerTypeAdapter(Foo.class, newDeserializer(\"deserializer\"))\n        .registerTypeAdapter(Foo.class, newTypeAdapter(\"type adapter\"))\n        .create();\n    assertEquals(\"\\\"foo via type adapter\\\"\", gson.toJson(new Foo(\"foo\")));\n    assertEquals(\"foo via type adapter\", gson.fromJson(\"foo\", Foo.class).name);\n  }",
        "begin_line": 55,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 56,col 5)-(line 60,col 18)",
            "(line 61,col 5)-(line 61,col 74)",
            "(line 62,col 5)-(line 62,col 79)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming()",
        "snippet": "  public void testStreamingFollowedByNonstreaming() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(Foo.class, newTypeAdapter(\"type adapter\"))\n        .registerTypeAdapter(Foo.class, newSerializer(\"serializer\"))\n        .registerTypeAdapter(Foo.class, newDeserializer(\"deserializer\"))\n        .create();\n    assertEquals(\"\\\"foo via serializer\\\"\", gson.toJson(new Foo(\"foo\")));\n    assertEquals(\"foo via deserializer\", gson.fromJson(\"foo\", Foo.class).name);\n  }",
        "begin_line": 65,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 66,col 5)-(line 70,col 18)",
            "(line 71,col 5)-(line 71,col 72)",
            "(line 72,col 5)-(line 72,col 79)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming()",
        "snippet": "  public void testStreamingHierarchicalFollowedByNonstreaming() {\n    Gson gson = new GsonBuilder()\n        .registerTypeHierarchyAdapter(Foo.class, newTypeAdapter(\"type adapter\"))\n        .registerTypeAdapter(Foo.class, newSerializer(\"serializer\"))\n        .registerTypeAdapter(Foo.class, newDeserializer(\"deserializer\"))\n        .create();\n    assertEquals(\"\\\"foo via serializer\\\"\", gson.toJson(new Foo(\"foo\")));\n    assertEquals(\"foo via deserializer\", gson.fromJson(\"foo\", Foo.class).name);\n  }",
        "begin_line": 75,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 80,col 18)",
            "(line 81,col 5)-(line 81,col 72)",
            "(line 82,col 5)-(line 82,col 79)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical()",
        "snippet": "  public void testStreamingFollowedByNonstreamingHierarchical() {\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(Foo.class, newTypeAdapter(\"type adapter\"))\n        .registerTypeHierarchyAdapter(Foo.class, newSerializer(\"serializer\"))\n        .registerTypeHierarchyAdapter(Foo.class, newDeserializer(\"deserializer\"))\n        .create();\n    assertEquals(\"\\\"foo via type adapter\\\"\", gson.toJson(new Foo(\"foo\")));\n    assertEquals(\"foo via type adapter\", gson.fromJson(\"foo\", Foo.class).name);\n  }",
        "begin_line": 85,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 86,col 5)-(line 90,col 18)",
            "(line 91,col 5)-(line 91,col 74)",
            "(line 92,col 5)-(line 92,col 79)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical()",
        "snippet": "  public void testStreamingHierarchicalFollowedByNonstreamingHierarchical() {\n    Gson gson = new GsonBuilder()\n        .registerTypeHierarchyAdapter(Foo.class, newSerializer(\"serializer\"))\n        .registerTypeHierarchyAdapter(Foo.class, newDeserializer(\"deserializer\"))\n        .registerTypeHierarchyAdapter(Foo.class, newTypeAdapter(\"type adapter\"))\n        .create();\n    assertEquals(\"\\\"foo via type adapter\\\"\", gson.toJson(new Foo(\"foo\")));\n    assertEquals(\"foo via type adapter\", gson.fromJson(\"foo\", Foo.class).name);\n  }",
        "begin_line": 95,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 96,col 5)-(line 100,col 18)",
            "(line 101,col 5)-(line 101,col 74)",
            "(line 102,col 5)-(line 102,col 79)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming()",
        "snippet": "  public void testNonstreamingHierarchicalFollowedByNonstreaming() {\n    Gson gson = new GsonBuilder()\n        .registerTypeHierarchyAdapter(Foo.class, newSerializer(\"hierarchical\"))\n        .registerTypeHierarchyAdapter(Foo.class, newDeserializer(\"hierarchical\"))\n        .registerTypeAdapter(Foo.class, newSerializer(\"non hierarchical\"))\n        .registerTypeAdapter(Foo.class, newDeserializer(\"non hierarchical\"))\n        .create();\n    assertEquals(\"\\\"foo via non hierarchical\\\"\", gson.toJson(new Foo(\"foo\")));\n    assertEquals(\"foo via non hierarchical\", gson.fromJson(\"foo\", Foo.class).name);\n  }",
        "begin_line": 105,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 111,col 18)",
            "(line 112,col 5)-(line 112,col 78)",
            "(line 113,col 5)-(line 113,col 83)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.Foo.Foo(java.lang.String)",
        "snippet": "    private Foo(String name) {\n      this.name = name;\n    }",
        "begin_line": 118,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 7)-(line 119,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.newSerializer(java.lang.String)",
        "snippet": "  private JsonSerializer<Foo> newSerializer(final String name) {\n    return new JsonSerializer<Foo>() {\n      @Override\n      public JsonElement serialize(Foo src, Type typeOfSrc, JsonSerializationContext context) {\n        return new JsonPrimitive(src.name + \" via \" + name);\n      }\n    };\n  }",
        "begin_line": 123,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 124,col 5)-(line 129,col 6)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.Anonymous-54857708-eca2-4a5d-ac96-e096c65b54ef.serialize(com.google.gson.functional.TypeAdapterPrecedenceTest.Foo, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "      @Override\n      public JsonElement serialize(Foo src, Type typeOfSrc, JsonSerializationContext context) {\n        return new JsonPrimitive(src.name + \" via \" + name);\n      }",
        "begin_line": 125,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.newDeserializer(java.lang.String)",
        "snippet": "  private JsonDeserializer<Foo> newDeserializer(final String name) {\n    return new JsonDeserializer<Foo>() {\n      @Override\n      public Foo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {\n        return new Foo(json.getAsString() + \" via \" + name);\n      }\n    };\n  }",
        "begin_line": 132,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 133,col 5)-(line 138,col 6)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.Anonymous-4fd287aa-a356-4eaf-b8e3-01e2cc783d2e.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "      @Override\n      public Foo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {\n        return new Foo(json.getAsString() + \" via \" + name);\n      }",
        "begin_line": 134,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.newTypeAdapter(java.lang.String)",
        "snippet": "  private TypeAdapter<Foo> newTypeAdapter(final String name) {\n    return new TypeAdapter<Foo>() {\n      @Override public Foo read(JsonReader in) throws IOException {\n        return new Foo(in.nextString() + \" via \" + name);\n      }\n      @Override public void write(JsonWriter out, Foo value) throws IOException {\n        out.value(value.name + \" via \" + name);\n      }\n    };\n  }",
        "begin_line": 141,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 142,col 5)-(line 149,col 6)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.Anonymous-ef7e1abd-5068-4ecb-9f7c-5c40dca49c47.read(com.google.gson.stream.JsonReader)",
        "snippet": "      @Override public Foo read(JsonReader in) throws IOException {\n        return new Foo(in.nextString() + \" via \" + name);\n      }",
        "begin_line": 143,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TypeAdapterPrecedenceTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
        "signature": "com.google.gson.functional.TypeAdapterPrecedenceTest.Anonymous-1f4fc821-0322-440d-bbd5-e93edfce9a61.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.TypeAdapterPrecedenceTest.Foo)",
        "snippet": "      @Override public void write(JsonWriter out, Foo value) throws IOException {\n        out.value(value.name + \" via \" + name);\n      }",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 18)",
            "(line 53,col 5)-(line 53,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.testTopLevelEnumSerialization()",
        "snippet": "  public void testTopLevelEnumSerialization() throws Exception {\n    String result = gson.toJson(MyEnum.VALUE1);\n    assertEquals('\"' + MyEnum.VALUE1.toString() + '\"', result);\n  }",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 57,col 47)",
            "(line 58,col 5)-(line 58,col 63)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization()",
        "snippet": "  public void testTopLevelEnumDeserialization() throws Exception {\n    MyEnum result = gson.fromJson('\"' + MyEnum.VALUE1.toString() + '\"', MyEnum.class);\n    assertEquals(MyEnum.VALUE1, result);\n  }",
        "begin_line": 61,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 86)",
            "(line 63,col 5)-(line 63,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization()",
        "snippet": "  public void testCollectionOfEnumsSerialization() {\n    Type type = new TypeToken<Collection<MyEnum>>() {}.getType();\n    Collection<MyEnum> target = new ArrayList<MyEnum>();\n    target.add(MyEnum.VALUE1);\n    target.add(MyEnum.VALUE2);\n    String expectedJson = \"[\\\"VALUE1\\\",\\\"VALUE2\\\"]\";\n    String actualJson = gson.toJson(target);\n    assertEquals(expectedJson, actualJson);\n    actualJson = gson.toJson(target, type);\n    assertEquals(expectedJson, actualJson);\n  }",
        "begin_line": 66,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 65)",
            "(line 68,col 5)-(line 68,col 56)",
            "(line 69,col 5)-(line 69,col 30)",
            "(line 70,col 5)-(line 70,col 30)",
            "(line 71,col 5)-(line 71,col 52)",
            "(line 72,col 5)-(line 72,col 44)",
            "(line 73,col 5)-(line 73,col 43)",
            "(line 74,col 5)-(line 74,col 43)",
            "(line 75,col 5)-(line 75,col 43)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization()",
        "snippet": "  public void testCollectionOfEnumsDeserialization() {\n    Type type = new TypeToken<Collection<MyEnum>>() {}.getType();\n    String json = \"[\\\"VALUE1\\\",\\\"VALUE2\\\"]\";\n    Collection<MyEnum> target = gson.fromJson(json, type);\n    MoreAsserts.assertContains(target, MyEnum.VALUE1);\n    MoreAsserts.assertContains(target, MyEnum.VALUE2);\n  }",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 79,col 5)-(line 79,col 65)",
            "(line 80,col 5)-(line 80,col 44)",
            "(line 81,col 5)-(line 81,col 58)",
            "(line 82,col 5)-(line 82,col 54)",
            "(line 83,col 5)-(line 83,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization()",
        "snippet": "  public void testClassWithEnumFieldSerialization() throws Exception {\n    ClassWithEnumFields target = new ClassWithEnumFields();\n    assertEquals(target.getExpectedJson(), gson.toJson(target));\n  }",
        "begin_line": 86,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 87,col 5)-(line 87,col 59)",
            "(line 88,col 5)-(line 88,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization()",
        "snippet": "  public void testClassWithEnumFieldDeserialization() throws Exception {\n    String json = \"{value1:'VALUE1',value2:'VALUE2'}\";\n    ClassWithEnumFields target = gson.fromJson(json, ClassWithEnumFields.class);\n    assertEquals(MyEnum.VALUE1,target.value1);\n    assertEquals(MyEnum.VALUE2,target.value2);\n  }",
        "begin_line": 91,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 92,col 54)",
            "(line 93,col 5)-(line 93,col 80)",
            "(line 94,col 5)-(line 94,col 46)",
            "(line 95,col 5)-(line 95,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.ClassWithEnumFields.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      return \"{\\\"value1\\\":\\\"\" + value1 + \"\\\",\\\"value2\\\":\\\"\" + value2 + \"\\\"}\";\n    }",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 106,col 7)-(line 106,col 77)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.testEnumSubclass()",
        "snippet": "  public void testEnumSubclass() {\n    assertFalse(Roshambo.class == Roshambo.ROCK.getClass());\n    assertEquals(\"\\\"ROCK\\\"\", gson.toJson(Roshambo.ROCK));\n    assertEquals(\"[\\\"ROCK\\\",\\\"PAPER\\\",\\\"SCISSORS\\\"]\", gson.toJson(EnumSet.allOf(Roshambo.class)));\n    assertEquals(Roshambo.ROCK, gson.fromJson(\"\\\"ROCK\\\"\", Roshambo.class));\n    assertEquals(EnumSet.allOf(Roshambo.class),\n        gson.fromJson(\"[\\\"ROCK\\\",\\\"PAPER\\\",\\\"SCISSORS\\\"]\", new TypeToken<Set<Roshambo>>() {}.getType()));\n  }",
        "begin_line": 113,
        "end_line": 120,
        "comment": "\n   * Test for issue 226.\n   ",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 60)",
            "(line 115,col 5)-(line 115,col 57)",
            "(line 116,col 5)-(line 116,col 98)",
            "(line 117,col 5)-(line 117,col 75)",
            "(line 118,col 5)-(line 119,col 105)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter()",
        "snippet": "  public void testEnumSubclassWithRegisteredTypeAdapter() {\n    gson = new GsonBuilder()\n        .registerTypeHierarchyAdapter(Roshambo.class, new MyEnumTypeAdapter())\n        .create();\n    assertFalse(Roshambo.class == Roshambo.ROCK.getClass());\n    assertEquals(\"\\\"123ROCK\\\"\", gson.toJson(Roshambo.ROCK));\n    assertEquals(\"[\\\"123ROCK\\\",\\\"123PAPER\\\",\\\"123SCISSORS\\\"]\", gson.toJson(EnumSet.allOf(Roshambo.class)));\n    assertEquals(Roshambo.ROCK, gson.fromJson(\"\\\"123ROCK\\\"\", Roshambo.class));\n    assertEquals(EnumSet.allOf(Roshambo.class),\n        gson.fromJson(\"[\\\"123ROCK\\\",\\\"123PAPER\\\",\\\"123SCISSORS\\\"]\", new TypeToken<Set<Roshambo>>() {}.getType()));\n  }",
        "begin_line": 122,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 123,col 5)-(line 125,col 18)",
            "(line 126,col 5)-(line 126,col 60)",
            "(line 127,col 5)-(line 127,col 60)",
            "(line 128,col 5)-(line 128,col 107)",
            "(line 129,col 5)-(line 129,col 78)",
            "(line 130,col 5)-(line 131,col 114)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType()",
        "snippet": "  public void testEnumSubclassAsParameterizedType() {\n    Collection<Roshambo> list = new ArrayList<Roshambo>();\n    list.add(Roshambo.ROCK);\n    list.add(Roshambo.PAPER);\n\n    String json = gson.toJson(list);\n    assertEquals(\"[\\\"ROCK\\\",\\\"PAPER\\\"]\", json);\n\n    Type collectionType = new TypeToken<Collection<Roshambo>>() {}.getType();\n    Collection<Roshambo> actualJsonList = gson.fromJson(json, collectionType);\n    MoreAsserts.assertContains(actualJsonList, Roshambo.ROCK);\n    MoreAsserts.assertContains(actualJsonList, Roshambo.PAPER);\n  }",
        "begin_line": 134,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 135,col 5)-(line 135,col 58)",
            "(line 136,col 5)-(line 136,col 28)",
            "(line 137,col 5)-(line 137,col 29)",
            "(line 139,col 5)-(line 139,col 36)",
            "(line 140,col 5)-(line 140,col 47)",
            "(line 142,col 5)-(line 142,col 77)",
            "(line 143,col 5)-(line 143,col 78)",
            "(line 144,col 5)-(line 144,col 62)",
            "(line 145,col 5)-(line 145,col 63)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.testEnumCaseMapping()",
        "snippet": "  public void testEnumCaseMapping() {\n    assertEquals(Gender.MALE, gson.fromJson(\"\\\"boy\\\"\", Gender.class));\n    assertEquals(\"\\\"boy\\\"\", gson.toJson(Gender.MALE, Gender.class));\n  }",
        "begin_line": 148,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 70)",
            "(line 150,col 5)-(line 150,col 68)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.testEnumSet()",
        "snippet": "  public void testEnumSet() {\n    EnumSet<Roshambo> foo = EnumSet.of(Roshambo.ROCK, Roshambo.PAPER);\n    String json = gson.toJson(foo);\n    Type type = new TypeToken<EnumSet<Roshambo>>() {}.getType();\n    EnumSet<Roshambo> bar = gson.fromJson(json, type);\n    assertTrue(bar.contains(Roshambo.ROCK));\n    assertTrue(bar.contains(Roshambo.PAPER));\n    assertFalse(bar.contains(Roshambo.SCISSORS));\n  }",
        "begin_line": 153,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 154,col 5)-(line 154,col 70)",
            "(line 155,col 5)-(line 155,col 35)",
            "(line 156,col 5)-(line 156,col 64)",
            "(line 157,col 5)-(line 157,col 54)",
            "(line 158,col 5)-(line 158,col 44)",
            "(line 159,col 5)-(line 159,col 45)",
            "(line 160,col 5)-(line 160,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.Roshambo.defeats()",
        "snippet": "      @Override Roshambo defeats() {\n        return SCISSORS;\n      }",
        "begin_line": 165,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 24)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.Roshambo.defeats()",
        "snippet": "      @Override Roshambo defeats() {\n        return ROCK;\n      }",
        "begin_line": 170,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 20)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.Roshambo.defeats()",
        "snippet": "      @Override Roshambo defeats() {\n        return PAPER;\n      }",
        "begin_line": 175,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 21)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.Roshambo.defeats()",
        "snippet": "    abstract Roshambo defeats();",
        "begin_line": 180,
        "end_line": 180,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.MyEnumTypeAdapter.serialize(com.google.gson.functional.EnumTest.Roshambo, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "    @Override public JsonElement serialize(Roshambo src, Type typeOfSrc, JsonSerializationContext context) {\n      return new JsonPrimitive(\"123\" + src.name());\n    }",
        "begin_line": 185,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 186,col 7)-(line 186,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EnumTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
        "signature": "com.google.gson.functional.EnumTest.MyEnumTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "    @Override public Roshambo deserialize(JsonElement json, Type classOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      return Roshambo.valueOf(json.getAsString().substring(3));\n    }",
        "begin_line": 189,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 191,col 7)-(line 191,col 63)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.FieldExclusionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java",
        "signature": "com.google.gson.functional.FieldExclusionTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    outer = new Outer();\n  }",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 18)",
            "(line 39,col 5)-(line 39,col 24)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.FieldExclusionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java",
        "signature": "com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion()",
        "snippet": "  public void testDefaultInnerClassExclusion() throws Exception {\n    Gson gson = new Gson();\n    Outer.Inner target = outer.new Inner(VALUE);\n    String result = gson.toJson(target);\n    assertEquals(target.toJson(), result);\n\n    gson = new GsonBuilder().create();\n    target = outer.new Inner(VALUE);\n    result = gson.toJson(target);\n    assertEquals(target.toJson(), result);\n  }",
        "begin_line": 42,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 27)",
            "(line 44,col 5)-(line 44,col 48)",
            "(line 45,col 5)-(line 45,col 40)",
            "(line 46,col 5)-(line 46,col 42)",
            "(line 48,col 5)-(line 48,col 38)",
            "(line 49,col 5)-(line 49,col 36)",
            "(line 50,col 5)-(line 50,col 33)",
            "(line 51,col 5)-(line 51,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.FieldExclusionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java",
        "signature": "com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion()",
        "snippet": "  public void testInnerClassExclusion() throws Exception {\n    Gson gson = new GsonBuilder().disableInnerClassSerialization().create();\n    Outer.Inner target = outer.new Inner(VALUE);\n    String result = gson.toJson(target);\n    assertEquals(\"null\", result);\n  }",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 55,col 76)",
            "(line 56,col 5)-(line 56,col 48)",
            "(line 57,col 5)-(line 57,col 40)",
            "(line 58,col 5)-(line 58,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.FieldExclusionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java",
        "signature": "com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded()",
        "snippet": "  public void testDefaultNestedStaticClassIncluded() throws Exception {\n    Gson gson = new Gson();\n    Outer.Inner target = outer.new Inner(VALUE);\n    String result = gson.toJson(target);\n    assertEquals(target.toJson(), result);\n\n    gson = new GsonBuilder().create();\n    target = outer.new Inner(VALUE);\n    result = gson.toJson(target);\n    assertEquals(target.toJson(), result);\n  }",
        "begin_line": 61,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 27)",
            "(line 63,col 5)-(line 63,col 48)",
            "(line 64,col 5)-(line 64,col 40)",
            "(line 65,col 5)-(line 65,col 42)",
            "(line 67,col 5)-(line 67,col 38)",
            "(line 68,col 5)-(line 68,col 36)",
            "(line 69,col 5)-(line 69,col 33)",
            "(line 70,col 5)-(line 70,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.FieldExclusionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java",
        "signature": "com.google.gson.functional.FieldExclusionTest.Outer.Inner.Inner(java.lang.String)",
        "snippet": "      public Inner(String value) {\n        super(value);\n      }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 21)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.FieldExclusionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java",
        "signature": "com.google.gson.functional.FieldExclusionTest.NestedClass.NestedClass(java.lang.String)",
        "snippet": "    public NestedClass(String value) {\n      this.value = value;\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 7)-(line 85,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.FieldExclusionTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java",
        "signature": "com.google.gson.functional.FieldExclusionTest.NestedClass.toJson()",
        "snippet": "    public String toJson() {\n      return \"{\\\"value\\\":\\\"\" + value + \"\\\"}\";\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 89,col 7)-(line 89,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonTreeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonTreeTest.java",
        "signature": "com.google.gson.functional.JsonTreeTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 23,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 25,col 5)-(line 25,col 18)",
            "(line 26,col 5)-(line 26,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonTreeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonTreeTest.java",
        "signature": "com.google.gson.functional.JsonTreeTest.testToJsonTree()",
        "snippet": "  public void testToJsonTree() {\n    BagOfPrimitives bag = new BagOfPrimitives(10L, 5, false, \"foo\");\n    JsonElement json = gson.toJsonTree(bag);\n    assertTrue(json.isJsonObject());\n    JsonObject obj = json.getAsJsonObject();\n    Set<Entry<String, JsonElement>> children = obj.entrySet();\n    assertEquals(4, children.size());\n    assertContains(obj, new JsonPrimitive(10L));\n    assertContains(obj, new JsonPrimitive(5));\n    assertContains(obj, new JsonPrimitive(false));\n    assertContains(obj, new JsonPrimitive(\"foo\"));\n  }",
        "begin_line": 29,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 30,col 5)-(line 30,col 68)",
            "(line 31,col 5)-(line 31,col 44)",
            "(line 32,col 5)-(line 32,col 36)",
            "(line 33,col 5)-(line 33,col 44)",
            "(line 34,col 5)-(line 34,col 62)",
            "(line 35,col 5)-(line 35,col 37)",
            "(line 36,col 5)-(line 36,col 48)",
            "(line 37,col 5)-(line 37,col 46)",
            "(line 38,col 5)-(line 38,col 50)",
            "(line 39,col 5)-(line 39,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonTreeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonTreeTest.java",
        "signature": "com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType()",
        "snippet": "  public void testToJsonTreeObjectType() {\n    SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, \"foo\", 1.4F);\n    JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class);\n    assertTrue(json.isJsonObject());\n    JsonObject obj = json.getAsJsonObject();\n    Set<Entry<String, JsonElement>> children = obj.entrySet();\n    assertEquals(4, children.size());\n    assertContains(obj, new JsonPrimitive(10L));\n    assertContains(obj, new JsonPrimitive(5));\n    assertContains(obj, new JsonPrimitive(false));\n    assertContains(obj, new JsonPrimitive(\"foo\"));\n  }",
        "begin_line": 42,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 92)",
            "(line 44,col 5)-(line 44,col 67)",
            "(line 45,col 5)-(line 45,col 36)",
            "(line 46,col 5)-(line 46,col 44)",
            "(line 47,col 5)-(line 47,col 62)",
            "(line 48,col 5)-(line 48,col 37)",
            "(line 49,col 5)-(line 49,col 48)",
            "(line 50,col 5)-(line 50,col 46)",
            "(line 51,col 5)-(line 51,col 50)",
            "(line 52,col 5)-(line 52,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonTreeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonTreeTest.java",
        "signature": "com.google.gson.functional.JsonTreeTest.testJsonTreeToString()",
        "snippet": "  public void testJsonTreeToString() {\n    SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, \"foo\", 1.4F);\n    String json1 = gson.toJson(bag);\n    JsonElement jsonElement = gson.toJsonTree(bag, SubTypeOfBagOfPrimitives.class);\n    String json2 = gson.toJson(jsonElement);\n    assertEquals(json1, json2);\n  }",
        "begin_line": 55,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 56,col 5)-(line 56,col 92)",
            "(line 57,col 5)-(line 57,col 36)",
            "(line 58,col 5)-(line 58,col 83)",
            "(line 59,col 5)-(line 59,col 44)",
            "(line 60,col 5)-(line 60,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonTreeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonTreeTest.java",
        "signature": "com.google.gson.functional.JsonTreeTest.testJsonTreeNull()",
        "snippet": "  public void testJsonTreeNull() {\n    BagOfPrimitives bag = new BagOfPrimitives(10L, 5, false, null);\n    JsonObject jsonElement = (JsonObject) gson.toJsonTree(bag, BagOfPrimitives.class);\n    assertFalse(jsonElement.has(\"stringValue\"));\n  }",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 64,col 67)",
            "(line 65,col 5)-(line 65,col 86)",
            "(line 66,col 5)-(line 66,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonTreeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonTreeTest.java",
        "signature": "com.google.gson.functional.JsonTreeTest.assertContains(com.google.gson.JsonObject, com.google.gson.JsonPrimitive)",
        "snippet": "  private void assertContains(JsonObject json, JsonPrimitive child) {\n    for (Map.Entry<String, JsonElement> entry : json.entrySet()) {\n      JsonElement node = entry.getValue();\n      if (node.isJsonPrimitive()) {\n        if (node.getAsJsonPrimitive().equals(child)) {\n          return;\n        }\n      }\n    }\n    fail();\n  }",
        "begin_line": 69,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 70,col 5)-(line 77,col 5)",
            "(line 78,col 5)-(line 78,col 11)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonTreeTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonTreeTest.java",
        "signature": "com.google.gson.functional.JsonTreeTest.SubTypeOfBagOfPrimitives.SubTypeOfBagOfPrimitives(long, int, boolean, java.lang.String, float)",
        "snippet": "    public SubTypeOfBagOfPrimitives(long l, int i, boolean b, String string, float f) {\n      super(l, i, b, string);\n      this.f = f;\n    }",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 85,col 7)-(line 85,col 29)",
            "(line 86,col 7)-(line 86,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java",
        "signature": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed()",
        "snippet": "  public void testSubclassesAutomaticallySerialzed() throws Exception {\n    Shape shape = new Circle(25);\n    String json = gson.toJson(shape);\n    shape = gson.fromJson(json, Shape.class);\n    assertEquals(25, ((Circle)shape).radius);\n\n    shape = new Square(15);\n    json = gson.toJson(shape);\n    shape = gson.fromJson(json, Shape.class);\n    assertEquals(15, ((Square)shape).side);\n    assertEquals(ShapeType.SQUARE, shape.type);\n  }",
        "begin_line": 48,
        "end_line": 59,
        "comment": "\n   * This test also ensures that {@link TypeAdapterFactory} registered through {@link JsonAdapter}\n   * work correctly for {@link Gson#getDelegateAdapter(TypeAdapterFactory, TypeToken)}.\n   ",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 33)",
            "(line 50,col 5)-(line 50,col 37)",
            "(line 51,col 5)-(line 51,col 45)",
            "(line 52,col 5)-(line 52,col 45)",
            "(line 54,col 5)-(line 54,col 27)",
            "(line 55,col 5)-(line 55,col 30)",
            "(line 56,col 5)-(line 56,col 45)",
            "(line 57,col 5)-(line 57,col 43)",
            "(line 58,col 5)-(line 58,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java",
        "signature": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.Shape(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.ShapeType)",
        "snippet": "    Shape(ShapeType type) { this.type = type; }",
        "begin_line": 64,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 64,col 29)-(line 64,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java",
        "signature": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.JsonAdapterFactory()",
        "snippet": "      public JsonAdapterFactory() {\n        super(Shape.class, \"type\");\n        registerSubtype(Circle.class, ShapeType.CIRCLE.toString());\n        registerSubtype(Square.class, ShapeType.SQUARE.toString());\n      }",
        "begin_line": 66,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 35)",
            "(line 68,col 9)-(line 68,col 67)",
            "(line 69,col 9)-(line 69,col 67)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java",
        "signature": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Circle.Circle(int)",
        "snippet": "    Circle(int radius) { super(ShapeType.CIRCLE); this.radius = radius; }",
        "begin_line": 80,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 80,col 26)-(line 80,col 49)",
            "(line 80,col 51)-(line 80,col 71)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java",
        "signature": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Square.Square(int)",
        "snippet": "    Square(int side) { super(ShapeType.SQUARE); this.side = side; }",
        "begin_line": 85,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 85,col 24)-(line 85,col 47)",
            "(line 85,col 49)-(line 85,col 65)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java",
        "signature": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.RuntimeTypeAdapterFactory.RuntimeTypeAdapterFactory(java.lang.Class<?>, java.lang.String)",
        "snippet": "    protected RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {\n      if (typeFieldName == null || baseType == null) {\n        throw new NullPointerException();\n      }\n      this.baseType = baseType;\n      this.typeFieldName = typeFieldName;\n    }",
        "begin_line": 95,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 96,col 7)-(line 98,col 7)",
            "(line 99,col 7)-(line 99,col 31)",
            "(line 100,col 7)-(line 100,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java",
        "signature": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.RuntimeTypeAdapterFactory.of(java.lang.Class<T>, java.lang.String)",
        "snippet": "    public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType, String typeFieldName) {\n      return new RuntimeTypeAdapterFactory<T>(baseType, typeFieldName);\n    }",
        "begin_line": 107,
        "end_line": 109,
        "comment": "\n     * Creates a new runtime type adapter using for {@code baseType} using {@code\n     * typeFieldName} as the type field name. Type field names are case sensitive.\n     ",
        "child_ranges": [
            "(line 108,col 7)-(line 108,col 71)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java",
        "signature": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.RuntimeTypeAdapterFactory.of(java.lang.Class<T>)",
        "snippet": "    public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType) {\n      return new RuntimeTypeAdapterFactory<T>(baseType, \"type\");\n    }",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\n     * Creates a new runtime type adapter for {@code baseType} using {@code \"type\"} as\n     * the type field name.\n     ",
        "child_ranges": [
            "(line 116,col 7)-(line 116,col 64)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java",
        "signature": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class<? extends T>, java.lang.String)",
        "snippet": "    public RuntimeTypeAdapterFactory<T> registerSubtype(Class<? extends T> type, String label) {\n      if (type == null || label == null) {\n        throw new NullPointerException();\n      }\n      if (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {\n        throw new IllegalArgumentException(\"types and labels must be unique\");\n      }\n      labelToSubtype.put(label, type);\n      subtypeToLabel.put(type, label);\n      return this;\n    }",
        "begin_line": 126,
        "end_line": 136,
        "comment": "\n     * Registers {@code type} identified by {@code label}. Labels are case\n     * sensitive.\n     *\n     * @throws IllegalArgumentException if either {@code type} or {@code label}\n     *     have already been registered on this type adapter.\n     ",
        "child_ranges": [
            "(line 127,col 7)-(line 129,col 7)",
            "(line 130,col 7)-(line 132,col 7)",
            "(line 133,col 7)-(line 133,col 38)",
            "(line 134,col 7)-(line 134,col 38)",
            "(line 135,col 7)-(line 135,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java",
        "signature": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class<? extends T>)",
        "snippet": "    public RuntimeTypeAdapterFactory<T> registerSubtype(Class<? extends T> type) {\n      return registerSubtype(type, type.getSimpleName());\n    }",
        "begin_line": 145,
        "end_line": 147,
        "comment": "\n     * Registers {@code type} identified by its {@link Class#getSimpleName simple\n     * name}. Labels are case sensitive.\n     *\n     * @throws IllegalArgumentException if either {@code type} or its simple name\n     *     have already been registered on this type adapter.\n     ",
        "child_ranges": [
            "(line 146,col 7)-(line 146,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java",
        "signature": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.RuntimeTypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken<R>)",
        "snippet": "    @Override public <R> TypeAdapter<R> create(Gson gson, TypeToken<R> type) {\n      if (type.getRawType() != baseType) {\n        return null;\n      }\n\n      final Map<String, TypeAdapter<?>> labelToDelegate\n          = new LinkedHashMap<String, TypeAdapter<?>>();\n      final Map<Class<?>, TypeAdapter<?>> subtypeToDelegate\n          = new LinkedHashMap<Class<?>, TypeAdapter<?>>();\n      for (Map.Entry<String, Class<?>> entry : labelToSubtype.entrySet()) {\n        TypeAdapter<?> delegate = gson.getDelegateAdapter(this, TypeToken.get(entry.getValue()));\n        labelToDelegate.put(entry.getKey(), delegate);\n        subtypeToDelegate.put(entry.getValue(), delegate);\n      }\n\n      return new TypeAdapter<R>() {\n        @Override public R read(JsonReader in) throws IOException {\n          JsonElement jsonElement = Streams.parse(in);\n          JsonElement labelJsonElement = jsonElement.getAsJsonObject().get(typeFieldName);\n          if (labelJsonElement == null) {\n            throw new JsonParseException(\"cannot deserialize \" + baseType\n                + \" because it does not define a field named \" + typeFieldName);\n          }\n          String label = labelJsonElement.getAsString();\n          @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T\n          TypeAdapter<R> delegate = (TypeAdapter<R>) labelToDelegate.get(label);\n          if (delegate == null) {\n            throw new JsonParseException(\"cannot deserialize \" + baseType + \" subtype named \"\n                + label + \"; did you forget to register a subtype?\");\n          }\n          return delegate.fromJsonTree(jsonElement);\n        }\n\n        @Override public void write(JsonWriter out, R value) throws IOException {\n          Class<?> srcType = value.getClass();\n          String label = subtypeToLabel.get(srcType);\n          @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T\n          TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\n          if (delegate == null) {\n            throw new JsonParseException(\"cannot serialize \" + srcType.getName()\n                + \"; did you forget to register a subtype?\");\n          }\n          JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\n          if (!jsonObject.has(typeFieldName)) {\n            JsonObject clone = new JsonObject();\n            clone.add(typeFieldName, new JsonPrimitive(label));\n            for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\n              clone.add(e.getKey(), e.getValue());\n            }\n            jsonObject = clone;\n          }\n          Streams.write(jsonObject, out);\n        }\n      };\n    }",
        "begin_line": 149,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 150,col 7)-(line 152,col 7)",
            "(line 154,col 7)-(line 155,col 56)",
            "(line 156,col 7)-(line 157,col 58)",
            "(line 158,col 7)-(line 162,col 7)",
            "(line 164,col 7)-(line 202,col 8)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java",
        "signature": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.RuntimeTypeAdapterFactory.Anonymous-6b7c6d7f-9a14-4558-ae7d-592e1ea96da5.read(com.google.gson.stream.JsonReader)",
        "snippet": "        @Override public R read(JsonReader in) throws IOException {\n          JsonElement jsonElement = Streams.parse(in);\n          JsonElement labelJsonElement = jsonElement.getAsJsonObject().get(typeFieldName);\n          if (labelJsonElement == null) {\n            throw new JsonParseException(\"cannot deserialize \" + baseType\n                + \" because it does not define a field named \" + typeFieldName);\n          }\n          String label = labelJsonElement.getAsString();\n          @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T\n          TypeAdapter<R> delegate = (TypeAdapter<R>) labelToDelegate.get(label);\n          if (delegate == null) {\n            throw new JsonParseException(\"cannot deserialize \" + baseType + \" subtype named \"\n                + label + \"; did you forget to register a subtype?\");\n          }\n          return delegate.fromJsonTree(jsonElement);\n        }",
        "begin_line": 165,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 166,col 11)-(line 166,col 54)",
            "(line 167,col 11)-(line 167,col 90)",
            "(line 168,col 11)-(line 171,col 11)",
            "(line 172,col 11)-(line 172,col 56)",
            "(line 173,col 11)-(line 174,col 80)",
            "(line 175,col 11)-(line 178,col 11)",
            "(line 179,col 11)-(line 179,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java",
        "signature": "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.RuntimeTypeAdapterFactory.Anonymous-a7204f6d-07ae-4f0b-b650-501569675f31.write(com.google.gson.stream.JsonWriter, R)",
        "snippet": "        @Override public void write(JsonWriter out, R value) throws IOException {\n          Class<?> srcType = value.getClass();\n          String label = subtypeToLabel.get(srcType);\n          @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T\n          TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\n          if (delegate == null) {\n            throw new JsonParseException(\"cannot serialize \" + srcType.getName()\n                + \"; did you forget to register a subtype?\");\n          }\n          JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\n          if (!jsonObject.has(typeFieldName)) {\n            JsonObject clone = new JsonObject();\n            clone.add(typeFieldName, new JsonPrimitive(label));\n            for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\n              clone.add(e.getKey(), e.getValue());\n            }\n            jsonObject = clone;\n          }\n          Streams.write(jsonObject, out);\n        }",
        "begin_line": 182,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 183,col 11)-(line 183,col 46)",
            "(line 184,col 11)-(line 184,col 53)",
            "(line 185,col 11)-(line 186,col 84)",
            "(line 187,col 11)-(line 190,col 11)",
            "(line 191,col 11)-(line 191,col 79)",
            "(line 192,col 11)-(line 199,col 11)",
            "(line 200,col 11)-(line 200,col 41)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked()",
        "snippet": "  public void testJsonAdapterInvoked() {\n    Gson gson = new Gson();\n    String json = gson.toJson(new A(\"bar\"));\n    assertEquals(\"\\\"jsonAdapter\\\"\", json);\n\n   // Also invoke the JsonAdapter javadoc sample\n    json = gson.toJson(new User(\"Inderjeet\", \"Singh\"));\n    assertEquals(\"{\\\"name\\\":\\\"Inderjeet Singh\\\"}\", json);\n    User user = gson.fromJson(\"{'name':'Joel Leitch'}\", User.class);\n    assertEquals(\"Joel\", user.firstName);\n    assertEquals(\"Leitch\", user.lastName);\n\n    json = gson.toJson(Foo.BAR);\n    assertEquals(\"\\\"bar\\\"\", json);\n    Foo baz = gson.fromJson(\"\\\"baz\\\"\", Foo.class);\n    assertEquals(Foo.BAZ, baz);\n  }",
        "begin_line": 44,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 45,col 5)-(line 45,col 27)",
            "(line 46,col 5)-(line 46,col 44)",
            "(line 47,col 5)-(line 47,col 42)",
            "(line 50,col 5)-(line 50,col 55)",
            "(line 51,col 5)-(line 51,col 57)",
            "(line 52,col 5)-(line 52,col 68)",
            "(line 53,col 5)-(line 53,col 41)",
            "(line 54,col 5)-(line 54,col 42)",
            "(line 56,col 5)-(line 56,col 32)",
            "(line 57,col 5)-(line 57,col 34)",
            "(line 58,col 5)-(line 58,col 50)",
            "(line 59,col 5)-(line 59,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked()",
        "snippet": "  public void testJsonAdapterFactoryInvoked() {\n    Gson gson = new Gson();\n    String json = gson.toJson(new C(\"bar\"));\n    assertEquals(\"\\\"jsonAdapterFactory\\\"\", json);\n    C c = gson.fromJson(\"\\\"bar\\\"\", C.class);\n    assertEquals(\"jsonAdapterFactory\", c.value);\n  }",
        "begin_line": 62,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 63,col 5)-(line 63,col 27)",
            "(line 64,col 5)-(line 64,col 44)",
            "(line 65,col 5)-(line 65,col 49)",
            "(line 66,col 5)-(line 66,col 44)",
            "(line 67,col 5)-(line 67,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter()",
        "snippet": "  public void testRegisteredAdapterOverridesJsonAdapter() {\n    TypeAdapter<A> typeAdapter = new TypeAdapter<A>() {\n      @Override public void write(JsonWriter out, A value) throws IOException {\n        out.value(\"registeredAdapter\");\n      }\n      @Override public A read(JsonReader in) throws IOException {\n        return new A(in.nextString());\n      }\n    };\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(A.class, typeAdapter)\n      .create();\n    String json = gson.toJson(new A(\"abcd\"));\n    assertEquals(\"\\\"registeredAdapter\\\"\", json);\n  }",
        "begin_line": 70,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 71,col 5)-(line 78,col 6)",
            "(line 79,col 5)-(line 81,col 16)",
            "(line 82,col 5)-(line 82,col 45)",
            "(line 83,col 5)-(line 83,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.Anonymous-470a76be-a75d-42cb-8e33-4d0703c4f23a.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A)",
        "snippet": "      @Override public void write(JsonWriter out, A value) throws IOException {\n        out.value(\"registeredAdapter\");\n      }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.Anonymous-d417c05c-157e-450e-9ead-05c983ac9a8e.read(com.google.gson.stream.JsonReader)",
        "snippet": "      @Override public A read(JsonReader in) throws IOException {\n        return new A(in.nextString());\n      }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter()",
        "snippet": "  public void testRegisteredSerializerOverridesJsonAdapter() {\n    JsonSerializer<A> serializer = new JsonSerializer<A>() {\n      public JsonElement serialize(A src, Type typeOfSrc,\n          JsonSerializationContext context) {\n        return new JsonPrimitive(\"registeredSerializer\");\n      }\n    };\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(A.class, serializer)\n      .create();\n    String json = gson.toJson(new A(\"abcd\"));\n    assertEquals(\"\\\"registeredSerializer\\\"\", json);\n    A target = gson.fromJson(\"abcd\", A.class);\n    assertEquals(\"jsonAdapter\", target.value);\n  }",
        "begin_line": 89,
        "end_line": 103,
        "comment": "\n   * The serializer overrides field adapter, but for deserializer the fieldAdapter is used.\n   ",
        "child_ranges": [
            "(line 90,col 5)-(line 95,col 6)",
            "(line 96,col 5)-(line 98,col 16)",
            "(line 99,col 5)-(line 99,col 45)",
            "(line 100,col 5)-(line 100,col 51)",
            "(line 101,col 5)-(line 101,col 46)",
            "(line 102,col 5)-(line 102,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.Anonymous-abb862ac-867b-4675-afbf-0751883688ff.serialize(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "      public JsonElement serialize(A src, Type typeOfSrc,\n          JsonSerializationContext context) {\n        return new JsonPrimitive(\"registeredSerializer\");\n      }",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter()",
        "snippet": "  public void testRegisteredDeserializerOverridesJsonAdapter() {\n    JsonDeserializer<A> deserializer = new JsonDeserializer<A>() {\n      public A deserialize(JsonElement json, Type typeOfT,\n          JsonDeserializationContext context) throws JsonParseException {\n        return new A(\"registeredDeserializer\");\n      }\n    };\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(A.class, deserializer)\n      .create();\n    String json = gson.toJson(new A(\"abcd\"));\n    assertEquals(\"\\\"jsonAdapter\\\"\", json);\n    A target = gson.fromJson(\"abcd\", A.class);\n    assertEquals(\"registeredDeserializer\", target.value);\n  }",
        "begin_line": 108,
        "end_line": 122,
        "comment": "\n   * The deserializer overrides Json adapter, but for serializer the jsonAdapter is used.\n   ",
        "child_ranges": [
            "(line 109,col 5)-(line 114,col 6)",
            "(line 115,col 5)-(line 117,col 16)",
            "(line 118,col 5)-(line 118,col 45)",
            "(line 119,col 5)-(line 119,col 42)",
            "(line 120,col 5)-(line 120,col 46)",
            "(line 121,col 5)-(line 121,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.Anonymous-7e6ed9e8-f458-4ae8-8ded-d2722f233afd.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "      public A deserialize(JsonElement json, Type typeOfT,\n          JsonDeserializationContext context) throws JsonParseException {\n        return new A(\"registeredDeserializer\");\n      }",
        "begin_line": 110,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails()",
        "snippet": "  public void testIncorrectTypeAdapterFails() {\n    try {\n      String json = new Gson().toJson(new ClassWithIncorrectJsonAdapter(\"bar\"));\n      fail(json);\n    } catch (ClassCastException expected) {}\n  }",
        "begin_line": 124,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 125,col 5)-(line 128,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked()",
        "snippet": "  public void testSuperclassTypeAdapterNotInvoked() {\n    String json = new Gson().toJson(new B(\"bar\"));\n    assertFalse(json.contains(\"jsonAdapter\"));\n  }",
        "begin_line": 131,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 132,col 5)-(line 132,col 50)",
            "(line 133,col 5)-(line 133,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testNullSafeObjectFromJson()",
        "snippet": "  public void testNullSafeObjectFromJson() {\n    Gson gson = new Gson();\n    NullableClass fromJson = gson.fromJson(\"null\", NullableClass.class);\n    assertNull(fromJson);\n  }",
        "begin_line": 136,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 137,col 27)",
            "(line 138,col 5)-(line 138,col 72)",
            "(line 139,col 5)-(line 139,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.A(java.lang.String)",
        "snippet": "    A(String value) {\n      this.value = value;\n    }",
        "begin_line": 145,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 146,col 7)-(line 146,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A)",
        "snippet": "      @Override public void write(JsonWriter out, A value) throws IOException {\n        out.value(\"jsonAdapter\");\n      }",
        "begin_line": 149,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.read(com.google.gson.stream.JsonReader)",
        "snippet": "      @Override public A read(JsonReader in) throws IOException {\n        in.nextString();\n        return new A(\"jsonAdapter\");\n      }",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 24)",
            "(line 154,col 9)-(line 154,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.C.C(java.lang.String)",
        "snippet": "    C(String value) {\n      this.value = value;\n    }",
        "begin_line": 162,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 163,col 7)-(line 163,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.C.JsonAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken<T>)",
        "snippet": "      @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n        return new TypeAdapter<T>() {\n          @Override public void write(JsonWriter out, T value) throws IOException {\n            out.value(\"jsonAdapterFactory\");\n          }\n          @SuppressWarnings(\"unchecked\")\n          @Override public T read(JsonReader in) throws IOException {\n            in.nextString();\n            return (T) new C(\"jsonAdapterFactory\");\n          }\n        };\n      }",
        "begin_line": 166,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 176,col 10)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.C.JsonAdapterFactory.Anonymous-319b95e5-8c0e-414f-91da-b00c90bd2b0d.write(com.google.gson.stream.JsonWriter, T)",
        "snippet": "          @Override public void write(JsonWriter out, T value) throws IOException {\n            out.value(\"jsonAdapterFactory\");\n          }",
        "begin_line": 168,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 169,col 13)-(line 169,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.C.JsonAdapterFactory.Anonymous-0dd42533-38ce-451f-a7c8-68235c2c8e89.read(com.google.gson.stream.JsonReader)",
        "snippet": "          @SuppressWarnings(\"unchecked\")\n          @Override public T read(JsonReader in) throws IOException {\n            in.nextString();\n            return (T) new C(\"jsonAdapterFactory\");\n          }",
        "begin_line": 171,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 173,col 13)-(line 173,col 28)",
            "(line 174,col 13)-(line 174,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.B.B(java.lang.String)",
        "snippet": "    B(String value) {\n      super(value);\n    }",
        "begin_line": 182,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 183,col 7)-(line 183,col 19)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.ClassWithIncorrectJsonAdapter.ClassWithIncorrectJsonAdapter(java.lang.String)",
        "snippet": "    ClassWithIncorrectJsonAdapter(String value) {\n      this.value = value;\n    }",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 192,col 7)-(line 192,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.User.User(java.lang.String, java.lang.String)",
        "snippet": "    User(String firstName, String lastName) {\n      this.firstName = firstName;\n      this.lastName = lastName;\n    }",
        "begin_line": 200,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 201,col 7)-(line 201,col 33)",
            "(line 202,col 7)-(line 202,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.UserJsonAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.User)",
        "snippet": "    @Override public void write(JsonWriter out, User user) throws IOException {\n      // implement write: combine firstName and lastName into name\n      out.beginObject();\n      out.name(\"name\");\n      out.value(user.firstName + \" \" + user.lastName);\n      out.endObject();\n      // implement the write method\n    }",
        "begin_line": 206,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 208,col 7)-(line 208,col 24)",
            "(line 209,col 7)-(line 209,col 23)",
            "(line 210,col 7)-(line 210,col 54)",
            "(line 211,col 7)-(line 211,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.UserJsonAdapter.read(com.google.gson.stream.JsonReader)",
        "snippet": "    @Override public User read(JsonReader in) throws IOException {\n      // implement read: split name into firstName and lastName\n      in.beginObject();\n      in.nextName();\n      String[] nameParts = in.nextString().split(\" \");\n      in.endObject();\n      return new User(nameParts[0], nameParts[1]);\n    }",
        "begin_line": 214,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 216,col 7)-(line 216,col 23)",
            "(line 217,col 7)-(line 217,col 20)",
            "(line 218,col 7)-(line 218,col 54)",
            "(line 219,col 7)-(line 219,col 21)",
            "(line 220,col 7)-(line 220,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.NullableClassJsonAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.NullableClass)",
        "snippet": "    @Override\n    public void write(JsonWriter out, NullableClass value) throws IOException {\n      out.value(\"nullable\");\n    }",
        "begin_line": 229,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 231,col 7)-(line 231,col 28)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.NullableClassJsonAdapter.read(com.google.gson.stream.JsonReader)",
        "snippet": "    @Override\n    public NullableClass read(JsonReader in) throws IOException {\n      in.nextString();\n      return new NullableClass();\n    }",
        "begin_line": 234,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 236,col 7)-(line 236,col 22)",
            "(line 237,col 7)-(line 237,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.FooJsonAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.Foo)",
        "snippet": "    @Override public void write(JsonWriter out, Foo value) throws IOException {\n      out.value(value.name().toLowerCase(Locale.US));\n    }",
        "begin_line": 244,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 245,col 7)-(line 245,col 53)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
        "signature": "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.FooJsonAdapter.read(com.google.gson.stream.JsonReader)",
        "snippet": "    @Override public Foo read(JsonReader in) throws IOException {\n      return Foo.valueOf(in.nextString().toUpperCase(Locale.US));\n    }",
        "begin_line": 248,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 249,col 7)-(line 249,col 65)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() {\n    gson = new GsonBuilder()\n        .registerTypeAdapter(Id.class, new IdTreeTypeAdapter())\n        .create();\n    course = new Course<HistoryCourse>(COURSE_ID, 4,\n        new Assignment<HistoryCourse>(null, null), createList(STUDENT1, STUDENT2));\n  }",
        "begin_line": 54,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 56,col 5)-(line 58,col 18)",
            "(line 59,col 5)-(line 60,col 83)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId()",
        "snippet": "  public void testSerializeId() {\n    String json = gson.toJson(course, TYPE_COURSE_HISTORY);\n    assertTrue(json.contains(String.valueOf(COURSE_ID.getValue())));\n    assertTrue(json.contains(String.valueOf(STUDENT1_ID.getValue())));\n    assertTrue(json.contains(String.valueOf(STUDENT2_ID.getValue())));\n  }",
        "begin_line": 63,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 64,col 59)",
            "(line 65,col 5)-(line 65,col 68)",
            "(line 66,col 5)-(line 66,col 70)",
            "(line 67,col 5)-(line 67,col 70)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId()",
        "snippet": "  public void testDeserializeId() {\n    String json = \"{courseId:1,students:[{id:1,name:'first'},{id:6,name:'second'}],\"\n      + \"numAssignments:4,assignment:{}}\";\n    Course<HistoryCourse> target = gson.fromJson(json, TYPE_COURSE_HISTORY);\n    assertEquals(\"1\", target.getStudents().get(0).id.getValue());\n    assertEquals(\"6\", target.getStudents().get(1).id.getValue());\n    assertEquals(\"1\", target.getId().getValue());\n  }",
        "begin_line": 70,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 71,col 5)-(line 72,col 42)",
            "(line 73,col 5)-(line 73,col 76)",
            "(line 74,col 5)-(line 74,col 65)",
            "(line 75,col 5)-(line 75,col 65)",
            "(line 76,col 5)-(line 76,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.Id.Id(java.lang.String, java.lang.reflect.Type)",
        "snippet": "    private Id(String value, Type typeOfId) {\n      this.value = value;\n      this.typeOfId = typeOfId;\n    }",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 85,col 7)-(line 85,col 25)",
            "(line 86,col 7)-(line 86,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.Id.getValue()",
        "snippet": "    public String getValue() {\n      return value;\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 89,col 7)-(line 89,col 19)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.IdTreeTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "    @SuppressWarnings(\"rawtypes\")\n    @Override\n    public Id<?> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      if (!(typeOfT instanceof ParameterizedType)) {\n        throw new JsonParseException(\"Id of unknown type: \" + typeOfT);\n      }\n      ParameterizedType parameterizedType = (ParameterizedType) typeOfT;\n      // Since Id takes only one TypeVariable, the actual type corresponding to the first\n      // TypeVariable is the Type we are looking for\n      Type typeOfId = parameterizedType.getActualTypeArguments()[0];\n      return new Id(json.getAsString(), typeOfId);\n    }",
        "begin_line": 96,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 100,col 7)-(line 102,col 7)",
            "(line 103,col 7)-(line 103,col 72)",
            "(line 106,col 7)-(line 106,col 68)",
            "(line 107,col 7)-(line 107,col 50)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.IdTreeTypeAdapter.serialize(com.google.gson.functional.TreeTypeAdaptersTest.Id<?>, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
        "snippet": "    @Override\n    public JsonElement serialize(Id<?> src, Type typeOfSrc, JsonSerializationContext context) {\n      return new JsonPrimitive(src.getValue());\n    }",
        "begin_line": 110,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 112,col 7)-(line 112,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.Student.Student()",
        "snippet": "    private Student() {\n      this(null, null);\n    }",
        "begin_line": 121,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 122,col 7)-(line 122,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.Student.Student(com.google.gson.functional.TreeTypeAdaptersTest.Id<com.google.gson.functional.TreeTypeAdaptersTest.Student>, java.lang.String)",
        "snippet": "    public Student(Id<Student> id, String name) {\n      this.id = id;\n      this.name = name;\n    }",
        "begin_line": 124,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 125,col 7)-(line 125,col 19)",
            "(line 126,col 7)-(line 126,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.Course.Course()",
        "snippet": "    private Course() {\n      this(null, 0, null, new ArrayList<Student>());\n    }",
        "begin_line": 137,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 138,col 7)-(line 138,col 52)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.Course.Course(com.google.gson.functional.TreeTypeAdaptersTest.Id<com.google.gson.functional.TreeTypeAdaptersTest.Course<T>>, int, com.google.gson.functional.TreeTypeAdaptersTest.Assignment<T>, java.util.List<com.google.gson.functional.TreeTypeAdaptersTest.Student>)",
        "snippet": "    public Course(Id<Course<T>> courseId, int numAssignments,\n        Assignment<T> assignment, List<Student> players) {\n      this.courseId = courseId;\n      this.numAssignments = numAssignments;\n      this.assignment = assignment;\n      this.students = players;\n    }",
        "begin_line": 141,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 143,col 7)-(line 143,col 31)",
            "(line 144,col 7)-(line 144,col 43)",
            "(line 145,col 7)-(line 145,col 35)",
            "(line 146,col 7)-(line 146,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.Course.getId()",
        "snippet": "    public Id<Course<T>> getId() {\n      return courseId;\n    }",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 149,col 7)-(line 149,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.Course.getStudents()",
        "snippet": "    List<Student> getStudents() {\n      return students;\n    }",
        "begin_line": 151,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 152,col 7)-(line 152,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.Assignment.Assignment()",
        "snippet": "    private Assignment() {\n      this(null, null);\n    }",
        "begin_line": 161,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 162,col 7)-(line 162,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.Assignment.Assignment(com.google.gson.functional.TreeTypeAdaptersTest.Id<com.google.gson.functional.TreeTypeAdaptersTest.Assignment<T>>, T)",
        "snippet": "    public Assignment(Id<Assignment<T>> id, T data) {\n      this.id = id;\n      this.data = data;\n    }",
        "begin_line": 164,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 165,col 7)-(line 165,col 19)",
            "(line 166,col 7)-(line 166,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.TreeTypeAdaptersTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
        "signature": "com.google.gson.functional.TreeTypeAdaptersTest.createList(T...)",
        "snippet": "  private static <T> List<T> createList(T ...items) {\n    return Arrays.asList(items);\n  }",
        "begin_line": 175,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 176,col 5)-(line 176,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ConcurrencyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java",
        "signature": "com.google.gson.functional.ConcurrencyTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 18)",
            "(line 39,col 5)-(line 39,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ConcurrencyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java",
        "signature": "com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization()",
        "snippet": "  public void testSingleThreadSerialization() { \n    MyObject myObj = new MyObject(); \n    for (int i = 0; i < 10; i++) { \n      gson.toJson(myObj); \n    } \n  } ",
        "begin_line": 46,
        "end_line": 51,
        "comment": "\r\n   * Source-code based on\r\n   * http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081\r\n   ",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 36)",
            "(line 48,col 5)-(line 50,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ConcurrencyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java",
        "signature": "com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization()",
        "snippet": "  public void testSingleThreadDeserialization() { \n    for (int i = 0; i < 10; i++) { \n      gson.fromJson(\"{'a':'hello','b':'world','i':1}\", MyObject.class); \n    } \n  } ",
        "begin_line": 57,
        "end_line": 61,
        "comment": "\r\n   * Source-code based on\r\n   * http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081\r\n   ",
        "child_ranges": [
            "(line 58,col 5)-(line 60,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ConcurrencyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java",
        "signature": "com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization()",
        "snippet": "  public void testMultiThreadSerialization() throws InterruptedException {\n    final CountDownLatch startLatch = new CountDownLatch(1);\n    final CountDownLatch finishedLatch = new CountDownLatch(10);\n    final AtomicBoolean failed = new AtomicBoolean(false);\n    ExecutorService executor = Executors.newFixedThreadPool(10);\n    for (int taskCount = 0; taskCount < 10; taskCount++) {\n      executor.execute(new Runnable() {\n        public void run() {\n          MyObject myObj = new MyObject();\n          try {\n            startLatch.await();\n            for (int i = 0; i < 10; i++) {\n              gson.toJson(myObj);\n            }\n          } catch (Throwable t) {\n            failed.set(true);\n          } finally {\n            finishedLatch.countDown();\n          }\n        }\n      });\n    }\n    startLatch.countDown();\n    finishedLatch.await();\n    assertFalse(failed.get());\n  }",
        "begin_line": 67,
        "end_line": 92,
        "comment": "\r\n   * Source-code based on\r\n   * http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081\r\n   ",
        "child_ranges": [
            "(line 68,col 5)-(line 68,col 60)",
            "(line 69,col 5)-(line 69,col 64)",
            "(line 70,col 5)-(line 70,col 58)",
            "(line 71,col 5)-(line 71,col 64)",
            "(line 72,col 5)-(line 88,col 5)",
            "(line 89,col 5)-(line 89,col 27)",
            "(line 90,col 5)-(line 90,col 26)",
            "(line 91,col 5)-(line 91,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ConcurrencyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java",
        "signature": "com.google.gson.functional.ConcurrencyTest.Anonymous-331dc089-6f06-49ca-8916-948805949480.run()",
        "snippet": "        public void run() {\n          MyObject myObj = new MyObject();\n          try {\n            startLatch.await();\n            for (int i = 0; i < 10; i++) {\n              gson.toJson(myObj);\n            }\n          } catch (Throwable t) {\n            failed.set(true);\n          } finally {\n            finishedLatch.countDown();\n          }\n        }",
        "begin_line": 74,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 75,col 11)-(line 75,col 42)",
            "(line 76,col 11)-(line 85,col 11)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ConcurrencyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java",
        "signature": "com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization()",
        "snippet": "  public void testMultiThreadDeserialization() throws InterruptedException {\n    final CountDownLatch startLatch = new CountDownLatch(1);\n    final CountDownLatch finishedLatch = new CountDownLatch(10);\n    final AtomicBoolean failed = new AtomicBoolean(false);\n    ExecutorService executor = Executors.newFixedThreadPool(10);\n    for (int taskCount = 0; taskCount < 10; taskCount++) {\n      executor.execute(new Runnable() {\n        public void run() {\n          try {\n            startLatch.await();\n            for (int i = 0; i < 10; i++) {\n              gson.fromJson(\"{'a':'hello','b':'world','i':1}\", MyObject.class); \n            }\n          } catch (Throwable t) {\n            failed.set(true);\n          } finally {\n            finishedLatch.countDown();\n          }\n        }\n      });\n    }\n    startLatch.countDown();\n    finishedLatch.await();\n    assertFalse(failed.get());\n  }",
        "begin_line": 98,
        "end_line": 122,
        "comment": "\r\n   * Source-code based on\r\n   * http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081\r\n   ",
        "child_ranges": [
            "(line 99,col 5)-(line 99,col 60)",
            "(line 100,col 5)-(line 100,col 64)",
            "(line 101,col 5)-(line 101,col 58)",
            "(line 102,col 5)-(line 102,col 64)",
            "(line 103,col 5)-(line 118,col 5)",
            "(line 119,col 5)-(line 119,col 27)",
            "(line 120,col 5)-(line 120,col 26)",
            "(line 121,col 5)-(line 121,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ConcurrencyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java",
        "signature": "com.google.gson.functional.ConcurrencyTest.Anonymous-1007514d-8b0a-4514-ae6d-7ff0402834c2.run()",
        "snippet": "        public void run() {\n          try {\n            startLatch.await();\n            for (int i = 0; i < 10; i++) {\n              gson.fromJson(\"{'a':'hello','b':'world','i':1}\", MyObject.class); \n            }\n          } catch (Throwable t) {\n            failed.set(true);\n          } finally {\n            finishedLatch.countDown();\n          }\n        }",
        "begin_line": 105,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 106,col 11)-(line 115,col 11)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ConcurrencyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java",
        "signature": "com.google.gson.functional.ConcurrencyTest.MyObject.MyObject()",
        "snippet": "    MyObject() {\n      this(\"hello\", \"world\", 42);\n    }",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 131,col 7)-(line 131,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ConcurrencyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java",
        "signature": "com.google.gson.functional.ConcurrencyTest.MyObject.MyObject(java.lang.String, java.lang.String, int)",
        "snippet": "    public MyObject(String a, String b, int i) {\n      this.a = a;\n      this.b = b;\n      this.i = i;\n    }",
        "begin_line": 134,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 135,col 7)-(line 135,col 17)",
            "(line 136,col 7)-(line 136,col 17)",
            "(line 137,col 7)-(line 137,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InstanceCreatorTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java",
        "signature": "com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType()",
        "snippet": "  public void testInstanceCreatorReturnsBaseType() {\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {\n        @Override public Base createInstance(Type type) {\n         return new Base();\n       }\n      })\n      .create();\n    String json = \"{baseName:'BaseRevised',subName:'Sub'}\";\n    Base base = gson.fromJson(json, Base.class);\n    assertEquals(\"BaseRevised\", base.baseName);\n  }",
        "begin_line": 43,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 50,col 16)",
            "(line 51,col 5)-(line 51,col 59)",
            "(line 52,col 5)-(line 52,col 48)",
            "(line 53,col 5)-(line 53,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InstanceCreatorTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java",
        "signature": "com.google.gson.functional.InstanceCreatorTest.Anonymous-14d587aa-e0d5-434f-95ba-d05ff43ddbd7.createInstance(java.lang.reflect.Type)",
        "snippet": "        @Override public Base createInstance(Type type) {\n         return new Base();\n       }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 10)-(line 47,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InstanceCreatorTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java",
        "signature": "com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject()",
        "snippet": "  public void testInstanceCreatorReturnsSubTypeForTopLevelObject() {\n    Gson gson = new GsonBuilder()\n    .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {\n      @Override public Base createInstance(Type type) {\n        return new Sub();\n      }\n    })\n    .create();\n\n    String json = \"{baseName:'Base',subName:'SubRevised'}\";\n    Base base = gson.fromJson(json, Base.class);\n    assertTrue(base instanceof Sub);\n\n    Sub sub = (Sub) base;\n    assertFalse(\"SubRevised\".equals(sub.subName));\n    assertEquals(Sub.SUB_NAME, sub.subName);\n  }",
        "begin_line": 56,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 63,col 14)",
            "(line 65,col 5)-(line 65,col 59)",
            "(line 66,col 5)-(line 66,col 48)",
            "(line 67,col 5)-(line 67,col 36)",
            "(line 69,col 5)-(line 69,col 25)",
            "(line 70,col 5)-(line 70,col 50)",
            "(line 71,col 5)-(line 71,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InstanceCreatorTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java",
        "signature": "com.google.gson.functional.InstanceCreatorTest.Anonymous-96a7153c-a472-4e9a-bcbb-b157ca70a306.createInstance(java.lang.reflect.Type)",
        "snippet": "      @Override public Base createInstance(Type type) {\n        return new Sub();\n      }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InstanceCreatorTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java",
        "signature": "com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField()",
        "snippet": "  public void testInstanceCreatorReturnsSubTypeForField() {\n    Gson gson = new GsonBuilder()\n    .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {\n      @Override public Base createInstance(Type type) {\n        return new Sub();\n      }\n    })\n    .create();\n    String json = \"{base:{baseName:'Base',subName:'SubRevised'}}\";\n    ClassWithBaseField target = gson.fromJson(json, ClassWithBaseField.class);\n    assertTrue(target.base instanceof Sub);\n    assertEquals(Sub.SUB_NAME, ((Sub)target.base).subName);\n  }",
        "begin_line": 74,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 75,col 5)-(line 81,col 14)",
            "(line 82,col 5)-(line 82,col 66)",
            "(line 83,col 5)-(line 83,col 78)",
            "(line 84,col 5)-(line 84,col 43)",
            "(line 85,col 5)-(line 85,col 59)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InstanceCreatorTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java",
        "signature": "com.google.gson.functional.InstanceCreatorTest.Anonymous-648213a9-e620-4bdd-a2e0-0a6b867667ad.createInstance(java.lang.reflect.Type)",
        "snippet": "      @Override public Base createInstance(Type type) {\n        return new Sub();\n      }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InstanceCreatorTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java",
        "signature": "com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType()",
        "snippet": "  public void testInstanceCreatorForCollectionType() {\n    @SuppressWarnings(\"serial\")\n    class SubArrayList<T> extends ArrayList<T> {}\n    InstanceCreator<List<String>> listCreator = new InstanceCreator<List<String>>() {\n      @Override public List<String> createInstance(Type type) {\n        return new SubArrayList<String>();\n      }\n    };\n    Type listOfStringType = new TypeToken<List<String>>() {}.getType();\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(listOfStringType, listCreator)\n        .create();\n    List<String> list = gson.fromJson(\"[\\\"a\\\"]\", listOfStringType);\n    assertEquals(SubArrayList.class, list.getClass());\n  }",
        "begin_line": 89,
        "end_line": 103,
        "comment": " This regressed in Gson 2.0 and 2.1",
        "child_ranges": [
            "(line 90,col 5)-(line 91,col 49)",
            "(line 92,col 5)-(line 96,col 6)",
            "(line 97,col 5)-(line 97,col 71)",
            "(line 98,col 5)-(line 100,col 18)",
            "(line 101,col 5)-(line 101,col 67)",
            "(line 102,col 5)-(line 102,col 54)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InstanceCreatorTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java",
        "signature": "com.google.gson.functional.InstanceCreatorTest.Anonymous-37941b49-36e5-4bb3-8509-955de08d4a29.createInstance(java.lang.reflect.Type)",
        "snippet": "      @Override public List<String> createInstance(Type type) {\n        return new SubArrayList<String>();\n      }",
        "begin_line": 93,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InstanceCreatorTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java",
        "signature": "com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType()",
        "snippet": "  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n  public void testInstanceCreatorForParametrizedType() throws Exception {\n    @SuppressWarnings(\"serial\")\n    class SubTreeSet<T> extends TreeSet<T> {}\n    InstanceCreator<SortedSet> sortedSetCreator = new InstanceCreator<SortedSet>() {\n      @Override public SortedSet createInstance(Type type) {\n        return new SubTreeSet();\n      }\n    };\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(SortedSet.class, sortedSetCreator)\n        .create();\n\n    Type sortedSetType = new TypeToken<SortedSet<String>>() {}.getType();\n    SortedSet<String> set = gson.fromJson(\"[\\\"a\\\"]\", sortedSetType);\n    assertEquals(set.first(), \"a\");\n    assertEquals(SubTreeSet.class, set.getClass());\n\n    set = gson.fromJson(\"[\\\"b\\\"]\", SortedSet.class);\n    assertEquals(set.first(), \"b\");\n    assertEquals(SubTreeSet.class, set.getClass());\n  }",
        "begin_line": 105,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 107,col 5)-(line 108,col 45)",
            "(line 109,col 5)-(line 113,col 6)",
            "(line 114,col 5)-(line 116,col 18)",
            "(line 118,col 5)-(line 118,col 73)",
            "(line 119,col 5)-(line 119,col 68)",
            "(line 120,col 5)-(line 120,col 35)",
            "(line 121,col 5)-(line 121,col 51)",
            "(line 123,col 5)-(line 123,col 52)",
            "(line 124,col 5)-(line 124,col 35)",
            "(line 125,col 5)-(line 125,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InstanceCreatorTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java",
        "signature": "com.google.gson.functional.InstanceCreatorTest.Anonymous-0d34894d-66a0-486f-a441-056dddfbb63c.createInstance(java.lang.reflect.Type)",
        "snippet": "      @Override public SortedSet createInstance(Type type) {\n        return new SubTreeSet();\n      }",
        "begin_line": 110,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InternationalizationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InternationalizationTest.java",
        "signature": "com.google.gson.functional.InternationalizationTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 31,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 33,col 5)-(line 33,col 18)",
            "(line 34,col 5)-(line 34,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InternationalizationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InternationalizationTest.java",
        "signature": "com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization()",
        "snippet": "  public void testStringsWithRawChineseCharactersDeserialization() throws Exception {\n    String expected = \"\u597d\u597d\u597d\";\n    String json = \"\\\"\" + expected + \"\\\"\";\n    String actual = gson.fromJson(json, String.class);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 46,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 28)",
            "(line 48,col 5)-(line 48,col 41)",
            "(line 49,col 5)-(line 49,col 54)",
            "(line 50,col 5)-(line 50,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InternationalizationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InternationalizationTest.java",
        "signature": "com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization()",
        "snippet": "  public void testStringsWithUnicodeChineseCharactersSerialization() throws Exception {\n    String target = \"\\u597d\\u597d\\u597d\";\n    String json = gson.toJson(target);\n    String expected = \"\\\"\\u597d\\u597d\\u597d\\\"\";\n    assertEquals(expected, json);\n  }",
        "begin_line": 53,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 41)",
            "(line 55,col 5)-(line 55,col 38)",
            "(line 56,col 5)-(line 56,col 47)",
            "(line 57,col 5)-(line 57,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InternationalizationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InternationalizationTest.java",
        "signature": "com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization()",
        "snippet": "  public void testStringsWithUnicodeChineseCharactersDeserialization() throws Exception {\n    String expected = \"\\u597d\\u597d\\u597d\";\n    String json = \"\\\"\" + expected + \"\\\"\";\n    String actual = gson.fromJson(json, String.class);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 60,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 61,col 5)-(line 61,col 43)",
            "(line 62,col 5)-(line 62,col 41)",
            "(line 63,col 5)-(line 63,col 54)",
            "(line 64,col 5)-(line 64,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.InternationalizationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/InternationalizationTest.java",
        "signature": "com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization()",
        "snippet": "  public void testStringsWithUnicodeChineseCharactersEscapedDeserialization() throws Exception {\n    String actual = gson.fromJson(\"'\\\\u597d\\\\u597d\\\\u597d'\", String.class);\n    assertEquals(\"\\u597d\\u597d\\u597d\", actual);\n  }",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 68,col 5)-(line 68,col 75)",
            "(line 69,col 5)-(line 69,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new GsonBuilder().registerTypeAdapter(DataHolder.class, new DataHolderDeserializer()).create();\n  }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 18)",
            "(line 48,col 5)-(line 48,col 106)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject()",
        "snippet": "  public void testDefaultConstructorNotCalledOnObject() throws Exception {\n    DataHolder data = new DataHolder(DEFAULT_VALUE);\n    String json = gson.toJson(data);\n\n    DataHolder actual = gson.fromJson(json, DataHolder.class);\n    assertEquals(DEFAULT_VALUE + SUFFIX, actual.getData());\n  }",
        "begin_line": 51,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 52)",
            "(line 53,col 5)-(line 53,col 36)",
            "(line 55,col 5)-(line 55,col 62)",
            "(line 56,col 5)-(line 56,col 59)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField()",
        "snippet": "  public void testDefaultConstructorNotCalledOnField() throws Exception {\n    DataHolderWrapper dataWrapper = new DataHolderWrapper(new DataHolder(DEFAULT_VALUE));\n    String json = gson.toJson(dataWrapper);\n\n    DataHolderWrapper actual = gson.fromJson(json, DataHolderWrapper.class);\n    assertEquals(DEFAULT_VALUE + SUFFIX, actual.getWrappedData().getData());\n  }",
        "begin_line": 59,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 60,col 89)",
            "(line 61,col 5)-(line 61,col 43)",
            "(line 63,col 5)-(line 63,col 76)",
            "(line 64,col 5)-(line 64,col 76)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolder()",
        "snippet": "    @SuppressWarnings(\"unused\")\n    private DataHolder() {\n      throw new IllegalStateException();\n    }",
        "begin_line": 71,
        "end_line": 74,
        "comment": " For use by Gson",
        "child_ranges": [
            "(line 73,col 7)-(line 73,col 40)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolder(java.lang.String)",
        "snippet": "    public DataHolder(String data) {\n      this.data = data;\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 77,col 7)-(line 77,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.DataHolder.getData()",
        "snippet": "    public String getData() {\n      return data;\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 7)-(line 81,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.DataHolderWrapper.DataHolderWrapper()",
        "snippet": "    @SuppressWarnings(\"unused\")\n    private DataHolderWrapper() {\n      this(new DataHolder(DEFAULT_VALUE));\n    }",
        "begin_line": 89,
        "end_line": 92,
        "comment": " For use by Gson",
        "child_ranges": [
            "(line 91,col 7)-(line 91,col 42)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.DataHolderWrapper.DataHolderWrapper(com.google.gson.functional.CustomDeserializerTest.DataHolder)",
        "snippet": "    public DataHolderWrapper(DataHolder data) {\n      this.wrappedData = data;\n    }",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 95,col 7)-(line 95,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.DataHolderWrapper.getWrappedData()",
        "snippet": "    public DataHolder getWrappedData() {\n      return wrappedData;\n    }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 99,col 7)-(line 99,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.DataHolderDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "    @Override\n    public DataHolder deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      JsonObject jsonObj = json.getAsJsonObject();\n      String dataString = jsonObj.get(\"data\").getAsString();\n      return new DataHolder(dataString + SUFFIX);\n    }",
        "begin_line": 104,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 107,col 7)-(line 107,col 50)",
            "(line 108,col 7)-(line 108,col 60)",
            "(line 109,col 7)-(line 109,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization()",
        "snippet": "  public void testJsonTypeFieldBasedDeserialization() {\n    String json = \"{field1:'abc',field2:'def',__type__:'SUB_TYPE1'}\";\n    Gson gson = new GsonBuilder().registerTypeAdapter(MyBase.class, new JsonDeserializer<MyBase>() {\n      @Override public MyBase deserialize(JsonElement json, Type pojoType,\n          JsonDeserializationContext context) throws JsonParseException {\n        String type = json.getAsJsonObject().get(MyBase.TYPE_ACCESS).getAsString();\n        return context.deserialize(json, SubTypes.valueOf(type).getSubclass());\n      }\n    }).create();\n    SubType1 target = (SubType1) gson.fromJson(json, MyBase.class);\n    assertEquals(\"abc\", target.field1);\n  }",
        "begin_line": 113,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 69)",
            "(line 115,col 5)-(line 121,col 16)",
            "(line 122,col 5)-(line 122,col 67)",
            "(line 123,col 5)-(line 123,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.Anonymous-8f813a50-2077-4527-bfcb-b36be8b244c3.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "      @Override public MyBase deserialize(JsonElement json, Type pojoType,\n          JsonDeserializationContext context) throws JsonParseException {\n        String type = json.getAsJsonObject().get(MyBase.TYPE_ACCESS).getAsString();\n        return context.deserialize(json, SubTypes.valueOf(type).getSubclass());\n      }",
        "begin_line": 116,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 83)",
            "(line 119,col 9)-(line 119,col 79)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.SubTypes.SubTypes(java.lang.reflect.Type)",
        "snippet": "    private SubTypes(Type subClass) {\n      this.subClass = subClass;\n    }",
        "begin_line": 134,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 135,col 7)-(line 135,col 31)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.SubTypes.getSubclass()",
        "snippet": "    public Type getSubclass() {\n      return subClass;\n    }",
        "begin_line": 137,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 138,col 7)-(line 138,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject()",
        "snippet": "  public void testCustomDeserializerReturnsNullForTopLevelObject() {\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {\n        @Override\n        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n            throws JsonParseException {\n          return null;\n        }\n      }).create();\n    String json = \"{baseName:'Base',subName:'SubRevised'}\";\n    Base target = gson.fromJson(json, Base.class);\n    assertNull(target);\n  }",
        "begin_line": 151,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 152,col 5)-(line 159,col 18)",
            "(line 160,col 5)-(line 160,col 59)",
            "(line 161,col 5)-(line 161,col 50)",
            "(line 162,col 5)-(line 162,col 23)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.Anonymous-51642ddc-95dc-4ff5-8aa8-10a5d9e83ccc.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "        @Override\n        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n            throws JsonParseException {\n          return null;\n        }",
        "begin_line": 154,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 157,col 11)-(line 157,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull()",
        "snippet": "  public void testCustomDeserializerReturnsNull() {\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {\n        @Override\n        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n            throws JsonParseException {\n          return null;\n        }\n      }).create();\n    String json = \"{base:{baseName:'Base',subName:'SubRevised'}}\";\n    ClassWithBaseField target = gson.fromJson(json, ClassWithBaseField.class);\n    assertNull(target.base);\n  }",
        "begin_line": 165,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 166,col 5)-(line 173,col 18)",
            "(line 174,col 5)-(line 174,col 66)",
            "(line 175,col 5)-(line 175,col 78)",
            "(line 176,col 5)-(line 176,col 28)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.Anonymous-a93706c7-0f85-417b-b217-43dad6a8b921.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "        @Override\n        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n            throws JsonParseException {\n          return null;\n        }",
        "begin_line": 168,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 171,col 11)-(line 171,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements()",
        "snippet": "  public void testCustomDeserializerReturnsNullForArrayElements() {\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {\n        @Override\n        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n            throws JsonParseException {\n          return null;\n        }\n      }).create();\n    String json = \"[{baseName:'Base'},{baseName:'Base'}]\";\n    Base[] target = gson.fromJson(json, Base[].class);\n    assertNull(target[0]);\n    assertNull(target[1]);\n  }",
        "begin_line": 179,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 180,col 5)-(line 187,col 18)",
            "(line 188,col 5)-(line 188,col 58)",
            "(line 189,col 5)-(line 189,col 54)",
            "(line 190,col 5)-(line 190,col 26)",
            "(line 191,col 5)-(line 191,col 26)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.Anonymous-157d73ee-ab0e-42b9-87cb-5034c2016dc5.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "        @Override\n        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n            throws JsonParseException {\n          return null;\n        }",
        "begin_line": 182,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 11)-(line 185,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField()",
        "snippet": "  public void testCustomDeserializerReturnsNullForArrayElementsForArrayField() {\n    Gson gson = new GsonBuilder()\n      .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {\n        @Override\n        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n            throws JsonParseException {\n          return null;\n        }\n      }).create();\n    String json = \"{bases:[{baseName:'Base'},{baseName:'Base'}]}\";\n    ClassWithBaseArray target = gson.fromJson(json, ClassWithBaseArray.class);\n    assertNull(target.bases[0]);\n    assertNull(target.bases[1]);\n  }",
        "begin_line": 194,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 195,col 5)-(line 202,col 18)",
            "(line 203,col 5)-(line 203,col 66)",
            "(line 204,col 5)-(line 204,col 78)",
            "(line 205,col 5)-(line 205,col 32)",
            "(line 206,col 5)-(line 206,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.CustomDeserializerTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
        "signature": "com.google.gson.functional.CustomDeserializerTest.Anonymous-3a7701f1-891d-4b73-afe8-9e98c8a867c2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "        @Override\n        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n            throws JsonParseException {\n          return null;\n        }",
        "begin_line": 197,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 200,col 11)-(line 200,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JavaUtilTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JavaUtilTest.java",
        "signature": "com.google.gson.functional.JavaUtilTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 5)-(line 34,col 18)",
            "(line 35,col 5)-(line 35,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JavaUtilTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JavaUtilTest.java",
        "signature": "com.google.gson.functional.JavaUtilTest.testCurrency()",
        "snippet": "  public void testCurrency() throws Exception {\n    CurrencyHolder target = gson.fromJson(\"{'value':'USD'}\", CurrencyHolder.class);\n    assertEquals(\"USD\", target.value.getCurrencyCode());\n    String json = gson.toJson(target);\n    assertEquals(\"{\\\"value\\\":\\\"USD\\\"}\", json);\n\n    // null handling\n    target = gson.fromJson(\"{'value':null}\", CurrencyHolder.class);\n    assertNull(target.value);\n    assertEquals(\"{}\", gson.toJson(target));\n  }",
        "begin_line": 38,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 39,col 5)-(line 39,col 83)",
            "(line 40,col 5)-(line 40,col 56)",
            "(line 41,col 5)-(line 41,col 38)",
            "(line 42,col 5)-(line 42,col 46)",
            "(line 45,col 5)-(line 45,col 67)",
            "(line 46,col 5)-(line 46,col 29)",
            "(line 47,col 5)-(line 47,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.JavaUtilTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/JavaUtilTest.java",
        "signature": "com.google.gson.functional.JavaUtilTest.testProperties()",
        "snippet": "  public void testProperties() {\n    Properties props = gson.fromJson(\"{'a':'v1','b':'v2'}\", Properties.class);\n    assertEquals(\"v1\", props.getProperty(\"a\"));\n    assertEquals(\"v2\", props.getProperty(\"b\"));\n    String json = gson.toJson(props);\n    assertTrue(json.contains(\"\\\"a\\\":\\\"v1\\\"\"));\n    assertTrue(json.contains(\"\\\"b\\\":\\\"v2\\\"\"));\n  }",
        "begin_line": 54,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 55,col 78)",
            "(line 56,col 5)-(line 56,col 47)",
            "(line 57,col 5)-(line 57,col 47)",
            "(line 58,col 5)-(line 58,col 37)",
            "(line 59,col 5)-(line 59,col 46)",
            "(line 60,col 5)-(line 60,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    builder = new GsonBuilder();\n  }",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 41,col 5)-(line 41,col 18)",
            "(line 42,col 5)-(line 42,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization()",
        "snippet": "  public void testGsonWithNonDefaultFieldNamingPolicySerialization() {\n    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();\n    StringWrapper target = new StringWrapper(\"blah\");\n    assertEquals(\"{\\\"SomeConstantStringInstanceField\\\":\\\"\"\n        + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n  }",
        "begin_line": 45,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 46,col 5)-(line 46,col 90)",
            "(line 47,col 5)-(line 47,col 53)",
            "(line 48,col 5)-(line 49,col 79)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation()",
        "snippet": "  public void testGsonWithNonDefaultFieldNamingPolicyDeserialiation() {\n    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();\n    String target = \"{\\\"SomeConstantStringInstanceField\\\":\\\"someValue\\\"}\";\n    StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class);\n    assertEquals(\"someValue\", deserializedObject.someConstantStringInstanceField);\n  }",
        "begin_line": 52,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 53,col 5)-(line 53,col 90)",
            "(line 54,col 5)-(line 54,col 74)",
            "(line 55,col 5)-(line 55,col 82)",
            "(line 56,col 5)-(line 56,col 82)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization()",
        "snippet": "  public void testGsonWithLowerCaseDashPolicySerialization() {\n    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();\n    StringWrapper target = new StringWrapper(\"blah\");\n    assertEquals(\"{\\\"some-constant-string-instance-field\\\":\\\"\"\n        + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n  }",
        "begin_line": 59,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 60,col 96)",
            "(line 61,col 5)-(line 61,col 53)",
            "(line 62,col 5)-(line 63,col 79)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation()",
        "snippet": "  public void testGsonWithLowerCaseDashPolicyDeserialiation() {\n    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();\n    String target = \"{\\\"some-constant-string-instance-field\\\":\\\"someValue\\\"}\";\n    StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class);\n    assertEquals(\"someValue\", deserializedObject.someConstantStringInstanceField);\n  }",
        "begin_line": 66,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 96)",
            "(line 68,col 5)-(line 68,col 78)",
            "(line 69,col 5)-(line 69,col 82)",
            "(line 70,col 5)-(line 70,col 82)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization()",
        "snippet": "  public void testGsonWithLowerCaseUnderscorePolicySerialization() {\n    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n        .create();\n    StringWrapper target = new StringWrapper(\"blah\");\n    assertEquals(\"{\\\"some_constant_string_instance_field\\\":\\\"\"\n        + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n  }",
        "begin_line": 73,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 74,col 5)-(line 75,col 18)",
            "(line 76,col 5)-(line 76,col 53)",
            "(line 77,col 5)-(line 78,col 79)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation()",
        "snippet": "  public void testGsonWithLowerCaseUnderscorePolicyDeserialiation() {\n    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n        .create();\n    String target = \"{\\\"some_constant_string_instance_field\\\":\\\"someValue\\\"}\";\n    StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class);\n    assertEquals(\"someValue\", deserializedObject.someConstantStringInstanceField);\n  }",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 83,col 18)",
            "(line 84,col 5)-(line 84,col 78)",
            "(line 85,col 5)-(line 85,col 82)",
            "(line 86,col 5)-(line 86,col 82)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization()",
        "snippet": "  public void testGsonWithSerializedNameFieldNamingPolicySerialization() {\n    Gson gson = builder.create();\n    ClassWithSerializedNameFields expected = new ClassWithSerializedNameFields(5, 6);\n    String actual = gson.toJson(expected);\n    assertEquals(expected.getExpectedJson(), actual);\n  }",
        "begin_line": 89,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 90,col 5)-(line 90,col 33)",
            "(line 91,col 5)-(line 91,col 85)",
            "(line 92,col 5)-(line 92,col 42)",
            "(line 93,col 5)-(line 93,col 53)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization()",
        "snippet": "  public void testGsonWithSerializedNameFieldNamingPolicyDeserialization() {\n    Gson gson = builder.create();\n    ClassWithSerializedNameFields expected = new ClassWithSerializedNameFields(5, 7);\n    ClassWithSerializedNameFields actual =\n        gson.fromJson(expected.getExpectedJson(), ClassWithSerializedNameFields.class);\n    assertEquals(expected.f, actual.f);\n  }",
        "begin_line": 96,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 97,col 33)",
            "(line 98,col 5)-(line 98,col 85)",
            "(line 99,col 5)-(line 100,col 87)",
            "(line 101,col 5)-(line 101,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization()",
        "snippet": "  public void testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization() {\n    Gson gson = builder.create();\n    try {\n      ClassWithDuplicateFields target = new ClassWithDuplicateFields(10);\n      gson.toJson(target);\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n  }",
        "begin_line": 104,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 105,col 5)-(line 105,col 33)",
            "(line 106,col 5)-(line 111,col 5)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation()",
        "snippet": "  public void testGsonWithUpperCamelCaseSpacesPolicySerialiation() {\n    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES)\n        .create();\n    StringWrapper target = new StringWrapper(\"blah\");\n    assertEquals(\"{\\\"Some Constant String Instance Field\\\":\\\"\"\n        + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n  }",
        "begin_line": 114,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 115,col 5)-(line 116,col 18)",
            "(line 117,col 5)-(line 117,col 53)",
            "(line 118,col 5)-(line 119,col 79)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation()",
        "snippet": "  public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() {\n    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES)\n        .create();\n    String target = \"{\\\"Some Constant String Instance Field\\\":\\\"someValue\\\"}\";\n    StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class);\n    assertEquals(\"someValue\", deserializedObject.someConstantStringInstanceField);\n  }",
        "begin_line": 122,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 123,col 5)-(line 124,col 18)",
            "(line 125,col 5)-(line 125,col 78)",
            "(line 126,col 5)-(line 126,col 82)",
            "(line 127,col 5)-(line 127,col 82)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy()",
        "snippet": "  public void testDeprecatedNamingStrategy() throws Exception {\n    Gson gson = builder.setFieldNamingStrategy(new UpperCaseNamingStrategy()).create();\n    ClassWithDuplicateFields target = new ClassWithDuplicateFields(10);\n    String actual = gson.toJson(target);\n    assertEquals(\"{\\\"A\\\":10}\", actual);\n  }",
        "begin_line": 130,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 87)",
            "(line 132,col 5)-(line 132,col 71)",
            "(line 133,col 5)-(line 133,col 40)",
            "(line 134,col 5)-(line 134,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy()",
        "snippet": "  public void testComplexFieldNameStrategy() throws Exception {\n    Gson gson = new Gson();\n    String json = gson.toJson(new ClassWithComplexFieldName(10));\n    String escapedFieldName = \"@value\\\\\\\"_s$\\\\\\\\\";\n    assertEquals(\"{\\\"\" + escapedFieldName + \"\\\":10}\", json);\n\n    ClassWithComplexFieldName obj = gson.fromJson(json, ClassWithComplexFieldName.class);\n    assertEquals(10, obj.value);\n  }",
        "begin_line": 137,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 27)",
            "(line 139,col 5)-(line 139,col 65)",
            "(line 140,col 5)-(line 140,col 50)",
            "(line 141,col 5)-(line 141,col 60)",
            "(line 143,col 5)-(line 143,col 89)",
            "(line 144,col 5)-(line 144,col 32)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName()",
        "snippet": "  public void testAtSignInSerializedName() {\n    assertEquals(\"{\\\"@foo\\\":\\\"bar\\\"}\", new Gson().toJson(new AtName()));\n  }",
        "begin_line": 148,
        "end_line": 150,
        "comment": " http://code.google.com/p/google-gson/issues/detail?id=349 ",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 72)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.UpperCaseNamingStrategy.translateName(java.lang.reflect.Field)",
        "snippet": "    @Override\n    public String translateName(Field f) {\n      return f.getName().toUpperCase();\n    }",
        "begin_line": 157,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 159,col 7)-(line 159,col 39)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.ClassWithDuplicateFields.ClassWithDuplicateFields(java.lang.Integer)",
        "snippet": "    public ClassWithDuplicateFields(Integer a) {\n      this(a, null);\n    }",
        "begin_line": 168,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 169,col 7)-(line 169,col 20)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.ClassWithDuplicateFields.ClassWithDuplicateFields(java.lang.Double)",
        "snippet": "    public ClassWithDuplicateFields(Double b) {\n      this(null, b);\n    }",
        "begin_line": 172,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 173,col 7)-(line 173,col 20)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.ClassWithDuplicateFields.ClassWithDuplicateFields(java.lang.Integer, java.lang.Double)",
        "snippet": "    public ClassWithDuplicateFields(Integer a, Double b) {\n      this.a = a;\n      this.b = b;\n    }",
        "begin_line": 176,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 177,col 7)-(line 177,col 17)",
            "(line 178,col 7)-(line 178,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.NamingPolicyTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
        "signature": "com.google.gson.functional.NamingPolicyTest.ClassWithComplexFieldName.ClassWithComplexFieldName(long)",
        "snippet": "    ClassWithComplexFieldName(long value) {\n      this.value = value;\n    }",
        "begin_line": 185,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 186,col 7)-(line 186,col 25)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.UncategorizedTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/UncategorizedTest.java",
        "signature": "com.google.gson.functional.UncategorizedTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 46,col 5)-(line 46,col 18)",
            "(line 47,col 5)-(line 47,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.UncategorizedTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/UncategorizedTest.java",
        "signature": "com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails()",
        "snippet": "  public void testInvalidJsonDeserializationFails() throws Exception {\n    try {\n      gson.fromJson(\"adfasdf1112,,,\\\":\", BagOfPrimitives.class);\n      fail(\"Bad JSON should throw a ParseException\");\n    } catch (JsonParseException expected) { }\n\n    try {\n      gson.fromJson(\"{adfasdf1112,,,\\\":}\", BagOfPrimitives.class);\n      fail(\"Bad JSON should throw a ParseException\");\n    } catch (JsonParseException expected) { }\n  }",
        "begin_line": 50,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 54,col 45)",
            "(line 56,col 5)-(line 59,col 45)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.UncategorizedTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/UncategorizedTest.java",
        "signature": "com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization()",
        "snippet": "  public void testObjectEqualButNotSameSerialization() throws Exception {\n    ClassOverridingEquals objA = new ClassOverridingEquals();\n    ClassOverridingEquals objB = new ClassOverridingEquals();\n    objB.ref = objA;\n    String json = gson.toJson(objB);\n    assertEquals(objB.getExpectedJson(), json);\n  }",
        "begin_line": 62,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 63,col 5)-(line 63,col 61)",
            "(line 64,col 5)-(line 64,col 61)",
            "(line 65,col 5)-(line 65,col 20)",
            "(line 66,col 5)-(line 66,col 36)",
            "(line 67,col 5)-(line 67,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.UncategorizedTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/UncategorizedTest.java",
        "signature": "com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized()",
        "snippet": "  public void testStaticFieldsAreNotSerialized() {\n    BagOfPrimitives target = new BagOfPrimitives();\n    assertFalse(gson.toJson(target).contains(\"DEFAULT_VALUE\"));\n  }",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 71,col 5)-(line 71,col 51)",
            "(line 72,col 5)-(line 72,col 63)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.UncategorizedTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/UncategorizedTest.java",
        "signature": "com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization()",
        "snippet": "  public void testGsonInstanceReusableForSerializationAndDeserialization() {\n    BagOfPrimitives bag = new BagOfPrimitives();\n    String json = gson.toJson(bag);\n    BagOfPrimitives deserialized = gson.fromJson(json, BagOfPrimitives.class);\n    assertEquals(bag, deserialized);\n  }",
        "begin_line": 75,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 48)",
            "(line 77,col 5)-(line 77,col 35)",
            "(line 78,col 5)-(line 78,col 78)",
            "(line 79,col 5)-(line 79,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.UncategorizedTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/UncategorizedTest.java",
        "signature": "com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization()",
        "snippet": "  public void testReturningDerivedClassesDuringDeserialization() {\n    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseTypeAdapter()).create();\n    String json = \"{\\\"opType\\\":\\\"OP1\\\"}\";\n    Base base = gson.fromJson(json, Base.class);\n    assertTrue(base instanceof Derived1);\n    assertEquals(OperationType.OP1, base.opType);\n\n    json = \"{\\\"opType\\\":\\\"OP2\\\"}\";\n    base = gson.fromJson(json, Base.class);\n    assertTrue(base instanceof Derived2);\n    assertEquals(OperationType.OP2, base.opType);\n  }",
        "begin_line": 87,
        "end_line": 98,
        "comment": "\n   * This test ensures that a custom deserializer is able to return a derived class instance for a\n   * base class object. For a motivation for this test, see Issue 37 and\n   * http://groups.google.com/group/google-gson/browse_thread/thread/677d56e9976d7761\n   ",
        "child_ranges": [
            "(line 88,col 5)-(line 88,col 98)",
            "(line 89,col 5)-(line 89,col 41)",
            "(line 90,col 5)-(line 90,col 48)",
            "(line 91,col 5)-(line 91,col 41)",
            "(line 92,col 5)-(line 92,col 49)",
            "(line 94,col 5)-(line 94,col 34)",
            "(line 95,col 5)-(line 95,col 43)",
            "(line 96,col 5)-(line 96,col 41)",
            "(line 97,col 5)-(line 97,col 49)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.UncategorizedTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/UncategorizedTest.java",
        "signature": "com.google.gson.functional.UncategorizedTest.testTrailingWhitespace()",
        "snippet": "  public void testTrailingWhitespace() throws Exception {\n    List<Integer> integers = gson.fromJson(\"[1,2,3]  \\n\\n  \",\n        new TypeToken<List<Integer>>() {}.getType());\n    assertEquals(Arrays.asList(1, 2, 3), integers);\n  }",
        "begin_line": 104,
        "end_line": 108,
        "comment": "\n   * Test that trailing whitespace is ignored.\n   * http://code.google.com/p/google-gson/issues/detail?id=302\n   ",
        "child_ranges": [
            "(line 105,col 5)-(line 106,col 53)",
            "(line 107,col 5)-(line 107,col 51)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.UncategorizedTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/UncategorizedTest.java",
        "signature": "com.google.gson.functional.UncategorizedTest.Derived1.Derived1()",
        "snippet": "    Derived1() { opType = OperationType.OP1; }",
        "begin_line": 115,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 115,col 18)-(line 115,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.UncategorizedTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/UncategorizedTest.java",
        "signature": "com.google.gson.functional.UncategorizedTest.Derived2.Derived2()",
        "snippet": "    Derived2() { opType = OperationType.OP2; }",
        "begin_line": 118,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 118,col 18)-(line 118,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.UncategorizedTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/UncategorizedTest.java",
        "signature": "com.google.gson.functional.UncategorizedTest.BaseTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
        "snippet": "    @Override public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      String opTypeStr = json.getAsJsonObject().get(\"opType\").getAsString();\n      OperationType opType = OperationType.valueOf(opTypeStr);\n      switch (opType) {\n      case OP1:\n        return new Derived1();\n      case OP2:\n        return new Derived2();\n      }\n      throw new JsonParseException(\"unknown type: \" + json);\n    }",
        "begin_line": 121,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 123,col 7)-(line 123,col 76)",
            "(line 124,col 7)-(line 124,col 62)",
            "(line 125,col 7)-(line 130,col 7)",
            "(line 131,col 7)-(line 131,col 60)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 48,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 50,col 5)-(line 50,col 18)",
            "(line 51,col 5)-(line 51,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization()",
        "snippet": "  public void testParameterizedTypesSerialization() throws Exception {\n    MyParameterizedType<Integer> src = new MyParameterizedType<Integer>(10);\n    Type typeOfSrc = new TypeToken<MyParameterizedType<Integer>>() {}.getType();\n    String json = gson.toJson(src, typeOfSrc);\n    assertEquals(src.getExpectedJson(), json);\n  }",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 55,col 76)",
            "(line 56,col 5)-(line 56,col 80)",
            "(line 57,col 5)-(line 57,col 46)",
            "(line 58,col 5)-(line 58,col 46)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization()",
        "snippet": "  public void testParameterizedTypeDeserialization() throws Exception {\n    BagOfPrimitives bag = new BagOfPrimitives();\n    MyParameterizedType<BagOfPrimitives> expected = new MyParameterizedType<BagOfPrimitives>(bag);\n    Type expectedType = new TypeToken<MyParameterizedType<BagOfPrimitives>>() {}.getType();\n    BagOfPrimitives bagDefaultInstance = new BagOfPrimitives();\n    Gson gson = new GsonBuilder().registerTypeAdapter(\n        expectedType, new MyParameterizedTypeInstanceCreator<BagOfPrimitives>(bagDefaultInstance))\n        .create();\n\n    String json = expected.getExpectedJson();\n    MyParameterizedType<BagOfPrimitives> actual = gson.fromJson(json, expectedType);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 61,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 48)",
            "(line 63,col 5)-(line 63,col 98)",
            "(line 64,col 5)-(line 64,col 91)",
            "(line 65,col 5)-(line 65,col 63)",
            "(line 66,col 5)-(line 68,col 18)",
            "(line 70,col 5)-(line 70,col 45)",
            "(line 71,col 5)-(line 71,col 84)",
            "(line 72,col 5)-(line 72,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization()",
        "snippet": "  public void testTypesWithMultipleParametersSerialization() throws Exception {\n    MultiParameters<Integer, Float, Double, String, BagOfPrimitives> src =\n        new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D,\n            \"abc\", new BagOfPrimitives());\n    Type typeOfSrc = new TypeToken<MultiParameters<Integer, Float, Double, String,\n        BagOfPrimitives>>() {}.getType();\n    String json = gson.toJson(src, typeOfSrc);\n    String expected = \"{\\\"a\\\":10,\\\"b\\\":1.0,\\\"c\\\":2.1,\\\"d\\\":\\\"abc\\\",\"\n        + \"\\\"e\\\":{\\\"longValue\\\":0,\\\"intValue\\\":0,\\\"booleanValue\\\":false,\\\"stringValue\\\":\\\"\\\"}}\";\n    assertEquals(expected, json);\n  }",
        "begin_line": 75,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 78,col 42)",
            "(line 79,col 5)-(line 80,col 41)",
            "(line 81,col 5)-(line 81,col 46)",
            "(line 82,col 5)-(line 83,col 96)",
            "(line 84,col 5)-(line 84,col 33)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization()",
        "snippet": "  public void testTypesWithMultipleParametersDeserialization() throws Exception {\n    Type typeOfTarget = new TypeToken<MultiParameters<Integer, Float, Double, String,\n        BagOfPrimitives>>() {}.getType();\n    String json = \"{\\\"a\\\":10,\\\"b\\\":1.0,\\\"c\\\":2.1,\\\"d\\\":\\\"abc\\\",\"\n        + \"\\\"e\\\":{\\\"longValue\\\":0,\\\"intValue\\\":0,\\\"booleanValue\\\":false,\\\"stringValue\\\":\\\"\\\"}}\";\n    MultiParameters<Integer, Float, Double, String, BagOfPrimitives> target =\n        gson.fromJson(json, typeOfTarget);\n    MultiParameters<Integer, Float, Double, String, BagOfPrimitives> expected =\n        new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D,\n            \"abc\", new BagOfPrimitives());\n    assertEquals(expected, target);\n  }",
        "begin_line": 87,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 89,col 41)",
            "(line 90,col 5)-(line 91,col 96)",
            "(line 92,col 5)-(line 93,col 42)",
            "(line 94,col 5)-(line 96,col 42)",
            "(line 97,col 5)-(line 97,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer()",
        "snippet": "  public void testParameterizedTypeWithCustomSerializer() {\n    Type ptIntegerType = new TypeToken<MyParameterizedType<Integer>>() {}.getType();\n    Type ptStringType = new TypeToken<MyParameterizedType<String>>() {}.getType();\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(ptIntegerType, new MyParameterizedTypeAdapter<Integer>())\n        .registerTypeAdapter(ptStringType, new MyParameterizedTypeAdapter<String>())\n        .create();\n    MyParameterizedType<Integer> intTarget = new MyParameterizedType<Integer>(10);\n    String json = gson.toJson(intTarget, ptIntegerType);\n    assertEquals(MyParameterizedTypeAdapter.<Integer>getExpectedJson(intTarget), json);\n\n    MyParameterizedType<String> stringTarget = new MyParameterizedType<String>(\"abc\");\n    json = gson.toJson(stringTarget, ptStringType);\n    assertEquals(MyParameterizedTypeAdapter.<String>getExpectedJson(stringTarget), json);\n  }",
        "begin_line": 100,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 101,col 84)",
            "(line 102,col 5)-(line 102,col 82)",
            "(line 103,col 5)-(line 106,col 18)",
            "(line 107,col 5)-(line 107,col 82)",
            "(line 108,col 5)-(line 108,col 56)",
            "(line 109,col 5)-(line 109,col 87)",
            "(line 111,col 5)-(line 111,col 86)",
            "(line 112,col 5)-(line 112,col 51)",
            "(line 113,col 5)-(line 113,col 89)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer()",
        "snippet": "  public void testParameterizedTypesWithCustomDeserializer() {\n    Type ptIntegerType = new TypeToken<MyParameterizedType<Integer>>() {}.getType();\n    Type ptStringType = new TypeToken<MyParameterizedType<String>>() {}.getType();\n    Gson gson = new GsonBuilder().registerTypeAdapter(\n        ptIntegerType, new MyParameterizedTypeAdapter<Integer>())\n        .registerTypeAdapter(ptStringType, new MyParameterizedTypeAdapter<String>())\n        .registerTypeAdapter(ptStringType, new MyParameterizedTypeInstanceCreator<String>(\"\"))\n        .registerTypeAdapter(ptIntegerType,\n            new MyParameterizedTypeInstanceCreator<Integer>(new Integer(0)))\n        .create();\n\n    MyParameterizedType<Integer> src = new MyParameterizedType<Integer>(10);\n    String json = MyParameterizedTypeAdapter.<Integer>getExpectedJson(src);\n    MyParameterizedType<Integer> intTarget = gson.fromJson(json, ptIntegerType);\n    assertEquals(10, intTarget.value.intValue());\n\n    MyParameterizedType<String> srcStr = new MyParameterizedType<String>(\"abc\");\n    json = MyParameterizedTypeAdapter.<String>getExpectedJson(srcStr);\n    MyParameterizedType<String> stringTarget = gson.fromJson(json, ptStringType);\n    assertEquals(\"abc\", stringTarget.value);\n  }",
        "begin_line": 116,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 117,col 5)-(line 117,col 84)",
            "(line 118,col 5)-(line 118,col 82)",
            "(line 119,col 5)-(line 125,col 18)",
            "(line 127,col 5)-(line 127,col 76)",
            "(line 128,col 5)-(line 128,col 75)",
            "(line 129,col 5)-(line 129,col 80)",
            "(line 130,col 5)-(line 130,col 49)",
            "(line 132,col 5)-(line 132,col 80)",
            "(line 133,col 5)-(line 133,col 70)",
            "(line 134,col 5)-(line 134,col 81)",
            "(line 135,col 5)-(line 135,col 44)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization()",
        "snippet": "  public void testParameterizedTypesWithWriterSerialization() throws Exception {\n    Writer writer = new StringWriter();\n    MyParameterizedType<Integer> src = new MyParameterizedType<Integer>(10);\n    Type typeOfSrc = new TypeToken<MyParameterizedType<Integer>>() {}.getType();\n    gson.toJson(src, typeOfSrc, writer);\n    assertEquals(src.getExpectedJson(), writer.toString());\n  }",
        "begin_line": 138,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 139,col 5)-(line 139,col 39)",
            "(line 140,col 5)-(line 140,col 76)",
            "(line 141,col 5)-(line 141,col 80)",
            "(line 142,col 5)-(line 142,col 40)",
            "(line 143,col 5)-(line 143,col 59)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization()",
        "snippet": "  public void testParameterizedTypeWithReaderDeserialization() throws Exception {\n    BagOfPrimitives bag = new BagOfPrimitives();\n    MyParameterizedType<BagOfPrimitives> expected = new MyParameterizedType<BagOfPrimitives>(bag);\n    Type expectedType = new TypeToken<MyParameterizedType<BagOfPrimitives>>() {}.getType();\n    BagOfPrimitives bagDefaultInstance = new BagOfPrimitives();\n    Gson gson = new GsonBuilder().registerTypeAdapter(\n        expectedType, new MyParameterizedTypeInstanceCreator<BagOfPrimitives>(bagDefaultInstance))\n        .create();\n\n    Reader json = new StringReader(expected.getExpectedJson());\n    MyParameterizedType<Integer> actual = gson.fromJson(json, expectedType);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 146,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 147,col 5)-(line 147,col 48)",
            "(line 148,col 5)-(line 148,col 98)",
            "(line 149,col 5)-(line 149,col 91)",
            "(line 150,col 5)-(line 150,col 63)",
            "(line 151,col 5)-(line 153,col 18)",
            "(line 155,col 5)-(line 155,col 63)",
            "(line 156,col 5)-(line 156,col 76)",
            "(line 157,col 5)-(line 157,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testVariableTypeFieldsAndGenericArraysSerialization() throws Exception {\n    Integer obj = 0;\n    Integer[] array = { 1, 2, 3 };\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(4);\n    list.add(5);\n    List<Integer>[] arrayOfLists = new List[] { list, list };\n\n    Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() {}.getType();\n    ObjectWithTypeVariables<Integer> objToSerialize =\n        new ObjectWithTypeVariables<Integer>(obj, array, list, arrayOfLists, list, arrayOfLists);\n    String json = gson.toJson(objToSerialize, typeOfSrc);\n\n    assertEquals(objToSerialize.getExpectedJson(), json);\n  }",
        "begin_line": 160,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 20)",
            "(line 163,col 5)-(line 163,col 34)",
            "(line 164,col 5)-(line 164,col 50)",
            "(line 165,col 5)-(line 165,col 16)",
            "(line 166,col 5)-(line 166,col 16)",
            "(line 167,col 5)-(line 167,col 61)",
            "(line 169,col 5)-(line 169,col 84)",
            "(line 170,col 5)-(line 171,col 97)",
            "(line 172,col 5)-(line 172,col 57)",
            "(line 174,col 5)-(line 174,col 57)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testVariableTypeFieldsAndGenericArraysDeserialization() throws Exception {\n    Integer obj = 0;\n    Integer[] array = { 1, 2, 3 };\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(4);\n    list.add(5);\n    List<Integer>[] arrayOfLists = new List[] { list, list };\n\n    Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() {}.getType();\n    ObjectWithTypeVariables<Integer> objToSerialize =\n        new ObjectWithTypeVariables<Integer>(obj, array, list, arrayOfLists, list, arrayOfLists);\n    String json = gson.toJson(objToSerialize, typeOfSrc);\n    ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc);\n\n    assertEquals(objAfterDeserialization.getExpectedJson(), json);\n  }",
        "begin_line": 177,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 179,col 5)-(line 179,col 20)",
            "(line 180,col 5)-(line 180,col 34)",
            "(line 181,col 5)-(line 181,col 50)",
            "(line 182,col 5)-(line 182,col 16)",
            "(line 183,col 5)-(line 183,col 16)",
            "(line 184,col 5)-(line 184,col 61)",
            "(line 186,col 5)-(line 186,col 84)",
            "(line 187,col 5)-(line 188,col 97)",
            "(line 189,col 5)-(line 189,col 57)",
            "(line 190,col 5)-(line 190,col 94)",
            "(line 192,col 5)-(line 192,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization()",
        "snippet": "  public void testVariableTypeDeserialization() throws Exception {\n    Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() {}.getType();\n    ObjectWithTypeVariables<Integer> objToSerialize =\n        new ObjectWithTypeVariables<Integer>(0, null, null, null, null, null);\n    String json = gson.toJson(objToSerialize, typeOfSrc);\n    ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc);\n\n    assertEquals(objAfterDeserialization.getExpectedJson(), json);\n  }",
        "begin_line": 195,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 196,col 5)-(line 196,col 84)",
            "(line 197,col 5)-(line 198,col 78)",
            "(line 199,col 5)-(line 199,col 57)",
            "(line 200,col 5)-(line 200,col 94)",
            "(line 202,col 5)-(line 202,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization()",
        "snippet": "  public void testVariableTypeArrayDeserialization() throws Exception {\n    Integer[] array = { 1, 2, 3 };\n\n    Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() {}.getType();\n    ObjectWithTypeVariables<Integer> objToSerialize =\n        new ObjectWithTypeVariables<Integer>(null, array, null, null, null, null);\n    String json = gson.toJson(objToSerialize, typeOfSrc);\n    ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc);\n\n    assertEquals(objAfterDeserialization.getExpectedJson(), json);\n  }",
        "begin_line": 205,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 206,col 5)-(line 206,col 34)",
            "(line 208,col 5)-(line 208,col 84)",
            "(line 209,col 5)-(line 210,col 82)",
            "(line 211,col 5)-(line 211,col 57)",
            "(line 212,col 5)-(line 212,col 94)",
            "(line 214,col 5)-(line 214,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization()",
        "snippet": "  public void testParameterizedTypeWithVariableTypeDeserialization() throws Exception {\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(4);\n    list.add(5);\n\n    Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() {}.getType();\n    ObjectWithTypeVariables<Integer> objToSerialize =\n        new ObjectWithTypeVariables<Integer>(null, null, list, null, null, null);\n    String json = gson.toJson(objToSerialize, typeOfSrc);\n    ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc);\n\n    assertEquals(objAfterDeserialization.getExpectedJson(), json);\n  }",
        "begin_line": 217,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 218,col 5)-(line 218,col 50)",
            "(line 219,col 5)-(line 219,col 16)",
            "(line 220,col 5)-(line 220,col 16)",
            "(line 222,col 5)-(line 222,col 84)",
            "(line 223,col 5)-(line 224,col 81)",
            "(line 225,col 5)-(line 225,col 57)",
            "(line 226,col 5)-(line 226,col 94)",
            "(line 228,col 5)-(line 228,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testParameterizedTypeGenericArraysSerialization() throws Exception {\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(1);\n    list.add(2);\n    List<Integer>[] arrayOfLists = new List[] { list, list };\n\n    Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() {}.getType();\n    ObjectWithTypeVariables<Integer> objToSerialize =\n        new ObjectWithTypeVariables<Integer>(null, null, null, arrayOfLists, null, null);\n    String json = gson.toJson(objToSerialize, typeOfSrc);\n    assertEquals(\"{\\\"arrayOfListOfTypeParameters\\\":[[1,2],[1,2]]}\", json);\n  }",
        "begin_line": 231,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 233,col 5)-(line 233,col 50)",
            "(line 234,col 5)-(line 234,col 16)",
            "(line 235,col 5)-(line 235,col 16)",
            "(line 236,col 5)-(line 236,col 61)",
            "(line 238,col 5)-(line 238,col 84)",
            "(line 239,col 5)-(line 240,col 89)",
            "(line 241,col 5)-(line 241,col 57)",
            "(line 242,col 5)-(line 242,col 74)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testParameterizedTypeGenericArraysDeserialization() throws Exception {\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(1);\n    list.add(2);\n    List<Integer>[] arrayOfLists = new List[] { list, list };\n\n    Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() {}.getType();\n    ObjectWithTypeVariables<Integer> objToSerialize =\n        new ObjectWithTypeVariables<Integer>(null, null, null, arrayOfLists, null, null);\n    String json = gson.toJson(objToSerialize, typeOfSrc);\n    ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc);\n\n    assertEquals(objAfterDeserialization.getExpectedJson(), json);\n  }",
        "begin_line": 245,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 247,col 5)-(line 247,col 50)",
            "(line 248,col 5)-(line 248,col 16)",
            "(line 249,col 5)-(line 249,col 16)",
            "(line 250,col 5)-(line 250,col 61)",
            "(line 252,col 5)-(line 252,col 84)",
            "(line 253,col 5)-(line 254,col 89)",
            "(line 255,col 5)-(line 255,col 57)",
            "(line 256,col 5)-(line 256,col 94)",
            "(line 258,col 5)-(line 258,col 66)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.ObjectWithTypeVariables()",
        "snippet": "    @SuppressWarnings(\"unused\")\n    private ObjectWithTypeVariables() {\n      this(null, null, null, null, null, null);\n    }",
        "begin_line": 275,
        "end_line": 278,
        "comment": " For use by Gson",
        "child_ranges": [
            "(line 277,col 7)-(line 277,col 47)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.ObjectWithTypeVariables(T, T[], java.util.List<T>, java.util.List<T>[], java.util.List<? extends T>, java.util.List<? extends T>[])",
        "snippet": "    public ObjectWithTypeVariables(T obj, T[] array, List<T> list, List<T>[] arrayOfList,\n        List<? extends T> wildcardList, List<? extends T>[] arrayOfWildcardList) {\n      this.typeParameterObj = obj;\n      this.typeParameterArray = array;\n      this.listOfTypeParameters = list;\n      this.arrayOfListOfTypeParameters = arrayOfList;\n      this.listOfWildcardTypeParameters = wildcardList;\n      this.arrayOfListOfWildcardTypeParameters = arrayOfWildcardList;\n    }",
        "begin_line": 280,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 282,col 7)-(line 282,col 34)",
            "(line 283,col 7)-(line 283,col 38)",
            "(line 284,col 7)-(line 284,col 39)",
            "(line 285,col 7)-(line 285,col 53)",
            "(line 286,col 7)-(line 286,col 55)",
            "(line 287,col 7)-(line 287,col 69)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.getExpectedJson()",
        "snippet": "    public String getExpectedJson() {\n      StringBuilder sb = new StringBuilder().append(\"{\");\n\n      boolean needsComma = false;\n      if (typeParameterObj != null) {\n        sb.append(\"\\\"typeParameterObj\\\":\").append(toString(typeParameterObj));\n        needsComma = true;\n      }\n\n      if (typeParameterArray != null) {\n        if (needsComma) {\n          sb.append(',');\n        }\n        sb.append(\"\\\"typeParameterArray\\\":[\");\n        appendObjectsToBuilder(sb, Arrays.asList(typeParameterArray));\n        sb.append(']');\n        needsComma = true;\n      }\n\n      if (listOfTypeParameters != null) {\n        if (needsComma) {\n          sb.append(',');\n        }\n        sb.append(\"\\\"listOfTypeParameters\\\":[\");\n        appendObjectsToBuilder(sb, listOfTypeParameters);\n        sb.append(']');\n        needsComma = true;\n      }\n\n      if (arrayOfListOfTypeParameters != null) {\n        if (needsComma) {\n          sb.append(',');\n        }\n        sb.append(\"\\\"arrayOfListOfTypeParameters\\\":[\");\n        appendObjectsToBuilder(sb, arrayOfListOfTypeParameters);\n        sb.append(']');\n        needsComma = true;\n      }\n\n      if (listOfWildcardTypeParameters != null) {\n        if (needsComma) {\n          sb.append(',');\n        }\n        sb.append(\"\\\"listOfWildcardTypeParameters\\\":[\");\n        appendObjectsToBuilder(sb, listOfWildcardTypeParameters);\n        sb.append(']');\n        needsComma = true;\n      }\n\n      if (arrayOfListOfWildcardTypeParameters != null) {\n        if (needsComma) {\n          sb.append(',');\n        }\n        sb.append(\"\\\"arrayOfListOfWildcardTypeParameters\\\":[\");\n        appendObjectsToBuilder(sb, arrayOfListOfWildcardTypeParameters);\n        sb.append(']');\n        needsComma = true;\n      }\n      sb.append('}');\n      return sb.toString();\n    }",
        "begin_line": 290,
        "end_line": 350,
        "comment": "",
        "child_ranges": [
            "(line 291,col 7)-(line 291,col 57)",
            "(line 293,col 7)-(line 293,col 33)",
            "(line 294,col 7)-(line 297,col 7)",
            "(line 299,col 7)-(line 307,col 7)",
            "(line 309,col 7)-(line 317,col 7)",
            "(line 319,col 7)-(line 327,col 7)",
            "(line 329,col 7)-(line 337,col 7)",
            "(line 339,col 7)-(line 347,col 7)",
            "(line 348,col 7)-(line 348,col 21)",
            "(line 349,col 7)-(line 349,col 27)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.appendObjectsToBuilder(java.lang.StringBuilder, java.lang.Iterable<? extends T>)",
        "snippet": "    private void appendObjectsToBuilder(StringBuilder sb, Iterable<? extends T> iterable) {\n      boolean isFirst = true;\n      for (T obj : iterable) {\n        if (!isFirst) {\n          sb.append(',');\n        }\n        isFirst = false;\n        sb.append(toString(obj));\n      }\n    }",
        "begin_line": 352,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 353,col 7)-(line 353,col 29)",
            "(line 354,col 7)-(line 360,col 7)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.appendObjectsToBuilder(java.lang.StringBuilder, java.util.List<? extends T>[])",
        "snippet": "    private void appendObjectsToBuilder(StringBuilder sb, List<? extends T>[] arrayOfList) {\n      boolean isFirst = true;\n      for (List<? extends T> list : arrayOfList) {\n        if (!isFirst) {\n          sb.append(',');\n        }\n        isFirst = false;\n        if (list != null) {\n          sb.append('[');\n          appendObjectsToBuilder(sb, list);\n          sb.append(']');\n        } else {\n          sb.append(\"null\");\n        }\n      }\n    }",
        "begin_line": 363,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 364,col 7)-(line 364,col 29)",
            "(line 365,col 7)-(line 377,col 7)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.toString(T)",
        "snippet": "    public String toString(T obj) {\n      return obj.toString();\n    }",
        "begin_line": 380,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 381,col 7)-(line 381,col 28)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.MultiParameters.MultiParameters()",
        "snippet": "    @SuppressWarnings(\"unused\")\n    private MultiParameters() {\n    }",
        "begin_line": 392,
        "end_line": 394,
        "comment": " For use by Gson",
        "child_ranges": []
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.MultiParameters.MultiParameters(A, B, C, D, E)",
        "snippet": "    MultiParameters(A a, B b, C c, D d, E e) {\n      super();\n      this.a = a;\n      this.b = b;\n      this.c = c;\n      this.d = d;\n      this.e = e;\n    }",
        "begin_line": 395,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 396,col 7)-(line 396,col 14)",
            "(line 397,col 7)-(line 397,col 17)",
            "(line 398,col 7)-(line 398,col 17)",
            "(line 399,col 7)-(line 399,col 17)",
            "(line 400,col 7)-(line 400,col 17)",
            "(line 401,col 7)-(line 401,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.MultiParameters.hashCode()",
        "snippet": "    @Override\n    public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      result = prime * result + ((a == null) ? 0 : a.hashCode());\n      result = prime * result + ((b == null) ? 0 : b.hashCode());\n      result = prime * result + ((c == null) ? 0 : c.hashCode());\n      result = prime * result + ((d == null) ? 0 : d.hashCode());\n      result = prime * result + ((e == null) ? 0 : e.hashCode());\n      return result;\n    }",
        "begin_line": 403,
        "end_line": 413,
        "comment": "",
        "child_ranges": [
            "(line 405,col 7)-(line 405,col 27)",
            "(line 406,col 7)-(line 406,col 21)",
            "(line 407,col 7)-(line 407,col 65)",
            "(line 408,col 7)-(line 408,col 65)",
            "(line 409,col 7)-(line 409,col 65)",
            "(line 410,col 7)-(line 410,col 65)",
            "(line 411,col 7)-(line 411,col 65)",
            "(line 412,col 7)-(line 412,col 20)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.MultiParameters.equals(java.lang.Object)",
        "snippet": "    @Override\n    @SuppressWarnings(\"unchecked\")\n    public boolean equals(Object obj) {\n      if (this == obj) {\n        return true;\n      }\n      if (obj == null) {\n        return false;\n      }\n      if (getClass() != obj.getClass()) {\n        return false;\n      }\n      MultiParameters<A, B, C, D, E> other = (MultiParameters<A, B, C, D, E>) obj;\n      if (a == null) {\n        if (other.a != null) {\n          return false;\n        }\n      } else if (!a.equals(other.a)) {\n        return false;\n      }\n      if (b == null) {\n        if (other.b != null) {\n          return false;\n        }\n      } else if (!b.equals(other.b)) {\n        return false;\n      }\n      if (c == null) {\n        if (other.c != null) {\n          return false;\n        }\n      } else if (!c.equals(other.c)) {\n        return false;\n      }\n      if (d == null) {\n        if (other.d != null) {\n          return false;\n        }\n      } else if (!d.equals(other.d)) {\n        return false;\n      }\n      if (e == null) {\n        if (other.e != null) {\n          return false;\n        }\n      } else if (!e.equals(other.e)) {\n        return false;\n      }\n      return true;\n    }",
        "begin_line": 414,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 417,col 7)-(line 419,col 7)",
            "(line 420,col 7)-(line 422,col 7)",
            "(line 423,col 7)-(line 425,col 7)",
            "(line 426,col 7)-(line 426,col 82)",
            "(line 427,col 7)-(line 433,col 7)",
            "(line 434,col 7)-(line 440,col 7)",
            "(line 441,col 7)-(line 447,col 7)",
            "(line 448,col 7)-(line 454,col 7)",
            "(line 455,col 7)-(line 461,col 7)",
            "(line 462,col 7)-(line 462,col 18)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization()",
        "snippet": "  public void testDeepParameterizedTypeSerialization() {\n    Amount<MyQuantity> amount = new Amount<MyQuantity>();\n    String json = gson.toJson(amount);\n    assertTrue(json.contains(\"value\"));\n    assertTrue(json.contains(\"30\"));    \n  }",
        "begin_line": 489,
        "end_line": 494,
        "comment": "",
        "child_ranges": [
            "(line 490,col 5)-(line 490,col 57)",
            "(line 491,col 5)-(line 491,col 38)",
            "(line 492,col 5)-(line 492,col 39)",
            "(line 493,col 5)-(line 493,col 36)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.ParameterizedTypesTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
        "signature": "com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization()",
        "snippet": "  public void testDeepParameterizedTypeDeserialization() {\n    String json = \"{value:30}\";\n    Type type = new TypeToken<Amount<MyQuantity>>() {}.getType();    \n    Amount<MyQuantity> amount = gson.fromJson(json, type);\n    assertEquals(30, amount.value);\n  }",
        "begin_line": 496,
        "end_line": 501,
        "comment": "",
        "child_ranges": [
            "(line 497,col 5)-(line 497,col 31)",
            "(line 498,col 5)-(line 498,col 65)",
            "(line 499,col 5)-(line 499,col 58)",
            "(line 500,col 5)-(line 500,col 35)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RawSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RawSerializationTest.java",
        "signature": "com.google.gson.functional.RawSerializationTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 35,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 37,col 5)-(line 37,col 18)",
            "(line 38,col 5)-(line 38,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RawSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RawSerializationTest.java",
        "signature": "com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives()",
        "snippet": "  public void testCollectionOfPrimitives() {\n    Collection<Integer> ints = Arrays.asList(1, 2, 3, 4, 5);\n    String json = gson.toJson(ints);\n    assertEquals(\"[1,2,3,4,5]\", json);\n  }",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 42,col 60)",
            "(line 43,col 5)-(line 43,col 36)",
            "(line 44,col 5)-(line 44,col 38)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RawSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RawSerializationTest.java",
        "signature": "com.google.gson.functional.RawSerializationTest.testCollectionOfObjects()",
        "snippet": "  public void testCollectionOfObjects() {\n    Collection<Foo> foos = Arrays.asList(new Foo(1), new Foo(2));\n    String json = gson.toJson(foos);\n    assertEquals(\"[{\\\"b\\\":1},{\\\"b\\\":2}]\", json);\n  }",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 48,col 65)",
            "(line 49,col 5)-(line 49,col 36)",
            "(line 50,col 5)-(line 50,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RawSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RawSerializationTest.java",
        "signature": "com.google.gson.functional.RawSerializationTest.testParameterizedObject()",
        "snippet": "  public void testParameterizedObject() {\n    Bar<Foo> bar = new Bar<Foo>(new Foo(1));\n    String expectedJson = \"{\\\"t\\\":{\\\"b\\\":1}}\";\n    // Ensure that serialization works without specifying the type explicitly\n    String json = gson.toJson(bar);\n    assertEquals(expectedJson, json);\n    // Ensure that serialization also works when the type is specified explicitly\n    json = gson.toJson(bar, new TypeToken<Bar<Foo>>(){}.getType());\n    assertEquals(expectedJson, json);\n  }",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 44)",
            "(line 55,col 5)-(line 55,col 46)",
            "(line 57,col 5)-(line 57,col 35)",
            "(line 58,col 5)-(line 58,col 37)",
            "(line 60,col 5)-(line 60,col 67)",
            "(line 61,col 5)-(line 61,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RawSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RawSerializationTest.java",
        "signature": "com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject()",
        "snippet": "  public void testTwoLevelParameterizedObject() {\n    Bar<Bar<Foo>> bar = new Bar<Bar<Foo>>(new Bar<Foo>(new Foo(1)));\n    String expectedJson = \"{\\\"t\\\":{\\\"t\\\":{\\\"b\\\":1}}}\";\n    // Ensure that serialization works without specifying the type explicitly\n    String json = gson.toJson(bar);\n    assertEquals(expectedJson, json);\n    // Ensure that serialization also works when the type is specified explicitly\n    json = gson.toJson(bar, new TypeToken<Bar<Bar<Foo>>>(){}.getType());\n    assertEquals(expectedJson, json);\n  }",
        "begin_line": 64,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 65,col 5)-(line 65,col 68)",
            "(line 66,col 5)-(line 66,col 54)",
            "(line 68,col 5)-(line 68,col 35)",
            "(line 69,col 5)-(line 69,col 37)",
            "(line 71,col 5)-(line 71,col 72)",
            "(line 72,col 5)-(line 72,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RawSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RawSerializationTest.java",
        "signature": "com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject()",
        "snippet": "  public void testThreeLevelParameterizedObject() {\n    Bar<Bar<Bar<Foo>>> bar = new Bar<Bar<Bar<Foo>>>(new Bar<Bar<Foo>>(new Bar<Foo>(new Foo(1))));\n    String expectedJson = \"{\\\"t\\\":{\\\"t\\\":{\\\"t\\\":{\\\"b\\\":1}}}}\";\n    // Ensure that serialization works without specifying the type explicitly\n    String json = gson.toJson(bar);\n    assertEquals(expectedJson, json);\n    // Ensure that serialization also works when the type is specified explicitly\n    json = gson.toJson(bar, new TypeToken<Bar<Bar<Bar<Foo>>>>(){}.getType());\n    assertEquals(expectedJson, json);\n  }",
        "begin_line": 75,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 97)",
            "(line 77,col 5)-(line 77,col 62)",
            "(line 79,col 5)-(line 79,col 35)",
            "(line 80,col 5)-(line 80,col 37)",
            "(line 82,col 5)-(line 82,col 77)",
            "(line 83,col 5)-(line 83,col 37)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RawSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RawSerializationTest.java",
        "signature": "com.google.gson.functional.RawSerializationTest.Foo.Foo(int)",
        "snippet": "    Foo(int b) {\n      this.b = b;\n    }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 7)-(line 90,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.RawSerializationTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/RawSerializationTest.java",
        "signature": "com.google.gson.functional.RawSerializationTest.Bar.Bar(T)",
        "snippet": "    Bar(T t) {\n      this.t = t;\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 98,col 7)-(line 98,col 17)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EscapingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EscapingTest.java",
        "signature": "com.google.gson.functional.EscapingTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    gson = new Gson();\n  }",
        "begin_line": 35,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 37,col 5)-(line 37,col 18)",
            "(line 38,col 5)-(line 38,col 22)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EscapingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EscapingTest.java",
        "signature": "com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray()",
        "snippet": "  public void testEscapingQuotesInStringArray() throws Exception {\n    String[] valueWithQuotes = { \"beforeQuote\\\"afterQuote\" };\n    String jsonRepresentation = gson.toJson(valueWithQuotes);\n    String[] target = gson.fromJson(jsonRepresentation, String[].class);\n    assertEquals(1, target.length);\n    assertEquals(valueWithQuotes[0], target[0]);\n  }",
        "begin_line": 41,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 42,col 61)",
            "(line 43,col 5)-(line 43,col 61)",
            "(line 44,col 5)-(line 44,col 72)",
            "(line 45,col 5)-(line 45,col 35)",
            "(line 46,col 5)-(line 46,col 48)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EscapingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EscapingTest.java",
        "signature": "com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters()",
        "snippet": "  public void testEscapeAllHtmlCharacters() {\n    List<String> strings = new ArrayList<String>();\n    strings.add(\"<\");\n    strings.add(\">\");\n    strings.add(\"=\");\n    strings.add(\"&\");\n    strings.add(\"'\");\n    strings.add(\"\\\"\");\n    assertEquals(\"[\\\"\\\\u003c\\\",\\\"\\\\u003e\\\",\\\"\\\\u003d\\\",\\\"\\\\u0026\\\",\\\"\\\\u0027\\\",\\\"\\\\\\\"\\\"]\",\n        gson.toJson(strings));\n  }",
        "begin_line": 49,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 50,col 5)-(line 50,col 51)",
            "(line 51,col 5)-(line 51,col 21)",
            "(line 52,col 5)-(line 52,col 21)",
            "(line 53,col 5)-(line 53,col 21)",
            "(line 54,col 5)-(line 54,col 21)",
            "(line 55,col 5)-(line 55,col 21)",
            "(line 56,col 5)-(line 56,col 22)",
            "(line 57,col 5)-(line 58,col 30)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EscapingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EscapingTest.java",
        "signature": "com.google.gson.functional.EscapingTest.testEscapingObjectFields()",
        "snippet": "  public void testEscapingObjectFields() throws Exception {\n    BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, \"test with\\\" <script>\");\n    String jsonRepresentation = gson.toJson(objWithPrimitives);\n    assertFalse(jsonRepresentation.contains(\"<\"));\n    assertFalse(jsonRepresentation.contains(\">\"));\n    assertTrue(jsonRepresentation.contains(\"\\\\\\\"\"));\n\n    BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class);\n    assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson());\n  }",
        "begin_line": 61,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 97)",
            "(line 63,col 5)-(line 63,col 63)",
            "(line 64,col 5)-(line 64,col 50)",
            "(line 65,col 5)-(line 65,col 50)",
            "(line 66,col 5)-(line 66,col 52)",
            "(line 68,col 5)-(line 68,col 94)",
            "(line 69,col 5)-(line 69,col 88)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EscapingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EscapingTest.java",
        "signature": "com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization()",
        "snippet": "  public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception {\n    Gson escapeHtmlGson = new GsonBuilder().create();\n    Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create();\n    \n    BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, \"test' / w'ith\\\" / \\\\ <script>\");\n    String escapedJsonForm = escapeHtmlGson.toJson(target);\n    String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target);\n    assertFalse(escapedJsonForm.equals(nonEscapedJsonForm));\n    \n    assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class));\n    assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class));\n  }",
        "begin_line": 72,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 73,col 5)-(line 73,col 53)",
            "(line 74,col 5)-(line 74,col 77)",
            "(line 76,col 5)-(line 76,col 95)",
            "(line 77,col 5)-(line 77,col 59)",
            "(line 78,col 5)-(line 78,col 64)",
            "(line 79,col 5)-(line 79,col 60)",
            "(line 81,col 5)-(line 81,col 92)",
            "(line 82,col 5)-(line 82,col 93)"
        ]
    },
    {
        "class_name": "com.google.gson.functional.EscapingTest",
        "child_classes": [],
        "src_path": "gson/src/test/java/com/google/gson/functional/EscapingTest.java",
        "signature": "com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization()",
        "snippet": "  public void testGsonDoubleDeserialization() {\n    BagOfPrimitives expected = new BagOfPrimitives(3L, 4, true, \"value1\");\n    String json = gson.toJson(gson.toJson(expected));\n    String value = gson.fromJson(json, String.class);\n    BagOfPrimitives actual = gson.fromJson(value, BagOfPrimitives.class);\n    assertEquals(expected, actual);\n  }",
        "begin_line": 85,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 86,col 5)-(line 86,col 74)",
            "(line 87,col 5)-(line 87,col 53)",
            "(line 88,col 5)-(line 88,col 53)",
            "(line 89,col 5)-(line 89,col 73)",
            "(line 90,col 5)-(line 90,col 35)"
        ]
    }
]