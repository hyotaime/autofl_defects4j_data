{
  "filepath": "/tmp/Chart-2b/tests/org/jfree/chart/axis/junit/DateAxisTests.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "DateAxisTests",
      "is_interface": false,
      "parent_types": [
        "TestCase"
      ],
      "begin_line": 91,
      "end_line": 1190,
      "comment": "\n * Tests for the {@link DateAxis} class.\n "
    },
    {
      "type": "class_interface",
      "name": "MyDateAxis",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.axis.DateAxis"
      ],
      "begin_line": 93,
      "end_line": 107,
      "comment": ""
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.MyDateAxis.MyDateAxis(java.lang.String)",
      "begin_line": 100,
      "end_line": 102,
      "comment": "\n         * Creates a new instance.\n         *\n         * @param label  the label.\n         ",
      "child_ranges": [
        "(line 101,col 13)-(line 101,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.MyDateAxis.previousStandardDate(java.util.Date, org.jfree.chart.axis.DateTickUnit)",
      "begin_line": 104,
      "end_line": 106,
      "comment": "",
      "child_ranges": [
        "(line 105,col 13)-(line 105,col 55)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.suite()",
      "begin_line": 114,
      "end_line": 116,
      "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
      "child_ranges": [
        "(line 115,col 9)-(line 115,col 50)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.DateAxisTests(java.lang.String)",
      "begin_line": 123,
      "end_line": 125,
      "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
      "child_ranges": [
        "(line 124,col 9)-(line 124,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testEquals()",
      "begin_line": 130,
      "end_line": 162,
      "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
      "child_ranges": [
        "(line 132,col 9)-(line 132,col 43)",
        "(line 133,col 9)-(line 133,col 43)",
        "(line 134,col 9)-(line 134,col 34)",
        "(line 135,col 9)-(line 135,col 37)",
        "(line 136,col 9)-(line 136,col 59)",
        "(line 139,col 9)-(line 139,col 66)",
        "(line 140,col 9)-(line 140,col 35)",
        "(line 141,col 9)-(line 141,col 66)",
        "(line 142,col 9)-(line 142,col 34)",
        "(line 145,col 9)-(line 145,col 63)",
        "(line 146,col 9)-(line 146,col 35)",
        "(line 147,col 9)-(line 147,col 63)",
        "(line 148,col 9)-(line 148,col 34)",
        "(line 151,col 9)-(line 151,col 57)",
        "(line 152,col 9)-(line 152,col 35)",
        "(line 153,col 9)-(line 153,col 57)",
        "(line 154,col 9)-(line 154,col 34)",
        "(line 157,col 9)-(line 157,col 75)",
        "(line 158,col 9)-(line 158,col 35)",
        "(line 159,col 9)-(line 159,col 75)",
        "(line 160,col 9)-(line 160,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.test1472942()",
      "begin_line": 168,
      "end_line": 178,
      "comment": "\n     * A test for bug report 1472942.  The DateFormat.equals() method is not\n     * checking the range attribute.\n     ",
      "child_ranges": [
        "(line 169,col 9)-(line 169,col 43)",
        "(line 170,col 9)-(line 170,col 43)",
        "(line 171,col 9)-(line 171,col 34)",
        "(line 174,col 9)-(line 174,col 48)",
        "(line 175,col 9)-(line 175,col 35)",
        "(line 176,col 9)-(line 176,col 48)",
        "(line 177,col 9)-(line 177,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testHashCode()",
      "begin_line": 183,
      "end_line": 190,
      "comment": "\n     * Two objects that are equal are required to return the same hashCode.\n     ",
      "child_ranges": [
        "(line 184,col 9)-(line 184,col 43)",
        "(line 185,col 9)-(line 185,col 43)",
        "(line 186,col 9)-(line 186,col 34)",
        "(line 187,col 9)-(line 187,col 31)",
        "(line 188,col 9)-(line 188,col 31)",
        "(line 189,col 9)-(line 189,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testCloning()",
      "begin_line": 195,
      "end_line": 207,
      "comment": "\n     * Confirm that cloning works.\n     ",
      "child_ranges": [
        "(line 196,col 9)-(line 196,col 43)",
        "(line 197,col 9)-(line 197,col 27)",
        "(line 198,col 9)-(line 203,col 9)",
        "(line 204,col 9)-(line 204,col 29)",
        "(line 205,col 9)-(line 205,col 51)",
        "(line 206,col 9)-(line 206,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testSetRange()",
      "begin_line": 212,
      "end_line": 226,
      "comment": "\n     * Test that the setRange() method works.\n     ",
      "child_ranges": [
        "(line 214,col 9)-(line 214,col 50)",
        "(line 215,col 9)-(line 215,col 51)",
        "(line 216,col 9)-(line 216,col 48)",
        "(line 217,col 9)-(line 217,col 37)",
        "(line 218,col 9)-(line 218,col 49)",
        "(line 219,col 9)-(line 219,col 37)",
        "(line 220,col 9)-(line 220,col 30)",
        "(line 222,col 9)-(line 222,col 54)",
        "(line 223,col 9)-(line 223,col 47)",
        "(line 224,col 9)-(line 224,col 47)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testSetMaximumDate()",
      "begin_line": 231,
      "end_line": 246,
      "comment": "\n     * Test that the setMaximumDate() method works.\n     ",
      "child_ranges": [
        "(line 232,col 9)-(line 232,col 50)",
        "(line 233,col 9)-(line 233,col 31)",
        "(line 234,col 9)-(line 234,col 34)",
        "(line 235,col 9)-(line 235,col 50)",
        "(line 239,col 9)-(line 239,col 29)",
        "(line 240,col 9)-(line 240,col 45)",
        "(line 241,col 9)-(line 241,col 45)",
        "(line 242,col 9)-(line 242,col 32)",
        "(line 243,col 9)-(line 243,col 32)",
        "(line 244,col 9)-(line 244,col 32)",
        "(line 245,col 9)-(line 245,col 48)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testSetMinimumDate()",
      "begin_line": 251,
      "end_line": 264,
      "comment": "\n     * Test that the setMinimumDate() method works.\n     ",
      "child_ranges": [
        "(line 252,col 9)-(line 252,col 50)",
        "(line 253,col 9)-(line 253,col 29)",
        "(line 254,col 9)-(line 254,col 45)",
        "(line 255,col 9)-(line 255,col 32)",
        "(line 256,col 9)-(line 256,col 32)",
        "(line 257,col 9)-(line 257,col 48)",
        "(line 261,col 9)-(line 261,col 45)",
        "(line 262,col 9)-(line 262,col 32)",
        "(line 263,col 9)-(line 263,col 48)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.same(double, double, double)",
      "begin_line": 275,
      "end_line": 277,
      "comment": "\n     * Tests two doubles for \u0027near enough\u0027 equality.\n     *\n     * @param d1  number 1.\n     * @param d2  number 2.\n     * @param tolerance  maximum tolerance.\n     *\n     * @return A boolean.\n     ",
      "child_ranges": [
        "(line 276,col 9)-(line 276,col 47)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testJava2DToValue()",
      "begin_line": 282,
      "end_line": 303,
      "comment": "\n     * Test the translation of Java2D values to data values.\n     ",
      "child_ranges": [
        "(line 283,col 9)-(line 283,col 39)",
        "(line 284,col 9)-(line 284,col 35)",
        "(line 285,col 9)-(line 285,col 80)",
        "(line 286,col 9)-(line 286,col 75)",
        "(line 287,col 9)-(line 287,col 46)",
        "(line 288,col 9)-(line 288,col 76)",
        "(line 289,col 9)-(line 289,col 46)",
        "(line 290,col 9)-(line 290,col 74)",
        "(line 291,col 9)-(line 291,col 42)",
        "(line 292,col 9)-(line 292,col 77)",
        "(line 293,col 9)-(line 293,col 42)",
        "(line 294,col 9)-(line 294,col 31)",
        "(line 295,col 9)-(line 295,col 75)",
        "(line 296,col 9)-(line 296,col 46)",
        "(line 297,col 9)-(line 297,col 76)",
        "(line 298,col 9)-(line 298,col 46)",
        "(line 299,col 9)-(line 299,col 74)",
        "(line 300,col 9)-(line 300,col 42)",
        "(line 301,col 9)-(line 301,col 77)",
        "(line 302,col 9)-(line 302,col 42)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testSerialization()",
      "begin_line": 308,
      "end_line": 330,
      "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
      "child_ranges": [
        "(line 310,col 9)-(line 310,col 48)",
        "(line 311,col 9)-(line 311,col 27)",
        "(line 313,col 9)-(line 326,col 9)",
        "(line 327,col 9)-(line 327,col 34)",
        "(line 328,col 9)-(line 328,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateYearA()",
      "begin_line": 336,
      "end_line": 403,
      "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 1 year.\n     ",
      "child_ranges": [
        "(line 337,col 9)-(line 337,col 49)",
        "(line 338,col 9)-(line 338,col 36)",
        "(line 339,col 9)-(line 339,col 36)",
        "(line 342,col 9)-(line 342,col 56)",
        "(line 343,col 9)-(line 343,col 63)",
        "(line 344,col 9)-(line 344,col 57)",
        "(line 345,col 9)-(line 345,col 64)",
        "(line 346,col 9)-(line 346,col 55)",
        "(line 348,col 9)-(line 348,col 56)",
        "(line 350,col 9)-(line 350,col 71)",
        "(line 351,col 9)-(line 351,col 31)",
        "(line 354,col 9)-(line 354,col 61)",
        "(line 356,col 9)-(line 356,col 31)",
        "(line 357,col 9)-(line 357,col 55)",
        "(line 358,col 9)-(line 358,col 62)",
        "(line 359,col 9)-(line 359,col 49)",
        "(line 360,col 9)-(line 360,col 50)",
        "(line 362,col 9)-(line 362,col 31)",
        "(line 363,col 9)-(line 363,col 50)",
        "(line 364,col 9)-(line 364,col 57)",
        "(line 365,col 9)-(line 365,col 49)",
        "(line 366,col 9)-(line 366,col 50)",
        "(line 369,col 9)-(line 369,col 62)",
        "(line 371,col 9)-(line 371,col 31)",
        "(line 372,col 9)-(line 372,col 50)",
        "(line 373,col 9)-(line 373,col 57)",
        "(line 374,col 9)-(line 374,col 49)",
        "(line 375,col 9)-(line 375,col 50)",
        "(line 377,col 9)-(line 377,col 31)",
        "(line 378,col 9)-(line 378,col 50)",
        "(line 379,col 9)-(line 379,col 57)",
        "(line 380,col 9)-(line 380,col 49)",
        "(line 381,col 9)-(line 381,col 50)",
        "(line 383,col 9)-(line 383,col 31)",
        "(line 384,col 9)-(line 384,col 50)",
        "(line 385,col 9)-(line 385,col 57)",
        "(line 386,col 9)-(line 386,col 49)",
        "(line 387,col 9)-(line 387,col 50)",
        "(line 390,col 9)-(line 390,col 59)",
        "(line 392,col 9)-(line 392,col 31)",
        "(line 393,col 9)-(line 393,col 50)",
        "(line 394,col 9)-(line 394,col 57)",
        "(line 395,col 9)-(line 395,col 49)",
        "(line 396,col 9)-(line 396,col 50)",
        "(line 398,col 9)-(line 398,col 31)",
        "(line 399,col 9)-(line 399,col 50)",
        "(line 400,col 9)-(line 400,col 57)",
        "(line 401,col 9)-(line 401,col 49)",
        "(line 402,col 9)-(line 402,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateYearB()",
      "begin_line": 409,
      "end_line": 476,
      "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 10 years (just for the sake of having a multiple).\n     ",
      "child_ranges": [
        "(line 410,col 9)-(line 410,col 49)",
        "(line 411,col 9)-(line 411,col 36)",
        "(line 412,col 9)-(line 412,col 36)",
        "(line 415,col 9)-(line 415,col 56)",
        "(line 416,col 9)-(line 416,col 63)",
        "(line 417,col 9)-(line 417,col 57)",
        "(line 418,col 9)-(line 418,col 64)",
        "(line 419,col 9)-(line 419,col 55)",
        "(line 421,col 9)-(line 421,col 56)",
        "(line 423,col 9)-(line 423,col 72)",
        "(line 424,col 9)-(line 424,col 31)",
        "(line 427,col 9)-(line 427,col 61)",
        "(line 429,col 9)-(line 429,col 31)",
        "(line 430,col 9)-(line 430,col 55)",
        "(line 431,col 9)-(line 431,col 62)",
        "(line 432,col 9)-(line 432,col 49)",
        "(line 433,col 9)-(line 433,col 50)",
        "(line 435,col 9)-(line 435,col 31)",
        "(line 436,col 9)-(line 436,col 50)",
        "(line 437,col 9)-(line 437,col 57)",
        "(line 438,col 9)-(line 438,col 49)",
        "(line 439,col 9)-(line 439,col 50)",
        "(line 442,col 9)-(line 442,col 62)",
        "(line 444,col 9)-(line 444,col 31)",
        "(line 445,col 9)-(line 445,col 50)",
        "(line 446,col 9)-(line 446,col 57)",
        "(line 447,col 9)-(line 447,col 49)",
        "(line 448,col 9)-(line 448,col 50)",
        "(line 450,col 9)-(line 450,col 31)",
        "(line 451,col 9)-(line 451,col 50)",
        "(line 452,col 9)-(line 452,col 57)",
        "(line 453,col 9)-(line 453,col 49)",
        "(line 454,col 9)-(line 454,col 50)",
        "(line 456,col 9)-(line 456,col 31)",
        "(line 457,col 9)-(line 457,col 50)",
        "(line 458,col 9)-(line 458,col 57)",
        "(line 459,col 9)-(line 459,col 49)",
        "(line 460,col 9)-(line 460,col 50)",
        "(line 463,col 9)-(line 463,col 59)",
        "(line 465,col 9)-(line 465,col 31)",
        "(line 466,col 9)-(line 466,col 50)",
        "(line 467,col 9)-(line 467,col 57)",
        "(line 468,col 9)-(line 468,col 49)",
        "(line 469,col 9)-(line 469,col 50)",
        "(line 471,col 9)-(line 471,col 31)",
        "(line 472,col 9)-(line 472,col 50)",
        "(line 473,col 9)-(line 473,col 57)",
        "(line 474,col 9)-(line 474,col 49)",
        "(line 475,col 9)-(line 475,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateMonthA()",
      "begin_line": 482,
      "end_line": 549,
      "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 1 month.\n     ",
      "child_ranges": [
        "(line 483,col 9)-(line 483,col 50)",
        "(line 484,col 9)-(line 484,col 44)",
        "(line 485,col 9)-(line 485,col 44)",
        "(line 488,col 9)-(line 488,col 58)",
        "(line 489,col 9)-(line 489,col 65)",
        "(line 490,col 9)-(line 490,col 59)",
        "(line 491,col 9)-(line 491,col 66)",
        "(line 492,col 9)-(line 492,col 57)",
        "(line 494,col 9)-(line 494,col 58)",
        "(line 496,col 9)-(line 496,col 72)",
        "(line 497,col 9)-(line 497,col 31)",
        "(line 500,col 9)-(line 500,col 61)",
        "(line 502,col 9)-(line 502,col 31)",
        "(line 503,col 9)-(line 503,col 55)",
        "(line 504,col 9)-(line 504,col 62)",
        "(line 505,col 9)-(line 505,col 49)",
        "(line 506,col 9)-(line 506,col 50)",
        "(line 508,col 9)-(line 508,col 31)",
        "(line 509,col 9)-(line 509,col 50)",
        "(line 510,col 9)-(line 510,col 57)",
        "(line 511,col 9)-(line 511,col 49)",
        "(line 512,col 9)-(line 512,col 50)",
        "(line 515,col 9)-(line 515,col 62)",
        "(line 517,col 9)-(line 517,col 31)",
        "(line 518,col 9)-(line 518,col 50)",
        "(line 519,col 9)-(line 519,col 57)",
        "(line 520,col 9)-(line 520,col 49)",
        "(line 521,col 9)-(line 521,col 50)",
        "(line 523,col 9)-(line 523,col 31)",
        "(line 524,col 9)-(line 524,col 50)",
        "(line 525,col 9)-(line 525,col 57)",
        "(line 526,col 9)-(line 526,col 49)",
        "(line 527,col 9)-(line 527,col 50)",
        "(line 529,col 9)-(line 529,col 31)",
        "(line 530,col 9)-(line 530,col 50)",
        "(line 531,col 9)-(line 531,col 57)",
        "(line 532,col 9)-(line 532,col 49)",
        "(line 533,col 9)-(line 533,col 50)",
        "(line 536,col 9)-(line 536,col 59)",
        "(line 538,col 9)-(line 538,col 31)",
        "(line 539,col 9)-(line 539,col 50)",
        "(line 540,col 9)-(line 540,col 57)",
        "(line 541,col 9)-(line 541,col 49)",
        "(line 542,col 9)-(line 542,col 50)",
        "(line 544,col 9)-(line 544,col 31)",
        "(line 545,col 9)-(line 545,col 50)",
        "(line 546,col 9)-(line 546,col 57)",
        "(line 547,col 9)-(line 547,col 49)",
        "(line 548,col 9)-(line 548,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateMonthB()",
      "begin_line": 555,
      "end_line": 622,
      "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 3 months (just for the sake of having a multiple).\n     ",
      "child_ranges": [
        "(line 556,col 9)-(line 556,col 50)",
        "(line 557,col 9)-(line 557,col 44)",
        "(line 558,col 9)-(line 558,col 44)",
        "(line 561,col 9)-(line 561,col 58)",
        "(line 562,col 9)-(line 562,col 65)",
        "(line 563,col 9)-(line 563,col 59)",
        "(line 564,col 9)-(line 564,col 66)",
        "(line 565,col 9)-(line 565,col 57)",
        "(line 567,col 9)-(line 567,col 58)",
        "(line 569,col 9)-(line 569,col 72)",
        "(line 570,col 9)-(line 570,col 31)",
        "(line 573,col 9)-(line 573,col 61)",
        "(line 575,col 9)-(line 575,col 31)",
        "(line 576,col 9)-(line 576,col 55)",
        "(line 577,col 9)-(line 577,col 62)",
        "(line 578,col 9)-(line 578,col 49)",
        "(line 579,col 9)-(line 579,col 50)",
        "(line 581,col 9)-(line 581,col 31)",
        "(line 582,col 9)-(line 582,col 50)",
        "(line 583,col 9)-(line 583,col 57)",
        "(line 584,col 9)-(line 584,col 49)",
        "(line 585,col 9)-(line 585,col 50)",
        "(line 588,col 9)-(line 588,col 62)",
        "(line 590,col 9)-(line 590,col 31)",
        "(line 591,col 9)-(line 591,col 50)",
        "(line 592,col 9)-(line 592,col 57)",
        "(line 593,col 9)-(line 593,col 49)",
        "(line 594,col 9)-(line 594,col 50)",
        "(line 596,col 9)-(line 596,col 31)",
        "(line 597,col 9)-(line 597,col 50)",
        "(line 598,col 9)-(line 598,col 57)",
        "(line 599,col 9)-(line 599,col 49)",
        "(line 600,col 9)-(line 600,col 50)",
        "(line 602,col 9)-(line 602,col 31)",
        "(line 603,col 9)-(line 603,col 50)",
        "(line 604,col 9)-(line 604,col 57)",
        "(line 605,col 9)-(line 605,col 49)",
        "(line 606,col 9)-(line 606,col 50)",
        "(line 609,col 9)-(line 609,col 59)",
        "(line 611,col 9)-(line 611,col 31)",
        "(line 612,col 9)-(line 612,col 50)",
        "(line 613,col 9)-(line 613,col 57)",
        "(line 614,col 9)-(line 614,col 49)",
        "(line 615,col 9)-(line 615,col 50)",
        "(line 617,col 9)-(line 617,col 31)",
        "(line 618,col 9)-(line 618,col 50)",
        "(line 619,col 9)-(line 619,col 57)",
        "(line 620,col 9)-(line 620,col 49)",
        "(line 621,col 9)-(line 621,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateDayA()",
      "begin_line": 628,
      "end_line": 695,
      "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 1 day.\n     ",
      "child_ranges": [
        "(line 629,col 9)-(line 629,col 48)",
        "(line 630,col 9)-(line 630,col 43)",
        "(line 631,col 9)-(line 631,col 43)",
        "(line 634,col 9)-(line 634,col 59)",
        "(line 635,col 9)-(line 635,col 66)",
        "(line 636,col 9)-(line 636,col 60)",
        "(line 637,col 9)-(line 637,col 67)",
        "(line 638,col 9)-(line 638,col 58)",
        "(line 640,col 9)-(line 640,col 59)",
        "(line 642,col 9)-(line 642,col 70)",
        "(line 643,col 9)-(line 643,col 31)",
        "(line 646,col 9)-(line 646,col 61)",
        "(line 648,col 9)-(line 648,col 31)",
        "(line 649,col 9)-(line 649,col 55)",
        "(line 650,col 9)-(line 650,col 62)",
        "(line 651,col 9)-(line 651,col 49)",
        "(line 652,col 9)-(line 652,col 50)",
        "(line 654,col 9)-(line 654,col 31)",
        "(line 655,col 9)-(line 655,col 50)",
        "(line 656,col 9)-(line 656,col 57)",
        "(line 657,col 9)-(line 657,col 49)",
        "(line 658,col 9)-(line 658,col 50)",
        "(line 661,col 9)-(line 661,col 62)",
        "(line 663,col 9)-(line 663,col 31)",
        "(line 664,col 9)-(line 664,col 50)",
        "(line 665,col 9)-(line 665,col 57)",
        "(line 666,col 9)-(line 666,col 49)",
        "(line 667,col 9)-(line 667,col 50)",
        "(line 669,col 9)-(line 669,col 31)",
        "(line 670,col 9)-(line 670,col 50)",
        "(line 671,col 9)-(line 671,col 57)",
        "(line 672,col 9)-(line 672,col 49)",
        "(line 673,col 9)-(line 673,col 50)",
        "(line 675,col 9)-(line 675,col 31)",
        "(line 676,col 9)-(line 676,col 50)",
        "(line 677,col 9)-(line 677,col 57)",
        "(line 678,col 9)-(line 678,col 49)",
        "(line 679,col 9)-(line 679,col 50)",
        "(line 682,col 9)-(line 682,col 59)",
        "(line 684,col 9)-(line 684,col 31)",
        "(line 685,col 9)-(line 685,col 50)",
        "(line 686,col 9)-(line 686,col 57)",
        "(line 687,col 9)-(line 687,col 49)",
        "(line 688,col 9)-(line 688,col 50)",
        "(line 690,col 9)-(line 690,col 31)",
        "(line 691,col 9)-(line 691,col 50)",
        "(line 692,col 9)-(line 692,col 57)",
        "(line 693,col 9)-(line 693,col 49)",
        "(line 694,col 9)-(line 694,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateDayB()",
      "begin_line": 701,
      "end_line": 768,
      "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 7 days (just for the sake of having a multiple).\n     ",
      "child_ranges": [
        "(line 702,col 9)-(line 702,col 48)",
        "(line 703,col 9)-(line 703,col 43)",
        "(line 704,col 9)-(line 704,col 43)",
        "(line 707,col 9)-(line 707,col 59)",
        "(line 708,col 9)-(line 708,col 66)",
        "(line 709,col 9)-(line 709,col 60)",
        "(line 710,col 9)-(line 710,col 67)",
        "(line 711,col 9)-(line 711,col 58)",
        "(line 713,col 9)-(line 713,col 59)",
        "(line 715,col 9)-(line 715,col 70)",
        "(line 716,col 9)-(line 716,col 31)",
        "(line 719,col 9)-(line 719,col 61)",
        "(line 721,col 9)-(line 721,col 31)",
        "(line 722,col 9)-(line 722,col 55)",
        "(line 723,col 9)-(line 723,col 62)",
        "(line 724,col 9)-(line 724,col 49)",
        "(line 725,col 9)-(line 725,col 50)",
        "(line 727,col 9)-(line 727,col 31)",
        "(line 728,col 9)-(line 728,col 50)",
        "(line 729,col 9)-(line 729,col 57)",
        "(line 730,col 9)-(line 730,col 49)",
        "(line 731,col 9)-(line 731,col 50)",
        "(line 734,col 9)-(line 734,col 62)",
        "(line 736,col 9)-(line 736,col 31)",
        "(line 737,col 9)-(line 737,col 50)",
        "(line 738,col 9)-(line 738,col 57)",
        "(line 739,col 9)-(line 739,col 49)",
        "(line 740,col 9)-(line 740,col 50)",
        "(line 742,col 9)-(line 742,col 31)",
        "(line 743,col 9)-(line 743,col 50)",
        "(line 744,col 9)-(line 744,col 57)",
        "(line 745,col 9)-(line 745,col 49)",
        "(line 746,col 9)-(line 746,col 50)",
        "(line 748,col 9)-(line 748,col 31)",
        "(line 749,col 9)-(line 749,col 50)",
        "(line 750,col 9)-(line 750,col 57)",
        "(line 751,col 9)-(line 751,col 49)",
        "(line 752,col 9)-(line 752,col 50)",
        "(line 755,col 9)-(line 755,col 59)",
        "(line 757,col 9)-(line 757,col 31)",
        "(line 758,col 9)-(line 758,col 50)",
        "(line 759,col 9)-(line 759,col 57)",
        "(line 760,col 9)-(line 760,col 49)",
        "(line 761,col 9)-(line 761,col 50)",
        "(line 763,col 9)-(line 763,col 31)",
        "(line 764,col 9)-(line 764,col 50)",
        "(line 765,col 9)-(line 765,col 57)",
        "(line 766,col 9)-(line 766,col 49)",
        "(line 767,col 9)-(line 767,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateHourA()",
      "begin_line": 774,
      "end_line": 841,
      "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 1 hour.\n     ",
      "child_ranges": [
        "(line 775,col 9)-(line 775,col 49)",
        "(line 776,col 9)-(line 776,col 43)",
        "(line 777,col 9)-(line 777,col 43)",
        "(line 780,col 9)-(line 780,col 53)",
        "(line 781,col 9)-(line 781,col 60)",
        "(line 782,col 9)-(line 782,col 54)",
        "(line 783,col 9)-(line 783,col 61)",
        "(line 784,col 9)-(line 784,col 52)",
        "(line 786,col 9)-(line 786,col 53)",
        "(line 788,col 9)-(line 788,col 71)",
        "(line 789,col 9)-(line 789,col 31)",
        "(line 792,col 9)-(line 792,col 61)",
        "(line 794,col 9)-(line 794,col 31)",
        "(line 795,col 9)-(line 795,col 55)",
        "(line 796,col 9)-(line 796,col 62)",
        "(line 797,col 9)-(line 797,col 49)",
        "(line 798,col 9)-(line 798,col 50)",
        "(line 800,col 9)-(line 800,col 31)",
        "(line 801,col 9)-(line 801,col 50)",
        "(line 802,col 9)-(line 802,col 57)",
        "(line 803,col 9)-(line 803,col 49)",
        "(line 804,col 9)-(line 804,col 50)",
        "(line 807,col 9)-(line 807,col 62)",
        "(line 809,col 9)-(line 809,col 31)",
        "(line 810,col 9)-(line 810,col 50)",
        "(line 811,col 9)-(line 811,col 57)",
        "(line 812,col 9)-(line 812,col 49)",
        "(line 813,col 9)-(line 813,col 50)",
        "(line 815,col 9)-(line 815,col 31)",
        "(line 816,col 9)-(line 816,col 50)",
        "(line 817,col 9)-(line 817,col 57)",
        "(line 818,col 9)-(line 818,col 49)",
        "(line 819,col 9)-(line 819,col 50)",
        "(line 821,col 9)-(line 821,col 31)",
        "(line 822,col 9)-(line 822,col 50)",
        "(line 823,col 9)-(line 823,col 57)",
        "(line 824,col 9)-(line 824,col 49)",
        "(line 825,col 9)-(line 825,col 50)",
        "(line 828,col 9)-(line 828,col 59)",
        "(line 830,col 9)-(line 830,col 31)",
        "(line 831,col 9)-(line 831,col 50)",
        "(line 832,col 9)-(line 832,col 57)",
        "(line 833,col 9)-(line 833,col 49)",
        "(line 834,col 9)-(line 834,col 50)",
        "(line 836,col 9)-(line 836,col 31)",
        "(line 837,col 9)-(line 837,col 50)",
        "(line 838,col 9)-(line 838,col 57)",
        "(line 839,col 9)-(line 839,col 49)",
        "(line 840,col 9)-(line 840,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateHourB()",
      "begin_line": 847,
      "end_line": 914,
      "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 6 hours (just for the sake of having a multiple).\n     ",
      "child_ranges": [
        "(line 848,col 9)-(line 848,col 49)",
        "(line 849,col 9)-(line 849,col 43)",
        "(line 850,col 9)-(line 850,col 43)",
        "(line 853,col 9)-(line 853,col 53)",
        "(line 854,col 9)-(line 854,col 60)",
        "(line 855,col 9)-(line 855,col 54)",
        "(line 856,col 9)-(line 856,col 61)",
        "(line 857,col 9)-(line 857,col 52)",
        "(line 859,col 9)-(line 859,col 53)",
        "(line 861,col 9)-(line 861,col 71)",
        "(line 862,col 9)-(line 862,col 31)",
        "(line 865,col 9)-(line 865,col 61)",
        "(line 867,col 9)-(line 867,col 31)",
        "(line 868,col 9)-(line 868,col 55)",
        "(line 869,col 9)-(line 869,col 62)",
        "(line 870,col 9)-(line 870,col 49)",
        "(line 871,col 9)-(line 871,col 50)",
        "(line 873,col 9)-(line 873,col 31)",
        "(line 874,col 9)-(line 874,col 50)",
        "(line 875,col 9)-(line 875,col 57)",
        "(line 876,col 9)-(line 876,col 49)",
        "(line 877,col 9)-(line 877,col 50)",
        "(line 880,col 9)-(line 880,col 62)",
        "(line 882,col 9)-(line 882,col 31)",
        "(line 883,col 9)-(line 883,col 50)",
        "(line 884,col 9)-(line 884,col 57)",
        "(line 885,col 9)-(line 885,col 49)",
        "(line 886,col 9)-(line 886,col 50)",
        "(line 888,col 9)-(line 888,col 31)",
        "(line 889,col 9)-(line 889,col 50)",
        "(line 890,col 9)-(line 890,col 57)",
        "(line 891,col 9)-(line 891,col 49)",
        "(line 892,col 9)-(line 892,col 50)",
        "(line 894,col 9)-(line 894,col 31)",
        "(line 895,col 9)-(line 895,col 50)",
        "(line 896,col 9)-(line 896,col 57)",
        "(line 897,col 9)-(line 897,col 49)",
        "(line 898,col 9)-(line 898,col 50)",
        "(line 901,col 9)-(line 901,col 59)",
        "(line 903,col 9)-(line 903,col 31)",
        "(line 904,col 9)-(line 904,col 50)",
        "(line 905,col 9)-(line 905,col 57)",
        "(line 906,col 9)-(line 906,col 49)",
        "(line 907,col 9)-(line 907,col 50)",
        "(line 909,col 9)-(line 909,col 31)",
        "(line 910,col 9)-(line 910,col 50)",
        "(line 911,col 9)-(line 911,col 57)",
        "(line 912,col 9)-(line 912,col 49)",
        "(line 913,col 9)-(line 913,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateSecondA()",
      "begin_line": 920,
      "end_line": 987,
      "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 1 second.\n     ",
      "child_ranges": [
        "(line 921,col 9)-(line 921,col 51)",
        "(line 922,col 9)-(line 922,col 55)",
        "(line 923,col 9)-(line 923,col 55)",
        "(line 926,col 9)-(line 926,col 53)",
        "(line 927,col 9)-(line 927,col 59)",
        "(line 928,col 9)-(line 928,col 54)",
        "(line 929,col 9)-(line 929,col 60)",
        "(line 930,col 9)-(line 930,col 52)",
        "(line 932,col 9)-(line 932,col 53)",
        "(line 934,col 9)-(line 934,col 73)",
        "(line 935,col 9)-(line 935,col 31)",
        "(line 938,col 9)-(line 938,col 61)",
        "(line 940,col 9)-(line 940,col 31)",
        "(line 941,col 9)-(line 941,col 55)",
        "(line 942,col 9)-(line 942,col 62)",
        "(line 943,col 9)-(line 943,col 49)",
        "(line 944,col 9)-(line 944,col 50)",
        "(line 946,col 9)-(line 946,col 31)",
        "(line 947,col 9)-(line 947,col 50)",
        "(line 948,col 9)-(line 948,col 57)",
        "(line 949,col 9)-(line 949,col 49)",
        "(line 950,col 9)-(line 950,col 50)",
        "(line 953,col 9)-(line 953,col 62)",
        "(line 955,col 9)-(line 955,col 31)",
        "(line 956,col 9)-(line 956,col 50)",
        "(line 957,col 9)-(line 957,col 57)",
        "(line 958,col 9)-(line 958,col 49)",
        "(line 959,col 9)-(line 959,col 50)",
        "(line 961,col 9)-(line 961,col 31)",
        "(line 962,col 9)-(line 962,col 50)",
        "(line 963,col 9)-(line 963,col 57)",
        "(line 964,col 9)-(line 964,col 49)",
        "(line 965,col 9)-(line 965,col 50)",
        "(line 967,col 9)-(line 967,col 31)",
        "(line 968,col 9)-(line 968,col 50)",
        "(line 969,col 9)-(line 969,col 57)",
        "(line 970,col 9)-(line 970,col 49)",
        "(line 971,col 9)-(line 971,col 50)",
        "(line 974,col 9)-(line 974,col 59)",
        "(line 976,col 9)-(line 976,col 31)",
        "(line 977,col 9)-(line 977,col 50)",
        "(line 978,col 9)-(line 978,col 57)",
        "(line 979,col 9)-(line 979,col 49)",
        "(line 980,col 9)-(line 980,col 50)",
        "(line 982,col 9)-(line 982,col 31)",
        "(line 983,col 9)-(line 983,col 50)",
        "(line 984,col 9)-(line 984,col 57)",
        "(line 985,col 9)-(line 985,col 49)",
        "(line 986,col 9)-(line 986,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateSecondB()",
      "begin_line": 993,
      "end_line": 1060,
      "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 5 seconds (just for the sake of having a multiple).\n     ",
      "child_ranges": [
        "(line 994,col 9)-(line 994,col 51)",
        "(line 995,col 9)-(line 995,col 55)",
        "(line 996,col 9)-(line 996,col 55)",
        "(line 999,col 9)-(line 999,col 53)",
        "(line 1000,col 9)-(line 1000,col 59)",
        "(line 1001,col 9)-(line 1001,col 54)",
        "(line 1002,col 9)-(line 1002,col 60)",
        "(line 1003,col 9)-(line 1003,col 52)",
        "(line 1005,col 9)-(line 1005,col 53)",
        "(line 1007,col 9)-(line 1007,col 73)",
        "(line 1008,col 9)-(line 1008,col 31)",
        "(line 1011,col 9)-(line 1011,col 61)",
        "(line 1013,col 9)-(line 1013,col 31)",
        "(line 1014,col 9)-(line 1014,col 55)",
        "(line 1015,col 9)-(line 1015,col 62)",
        "(line 1016,col 9)-(line 1016,col 49)",
        "(line 1017,col 9)-(line 1017,col 50)",
        "(line 1019,col 9)-(line 1019,col 31)",
        "(line 1020,col 9)-(line 1020,col 50)",
        "(line 1021,col 9)-(line 1021,col 57)",
        "(line 1022,col 9)-(line 1022,col 49)",
        "(line 1023,col 9)-(line 1023,col 50)",
        "(line 1026,col 9)-(line 1026,col 62)",
        "(line 1028,col 9)-(line 1028,col 31)",
        "(line 1029,col 9)-(line 1029,col 50)",
        "(line 1030,col 9)-(line 1030,col 57)",
        "(line 1031,col 9)-(line 1031,col 49)",
        "(line 1032,col 9)-(line 1032,col 50)",
        "(line 1034,col 9)-(line 1034,col 31)",
        "(line 1035,col 9)-(line 1035,col 50)",
        "(line 1036,col 9)-(line 1036,col 57)",
        "(line 1037,col 9)-(line 1037,col 49)",
        "(line 1038,col 9)-(line 1038,col 50)",
        "(line 1040,col 9)-(line 1040,col 31)",
        "(line 1041,col 9)-(line 1041,col 50)",
        "(line 1042,col 9)-(line 1042,col 57)",
        "(line 1043,col 9)-(line 1043,col 49)",
        "(line 1044,col 9)-(line 1044,col 50)",
        "(line 1047,col 9)-(line 1047,col 59)",
        "(line 1049,col 9)-(line 1049,col 31)",
        "(line 1050,col 9)-(line 1050,col 50)",
        "(line 1051,col 9)-(line 1051,col 57)",
        "(line 1052,col 9)-(line 1052,col 49)",
        "(line 1053,col 9)-(line 1053,col 50)",
        "(line 1055,col 9)-(line 1055,col 31)",
        "(line 1056,col 9)-(line 1056,col 50)",
        "(line 1057,col 9)-(line 1057,col 57)",
        "(line 1058,col 9)-(line 1058,col 49)",
        "(line 1059,col 9)-(line 1059,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateMillisecondA()",
      "begin_line": 1066,
      "end_line": 1103,
      "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 1 millisecond.\n     ",
      "child_ranges": [
        "(line 1067,col 9)-(line 1067,col 56)",
        "(line 1068,col 9)-(line 1068,col 70)",
        "(line 1069,col 9)-(line 1069,col 70)",
        "(line 1071,col 9)-(line 1071,col 53)",
        "(line 1072,col 9)-(line 1072,col 53)",
        "(line 1074,col 9)-(line 1074,col 78)",
        "(line 1075,col 9)-(line 1075,col 31)",
        "(line 1078,col 9)-(line 1078,col 61)",
        "(line 1080,col 9)-(line 1080,col 31)",
        "(line 1081,col 9)-(line 1081,col 55)",
        "(line 1082,col 9)-(line 1082,col 62)",
        "(line 1083,col 9)-(line 1083,col 49)",
        "(line 1084,col 9)-(line 1084,col 50)",
        "(line 1087,col 9)-(line 1087,col 62)",
        "(line 1089,col 9)-(line 1089,col 31)",
        "(line 1090,col 9)-(line 1090,col 50)",
        "(line 1091,col 9)-(line 1091,col 57)",
        "(line 1092,col 9)-(line 1092,col 49)",
        "(line 1093,col 9)-(line 1093,col 50)",
        "(line 1096,col 9)-(line 1096,col 59)",
        "(line 1098,col 9)-(line 1098,col 31)",
        "(line 1099,col 9)-(line 1099,col 50)",
        "(line 1100,col 9)-(line 1100,col 57)",
        "(line 1101,col 9)-(line 1101,col 49)",
        "(line 1102,col 9)-(line 1102,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateMillisecondB()",
      "begin_line": 1109,
      "end_line": 1146,
      "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 10 milliseconds (just for the sake of having a multiple).\n     ",
      "child_ranges": [
        "(line 1110,col 9)-(line 1110,col 56)",
        "(line 1111,col 9)-(line 1111,col 70)",
        "(line 1112,col 9)-(line 1112,col 70)",
        "(line 1114,col 9)-(line 1114,col 53)",
        "(line 1115,col 9)-(line 1115,col 53)",
        "(line 1117,col 9)-(line 1117,col 79)",
        "(line 1118,col 9)-(line 1118,col 31)",
        "(line 1121,col 9)-(line 1121,col 61)",
        "(line 1123,col 9)-(line 1123,col 31)",
        "(line 1124,col 9)-(line 1124,col 55)",
        "(line 1125,col 9)-(line 1125,col 62)",
        "(line 1126,col 9)-(line 1126,col 49)",
        "(line 1127,col 9)-(line 1127,col 50)",
        "(line 1130,col 9)-(line 1130,col 62)",
        "(line 1132,col 9)-(line 1132,col 31)",
        "(line 1133,col 9)-(line 1133,col 50)",
        "(line 1134,col 9)-(line 1134,col 57)",
        "(line 1135,col 9)-(line 1135,col 49)",
        "(line 1136,col 9)-(line 1136,col 50)",
        "(line 1139,col 9)-(line 1139,col 59)",
        "(line 1141,col 9)-(line 1141,col 31)",
        "(line 1142,col 9)-(line 1142,col 50)",
        "(line 1143,col 9)-(line 1143,col 57)",
        "(line 1144,col 9)-(line 1144,col 49)",
        "(line 1145,col 9)-(line 1145,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.axis.junit.DateAxisTests.testBug2201869()",
      "begin_line": 1151,
      "end_line": 1188,
      "comment": "\n     * A test to reproduce bug 2201869.\n     ",
      "child_ranges": [
        "(line 1152,col 9)-(line 1152,col 50)",
        "(line 1153,col 9)-(line 1153,col 67)",
        "(line 1154,col 9)-(line 1154,col 60)",
        "(line 1155,col 9)-(line 1155,col 77)",
        "(line 1156,col 9)-(line 1156,col 27)",
        "(line 1157,col 9)-(line 1157,col 75)",
        "(line 1158,col 9)-(line 1158,col 37)",
        "(line 1159,col 9)-(line 1159,col 18)",
        "(line 1160,col 9)-(line 1160,col 38)",
        "(line 1161,col 9)-(line 1161,col 18)",
        "(line 1162,col 9)-(line 1162,col 50)",
        "(line 1163,col 9)-(line 1164,col 45)",
        "(line 1165,col 9)-(line 1165,col 47)",
        "(line 1166,col 9)-(line 1166,col 70)",
        "(line 1167,col 9)-(line 1167,col 59)",
        "(line 1168,col 9)-(line 1169,col 38)",
        "(line 1170,col 9)-(line 1170,col 38)",
        "(line 1171,col 9)-(line 1171,col 46)",
        "(line 1172,col 9)-(line 1172,col 50)",
        "(line 1173,col 9)-(line 1173,col 46)",
        "(line 1174,col 9)-(line 1174,col 50)",
        "(line 1175,col 9)-(line 1175,col 46)",
        "(line 1176,col 9)-(line 1176,col 50)",
        "(line 1179,col 9)-(line 1180,col 36)",
        "(line 1181,col 9)-(line 1181,col 38)",
        "(line 1182,col 9)-(line 1182,col 37)",
        "(line 1183,col 9)-(line 1183,col 50)",
        "(line 1184,col 9)-(line 1184,col 37)",
        "(line 1185,col 9)-(line 1185,col 50)",
        "(line 1186,col 9)-(line 1186,col 37)",
        "(line 1187,col 9)-(line 1187,col 50)"
      ]
    }
  ]
}