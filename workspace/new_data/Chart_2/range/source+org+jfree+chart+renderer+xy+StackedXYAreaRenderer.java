{
  "filepath": "/tmp/Chart-2b/source/org/jfree/chart/renderer/xy/StackedXYAreaRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "StackedXYAreaRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.XYAreaRenderer",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 120,
      "end_line": 672,
      "comment": "\r\n * A stacked area renderer for the {@link XYPlot} class.\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * The example shown here is generated by the\r\n * \u003ccode\u003eStackedXYAreaRendererDemo1.java\u003c/code\u003e program included in the\r\n * JFreeChart demo collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/StackedXYAreaRendererSample.png\"\r\n * alt\u003d\"StackedXYAreaRendererSample.png\" /\u003e\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * SPECIAL NOTE:  This renderer does not currently handle negative data values\r\n * correctly.  This should get fixed at some point, but the current workaround\r\n * is to use the {@link StackedXYAreaRenderer2} class instead.\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 124,
      "end_line": 124,
      "comment": " For serialization. "
    },
    {
      "type": "class_interface",
      "name": "StackedXYAreaRendererState",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.XYItemRendererState"
      ],
      "begin_line": 129,
      "end_line": 219,
      "comment": "\r\n     * A state object for use by this renderer.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "seriesArea"
      ],
      "begin_line": 132,
      "end_line": 132,
      "comment": " The area for the current series. "
    },
    {
      "type": "field",
      "varNames": [
        "line"
      ],
      "begin_line": 135,
      "end_line": 135,
      "comment": " The line. "
    },
    {
      "type": "field",
      "varNames": [
        "lastSeriesPoints"
      ],
      "begin_line": 138,
      "end_line": 138,
      "comment": " The points from the last series. "
    },
    {
      "type": "field",
      "varNames": [
        "currentSeriesPoints"
      ],
      "begin_line": 141,
      "end_line": 141,
      "comment": " The points for the current series. "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.StackedXYAreaRendererState.StackedXYAreaRendererState(org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 148,
      "end_line": 154,
      "comment": "\r\n         * Creates a new state for the renderer.\r\n         *\r\n         * @param info  the plot rendering info.\r\n         ",
      "child_ranges": [
        "(line 149,col 13)-(line 149,col 24)",
        "(line 150,col 13)-(line 150,col 35)",
        "(line 151,col 13)-(line 151,col 44)",
        "(line 152,col 13)-(line 152,col 48)",
        "(line 153,col 13)-(line 153,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.StackedXYAreaRendererState.getSeriesArea()",
      "begin_line": 161,
      "end_line": 163,
      "comment": "\r\n         * Returns the series area.\r\n         *\r\n         * @return The series area.\r\n         ",
      "child_ranges": [
        "(line 162,col 13)-(line 162,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.StackedXYAreaRendererState.setSeriesArea(java.awt.Polygon)",
      "begin_line": 170,
      "end_line": 172,
      "comment": "\r\n         * Sets the series area.\r\n         *\r\n         * @param area  the area.\r\n         ",
      "child_ranges": [
        "(line 171,col 13)-(line 171,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.StackedXYAreaRendererState.getLine()",
      "begin_line": 179,
      "end_line": 181,
      "comment": "\r\n         * Returns the working line.\r\n         *\r\n         * @return The working line.\r\n         ",
      "child_ranges": [
        "(line 180,col 13)-(line 180,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.StackedXYAreaRendererState.getCurrentSeriesPoints()",
      "begin_line": 188,
      "end_line": 190,
      "comment": "\r\n         * Returns the current series points.\r\n         *\r\n         * @return The current series points.\r\n         ",
      "child_ranges": [
        "(line 189,col 13)-(line 189,col 44)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.StackedXYAreaRendererState.setCurrentSeriesPoints(java.util.Stack)",
      "begin_line": 197,
      "end_line": 199,
      "comment": "\r\n         * Sets the current series points.\r\n         *\r\n         * @param points  the points.\r\n         ",
      "child_ranges": [
        "(line 198,col 13)-(line 198,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.StackedXYAreaRendererState.getLastSeriesPoints()",
      "begin_line": 206,
      "end_line": 208,
      "comment": "\r\n         * Returns the last series points.\r\n         *\r\n         * @return The last series points.\r\n         ",
      "child_ranges": [
        "(line 207,col 13)-(line 207,col 41)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.StackedXYAreaRendererState.setLastSeriesPoints(java.util.Stack)",
      "begin_line": 215,
      "end_line": 217,
      "comment": "\r\n         * Sets the last series points.\r\n         *\r\n         * @param points  the points.\r\n         ",
      "child_ranges": [
        "(line 216,col 13)-(line 216,col 43)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "shapePaint"
      ],
      "begin_line": 224,
      "end_line": 224,
      "comment": "\r\n     * Custom Paint for drawing all shapes, if null defaults to series shapes\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shapeStroke"
      ],
      "begin_line": 230,
      "end_line": 230,
      "comment": "\r\n     * Custom Stroke for drawing all shapes, if null defaults to series\r\n     * strokes.\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.StackedXYAreaRenderer()",
      "begin_line": 235,
      "end_line": 237,
      "comment": "\r\n     * Creates a new renderer.\r\n     ",
      "child_ranges": [
        "(line 236,col 9)-(line 236,col 19)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.StackedXYAreaRenderer(int)",
      "begin_line": 244,
      "end_line": 246,
      "comment": "\r\n     * Constructs a new renderer.\r\n     *\r\n     * @param type  the type of the renderer.\r\n     ",
      "child_ranges": [
        "(line 245,col 9)-(line 245,col 31)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.StackedXYAreaRenderer(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)",
      "begin_line": 259,
      "end_line": 264,
      "comment": "\r\n     * Constructs a new renderer.  To specify the type of renderer, use one of\r\n     * the constants: \u003ccode\u003eSHAPES\u003c/code\u003e, \u003ccode\u003eLINES\u003c/code\u003e,\r\n     * \u003ccode\u003eSHAPES_AND_LINES\u003c/code\u003e, \u003ccode\u003eAREA\u003c/code\u003e or\r\n     * \u003ccode\u003eAREA_AND_SHAPES\u003c/code\u003e.\r\n     *\r\n     * @param type  the type of renderer.\r\n     * @param labelGenerator  the tool tip generator to use (\u003ccode\u003enull\u003c/code\u003e\r\n     *                        is none).\r\n     * @param urlGenerator  the URL generator (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     ",
      "child_ranges": [
        "(line 263,col 9)-(line 263,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.getShapePaint()",
      "begin_line": 274,
      "end_line": 276,
      "comment": "\r\n     * Returns the paint used for rendering shapes, or \u003ccode\u003enull\u003c/code\u003e if\r\n     * using series paints.\r\n     *\r\n     * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setShapePaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 275,col 9)-(line 275,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.setShapePaint(java.awt.Paint)",
      "begin_line": 286,
      "end_line": 289,
      "comment": "\r\n     * Sets the paint for rendering shapes and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param shapePaint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getShapePaint()\r\n     ",
      "child_ranges": [
        "(line 287,col 9)-(line 287,col 37)",
        "(line 288,col 9)-(line 288,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.getShapeStroke()",
      "begin_line": 299,
      "end_line": 301,
      "comment": "\r\n     * Returns the stroke used for rendering shapes, or \u003ccode\u003enull\u003c/code\u003e if\r\n     * using series strokes.\r\n     *\r\n     * @return The stroke (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setShapeStroke(Stroke)\r\n     ",
      "child_ranges": [
        "(line 300,col 9)-(line 300,col 32)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.setShapeStroke(java.awt.Stroke)",
      "begin_line": 311,
      "end_line": 314,
      "comment": "\r\n     * Sets the stroke for rendering shapes and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param shapeStroke  the stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getShapeStroke()\r\n     ",
      "child_ranges": [
        "(line 312,col 9)-(line 312,col 39)",
        "(line 313,col 9)-(line 313,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 331,
      "end_line": 342,
      "comment": "\r\n     * Initialises the renderer. This method will be called before the first\r\n     * item is rendered, giving the renderer an opportunity to initialise any\r\n     * state information it wants to maintain.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area inside the axes.\r\n     * @param plot  the plot.\r\n     * @param data  the data.\r\n     * @param info  an optional info collection object to return data back to\r\n     *              the caller.\r\n     *\r\n     * @return A state object that should be passed to subsequent calls to the\r\n     *         drawItem() method.\r\n     ",
      "child_ranges": [
        "(line 337,col 9)-(line 337,col 73)",
        "(line 340,col 9)-(line 340,col 48)",
        "(line 341,col 9)-(line 341,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.getPassCount()",
      "begin_line": 349,
      "end_line": 351,
      "comment": "\r\n     * Returns the number of passes required by the renderer.\r\n     *\r\n     * @return 2.\r\n     ",
      "child_ranges": [
        "(line 350,col 9)-(line 350,col 17)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)",
      "begin_line": 365,
      "end_line": 373,
      "comment": "\r\n     * Returns the range of values the renderer requires to display all the\r\n     * items from the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return The range ([0.0, 0.0] if the dataset contains no values, and\r\n     *         \u003ccode\u003enull\u003c/code\u003e if the dataset is \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @throws ClassCastException if \u003ccode\u003edataset\u003c/code\u003e is not an instance\r\n     *         of {@link TableXYDataset}.\r\n     ",
      "child_ranges": [
        "(line 366,col 9)-(line 372,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, int)",
      "begin_line": 394,
      "end_line": 583,
      "comment": "\r\n     * Draws the visual representation of a single data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the area within which the data is being drawn.\r\n     * @param plot  the plot (can be used to obtain standard color information\r\n     *              etc).\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param pass  the pass index.\r\n     *\r\n     * @throws ClassCastException if \u003ccode\u003estate\u003c/code\u003e is not an instance of\r\n     *         \u003ccode\u003eStackedXYAreaRendererState\u003c/code\u003e or \u003ccode\u003edataset\u003c/code\u003e\r\n     *         is not an instance of {@link TableXYDataset}.\r\n     ",
      "child_ranges": [
        "(line 399,col 9)-(line 399,col 60)",
        "(line 400,col 9)-(line 401,col 49)",
        "(line 404,col 9)-(line 404,col 59)",
        "(line 405,col 9)-(line 405,col 48)",
        "(line 408,col 9)-(line 408,col 52)",
        "(line 409,col 9)-(line 409,col 52)",
        "(line 410,col 9)-(line 410,col 34)",
        "(line 411,col 9)-(line 414,col 9)",
        "(line 417,col 9)-(line 417,col 63)",
        "(line 418,col 9)-(line 419,col 42)",
        "(line 420,col 9)-(line 421,col 41)",
        "(line 423,col 9)-(line 423,col 65)",
        "(line 424,col 9)-(line 424,col 68)",
        "(line 426,col 9)-(line 582,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.getPreviousHeight(org.jfree.data.xy.TableXYDataset, int, int)",
      "begin_line": 597,
      "end_line": 607,
      "comment": "\r\n     * Calculates the stacked value of the all series up to, but not including\r\n     * \u003ccode\u003eseries\u003c/code\u003e for the specified item. It returns 0.0 if\r\n     * \u003ccode\u003eseries\u003c/code\u003e is the first series, i.e. 0.\r\n     *\r\n     * @param dataset  the dataset.\r\n     * @param series  the series.\r\n     * @param index  the index.\r\n     *\r\n     * @return The cumulative value for all series\u0027 values up to but excluding\r\n     *         \u003ccode\u003eseries\u003c/code\u003e for \u003ccode\u003eindex\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 599,col 9)-(line 599,col 28)",
        "(line 600,col 9)-(line 605,col 9)",
        "(line 606,col 9)-(line 606,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.equals(java.lang.Object)",
      "begin_line": 616,
      "end_line": 631,
      "comment": "\r\n     * Tests the renderer for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 617,col 9)-(line 619,col 9)",
        "(line 620,col 9)-(line 622,col 9)",
        "(line 623,col 9)-(line 623,col 65)",
        "(line 624,col 9)-(line 626,col 9)",
        "(line 627,col 9)-(line 629,col 9)",
        "(line 630,col 9)-(line 630,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.clone()",
      "begin_line": 640,
      "end_line": 642,
      "comment": "\r\n     * Returns a clone of the renderer.\r\n     *\r\n     * @return A clone.\r\n     *\r\n     * @throws CloneNotSupportedException if the renderer cannot be cloned.\r\n     ",
      "child_ranges": [
        "(line 641,col 9)-(line 641,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.readObject(java.io.ObjectInputStream)",
      "begin_line": 652,
      "end_line": 657,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
      "child_ranges": [
        "(line 654,col 9)-(line 654,col 35)",
        "(line 655,col 9)-(line 655,col 60)",
        "(line 656,col 9)-(line 656,col 62)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 666,
      "end_line": 670,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
      "child_ranges": [
        "(line 667,col 9)-(line 667,col 36)",
        "(line 668,col 9)-(line 668,col 60)",
        "(line 669,col 9)-(line 669,col 62)"
      ]
    }
  ]
}