{
  "filepath": "/tmp/Chart-2b/source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "LineAndShapeRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 130,
      "end_line": 928,
      "comment": "\r\n * A renderer that draws shapes for each data item, and lines between data\r\n * items (for use with the {@link CategoryPlot} class).\r\n * The example shown here is generated by the \u003ccode\u003eLineChartDemo1.java\u003c/code\u003e\r\n * program included in the JFreeChart Demo Collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/LineAndShapeRendererSample.png\"\r\n * alt\u003d\"LineAndShapeRendererSample.png\" /\u003e\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 134,
      "end_line": 134,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "seriesLinesVisible"
      ],
      "begin_line": 140,
      "end_line": 140,
      "comment": "\r\n     * A table of flags that control (per series) whether or not lines are\r\n     * visible.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "baseLinesVisible"
      ],
      "begin_line": 146,
      "end_line": 146,
      "comment": "\r\n     * A flag indicating whether or not lines are drawn between non-null\r\n     * points.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "seriesShapesVisible"
      ],
      "begin_line": 152,
      "end_line": 152,
      "comment": "\r\n     * A table of flags that control (per series) whether or not shapes are\r\n     * visible.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "baseShapesVisible"
      ],
      "begin_line": 155,
      "end_line": 155,
      "comment": " The default value returned by the getShapeVisible() method. "
    },
    {
      "type": "field",
      "varNames": [
        "seriesShapesFilled"
      ],
      "begin_line": 161,
      "end_line": 161,
      "comment": "\r\n     * A table of flags that control (per series) whether or not shapes are\r\n     * filled.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "baseShapesFilled"
      ],
      "begin_line": 164,
      "end_line": 164,
      "comment": " The default value returned by the getShapeFilled() method. "
    },
    {
      "type": "field",
      "varNames": [
        "useFillPaint"
      ],
      "begin_line": 170,
      "end_line": 170,
      "comment": "\r\n     * A flag that controls whether the fill paint is used for filling\r\n     * shapes.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "drawOutlines"
      ],
      "begin_line": 173,
      "end_line": 173,
      "comment": " A flag that controls whether outlines are drawn for shapes. "
    },
    {
      "type": "field",
      "varNames": [
        "useOutlinePaint"
      ],
      "begin_line": 179,
      "end_line": 179,
      "comment": "\r\n     * A flag that controls whether the outline paint is used for drawing shape\r\n     * outlines - if not, the regular series paint is used.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "useSeriesOffset"
      ],
      "begin_line": 187,
      "end_line": 187,
      "comment": "\r\n     * A flag that controls whether or not the x-position for each item is\r\n     * offset within the category according to the series.\r\n     *\r\n     * @since 1.0.7\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "itemMargin"
      ],
      "begin_line": 195,
      "end_line": 195,
      "comment": "\r\n     * The item margin used for series offsetting - this allows the positioning\r\n     * to match the bar positions of the {@link BarRenderer} class.\r\n     *\r\n     * @since 1.0.7\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.LineAndShapeRenderer()",
      "begin_line": 200,
      "end_line": 202,
      "comment": "\r\n     * Creates a renderer with both lines and shapes visible by default.\r\n     ",
      "child_ranges": [
        "(line 201,col 9)-(line 201,col 25)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.LineAndShapeRenderer(boolean, boolean)",
      "begin_line": 210,
      "end_line": 223,
      "comment": "\r\n     * Creates a new renderer with lines and/or shapes visible.\r\n     *\r\n     * @param lines  draw lines?\r\n     * @param shapes  draw shapes?\r\n     ",
      "child_ranges": [
        "(line 211,col 9)-(line 211,col 16)",
        "(line 212,col 9)-(line 212,col 52)",
        "(line 213,col 9)-(line 213,col 38)",
        "(line 214,col 9)-(line 214,col 53)",
        "(line 215,col 9)-(line 215,col 40)",
        "(line 216,col 9)-(line 216,col 52)",
        "(line 217,col 9)-(line 217,col 37)",
        "(line 218,col 9)-(line 218,col 34)",
        "(line 219,col 9)-(line 219,col 33)",
        "(line 220,col 9)-(line 220,col 37)",
        "(line 221,col 9)-(line 221,col 37)",
        "(line 222,col 9)-(line 222,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getItemLineVisible(int, int)",
      "begin_line": 236,
      "end_line": 244,
      "comment": "\r\n     * Returns the flag used to control whether or not the line for an item is\r\n     * visible.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 237,col 9)-(line 237,col 53)",
        "(line 238,col 9)-(line 243,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getSeriesLinesVisible(int)",
      "begin_line": 256,
      "end_line": 258,
      "comment": "\r\n     * Returns the flag used to control whether or not the lines for a series\r\n     * are visible.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The flag (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setSeriesLinesVisible(int, Boolean)\r\n     ",
      "child_ranges": [
        "(line 257,col 9)-(line 257,col 58)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesLinesVisible(int, java.lang.Boolean)",
      "begin_line": 269,
      "end_line": 272,
      "comment": "\r\n     * Sets the \u0027lines visible\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param flag  the flag (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getSeriesLinesVisible(int)\r\n     ",
      "child_ranges": [
        "(line 270,col 9)-(line 270,col 57)",
        "(line 271,col 9)-(line 271,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesLinesVisible(int, boolean)",
      "begin_line": 283,
      "end_line": 285,
      "comment": "\r\n     * Sets the \u0027lines visible\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param visible  the flag.\r\n     *\r\n     * @see #getSeriesLinesVisible(int)\r\n     ",
      "child_ranges": [
        "(line 284,col 9)-(line 284,col 64)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getBaseLinesVisible()",
      "begin_line": 294,
      "end_line": 296,
      "comment": "\r\n     * Returns the base \u0027lines visible\u0027 attribute.\r\n     *\r\n     * @return The base flag.\r\n     *\r\n     * @see #getBaseLinesVisible()\r\n     ",
      "child_ranges": [
        "(line 295,col 9)-(line 295,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseLinesVisible(boolean)",
      "begin_line": 306,
      "end_line": 309,
      "comment": "\r\n     * Sets the base \u0027lines visible\u0027 flag and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getBaseLinesVisible()\r\n     ",
      "child_ranges": [
        "(line 307,col 9)-(line 307,col 37)",
        "(line 308,col 9)-(line 308,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getItemShapeVisible(int, int)",
      "begin_line": 322,
      "end_line": 330,
      "comment": "\r\n     * Returns the flag used to control whether or not the shape for an item is\r\n     * visible.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 323,col 9)-(line 323,col 54)",
        "(line 324,col 9)-(line 329,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getSeriesShapesVisible(int)",
      "begin_line": 342,
      "end_line": 344,
      "comment": "\r\n     * Returns the flag used to control whether or not the shapes for a series\r\n     * are visible.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setSeriesShapesVisible(int, Boolean)\r\n     ",
      "child_ranges": [
        "(line 343,col 9)-(line 343,col 59)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesShapesVisible(int, boolean)",
      "begin_line": 355,
      "end_line": 357,
      "comment": "\r\n     * Sets the \u0027shapes visible\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param visible  the flag.\r\n     *\r\n     * @see #getSeriesShapesVisible(int)\r\n     ",
      "child_ranges": [
        "(line 356,col 9)-(line 356,col 65)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesShapesVisible(int, java.lang.Boolean)",
      "begin_line": 368,
      "end_line": 371,
      "comment": "\r\n     * Sets the \u0027shapes visible\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getSeriesShapesVisible(int)\r\n     ",
      "child_ranges": [
        "(line 369,col 9)-(line 369,col 58)",
        "(line 370,col 9)-(line 370,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getBaseShapesVisible()",
      "begin_line": 380,
      "end_line": 382,
      "comment": "\r\n     * Returns the base \u0027shape visible\u0027 attribute.\r\n     *\r\n     * @return The base flag.\r\n     *\r\n     * @see #setBaseShapesVisible(boolean)\r\n     ",
      "child_ranges": [
        "(line 381,col 9)-(line 381,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseShapesVisible(boolean)",
      "begin_line": 392,
      "end_line": 395,
      "comment": "\r\n     * Sets the base \u0027shapes visible\u0027 flag and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getBaseShapesVisible()\r\n     ",
      "child_ranges": [
        "(line 393,col 9)-(line 393,col 38)",
        "(line 394,col 9)-(line 394,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getDrawOutlines()",
      "begin_line": 405,
      "end_line": 407,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if outlines should be drawn for shapes, and\r\n     * \u003ccode\u003efalse\u003c/code\u003e otherwise.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDrawOutlines(boolean)\r\n     ",
      "child_ranges": [
        "(line 406,col 9)-(line 406,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.setDrawOutlines(boolean)",
      "begin_line": 421,
      "end_line": 424,
      "comment": "\r\n     * Sets the flag that controls whether outlines are drawn for\r\n     * shapes, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     * \u003cP\u003e\r\n     * In some cases, shapes look better if they do NOT have an outline, but\r\n     * this flag allows you to set your own preference.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getDrawOutlines()\r\n     ",
      "child_ranges": [
        "(line 422,col 9)-(line 422,col 33)",
        "(line 423,col 9)-(line 423,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getUseOutlinePaint()",
      "begin_line": 434,
      "end_line": 436,
      "comment": "\r\n     * Returns the flag that controls whether the outline paint is used for\r\n     * shape outlines.  If not, the regular series paint is used.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setUseOutlinePaint(boolean)\r\n     ",
      "child_ranges": [
        "(line 435,col 9)-(line 435,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.setUseOutlinePaint(boolean)",
      "begin_line": 447,
      "end_line": 450,
      "comment": "\r\n     * Sets the flag that controls whether the outline paint is used for shape\r\n     * outlines, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param use  the flag.\r\n     *\r\n     * @see #getUseOutlinePaint()\r\n     ",
      "child_ranges": [
        "(line 448,col 9)-(line 448,col 35)",
        "(line 449,col 9)-(line 449,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getItemShapeFilled(int, int)",
      "begin_line": 465,
      "end_line": 473,
      "comment": "\r\n     * Returns the flag used to control whether or not the shape for an item\r\n     * is filled. The default implementation passes control to the\r\n     * \u003ccode\u003egetSeriesShapesFilled\u003c/code\u003e method. You can override this method\r\n     * if you require different behaviour.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 466,col 9)-(line 466,col 53)",
        "(line 467,col 9)-(line 472,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getSeriesShapesFilled(int)",
      "begin_line": 485,
      "end_line": 487,
      "comment": "\r\n     * Returns the flag used to control whether or not the shapes for a series\r\n     * are filled.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setSeriesShapesFilled(int, Boolean)\r\n     ",
      "child_ranges": [
        "(line 486,col 9)-(line 486,col 58)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesShapesFilled(int, java.lang.Boolean)",
      "begin_line": 498,
      "end_line": 501,
      "comment": "\r\n     * Sets the \u0027shapes filled\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param filled  the flag.\r\n     *\r\n     * @see #getSeriesShapesFilled(int)\r\n     ",
      "child_ranges": [
        "(line 499,col 9)-(line 499,col 59)",
        "(line 500,col 9)-(line 500,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesShapesFilled(int, boolean)",
      "begin_line": 512,
      "end_line": 515,
      "comment": "\r\n     * Sets the \u0027shapes filled\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param filled  the flag.\r\n     *\r\n     * @see #getSeriesShapesFilled(int)\r\n     ",
      "child_ranges": [
        "(line 514,col 9)-(line 514,col 63)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getBaseShapesFilled()",
      "begin_line": 524,
      "end_line": 526,
      "comment": "\r\n     * Returns the base \u0027shape filled\u0027 attribute.\r\n     *\r\n     * @return The base flag.\r\n     *\r\n     * @see #setBaseShapesFilled(boolean)\r\n     ",
      "child_ranges": [
        "(line 525,col 9)-(line 525,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseShapesFilled(boolean)",
      "begin_line": 536,
      "end_line": 539,
      "comment": "\r\n     * Sets the base \u0027shapes filled\u0027 flag and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getBaseShapesFilled()\r\n     ",
      "child_ranges": [
        "(line 537,col 9)-(line 537,col 37)",
        "(line 538,col 9)-(line 538,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getUseFillPaint()",
      "begin_line": 550,
      "end_line": 552,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the renderer should use the fill paint\r\n     * setting to fill shapes, and \u003ccode\u003efalse\u003c/code\u003e if it should just\r\n     * use the regular paint.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setUseFillPaint(boolean)\r\n     ",
      "child_ranges": [
        "(line 551,col 9)-(line 551,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.setUseFillPaint(boolean)",
      "begin_line": 563,
      "end_line": 566,
      "comment": "\r\n     * Sets the flag that controls whether the fill paint is used to fill\r\n     * shapes, and sends a {@link RendererChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getUseFillPaint()\r\n     ",
      "child_ranges": [
        "(line 564,col 9)-(line 564,col 33)",
        "(line 565,col 9)-(line 565,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getUseSeriesOffset()",
      "begin_line": 578,
      "end_line": 580,
      "comment": "\r\n     * Returns the flag that controls whether or not the x-position for each\r\n     * data item is offset within the category according to the series.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setUseSeriesOffset(boolean)\r\n     *\r\n     * @since 1.0.7\r\n     ",
      "child_ranges": [
        "(line 579,col 9)-(line 579,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.setUseSeriesOffset(boolean)",
      "begin_line": 593,
      "end_line": 596,
      "comment": "\r\n     * Sets the flag that controls whether or not the x-position for each\r\n     * data item is offset within its category according to the series, and\r\n     * sends a {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param offset  the offset.\r\n     *\r\n     * @see #getUseSeriesOffset()\r\n     *\r\n     * @since 1.0.7\r\n     ",
      "child_ranges": [
        "(line 594,col 9)-(line 594,col 38)",
        "(line 595,col 9)-(line 595,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getItemMargin()",
      "begin_line": 611,
      "end_line": 613,
      "comment": "\r\n     * Returns the item margin, which is the gap between items within a\r\n     * category (expressed as a percentage of the overall category width).\r\n     * This can be used to match the offset alignment with the bars drawn by\r\n     * a {@link BarRenderer}).\r\n     *\r\n     * @return The item margin.\r\n     *\r\n     * @see #setItemMargin(double)\r\n     * @see #getUseSeriesOffset()\r\n     *\r\n     * @since 1.0.7\r\n     ",
      "child_ranges": [
        "(line 612,col 9)-(line 612,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.setItemMargin(double)",
      "begin_line": 627,
      "end_line": 633,
      "comment": "\r\n     * Sets the item margin, which is the gap between items within a category\r\n     * (expressed as a percentage of the overall category width), and sends\r\n     * a {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param margin  the margin (0.0 \u003c\u003d margin \u003c 1.0).\r\n     *\r\n     * @see #getItemMargin()\r\n     * @see #getUseSeriesOffset()\r\n     *\r\n     * @since 1.0.7\r\n     ",
      "child_ranges": [
        "(line 628,col 9)-(line 630,col 9)",
        "(line 631,col 9)-(line 631,col 33)",
        "(line 632,col 9)-(line 632,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getLegendItem(int, int)",
      "begin_line": 643,
      "end_line": 694,
      "comment": "\r\n     * Returns a legend item for a series.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The legend item.\r\n     ",
      "child_ranges": [
        "(line 645,col 9)-(line 645,col 36)",
        "(line 646,col 9)-(line 648,col 9)",
        "(line 650,col 9)-(line 691,col 9)",
        "(line 692,col 9)-(line 692,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getPassCount()",
      "begin_line": 701,
      "end_line": 703,
      "comment": "\r\n     * This renderer uses two passes to draw the data.\r\n     *\r\n     * @return The pass count (\u003ccode\u003e2\u003c/code\u003e for this renderer).\r\n     ",
      "child_ranges": [
        "(line 702,col 9)-(line 702,col 17)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, boolean, int)",
      "begin_line": 720,
      "end_line": 858,
      "comment": "\r\n     * Draw a single data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the area in which the data is drawn.\r\n     * @param plot  the plot.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     * @param selected  is the item selected?\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 726,col 9)-(line 728,col 9)",
        "(line 731,col 9)-(line 734,col 9)",
        "(line 737,col 9)-(line 737,col 49)",
        "(line 738,col 9)-(line 740,col 9)",
        "(line 742,col 9)-(line 742,col 58)",
        "(line 743,col 9)-(line 745,col 9)",
        "(line 746,col 3)-(line 746,col 54)",
        "(line 748,col 9)-(line 748,col 60)",
        "(line 751,col 9)-(line 751,col 18)",
        "(line 752,col 9)-(line 760,col 9)",
        "(line 761,col 9)-(line 761,col 39)",
        "(line 762,col 9)-(line 763,col 41)",
        "(line 765,col 9)-(line 799,col 9)",
        "(line 801,col 9)-(line 856,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)",
      "begin_line": 867,
      "end_line": 908,
      "comment": "\r\n     * Tests this renderer for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 869,col 9)-(line 871,col 9)",
        "(line 872,col 9)-(line 874,col 9)",
        "(line 876,col 9)-(line 876,col 63)",
        "(line 877,col 9)-(line 879,col 9)",
        "(line 880,col 9)-(line 883,col 9)",
        "(line 884,col 9)-(line 886,col 9)",
        "(line 887,col 9)-(line 890,col 9)",
        "(line 891,col 9)-(line 894,col 9)",
        "(line 895,col 9)-(line 897,col 9)",
        "(line 898,col 9)-(line 900,col 9)",
        "(line 901,col 9)-(line 903,col 9)",
        "(line 904,col 9)-(line 906,col 9)",
        "(line 907,col 9)-(line 907,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.clone()",
      "begin_line": 917,
      "end_line": 926,
      "comment": "\r\n     * Returns an independent copy of the renderer.\r\n     *\r\n     * @return A clone.\r\n     *\r\n     * @throws CloneNotSupportedException  should not happen.\r\n     ",
      "child_ranges": [
        "(line 918,col 9)-(line 918,col 74)",
        "(line 919,col 9)-(line 920,col 64)",
        "(line 921,col 9)-(line 922,col 65)",
        "(line 923,col 9)-(line 924,col 64)",
        "(line 925,col 9)-(line 925,col 21)"
      ]
    }
  ]
}