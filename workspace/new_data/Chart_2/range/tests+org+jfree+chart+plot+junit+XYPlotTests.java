{
  "filepath": "/tmp/Chart-2b/tests/org/jfree/chart/plot/junit/XYPlotTests.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "XYPlotTests",
      "is_interface": false,
      "parent_types": [
        "TestCase"
      ],
      "begin_line": 111,
      "end_line": 1227,
      "comment": "\n * Tests for the {@link XYPlot} class.\n "
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.suite()",
      "begin_line": 118,
      "end_line": 120,
      "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
      "child_ranges": [
        "(line 119,col 9)-(line 119,col 48)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.XYPlotTests(java.lang.String)",
      "begin_line": 127,
      "end_line": 129,
      "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
      "child_ranges": [
        "(line 128,col 9)-(line 128,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testEquals()",
      "begin_line": 145,
      "end_line": 440,
      "comment": "\n     * Some checks for the equals() method.\n     ",
      "child_ranges": [
        "(line 147,col 9)-(line 147,col 36)",
        "(line 148,col 9)-(line 148,col 36)",
        "(line 149,col 9)-(line 149,col 40)",
        "(line 152,col 9)-(line 152,col 57)",
        "(line 153,col 9)-(line 153,col 41)",
        "(line 154,col 9)-(line 154,col 57)",
        "(line 155,col 9)-(line 155,col 40)",
        "(line 158,col 9)-(line 158,col 73)",
        "(line 159,col 9)-(line 159,col 41)",
        "(line 160,col 9)-(line 160,col 73)",
        "(line 161,col 9)-(line 161,col 40)",
        "(line 164,col 9)-(line 164,col 59)",
        "(line 165,col 9)-(line 165,col 41)",
        "(line 166,col 9)-(line 166,col 59)",
        "(line 167,col 9)-(line 167,col 40)",
        "(line 170,col 9)-(line 170,col 63)",
        "(line 171,col 9)-(line 171,col 41)",
        "(line 172,col 9)-(line 172,col 63)",
        "(line 173,col 9)-(line 173,col 40)",
        "(line 176,col 9)-(line 176,col 73)",
        "(line 177,col 9)-(line 177,col 41)",
        "(line 178,col 9)-(line 178,col 73)",
        "(line 179,col 9)-(line 179,col 40)",
        "(line 182,col 9)-(line 182,col 67)",
        "(line 183,col 9)-(line 183,col 41)",
        "(line 184,col 9)-(line 184,col 67)",
        "(line 185,col 9)-(line 185,col 40)",
        "(line 188,col 9)-(line 188,col 57)",
        "(line 189,col 9)-(line 189,col 41)",
        "(line 190,col 9)-(line 190,col 57)",
        "(line 191,col 9)-(line 191,col 40)",
        "(line 194,col 9)-(line 194,col 62)",
        "(line 195,col 9)-(line 195,col 41)",
        "(line 196,col 9)-(line 196,col 62)",
        "(line 197,col 9)-(line 197,col 40)",
        "(line 200,col 9)-(line 200,col 71)",
        "(line 201,col 9)-(line 201,col 41)",
        "(line 202,col 9)-(line 202,col 71)",
        "(line 203,col 9)-(line 203,col 40)",
        "(line 206,col 9)-(line 206,col 66)",
        "(line 207,col 9)-(line 207,col 41)",
        "(line 208,col 9)-(line 208,col 66)",
        "(line 209,col 9)-(line 209,col 40)",
        "(line 212,col 9)-(line 212,col 45)",
        "(line 213,col 9)-(line 213,col 41)",
        "(line 214,col 9)-(line 214,col 45)",
        "(line 215,col 9)-(line 215,col 40)",
        "(line 218,col 9)-(line 218,col 44)",
        "(line 219,col 9)-(line 219,col 41)",
        "(line 220,col 9)-(line 220,col 44)",
        "(line 221,col 9)-(line 221,col 40)",
        "(line 224,col 9)-(line 224,col 55)",
        "(line 225,col 9)-(line 225,col 41)",
        "(line 226,col 9)-(line 226,col 55)",
        "(line 227,col 9)-(line 227,col 40)",
        "(line 230,col 9)-(line 230,col 59)",
        "(line 231,col 9)-(line 231,col 41)",
        "(line 232,col 9)-(line 232,col 59)",
        "(line 233,col 9)-(line 233,col 40)",
        "(line 236,col 9)-(line 236,col 47)",
        "(line 237,col 9)-(line 237,col 41)",
        "(line 238,col 9)-(line 238,col 47)",
        "(line 239,col 9)-(line 239,col 40)",
        "(line 242,col 9)-(line 242,col 46)",
        "(line 243,col 9)-(line 243,col 46)",
        "(line 244,col 9)-(line 244,col 41)",
        "(line 245,col 9)-(line 245,col 46)",
        "(line 246,col 9)-(line 246,col 40)",
        "(line 249,col 9)-(line 250,col 40)",
        "(line 251,col 9)-(line 251,col 41)",
        "(line 252,col 9)-(line 253,col 40)",
        "(line 254,col 9)-(line 254,col 40)",
        "(line 257,col 9)-(line 257,col 46)",
        "(line 258,col 9)-(line 258,col 41)",
        "(line 259,col 9)-(line 259,col 46)",
        "(line 260,col 9)-(line 260,col 40)",
        "(line 263,col 9)-(line 263,col 45)",
        "(line 264,col 9)-(line 264,col 41)",
        "(line 265,col 9)-(line 265,col 45)",
        "(line 266,col 9)-(line 266,col 40)",
        "(line 269,col 9)-(line 270,col 40)",
        "(line 271,col 9)-(line 271,col 41)",
        "(line 272,col 9)-(line 273,col 40)",
        "(line 274,col 9)-(line 274,col 40)",
        "(line 277,col 9)-(line 277,col 48)",
        "(line 278,col 9)-(line 278,col 41)",
        "(line 279,col 9)-(line 279,col 48)",
        "(line 280,col 9)-(line 280,col 40)",
        "(line 283,col 9)-(line 283,col 49)",
        "(line 284,col 9)-(line 284,col 41)",
        "(line 285,col 9)-(line 285,col 49)",
        "(line 286,col 9)-(line 286,col 40)",
        "(line 289,col 9)-(line 290,col 40)",
        "(line 291,col 9)-(line 291,col 41)",
        "(line 292,col 9)-(line 293,col 40)",
        "(line 294,col 9)-(line 294,col 40)",
        "(line 297,col 9)-(line 297,col 45)",
        "(line 298,col 9)-(line 298,col 41)",
        "(line 299,col 9)-(line 299,col 45)",
        "(line 300,col 9)-(line 300,col 40)",
        "(line 303,col 9)-(line 303,col 44)",
        "(line 304,col 9)-(line 304,col 41)",
        "(line 305,col 9)-(line 305,col 44)",
        "(line 306,col 9)-(line 306,col 40)",
        "(line 309,col 9)-(line 309,col 46)",
        "(line 310,col 9)-(line 310,col 41)",
        "(line 311,col 9)-(line 311,col 46)",
        "(line 312,col 9)-(line 312,col 40)",
        "(line 315,col 9)-(line 316,col 40)",
        "(line 317,col 9)-(line 317,col 41)",
        "(line 318,col 9)-(line 319,col 40)",
        "(line 320,col 9)-(line 320,col 40)",
        "(line 323,col 9)-(line 323,col 51)",
        "(line 324,col 9)-(line 324,col 41)",
        "(line 325,col 9)-(line 325,col 51)",
        "(line 326,col 9)-(line 326,col 40)",
        "(line 329,col 9)-(line 329,col 51)",
        "(line 330,col 9)-(line 330,col 41)",
        "(line 331,col 9)-(line 331,col 51)",
        "(line 332,col 9)-(line 332,col 40)",
        "(line 335,col 9)-(line 335,col 72)",
        "(line 336,col 9)-(line 336,col 41)",
        "(line 337,col 9)-(line 337,col 72)",
        "(line 338,col 9)-(line 338,col 40)",
        "(line 340,col 9)-(line 340,col 73)",
        "(line 341,col 9)-(line 341,col 41)",
        "(line 342,col 9)-(line 342,col 73)",
        "(line 343,col 9)-(line 343,col 40)",
        "(line 346,col 9)-(line 346,col 62)",
        "(line 347,col 9)-(line 347,col 41)",
        "(line 348,col 9)-(line 348,col 62)",
        "(line 349,col 9)-(line 349,col 40)",
        "(line 352,col 9)-(line 352,col 27)",
        "(line 353,col 9)-(line 353,col 41)",
        "(line 354,col 9)-(line 354,col 27)",
        "(line 355,col 9)-(line 355,col 40)",
        "(line 358,col 9)-(line 358,col 64)",
        "(line 359,col 9)-(line 359,col 41)",
        "(line 360,col 9)-(line 360,col 64)",
        "(line 361,col 9)-(line 361,col 40)",
        "(line 364,col 9)-(line 365,col 41)",
        "(line 366,col 9)-(line 366,col 41)",
        "(line 367,col 9)-(line 368,col 41)",
        "(line 369,col 9)-(line 369,col 40)",
        "(line 370,col 9)-(line 371,col 41)",
        "(line 372,col 9)-(line 372,col 41)",
        "(line 373,col 9)-(line 374,col 41)",
        "(line 375,col 9)-(line 375,col 40)",
        "(line 376,col 9)-(line 377,col 41)",
        "(line 378,col 9)-(line 378,col 41)",
        "(line 379,col 9)-(line 380,col 41)",
        "(line 381,col 9)-(line 381,col 40)",
        "(line 382,col 9)-(line 383,col 41)",
        "(line 384,col 9)-(line 384,col 41)",
        "(line 385,col 9)-(line 386,col 41)",
        "(line 387,col 9)-(line 387,col 40)",
        "(line 389,col 9)-(line 389,col 48)",
        "(line 390,col 9)-(line 390,col 41)",
        "(line 391,col 9)-(line 391,col 48)",
        "(line 392,col 9)-(line 392,col 40)",
        "(line 394,col 9)-(line 394,col 48)",
        "(line 395,col 9)-(line 395,col 41)",
        "(line 396,col 9)-(line 396,col 48)",
        "(line 397,col 9)-(line 397,col 40)",
        "(line 399,col 9)-(line 399,col 51)",
        "(line 400,col 9)-(line 400,col 41)",
        "(line 401,col 9)-(line 401,col 51)",
        "(line 402,col 9)-(line 402,col 40)",
        "(line 404,col 9)-(line 404,col 53)",
        "(line 405,col 9)-(line 405,col 41)",
        "(line 406,col 9)-(line 406,col 53)",
        "(line 407,col 9)-(line 407,col 40)",
        "(line 409,col 9)-(line 409,col 61)",
        "(line 410,col 9)-(line 410,col 41)",
        "(line 411,col 9)-(line 411,col 61)",
        "(line 412,col 9)-(line 412,col 40)",
        "(line 414,col 9)-(line 414,col 50)",
        "(line 415,col 9)-(line 415,col 41)",
        "(line 416,col 9)-(line 416,col 50)",
        "(line 417,col 9)-(line 417,col 40)",
        "(line 419,col 9)-(line 419,col 53)",
        "(line 420,col 9)-(line 420,col 41)",
        "(line 421,col 9)-(line 421,col 53)",
        "(line 422,col 9)-(line 422,col 40)",
        "(line 424,col 9)-(line 424,col 66)",
        "(line 425,col 9)-(line 425,col 41)",
        "(line 426,col 9)-(line 426,col 66)",
        "(line 427,col 9)-(line 427,col 40)",
        "(line 429,col 9)-(line 430,col 29)",
        "(line 431,col 9)-(line 431,col 53)",
        "(line 432,col 9)-(line 432,col 41)",
        "(line 433,col 9)-(line 433,col 53)",
        "(line 434,col 9)-(line 434,col 40)",
        "(line 436,col 9)-(line 436,col 52)",
        "(line 437,col 9)-(line 437,col 41)",
        "(line 438,col 9)-(line 438,col 52)",
        "(line 439,col 9)-(line 439,col 40)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning()",
      "begin_line": 445,
      "end_line": 457,
      "comment": "\n     * Confirm that basic cloning works.\n     ",
      "child_ranges": [
        "(line 446,col 9)-(line 446,col 33)",
        "(line 447,col 9)-(line 447,col 25)",
        "(line 448,col 9)-(line 453,col 9)",
        "(line 454,col 9)-(line 454,col 29)",
        "(line 455,col 9)-(line 455,col 51)",
        "(line 456,col 9)-(line 456,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning2()",
      "begin_line": 462,
      "end_line": 481,
      "comment": "\n     * Tests cloning for a more complex plot.\n     ",
      "child_ranges": [
        "(line 463,col 9)-(line 464,col 76)",
        "(line 465,col 9)-(line 465,col 59)",
        "(line 466,col 9)-(line 467,col 33)",
        "(line 468,col 9)-(line 468,col 50)",
        "(line 469,col 9)-(line 469,col 49)",
        "(line 470,col 9)-(line 470,col 47)",
        "(line 471,col 9)-(line 471,col 25)",
        "(line 472,col 9)-(line 477,col 9)",
        "(line 478,col 9)-(line 478,col 29)",
        "(line 479,col 9)-(line 479,col 51)",
        "(line 480,col 9)-(line 480,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning3()",
      "begin_line": 487,
      "end_line": 506,
      "comment": "\n     * Tests cloning for a plot where the fixed legend items have been\n     * specified.\n     ",
      "child_ranges": [
        "(line 488,col 9)-(line 489,col 76)",
        "(line 490,col 9)-(line 490,col 61)",
        "(line 491,col 9)-(line 491,col 35)",
        "(line 492,col 9)-(line 492,col 25)",
        "(line 493,col 9)-(line 498,col 9)",
        "(line 499,col 9)-(line 499,col 29)",
        "(line 500,col 9)-(line 500,col 51)",
        "(line 501,col 9)-(line 501,col 34)",
        "(line 504,col 9)-(line 504,col 36)",
        "(line 505,col 9)-(line 505,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantOrigin()",
      "begin_line": 511,
      "end_line": 526,
      "comment": "\n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
      "child_ranges": [
        "(line 512,col 9)-(line 512,col 33)",
        "(line 513,col 9)-(line 513,col 49)",
        "(line 514,col 9)-(line 514,col 32)",
        "(line 515,col 9)-(line 515,col 25)",
        "(line 516,col 9)-(line 521,col 9)",
        "(line 522,col 9)-(line 522,col 29)",
        "(line 523,col 9)-(line 523,col 51)",
        "(line 524,col 9)-(line 524,col 34)",
        "(line 525,col 9)-(line 525,col 48)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantPaint()",
      "begin_line": 531,
      "end_line": 551,
      "comment": "\n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
      "child_ranges": [
        "(line 532,col 9)-(line 532,col 33)",
        "(line 533,col 9)-(line 534,col 41)",
        "(line 535,col 9)-(line 535,col 25)",
        "(line 536,col 9)-(line 541,col 9)",
        "(line 542,col 9)-(line 542,col 29)",
        "(line 543,col 9)-(line 543,col 51)",
        "(line 544,col 9)-(line 544,col 34)",
        "(line 547,col 9)-(line 547,col 42)",
        "(line 548,col 9)-(line 548,col 35)",
        "(line 549,col 9)-(line 549,col 42)",
        "(line 550,col 9)-(line 550,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testBug2817504()",
      "begin_line": 557,
      "end_line": 575,
      "comment": "\n     * Renderers that belong to the plot are being cloned but they are\n     * retaining a reference to the original plot.\n     ",
      "child_ranges": [
        "(line 558,col 9)-(line 558,col 33)",
        "(line 559,col 9)-(line 559,col 65)",
        "(line 560,col 9)-(line 560,col 27)",
        "(line 561,col 9)-(line 561,col 25)",
        "(line 562,col 9)-(line 567,col 9)",
        "(line 568,col 9)-(line 568,col 29)",
        "(line 569,col 9)-(line 569,col 51)",
        "(line 570,col 9)-(line 570,col 34)",
        "(line 573,col 9)-(line 573,col 78)",
        "(line 574,col 9)-(line 574,col 39)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloneIndependence()",
      "begin_line": 580,
      "end_line": 648,
      "comment": "\n     * Tests the independence of the clones.\n     ",
      "child_ranges": [
        "(line 581,col 9)-(line 582,col 76)",
        "(line 583,col 9)-(line 583,col 61)",
        "(line 584,col 9)-(line 584,col 65)",
        "(line 585,col 9)-(line 585,col 59)",
        "(line 586,col 9)-(line 586,col 62)",
        "(line 587,col 9)-(line 587,col 47)",
        "(line 588,col 9)-(line 588,col 25)",
        "(line 589,col 9)-(line 595,col 9)",
        "(line 596,col 9)-(line 596,col 34)",
        "(line 598,col 9)-(line 598,col 45)",
        "(line 599,col 9)-(line 599,col 35)",
        "(line 600,col 9)-(line 600,col 45)",
        "(line 601,col 9)-(line 601,col 34)",
        "(line 603,col 9)-(line 603,col 43)",
        "(line 604,col 9)-(line 604,col 35)",
        "(line 605,col 9)-(line 605,col 43)",
        "(line 606,col 9)-(line 606,col 34)",
        "(line 608,col 9)-(line 608,col 63)",
        "(line 609,col 9)-(line 609,col 35)",
        "(line 610,col 9)-(line 610,col 63)",
        "(line 611,col 9)-(line 611,col 34)",
        "(line 613,col 9)-(line 613,col 40)",
        "(line 614,col 9)-(line 614,col 35)",
        "(line 615,col 9)-(line 615,col 40)",
        "(line 616,col 9)-(line 616,col 34)",
        "(line 618,col 9)-(line 618,col 44)",
        "(line 619,col 9)-(line 619,col 35)",
        "(line 620,col 9)-(line 620,col 44)",
        "(line 621,col 9)-(line 621,col 34)",
        "(line 623,col 9)-(line 623,col 42)",
        "(line 624,col 9)-(line 624,col 35)",
        "(line 625,col 9)-(line 625,col 42)",
        "(line 626,col 9)-(line 626,col 34)",
        "(line 628,col 9)-(line 628,col 61)",
        "(line 629,col 9)-(line 629,col 35)",
        "(line 630,col 9)-(line 630,col 61)",
        "(line 631,col 9)-(line 631,col 34)",
        "(line 633,col 9)-(line 633,col 39)",
        "(line 634,col 9)-(line 634,col 35)",
        "(line 635,col 9)-(line 635,col 39)",
        "(line 636,col 9)-(line 636,col 34)",
        "(line 638,col 9)-(line 638,col 57)",
        "(line 639,col 9)-(line 639,col 35)",
        "(line 640,col 9)-(line 640,col 57)",
        "(line 641,col 9)-(line 641,col 34)",
        "(line 643,col 9)-(line 643,col 57)",
        "(line 644,col 9)-(line 644,col 35)",
        "(line 645,col 9)-(line 645,col 57)",
        "(line 646,col 9)-(line 646,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetNullRenderer()",
      "begin_line": 654,
      "end_line": 665,
      "comment": "\n     * Setting a null renderer should be allowed, but is generating a null\n     * pointer exception in 0.9.7.\n     ",
      "child_ranges": [
        "(line 655,col 9)-(line 655,col 31)",
        "(line 656,col 9)-(line 663,col 9)",
        "(line 664,col 9)-(line 664,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization1()",
      "begin_line": 670,
      "end_line": 695,
      "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
      "child_ranges": [
        "(line 672,col 9)-(line 672,col 50)",
        "(line 673,col 9)-(line 673,col 57)",
        "(line 674,col 9)-(line 674,col 55)",
        "(line 675,col 9)-(line 675,col 71)",
        "(line 676,col 9)-(line 676,col 70)",
        "(line 677,col 9)-(line 677,col 25)",
        "(line 679,col 9)-(line 692,col 9)",
        "(line 693,col 9)-(line 693,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization2()",
      "begin_line": 701,
      "end_line": 726,
      "comment": "\n     * Serialize an instance, restore it, and check for equality.  This test\n     * uses a {@link DateAxis} and a {@link StandardXYToolTipGenerator}.\n     ",
      "child_ranges": [
        "(line 703,col 9)-(line 703,col 51)",
        "(line 704,col 9)-(line 704,col 59)",
        "(line 705,col 9)-(line 706,col 68)",
        "(line 707,col 9)-(line 707,col 77)",
        "(line 708,col 9)-(line 708,col 25)",
        "(line 710,col 9)-(line 723,col 9)",
        "(line 724,col 9)-(line 724,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization3()",
      "begin_line": 738,
      "end_line": 772,
      "comment": "\n     * Problem to reproduce a bug in serialization.  The bug (first reported\n     * against the {@link org.jfree.chart.plot.CategoryPlot} class) is a null\n     * pointer exception that occurs when drawing a plot after deserialization.\n     * It is caused by four temporary storage structures (axesAtTop,\n     * axesAtBottom, axesAtLeft and axesAtRight - all initialized as empty\n     * lists in the constructor) not being initialized by the readObject()\n     * method following deserialization.  This test has been written to\n     * reproduce the bug (now fixed).\n     ",
      "child_ranges": [
        "(line 740,col 9)-(line 740,col 62)",
        "(line 741,col 9)-(line 742,col 60)",
        "(line 743,col 9)-(line 743,col 33)",
        "(line 746,col 9)-(line 760,col 9)",
        "(line 762,col 9)-(line 762,col 36)",
        "(line 763,col 9)-(line 763,col 30)",
        "(line 764,col 9)-(line 770,col 9)",
        "(line 771,col 9)-(line 771,col 27)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization4()",
      "begin_line": 778,
      "end_line": 817,
      "comment": "\n     * A test to reproduce a bug in serialization: the domain and/or range\n     * markers for a plot are not being serialized.\n     ",
      "child_ranges": [
        "(line 780,col 9)-(line 780,col 62)",
        "(line 781,col 9)-(line 782,col 60)",
        "(line 783,col 9)-(line 783,col 47)",
        "(line 784,col 9)-(line 784,col 69)",
        "(line 785,col 9)-(line 785,col 77)",
        "(line 786,col 9)-(line 786,col 68)",
        "(line 787,col 9)-(line 787,col 76)",
        "(line 788,col 9)-(line 788,col 33)",
        "(line 791,col 9)-(line 805,col 9)",
        "(line 807,col 9)-(line 807,col 36)",
        "(line 808,col 9)-(line 808,col 30)",
        "(line 809,col 9)-(line 815,col 9)",
        "(line 816,col 9)-(line 816,col 27)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization5()",
      "begin_line": 824,
      "end_line": 875,
      "comment": "\n     * Tests a bug where the plot is no longer registered as a listener\n     * with the dataset(s) and axes after deserialization.  See patch 1209475\n     * at SourceForge.\n     ",
      "child_ranges": [
        "(line 825,col 9)-(line 825,col 63)",
        "(line 826,col 9)-(line 826,col 60)",
        "(line 827,col 9)-(line 827,col 58)",
        "(line 828,col 9)-(line 828,col 72)",
        "(line 829,col 9)-(line 829,col 77)",
        "(line 830,col 9)-(line 830,col 60)",
        "(line 831,col 9)-(line 831,col 58)",
        "(line 832,col 9)-(line 832,col 72)",
        "(line 833,col 9)-(line 833,col 63)",
        "(line 834,col 9)-(line 834,col 35)",
        "(line 835,col 9)-(line 835,col 41)",
        "(line 836,col 9)-(line 836,col 39)",
        "(line 837,col 9)-(line 837,col 37)",
        "(line 838,col 9)-(line 838,col 25)",
        "(line 839,col 9)-(line 852,col 9)",
        "(line 853,col 9)-(line 853,col 29)",
        "(line 857,col 9)-(line 857,col 66)",
        "(line 858,col 9)-(line 858,col 64)",
        "(line 859,col 9)-(line 859,col 76)",
        "(line 860,col 9)-(line 861,col 57)",
        "(line 862,col 9)-(line 862,col 66)",
        "(line 863,col 9)-(line 863,col 64)",
        "(line 864,col 9)-(line 864,col 76)",
        "(line 865,col 9)-(line 866,col 57)",
        "(line 867,col 9)-(line 867,col 45)",
        "(line 868,col 9)-(line 868,col 48)",
        "(line 869,col 9)-(line 869,col 47)",
        "(line 870,col 9)-(line 870,col 46)",
        "(line 871,col 9)-(line 871,col 45)",
        "(line 872,col 9)-(line 872,col 48)",
        "(line 873,col 9)-(line 873,col 47)",
        "(line 874,col 9)-(line 874,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetRendererForDataset()",
      "begin_line": 880,
      "end_line": 899,
      "comment": "\n     * Some checks for the getRendererForDataset() method.\n     ",
      "child_ranges": [
        "(line 881,col 9)-(line 881,col 48)",
        "(line 882,col 9)-(line 882,col 48)",
        "(line 883,col 9)-(line 883,col 48)",
        "(line 884,col 9)-(line 884,col 48)",
        "(line 885,col 9)-(line 885,col 57)",
        "(line 886,col 9)-(line 886,col 57)",
        "(line 887,col 9)-(line 887,col 35)",
        "(line 888,col 9)-(line 888,col 31)",
        "(line 889,col 9)-(line 889,col 31)",
        "(line 890,col 9)-(line 890,col 31)",
        "(line 891,col 9)-(line 891,col 32)",
        "(line 893,col 9)-(line 893,col 32)",
        "(line 894,col 9)-(line 894,col 57)",
        "(line 895,col 9)-(line 895,col 57)",
        "(line 896,col 9)-(line 896,col 57)",
        "(line 897,col 9)-(line 897,col 59)",
        "(line 898,col 9)-(line 898,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetLegendItems()",
      "begin_line": 904,
      "end_line": 916,
      "comment": "\n     * Some checks for the getLegendItems() method.\n     ",
      "child_ranges": [
        "(line 907,col 9)-(line 907,col 40)",
        "(line 908,col 9)-(line 908,col 40)",
        "(line 909,col 9)-(line 909,col 57)",
        "(line 910,col 9)-(line 910,col 35)",
        "(line 911,col 9)-(line 911,col 31)",
        "(line 912,col 9)-(line 912,col 31)",
        "(line 913,col 9)-(line 913,col 32)",
        "(line 914,col 9)-(line 914,col 59)",
        "(line 915,col 9)-(line 915,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset1()",
      "begin_line": 923,
      "end_line": 946,
      "comment": "\n     * Creates a sample dataset.\n     *\n     * @return Series 1.\n     ",
      "child_ranges": [
        "(line 926,col 9)-(line 926,col 56)",
        "(line 927,col 9)-(line 927,col 69)",
        "(line 928,col 9)-(line 928,col 69)",
        "(line 929,col 9)-(line 929,col 69)",
        "(line 930,col 9)-(line 930,col 69)",
        "(line 931,col 9)-(line 931,col 69)",
        "(line 932,col 9)-(line 932,col 69)",
        "(line 933,col 9)-(line 933,col 69)",
        "(line 934,col 9)-(line 934,col 69)",
        "(line 935,col 9)-(line 935,col 69)",
        "(line 936,col 9)-(line 936,col 70)",
        "(line 937,col 9)-(line 937,col 70)",
        "(line 938,col 9)-(line 938,col 70)",
        "(line 939,col 9)-(line 939,col 70)",
        "(line 940,col 9)-(line 940,col 70)",
        "(line 941,col 9)-(line 941,col 70)",
        "(line 943,col 9)-(line 943,col 76)",
        "(line 944,col 9)-(line 944,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset2()",
      "begin_line": 953,
      "end_line": 959,
      "comment": "\n     * Creates a sample dataset.\n     *\n     * @return A sample dataset.\n     ",
      "child_ranges": [
        "(line 955,col 9)-(line 955,col 51)",
        "(line 956,col 9)-(line 956,col 71)",
        "(line 957,col 9)-(line 957,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetRenderer()",
      "begin_line": 965,
      "end_line": 975,
      "comment": "\n     * A test for a bug where setting the renderer doesn\u0027t register the plot\n     * as a RendererChangeListener.\n     ",
      "child_ranges": [
        "(line 966,col 9)-(line 966,col 35)",
        "(line 967,col 9)-(line 967,col 63)",
        "(line 968,col 9)-(line 968,col 35)",
        "(line 971,col 9)-(line 971,col 67)",
        "(line 972,col 9)-(line 972,col 41)",
        "(line 973,col 9)-(line 973,col 48)",
        "(line 974,col 9)-(line 974,col 48)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveAnnotation()",
      "begin_line": 980,
      "end_line": 998,
      "comment": "\n     * Some checks for the removeAnnotation() method.\n     ",
      "child_ranges": [
        "(line 981,col 9)-(line 981,col 35)",
        "(line 982,col 9)-(line 982,col 66)",
        "(line 983,col 9)-(line 983,col 66)",
        "(line 984,col 9)-(line 984,col 66)",
        "(line 985,col 9)-(line 985,col 31)",
        "(line 986,col 9)-(line 986,col 31)",
        "(line 987,col 9)-(line 987,col 31)",
        "(line 988,col 9)-(line 988,col 34)",
        "(line 989,col 9)-(line 989,col 77)",
        "(line 990,col 9)-(line 990,col 28)",
        "(line 994,col 9)-(line 994,col 34)",
        "(line 995,col 9)-(line 995,col 34)",
        "(line 996,col 9)-(line 996,col 60)",
        "(line 997,col 9)-(line 997,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddDomainMarker()",
      "begin_line": 1003,
      "end_line": 1013,
      "comment": "\n     * Some tests for the addDomainMarker() method(s).\n     ",
      "child_ranges": [
        "(line 1004,col 9)-(line 1004,col 35)",
        "(line 1005,col 9)-(line 1005,col 40)",
        "(line 1006,col 9)-(line 1006,col 32)",
        "(line 1007,col 9)-(line 1008,col 45)",
        "(line 1009,col 9)-(line 1009,col 45)",
        "(line 1010,col 9)-(line 1010,col 34)",
        "(line 1011,col 9)-(line 1011,col 78)",
        "(line 1012,col 9)-(line 1012,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddRangeMarker()",
      "begin_line": 1018,
      "end_line": 1028,
      "comment": "\n     * Some tests for the addRangeMarker() method(s).\n     ",
      "child_ranges": [
        "(line 1019,col 9)-(line 1019,col 35)",
        "(line 1020,col 9)-(line 1020,col 40)",
        "(line 1021,col 9)-(line 1021,col 31)",
        "(line 1022,col 9)-(line 1023,col 45)",
        "(line 1024,col 9)-(line 1024,col 45)",
        "(line 1025,col 9)-(line 1025,col 33)",
        "(line 1026,col 9)-(line 1026,col 78)",
        "(line 1027,col 9)-(line 1027,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.test1654215()",
      "begin_line": 1034,
      "end_line": 1054,
      "comment": "\n     * A test for bug 1654215 (where a renderer is added to the plot without\n     * a corresponding dataset and it throws an exception at drawing time).\n     ",
      "child_ranges": [
        "(line 1035,col 9)-(line 1035,col 58)",
        "(line 1036,col 9)-(line 1037,col 31)",
        "(line 1038,col 9)-(line 1038,col 47)",
        "(line 1039,col 9)-(line 1039,col 58)",
        "(line 1040,col 9)-(line 1040,col 32)",
        "(line 1041,col 9)-(line 1052,col 9)",
        "(line 1053,col 9)-(line 1053,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawRangeGridlines()",
      "begin_line": 1060,
      "end_line": 1080,
      "comment": "\n     * A test for drawing range grid lines when there is no primary renderer.\n     * In 1.0.4, this is throwing a NullPointerException.\n     ",
      "child_ranges": [
        "(line 1061,col 9)-(line 1061,col 58)",
        "(line 1062,col 9)-(line 1063,col 31)",
        "(line 1064,col 9)-(line 1064,col 47)",
        "(line 1065,col 9)-(line 1065,col 31)",
        "(line 1066,col 9)-(line 1066,col 32)",
        "(line 1067,col 9)-(line 1078,col 9)",
        "(line 1079,col 9)-(line 1079,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawSeriesWithZeroItems()",
      "begin_line": 1086,
      "end_line": 1106,
      "comment": "\n     * A test for drawing a plot where a series has zero items.  With\n     * JFreeChart 1.0.5+cvs this was throwing an exception at one point.\n     ",
      "child_ranges": [
        "(line 1087,col 9)-(line 1087,col 58)",
        "(line 1088,col 9)-(line 1088,col 79)",
        "(line 1089,col 9)-(line 1089,col 63)",
        "(line 1090,col 9)-(line 1091,col 31)",
        "(line 1092,col 9)-(line 1092,col 32)",
        "(line 1093,col 9)-(line 1104,col 9)",
        "(line 1105,col 9)-(line 1105,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveDomainMarker()",
      "begin_line": 1112,
      "end_line": 1115,
      "comment": "\n     * Check that removing a marker that isn\u0027t assigned to the plot returns\n     * false.\n     ",
      "child_ranges": [
        "(line 1113,col 9)-(line 1113,col 35)",
        "(line 1114,col 9)-(line 1114,col 67)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveRangeMarker()",
      "begin_line": 1121,
      "end_line": 1124,
      "comment": "\n     * Check that removing a marker that isn\u0027t assigned to the plot returns\n     * false.\n     ",
      "child_ranges": [
        "(line 1122,col 9)-(line 1122,col 35)",
        "(line 1123,col 9)-(line 1123,col 66)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetDomainAxisForDataset()",
      "begin_line": 1129,
      "end_line": 1175,
      "comment": "\n     * Some tests for the getDomainAxisForDataset() method.\n     ",
      "child_ranges": [
        "(line 1130,col 9)-(line 1130,col 53)",
        "(line 1131,col 9)-(line 1131,col 47)",
        "(line 1132,col 9)-(line 1132,col 47)",
        "(line 1133,col 9)-(line 1133,col 62)",
        "(line 1134,col 9)-(line 1134,col 66)",
        "(line 1135,col 9)-(line 1135,col 61)",
        "(line 1138,col 9)-(line 1138,col 29)",
        "(line 1139,col 9)-(line 1144,col 9)",
        "(line 1145,col 9)-(line 1145,col 25)",
        "(line 1148,col 9)-(line 1148,col 21)",
        "(line 1149,col 9)-(line 1154,col 9)",
        "(line 1155,col 9)-(line 1155,col 25)",
        "(line 1159,col 9)-(line 1159,col 49)",
        "(line 1160,col 9)-(line 1160,col 38)",
        "(line 1161,col 9)-(line 1161,col 61)",
        "(line 1163,col 9)-(line 1163,col 42)",
        "(line 1164,col 9)-(line 1164,col 62)",
        "(line 1166,col 9)-(line 1167,col 33)",
        "(line 1168,col 9)-(line 1168,col 52)",
        "(line 1169,col 9)-(line 1169,col 61)",
        "(line 1171,col 9)-(line 1172,col 33)",
        "(line 1173,col 9)-(line 1173,col 52)",
        "(line 1174,col 9)-(line 1174,col 62)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetRangeAxisForDataset()",
      "begin_line": 1180,
      "end_line": 1226,
      "comment": "\n     * Some tests for the getRangeAxisForDataset() method.\n     ",
      "child_ranges": [
        "(line 1181,col 9)-(line 1181,col 53)",
        "(line 1182,col 9)-(line 1182,col 47)",
        "(line 1183,col 9)-(line 1183,col 47)",
        "(line 1184,col 9)-(line 1184,col 62)",
        "(line 1185,col 9)-(line 1185,col 66)",
        "(line 1186,col 9)-(line 1186,col 60)",
        "(line 1189,col 9)-(line 1189,col 29)",
        "(line 1190,col 9)-(line 1195,col 9)",
        "(line 1196,col 9)-(line 1196,col 25)",
        "(line 1199,col 9)-(line 1199,col 21)",
        "(line 1200,col 9)-(line 1205,col 9)",
        "(line 1206,col 9)-(line 1206,col 25)",
        "(line 1210,col 9)-(line 1210,col 49)",
        "(line 1211,col 9)-(line 1211,col 37)",
        "(line 1212,col 9)-(line 1212,col 60)",
        "(line 1214,col 9)-(line 1214,col 41)",
        "(line 1215,col 9)-(line 1215,col 61)",
        "(line 1217,col 9)-(line 1218,col 33)",
        "(line 1219,col 9)-(line 1219,col 51)",
        "(line 1220,col 9)-(line 1220,col 60)",
        "(line 1222,col 9)-(line 1223,col 33)",
        "(line 1224,col 9)-(line 1224,col 51)",
        "(line 1225,col 9)-(line 1225,col 61)"
      ]
    }
  ]
}