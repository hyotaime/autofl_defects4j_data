{
  "filepath": "/tmp/Chart-2b/source/org/jfree/chart/renderer/xy/XYShapeRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "XYShapeRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "org.jfree.chart.renderer.xy.XYItemRenderer",
        "java.lang.Cloneable",
        "java.io.Serializable"
      ],
      "begin_line": 95,
      "end_line": 606,
      "comment": "\r\n * A renderer that draws shapes at (x, y) coordinates and, if the dataset\r\n * is an instance of {@link XYZDataset}, fills the shapes with a paint that\r\n * is based on the z-value (the paint is obtained from a lookup table).  The\r\n * renderer also allows for optional guidelines, horizontal and vertical lines\r\n * connecting the shape to the edges of the plot.\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * The example shown here is generated by the\r\n * \u003ccode\u003eXYShapeRendererDemo1.java\u003c/code\u003e program included in the JFreeChart\r\n * demo collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/XYShapeRendererSample.png\"\r\n * alt\u003d\"XYShapeRendererSample.png\" /\u003e\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * This renderer has similarities to, but also differences from, the\r\n * {@link XYLineAndShapeRenderer}.\r\n *\r\n * @since 1.0.11\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 99,
      "end_line": 99,
      "comment": " Auto generated serial version id. "
    },
    {
      "type": "field",
      "varNames": [
        "paintScale"
      ],
      "begin_line": 102,
      "end_line": 102,
      "comment": " The paint scale (never null). "
    },
    {
      "type": "field",
      "varNames": [
        "drawOutlines"
      ],
      "begin_line": 105,
      "end_line": 105,
      "comment": " A flag that controls whether or not the shape outlines are drawn. "
    },
    {
      "type": "field",
      "varNames": [
        "useOutlinePaint"
      ],
      "begin_line": 111,
      "end_line": 111,
      "comment": "\r\n     * A flag that controls whether or not the outline paint is used (if not,\r\n     * the regular paint is used).\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "useFillPaint"
      ],
      "begin_line": 117,
      "end_line": 117,
      "comment": "\r\n     * A flag that controls whether or not the fill paint is used (if not,\r\n     * the fill paint is used).\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "guideLinesVisible"
      ],
      "begin_line": 120,
      "end_line": 120,
      "comment": " Flag indicating if guide lines should be drawn for every item. "
    },
    {
      "type": "field",
      "varNames": [
        "guideLinePaint"
      ],
      "begin_line": 123,
      "end_line": 123,
      "comment": " The paint used for drawing the guide lines (never null). "
    },
    {
      "type": "field",
      "varNames": [
        "guideLineStroke"
      ],
      "begin_line": 126,
      "end_line": 126,
      "comment": " The stroke used for drawing the guide lines (never null). "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.XYShapeRenderer()",
      "begin_line": 132,
      "end_line": 142,
      "comment": "\r\n     * Creates a new \u003ccode\u003eXYShapeRenderer\u003c/code\u003e instance with default\r\n     * attributes.\r\n     ",
      "child_ranges": [
        "(line 133,col 9)-(line 133,col 49)",
        "(line 134,col 9)-(line 134,col 34)",
        "(line 135,col 9)-(line 135,col 34)",
        "(line 136,col 9)-(line 136,col 36)",
        "(line 137,col 9)-(line 137,col 39)",
        "(line 138,col 9)-(line 138,col 45)",
        "(line 139,col 9)-(line 139,col 49)",
        "(line 140,col 9)-(line 140,col 67)",
        "(line 141,col 9)-(line 141,col 42)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.getPaintScale()",
      "begin_line": 151,
      "end_line": 153,
      "comment": "\r\n     * Returns the paint scale used by the renderer.\r\n     *\r\n     * @return The paint scale (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setPaintScale(PaintScale)\r\n     ",
      "child_ranges": [
        "(line 152,col 9)-(line 152,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.setPaintScale(org.jfree.chart.renderer.PaintScale)",
      "begin_line": 163,
      "end_line": 169,
      "comment": "\r\n     * Sets the paint scale used by the renderer and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param scale  the scale (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getPaintScale()\r\n     ",
      "child_ranges": [
        "(line 164,col 9)-(line 166,col 9)",
        "(line 167,col 9)-(line 167,col 32)",
        "(line 168,col 9)-(line 168,col 55)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.getDrawOutlines()",
      "begin_line": 179,
      "end_line": 181,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if outlines should be drawn for shapes, and\r\n     * \u003ccode\u003efalse\u003c/code\u003e otherwise.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDrawOutlines(boolean)\r\n     ",
      "child_ranges": [
        "(line 180,col 9)-(line 180,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.setDrawOutlines(boolean)",
      "begin_line": 195,
      "end_line": 198,
      "comment": "\r\n     * Sets the flag that controls whether outlines are drawn for\r\n     * shapes, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     * \u003cP\u003e\r\n     * In some cases, shapes look better if they do NOT have an outline, but\r\n     * this flag allows you to set your own preference.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getDrawOutlines()\r\n     ",
      "child_ranges": [
        "(line 196,col 9)-(line 196,col 33)",
        "(line 197,col 9)-(line 197,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.getUseFillPaint()",
      "begin_line": 213,
      "end_line": 215,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the renderer should use the fill paint\r\n     * setting to fill shapes, and \u003ccode\u003efalse\u003c/code\u003e if it should just\r\n     * use the regular paint.\r\n     * \u003cp\u003e\r\n     * Refer to \u003ccode\u003eXYLineAndShapeRendererDemo2.java\u003c/code\u003e to see the\r\n     * effect of this flag.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setUseFillPaint(boolean)\r\n     * @see #getUseOutlinePaint()\r\n     ",
      "child_ranges": [
        "(line 214,col 9)-(line 214,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.setUseFillPaint(boolean)",
      "begin_line": 226,
      "end_line": 229,
      "comment": "\r\n     * Sets the flag that controls whether the fill paint is used to fill\r\n     * shapes, and sends a {@link RendererChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getUseFillPaint()\r\n     ",
      "child_ranges": [
        "(line 227,col 9)-(line 227,col 33)",
        "(line 228,col 9)-(line 228,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.getUseOutlinePaint()",
      "begin_line": 239,
      "end_line": 241,
      "comment": "\r\n     * Returns the flag that controls whether the outline paint is used for\r\n     * shape outlines.  If not, the regular series paint is used.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setUseOutlinePaint(boolean)\r\n     ",
      "child_ranges": [
        "(line 240,col 9)-(line 240,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.setUseOutlinePaint(boolean)",
      "begin_line": 252,
      "end_line": 255,
      "comment": "\r\n     * Sets the flag that controls whether the outline paint is used for shape\r\n     * outlines, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param use  the flag.\r\n     *\r\n     * @see #getUseOutlinePaint()\r\n     ",
      "child_ranges": [
        "(line 253,col 9)-(line 253,col 35)",
        "(line 254,col 9)-(line 254,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.isGuideLinesVisible()",
      "begin_line": 266,
      "end_line": 268,
      "comment": "\r\n     * Returns a flag that controls whether or not guide lines are drawn for\r\n     * each data item (the lines are horizontal and vertical \"crosshairs\"\r\n     * linking the data point to the axes).\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setGuideLinesVisible(boolean)\r\n     ",
      "child_ranges": [
        "(line 267,col 9)-(line 267,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.setGuideLinesVisible(boolean)",
      "begin_line": 279,
      "end_line": 282,
      "comment": "\r\n     * Sets the flag that controls whether or not guide lines are drawn for\r\n     * each data item and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param visible  the new flag value.\r\n     *\r\n     * @see #isGuideLinesVisible()\r\n     ",
      "child_ranges": [
        "(line 280,col 9)-(line 280,col 41)",
        "(line 281,col 9)-(line 281,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.getGuideLinePaint()",
      "begin_line": 291,
      "end_line": 293,
      "comment": "\r\n     * Returns the paint used to draw the guide lines.\r\n     *\r\n     * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setGuideLinePaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 292,col 9)-(line 292,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.setGuideLinePaint(java.awt.Paint)",
      "begin_line": 303,
      "end_line": 309,
      "comment": "\r\n     * Sets the paint used to draw the guide lines and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getGuideLinePaint()\r\n     ",
      "child_ranges": [
        "(line 304,col 9)-(line 306,col 9)",
        "(line 307,col 9)-(line 307,col 36)",
        "(line 308,col 9)-(line 308,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.getGuideLineStroke()",
      "begin_line": 318,
      "end_line": 320,
      "comment": "\r\n     * Returns the stroke used to draw the guide lines.\r\n     *\r\n     * @return The stroke.\r\n     *\r\n     * @see #setGuideLineStroke(Stroke)\r\n     ",
      "child_ranges": [
        "(line 319,col 9)-(line 319,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.setGuideLineStroke(java.awt.Stroke)",
      "begin_line": 330,
      "end_line": 336,
      "comment": "\r\n     * Sets the stroke used to draw the guide lines and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getGuideLineStroke()\r\n     ",
      "child_ranges": [
        "(line 331,col 9)-(line 333,col 9)",
        "(line 334,col 9)-(line 334,col 38)",
        "(line 335,col 9)-(line 335,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.findDomainBounds(org.jfree.data.xy.XYDataset)",
      "begin_line": 347,
      "end_line": 357,
      "comment": "\r\n     * Returns the lower and upper bounds (range) of the x-values in the\r\n     * specified dataset.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset is \u003ccode\u003enull\u003c/code\u003e\r\n     *         or empty).\r\n     ",
      "child_ranges": [
        "(line 348,col 9)-(line 356,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)",
      "begin_line": 368,
      "end_line": 378,
      "comment": "\r\n     * Returns the range of values the renderer requires to display all the\r\n     * items from the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset is \u003ccode\u003enull\u003c/code\u003e\r\n     *         or empty).\r\n     ",
      "child_ranges": [
        "(line 369,col 9)-(line 377,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.getPassCount()",
      "begin_line": 385,
      "end_line": 387,
      "comment": "\r\n     * Returns the number of passes required by this renderer.\r\n     *\r\n     * @return \u003ccode\u003e2\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 386,col 9)-(line 386,col 17)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, int)",
      "begin_line": 406,
      "end_line": 483,
      "comment": "\r\n     * Draws the block representing the specified item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the state.\r\n     * @param dataArea  the data area.\r\n     * @param plot  the plot.\r\n     * @param domainAxis  the x-axis.\r\n     * @param rangeAxis  the y-axis.\r\n     * @param dataset  the dataset.\r\n     * @param series  the series index.\r\n     * @param item  the item index.\r\n     * @param selected  is the data item selected?\r\n     * @param pass  the pass index.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 411,col 9)-(line 411,col 29)",
        "(line 412,col 9)-(line 412,col 41)",
        "(line 413,col 9)-(line 415,col 9)",
        "(line 417,col 9)-(line 417,col 51)",
        "(line 418,col 9)-(line 418,col 51)",
        "(line 419,col 9)-(line 422,col 9)",
        "(line 424,col 9)-(line 425,col 42)",
        "(line 426,col 9)-(line 427,col 41)",
        "(line 429,col 9)-(line 429,col 60)",
        "(line 432,col 9)-(line 482,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.getPaint(org.jfree.data.xy.XYDataset, int, int, boolean)",
      "begin_line": 497,
      "end_line": 513,
      "comment": "\r\n     * Get the paint for a given series and item from a dataset.\r\n     *\r\n     * @param dataset  the dataset..\r\n     * @param series  the series index.\r\n     * @param item  the item index.\r\n     * @param selected  is the data item selected?\r\n     *\r\n     * @return The paint.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 499,col 9)-(line 499,col 23)",
        "(line 500,col 9)-(line 511,col 9)",
        "(line 512,col 9)-(line 512,col 17)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.equals(java.lang.Object)",
      "begin_line": 529,
      "end_line": 559,
      "comment": "\r\n     * Tests this instance for equality with an arbitrary object.  This method\r\n     * returns \u003ccode\u003etrue\u003c/code\u003e if and only if:\r\n     * \u003cul\u003e\r\n     * \u003cli\u003e\u003ccode\u003eobj\u003c/code\u003e is an instance of \u003ccode\u003eXYShapeRenderer\u003c/code\u003e (not\r\n     *     \u003ccode\u003enull\u003c/code\u003e);\u003c/li\u003e\r\n     * \u003cli\u003e\u003ccode\u003eobj\u003c/code\u003e has the same field values as this\r\n     *     \u003ccode\u003eXYShapeRenderer\u003c/code\u003e;\u003c/li\u003e\r\n     * \u003c/ul\u003e\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 530,col 9)-(line 532,col 9)",
        "(line 533,col 9)-(line 535,col 9)",
        "(line 536,col 9)-(line 536,col 53)",
        "(line 537,col 9)-(line 539,col 9)",
        "(line 540,col 9)-(line 542,col 9)",
        "(line 543,col 9)-(line 545,col 9)",
        "(line 546,col 9)-(line 548,col 9)",
        "(line 549,col 9)-(line 551,col 9)",
        "(line 552,col 9)-(line 554,col 9)",
        "(line 555,col 9)-(line 557,col 9)",
        "(line 558,col 9)-(line 558,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.clone()",
      "begin_line": 569,
      "end_line": 576,
      "comment": "\r\n     * Returns a clone of this renderer.\r\n     *\r\n     * @return A clone of this renderer.\r\n     *\r\n     * @throws CloneNotSupportedException if there is a problem creating the\r\n     *     clone.\r\n     ",
      "child_ranges": [
        "(line 570,col 9)-(line 570,col 64)",
        "(line 571,col 9)-(line 574,col 9)",
        "(line 575,col 9)-(line 575,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.readObject(java.io.ObjectInputStream)",
      "begin_line": 586,
      "end_line": 591,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
      "child_ranges": [
        "(line 588,col 9)-(line 588,col 35)",
        "(line 589,col 9)-(line 589,col 64)",
        "(line 590,col 9)-(line 590,col 66)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYShapeRenderer.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 600,
      "end_line": 604,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
      "child_ranges": [
        "(line 601,col 9)-(line 601,col 36)",
        "(line 602,col 9)-(line 602,col 64)",
        "(line 603,col 9)-(line 603,col 66)"
      ]
    }
  ]
}