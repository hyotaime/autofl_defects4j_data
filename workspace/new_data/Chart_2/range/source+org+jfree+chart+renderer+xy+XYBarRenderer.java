{
  "filepath": "/tmp/Chart-2b/source/org/jfree/chart/renderer/xy/XYBarRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "XYBarRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "org.jfree.chart.renderer.xy.XYItemRenderer",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 153,
      "end_line": 1360,
      "comment": "\r\n * A renderer that draws bars on an {@link XYPlot} (requires an\r\n * {@link IntervalXYDataset}).  The example shown here is generated by the\r\n * \u003ccode\u003eXYBarChartDemo1.java\u003c/code\u003e program included in the JFreeChart\r\n * demo collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/XYBarRendererSample.png\"\r\n * alt\u003d\"XYBarRendererSample.png\" /\u003e\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 157,
      "end_line": 157,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "defaultBarPainter"
      ],
      "begin_line": 164,
      "end_line": 164,
      "comment": "\r\n     * The default bar painter assigned to each new instance of this renderer.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter()",
      "begin_line": 173,
      "end_line": 175,
      "comment": "\r\n     * Returns the default bar painter.\r\n     *\r\n     * @return The default bar painter.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 174,col 9)-(line 174,col 47)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setDefaultBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)",
      "begin_line": 184,
      "end_line": 189,
      "comment": "\r\n     * Sets the default bar painter.\r\n     *\r\n     * @param painter  the painter (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 185,col 9)-(line 187,col 9)",
        "(line 188,col 9)-(line 188,col 50)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "defaultShadowsVisible"
      ],
      "begin_line": 194,
      "end_line": 194,
      "comment": "\r\n     * The default value for the initialisation of the shadowsVisible flag.\r\n     "
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible()",
      "begin_line": 205,
      "end_line": 207,
      "comment": "\r\n     * Returns the default value for the \u003ccode\u003eshadowsVisible\u003c/code\u003e flag.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDefaultShadowsVisible(boolean)\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 206,col 9)-(line 206,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setDefaultShadowsVisible(boolean)",
      "begin_line": 218,
      "end_line": 220,
      "comment": "\r\n     * Sets the default value for the shadows visible flag.\r\n     *\r\n     * @param visible  the new value for the default.\r\n     *\r\n     * @see #getDefaultShadowsVisible()\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 219,col 9)-(line 219,col 54)"
      ]
    },
    {
      "type": "class_interface",
      "name": "XYBarRendererState",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.XYItemRendererState"
      ],
      "begin_line": 225,
      "end_line": 256,
      "comment": "\r\n     * The state class used by this renderer.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "g2Base"
      ],
      "begin_line": 228,
      "end_line": 228,
      "comment": " Base for bars against the range axis, in Java 2D space. "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.XYBarRendererState.XYBarRendererState(org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 235,
      "end_line": 237,
      "comment": "\r\n         * Creates a new state object.\r\n         *\r\n         * @param info  the plot rendering info.\r\n         ",
      "child_ranges": [
        "(line 236,col 13)-(line 236,col 24)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.XYBarRendererState.getG2Base()",
      "begin_line": 244,
      "end_line": 246,
      "comment": "\r\n         * Returns the base (range) value in Java 2D space.\r\n         *\r\n         * @return The base value.\r\n         ",
      "child_ranges": [
        "(line 245,col 13)-(line 245,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.XYBarRendererState.setG2Base(double)",
      "begin_line": 253,
      "end_line": 255,
      "comment": "\r\n         * Sets the range axis base in Java2D space.\r\n         *\r\n         * @param value  the value.\r\n         ",
      "child_ranges": [
        "(line 254,col 13)-(line 254,col 32)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "base"
      ],
      "begin_line": 259,
      "end_line": 259,
      "comment": " The default base value for the bars. "
    },
    {
      "type": "field",
      "varNames": [
        "useYInterval"
      ],
      "begin_line": 265,
      "end_line": 265,
      "comment": "\r\n     * A flag that controls whether the bars use the y-interval supplied by the\r\n     * dataset.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "margin"
      ],
      "begin_line": 268,
      "end_line": 268,
      "comment": " Percentage margin (to reduce the width of bars). "
    },
    {
      "type": "field",
      "varNames": [
        "drawBarOutline"
      ],
      "begin_line": 271,
      "end_line": 271,
      "comment": " A flag that controls whether or not bar outlines are drawn. "
    },
    {
      "type": "field",
      "varNames": [
        "gradientPaintTransformer"
      ],
      "begin_line": 277,
      "end_line": 277,
      "comment": "\r\n     * An optional class used to transform gradient paint objects to fit each\r\n     * bar.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "legendBar"
      ],
      "begin_line": 283,
      "end_line": 283,
      "comment": "\r\n     * The shape used to represent a bar in each legend item (this should never\r\n     * be \u003ccode\u003enull\u003c/code\u003e).\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "positiveItemLabelPositionFallback"
      ],
      "begin_line": 289,
      "end_line": 289,
      "comment": "\r\n     * The fallback position if a positive item label doesn\u0027t fit inside the\r\n     * bar.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "negativeItemLabelPositionFallback"
      ],
      "begin_line": 295,
      "end_line": 295,
      "comment": "\r\n     * The fallback position if a negative item label doesn\u0027t fit inside the\r\n     * bar.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "barPainter"
      ],
      "begin_line": 302,
      "end_line": 302,
      "comment": "\r\n     * The bar painter (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowsVisible"
      ],
      "begin_line": 309,
      "end_line": 309,
      "comment": "\r\n     * The flag that controls whether or not shadows are drawn for the bars.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowXOffset"
      ],
      "begin_line": 316,
      "end_line": 316,
      "comment": "\r\n     * The x-offset for the shadow effect.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowYOffset"
      ],
      "begin_line": 323,
      "end_line": 323,
      "comment": "\r\n     * The y-offset for the shadow effect.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "barAlignmentFactor"
      ],
      "begin_line": 330,
      "end_line": 330,
      "comment": "\r\n     * A factor used to align the bars about the x-value.\r\n     *\r\n     * @since 1.0.13\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.XYBarRenderer()",
      "begin_line": 335,
      "end_line": 337,
      "comment": "\r\n     * The default constructor.\r\n     ",
      "child_ranges": [
        "(line 336,col 9)-(line 336,col 18)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.XYBarRenderer(double)",
      "begin_line": 344,
      "end_line": 357,
      "comment": "\r\n     * Constructs a new renderer.\r\n     *\r\n     * @param margin  the percentage amount to trim from the width of each bar.\r\n     ",
      "child_ranges": [
        "(line 345,col 9)-(line 345,col 16)",
        "(line 346,col 9)-(line 346,col 29)",
        "(line 347,col 9)-(line 347,col 24)",
        "(line 348,col 9)-(line 348,col 34)",
        "(line 349,col 9)-(line 349,col 79)",
        "(line 350,col 9)-(line 350,col 36)",
        "(line 351,col 9)-(line 351,col 71)",
        "(line 352,col 9)-(line 352,col 49)",
        "(line 353,col 9)-(line 353,col 57)",
        "(line 354,col 9)-(line 354,col 33)",
        "(line 355,col 9)-(line 355,col 33)",
        "(line 356,col 9)-(line 356,col 39)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getBase()",
      "begin_line": 366,
      "end_line": 368,
      "comment": "\r\n     * Returns the base value for the bars.\r\n     *\r\n     * @return The base value for the bars.\r\n     *\r\n     * @see #setBase(double)\r\n     ",
      "child_ranges": [
        "(line 367,col 9)-(line 367,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setBase(double)",
      "begin_line": 380,
      "end_line": 383,
      "comment": "\r\n     * Sets the base value for the bars and sends a {@link RendererChangeEvent}\r\n     * to all registered listeners.  The base value is not used if the dataset\u0027s\r\n     * y-interval is being used to determine the bar length.\r\n     *\r\n     * @param base  the new base value.\r\n     *\r\n     * @see #getBase()\r\n     * @see #getUseYInterval()\r\n     ",
      "child_ranges": [
        "(line 381,col 9)-(line 381,col 25)",
        "(line 382,col 9)-(line 382,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getUseYInterval()",
      "begin_line": 393,
      "end_line": 395,
      "comment": "\r\n     * Returns a flag that determines whether the y-interval from the dataset is\r\n     * used to calculate the length of each bar.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setUseYInterval(boolean)\r\n     ",
      "child_ranges": [
        "(line 394,col 9)-(line 394,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setUseYInterval(boolean)",
      "begin_line": 406,
      "end_line": 411,
      "comment": "\r\n     * Sets the flag that determines whether the y-interval from the dataset is\r\n     * used to calculate the length of each bar, and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param use  the flag.\r\n     *\r\n     * @see #getUseYInterval()\r\n     ",
      "child_ranges": [
        "(line 407,col 9)-(line 410,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getMargin()",
      "begin_line": 421,
      "end_line": 423,
      "comment": "\r\n     * Returns the margin which is a percentage amount by which the bars are\r\n     * trimmed.\r\n     *\r\n     * @return The margin.\r\n     *\r\n     * @see #setMargin(double)\r\n     ",
      "child_ranges": [
        "(line 422,col 9)-(line 422,col 27)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setMargin(double)",
      "begin_line": 433,
      "end_line": 436,
      "comment": "\r\n     * Sets the percentage amount by which the bars are trimmed and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param margin  the new margin.\r\n     *\r\n     * @see #getMargin()\r\n     ",
      "child_ranges": [
        "(line 434,col 9)-(line 434,col 29)",
        "(line 435,col 9)-(line 435,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.isDrawBarOutline()",
      "begin_line": 445,
      "end_line": 447,
      "comment": "\r\n     * Returns a flag that controls whether or not bar outlines are drawn.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDrawBarOutline(boolean)\r\n     ",
      "child_ranges": [
        "(line 446,col 9)-(line 446,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setDrawBarOutline(boolean)",
      "begin_line": 457,
      "end_line": 460,
      "comment": "\r\n     * Sets the flag that controls whether or not bar outlines are drawn and\r\n     * sends a {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param draw  the flag.\r\n     *\r\n     * @see #isDrawBarOutline()\r\n     ",
      "child_ranges": [
        "(line 458,col 9)-(line 458,col 35)",
        "(line 459,col 9)-(line 459,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getGradientPaintTransformer()",
      "begin_line": 470,
      "end_line": 472,
      "comment": "\r\n     * Returns the gradient paint transformer (an object used to transform\r\n     * gradient paint objects to fit each bar).\r\n     *\r\n     * @return A transformer (\u003ccode\u003enull\u003c/code\u003e possible).\r\n     *\r\n     * @see #setGradientPaintTransformer(GradientPaintTransformer)\r\n     ",
      "child_ranges": [
        "(line 471,col 9)-(line 471,col 45)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)",
      "begin_line": 482,
      "end_line": 486,
      "comment": "\r\n     * Sets the gradient paint transformer and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param transformer  the transformer (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getGradientPaintTransformer()\r\n     ",
      "child_ranges": [
        "(line 484,col 9)-(line 484,col 52)",
        "(line 485,col 9)-(line 485,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getLegendBar()",
      "begin_line": 496,
      "end_line": 498,
      "comment": "\r\n     * Returns the shape used to represent bars in each legend item.\r\n     *\r\n     * @return The shape used to represent bars in each legend item (never\r\n     *         \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLegendBar(Shape)\r\n     ",
      "child_ranges": [
        "(line 497,col 9)-(line 497,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar(java.awt.Shape)",
      "begin_line": 508,
      "end_line": 514,
      "comment": "\r\n     * Sets the shape used to represent bars in each legend item and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param bar  the bar shape (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getLegendBar()\r\n     ",
      "child_ranges": [
        "(line 509,col 9)-(line 511,col 9)",
        "(line 512,col 9)-(line 512,col 29)",
        "(line 513,col 9)-(line 513,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getPositiveItemLabelPositionFallback()",
      "begin_line": 525,
      "end_line": 527,
      "comment": "\r\n     * Returns the fallback position for positive item labels that don\u0027t fit\r\n     * within a bar.\r\n     *\r\n     * @return The fallback position (\u003ccode\u003enull\u003c/code\u003e possible).\r\n     *\r\n     * @see #setPositiveItemLabelPositionFallback(ItemLabelPosition)\r\n     * @since 1.0.2\r\n     ",
      "child_ranges": [
        "(line 526,col 9)-(line 526,col 54)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)",
      "begin_line": 539,
      "end_line": 543,
      "comment": "\r\n     * Sets the fallback position for positive item labels that don\u0027t fit\r\n     * within a bar, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param position  the position (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getPositiveItemLabelPositionFallback()\r\n     * @since 1.0.2\r\n     ",
      "child_ranges": [
        "(line 541,col 9)-(line 541,col 58)",
        "(line 542,col 9)-(line 542,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getNegativeItemLabelPositionFallback()",
      "begin_line": 554,
      "end_line": 556,
      "comment": "\r\n     * Returns the fallback position for negative item labels that don\u0027t fit\r\n     * within a bar.\r\n     *\r\n     * @return The fallback position (\u003ccode\u003enull\u003c/code\u003e possible).\r\n     *\r\n     * @see #setNegativeItemLabelPositionFallback(ItemLabelPosition)\r\n     * @since 1.0.2\r\n     ",
      "child_ranges": [
        "(line 555,col 9)-(line 555,col 54)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)",
      "begin_line": 568,
      "end_line": 572,
      "comment": "\r\n     * Sets the fallback position for negative item labels that don\u0027t fit\r\n     * within a bar, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param position  the position (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getNegativeItemLabelPositionFallback()\r\n     * @since 1.0.2\r\n     ",
      "child_ranges": [
        "(line 570,col 9)-(line 570,col 58)",
        "(line 571,col 9)-(line 571,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getBarPainter()",
      "begin_line": 581,
      "end_line": 583,
      "comment": "\r\n     * Returns the bar painter.\r\n     *\r\n     * @return The bar painter (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 582,col 9)-(line 582,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)",
      "begin_line": 593,
      "end_line": 599,
      "comment": "\r\n     * Sets the bar painter and sends a {@link RendererChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param painter  the painter (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 594,col 9)-(line 596,col 9)",
        "(line 597,col 9)-(line 597,col 34)",
        "(line 598,col 9)-(line 598,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getShadowsVisible()",
      "begin_line": 609,
      "end_line": 611,
      "comment": "\r\n     * Returns the flag that controls whether or not shadows are drawn for\r\n     * the bars.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 610,col 9)-(line 610,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setShadowVisible(boolean)",
      "begin_line": 622,
      "end_line": 625,
      "comment": "\r\n     * Sets the flag that controls whether or not the renderer\r\n     * draws shadows for the bars, and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param visible  the new flag value.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 623,col 9)-(line 623,col 38)",
        "(line 624,col 9)-(line 624,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getShadowXOffset()",
      "begin_line": 634,
      "end_line": 636,
      "comment": "\r\n     * Returns the shadow x-offset.\r\n     *\r\n     * @return The shadow x-offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 635,col 9)-(line 635,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setShadowXOffset(double)",
      "begin_line": 646,
      "end_line": 649,
      "comment": "\r\n     * Sets the x-offset for the bar shadow and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param offset  the offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 647,col 9)-(line 647,col 36)",
        "(line 648,col 9)-(line 648,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getShadowYOffset()",
      "begin_line": 658,
      "end_line": 660,
      "comment": "\r\n     * Returns the shadow y-offset.\r\n     *\r\n     * @return The shadow y-offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 659,col 9)-(line 659,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setShadowYOffset(double)",
      "begin_line": 670,
      "end_line": 673,
      "comment": "\r\n     * Sets the y-offset for the bar shadow and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param offset  the offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 671,col 9)-(line 671,col 36)",
        "(line 672,col 9)-(line 672,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getBarAlignmentFactor()",
      "begin_line": 682,
      "end_line": 684,
      "comment": "\r\n     * Returns the bar alignment factor.\r\n     *\r\n     * @return The bar alignment factor.\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 683,col 9)-(line 683,col 39)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setBarAlignmentFactor(double)",
      "begin_line": 695,
      "end_line": 698,
      "comment": "\r\n     * Sets the bar alignment factor and sends a {@link RendererChangeEvent}\r\n     * to all registered listeners.  If the alignment factor is outside the\r\n     * range 0.0 to 1.0, no alignment will be performed by the renderer.\r\n     *\r\n     * @param factor  the factor.\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 696,col 9)-(line 696,col 41)",
        "(line 697,col 9)-(line 697,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.createState(org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 710,
      "end_line": 712,
      "comment": "\r\n     * Creates the renderer state.  This is called by the {@link #initialise()}\r\n     * method.\r\n     *\r\n     * @param info  the plot rendering info.\r\n     *\r\n     * @return A new state instance.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 711,col 9)-(line 711,col 44)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 729,
      "end_line": 740,
      "comment": "\r\n     * Initialises the renderer and returns a state object that should be\r\n     * passed to all subsequent calls to the drawItem() method.  Here we\r\n     * calculate the Java2D y-coordinate for zero, since all the bars have\r\n     * their bases fixed at zero.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area inside the axes.\r\n     * @param plot  the plot.\r\n     * @param dataset  the data.\r\n     * @param info  an optional info collection object to return data back to\r\n     *              the caller.\r\n     *\r\n     * @return A state object.\r\n     ",
      "child_ranges": [
        "(line 732,col 9)-(line 733,col 47)",
        "(line 734,col 9)-(line 735,col 26)",
        "(line 736,col 9)-(line 737,col 42)",
        "(line 738,col 9)-(line 738,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getLegendItem(int, int)",
      "begin_line": 751,
      "end_line": 799,
      "comment": "\r\n     * Returns a default legend item for the specified series.  Subclasses\r\n     * should override this method to generate customised items.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return A legend item for the series.\r\n     ",
      "child_ranges": [
        "(line 752,col 9)-(line 752,col 33)",
        "(line 753,col 9)-(line 753,col 34)",
        "(line 754,col 9)-(line 797,col 9)",
        "(line 798,col 9)-(line 798,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.createBar(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean)",
      "begin_line": 805,
      "end_line": 906,
      "comment": "\r\n     * Creates a rectangle representing the bar for a data item\r\n     *\r\n     ",
      "child_ranges": [
        "(line 809,col 9)-(line 811,col 9)",
        "(line 813,col 9)-(line 813,col 61)",
        "(line 815,col 9)-(line 815,col 22)",
        "(line 816,col 9)-(line 816,col 22)",
        "(line 817,col 9)-(line 824,col 9)",
        "(line 825,col 9)-(line 827,col 9)",
        "(line 828,col 9)-(line 837,col 9)",
        "(line 839,col 9)-(line 840,col 41)",
        "(line 841,col 9)-(line 842,col 41)",
        "(line 843,col 9)-(line 843,col 69)",
        "(line 844,col 9)-(line 844,col 66)",
        "(line 846,col 9)-(line 846,col 58)",
        "(line 847,col 9)-(line 849,col 9)",
        "(line 850,col 9)-(line 850,col 54)",
        "(line 851,col 9)-(line 853,col 9)",
        "(line 854,col 9)-(line 863,col 9)",
        "(line 866,col 9)-(line 871,col 9)",
        "(line 873,col 9)-(line 873,col 58)",
        "(line 874,col 9)-(line 875,col 26)",
        "(line 876,col 9)-(line 877,col 26)",
        "(line 879,col 9)-(line 880,col 37)",
        "(line 882,col 9)-(line 882,col 65)",
        "(line 883,col 9)-(line 887,col 9)",
        "(line 889,col 9)-(line 889,col 31)",
        "(line 890,col 9)-(line 890,col 60)",
        "(line 891,col 9)-(line 904,col 9)",
        "(line 905,col 9)-(line 905,col 19)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, int)",
      "begin_line": 923,
      "end_line": 993,
      "comment": "\r\n     * Draws the visual representation of a single data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the area within which the plot is being drawn.\r\n     * @param plot  the plot (can be used to obtain standard color\r\n     *              information etc).\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 928,col 9)-(line 929,col 60)",
        "(line 930,col 9)-(line 932,col 9)",
        "(line 934,col 9)-(line 934,col 32)",
        "(line 935,col 9)-(line 941,col 9)",
        "(line 942,col 9)-(line 942,col 50)",
        "(line 943,col 9)-(line 943,col 30)",
        "(line 944,col 9)-(line 959,col 9)",
        "(line 960,col 9)-(line 963,col 9)",
        "(line 964,col 9)-(line 965,col 25)",
        "(line 967,col 9)-(line 972,col 9)",
        "(line 975,col 9)-(line 975,col 52)",
        "(line 976,col 9)-(line 976,col 52)",
        "(line 977,col 9)-(line 978,col 42)",
        "(line 979,col 9)-(line 980,col 41)",
        "(line 981,col 9)-(line 981,col 66)",
        "(line 982,col 9)-(line 982,col 63)",
        "(line 983,col 9)-(line 983,col 68)",
        "(line 984,col 9)-(line 985,col 73)",
        "(line 987,col 9)-(line 987,col 64)",
        "(line 988,col 9)-(line 991,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.drawItemLabelForBar(java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, boolean, org.jfree.chart.labels.XYItemLabelGenerator, java.awt.geom.Rectangle2D, boolean)",
      "begin_line": 1014,
      "end_line": 1075,
      "comment": "\r\n     * Draws an item label.  This method is provided as an alternative to\r\n     * {@link #drawItemLabel(Graphics2D, PlotOrientation, XYDataset, int, int,\r\n     * double, double, boolean)} so that the bar can be used to calculate the\r\n     * label anchor point.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataset  the dataset.\r\n     * @param series  the series index.\r\n     * @param item  the item index.\r\n     * @param selected  is the data item selected?\r\n     * @param plot  the plot.\r\n     * @param generator  the label generator (\u003ccode\u003enull\u003c/code\u003e permitted, in\r\n     *         which case the method does nothing, just returns).\r\n     * @param bar  the bar.\r\n     * @param negative  a flag indicating a negative value.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 1019,col 9)-(line 1021,col 9)",
        "(line 1022,col 9)-(line 1022,col 70)",
        "(line 1023,col 9)-(line 1025,col 9)",
        "(line 1027,col 9)-(line 1027,col 66)",
        "(line 1028,col 9)-(line 1028,col 30)",
        "(line 1029,col 9)-(line 1029,col 64)",
        "(line 1030,col 9)-(line 1030,col 27)",
        "(line 1033,col 9)-(line 1033,col 42)",
        "(line 1034,col 9)-(line 1039,col 9)",
        "(line 1042,col 9)-(line 1043,col 75)",
        "(line 1045,col 9)-(line 1067,col 9)",
        "(line 1069,col 9)-(line 1074,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation)",
      "begin_line": 1086,
      "end_line": 1185,
      "comment": "\r\n     * Calculates the item label anchor point.\r\n     *\r\n     * @param anchor  the anchor.\r\n     * @param bar  the bar.\r\n     * @param orientation  the plot orientation.\r\n     *\r\n     * @return The anchor point.\r\n     ",
      "child_ranges": [
        "(line 1089,col 9)-(line 1089,col 30)",
        "(line 1090,col 9)-(line 1090,col 51)",
        "(line 1091,col 9)-(line 1091,col 40)",
        "(line 1092,col 9)-(line 1092,col 31)",
        "(line 1093,col 9)-(line 1093,col 40)",
        "(line 1094,col 9)-(line 1094,col 37)",
        "(line 1095,col 9)-(line 1095,col 43)",
        "(line 1096,col 9)-(line 1096,col 34)",
        "(line 1097,col 9)-(line 1097,col 43)",
        "(line 1099,col 9)-(line 1099,col 43)",
        "(line 1100,col 9)-(line 1100,col 34)",
        "(line 1101,col 9)-(line 1101,col 43)",
        "(line 1102,col 9)-(line 1102,col 37)",
        "(line 1103,col 9)-(line 1103,col 43)",
        "(line 1104,col 9)-(line 1104,col 34)",
        "(line 1105,col 9)-(line 1105,col 43)",
        "(line 1107,col 9)-(line 1181,col 9)",
        "(line 1183,col 9)-(line 1183,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)",
      "begin_line": 1194,
      "end_line": 1208,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified anchor point is inside a bar.\r\n     *\r\n     * @param anchor  the anchor point.\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 1195,col 9)-(line 1207,col 53)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.createHotSpotBounds(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, java.awt.geom.Rectangle2D)",
      "begin_line": 1210,
      "end_line": 1216,
      "comment": "",
      "child_ranges": [
        "(line 1214,col 9)-(line 1215,col 49)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.findDomainBounds(org.jfree.data.xy.XYDataset)",
      "begin_line": 1228,
      "end_line": 1235,
      "comment": "\r\n     * Returns the lower and upper bounds (range) of the x-values in the\r\n     * specified dataset.  Since this renderer uses the x-interval in the\r\n     * dataset, this is taken into account for the range.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset is\r\n     *         \u003ccode\u003enull\u003c/code\u003e or empty).\r\n     ",
      "child_ranges": [
        "(line 1229,col 9)-(line 1234,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)",
      "begin_line": 1247,
      "end_line": 1255,
      "comment": "\r\n     * Returns the lower and upper bounds (range) of the y-values in the\r\n     * specified dataset.  If the renderer is plotting the y-interval from the\r\n     * dataset, this is taken into account for the range.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset is\r\n     *         \u003ccode\u003enull\u003c/code\u003e or empty).\r\n     ",
      "child_ranges": [
        "(line 1248,col 9)-(line 1254,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.clone()",
      "begin_line": 1264,
      "end_line": 1272,
      "comment": "\r\n     * Returns a clone of the renderer.\r\n     *\r\n     * @return A clone.\r\n     *\r\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\r\n     ",
      "child_ranges": [
        "(line 1265,col 9)-(line 1265,col 61)",
        "(line 1266,col 9)-(line 1269,col 9)",
        "(line 1270,col 9)-(line 1270,col 64)",
        "(line 1271,col 9)-(line 1271,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.equals(java.lang.Object)",
      "begin_line": 1281,
      "end_line": 1332,
      "comment": "\r\n     * Tests this renderer for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object to test against (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 1282,col 9)-(line 1284,col 9)",
        "(line 1285,col 9)-(line 1287,col 9)",
        "(line 1288,col 9)-(line 1288,col 49)",
        "(line 1289,col 9)-(line 1291,col 9)",
        "(line 1292,col 9)-(line 1294,col 9)",
        "(line 1295,col 9)-(line 1297,col 9)",
        "(line 1298,col 9)-(line 1300,col 9)",
        "(line 1301,col 9)-(line 1304,col 9)",
        "(line 1305,col 9)-(line 1307,col 9)",
        "(line 1308,col 9)-(line 1311,col 9)",
        "(line 1312,col 9)-(line 1315,col 9)",
        "(line 1316,col 9)-(line 1318,col 9)",
        "(line 1319,col 9)-(line 1321,col 9)",
        "(line 1322,col 9)-(line 1324,col 9)",
        "(line 1325,col 9)-(line 1327,col 9)",
        "(line 1328,col 9)-(line 1330,col 9)",
        "(line 1331,col 9)-(line 1331,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.readObject(java.io.ObjectInputStream)",
      "begin_line": 1342,
      "end_line": 1346,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
      "child_ranges": [
        "(line 1344,col 9)-(line 1344,col 35)",
        "(line 1345,col 9)-(line 1345,col 59)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 1355,
      "end_line": 1358,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
      "child_ranges": [
        "(line 1356,col 9)-(line 1356,col 36)",
        "(line 1357,col 9)-(line 1357,col 59)"
      ]
    }
  ]
}