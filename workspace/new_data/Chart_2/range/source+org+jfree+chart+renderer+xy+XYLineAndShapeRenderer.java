{
  "filepath": "/tmp/Chart-2b/source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "XYLineAndShapeRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "org.jfree.chart.renderer.xy.XYItemRenderer",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 119,
      "end_line": 1249,
      "comment": "\r\n * A renderer that connects data points with lines and/or draws shapes at each\r\n * data point.  This renderer is designed for use with the {@link XYPlot}\r\n * class.  The example shown here is generated by\r\n * the \u003ccode\u003eXYLineAndShapeRendererDemo2.java\u003c/code\u003e program included in the\r\n * JFreeChart demo collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/XYLineAndShapeRendererSample.png\"\r\n * alt\u003d\"XYLineAndShapeRendererSample.png\" /\u003e\r\n *\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 123,
      "end_line": 123,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "seriesLinesVisible"
      ],
      "begin_line": 129,
      "end_line": 129,
      "comment": "\r\n     * A table of flags that control (per series) whether or not lines are\r\n     * visible.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "baseLinesVisible"
      ],
      "begin_line": 132,
      "end_line": 132,
      "comment": " The default value returned by the getLinesVisible() method. "
    },
    {
      "type": "field",
      "varNames": [
        "legendLine"
      ],
      "begin_line": 135,
      "end_line": 135,
      "comment": " The shape that is used to represent a line in the legend. "
    },
    {
      "type": "field",
      "varNames": [
        "seriesShapesVisible"
      ],
      "begin_line": 141,
      "end_line": 141,
      "comment": "\r\n     * A table of flags that control (per series) whether or not shapes are\r\n     * visible.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "baseShapesVisible"
      ],
      "begin_line": 144,
      "end_line": 144,
      "comment": " The default value returned by the getShapeVisible() method. "
    },
    {
      "type": "field",
      "varNames": [
        "seriesShapesFilled"
      ],
      "begin_line": 150,
      "end_line": 150,
      "comment": "\r\n     * A table of flags that control (per series) whether or not shapes are\r\n     * filled.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "baseShapesFilled"
      ],
      "begin_line": 153,
      "end_line": 153,
      "comment": " The default value returned by the getShapeFilled() method. "
    },
    {
      "type": "field",
      "varNames": [
        "drawOutlines"
      ],
      "begin_line": 156,
      "end_line": 156,
      "comment": " A flag that controls whether outlines are drawn for shapes. "
    },
    {
      "type": "field",
      "varNames": [
        "useFillPaint"
      ],
      "begin_line": 162,
      "end_line": 162,
      "comment": "\r\n     * A flag that controls whether the fill paint is used for filling\r\n     * shapes.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "useOutlinePaint"
      ],
      "begin_line": 168,
      "end_line": 168,
      "comment": "\r\n     * A flag that controls whether the outline paint is used for drawing shape\r\n     * outlines.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "drawSeriesLineAsPath"
      ],
      "begin_line": 174,
      "end_line": 174,
      "comment": "\r\n     * A flag that controls whether or not each series is drawn as a single\r\n     * path.\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.XYLineAndShapeRenderer()",
      "begin_line": 179,
      "end_line": 181,
      "comment": "\r\n     * Creates a new renderer with both lines and shapes visible.\r\n     ",
      "child_ranges": [
        "(line 180,col 9)-(line 180,col 25)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.XYLineAndShapeRenderer(boolean, boolean)",
      "begin_line": 189,
      "end_line": 206,
      "comment": "\r\n     * Creates a new renderer.\r\n     *\r\n     * @param lines  lines visible?\r\n     * @param shapes  shapes visible?\r\n     ",
      "child_ranges": [
        "(line 190,col 9)-(line 190,col 52)",
        "(line 191,col 9)-(line 191,col 38)",
        "(line 192,col 9)-(line 192,col 65)",
        "(line 194,col 9)-(line 194,col 53)",
        "(line 195,col 9)-(line 195,col 40)",
        "(line 197,col 9)-(line 197,col 34)",
        "(line 198,col 9)-(line 198,col 52)",
        "(line 199,col 9)-(line 199,col 37)",
        "(line 201,col 9)-(line 201,col 33)",
        "(line 202,col 9)-(line 202,col 37)",
        "(line 205,col 9)-(line 205,col 42)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getDrawSeriesLineAsPath()",
      "begin_line": 216,
      "end_line": 218,
      "comment": "\r\n     * Returns a flag that controls whether or not each series is drawn as a\r\n     * single path.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDrawSeriesLineAsPath(boolean)\r\n     ",
      "child_ranges": [
        "(line 217,col 9)-(line 217,col 41)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDrawSeriesLineAsPath(boolean)",
      "begin_line": 229,
      "end_line": 234,
      "comment": "\r\n     * Sets the flag that controls whether or not each series is drawn as a\r\n     * single path and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getDrawSeriesLineAsPath()\r\n     ",
      "child_ranges": [
        "(line 230,col 9)-(line 233,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getPassCount()",
      "begin_line": 243,
      "end_line": 245,
      "comment": "\r\n     * Returns the number of passes through the data that the renderer requires\r\n     * in order to draw the chart.  Most charts will require a single pass, but\r\n     * some require two passes.\r\n     *\r\n     * @return The pass count.\r\n     ",
      "child_ranges": [
        "(line 244,col 9)-(line 244,col 17)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getItemLineVisible(int, int)",
      "begin_line": 258,
      "end_line": 266,
      "comment": "\r\n     * Returns the flag used to control whether or not the shape for an item is\r\n     * visible.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 259,col 9)-(line 259,col 53)",
        "(line 260,col 9)-(line 265,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getSeriesLinesVisible(int)",
      "begin_line": 278,
      "end_line": 280,
      "comment": "\r\n     * Returns the flag used to control whether or not the lines for a series\r\n     * are visible.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The flag (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setSeriesLinesVisible(int, Boolean)\r\n     ",
      "child_ranges": [
        "(line 279,col 9)-(line 279,col 58)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesLinesVisible(int, java.lang.Boolean)",
      "begin_line": 291,
      "end_line": 294,
      "comment": "\r\n     * Sets the \u0027lines visible\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param flag  the flag (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getSeriesLinesVisible(int)\r\n     ",
      "child_ranges": [
        "(line 292,col 9)-(line 292,col 57)",
        "(line 293,col 9)-(line 293,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesLinesVisible(int, boolean)",
      "begin_line": 305,
      "end_line": 307,
      "comment": "\r\n     * Sets the \u0027lines visible\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param visible  the flag.\r\n     *\r\n     * @see #getSeriesLinesVisible(int)\r\n     ",
      "child_ranges": [
        "(line 306,col 9)-(line 306,col 64)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getBaseLinesVisible()",
      "begin_line": 316,
      "end_line": 318,
      "comment": "\r\n     * Returns the base \u0027lines visible\u0027 attribute.\r\n     *\r\n     * @return The base flag.\r\n     *\r\n     * @see #setBaseLinesVisible(boolean)\r\n     ",
      "child_ranges": [
        "(line 317,col 9)-(line 317,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseLinesVisible(boolean)",
      "begin_line": 328,
      "end_line": 331,
      "comment": "\r\n     * Sets the base \u0027lines visible\u0027 flag and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getBaseLinesVisible()\r\n     ",
      "child_ranges": [
        "(line 329,col 9)-(line 329,col 37)",
        "(line 330,col 9)-(line 330,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getLegendLine()",
      "begin_line": 340,
      "end_line": 342,
      "comment": "\r\n     * Returns the shape used to represent a line in the legend.\r\n     *\r\n     * @return The legend line (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLegendLine(Shape)\r\n     ",
      "child_ranges": [
        "(line 341,col 9)-(line 341,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setLegendLine(java.awt.Shape)",
      "begin_line": 352,
      "end_line": 358,
      "comment": "\r\n     * Sets the shape used as a line in each legend item and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param line  the line (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getLegendLine()\r\n     ",
      "child_ranges": [
        "(line 353,col 9)-(line 355,col 9)",
        "(line 356,col 9)-(line 356,col 31)",
        "(line 357,col 9)-(line 357,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getItemShapeVisible(int, int)",
      "begin_line": 375,
      "end_line": 383,
      "comment": "\r\n     * Returns the flag used to control whether or not the shape for an item is\r\n     * visible.\r\n     * \u003cp\u003e\r\n     * The default implementation passes control to the\r\n     * \u003ccode\u003egetSeriesShapesVisible\u003c/code\u003e method. You can override this method\r\n     * if you require different behaviour.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 376,col 9)-(line 376,col 54)",
        "(line 377,col 9)-(line 382,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getSeriesShapesVisible(int)",
      "begin_line": 395,
      "end_line": 397,
      "comment": "\r\n     * Returns the flag used to control whether or not the shapes for a series\r\n     * are visible.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setSeriesShapesVisible(int, Boolean)\r\n     ",
      "child_ranges": [
        "(line 396,col 9)-(line 396,col 59)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesVisible(int, boolean)",
      "begin_line": 408,
      "end_line": 410,
      "comment": "\r\n     * Sets the \u0027shapes visible\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param visible  the flag.\r\n     *\r\n     * @see #getSeriesShapesVisible(int)\r\n     ",
      "child_ranges": [
        "(line 409,col 9)-(line 409,col 65)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesVisible(int, java.lang.Boolean)",
      "begin_line": 421,
      "end_line": 424,
      "comment": "\r\n     * Sets the \u0027shapes visible\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getSeriesShapesVisible(int)\r\n     ",
      "child_ranges": [
        "(line 422,col 9)-(line 422,col 58)",
        "(line 423,col 9)-(line 423,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getBaseShapesVisible()",
      "begin_line": 433,
      "end_line": 435,
      "comment": "\r\n     * Returns the base \u0027shape visible\u0027 attribute.\r\n     *\r\n     * @return The base flag.\r\n     *\r\n     * @see #setBaseShapesVisible(boolean)\r\n     ",
      "child_ranges": [
        "(line 434,col 9)-(line 434,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseShapesVisible(boolean)",
      "begin_line": 445,
      "end_line": 448,
      "comment": "\r\n     * Sets the base \u0027shapes visible\u0027 flag and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getBaseShapesVisible()\r\n     ",
      "child_ranges": [
        "(line 446,col 9)-(line 446,col 38)",
        "(line 447,col 9)-(line 447,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getItemShapeFilled(int, int)",
      "begin_line": 465,
      "end_line": 473,
      "comment": "\r\n     * Returns the flag used to control whether or not the shape for an item\r\n     * is filled.\r\n     * \u003cp\u003e\r\n     * The default implementation passes control to the\r\n     * \u003ccode\u003egetSeriesShapesFilled\u003c/code\u003e method. You can override this method\r\n     * if you require different behaviour.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 466,col 9)-(line 466,col 53)",
        "(line 467,col 9)-(line 472,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getSeriesShapesFilled(int)",
      "begin_line": 485,
      "end_line": 487,
      "comment": "\r\n     * Returns the flag used to control whether or not the shapes for a series\r\n     * are filled.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setSeriesShapesFilled(int, Boolean)\r\n     ",
      "child_ranges": [
        "(line 486,col 9)-(line 486,col 58)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesFilled(int, boolean)",
      "begin_line": 498,
      "end_line": 500,
      "comment": "\r\n     * Sets the \u0027shapes filled\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getSeriesShapesFilled(int)\r\n     ",
      "child_ranges": [
        "(line 499,col 9)-(line 499,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesFilled(int, java.lang.Boolean)",
      "begin_line": 511,
      "end_line": 514,
      "comment": "\r\n     * Sets the \u0027shapes filled\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getSeriesShapesFilled(int)\r\n     ",
      "child_ranges": [
        "(line 512,col 9)-(line 512,col 57)",
        "(line 513,col 9)-(line 513,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getBaseShapesFilled()",
      "begin_line": 523,
      "end_line": 525,
      "comment": "\r\n     * Returns the base \u0027shape filled\u0027 attribute.\r\n     *\r\n     * @return The base flag.\r\n     *\r\n     * @see #setBaseShapesFilled(boolean)\r\n     ",
      "child_ranges": [
        "(line 524,col 9)-(line 524,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseShapesFilled(boolean)",
      "begin_line": 535,
      "end_line": 538,
      "comment": "\r\n     * Sets the base \u0027shapes filled\u0027 flag and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getBaseShapesFilled()\r\n     ",
      "child_ranges": [
        "(line 536,col 9)-(line 536,col 37)",
        "(line 537,col 9)-(line 537,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getDrawOutlines()",
      "begin_line": 548,
      "end_line": 550,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if outlines should be drawn for shapes, and\r\n     * \u003ccode\u003efalse\u003c/code\u003e otherwise.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDrawOutlines(boolean)\r\n     ",
      "child_ranges": [
        "(line 549,col 9)-(line 549,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDrawOutlines(boolean)",
      "begin_line": 564,
      "end_line": 567,
      "comment": "\r\n     * Sets the flag that controls whether outlines are drawn for\r\n     * shapes, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     * \u003cP\u003e\r\n     * In some cases, shapes look better if they do NOT have an outline, but\r\n     * this flag allows you to set your own preference.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getDrawOutlines()\r\n     ",
      "child_ranges": [
        "(line 565,col 9)-(line 565,col 33)",
        "(line 566,col 9)-(line 566,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getUseFillPaint()",
      "begin_line": 582,
      "end_line": 584,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the renderer should use the fill paint\r\n     * setting to fill shapes, and \u003ccode\u003efalse\u003c/code\u003e if it should just\r\n     * use the regular paint.\r\n     * \u003cp\u003e\r\n     * Refer to \u003ccode\u003eXYLineAndShapeRendererDemo2.java\u003c/code\u003e to see the\r\n     * effect of this flag.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setUseFillPaint(boolean)\r\n     * @see #getUseOutlinePaint()\r\n     ",
      "child_ranges": [
        "(line 583,col 9)-(line 583,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setUseFillPaint(boolean)",
      "begin_line": 595,
      "end_line": 598,
      "comment": "\r\n     * Sets the flag that controls whether the fill paint is used to fill\r\n     * shapes, and sends a {@link RendererChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getUseFillPaint()\r\n     ",
      "child_ranges": [
        "(line 596,col 9)-(line 596,col 33)",
        "(line 597,col 9)-(line 597,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getUseOutlinePaint()",
      "begin_line": 610,
      "end_line": 612,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the renderer should use the outline paint\r\n     * setting to draw shape outlines, and \u003ccode\u003efalse\u003c/code\u003e if it should just\r\n     * use the regular paint.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setUseOutlinePaint(boolean)\r\n     * @see #getUseFillPaint()\r\n     ",
      "child_ranges": [
        "(line 611,col 9)-(line 611,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setUseOutlinePaint(boolean)",
      "begin_line": 626,
      "end_line": 629,
      "comment": "\r\n     * Sets the flag that controls whether the outline paint is used to draw\r\n     * shape outlines, and sends a {@link RendererChangeEvent} to all\r\n     * registered listeners.\r\n     * \u003cp\u003e\r\n     * Refer to \u003ccode\u003eXYLineAndShapeRendererDemo2.java\u003c/code\u003e to see the\r\n     * effect of this flag.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getUseOutlinePaint()\r\n     ",
      "child_ranges": [
        "(line 627,col 9)-(line 627,col 36)",
        "(line 628,col 9)-(line 628,col 26)"
      ]
    },
    {
      "type": "class_interface",
      "name": "State",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.XYItemRendererState"
      ],
      "begin_line": 636,
      "end_line": 695,
      "comment": "\r\n     * Records the state for the renderer.  This is used to preserve state\r\n     * information between calls to the drawItem() method for a single chart\r\n     * drawing.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "seriesPath"
      ],
      "begin_line": 639,
      "end_line": 639,
      "comment": " The path for the current series. "
    },
    {
      "type": "field",
      "varNames": [
        "lastPointGood"
      ],
      "begin_line": 645,
      "end_line": 645,
      "comment": "\r\n         * A flag that indicates if the last (x, y) point was \u0027good\u0027\r\n         * (non-null).\r\n         "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.State.State(org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 652,
      "end_line": 654,
      "comment": "\r\n         * Creates a new state instance.\r\n         *\r\n         * @param info  the plot rendering info.\r\n         ",
      "child_ranges": [
        "(line 653,col 13)-(line 653,col 24)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.State.isLastPointGood()",
      "begin_line": 662,
      "end_line": 664,
      "comment": "\r\n         * Returns a flag that indicates if the last point drawn (in the\r\n         * current series) was \u0027good\u0027 (non-null).\r\n         *\r\n         * @return A boolean.\r\n         ",
      "child_ranges": [
        "(line 663,col 13)-(line 663,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.State.setLastPointGood(boolean)",
      "begin_line": 672,
      "end_line": 674,
      "comment": "\r\n         * Sets a flag that indicates if the last point drawn (in the current\r\n         * series) was \u0027good\u0027 (non-null).\r\n         *\r\n         * @param good  the flag.\r\n         ",
      "child_ranges": [
        "(line 673,col 13)-(line 673,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.State.startSeriesPass(org.jfree.data.xy.XYDataset, int, int, int, int, int)",
      "begin_line": 687,
      "end_line": 693,
      "comment": "\r\n         * This method is called by the {@link XYPlot} at the start of each\r\n         * series pass.  We reset the state for the current series.\r\n         *\r\n         * @param dataset  the dataset.\r\n         * @param series  the series index.\r\n         * @param firstItem  the first item index for this pass.\r\n         * @param lastItem  the last item index for this pass.\r\n         * @param pass  the current pass index.\r\n         * @param passCount  the number of passes.\r\n         ",
      "child_ranges": [
        "(line 689,col 13)-(line 689,col 36)",
        "(line 690,col 13)-(line 690,col 39)",
        "(line 691,col 13)-(line 692,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 713,
      "end_line": 739,
      "comment": "\r\n     * Initialises the renderer.\r\n     * \u003cP\u003e\r\n     * This method will be called before the first item is rendered, giving the\r\n     * renderer an opportunity to initialise any state information it wants to\r\n     * maintain.  The renderer can do nothing if it chooses.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area inside the axes.\r\n     * @param plot  the plot.\r\n     * @param dataset  the dataset.\r\n     * @param info  an optional info collection object to return data back to\r\n     *              the caller.\r\n     *\r\n     * @return The renderer state.\r\n     ",
      "child_ranges": [
        "(line 716,col 9)-(line 716,col 38)",
        "(line 717,col 9)-(line 717,col 45)",
        "(line 719,col 9)-(line 719,col 54)",
        "(line 720,col 9)-(line 723,col 9)",
        "(line 726,col 9)-(line 735,col 9)",
        "(line 736,col 9)-(line 736,col 48)",
        "(line 737,col 9)-(line 737,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, int)",
      "begin_line": 759,
      "end_line": 795,
      "comment": "\r\n     * Draws the visual representation of a single data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the area within which the data is being drawn.\r\n     * @param plot  the plot (can be used to obtain standard color\r\n     *              information etc).\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param selected  is the data item selected?\r\n     * @param pass  the pass index.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 765,col 9)-(line 767,col 9)",
        "(line 770,col 9)-(line 794,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.isLinePass(int)",
      "begin_line": 805,
      "end_line": 807,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified pass is the one for drawing\r\n     * lines.\r\n     *\r\n     * @param pass  the pass.\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 806,col 9)-(line 806,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.isItemPass(int)",
      "begin_line": 817,
      "end_line": 819,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified pass is the one for drawing\r\n     * items.\r\n     *\r\n     * @param pass  the pass.\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 818,col 9)-(line 818,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, int, boolean, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D)",
      "begin_line": 840,
      "end_line": 889,
      "comment": "\r\n     * Draws the item (first pass). This method draws the lines\r\n     * connecting the items.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param plot  the plot (can be used to obtain standard color\r\n     *              information etc).\r\n     * @param dataset  the dataset.\r\n     * @param pass  the pass.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param selected  is the data item selected?\r\n     * @param dataArea  the area within which the data is being drawn.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 845,col 9)-(line 847,col 9)",
        "(line 850,col 9)-(line 850,col 52)",
        "(line 851,col 9)-(line 851,col 52)",
        "(line 852,col 9)-(line 854,col 9)",
        "(line 856,col 9)-(line 856,col 56)",
        "(line 857,col 9)-(line 857,col 56)",
        "(line 858,col 9)-(line 860,col 9)",
        "(line 862,col 9)-(line 862,col 63)",
        "(line 863,col 9)-(line 863,col 62)",
        "(line 865,col 9)-(line 865,col 79)",
        "(line 866,col 9)-(line 866,col 78)",
        "(line 868,col 9)-(line 868,col 79)",
        "(line 869,col 9)-(line 869,col 78)",
        "(line 872,col 9)-(line 875,col 9)",
        "(line 877,col 9)-(line 877,col 60)",
        "(line 878,col 9)-(line 878,col 32)",
        "(line 879,col 9)-(line 884,col 9)",
        "(line 885,col 9)-(line 885,col 70)",
        "(line 886,col 9)-(line 888,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawShape1(java.awt.Graphics2D, int, int, int, boolean, java.awt.Shape)",
      "begin_line": 903,
      "end_line": 908,
      "comment": "\r\n     * Draws a shape (first pass).\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param pass  the pass.\r\n     * @param series  the series index.\r\n     * @param item  the item index.\r\n     * @param selected  is the data item selected?\r\n     * @param shape  the shape.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 905,col 9)-(line 905,col 60)",
        "(line 906,col 9)-(line 906,col 58)",
        "(line 907,col 9)-(line 907,col 23)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, int, boolean, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D)",
      "begin_line": 932,
      "end_line": 973,
      "comment": "\r\n     * Draws the item (first pass). This method draws the lines\r\n     * connecting the items. Instead of drawing separate lines,\r\n     * a GeneralPath is constructed and drawn at the end of\r\n     * the series painting.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param plot  the plot (can be used to obtain standard color information\r\n     *              etc).\r\n     * @param dataset  the dataset.\r\n     * @param pass  the pass.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param selected  is the data item selected?\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataArea  the area within which the data is being drawn.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 938,col 9)-(line 938,col 63)",
        "(line 939,col 9)-(line 939,col 62)",
        "(line 942,col 9)-(line 942,col 52)",
        "(line 943,col 9)-(line 943,col 52)",
        "(line 944,col 9)-(line 944,col 79)",
        "(line 945,col 9)-(line 945,col 78)",
        "(line 947,col 9)-(line 947,col 32)",
        "(line 949,col 9)-(line 967,col 9)",
        "(line 969,col 9)-(line 972,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawShape2(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, int, boolean, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.plot.CrosshairState, org.jfree.chart.entity.EntityCollection)",
      "begin_line": 995,
      "end_line": 1075,
      "comment": "\r\n     * Draws the item shapes and adds chart entities (second pass). This method\r\n     * draws the shapes which mark the item positions. If \u003ccode\u003eentities\u003c/code\u003e\r\n     * is not \u003ccode\u003enull\u003c/code\u003e it will be populated with entity information\r\n     * for points that fall within the data area.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plot  the plot (can be used to obtain standard color\r\n     *              information etc).\r\n     * @param domainAxis  the domain axis.\r\n     * @param dataArea  the area within which the data is being drawn.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param pass  the pass.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param selected  is the data item selected?\r\n     * @param crosshairState  the crosshair state.\r\n     * @param entities the entity collection.\r\n     ",
      "child_ranges": [
        "(line 1000,col 9)-(line 1000,col 32)",
        "(line 1003,col 9)-(line 1003,col 52)",
        "(line 1004,col 9)-(line 1004,col 52)",
        "(line 1005,col 9)-(line 1007,col 9)",
        "(line 1009,col 9)-(line 1009,col 60)",
        "(line 1010,col 9)-(line 1010,col 63)",
        "(line 1011,col 9)-(line 1011,col 62)",
        "(line 1012,col 9)-(line 1012,col 79)",
        "(line 1013,col 9)-(line 1013,col 78)",
        "(line 1015,col 9)-(line 1048,col 9)",
        "(line 1050,col 9)-(line 1050,col 28)",
        "(line 1051,col 9)-(line 1051,col 28)",
        "(line 1052,col 9)-(line 1055,col 9)",
        "(line 1058,col 9)-(line 1061,col 9)",
        "(line 1063,col 9)-(line 1063,col 66)",
        "(line 1064,col 9)-(line 1064,col 63)",
        "(line 1065,col 9)-(line 1066,col 63)",
        "(line 1070,col 9)-(line 1074,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getLegendItem(int, int)",
      "begin_line": 1086,
      "end_line": 1143,
      "comment": "\r\n     * Returns a legend item for the specified series.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return A legend item for the series.\r\n     ",
      "child_ranges": [
        "(line 1088,col 9)-(line 1088,col 32)",
        "(line 1089,col 9)-(line 1091,col 9)",
        "(line 1093,col 9)-(line 1093,col 33)",
        "(line 1094,col 9)-(line 1094,col 58)",
        "(line 1095,col 9)-(line 1139,col 9)",
        "(line 1141,col 9)-(line 1141,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.clone()",
      "begin_line": 1152,
      "end_line": 1164,
      "comment": "\r\n     * Returns a clone of the renderer.\r\n     *\r\n     * @return A clone.\r\n     *\r\n     * @throws CloneNotSupportedException if the clone cannot be created.\r\n     ",
      "child_ranges": [
        "(line 1153,col 9)-(line 1153,col 78)",
        "(line 1154,col 9)-(line 1155,col 64)",
        "(line 1156,col 9)-(line 1158,col 9)",
        "(line 1159,col 9)-(line 1160,col 65)",
        "(line 1161,col 9)-(line 1162,col 64)",
        "(line 1163,col 9)-(line 1163,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.equals(java.lang.Object)",
      "begin_line": 1173,
      "end_line": 1221,
      "comment": "\r\n     * Tests this renderer for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 1174,col 9)-(line 1176,col 9)",
        "(line 1177,col 9)-(line 1179,col 9)",
        "(line 1180,col 9)-(line 1182,col 9)",
        "(line 1183,col 9)-(line 1183,col 67)",
        "(line 1184,col 9)-(line 1187,col 9)",
        "(line 1188,col 9)-(line 1190,col 9)",
        "(line 1191,col 9)-(line 1193,col 9)",
        "(line 1194,col 9)-(line 1197,col 9)",
        "(line 1198,col 9)-(line 1200,col 9)",
        "(line 1201,col 9)-(line 1204,col 9)",
        "(line 1205,col 9)-(line 1207,col 9)",
        "(line 1208,col 9)-(line 1210,col 9)",
        "(line 1211,col 9)-(line 1213,col 9)",
        "(line 1214,col 9)-(line 1216,col 9)",
        "(line 1217,col 9)-(line 1219,col 9)",
        "(line 1220,col 9)-(line 1220,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.readObject(java.io.ObjectInputStream)",
      "begin_line": 1231,
      "end_line": 1235,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
      "child_ranges": [
        "(line 1233,col 9)-(line 1233,col 35)",
        "(line 1234,col 9)-(line 1234,col 60)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 1244,
      "end_line": 1247,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
      "child_ranges": [
        "(line 1245,col 9)-(line 1245,col 36)",
        "(line 1246,col 9)-(line 1246,col 60)"
      ]
    }
  ]
}