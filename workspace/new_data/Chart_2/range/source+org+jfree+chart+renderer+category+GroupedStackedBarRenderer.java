{
  "filepath": "/tmp/Chart-2b/source/org/jfree/chart/renderer/category/GroupedStackedBarRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "GroupedStackedBarRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.category.StackedBarRenderer",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 80,
      "end_line": 372,
      "comment": "\r\n * A renderer that draws stacked bars within groups.  This will probably be\r\n * merged with the {@link StackedBarRenderer} class at some point.  The example\r\n * shown here is generated by the \u003ccode\u003eStackedBarChartDemo4.java\u003c/code\u003e\r\n * program included in the JFreeChart Demo Collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/GroupedStackedBarRendererSample.png\"\r\n * alt\u003d\"GroupedStackedBarRendererSample.png\" /\u003e\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 84,
      "end_line": 84,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "seriesToGroupMap"
      ],
      "begin_line": 87,
      "end_line": 87,
      "comment": " A map used to assign each series to a group. "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer.GroupedStackedBarRenderer()",
      "begin_line": 92,
      "end_line": 95,
      "comment": "\r\n     * Creates a new renderer.\r\n     ",
      "child_ranges": [
        "(line 93,col 9)-(line 93,col 16)",
        "(line 94,col 9)-(line 94,col 52)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer.setSeriesToGroupMap(org.jfree.data.KeyToGroupMap)",
      "begin_line": 103,
      "end_line": 109,
      "comment": "\r\n     * Updates the map used to assign each series to a group, and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param map  the map (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     ",
      "child_ranges": [
        "(line 104,col 9)-(line 106,col 9)",
        "(line 107,col 9)-(line 107,col 36)",
        "(line 108,col 9)-(line 108,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)",
      "begin_line": 120,
      "end_line": 127,
      "comment": "\r\n     * Returns the range of values the renderer requires to display all the\r\n     * items from the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return The range (or \u003ccode\u003enull\u003c/code\u003e if the dataset is\r\n     *         \u003ccode\u003enull\u003c/code\u003e or empty).\r\n     ",
      "child_ranges": [
        "(line 121,col 9)-(line 123,col 9)",
        "(line 124,col 9)-(line 125,col 48)",
        "(line 126,col 9)-(line 126,col 17)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer.calculateBarWidth(org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D, int, org.jfree.chart.renderer.category.CategoryItemRendererState)",
      "begin_line": 139,
      "end_line": 180,
      "comment": "\r\n     * Calculates the bar width and stores it in the renderer state.  We\r\n     * override the method in the base class to take account of the\r\n     * series-to-group mapping.\r\n     *\r\n     * @param plot  the plot.\r\n     * @param dataArea  the data area.\r\n     * @param rendererIndex  the renderer index.\r\n     * @param state  the renderer state.\r\n     ",
      "child_ranges": [
        "(line 145,col 9)-(line 145,col 73)",
        "(line 146,col 9)-(line 146,col 62)",
        "(line 147,col 9)-(line 178,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer.calculateBarW0(org.jfree.chart.plot.CategoryPlot, org.jfree.chart.plot.PlotOrientation, java.awt.geom.Rectangle2D, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.renderer.category.CategoryItemRendererState, int, int)",
      "begin_line": 197,
      "end_line": 233,
      "comment": "\r\n     * Calculates the coordinate of the first \"side\" of a bar.  This will be\r\n     * the minimum x-coordinate for a vertical bar, and the minimum\r\n     * y-coordinate for a horizontal bar.\r\n     *\r\n     * @param plot  the plot.\r\n     * @param orientation  the plot orientation.\r\n     * @param dataArea  the data area.\r\n     * @param domainAxis  the domain axis.\r\n     * @param state  the renderer state (has the bar width precalculated).\r\n     * @param row  the row index.\r\n     * @param column  the column index.\r\n     *\r\n     * @return The coordinate.\r\n     ",
      "child_ranges": [
        "(line 205,col 9)-(line 205,col 27)",
        "(line 206,col 9)-(line 211,col 9)",
        "(line 212,col 9)-(line 213,col 52)",
        "(line 214,col 9)-(line 214,col 63)",
        "(line 215,col 9)-(line 217,col 64)",
        "(line 218,col 9)-(line 218,col 45)",
        "(line 219,col 9)-(line 231,col 9)",
        "(line 232,col 9)-(line 232,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, boolean, int)",
      "begin_line": 249,
      "end_line": 349,
      "comment": "\r\n     * Draws a stacked bar for a specific item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the plot area.\r\n     * @param plot  the plot.\r\n     * @param domainAxis  the domain (category) axis.\r\n     * @param rangeAxis  the range (value) axis.\r\n     * @param dataset  the data.\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 255,col 9)-(line 255,col 57)",
        "(line 256,col 9)-(line 258,col 9)",
        "(line 260,col 9)-(line 260,col 47)",
        "(line 261,col 9)-(line 262,col 40)",
        "(line 263,col 9)-(line 263,col 60)",
        "(line 264,col 9)-(line 265,col 36)",
        "(line 267,col 9)-(line 267,col 34)",
        "(line 268,col 9)-(line 268,col 34)",
        "(line 270,col 9)-(line 284,col 9)",
        "(line 286,col 9)-(line 286,col 30)",
        "(line 287,col 9)-(line 287,col 31)",
        "(line 288,col 9)-(line 288,col 41)",
        "(line 289,col 9)-(line 289,col 50)",
        "(line 290,col 9)-(line 290,col 30)",
        "(line 291,col 9)-(line 306,col 9)",
        "(line 307,col 9)-(line 307,col 57)",
        "(line 308,col 9)-(line 319,col 9)",
        "(line 320,col 9)-(line 320,col 65)",
        "(line 321,col 9)-(line 322,col 39)",
        "(line 324,col 9)-(line 324,col 31)",
        "(line 325,col 9)-(line 332,col 9)",
        "(line 333,col 9)-(line 334,col 25)",
        "(line 336,col 9)-(line 337,col 34)",
        "(line 338,col 9)-(line 341,col 9)",
        "(line 344,col 9)-(line 344,col 64)",
        "(line 345,col 9)-(line 347,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer.equals(java.lang.Object)",
      "begin_line": 358,
      "end_line": 370,
      "comment": "\r\n     * Tests this renderer for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 359,col 9)-(line 361,col 9)",
        "(line 362,col 9)-(line 364,col 9)",
        "(line 365,col 9)-(line 365,col 73)",
        "(line 366,col 9)-(line 368,col 9)",
        "(line 369,col 9)-(line 369,col 33)"
      ]
    }
  ]
}