{
  "filepath": "/tmp/Chart-2b/source/org/jfree/chart/renderer/xy/StackedXYAreaRenderer2.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "StackedXYAreaRenderer2",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.XYAreaRenderer2",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 91,
      "end_line": 558,
      "comment": "\r\n * A stacked area renderer for the {@link XYPlot} class.\r\n * The example shown here is generated by the\r\n * \u003ccode\u003eStackedXYAreaChartDemo2.java\u003c/code\u003e program included in the\r\n * JFreeChart demo collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/StackedXYAreaRenderer2Sample.png\"\r\n * alt\u003d\"StackedXYAreaRenderer2Sample.png\" /\u003e\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 95,
      "end_line": 95,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "roundXCoordinates"
      ],
      "begin_line": 106,
      "end_line": 106,
      "comment": "\r\n     * This flag controls whether or not the x-coordinates (in Java2D space)\r\n     * are rounded to integers.  When set to true, this can avoid the vertical\r\n     * striping that anti-aliasing can generate.  However, the rounding may not\r\n     * be appropriate for output in high resolution formats (for example,\r\n     * vector graphics formats such as SVG and PDF).\r\n     *\r\n     * @since 1.0.3\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.StackedXYAreaRenderer2()",
      "begin_line": 111,
      "end_line": 113,
      "comment": "\r\n     * Creates a new renderer.\r\n     ",
      "child_ranges": [
        "(line 112,col 9)-(line 112,col 25)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.StackedXYAreaRenderer2(org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)",
      "begin_line": 122,
      "end_line": 126,
      "comment": "\r\n     * Constructs a new renderer.\r\n     *\r\n     * @param labelGenerator  the tool tip generator to use.  \u003ccode\u003enull\u003c/code\u003e\r\n     *                        is none.\r\n     * @param urlGenerator  the URL generator (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     ",
      "child_ranges": [
        "(line 124,col 9)-(line 124,col 44)",
        "(line 125,col 9)-(line 125,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.getRoundXCoordinates()",
      "begin_line": 138,
      "end_line": 140,
      "comment": "\r\n     * Returns the flag that controls whether or not the x-coordinates (in\r\n     * Java2D space) are rounded to integer values.\r\n     *\r\n     * @return The flag.\r\n     *\r\n     * @since 1.0.4\r\n     *\r\n     * @see #setRoundXCoordinates(boolean)\r\n     ",
      "child_ranges": [
        "(line 139,col 9)-(line 139,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.setRoundXCoordinates(boolean)",
      "begin_line": 153,
      "end_line": 156,
      "comment": "\r\n     * Sets the flag that controls whether or not the x-coordinates (in\r\n     * Java2D space) are rounded to integer values, and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param round  the new flag value.\r\n     *\r\n     * @since 1.0.4\r\n     *\r\n     * @see #getRoundXCoordinates()\r\n     ",
      "child_ranges": [
        "(line 154,col 9)-(line 154,col 39)",
        "(line 155,col 9)-(line 155,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.findRangeBounds(org.jfree.data.xy.XYDataset)",
      "begin_line": 167,
      "end_line": 185,
      "comment": "\r\n     * Returns the range of values the renderer requires to display all the\r\n     * items from the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return The range (or \u003ccode\u003enull\u003c/code\u003e if the dataset is\r\n     *         \u003ccode\u003enull\u003c/code\u003e or empty).\r\n     ",
      "child_ranges": [
        "(line 168,col 9)-(line 170,col 9)",
        "(line 171,col 9)-(line 171,col 46)",
        "(line 172,col 9)-(line 172,col 46)",
        "(line 173,col 9)-(line 173,col 52)",
        "(line 174,col 9)-(line 174,col 41)",
        "(line 175,col 9)-(line 180,col 9)",
        "(line 181,col 9)-(line 183,col 9)",
        "(line 184,col 9)-(line 184,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.getPassCount()",
      "begin_line": 192,
      "end_line": 194,
      "comment": "\r\n     * Returns the number of passes required by the renderer.\r\n     *\r\n     * @return 1.\r\n     ",
      "child_ranges": [
        "(line 193,col 9)-(line 193,col 17)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, int)",
      "begin_line": 211,
      "end_line": 451,
      "comment": "\r\n     * Draws the visual representation of a single data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the area within which the data is being drawn.\r\n     * @param plot  the plot (can be used to obtain standard color information\r\n     *              etc).\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 217,col 9)-(line 217,col 32)",
        "(line 218,col 9)-(line 218,col 41)",
        "(line 219,col 9)-(line 221,col 9)",
        "(line 223,col 9)-(line 223,col 59)",
        "(line 224,col 9)-(line 224,col 60)",
        "(line 227,col 9)-(line 227,col 52)",
        "(line 228,col 9)-(line 228,col 52)",
        "(line 229,col 9)-(line 231,col 9)",
        "(line 232,col 9)-(line 232,col 65)",
        "(line 236,col 9)-(line 236,col 69)",
        "(line 237,col 9)-(line 237,col 69)",
        "(line 238,col 9)-(line 240,col 9)",
        "(line 241,col 9)-(line 242,col 20)",
        "(line 244,col 9)-(line 244,col 53)",
        "(line 245,col 9)-(line 246,col 32)",
        "(line 247,col 9)-(line 248,col 32)",
        "(line 249,col 9)-(line 251,col 9)",
        "(line 252,col 9)-(line 253,col 32)",
        "(line 255,col 9)-(line 255,col 39)",
        "(line 256,col 9)-(line 256,col 40)",
        "(line 257,col 9)-(line 257,col 64)",
        "(line 258,col 9)-(line 258,col 65)",
        "(line 259,col 9)-(line 259,col 68)",
        "(line 260,col 9)-(line 260,col 69)",
        "(line 262,col 9)-(line 262,col 55)",
        "(line 264,col 9)-(line 264,col 78)",
        "(line 265,col 9)-(line 266,col 23)",
        "(line 267,col 9)-(line 268,col 23)",
        "(line 270,col 9)-(line 274,col 9)",
        "(line 275,col 9)-(line 275,col 22)",
        "(line 277,col 9)-(line 277,col 54)",
        "(line 279,col 9)-(line 279,col 45)",
        "(line 280,col 9)-(line 280,col 46)",
        "(line 281,col 9)-(line 432,col 9)",
        "(line 435,col 9)-(line 435,col 63)",
        "(line 436,col 9)-(line 440,col 9)",
        "(line 443,col 9)-(line 449,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.getStackValues(org.jfree.data.xy.TableXYDataset, int, int)",
      "begin_line": 466,
      "end_line": 481,
      "comment": "\r\n     * Calculates the stacked values (one positive and one negative) of all\r\n     * series up to, but not including, \u003ccode\u003eseries\u003c/code\u003e for the specified\r\n     * item. It returns [0.0, 0.0] if \u003ccode\u003eseries\u003c/code\u003e is the first series.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     * @param series  the series index.\r\n     * @param index  the item index.\r\n     *\r\n     * @return An array containing the cumulative negative and positive values\r\n     *     for all series values up to but excluding \u003ccode\u003eseries\u003c/code\u003e\r\n     *     for \u003ccode\u003eindex\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 468,col 9)-(line 468,col 40)",
        "(line 469,col 9)-(line 479,col 9)",
        "(line 480,col 9)-(line 480,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.averageStackValues(double[], double[])",
      "begin_line": 492,
      "end_line": 497,
      "comment": "\r\n     * Returns a pair of \"stack\" values calculated as the mean of the two\r\n     * specified stack value pairs.\r\n     *\r\n     * @param stack1  the first stack pair.\r\n     * @param stack2  the second stack pair.\r\n     *\r\n     * @return A pair of average stack values.\r\n     ",
      "child_ranges": [
        "(line 493,col 9)-(line 493,col 40)",
        "(line 494,col 9)-(line 494,col 50)",
        "(line 495,col 9)-(line 495,col 50)",
        "(line 496,col 9)-(line 496,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.adjustedStackValues(double[], double[])",
      "begin_line": 509,
      "end_line": 524,
      "comment": "\r\n     * Calculates adjusted stack values from the supplied values.  The value is\r\n     * the mean of the supplied values, unless either of the supplied values\r\n     * is zero, in which case the adjusted value is zero also.\r\n     *\r\n     * @param stack1  the first stack pair.\r\n     * @param stack2  the second stack pair.\r\n     *\r\n     * @return A pair of average stack values.\r\n     ",
      "child_ranges": [
        "(line 510,col 9)-(line 510,col 40)",
        "(line 511,col 9)-(line 516,col 9)",
        "(line 517,col 9)-(line 522,col 9)",
        "(line 523,col 9)-(line 523,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.equals(java.lang.Object)",
      "begin_line": 533,
      "end_line": 545,
      "comment": "\r\n     * Tests this renderer for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 534,col 9)-(line 536,col 9)",
        "(line 537,col 9)-(line 539,col 9)",
        "(line 540,col 9)-(line 540,col 67)",
        "(line 541,col 9)-(line 543,col 9)",
        "(line 544,col 9)-(line 544,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.clone()",
      "begin_line": 554,
      "end_line": 556,
      "comment": "\r\n     * Returns a clone of the renderer.\r\n     *\r\n     * @return A clone.\r\n     *\r\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\r\n     ",
      "child_ranges": [
        "(line 555,col 9)-(line 555,col 29)"
      ]
    }
  ]
}