{
  "filepath": "/tmp/Chart-2b/source/org/jfree/chart/renderer/xy/XYSplineRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "XYSplineRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer"
      ],
      "begin_line": 72,
      "end_line": 370,
      "comment": "\n * A renderer that connects data points with natural cubic splines and/or\n * draws shapes at each data point.  This renderer is designed for use with\n * the {@link XYPlot} class. The example shown here is generated by the\n * \u003ccode\u003eXYSplineRendererDemo1.java\u003c/code\u003e program included in the JFreeChart\n * demo collection:\n * \u003cbr\u003e\u003cbr\u003e\n * \u003cimg src\u003d\"../../../../../images/XYSplineRendererSample.png\"\n * alt\u003d\"XYSplineRendererSample.png\" /\u003e\n *\n * @since 1.0.7\n "
    },
    {
      "type": "field",
      "varNames": [
        "points"
      ],
      "begin_line": 77,
      "end_line": 77,
      "comment": "\n     * To collect data points for later splining.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "precision"
      ],
      "begin_line": 82,
      "end_line": 82,
      "comment": "\n     * Resolution of splines (number of line segments between points)\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYSplineRenderer.XYSplineRenderer()",
      "begin_line": 88,
      "end_line": 90,
      "comment": "\n     * Creates a new instance with the \u0027precision\u0027 attribute defaulting to\n     * 5.\n     ",
      "child_ranges": [
        "(line 89,col 9)-(line 89,col 16)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYSplineRenderer.XYSplineRenderer(int)",
      "begin_line": 97,
      "end_line": 103,
      "comment": "\n     * Creates a new renderer with the specified precision.\n     *\n     * @param precision  the number of points between data items.\n     ",
      "child_ranges": [
        "(line 98,col 9)-(line 98,col 16)",
        "(line 99,col 9)-(line 101,col 9)",
        "(line 102,col 9)-(line 102,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYSplineRenderer.getPrecision()",
      "begin_line": 112,
      "end_line": 114,
      "comment": "\n     * Get the resolution of splines.\n     *\n     * @return Number of line segments between points.\n     *\n     * @see #setPrecision(int)\n     ",
      "child_ranges": [
        "(line 113,col 9)-(line 113,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYSplineRenderer.setPrecision(int)",
      "begin_line": 124,
      "end_line": 130,
      "comment": "\n     * Set the resolution of splines and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param p  number of line segments between points (must be \u003e 0).\n     *\n     * @see #getPrecision()\n     ",
      "child_ranges": [
        "(line 125,col 9)-(line 127,col 9)",
        "(line 128,col 9)-(line 128,col 27)",
        "(line 129,col 9)-(line 129,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYSplineRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 148,
      "end_line": 156,
      "comment": "\n     * Initialises the renderer.\n     * \u003cP\u003e\n     * This method will be called before the first item is rendered, giving the\n     * renderer an opportunity to initialise any state information it wants to\n     * maintain.  The renderer can do nothing if it chooses.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param data  the data.\n     * @param info  an optional info collection object to return data back to\n     *              the caller.\n     *\n     * @return The renderer state.\n     ",
      "child_ranges": [
        "(line 151,col 9)-(line 151,col 79)",
        "(line 152,col 9)-(line 152,col 48)",
        "(line 153,col 9)-(line 153,col 35)",
        "(line 154,col 9)-(line 154,col 38)",
        "(line 155,col 9)-(line 155,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYSplineRenderer.drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, int, boolean, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D)",
      "begin_line": 177,
      "end_line": 279,
      "comment": "\n     * Draws the item (first pass). This method draws the lines\n     * connecting the items. Instead of drawing separate lines,\n     * a GeneralPath is constructed and drawn at the end of\n     * the series painting.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param plot  the plot (can be used to obtain standard color information\n     *              etc).\n     * @param dataset  the dataset.\n     * @param pass  the pass.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param selected  is the item selected?\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataArea  the area within which the data is being drawn.\n     ",
      "child_ranges": [
        "(line 182,col 9)-(line 182,col 63)",
        "(line 183,col 9)-(line 183,col 62)",
        "(line 186,col 9)-(line 186,col 52)",
        "(line 187,col 9)-(line 187,col 52)",
        "(line 188,col 9)-(line 188,col 79)",
        "(line 189,col 9)-(line 189,col 78)",
        "(line 192,col 9)-(line 201,col 9)",
        "(line 202,col 9)-(line 278,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYSplineRenderer.solveTridiag(float[], float[], float[], float[], int)",
      "begin_line": 281,
      "end_line": 302,
      "comment": "",
      "child_ranges": [
        "(line 291,col 9)-(line 291,col 14)",
        "(line 293,col 9)-(line 297,col 9)",
        "(line 298,col 9)-(line 298,col 30)",
        "(line 299,col 9)-(line 301,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYSplineRenderer.equals(java.lang.Object)",
      "begin_line": 311,
      "end_line": 323,
      "comment": "\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n     *\n     * @return A boolean.\n     ",
      "child_ranges": [
        "(line 312,col 9)-(line 314,col 9)",
        "(line 315,col 9)-(line 317,col 9)",
        "(line 318,col 9)-(line 318,col 55)",
        "(line 319,col 9)-(line 321,col 9)",
        "(line 322,col 9)-(line 322,col 33)"
      ]
    },
    {
      "type": "class_interface",
      "name": "ControlPoint",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 328,
      "end_line": 369,
      "comment": "\n     * Represents a control point.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "x"
      ],
      "begin_line": 331,
      "end_line": 331,
      "comment": " The x-coordinate. "
    },
    {
      "type": "field",
      "varNames": [
        "y"
      ],
      "begin_line": 334,
      "end_line": 334,
      "comment": " The y-coordinate. "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYSplineRenderer.ControlPoint.ControlPoint(float, float)",
      "begin_line": 342,
      "end_line": 345,
      "comment": "\n         * Creates a new control point.\n         *\n         * @param x  the x-coordinate.\n         * @param y  the y-coordinate.\n         ",
      "child_ranges": [
        "(line 343,col 13)-(line 343,col 23)",
        "(line 344,col 13)-(line 344,col 23)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYSplineRenderer.ControlPoint.equals(java.lang.Object)",
      "begin_line": 354,
      "end_line": 367,
      "comment": "\n         * Tests this point for equality with an arbitrary object.\n         *\n         * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted.\n         *\n         * @return A boolean.\n         ",
      "child_ranges": [
        "(line 355,col 13)-(line 357,col 13)",
        "(line 358,col 13)-(line 360,col 13)",
        "(line 361,col 13)-(line 361,col 51)",
        "(line 362,col 13)-(line 364,col 13)",
        "(line 365,col 47)-(line 365,col 47)",
        "(line 366,col 13)-(line 366,col 24)"
      ]
    }
  ]
}