{
  "filepath": "/tmp/Chart-2b/source/org/jfree/chart/renderer/category/BarRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "BarRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 144,
      "end_line": 1456,
      "comment": "\r\n * A {@link CategoryItemRenderer} that draws individual data items as bars.\r\n * The example shown here is generated by the \u003ccode\u003eBarChartDemo1.java\u003c/code\u003e\r\n * program included in the JFreeChart Demo Collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/BarRendererSample.png\"\r\n * alt\u003d\"BarRendererSample.png\" /\u003e\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 148,
      "end_line": 148,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "DEFAULT_ITEM_MARGIN"
      ],
      "begin_line": 151,
      "end_line": 151,
      "comment": " The default item margin percentage. "
    },
    {
      "type": "field",
      "varNames": [
        "BAR_OUTLINE_WIDTH_THRESHOLD"
      ],
      "begin_line": 157,
      "end_line": 157,
      "comment": "\r\n     * Constant that controls the minimum width before a bar has an outline\r\n     * drawn.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "defaultBarPainter"
      ],
      "begin_line": 164,
      "end_line": 164,
      "comment": "\r\n     * The default bar painter assigned to each new instance of this renderer.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter()",
      "begin_line": 173,
      "end_line": 175,
      "comment": "\r\n     * Returns the default bar painter.\r\n     *\r\n     * @return The default bar painter.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 174,col 9)-(line 174,col 45)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setDefaultBarPainter(org.jfree.chart.renderer.category.BarPainter)",
      "begin_line": 184,
      "end_line": 189,
      "comment": "\r\n     * Sets the default bar painter.\r\n     *\r\n     * @param painter  the painter (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 185,col 9)-(line 187,col 9)",
        "(line 188,col 9)-(line 188,col 48)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "defaultShadowsVisible"
      ],
      "begin_line": 194,
      "end_line": 194,
      "comment": "\r\n     * The default value for the initialisation of the shadowsVisible flag.\r\n     "
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible()",
      "begin_line": 205,
      "end_line": 207,
      "comment": "\r\n     * Returns the default value for the \u003ccode\u003eshadowsVisible\u003c/code\u003e flag.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDefaultShadowsVisible(boolean)\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 206,col 9)-(line 206,col 49)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setDefaultShadowsVisible(boolean)",
      "begin_line": 218,
      "end_line": 220,
      "comment": "\r\n     * Sets the default value for the shadows visible flag.\r\n     *\r\n     * @param visible  the new value for the default.\r\n     *\r\n     * @see #getDefaultShadowsVisible()\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 219,col 9)-(line 219,col 52)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "itemMargin"
      ],
      "begin_line": 223,
      "end_line": 223,
      "comment": " The margin between items (bars) within a category. "
    },
    {
      "type": "field",
      "varNames": [
        "drawBarOutline"
      ],
      "begin_line": 226,
      "end_line": 226,
      "comment": " A flag that controls whether or not bar outlines are drawn. "
    },
    {
      "type": "field",
      "varNames": [
        "maximumBarWidth"
      ],
      "begin_line": 229,
      "end_line": 229,
      "comment": " The maximum bar width as a percentage of the available space. "
    },
    {
      "type": "field",
      "varNames": [
        "minimumBarLength"
      ],
      "begin_line": 232,
      "end_line": 232,
      "comment": " The minimum bar length (in Java2D units). "
    },
    {
      "type": "field",
      "varNames": [
        "gradientPaintTransformer"
      ],
      "begin_line": 238,
      "end_line": 238,
      "comment": "\r\n     * An optional class used to transform gradient paint objects to fit each\r\n     * bar.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "positiveItemLabelPositionFallback"
      ],
      "begin_line": 244,
      "end_line": 244,
      "comment": "\r\n     * The fallback position if a positive item label doesn\u0027t fit inside the\r\n     * bar.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "negativeItemLabelPositionFallback"
      ],
      "begin_line": 250,
      "end_line": 250,
      "comment": "\r\n     * The fallback position if a negative item label doesn\u0027t fit inside the\r\n     * bar.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "base"
      ],
      "begin_line": 253,
      "end_line": 253,
      "comment": " The base value for the bars (defaults to 0.0). "
    },
    {
      "type": "field",
      "varNames": [
        "includeBaseInRange"
      ],
      "begin_line": 259,
      "end_line": 259,
      "comment": "\r\n     * A flag that controls whether the base value is included in the range\r\n     * returned by the findRangeBounds() method.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "barPainter"
      ],
      "begin_line": 266,
      "end_line": 266,
      "comment": "\r\n     * The bar painter (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowsVisible"
      ],
      "begin_line": 273,
      "end_line": 273,
      "comment": "\r\n     * The flag that controls whether or not shadows are drawn for the bars.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowPaint"
      ],
      "begin_line": 280,
      "end_line": 280,
      "comment": "\r\n     * The shadow paint.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowXOffset"
      ],
      "begin_line": 287,
      "end_line": 287,
      "comment": "\r\n     * The x-offset for the shadow effect.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowYOffset"
      ],
      "begin_line": 294,
      "end_line": 294,
      "comment": "\r\n     * The y-offset for the shadow effect.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.BarRenderer()",
      "begin_line": 299,
      "end_line": 317,
      "comment": "\r\n     * Creates a new bar renderer with default settings.\r\n     ",
      "child_ranges": [
        "(line 300,col 9)-(line 300,col 16)",
        "(line 301,col 9)-(line 301,col 24)",
        "(line 302,col 9)-(line 302,col 39)",
        "(line 303,col 9)-(line 303,col 46)",
        "(line 304,col 9)-(line 304,col 36)",
        "(line 305,col 9)-(line 305,col 35)",
        "(line 307,col 9)-(line 307,col 54)",
        "(line 308,col 9)-(line 308,col 54)",
        "(line 309,col 9)-(line 309,col 79)",
        "(line 310,col 9)-(line 310,col 36)",
        "(line 311,col 9)-(line 311,col 73)",
        "(line 312,col 9)-(line 312,col 49)",
        "(line 313,col 9)-(line 313,col 57)",
        "(line 314,col 9)-(line 314,col 38)",
        "(line 315,col 9)-(line 315,col 33)",
        "(line 316,col 9)-(line 316,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getBase()",
      "begin_line": 327,
      "end_line": 329,
      "comment": "\r\n     * Returns the base value for the bars.  The default value is\r\n     * \u003ccode\u003e0.0\u003c/code\u003e.\r\n     *\r\n     * @return The base value for the bars.\r\n     *\r\n     * @see #setBase(double)\r\n     ",
      "child_ranges": [
        "(line 328,col 9)-(line 328,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setBase(double)",
      "begin_line": 339,
      "end_line": 342,
      "comment": "\r\n     * Sets the base value for the bars and sends a {@link RendererChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param base  the new base value.\r\n     *\r\n     * @see #getBase()\r\n     ",
      "child_ranges": [
        "(line 340,col 9)-(line 340,col 25)",
        "(line 341,col 9)-(line 341,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getItemMargin()",
      "begin_line": 352,
      "end_line": 354,
      "comment": "\r\n     * Returns the item margin as a percentage of the available space for all\r\n     * bars.\r\n     *\r\n     * @return The margin percentage (where 0.10 is ten percent).\r\n     *\r\n     * @see #setItemMargin(double)\r\n     ",
      "child_ranges": [
        "(line 353,col 9)-(line 353,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setItemMargin(double)",
      "begin_line": 366,
      "end_line": 369,
      "comment": "\r\n     * Sets the item margin and sends a {@link RendererChangeEvent} to all\r\n     * registered listeners.  The value is expressed as a percentage of the\r\n     * available width for plotting all the bars, with the resulting amount to\r\n     * be distributed between all the bars evenly.\r\n     *\r\n     * @param percent  the margin (where 0.10 is ten percent).\r\n     *\r\n     * @see #getItemMargin()\r\n     ",
      "child_ranges": [
        "(line 367,col 9)-(line 367,col 34)",
        "(line 368,col 9)-(line 368,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.isDrawBarOutline()",
      "begin_line": 378,
      "end_line": 380,
      "comment": "\r\n     * Returns a flag that controls whether or not bar outlines are drawn.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDrawBarOutline(boolean)\r\n     ",
      "child_ranges": [
        "(line 379,col 9)-(line 379,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setDrawBarOutline(boolean)",
      "begin_line": 390,
      "end_line": 393,
      "comment": "\r\n     * Sets the flag that controls whether or not bar outlines are drawn and\r\n     * sends a {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param draw  the flag.\r\n     *\r\n     * @see #isDrawBarOutline()\r\n     ",
      "child_ranges": [
        "(line 391,col 9)-(line 391,col 35)",
        "(line 392,col 9)-(line 392,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getMaximumBarWidth()",
      "begin_line": 403,
      "end_line": 405,
      "comment": "\r\n     * Returns the maximum bar width, as a percentage of the available drawing\r\n     * space.\r\n     *\r\n     * @return The maximum bar width.\r\n     *\r\n     * @see #setMaximumBarWidth(double)\r\n     ",
      "child_ranges": [
        "(line 404,col 9)-(line 404,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setMaximumBarWidth(double)",
      "begin_line": 416,
      "end_line": 419,
      "comment": "\r\n     * Sets the maximum bar width, which is specified as a percentage of the\r\n     * available space for all bars, and sends a {@link RendererChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param percent  the percent (where 0.05 is five percent).\r\n     *\r\n     * @see #getMaximumBarWidth()\r\n     ",
      "child_ranges": [
        "(line 417,col 9)-(line 417,col 39)",
        "(line 418,col 9)-(line 418,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getMinimumBarLength()",
      "begin_line": 429,
      "end_line": 431,
      "comment": "\r\n     * Returns the minimum bar length (in Java2D units).  The default value is\r\n     * 0.0.\r\n     *\r\n     * @return The minimum bar length.\r\n     *\r\n     * @see #setMinimumBarLength(double)\r\n     ",
      "child_ranges": [
        "(line 430,col 9)-(line 430,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setMinimumBarLength(double)",
      "begin_line": 447,
      "end_line": 453,
      "comment": "\r\n     * Sets the minimum bar length and sends a {@link RendererChangeEvent} to\r\n     * all registered listeners.  The minimum bar length is specified in Java2D\r\n     * units, and can be used to prevent bars that represent very small data\r\n     * values from disappearing when drawn on the screen.  Typically you would\r\n     * set this to (say) 0.5 or 1.0 Java 2D units.  Use this attribute with\r\n     * caution, however, because setting it to a non-zero value will\r\n     * artificially increase the length of bars representing small values,\r\n     * which may misrepresent your data.\r\n     *\r\n     * @param min  the minimum bar length (in Java2D units, must be \u003e\u003d 0.0).\r\n     *\r\n     * @see #getMinimumBarLength()\r\n     ",
      "child_ranges": [
        "(line 448,col 9)-(line 450,col 9)",
        "(line 451,col 9)-(line 451,col 36)",
        "(line 452,col 9)-(line 452,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getGradientPaintTransformer()",
      "begin_line": 463,
      "end_line": 465,
      "comment": "\r\n     * Returns the gradient paint transformer (an object used to transform\r\n     * gradient paint objects to fit each bar).\r\n     *\r\n     * @return A transformer (\u003ccode\u003enull\u003c/code\u003e possible).\r\n     *\r\n     * @see #setGradientPaintTransformer(GradientPaintTransformer)\r\n     ",
      "child_ranges": [
        "(line 464,col 9)-(line 464,col 45)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)",
      "begin_line": 475,
      "end_line": 479,
      "comment": "\r\n     * Sets the gradient paint transformer and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param transformer  the transformer (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getGradientPaintTransformer()\r\n     ",
      "child_ranges": [
        "(line 477,col 9)-(line 477,col 52)",
        "(line 478,col 9)-(line 478,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getPositiveItemLabelPositionFallback()",
      "begin_line": 489,
      "end_line": 491,
      "comment": "\r\n     * Returns the fallback position for positive item labels that don\u0027t fit\r\n     * within a bar.\r\n     *\r\n     * @return The fallback position (\u003ccode\u003enull\u003c/code\u003e possible).\r\n     *\r\n     * @see #setPositiveItemLabelPositionFallback(ItemLabelPosition)\r\n     ",
      "child_ranges": [
        "(line 490,col 9)-(line 490,col 54)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)",
      "begin_line": 502,
      "end_line": 506,
      "comment": "\r\n     * Sets the fallback position for positive item labels that don\u0027t fit\r\n     * within a bar, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param position  the position (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getPositiveItemLabelPositionFallback()\r\n     ",
      "child_ranges": [
        "(line 504,col 9)-(line 504,col 58)",
        "(line 505,col 9)-(line 505,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getNegativeItemLabelPositionFallback()",
      "begin_line": 516,
      "end_line": 518,
      "comment": "\r\n     * Returns the fallback position for negative item labels that don\u0027t fit\r\n     * within a bar.\r\n     *\r\n     * @return The fallback position (\u003ccode\u003enull\u003c/code\u003e possible).\r\n     *\r\n     * @see #setPositiveItemLabelPositionFallback(ItemLabelPosition)\r\n     ",
      "child_ranges": [
        "(line 517,col 9)-(line 517,col 54)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)",
      "begin_line": 529,
      "end_line": 533,
      "comment": "\r\n     * Sets the fallback position for negative item labels that don\u0027t fit\r\n     * within a bar, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param position  the position (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getNegativeItemLabelPositionFallback()\r\n     ",
      "child_ranges": [
        "(line 531,col 9)-(line 531,col 58)",
        "(line 532,col 9)-(line 532,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getIncludeBaseInRange()",
      "begin_line": 547,
      "end_line": 549,
      "comment": "\r\n     * Returns the flag that controls whether or not the base value for the\r\n     * bars is included in the range calculated by\r\n     * {@link #findRangeBounds(CategoryDataset)}.\r\n     *\r\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the base is included in the range, and\r\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise.\r\n     *\r\n     * @since 1.0.1\r\n     *\r\n     * @see #setIncludeBaseInRange(boolean)\r\n     ",
      "child_ranges": [
        "(line 548,col 9)-(line 548,col 39)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setIncludeBaseInRange(boolean)",
      "begin_line": 563,
      "end_line": 568,
      "comment": "\r\n     * Sets the flag that controls whether or not the base value for the bars\r\n     * is included in the range calculated by\r\n     * {@link #findRangeBounds(CategoryDataset)}.  If the flag is changed,\r\n     * a {@link RendererChangeEvent} is sent to all registered listeners.\r\n     *\r\n     * @param include  the new value for the flag.\r\n     *\r\n     * @since 1.0.1\r\n     *\r\n     * @see #getIncludeBaseInRange()\r\n     ",
      "child_ranges": [
        "(line 564,col 9)-(line 567,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getBarPainter()",
      "begin_line": 579,
      "end_line": 581,
      "comment": "\r\n     * Returns the bar painter.\r\n     *\r\n     * @return The bar painter (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setBarPainter(BarPainter)\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 580,col 9)-(line 580,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setBarPainter(org.jfree.chart.renderer.category.BarPainter)",
      "begin_line": 593,
      "end_line": 599,
      "comment": "\r\n     * Sets the bar painter for this renderer and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param painter  the painter (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getBarPainter()\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 594,col 9)-(line 596,col 9)",
        "(line 597,col 9)-(line 597,col 34)",
        "(line 598,col 9)-(line 598,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getShadowsVisible()",
      "begin_line": 609,
      "end_line": 611,
      "comment": "\r\n     * Returns the flag that controls whether or not shadows are drawn for\r\n     * the bars.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 610,col 9)-(line 610,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setShadowVisible(boolean)",
      "begin_line": 621,
      "end_line": 624,
      "comment": "\r\n     * Sets the flag that controls whether or not shadows are\r\n     * drawn by the renderer.\r\n     *\r\n     * @param visible  the new flag value.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 622,col 9)-(line 622,col 38)",
        "(line 623,col 9)-(line 623,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getShadowPaint()",
      "begin_line": 635,
      "end_line": 637,
      "comment": "\r\n     * Returns the shadow paint.\r\n     *\r\n     * @return The shadow paint.\r\n     *\r\n     * @see #setShadowPaint(Paint)\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 636,col 9)-(line 636,col 32)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setShadowPaint(java.awt.Paint)",
      "begin_line": 649,
      "end_line": 655,
      "comment": "\r\n     * Sets the shadow paint and sends a {@link RendererChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getShadowPaint()\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 650,col 9)-(line 652,col 9)",
        "(line 653,col 9)-(line 653,col 33)",
        "(line 654,col 9)-(line 654,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getShadowXOffset()",
      "begin_line": 664,
      "end_line": 666,
      "comment": "\r\n     * Returns the shadow x-offset.\r\n     *\r\n     * @return The shadow x-offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 665,col 9)-(line 665,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setShadowXOffset(double)",
      "begin_line": 676,
      "end_line": 679,
      "comment": "\r\n     * Sets the x-offset for the bar shadow and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param offset  the offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 677,col 9)-(line 677,col 36)",
        "(line 678,col 9)-(line 678,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getShadowYOffset()",
      "begin_line": 688,
      "end_line": 690,
      "comment": "\r\n     * Returns the shadow y-offset.\r\n     *\r\n     * @return The shadow y-offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 689,col 9)-(line 689,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setShadowYOffset(double)",
      "begin_line": 700,
      "end_line": 703,
      "comment": "\r\n     * Sets the y-offset for the bar shadow and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param offset  the offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 701,col 9)-(line 701,col 36)",
        "(line 702,col 9)-(line 702,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 718,
      "end_line": 728,
      "comment": "\r\n     * Initialises the renderer and returns a state object that will be passed\r\n     * to subsequent calls to the drawItem method.  This method gets called\r\n     * once at the start of the process of drawing a chart.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area in which the data is to be plotted.\r\n     * @param plot  the plot.\r\n     * @param dataset  the dataset.\r\n     * @param info  collects chart rendering information for return to caller.\r\n     *\r\n     * @return The renderer state.\r\n     ",
      "child_ranges": [
        "(line 722,col 9)-(line 723,col 31)",
        "(line 726,col 9)-(line 726,col 58)",
        "(line 727,col 9)-(line 727,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateBarWidth(org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D, org.jfree.data.category.CategoryDataset, org.jfree.chart.renderer.category.CategoryItemRendererState)",
      "begin_line": 738,
      "end_line": 775,
      "comment": "\r\n     * Calculates the bar width and stores it in the renderer state.\r\n     *\r\n     * @param plot  the plot.\r\n     * @param dataArea  the data area.\r\n     * @param dataset  the dataset.\r\n     * @param state  the renderer state.\r\n     ",
      "child_ranges": [
        "(line 743,col 9)-(line 743,col 63)",
        "(line 744,col 9)-(line 774,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateBarW0(org.jfree.chart.plot.CategoryPlot, org.jfree.chart.plot.PlotOrientation, java.awt.geom.Rectangle2D, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.renderer.category.CategoryItemRendererState, int, int)",
      "begin_line": 792,
      "end_line": 826,
      "comment": "\r\n     * Calculates the coordinate of the first \"side\" of a bar.  This will be\r\n     * the minimum x-coordinate for a vertical bar, and the minimum\r\n     * y-coordinate for a horizontal bar.\r\n     *\r\n     * @param plot  the plot.\r\n     * @param orientation  the plot orientation.\r\n     * @param dataArea  the data area.\r\n     * @param domainAxis  the domain axis.\r\n     * @param state  the renderer state (has the bar width precalculated).\r\n     * @param row  the row index.\r\n     * @param column  the column index.\r\n     *\r\n     * @return The coordinate.\r\n     ",
      "child_ranges": [
        "(line 800,col 9)-(line 800,col 27)",
        "(line 801,col 9)-(line 806,col 9)",
        "(line 807,col 9)-(line 808,col 52)",
        "(line 809,col 9)-(line 810,col 64)",
        "(line 811,col 9)-(line 811,col 45)",
        "(line 812,col 9)-(line 824,col 9)",
        "(line 825,col 9)-(line 825,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateBarL0L1(double, double, double)",
      "begin_line": 838,
      "end_line": 850,
      "comment": "\r\n     * Calculates the coordinates for the length of a single bar.\r\n     *\r\n     * @param value  the value represented by the bar.\r\n     * @param min  the minimum data value that would be visible.\r\n     * @param max  the maximum data value that would be visible.\r\n     *\r\n     * @return The coordinates for each end of the bar (or \u003ccode\u003enull\u003c/code\u003e if\r\n     *         the bar is not visible for the current axis range).\r\n     ",
      "child_ranges": [
        "(line 839,col 9)-(line 839,col 51)",
        "(line 840,col 9)-(line 840,col 52)",
        "(line 841,col 9)-(line 843,col 9)",
        "(line 844,col 9)-(line 846,col 9)",
        "(line 847,col 9)-(line 847,col 39)",
        "(line 848,col 9)-(line 848,col 41)",
        "(line 849,col 9)-(line 849,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset, boolean)",
      "begin_line": 864,
      "end_line": 876,
      "comment": "\r\n     * Returns the range of values the renderer requires to display all the\r\n     * items from the specified dataset.  This takes into account the range\r\n     * of values in the dataset, plus the flag that determines whether or not\r\n     * the base value for the bars should be included in the range.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     * @param includeInterval  include the interval if the dataset has one?\r\n     *\r\n     * @return The range (or \u003ccode\u003enull\u003c/code\u003e if the dataset is\r\n     *         \u003ccode\u003enull\u003c/code\u003e or empty).\r\n     ",
      "child_ranges": [
        "(line 866,col 9)-(line 868,col 9)",
        "(line 869,col 9)-(line 869,col 71)",
        "(line 870,col 9)-(line 874,col 9)",
        "(line 875,col 9)-(line 875,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getLegendItem(int, int)",
      "begin_line": 886,
      "end_line": 934,
      "comment": "\r\n     * Returns a legend item for a series.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The legend item (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     ",
      "child_ranges": [
        "(line 888,col 9)-(line 888,col 36)",
        "(line 889,col 9)-(line 891,col 9)",
        "(line 894,col 9)-(line 896,col 9)",
        "(line 898,col 9)-(line 898,col 62)",
        "(line 899,col 9)-(line 900,col 24)",
        "(line 901,col 9)-(line 901,col 35)",
        "(line 902,col 9)-(line 902,col 34)",
        "(line 903,col 9)-(line 906,col 9)",
        "(line 907,col 9)-(line 907,col 30)",
        "(line 908,col 9)-(line 911,col 9)",
        "(line 912,col 9)-(line 912,col 48)",
        "(line 913,col 9)-(line 913,col 48)",
        "(line 914,col 9)-(line 914,col 62)",
        "(line 915,col 9)-(line 915,col 65)",
        "(line 917,col 9)-(line 920,col 52)",
        "(line 921,col 9)-(line 921,col 58)",
        "(line 922,col 9)-(line 922,col 57)",
        "(line 923,col 9)-(line 925,col 9)",
        "(line 926,col 9)-(line 926,col 35)",
        "(line 927,col 9)-(line 927,col 45)",
        "(line 928,col 9)-(line 928,col 55)",
        "(line 929,col 9)-(line 929,col 38)",
        "(line 930,col 9)-(line 932,col 9)",
        "(line 933,col 9)-(line 933,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, boolean, int)",
      "begin_line": 951,
      "end_line": 1054,
      "comment": "\r\n     * Draws the bar for a single (series, category) data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the data area.\r\n     * @param plot  the plot.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     * @param selected  is the item selected?\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 958,col 9)-(line 958,col 58)",
        "(line 959,col 9)-(line 961,col 9)",
        "(line 963,col 9)-(line 963,col 57)",
        "(line 964,col 9)-(line 966,col 9)",
        "(line 968,col 9)-(line 968,col 53)",
        "(line 969,col 9)-(line 969,col 60)",
        "(line 970,col 9)-(line 971,col 43)",
        "(line 972,col 9)-(line 973,col 43)",
        "(line 974,col 9)-(line 976,col 9)",
        "(line 978,col 9)-(line 978,col 53)",
        "(line 979,col 9)-(line 979,col 77)",
        "(line 980,col 9)-(line 980,col 77)",
        "(line 989,col 9)-(line 989,col 48)",
        "(line 990,col 9)-(line 990,col 50)",
        "(line 991,col 9)-(line 991,col 50)",
        "(line 992,col 9)-(line 992,col 55)",
        "(line 993,col 9)-(line 993,col 34)",
        "(line 994,col 9)-(line 996,col 9)",
        "(line 997,col 9)-(line 997,col 30)",
        "(line 998,col 9)-(line 998,col 30)",
        "(line 999,col 9)-(line 1016,col 9)",
        "(line 1019,col 9)-(line 1019,col 31)",
        "(line 1020,col 9)-(line 1027,col 9)",
        "(line 1028,col 9)-(line 1031,col 9)",
        "(line 1032,col 9)-(line 1033,col 25)",
        "(line 1035,col 9)-(line 1036,col 34)",
        "(line 1037,col 9)-(line 1040,col 9)",
        "(line 1043,col 9)-(line 1043,col 49)",
        "(line 1044,col 9)-(line 1046,col 57)",
        "(line 1049,col 9)-(line 1049,col 64)",
        "(line 1050,col 9)-(line 1052,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateSeriesWidth(double, org.jfree.chart.axis.CategoryAxis, int, int)",
      "begin_line": 1066,
      "end_line": 1074,
      "comment": "\r\n     * Calculates the available space for each series.\r\n     *\r\n     * @param space  the space along the entire axis (in Java2D units).\r\n     * @param axis  the category axis.\r\n     * @param categories  the number of categories.\r\n     * @param series  the number of series.\r\n     *\r\n     * @return The width of one series.\r\n     ",
      "child_ranges": [
        "(line 1068,col 9)-(line 1069,col 52)",
        "(line 1070,col 9)-(line 1072,col 9)",
        "(line 1073,col 9)-(line 1073,col 56)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.drawItemLabelForBar(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, org.jfree.data.category.CategoryDataset, int, int, boolean, org.jfree.chart.labels.CategoryItemLabelGenerator, java.awt.geom.Rectangle2D, boolean)",
      "begin_line": 1093,
      "end_line": 1151,
      "comment": "\r\n     * Draws an item label.  This method is used for bars instead of\r\n     * {@link #drawItemLabel()} so that the bar can be used to calculate the\r\n     * label anchor point.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataset  the dataset.\r\n     * @param row  the row.\r\n     * @param column  the column.\r\n     * @param selected  is the item selected?\r\n     * @param plot  the plot.\r\n     * @param generator  the label generator.\r\n     * @param bar  the bar.\r\n     * @param negative  a flag indicating a negative value.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 1098,col 9)-(line 1098,col 69)",
        "(line 1099,col 9)-(line 1101,col 9)",
        "(line 1103,col 9)-(line 1103,col 65)",
        "(line 1104,col 9)-(line 1104,col 30)",
        "(line 1105,col 9)-(line 1105,col 63)",
        "(line 1106,col 9)-(line 1106,col 27)",
        "(line 1109,col 9)-(line 1109,col 42)",
        "(line 1110,col 9)-(line 1115,col 9)",
        "(line 1118,col 9)-(line 1119,col 75)",
        "(line 1121,col 9)-(line 1143,col 9)",
        "(line 1145,col 9)-(line 1150,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation)",
      "begin_line": 1162,
      "end_line": 1262,
      "comment": "\r\n     * Calculates the item label anchor point.\r\n     *\r\n     * @param anchor  the anchor.\r\n     * @param bar  the bar.\r\n     * @param orientation  the plot orientation.\r\n     *\r\n     * @return The anchor point.\r\n     ",
      "child_ranges": [
        "(line 1166,col 9)-(line 1166,col 30)",
        "(line 1167,col 9)-(line 1167,col 51)",
        "(line 1168,col 9)-(line 1168,col 40)",
        "(line 1169,col 9)-(line 1169,col 31)",
        "(line 1170,col 9)-(line 1170,col 40)",
        "(line 1171,col 9)-(line 1171,col 37)",
        "(line 1172,col 9)-(line 1172,col 43)",
        "(line 1173,col 9)-(line 1173,col 34)",
        "(line 1174,col 9)-(line 1174,col 43)",
        "(line 1176,col 9)-(line 1176,col 43)",
        "(line 1177,col 9)-(line 1177,col 34)",
        "(line 1178,col 9)-(line 1178,col 43)",
        "(line 1179,col 9)-(line 1179,col 37)",
        "(line 1180,col 9)-(line 1180,col 43)",
        "(line 1181,col 9)-(line 1181,col 34)",
        "(line 1182,col 9)-(line 1182,col 43)",
        "(line 1184,col 9)-(line 1258,col 9)",
        "(line 1260,col 9)-(line 1260,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)",
      "begin_line": 1271,
      "end_line": 1285,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified anchor point is inside a bar.\r\n     *\r\n     * @param anchor  the anchor point.\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 1272,col 9)-(line 1284,col 53)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.equals(java.lang.Object)",
      "begin_line": 1294,
      "end_line": 1345,
      "comment": "\r\n     * Tests this instance for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 1295,col 9)-(line 1297,col 9)",
        "(line 1298,col 9)-(line 1300,col 9)",
        "(line 1301,col 9)-(line 1301,col 45)",
        "(line 1302,col 9)-(line 1304,col 9)",
        "(line 1305,col 9)-(line 1307,col 9)",
        "(line 1308,col 9)-(line 1310,col 9)",
        "(line 1311,col 9)-(line 1313,col 9)",
        "(line 1314,col 9)-(line 1316,col 9)",
        "(line 1317,col 9)-(line 1320,col 9)",
        "(line 1321,col 9)-(line 1324,col 9)",
        "(line 1325,col 9)-(line 1328,col 9)",
        "(line 1329,col 9)-(line 1331,col 9)",
        "(line 1332,col 9)-(line 1334,col 9)",
        "(line 1335,col 9)-(line 1337,col 9)",
        "(line 1338,col 9)-(line 1340,col 9)",
        "(line 1341,col 9)-(line 1343,col 9)",
        "(line 1344,col 9)-(line 1344,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 1354,
      "end_line": 1357,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
      "child_ranges": [
        "(line 1355,col 9)-(line 1355,col 36)",
        "(line 1356,col 9)-(line 1356,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.readObject(java.io.ObjectInputStream)",
      "begin_line": 1367,
      "end_line": 1371,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
      "child_ranges": [
        "(line 1369,col 9)-(line 1369,col 35)",
        "(line 1370,col 9)-(line 1370,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.createHotSpotBounds(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, boolean, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D)",
      "begin_line": 1373,
      "end_line": 1454,
      "comment": "",
      "child_ranges": [
        "(line 1380,col 9)-(line 1380,col 58)",
        "(line 1381,col 9)-(line 1383,col 9)",
        "(line 1384,col 9)-(line 1386,col 9)",
        "(line 1388,col 9)-(line 1388,col 57)",
        "(line 1389,col 9)-(line 1391,col 9)",
        "(line 1393,col 9)-(line 1393,col 53)",
        "(line 1394,col 9)-(line 1394,col 60)",
        "(line 1395,col 9)-(line 1396,col 43)",
        "(line 1397,col 9)-(line 1398,col 43)",
        "(line 1399,col 9)-(line 1401,col 9)",
        "(line 1403,col 9)-(line 1403,col 53)",
        "(line 1404,col 9)-(line 1404,col 77)",
        "(line 1405,col 9)-(line 1405,col 77)",
        "(line 1414,col 9)-(line 1414,col 48)",
        "(line 1415,col 9)-(line 1415,col 50)",
        "(line 1416,col 9)-(line 1416,col 50)",
        "(line 1417,col 9)-(line 1417,col 55)",
        "(line 1418,col 9)-(line 1418,col 34)",
        "(line 1419,col 9)-(line 1421,col 9)",
        "(line 1422,col 9)-(line 1422,col 30)",
        "(line 1423,col 9)-(line 1423,col 30)",
        "(line 1424,col 9)-(line 1441,col 9)",
        "(line 1444,col 9)-(line 1444,col 31)",
        "(line 1445,col 9)-(line 1452,col 9)",
        "(line 1453,col 9)-(line 1453,col 19)"
      ]
    }
  ]
}