{
  "filepath": "/tmp/Chart-2b/source/org/jfree/chart/plot/PiePlot.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "PiePlot",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.plot.Plot",
        "org.jfree.chart.plot.Selectable",
        "java.lang.Cloneable",
        "java.io.Serializable"
      ],
      "begin_line": 265,
      "end_line": 3711,
      "comment": "\r\n * A plot that displays data in the form of a pie chart, using data from any\r\n * class that implements the {@link PieDataset} interface.\r\n * The example shown here is generated by the \u003ccode\u003ePieChartDemo2.java\u003c/code\u003e\r\n * program included in the JFreeChart Demo Collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../images/PiePlotSample.png\"\r\n * alt\u003d\"PiePlotSample.png\" /\u003e\r\n * \u003cP\u003e\r\n * Special notes:\r\n * \u003col\u003e\r\n * \u003cli\u003ethe default starting point is 12 o\u0027clock and the pie sections proceed\r\n * in a clockwise direction, but these settings can be changed;\u003c/li\u003e\r\n * \u003cli\u003enegative values in the dataset are ignored;\u003c/li\u003e\r\n * \u003cli\u003ethere are utility methods for creating a {@link PieDataset} from a\r\n * {@link CategoryDataset};\u003c/li\u003e\r\n * \u003c/ol\u003e\r\n *\r\n * @see Plot\r\n * @see PieDataset\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 269,
      "end_line": 269,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "DEFAULT_INTERIOR_GAP"
      ],
      "begin_line": 272,
      "end_line": 272,
      "comment": " The default interior gap. "
    },
    {
      "type": "field",
      "varNames": [
        "MAX_INTERIOR_GAP"
      ],
      "begin_line": 275,
      "end_line": 275,
      "comment": " The maximum interior gap (currently 40%). "
    },
    {
      "type": "field",
      "varNames": [
        "DEFAULT_START_ANGLE"
      ],
      "begin_line": 278,
      "end_line": 278,
      "comment": " The default starting angle for the pie chart. "
    },
    {
      "type": "field",
      "varNames": [
        "DEFAULT_LABEL_FONT"
      ],
      "begin_line": 281,
      "end_line": 282,
      "comment": " The default section label font. "
    },
    {
      "type": "field",
      "varNames": [
        "DEFAULT_LABEL_PAINT"
      ],
      "begin_line": 285,
      "end_line": 285,
      "comment": " The default section label paint. "
    },
    {
      "type": "field",
      "varNames": [
        "DEFAULT_LABEL_BACKGROUND_PAINT"
      ],
      "begin_line": 288,
      "end_line": 289,
      "comment": " The default section label background paint. "
    },
    {
      "type": "field",
      "varNames": [
        "DEFAULT_LABEL_OUTLINE_PAINT"
      ],
      "begin_line": 292,
      "end_line": 292,
      "comment": " The default section label outline paint. "
    },
    {
      "type": "field",
      "varNames": [
        "DEFAULT_LABEL_OUTLINE_STROKE"
      ],
      "begin_line": 295,
      "end_line": 296,
      "comment": " The default section label outline stroke. "
    },
    {
      "type": "field",
      "varNames": [
        "DEFAULT_LABEL_SHADOW_PAINT"
      ],
      "begin_line": 299,
      "end_line": 300,
      "comment": " The default section label shadow paint. "
    },
    {
      "type": "field",
      "varNames": [
        "DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW"
      ],
      "begin_line": 303,
      "end_line": 303,
      "comment": " The default minimum arc angle to draw. "
    },
    {
      "type": "field",
      "varNames": [
        "dataset"
      ],
      "begin_line": 306,
      "end_line": 306,
      "comment": " The dataset for the pie chart. "
    },
    {
      "type": "field",
      "varNames": [
        "pieIndex"
      ],
      "begin_line": 309,
      "end_line": 309,
      "comment": " The pie index (used by the {@link MultiplePiePlot} class). "
    },
    {
      "type": "field",
      "varNames": [
        "interiorGap"
      ],
      "begin_line": 315,
      "end_line": 315,
      "comment": "\r\n     * The amount of space left around the outside of the pie plot, expressed\r\n     * as a percentage of the plot area width and height.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "circular"
      ],
      "begin_line": 318,
      "end_line": 318,
      "comment": " Flag determining whether to draw an ellipse or a perfect circle. "
    },
    {
      "type": "field",
      "varNames": [
        "startAngle"
      ],
      "begin_line": 321,
      "end_line": 321,
      "comment": " The starting angle. "
    },
    {
      "type": "field",
      "varNames": [
        "direction"
      ],
      "begin_line": 324,
      "end_line": 324,
      "comment": " The direction for the pie segments. "
    },
    {
      "type": "field",
      "varNames": [
        "sectionPaintMap"
      ],
      "begin_line": 327,
      "end_line": 327,
      "comment": " The section paint map. "
    },
    {
      "type": "field",
      "varNames": [
        "baseSectionPaint"
      ],
      "begin_line": 330,
      "end_line": 330,
      "comment": " The base section paint (fallback). "
    },
    {
      "type": "field",
      "varNames": [
        "autoPopulateSectionPaint"
      ],
      "begin_line": 338,
      "end_line": 338,
      "comment": "\r\n     * A flag that controls whether or not the section paint is auto-populated\r\n     * from the drawing supplier.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "sectionOutlinesVisible"
      ],
      "begin_line": 344,
      "end_line": 344,
      "comment": "\r\n     * A flag that controls whether or not an outline is drawn for each\r\n     * section in the plot.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "sectionOutlinePaintMap"
      ],
      "begin_line": 347,
      "end_line": 347,
      "comment": " The section outline paint map. "
    },
    {
      "type": "field",
      "varNames": [
        "baseSectionOutlinePaint"
      ],
      "begin_line": 350,
      "end_line": 350,
      "comment": " The base section outline paint (fallback). "
    },
    {
      "type": "field",
      "varNames": [
        "autoPopulateSectionOutlinePaint"
      ],
      "begin_line": 358,
      "end_line": 358,
      "comment": "\r\n     * A flag that controls whether or not the section outline paint is\r\n     * auto-populated from the drawing supplier.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "sectionOutlineStrokeMap"
      ],
      "begin_line": 361,
      "end_line": 361,
      "comment": " The section outline stroke map. "
    },
    {
      "type": "field",
      "varNames": [
        "baseSectionOutlineStroke"
      ],
      "begin_line": 364,
      "end_line": 364,
      "comment": " The base section outline stroke (fallback). "
    },
    {
      "type": "field",
      "varNames": [
        "autoPopulateSectionOutlineStroke"
      ],
      "begin_line": 372,
      "end_line": 372,
      "comment": "\r\n     * A flag that controls whether or not the section outline stroke is\r\n     * auto-populated from the drawing supplier.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowPaint"
      ],
      "begin_line": 375,
      "end_line": 375,
      "comment": " The shadow paint. "
    },
    {
      "type": "field",
      "varNames": [
        "shadowXOffset"
      ],
      "begin_line": 378,
      "end_line": 378,
      "comment": " The x-offset for the shadow effect. "
    },
    {
      "type": "field",
      "varNames": [
        "shadowYOffset"
      ],
      "begin_line": 381,
      "end_line": 381,
      "comment": " The y-offset for the shadow effect. "
    },
    {
      "type": "field",
      "varNames": [
        "explodePercentages"
      ],
      "begin_line": 384,
      "end_line": 384,
      "comment": " The percentage amount to explode each pie section. "
    },
    {
      "type": "field",
      "varNames": [
        "labelGenerator"
      ],
      "begin_line": 387,
      "end_line": 387,
      "comment": " The section label generator. "
    },
    {
      "type": "field",
      "varNames": [
        "labelFont"
      ],
      "begin_line": 390,
      "end_line": 390,
      "comment": " The font used to display the section labels. "
    },
    {
      "type": "field",
      "varNames": [
        "labelPaint"
      ],
      "begin_line": 393,
      "end_line": 393,
      "comment": " The color used to draw the section labels. "
    },
    {
      "type": "field",
      "varNames": [
        "labelBackgroundPaint"
      ],
      "begin_line": 399,
      "end_line": 399,
      "comment": "\r\n     * The color used to draw the background of the section labels.  If this\r\n     * is \u003ccode\u003enull\u003c/code\u003e, the background is not filled.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "labelOutlinePaint"
      ],
      "begin_line": 405,
      "end_line": 405,
      "comment": "\r\n     * The paint used to draw the outline of the section labels\r\n     * (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "labelOutlineStroke"
      ],
      "begin_line": 411,
      "end_line": 411,
      "comment": "\r\n     * The stroke used to draw the outline of the section labels\r\n     * (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "labelShadowPaint"
      ],
      "begin_line": 417,
      "end_line": 417,
      "comment": "\r\n     * The paint used to draw the shadow for the section labels\r\n     * (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "simpleLabels"
      ],
      "begin_line": 424,
      "end_line": 424,
      "comment": "\r\n     * A flag that controls whether simple or extended labels are used.\r\n     *\r\n     * @since 1.0.7\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "labelPadding"
      ],
      "begin_line": 432,
      "end_line": 432,
      "comment": "\r\n     * The padding between the labels and the label outlines.  This is not\r\n     * allowed to be \u003ccode\u003enull\u003c/code\u003e.\r\n     *\r\n     * @since 1.0.7\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "simpleLabelOffset"
      ],
      "begin_line": 439,
      "end_line": 439,
      "comment": "\r\n     * The simple label offset.\r\n     *\r\n     * @since 1.0.7\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "maximumLabelWidth"
      ],
      "begin_line": 442,
      "end_line": 442,
      "comment": " The maximum label width as a percentage of the plot width. "
    },
    {
      "type": "field",
      "varNames": [
        "labelGap"
      ],
      "begin_line": 448,
      "end_line": 448,
      "comment": "\r\n     * The gap between the labels and the link corner, as a percentage of the\r\n     * plot width.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "labelLinksVisible"
      ],
      "begin_line": 451,
      "end_line": 451,
      "comment": " A flag that controls whether or not the label links are drawn. "
    },
    {
      "type": "field",
      "varNames": [
        "labelLinkStyle"
      ],
      "begin_line": 458,
      "end_line": 458,
      "comment": "\r\n     * The label link style.\r\n     *\r\n     * @since 1.0.10\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "labelLinkMargin"
      ],
      "begin_line": 461,
      "end_line": 461,
      "comment": " The link margin. "
    },
    {
      "type": "field",
      "varNames": [
        "labelLinkPaint"
      ],
      "begin_line": 464,
      "end_line": 464,
      "comment": " The paint used for the label linking lines. "
    },
    {
      "type": "field",
      "varNames": [
        "labelLinkStroke"
      ],
      "begin_line": 467,
      "end_line": 467,
      "comment": " The stroke used for the label linking lines. "
    },
    {
      "type": "field",
      "varNames": [
        "labelDistributor"
      ],
      "begin_line": 474,
      "end_line": 474,
      "comment": "\r\n     * The pie section label distributor.\r\n     *\r\n     * @since 1.0.6\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "toolTipGenerator"
      ],
      "begin_line": 477,
      "end_line": 477,
      "comment": " The tooltip generator. "
    },
    {
      "type": "field",
      "varNames": [
        "urlGenerator"
      ],
      "begin_line": 480,
      "end_line": 480,
      "comment": " The URL generator. "
    },
    {
      "type": "field",
      "varNames": [
        "legendLabelGenerator"
      ],
      "begin_line": 483,
      "end_line": 483,
      "comment": " The legend label generator. "
    },
    {
      "type": "field",
      "varNames": [
        "legendLabelToolTipGenerator"
      ],
      "begin_line": 486,
      "end_line": 486,
      "comment": " A tool tip generator for the legend. "
    },
    {
      "type": "field",
      "varNames": [
        "legendLabelURLGenerator"
      ],
      "begin_line": 493,
      "end_line": 493,
      "comment": "\r\n     * A URL generator for the legend items (optional).\r\n     *\r\n     * @since 1.0.4.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "ignoreNullValues"
      ],
      "begin_line": 498,
      "end_line": 498,
      "comment": "\r\n     * A flag that controls whether \u003ccode\u003enull\u003c/code\u003e values are ignored.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "ignoreZeroValues"
      ],
      "begin_line": 503,
      "end_line": 503,
      "comment": "\r\n     * A flag that controls whether zero values are ignored.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "legendItemShape"
      ],
      "begin_line": 506,
      "end_line": 506,
      "comment": " The legend item shape. "
    },
    {
      "type": "field",
      "varNames": [
        "minimumArcAngleToDraw"
      ],
      "begin_line": 519,
      "end_line": 519,
      "comment": "\r\n     * The smallest arc angle that will get drawn (this is to avoid a bug in\r\n     * various Java implementations that causes the JVM to crash).  See this\r\n     * link for details:\r\n     *\r\n     * http://www.jfree.org/phpBB2/viewtopic.php?t\u003d2707\r\n     *\r\n     * ...and this bug report in the Java Bug Parade:\r\n     *\r\n     * http://developer.java.sun.com/developer/bugParade/bugs/4836495.html\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowGenerator"
      ],
      "begin_line": 526,
      "end_line": 526,
      "comment": "\r\n     * The shadow generator for the plot (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @since 1.0.14\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "localizationResources"
      ],
      "begin_line": 529,
      "end_line": 531,
      "comment": " The resourceBundle for the localization. "
    },
    {
      "type": "field",
      "varNames": [
        "selectedItemAttributes"
      ],
      "begin_line": 538,
      "end_line": 538,
      "comment": "\r\n     * Override attributes for selected items.\r\n     *\r\n     * @since 1.2.0\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "DEBUG_DRAW_INTERIOR"
      ],
      "begin_line": 545,
      "end_line": 545,
      "comment": "\r\n     * This debug flag controls whether or not an outline is drawn showing the\r\n     * interior of the plot region.  This is drawn as a lightGray rectangle\r\n     * showing the padding provided by the \u0027interiorGap\u0027 setting.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "DEBUG_DRAW_LINK_AREA"
      ],
      "begin_line": 552,
      "end_line": 552,
      "comment": "\r\n     * This debug flag controls whether or not an outline is drawn showing the\r\n     * link area (in blue) and link ellipse (in yellow).  This controls where\r\n     * the label links have \u0027elbow\u0027 points.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "DEBUG_DRAW_PIE_AREA"
      ],
      "begin_line": 558,
      "end_line": 558,
      "comment": "\r\n     * This debug flag controls whether or not an outline is drawn showing\r\n     * the pie area (in green).\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.plot.PiePlot.PiePlot()",
      "begin_line": 563,
      "end_line": 565,
      "comment": "\r\n     * Creates a new plot.  The dataset is initially set to \u003ccode\u003enull\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 564,col 9)-(line 564,col 19)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.plot.PiePlot.PiePlot(org.jfree.data.pie.PieDataset)",
      "begin_line": 572,
      "end_line": 628,
      "comment": "\r\n     * Creates a plot that will draw a pie chart for the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     ",
      "child_ranges": [
        "(line 573,col 9)-(line 573,col 16)",
        "(line 574,col 9)-(line 574,col 31)",
        "(line 575,col 9)-(line 577,col 9)",
        "(line 578,col 9)-(line 578,col 26)",
        "(line 580,col 9)-(line 580,col 48)",
        "(line 581,col 9)-(line 581,col 29)",
        "(line 582,col 9)-(line 582,col 46)",
        "(line 583,col 9)-(line 583,col 44)",
        "(line 584,col 9)-(line 584,col 71)",
        "(line 586,col 9)-(line 586,col 46)",
        "(line 587,col 9)-(line 587,col 43)",
        "(line 588,col 9)-(line 588,col 45)",
        "(line 590,col 9)-(line 590,col 43)",
        "(line 591,col 9)-(line 591,col 53)",
        "(line 592,col 9)-(line 592,col 61)",
        "(line 593,col 9)-(line 593,col 53)",
        "(line 595,col 9)-(line 595,col 55)",
        "(line 596,col 9)-(line 596,col 63)",
        "(line 597,col 9)-(line 597,col 54)",
        "(line 599,col 9)-(line 599,col 48)",
        "(line 601,col 9)-(line 601,col 69)",
        "(line 602,col 9)-(line 602,col 44)",
        "(line 603,col 9)-(line 603,col 46)",
        "(line 604,col 9)-(line 604,col 67)",
        "(line 605,col 9)-(line 605,col 61)",
        "(line 606,col 9)-(line 606,col 63)",
        "(line 607,col 9)-(line 607,col 59)",
        "(line 608,col 9)-(line 608,col 38)",
        "(line 609,col 9)-(line 609,col 59)",
        "(line 611,col 9)-(line 611,col 34)",
        "(line 612,col 9)-(line 613,col 34)",
        "(line 614,col 9)-(line 614,col 60)",
        "(line 616,col 9)-(line 616,col 37)",
        "(line 617,col 9)-(line 617,col 33)",
        "(line 618,col 9)-(line 618,col 75)",
        "(line 619,col 9)-(line 619,col 48)",
        "(line 620,col 9)-(line 620,col 44)",
        "(line 621,col 9)-(line 621,col 63)",
        "(line 623,col 9)-(line 623,col 38)",
        "(line 624,col 9)-(line 624,col 38)",
        "(line 626,col 9)-(line 626,col 67)",
        "(line 627,col 9)-(line 627,col 60)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getDataset()",
      "begin_line": 637,
      "end_line": 639,
      "comment": "\r\n     * Returns the dataset.\r\n     *\r\n     * @return The dataset (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setDataset(PieDataset)\r\n     ",
      "child_ranges": [
        "(line 638,col 9)-(line 638,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setDataset(org.jfree.data.pie.PieDataset)",
      "begin_line": 648,
      "end_line": 667,
      "comment": "\r\n     * Sets the dataset and sends a {@link DatasetChangeEvent} to \u0027this\u0027.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getDataset()\r\n     ",
      "child_ranges": [
        "(line 651,col 9)-(line 651,col 43)",
        "(line 652,col 9)-(line 654,col 9)",
        "(line 657,col 9)-(line 657,col 31)",
        "(line 658,col 9)-(line 661,col 9)",
        "(line 664,col 9)-(line 665,col 79)",
        "(line 666,col 9)-(line 666,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getPieIndex()",
      "begin_line": 677,
      "end_line": 679,
      "comment": "\r\n     * Returns the pie index (this is used by the {@link MultiplePiePlot} class\r\n     * to track subplots).\r\n     *\r\n     * @return The pie index.\r\n     *\r\n     * @see #setPieIndex(int)\r\n     ",
      "child_ranges": [
        "(line 678,col 9)-(line 678,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setPieIndex(int)",
      "begin_line": 689,
      "end_line": 691,
      "comment": "\r\n     * Sets the pie index (this is used by the {@link MultiplePiePlot} class to\r\n     * track subplots).\r\n     *\r\n     * @param index  the index.\r\n     *\r\n     * @see #getPieIndex()\r\n     ",
      "child_ranges": [
        "(line 690,col 9)-(line 690,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getStartAngle()",
      "begin_line": 701,
      "end_line": 703,
      "comment": "\r\n     * Returns the start angle for the first pie section.  This is measured in\r\n     * degrees starting from 3 o\u0027clock and measuring anti-clockwise.\r\n     *\r\n     * @return The start angle.\r\n     *\r\n     * @see #setStartAngle(double)\r\n     ",
      "child_ranges": [
        "(line 702,col 9)-(line 702,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setStartAngle(double)",
      "begin_line": 715,
      "end_line": 718,
      "comment": "\r\n     * Sets the starting angle and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.  The initial default value is 90 degrees, which\r\n     * corresponds to 12 o\u0027clock.  A value of zero corresponds to 3 o\u0027clock...\r\n     * this is the encoding used by Java\u0027s Arc2D class.\r\n     *\r\n     * @param angle  the angle (in degrees).\r\n     *\r\n     * @see #getStartAngle()\r\n     ",
      "child_ranges": [
        "(line 716,col 9)-(line 716,col 32)",
        "(line 717,col 9)-(line 717,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getDirection()",
      "begin_line": 728,
      "end_line": 730,
      "comment": "\r\n     * Returns the direction in which the pie sections are drawn (clockwise or\r\n     * anti-clockwise).\r\n     *\r\n     * @return The direction (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setDirection(Rotation)\r\n     ",
      "child_ranges": [
        "(line 729,col 9)-(line 729,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setDirection(org.jfree.chart.util.Rotation)",
      "begin_line": 740,
      "end_line": 747,
      "comment": "\r\n     * Sets the direction in which the pie sections are drawn and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param direction  the direction (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getDirection()\r\n     ",
      "child_ranges": [
        "(line 741,col 9)-(line 743,col 9)",
        "(line 744,col 9)-(line 744,col 35)",
        "(line 745,col 9)-(line 745,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getInteriorGap()",
      "begin_line": 757,
      "end_line": 759,
      "comment": "\r\n     * Returns the interior gap, measured as a percentage of the available\r\n     * drawing space.\r\n     *\r\n     * @return The gap (as a percentage of the available drawing space).\r\n     *\r\n     * @see #setInteriorGap(double)\r\n     ",
      "child_ranges": [
        "(line 758,col 9)-(line 758,col 32)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setInteriorGap(double)",
      "begin_line": 771,
      "end_line": 783,
      "comment": "\r\n     * Sets the interior gap and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.  This controls the space between the edges of the\r\n     * pie plot and the plot area itself (the region where the section labels\r\n     * appear).\r\n     *\r\n     * @param percent  the gap (as a percentage of the available drawing space).\r\n     *\r\n     * @see #getInteriorGap()\r\n     ",
      "child_ranges": [
        "(line 773,col 9)-(line 776,col 9)",
        "(line 778,col 9)-(line 781,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.isCircular()",
      "begin_line": 793,
      "end_line": 795,
      "comment": "\r\n     * Returns a flag indicating whether the pie chart is circular, or\r\n     * stretched into an elliptical shape.\r\n     *\r\n     * @return A flag indicating whether the pie chart is circular.\r\n     *\r\n     * @see #setCircular(boolean)\r\n     ",
      "child_ranges": [
        "(line 794,col 9)-(line 794,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setCircular(boolean)",
      "begin_line": 805,
      "end_line": 807,
      "comment": "\r\n     * A flag indicating whether the pie chart is circular, or stretched into\r\n     * an elliptical shape.\r\n     *\r\n     * @param flag  the new value.\r\n     *\r\n     * @see #isCircular()\r\n     ",
      "child_ranges": [
        "(line 806,col 9)-(line 806,col 32)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setCircular(boolean, boolean)",
      "begin_line": 818,
      "end_line": 823,
      "comment": "\r\n     * Sets the circular attribute and, if requested, sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param circular  the new value of the flag.\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @see #isCircular()\r\n     ",
      "child_ranges": [
        "(line 819,col 9)-(line 819,col 33)",
        "(line 820,col 9)-(line 822,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getIgnoreNullValues()",
      "begin_line": 833,
      "end_line": 835,
      "comment": "\r\n     * Returns the flag that controls whether \u003ccode\u003enull\u003c/code\u003e values in the\r\n     * dataset are ignored.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setIgnoreNullValues(boolean)\r\n     ",
      "child_ranges": [
        "(line 834,col 9)-(line 834,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setIgnoreNullValues(boolean)",
      "begin_line": 848,
      "end_line": 851,
      "comment": "\r\n     * Sets a flag that controls whether \u003ccode\u003enull\u003c/code\u003e values are ignored,\r\n     * and sends a {@link PlotChangeEvent} to all registered listeners.  At\r\n     * present, this only affects whether or not the key is presented in the\r\n     * legend.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getIgnoreNullValues()\r\n     * @see #setIgnoreZeroValues(boolean)\r\n     ",
      "child_ranges": [
        "(line 849,col 9)-(line 849,col 37)",
        "(line 850,col 9)-(line 850,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getIgnoreZeroValues()",
      "begin_line": 861,
      "end_line": 863,
      "comment": "\r\n     * Returns the flag that controls whether zero values in the\r\n     * dataset are ignored.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setIgnoreZeroValues(boolean)\r\n     ",
      "child_ranges": [
        "(line 862,col 9)-(line 862,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setIgnoreZeroValues(boolean)",
      "begin_line": 876,
      "end_line": 879,
      "comment": "\r\n     * Sets a flag that controls whether zero values are ignored,\r\n     * and sends a {@link PlotChangeEvent} to all registered listeners.  This\r\n     * only affects whether or not a label appears for the non-visible\r\n     * pie section.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getIgnoreZeroValues()\r\n     * @see #setIgnoreNullValues(boolean)\r\n     ",
      "child_ranges": [
        "(line 877,col 9)-(line 877,col 37)",
        "(line 878,col 9)-(line 878,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.lookupSectionPaint(java.lang.Comparable, boolean)",
      "begin_line": 896,
      "end_line": 906,
      "comment": "\r\n     * Returns the paint for the specified section.  This is equivalent to\r\n     * \u003ccode\u003elookupSectionPaint(section, getAutoPopulateSectionPaint())\u003c/code\u003e.\r\n     *\r\n     * @param key  the section key.\r\n     * @param selected  is the section selected?\r\n     *\r\n     * @return The paint for the specified section.\r\n     *\r\n     * @since 1.2.0\r\n     *\r\n     * @see #lookupSectionPaint(Comparable, boolean)\r\n     ",
      "child_ranges": [
        "(line 897,col 9)-(line 897,col 28)",
        "(line 898,col 9)-(line 900,col 9)",
        "(line 901,col 9)-(line 904,col 9)",
        "(line 905,col 9)-(line 905,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.lookupSectionPaint(java.lang.Comparable, boolean, boolean)",
      "begin_line": 929,
      "end_line": 958,
      "comment": "\r\n     * Returns the paint for the specified section.  The lookup involves these\r\n     * steps:\r\n     * \u003cul\u003e\r\n     * \u003cli\u003eif {@link #getSectionPaint(Comparable)} is non-\u003ccode\u003enull\u003c/code\u003e\r\n     *         return it;\u003c/li\u003e\r\n     * \u003cli\u003eif {@link #getSectionPaint(Comparable)} is \u003ccode\u003enull\u003c/code\u003e but\r\n     *         \u003ccode\u003eautoPopulate\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, attempt to fetch\r\n     *         a new paint from the drawing supplier\r\n     *         ({@link #getDrawingSupplier()});\r\n     * \u003cli\u003eif all else fails, return {@link #getBaseSectionPaint()}.\r\n     * \u003c/ul\u003e\r\n     *\r\n     * @param key  the section key.\r\n     * @param autoPopulate  a flag that controls whether the drawing supplier\r\n     *     is used to auto-populate the section paint settings.\r\n     *\r\n     * @return The paint.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 932,col 9)-(line 934,col 9)",
        "(line 935,col 9)-(line 935,col 28)",
        "(line 938,col 9)-(line 938,col 52)",
        "(line 939,col 9)-(line 941,col 9)",
        "(line 944,col 9)-(line 956,col 9)",
        "(line 957,col 9)-(line 957,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getSectionKey(int)",
      "begin_line": 974,
      "end_line": 985,
      "comment": "\r\n     * Returns a key for the specified section.  If there is no such section\r\n     * in the dataset, we generate a key.  This is to provide some backward\r\n     * compatibility for the (now deprecated) methods that get/set attributes\r\n     * based on section indices.  The preferred way of doing this now is to\r\n     * link the attributes directly to the section key (there are new methods\r\n     * for this, starting from version 1.0.3).\r\n     *\r\n     * @param section  the section index.\r\n     *\r\n     * @return The key.\r\n     *\r\n     * @since 1.0.3\r\n     ",
      "child_ranges": [
        "(line 975,col 9)-(line 975,col 30)",
        "(line 976,col 9)-(line 980,col 9)",
        "(line 981,col 9)-(line 983,col 9)",
        "(line 984,col 9)-(line 984,col 19)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getSectionPaint(java.lang.Comparable, boolean)",
      "begin_line": 1003,
      "end_line": 1009,
      "comment": "\r\n     * Returns the paint associated with the specified key, or\r\n     * \u003ccode\u003enull\u003c/code\u003e if there is no paint associated with the key.\r\n     *\r\n     * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @return The paint associated with the specified key, or\r\n     *     \u003ccode\u003enull\u003c/code\u003e.\r\n     *\r\n     * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\r\n     *     \u003ccode\u003enull\u003c/code\u003e.\r\n     *\r\n     * @see #setSectionPaint(Comparable, Paint)\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 1005,col 9)-(line 1007,col 9)",
        "(line 1008,col 9)-(line 1008,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setSectionPaint(java.lang.Comparable, java.awt.Paint)",
      "begin_line": 1025,
      "end_line": 1029,
      "comment": "\r\n     * Sets the paint associated with the specified key, and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     * @param paint  the paint.\r\n     *\r\n     * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\r\n     *     \u003ccode\u003enull\u003c/code\u003e.\r\n     *\r\n     * @see #getSectionPaint(Comparable)\r\n     *\r\n     * @since 1.0.3\r\n     ",
      "child_ranges": [
        "(line 1027,col 9)-(line 1027,col 45)",
        "(line 1028,col 9)-(line 1028,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.clearSectionPaints(boolean)",
      "begin_line": 1043,
      "end_line": 1048,
      "comment": "\r\n     * Clears the section paint settings for this plot and, if requested, sends\r\n     * a {@link PlotChangeEvent} to all registered listeners.  Be aware that\r\n     * if the \u003ccode\u003eautoPopulateSectionPaint\u003c/code\u003e flag is set, the section\r\n     * paints may be repopulated using the same colours as before.\r\n     *\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @since 1.0.11\r\n     *\r\n     * @see #autoPopulateSectionPaint\r\n     ",
      "child_ranges": [
        "(line 1044,col 9)-(line 1044,col 37)",
        "(line 1045,col 9)-(line 1047,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getBaseSectionPaint()",
      "begin_line": 1058,
      "end_line": 1060,
      "comment": "\r\n     * Returns the base section paint.  This is used when no other paint is\r\n     * defined, which is rare.  The default value is \u003ccode\u003eColor.gray\u003c/code\u003e.\r\n     *\r\n     * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setBaseSectionPaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 1059,col 9)-(line 1059,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setBaseSectionPaint(java.awt.Paint)",
      "begin_line": 1070,
      "end_line": 1076,
      "comment": "\r\n     * Sets the base section paint and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getBaseSectionPaint()\r\n     ",
      "child_ranges": [
        "(line 1071,col 9)-(line 1073,col 9)",
        "(line 1074,col 9)-(line 1074,col 38)",
        "(line 1075,col 9)-(line 1075,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getAutoPopulateSectionPaint()",
      "begin_line": 1086,
      "end_line": 1088,
      "comment": "\r\n     * Returns the flag that controls whether or not the section paint is\r\n     * auto-populated by the {@link #lookupSectionPaint(Comparable)} method.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 1087,col 9)-(line 1087,col 45)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setAutoPopulateSectionPaint(boolean)",
      "begin_line": 1099,
      "end_line": 1102,
      "comment": "\r\n     * Sets the flag that controls whether or not the section paint is\r\n     * auto-populated by the {@link #lookupSectionPaint(Comparable)} method,\r\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param auto  auto-populate?\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 1100,col 9)-(line 1100,col 45)",
        "(line 1101,col 9)-(line 1101,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getSectionOutlinesVisible()",
      "begin_line": 1115,
      "end_line": 1117,
      "comment": "\r\n     * Returns the flag that controls whether or not the outline is drawn for\r\n     * each pie section.\r\n     *\r\n     * @return The flag that controls whether or not the outline is drawn for\r\n     *         each pie section.\r\n     *\r\n     * @see #setSectionOutlinesVisible(boolean)\r\n     ",
      "child_ranges": [
        "(line 1116,col 9)-(line 1116,col 43)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setSectionOutlinesVisible(boolean)",
      "begin_line": 1128,
      "end_line": 1131,
      "comment": "\r\n     * Sets the flag that controls whether or not the outline is drawn for\r\n     * each pie section, and sends a {@link PlotChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param visible  the flag.\r\n     *\r\n     * @see #getSectionOutlinesVisible()\r\n     ",
      "child_ranges": [
        "(line 1129,col 9)-(line 1129,col 46)",
        "(line 1130,col 9)-(line 1130,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.lookupSectionOutlinePaint(java.lang.Comparable, boolean)",
      "begin_line": 1147,
      "end_line": 1158,
      "comment": "\r\n     * Returns the outline paint for the specified section.  This is equivalent\r\n     * to \u003ccode\u003elookupSectionPaint(section,\r\n     * getAutoPopulateSectionOutlinePaint())\u003c/code\u003e.\r\n     *\r\n     * @param key  the section key.\r\n     * @param selected  is the section selected?\r\n     *\r\n     * @return The paint for the specified section.\r\n     *\r\n     * @since 1.2.0\r\n     *\r\n     * @see #lookupSectionOutlinePaint(Comparable, boolean)\r\n     ",
      "child_ranges": [
        "(line 1149,col 9)-(line 1149,col 28)",
        "(line 1150,col 9)-(line 1152,col 9)",
        "(line 1153,col 9)-(line 1156,col 9)",
        "(line 1157,col 9)-(line 1157,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.lookupSectionOutlinePaint(java.lang.Comparable, boolean, boolean)",
      "begin_line": 1182,
      "end_line": 1211,
      "comment": "\r\n     * Returns the outline paint for the specified section.  The lookup\r\n     * involves these steps:\r\n     * \u003cul\u003e\r\n     * \u003cli\u003eif {@link #getSectionOutlinePaint(Comparable)} is\r\n     *         non-\u003ccode\u003enull\u003c/code\u003e return it;\u003c/li\u003e\r\n     * \u003cli\u003eif {@link #getSectionOutlinePaint(Comparable)} is\r\n     *         \u003ccode\u003enull\u003c/code\u003e but \u003ccode\u003eautoPopulate\u003c/code\u003e is\r\n     *         \u003ccode\u003etrue\u003c/code\u003e, attempt to fetch a new outline paint from\r\n     *         the drawing supplier ({@link #getDrawingSupplier()});\r\n     * \u003cli\u003eif all else fails, return {@link #getBaseSectionOutlinePaint()}.\r\n     * \u003c/ul\u003e\r\n     *\r\n     * @param key  the section key.\r\n     * @param selected  is the section selected?\r\n     * @param autoPopulate  a flag that controls whether the drawing supplier\r\n     *     is used to auto-populate the section outline paint settings.\r\n     *\r\n     * @return The paint.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 1185,col 9)-(line 1185,col 28)",
        "(line 1187,col 9)-(line 1189,col 9)",
        "(line 1191,col 9)-(line 1191,col 59)",
        "(line 1192,col 9)-(line 1194,col 9)",
        "(line 1197,col 9)-(line 1209,col 9)",
        "(line 1210,col 9)-(line 1210,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getSectionOutlinePaint(java.lang.Comparable)",
      "begin_line": 1229,
      "end_line": 1232,
      "comment": "\r\n     * Returns the outline paint associated with the specified key, or\r\n     * \u003ccode\u003enull\u003c/code\u003e if there is no paint associated with the key.\r\n     *\r\n     * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @return The paint associated with the specified key, or\r\n     *     \u003ccode\u003enull\u003c/code\u003e.\r\n     *\r\n     * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\r\n     *     \u003ccode\u003enull\u003c/code\u003e.\r\n     *\r\n     * @see #setSectionOutlinePaint(Comparable, Paint)\r\n     *\r\n     * @since 1.0.3\r\n     ",
      "child_ranges": [
        "(line 1231,col 9)-(line 1231,col 57)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setSectionOutlinePaint(java.lang.Comparable, java.awt.Paint)",
      "begin_line": 1248,
      "end_line": 1252,
      "comment": "\r\n     * Sets the outline paint associated with the specified key, and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     * @param paint  the paint.\r\n     *\r\n     * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\r\n     *     \u003ccode\u003enull\u003c/code\u003e.\r\n     *\r\n     * @see #getSectionOutlinePaint(Comparable)\r\n     *\r\n     * @since 1.0.3\r\n     ",
      "child_ranges": [
        "(line 1250,col 9)-(line 1250,col 52)",
        "(line 1251,col 9)-(line 1251,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.clearSectionOutlinePaints(boolean)",
      "begin_line": 1266,
      "end_line": 1271,
      "comment": "\r\n     * Clears the section outline paint settings for this plot and, if\r\n     * requested, sends a {@link PlotChangeEvent} to all registered listeners.\r\n     * Be aware that if the \u003ccode\u003eautoPopulateSectionPaint\u003c/code\u003e flag is set,\r\n     * the section paints may be repopulated using the same colours as before.\r\n     *\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @since 1.0.11\r\n     *\r\n     * @see #autoPopulateSectionOutlinePaint\r\n     ",
      "child_ranges": [
        "(line 1267,col 9)-(line 1267,col 44)",
        "(line 1268,col 9)-(line 1270,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getBaseSectionOutlinePaint()",
      "begin_line": 1281,
      "end_line": 1283,
      "comment": "\r\n     * Returns the base section paint.  This is used when no other paint is\r\n     * available.\r\n     *\r\n     * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setBaseSectionOutlinePaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 1282,col 9)-(line 1282,col 44)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setBaseSectionOutlinePaint(java.awt.Paint)",
      "begin_line": 1292,
      "end_line": 1298,
      "comment": "\r\n     * Sets the base section paint.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getBaseSectionOutlinePaint()\r\n     ",
      "child_ranges": [
        "(line 1293,col 9)-(line 1295,col 9)",
        "(line 1296,col 9)-(line 1296,col 45)",
        "(line 1297,col 9)-(line 1297,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getAutoPopulateSectionOutlinePaint()",
      "begin_line": 1309,
      "end_line": 1311,
      "comment": "\r\n     * Returns the flag that controls whether or not the section outline paint\r\n     * is auto-populated by the {@link #lookupSectionOutlinePaint(Comparable)}\r\n     * method.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 1310,col 9)-(line 1310,col 52)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setAutoPopulateSectionOutlinePaint(boolean)",
      "begin_line": 1322,
      "end_line": 1325,
      "comment": "\r\n     * Sets the flag that controls whether or not the section outline paint is\r\n     * auto-populated by the {@link #lookupSectionOutlinePaint(Comparable)}\r\n     * method, and sends a {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param auto  auto-populate?\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 1323,col 9)-(line 1323,col 52)",
        "(line 1324,col 9)-(line 1324,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.lookupSectionOutlineStroke(java.lang.Comparable, boolean)",
      "begin_line": 1343,
      "end_line": 1354,
      "comment": "\r\n     * Returns the outline stroke for the specified section.  This is\r\n     * equivalent to \u003ccode\u003elookupSectionOutlineStroke(section,\r\n     * getAutoPopulateSectionOutlineStroke())\u003c/code\u003e.\r\n     *\r\n     * @param key  the section key.\r\n     * @param selected  is the section selected?\r\n     *\r\n     * @return The stroke for the specified section.\r\n     *\r\n     * @since 1.2.0\r\n     *\r\n     * @see #lookupSectionOutlineStroke(Comparable, boolean)\r\n     ",
      "child_ranges": [
        "(line 1345,col 9)-(line 1345,col 24)",
        "(line 1346,col 9)-(line 1348,col 9)",
        "(line 1349,col 9)-(line 1352,col 9)",
        "(line 1353,col 9)-(line 1353,col 17)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.lookupSectionOutlineStroke(java.lang.Comparable, boolean, boolean)",
      "begin_line": 1378,
      "end_line": 1404,
      "comment": "\r\n     * Returns the outline stroke for the specified section.  The lookup\r\n     * involves these steps:\r\n     * \u003cul\u003e\r\n     * \u003cli\u003eif {@link #getSectionOutlineStroke(Comparable)} is\r\n     *         non-\u003ccode\u003enull\u003c/code\u003e return it;\u003c/li\u003e\r\n     * \u003cli\u003eif {@link #getSectionOutlineStroke(Comparable)} is\r\n     *         \u003ccode\u003enull\u003c/code\u003e but \u003ccode\u003eautoPopulate\u003c/code\u003e is\r\n     *         \u003ccode\u003etrue\u003c/code\u003e, attempt to fetch a new outline stroke from\r\n     *         the drawing supplier ({@link #getDrawingSupplier()});\r\n     * \u003cli\u003eif all else fails, return {@link #getBaseSectionOutlineStroke()}.\r\n     * \u003c/ul\u003e\r\n     *\r\n     * @param key  the section key.\r\n     * @param selected  is the section selected?\r\n     * @param autoPopulate  a flag that controls whether the drawing supplier\r\n     *     is used to auto-populate the section outline stroke settings.\r\n     *\r\n     * @return The stroke.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 1381,col 9)-(line 1381,col 29)",
        "(line 1384,col 9)-(line 1384,col 61)",
        "(line 1385,col 9)-(line 1387,col 9)",
        "(line 1390,col 9)-(line 1402,col 9)",
        "(line 1403,col 9)-(line 1403,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getSectionOutlineStroke(java.lang.Comparable)",
      "begin_line": 1422,
      "end_line": 1425,
      "comment": "\r\n     * Returns the outline stroke associated with the specified key, or\r\n     * \u003ccode\u003enull\u003c/code\u003e if there is no stroke associated with the key.\r\n     *\r\n     * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @return The stroke associated with the specified key, or\r\n     *     \u003ccode\u003enull\u003c/code\u003e.\r\n     *\r\n     * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\r\n     *     \u003ccode\u003enull\u003c/code\u003e.\r\n     *\r\n     * @see #setSectionOutlineStroke(Comparable, Stroke)\r\n     *\r\n     * @since 1.0.3\r\n     ",
      "child_ranges": [
        "(line 1424,col 9)-(line 1424,col 59)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setSectionOutlineStroke(java.lang.Comparable, java.awt.Stroke)",
      "begin_line": 1441,
      "end_line": 1445,
      "comment": "\r\n     * Sets the outline stroke associated with the specified key, and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     * @param stroke  the stroke.\r\n     *\r\n     * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\r\n     *     \u003ccode\u003enull\u003c/code\u003e.\r\n     *\r\n     * @see #getSectionOutlineStroke(Comparable)\r\n     *\r\n     * @since 1.0.3\r\n     ",
      "child_ranges": [
        "(line 1443,col 9)-(line 1443,col 54)",
        "(line 1444,col 9)-(line 1444,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.clearSectionOutlineStrokes(boolean)",
      "begin_line": 1459,
      "end_line": 1464,
      "comment": "\r\n     * Clears the section outline stroke settings for this plot and, if\r\n     * requested, sends a {@link PlotChangeEvent} to all registered listeners.\r\n     * Be aware that if the \u003ccode\u003eautoPopulateSectionPaint\u003c/code\u003e flag is set,\r\n     * the section paints may be repopulated using the same colours as before.\r\n     *\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @since 1.0.11\r\n     *\r\n     * @see #autoPopulateSectionOutlineStroke\r\n     ",
      "child_ranges": [
        "(line 1460,col 9)-(line 1460,col 45)",
        "(line 1461,col 9)-(line 1463,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getBaseSectionOutlineStroke()",
      "begin_line": 1474,
      "end_line": 1476,
      "comment": "\r\n     * Returns the base section stroke.  This is used when no other stroke is\r\n     * available.\r\n     *\r\n     * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setBaseSectionOutlineStroke(Stroke)\r\n     ",
      "child_ranges": [
        "(line 1475,col 9)-(line 1475,col 45)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setBaseSectionOutlineStroke(java.awt.Stroke)",
      "begin_line": 1485,
      "end_line": 1491,
      "comment": "\r\n     * Sets the base section stroke.\r\n     *\r\n     * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getBaseSectionOutlineStroke()\r\n     ",
      "child_ranges": [
        "(line 1486,col 9)-(line 1488,col 9)",
        "(line 1489,col 9)-(line 1489,col 47)",
        "(line 1490,col 9)-(line 1490,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getAutoPopulateSectionOutlineStroke()",
      "begin_line": 1502,
      "end_line": 1504,
      "comment": "\r\n     * Returns the flag that controls whether or not the section outline stroke\r\n     * is auto-populated by the {@link #lookupSectionOutlinePaint(Comparable)}\r\n     * method.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 1503,col 9)-(line 1503,col 53)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setAutoPopulateSectionOutlineStroke(boolean)",
      "begin_line": 1515,
      "end_line": 1518,
      "comment": "\r\n     * Sets the flag that controls whether or not the section outline stroke is\r\n     * auto-populated by the {@link #lookupSectionOutlineStroke(Comparable)}\r\n     * method, and sends a {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param auto  auto-populate?\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 1516,col 9)-(line 1516,col 53)",
        "(line 1517,col 9)-(line 1517,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getShadowPaint()",
      "begin_line": 1527,
      "end_line": 1529,
      "comment": "\r\n     * Returns the shadow paint.\r\n     *\r\n     * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setShadowPaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 1528,col 9)-(line 1528,col 32)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setShadowPaint(java.awt.Paint)",
      "begin_line": 1539,
      "end_line": 1542,
      "comment": "\r\n     * Sets the shadow paint and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getShadowPaint()\r\n     ",
      "child_ranges": [
        "(line 1540,col 9)-(line 1540,col 33)",
        "(line 1541,col 9)-(line 1541,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getShadowXOffset()",
      "begin_line": 1551,
      "end_line": 1553,
      "comment": "\r\n     * Returns the x-offset for the shadow effect.\r\n     *\r\n     * @return The offset (in Java2D units).\r\n     *\r\n     * @see #setShadowXOffset(double)\r\n     ",
      "child_ranges": [
        "(line 1552,col 9)-(line 1552,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setShadowXOffset(double)",
      "begin_line": 1563,
      "end_line": 1566,
      "comment": "\r\n     * Sets the x-offset for the shadow effect and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param offset  the offset (in Java2D units).\r\n     *\r\n     * @see #getShadowXOffset()\r\n     ",
      "child_ranges": [
        "(line 1564,col 9)-(line 1564,col 36)",
        "(line 1565,col 9)-(line 1565,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getShadowYOffset()",
      "begin_line": 1575,
      "end_line": 1577,
      "comment": "\r\n     * Returns the y-offset for the shadow effect.\r\n     *\r\n     * @return The offset (in Java2D units).\r\n     *\r\n     * @see #setShadowYOffset(double)\r\n     ",
      "child_ranges": [
        "(line 1576,col 9)-(line 1576,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setShadowYOffset(double)",
      "begin_line": 1587,
      "end_line": 1590,
      "comment": "\r\n     * Sets the y-offset for the shadow effect and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param offset  the offset (in Java2D units).\r\n     *\r\n     * @see #getShadowYOffset()\r\n     ",
      "child_ranges": [
        "(line 1588,col 9)-(line 1588,col 36)",
        "(line 1589,col 9)-(line 1589,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getExplodePercent(java.lang.Comparable)",
      "begin_line": 1608,
      "end_line": 1617,
      "comment": "\r\n     * Returns the amount that the section with the specified key should be\r\n     * exploded.\r\n     *\r\n     * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @return The amount that the section with the specified key should be\r\n     *     exploded.\r\n     *\r\n     * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\r\n     *     \u003ccode\u003enull\u003c/code\u003e.\r\n     *\r\n     * @since 1.0.3\r\n     *\r\n     * @see #setExplodePercent(Comparable, double)\r\n     ",
      "child_ranges": [
        "(line 1609,col 9)-(line 1609,col 28)",
        "(line 1610,col 9)-(line 1615,col 9)",
        "(line 1616,col 9)-(line 1616,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setExplodePercent(java.lang.Comparable, double)",
      "begin_line": 1630,
      "end_line": 1639,
      "comment": "\r\n     * Sets the amount that a pie section should be exploded and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param key  the section key (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     * @param percent  the explode percentage (0.30 \u003d 30 percent).\r\n     *\r\n     * @since 1.0.3\r\n     *\r\n     * @see #getExplodePercent(Comparable)\r\n     ",
      "child_ranges": [
        "(line 1631,col 9)-(line 1633,col 9)",
        "(line 1634,col 9)-(line 1636,col 9)",
        "(line 1637,col 9)-(line 1637,col 62)",
        "(line 1638,col 9)-(line 1638,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getMaximumExplodePercent()",
      "begin_line": 1646,
      "end_line": 1660,
      "comment": "\r\n     * Returns the maximum explode percent.\r\n     *\r\n     * @return The percent.\r\n     ",
      "child_ranges": [
        "(line 1647,col 9)-(line 1649,col 9)",
        "(line 1650,col 9)-(line 1650,col 28)",
        "(line 1651,col 9)-(line 1651,col 62)",
        "(line 1652,col 9)-(line 1658,col 9)",
        "(line 1659,col 9)-(line 1659,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelGenerator()",
      "begin_line": 1669,
      "end_line": 1671,
      "comment": "\r\n     * Returns the section label generator.\r\n     *\r\n     * @return The generator (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLabelGenerator(PieSectionLabelGenerator)\r\n     ",
      "child_ranges": [
        "(line 1670,col 9)-(line 1670,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)",
      "begin_line": 1681,
      "end_line": 1684,
      "comment": "\r\n     * Sets the section label generator and sends a {@link PlotChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getLabelGenerator()\r\n     ",
      "child_ranges": [
        "(line 1682,col 9)-(line 1682,col 40)",
        "(line 1683,col 9)-(line 1683,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelGap()",
      "begin_line": 1694,
      "end_line": 1696,
      "comment": "\r\n     * Returns the gap between the edge of the pie and the labels, expressed as\r\n     * a percentage of the plot width.\r\n     *\r\n     * @return The gap (a percentage, where 0.05 \u003d five percent).\r\n     *\r\n     * @see #setLabelGap(double)\r\n     ",
      "child_ranges": [
        "(line 1695,col 9)-(line 1695,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelGap(double)",
      "begin_line": 1707,
      "end_line": 1710,
      "comment": "\r\n     * Sets the gap between the edge of the pie and the labels (expressed as a\r\n     * percentage of the plot width) and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param gap  the gap (a percentage, where 0.05 \u003d five percent).\r\n     *\r\n     * @see #getLabelGap()\r\n     ",
      "child_ranges": [
        "(line 1708,col 9)-(line 1708,col 28)",
        "(line 1709,col 9)-(line 1709,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getMaximumLabelWidth()",
      "begin_line": 1719,
      "end_line": 1721,
      "comment": "\r\n     * Returns the maximum label width as a percentage of the plot width.\r\n     *\r\n     * @return The width (a percentage, where 0.20 \u003d 20 percent).\r\n     *\r\n     * @see #setMaximumLabelWidth(double)\r\n     ",
      "child_ranges": [
        "(line 1720,col 9)-(line 1720,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setMaximumLabelWidth(double)",
      "begin_line": 1731,
      "end_line": 1734,
      "comment": "\r\n     * Sets the maximum label width as a percentage of the plot width and sends\r\n     * a {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param width  the width (a percentage, where 0.20 \u003d 20 percent).\r\n     *\r\n     * @see #getMaximumLabelWidth()\r\n     ",
      "child_ranges": [
        "(line 1732,col 9)-(line 1732,col 39)",
        "(line 1733,col 9)-(line 1733,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelLinksVisible()",
      "begin_line": 1744,
      "end_line": 1746,
      "comment": "\r\n     * Returns the flag that controls whether or not label linking lines are\r\n     * visible.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setLabelLinksVisible(boolean)\r\n     ",
      "child_ranges": [
        "(line 1745,col 9)-(line 1745,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelLinksVisible(boolean)",
      "begin_line": 1759,
      "end_line": 1762,
      "comment": "\r\n     * Sets the flag that controls whether or not label linking lines are\r\n     * visible and sends a {@link PlotChangeEvent} to all registered listeners.\r\n     * Please take care when hiding the linking lines - depending on the data\r\n     * values, the labels can be displayed some distance away from the\r\n     * corresponding pie section.\r\n     *\r\n     * @param visible  the flag.\r\n     *\r\n     * @see #getLabelLinksVisible()\r\n     ",
      "child_ranges": [
        "(line 1760,col 9)-(line 1760,col 41)",
        "(line 1761,col 9)-(line 1761,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelLinkStyle()",
      "begin_line": 1773,
      "end_line": 1775,
      "comment": "\r\n     * Returns the label link style.\r\n     *\r\n     * @return The label link style (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLabelLinkStyle(PieLabelLinkStyle)\r\n     *\r\n     * @since 1.0.10\r\n     ",
      "child_ranges": [
        "(line 1774,col 9)-(line 1774,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)",
      "begin_line": 1787,
      "end_line": 1793,
      "comment": "\r\n     * Sets the label link style and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param style  the new style (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getLabelLinkStyle()\r\n     *\r\n     * @since 1.0.10\r\n     ",
      "child_ranges": [
        "(line 1788,col 9)-(line 1790,col 9)",
        "(line 1791,col 9)-(line 1791,col 36)",
        "(line 1792,col 9)-(line 1792,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelLinkMargin()",
      "begin_line": 1803,
      "end_line": 1805,
      "comment": "\r\n     * Returns the margin (expressed as a percentage of the width or height)\r\n     * between the edge of the pie and the link point.\r\n     *\r\n     * @return The link margin (as a percentage, where 0.05 is five percent).\r\n     *\r\n     * @see #setLabelLinkMargin(double)\r\n     ",
      "child_ranges": [
        "(line 1804,col 9)-(line 1804,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelLinkMargin(double)",
      "begin_line": 1815,
      "end_line": 1818,
      "comment": "\r\n     * Sets the link margin and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param margin  the margin.\r\n     *\r\n     * @see #getLabelLinkMargin()\r\n     ",
      "child_ranges": [
        "(line 1816,col 9)-(line 1816,col 38)",
        "(line 1817,col 9)-(line 1817,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelLinkPaint()",
      "begin_line": 1828,
      "end_line": 1830,
      "comment": "\r\n     * Returns the paint used for the lines that connect pie sections to their\r\n     * corresponding labels.\r\n     *\r\n     * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLabelLinkPaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 1829,col 9)-(line 1829,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelLinkPaint(java.awt.Paint)",
      "begin_line": 1841,
      "end_line": 1847,
      "comment": "\r\n     * Sets the paint used for the lines that connect pie sections to their\r\n     * corresponding labels, and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getLabelLinkPaint()\r\n     ",
      "child_ranges": [
        "(line 1842,col 9)-(line 1844,col 9)",
        "(line 1845,col 9)-(line 1845,col 36)",
        "(line 1846,col 9)-(line 1846,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelLinkStroke()",
      "begin_line": 1856,
      "end_line": 1858,
      "comment": "\r\n     * Returns the stroke used for the label linking lines.\r\n     *\r\n     * @return The stroke.\r\n     *\r\n     * @see #setLabelLinkStroke(Stroke)\r\n     ",
      "child_ranges": [
        "(line 1857,col 9)-(line 1857,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelLinkStroke(java.awt.Stroke)",
      "begin_line": 1868,
      "end_line": 1874,
      "comment": "\r\n     * Sets the link stroke and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param stroke  the stroke.\r\n     *\r\n     * @see #getLabelLinkStroke()\r\n     ",
      "child_ranges": [
        "(line 1869,col 9)-(line 1871,col 9)",
        "(line 1872,col 9)-(line 1872,col 38)",
        "(line 1873,col 9)-(line 1873,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelLinkDepth()",
      "begin_line": 1887,
      "end_line": 1889,
      "comment": "\r\n     * Returns the distance that the end of the label link is embedded into\r\n     * the plot, expressed as a percentage of the plot\u0027s radius.\r\n     * \u003cbr\u003e\u003cbr\u003e\r\n     * This method is overridden in the {@link RingPlot} class to resolve\r\n     * bug 2121818.\r\n     *\r\n     * @return \u003ccode\u003e0.10\u003c/code\u003e.\r\n     *\r\n     * @since 1.0.12\r\n     ",
      "child_ranges": [
        "(line 1888,col 9)-(line 1888,col 19)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelFont()",
      "begin_line": 1898,
      "end_line": 1900,
      "comment": "\r\n     * Returns the section label font.\r\n     *\r\n     * @return The font (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLabelFont(Font)\r\n     ",
      "child_ranges": [
        "(line 1899,col 9)-(line 1899,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelFont(java.awt.Font)",
      "begin_line": 1910,
      "end_line": 1916,
      "comment": "\r\n     * Sets the section label font and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param font  the font (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getLabelFont()\r\n     ",
      "child_ranges": [
        "(line 1911,col 9)-(line 1913,col 9)",
        "(line 1914,col 9)-(line 1914,col 30)",
        "(line 1915,col 9)-(line 1915,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelPaint()",
      "begin_line": 1925,
      "end_line": 1927,
      "comment": "\r\n     * Returns the section label paint.\r\n     *\r\n     * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLabelPaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 1926,col 9)-(line 1926,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelPaint(java.awt.Paint)",
      "begin_line": 1937,
      "end_line": 1943,
      "comment": "\r\n     * Sets the section label paint and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getLabelPaint()\r\n     ",
      "child_ranges": [
        "(line 1938,col 9)-(line 1940,col 9)",
        "(line 1941,col 9)-(line 1941,col 32)",
        "(line 1942,col 9)-(line 1942,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelBackgroundPaint()",
      "begin_line": 1952,
      "end_line": 1954,
      "comment": "\r\n     * Returns the section label background paint.\r\n     *\r\n     * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLabelBackgroundPaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 1953,col 9)-(line 1953,col 41)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelBackgroundPaint(java.awt.Paint)",
      "begin_line": 1964,
      "end_line": 1967,
      "comment": "\r\n     * Sets the section label background paint and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getLabelBackgroundPaint()\r\n     ",
      "child_ranges": [
        "(line 1965,col 9)-(line 1965,col 42)",
        "(line 1966,col 9)-(line 1966,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelOutlinePaint()",
      "begin_line": 1976,
      "end_line": 1978,
      "comment": "\r\n     * Returns the section label outline paint.\r\n     *\r\n     * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLabelOutlinePaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 1977,col 9)-(line 1977,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelOutlinePaint(java.awt.Paint)",
      "begin_line": 1988,
      "end_line": 1991,
      "comment": "\r\n     * Sets the section label outline paint and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getLabelOutlinePaint()\r\n     ",
      "child_ranges": [
        "(line 1989,col 9)-(line 1989,col 39)",
        "(line 1990,col 9)-(line 1990,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelOutlineStroke()",
      "begin_line": 2000,
      "end_line": 2002,
      "comment": "\r\n     * Returns the section label outline stroke.\r\n     *\r\n     * @return The stroke (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLabelOutlineStroke(Stroke)\r\n     ",
      "child_ranges": [
        "(line 2001,col 9)-(line 2001,col 39)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelOutlineStroke(java.awt.Stroke)",
      "begin_line": 2012,
      "end_line": 2015,
      "comment": "\r\n     * Sets the section label outline stroke and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getLabelOutlineStroke()\r\n     ",
      "child_ranges": [
        "(line 2013,col 9)-(line 2013,col 41)",
        "(line 2014,col 9)-(line 2014,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelShadowPaint()",
      "begin_line": 2024,
      "end_line": 2026,
      "comment": "\r\n     * Returns the section label shadow paint.\r\n     *\r\n     * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLabelShadowPaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 2025,col 9)-(line 2025,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelShadowPaint(java.awt.Paint)",
      "begin_line": 2036,
      "end_line": 2039,
      "comment": "\r\n     * Sets the section label shadow paint and sends a {@link PlotChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getLabelShadowPaint()\r\n     ",
      "child_ranges": [
        "(line 2037,col 9)-(line 2037,col 38)",
        "(line 2038,col 9)-(line 2038,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelPadding()",
      "begin_line": 2050,
      "end_line": 2052,
      "comment": "\r\n     * Returns the label padding.\r\n     *\r\n     * @return The label padding (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @since 1.0.7\r\n     *\r\n     * @see #setLabelPadding(RectangleInsets)\r\n     ",
      "child_ranges": [
        "(line 2051,col 9)-(line 2051,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelPadding(org.jfree.chart.util.RectangleInsets)",
      "begin_line": 2064,
      "end_line": 2070,
      "comment": "\r\n     * Sets the padding between each label and its outline and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param padding  the padding (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @since 1.0.7\r\n     *\r\n     * @see #getLabelPadding()\r\n     ",
      "child_ranges": [
        "(line 2065,col 9)-(line 2067,col 9)",
        "(line 2068,col 9)-(line 2068,col 36)",
        "(line 2069,col 9)-(line 2069,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getSimpleLabels()",
      "begin_line": 2080,
      "end_line": 2082,
      "comment": "\r\n     * Returns the flag that controls whether simple or extended labels are\r\n     * displayed on the plot.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.7\r\n     ",
      "child_ranges": [
        "(line 2081,col 9)-(line 2081,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setSimpleLabels(boolean)",
      "begin_line": 2093,
      "end_line": 2096,
      "comment": "\r\n     * Sets the flag that controls whether simple or extended labels are\r\n     * displayed on the plot, and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param simple  the new flag value.\r\n     *\r\n     * @since 1.0.7\r\n     ",
      "child_ranges": [
        "(line 2094,col 9)-(line 2094,col 35)",
        "(line 2095,col 9)-(line 2095,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getSimpleLabelOffset()",
      "begin_line": 2107,
      "end_line": 2109,
      "comment": "\r\n     * Returns the offset used for the simple labels, if they are displayed.\r\n     *\r\n     * @return The offset (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @since 1.0.7\r\n     *\r\n     * @see #setSimpleLabelOffset(RectangleInsets)\r\n     ",
      "child_ranges": [
        "(line 2108,col 9)-(line 2108,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets)",
      "begin_line": 2121,
      "end_line": 2127,
      "comment": "\r\n     * Sets the offset for the simple labels and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param offset  the offset (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @since 1.0.7\r\n     *\r\n     * @see #getSimpleLabelOffset()\r\n     ",
      "child_ranges": [
        "(line 2122,col 9)-(line 2124,col 9)",
        "(line 2125,col 9)-(line 2125,col 40)",
        "(line 2126,col 9)-(line 2126,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLabelDistributor()",
      "begin_line": 2137,
      "end_line": 2139,
      "comment": "\r\n     * Returns the object responsible for the vertical layout of the pie\r\n     * section labels.\r\n     *\r\n     * @return The label distributor (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @since 1.0.6\r\n     ",
      "child_ranges": [
        "(line 2138,col 9)-(line 2138,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor)",
      "begin_line": 2149,
      "end_line": 2155,
      "comment": "\r\n     * Sets the label distributor and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param distributor  the distributor (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @since 1.0.6\r\n     ",
      "child_ranges": [
        "(line 2150,col 9)-(line 2152,col 9)",
        "(line 2153,col 9)-(line 2153,col 44)",
        "(line 2154,col 9)-(line 2154,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getToolTipGenerator()",
      "begin_line": 2166,
      "end_line": 2168,
      "comment": "\r\n     * Returns the tool tip generator, an object that is responsible for\r\n     * generating the text items used for tool tips by the plot.  If the\r\n     * generator is \u003ccode\u003enull\u003c/code\u003e, no tool tips will be created.\r\n     *\r\n     * @return The generator (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setToolTipGenerator(PieToolTipGenerator)\r\n     ",
      "child_ranges": [
        "(line 2167,col 9)-(line 2167,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator)",
      "begin_line": 2179,
      "end_line": 2182,
      "comment": "\r\n     * Sets the tool tip generator and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.  Set the generator to \u003ccode\u003enull\u003c/code\u003e if you\r\n     * don\u0027t want any tool tips.\r\n     *\r\n     * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getToolTipGenerator()\r\n     ",
      "child_ranges": [
        "(line 2180,col 9)-(line 2180,col 42)",
        "(line 2181,col 9)-(line 2181,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getURLGenerator()",
      "begin_line": 2191,
      "end_line": 2193,
      "comment": "\r\n     * Returns the URL generator.\r\n     *\r\n     * @return The generator (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setURLGenerator(PieURLGenerator)\r\n     ",
      "child_ranges": [
        "(line 2192,col 9)-(line 2192,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setURLGenerator(org.jfree.chart.urls.PieURLGenerator)",
      "begin_line": 2203,
      "end_line": 2206,
      "comment": "\r\n     * Sets the URL generator and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getURLGenerator()\r\n     ",
      "child_ranges": [
        "(line 2204,col 9)-(line 2204,col 38)",
        "(line 2205,col 9)-(line 2205,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getMinimumArcAngleToDraw()",
      "begin_line": 2216,
      "end_line": 2218,
      "comment": "\r\n     * Returns the minimum arc angle that will be drawn.  Pie sections for an\r\n     * angle smaller than this are not drawn, to avoid a JDK bug.\r\n     *\r\n     * @return The minimum angle.\r\n     *\r\n     * @see #setMinimumArcAngleToDraw(double)\r\n     ",
      "child_ranges": [
        "(line 2217,col 9)-(line 2217,col 42)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setMinimumArcAngleToDraw(double)",
      "begin_line": 2238,
      "end_line": 2240,
      "comment": "\r\n     * Sets the minimum arc angle that will be drawn.  Pie sections for an\r\n     * angle smaller than this are not drawn, to avoid a JDK bug.  See this\r\n     * link for details:\r\n     * \u003cbr\u003e\u003cbr\u003e\r\n     * \u003ca href\u003d\"http://www.jfree.org/phpBB2/viewtopic.php?t\u003d2707\"\u003e\r\n     * http://www.jfree.org/phpBB2/viewtopic.php?t\u003d2707\u003c/a\u003e\r\n     * \u003cbr\u003e\u003cbr\u003e\r\n     * ...and this bug report in the Java Bug Parade:\r\n     * \u003cbr\u003e\u003cbr\u003e\r\n     * \u003ca href\u003d\r\n     * \"http://developer.java.sun.com/developer/bugParade/bugs/4836495.html\"\u003e\r\n     * http://developer.java.sun.com/developer/bugParade/bugs/4836495.html\u003c/a\u003e\r\n     *\r\n     * @param angle  the minimum angle.\r\n     *\r\n     * @see #getMinimumArcAngleToDraw()\r\n     ",
      "child_ranges": [
        "(line 2239,col 9)-(line 2239,col 43)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLegendItemShape()",
      "begin_line": 2249,
      "end_line": 2251,
      "comment": "\r\n     * Returns the shape used for legend items.\r\n     *\r\n     * @return The shape (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLegendItemShape(Shape)\r\n     ",
      "child_ranges": [
        "(line 2250,col 9)-(line 2250,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLegendItemShape(java.awt.Shape)",
      "begin_line": 2261,
      "end_line": 2267,
      "comment": "\r\n     * Sets the shape used for legend items and sends a {@link PlotChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param shape  the shape (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getLegendItemShape()\r\n     ",
      "child_ranges": [
        "(line 2262,col 9)-(line 2264,col 9)",
        "(line 2265,col 9)-(line 2265,col 37)",
        "(line 2266,col 9)-(line 2266,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLegendLabelGenerator()",
      "begin_line": 2276,
      "end_line": 2278,
      "comment": "\r\n     * Returns the legend label generator.\r\n     *\r\n     * @return The legend label generator (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLegendLabelGenerator(PieSectionLabelGenerator)\r\n     ",
      "child_ranges": [
        "(line 2277,col 9)-(line 2277,col 41)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)",
      "begin_line": 2288,
      "end_line": 2294,
      "comment": "\r\n     * Sets the legend label generator and sends a {@link PlotChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getLegendLabelGenerator()\r\n     ",
      "child_ranges": [
        "(line 2289,col 9)-(line 2291,col 9)",
        "(line 2292,col 9)-(line 2292,col 46)",
        "(line 2293,col 9)-(line 2293,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLegendLabelToolTipGenerator()",
      "begin_line": 2303,
      "end_line": 2305,
      "comment": "\r\n     * Returns the legend label tool tip generator.\r\n     *\r\n     * @return The legend label tool tip generator (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLegendLabelToolTipGenerator(PieSectionLabelGenerator)\r\n     ",
      "child_ranges": [
        "(line 2304,col 9)-(line 2304,col 48)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)",
      "begin_line": 2315,
      "end_line": 2319,
      "comment": "\r\n     * Sets the legend label tool tip generator and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getLegendLabelToolTipGenerator()\r\n     ",
      "child_ranges": [
        "(line 2317,col 9)-(line 2317,col 53)",
        "(line 2318,col 9)-(line 2318,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLegendLabelURLGenerator()",
      "begin_line": 2330,
      "end_line": 2332,
      "comment": "\r\n     * Returns the legend label URL generator.\r\n     *\r\n     * @return The legend label URL generator (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLegendLabelURLGenerator(PieURLGenerator)\r\n     *\r\n     * @since 1.0.4\r\n     ",
      "child_ranges": [
        "(line 2331,col 9)-(line 2331,col 44)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)",
      "begin_line": 2344,
      "end_line": 2347,
      "comment": "\r\n     * Sets the legend label URL generator and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getLegendLabelURLGenerator()\r\n     *\r\n     * @since 1.0.4\r\n     ",
      "child_ranges": [
        "(line 2345,col 9)-(line 2345,col 49)",
        "(line 2346,col 9)-(line 2346,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getShadowGenerator()",
      "begin_line": 2356,
      "end_line": 2358,
      "comment": "\r\n     * Returns the shadow generator for the plot, if any.\r\n     *\r\n     * @return The shadow generator (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @since 1.0.14\r\n     ",
      "child_ranges": [
        "(line 2357,col 9)-(line 2357,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.setShadowGenerator(org.jfree.chart.util.ShadowGenerator)",
      "begin_line": 2371,
      "end_line": 2374,
      "comment": "\r\n     * Sets the shadow generator for the plot and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.  Note that this is\r\n     * a btmap drop-shadow generation facility and is separate from the\r\n     * vector based show option that is controlled via the\r\n     * {@link setShadowPaint()} method.\r\n     *\r\n     * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @since 1.0.14\r\n     ",
      "child_ranges": [
        "(line 2372,col 9)-(line 2372,col 41)",
        "(line 2373,col 9)-(line 2373,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlot, java.lang.Integer, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 2391,
      "end_line": 2403,
      "comment": "\r\n     * Initialises the drawing procedure.  This method will be called before\r\n     * the first item is rendered, giving the plot an opportunity to initialise\r\n     * any state information it wants to maintain.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     * @param plot  the plot.\r\n     * @param index  the secondary index (\u003ccode\u003enull\u003c/code\u003e for primary\r\n     *               renderer).\r\n     * @param info  collects chart rendering information for return to caller.\r\n     *\r\n     * @return A state object (maintains state information relevant to one\r\n     *         chart drawing).\r\n     ",
      "child_ranges": [
        "(line 2394,col 9)-(line 2394,col 52)",
        "(line 2395,col 9)-(line 2395,col 35)",
        "(line 2396,col 9)-(line 2399,col 9)",
        "(line 2400,col 9)-(line 2400,col 51)",
        "(line 2401,col 9)-(line 2401,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.plot.PlotState, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 2416,
      "end_line": 2471,
      "comment": "\r\n     * Draws the plot on a Java 2D graphics device (such as the screen or a\r\n     * printer).\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param area  the area within which the plot should be drawn.\r\n     * @param anchor  the anchor point (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     * @param parentState  the state from the parent plot, if there is one.\r\n     * @param info  collects info about the drawing\r\n     *              (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     ",
      "child_ranges": [
        "(line 2420,col 9)-(line 2420,col 45)",
        "(line 2421,col 9)-(line 2421,col 26)",
        "(line 2423,col 9)-(line 2426,col 9)",
        "(line 2428,col 9)-(line 2428,col 33)",
        "(line 2429,col 9)-(line 2429,col 30)",
        "(line 2431,col 9)-(line 2431,col 39)",
        "(line 2432,col 9)-(line 2432,col 22)",
        "(line 2434,col 9)-(line 2434,col 56)",
        "(line 2435,col 9)-(line 2436,col 39)",
        "(line 2438,col 9)-(line 2464,col 9)",
        "(line 2466,col 9)-(line 2466,col 30)",
        "(line 2467,col 9)-(line 2467,col 43)",
        "(line 2469,col 9)-(line 2469,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.calculateLinkAndExplodeAreas(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
      "begin_line": 2473,
      "end_line": 2541,
      "comment": "",
      "child_ranges": [
        "(line 2476,col 9)-(line 2476,col 50)",
        "(line 2479,col 9)-(line 2479,col 34)",
        "(line 2480,col 9)-(line 2482,col 9)",
        "(line 2483,col 9)-(line 2484,col 38)",
        "(line 2485,col 9)-(line 2485,col 75)",
        "(line 2487,col 9)-(line 2498,col 9)",
        "(line 2500,col 9)-(line 2500,col 59)",
        "(line 2501,col 9)-(line 2501,col 57)",
        "(line 2502,col 9)-(line 2502,col 59)",
        "(line 2503,col 9)-(line 2503,col 58)",
        "(line 2506,col 9)-(line 2512,col 9)",
        "(line 2516,col 9)-(line 2517,col 23)",
        "(line 2518,col 9)-(line 2518,col 29)",
        "(line 2520,col 9)-(line 2526,col 9)",
        "(line 2531,col 9)-(line 2531,col 24)",
        "(line 2532,col 9)-(line 2534,col 9)",
        "(line 2535,col 9)-(line 2535,col 51)",
        "(line 2536,col 9)-(line 2536,col 52)",
        "(line 2537,col 9)-(line 2538,col 58)",
        "(line 2539,col 9)-(line 2539,col 32)",
        "(line 2540,col 9)-(line 2540,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.drawPie(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 2550,
      "end_line": 2623,
      "comment": "\r\n     * Draws the pie.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area.\r\n     * @param info  chart rendering info.\r\n     ",
      "child_ranges": [
        "(line 2553,col 9)-(line 2553,col 72)",
        "(line 2555,col 9)-(line 2555,col 73)",
        "(line 2556,col 9)-(line 2556,col 40)",
        "(line 2557,col 9)-(line 2557,col 43)",
        "(line 2558,col 9)-(line 2558,col 36)",
        "(line 2559,col 9)-(line 2559,col 46)",
        "(line 2564,col 9)-(line 2564,col 66)",
        "(line 2565,col 9)-(line 2565,col 79)",
        "(line 2567,col 9)-(line 2567,col 53)",
        "(line 2568,col 9)-(line 2568,col 54)",
        "(line 2569,col 9)-(line 2571,col 75)",
        "(line 2573,col 9)-(line 2576,col 9)",
        "(line 2577,col 9)-(line 2577,col 34)",
        "(line 2578,col 9)-(line 2578,col 50)",
        "(line 2579,col 9)-(line 2579,col 50)",
        "(line 2580,col 9)-(line 2580,col 54)",
        "(line 2581,col 9)-(line 2581,col 55)",
        "(line 2584,col 9)-(line 2622,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.drawItem(java.awt.Graphics2D, int, boolean, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlotState, int)",
      "begin_line": 2635,
      "end_line": 2721,
      "comment": "\r\n     * Draws a single data item.\r\n     *\r\n     * @param g2  the graphics device (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     * @param section  the section index.\r\n     * @param selected  is the item selected?\r\n     * @param dataArea  the data plot area.\r\n     * @param state  state information for one chart.\r\n     * @param currentPass  the current pass index.\r\n     ",
      "child_ranges": [
        "(line 2638,col 9)-(line 2638,col 50)",
        "(line 2639,col 9)-(line 2641,col 9)",
        "(line 2642,col 9)-(line 2642,col 39)",
        "(line 2643,col 9)-(line 2643,col 28)",
        "(line 2644,col 9)-(line 2644,col 28)",
        "(line 2646,col 9)-(line 2656,col 9)",
        "(line 2658,col 9)-(line 2658,col 41)",
        "(line 2659,col 9)-(line 2719,col 9)",
        "(line 2720,col 9)-(line 2720,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.drawSimpleLabels(java.awt.Graphics2D, java.util.List, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlotState)",
      "begin_line": 2735,
      "end_line": 2818,
      "comment": "\r\n     * Draws the pie section labels in the simple form.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param keys  the section keys.\r\n     * @param totalValue  the total value for all sections in the pie.\r\n     * @param plotArea  the plot area.\r\n     * @param pieArea  the area containing the pie.\r\n     * @param state  the plot state.\r\n     *\r\n     * @since 1.0.7\r\n     ",
      "child_ranges": [
        "(line 2739,col 9)-(line 2739,col 56)",
        "(line 2740,col 9)-(line 2741,col 23)",
        "(line 2743,col 9)-(line 2744,col 40)",
        "(line 2745,col 9)-(line 2745,col 75)",
        "(line 2746,col 9)-(line 2746,col 34)",
        "(line 2747,col 9)-(line 2747,col 44)",
        "(line 2748,col 9)-(line 2814,col 9)",
        "(line 2816,col 9)-(line 2816,col 43)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.drawLabels(java.awt.Graphics2D, java.util.List, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlotState)",
      "begin_line": 2830,
      "end_line": 2891,
      "comment": "\r\n     * Draws the labels for the pie sections.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param keys  the keys.\r\n     * @param totalValue  the total value.\r\n     * @param plotArea  the plot area.\r\n     * @param linkArea  the link area.\r\n     * @param state  the state.\r\n     ",
      "child_ranges": [
        "(line 2834,col 9)-(line 2834,col 56)",
        "(line 2835,col 9)-(line 2836,col 23)",
        "(line 2839,col 9)-(line 2839,col 63)",
        "(line 2840,col 9)-(line 2840,col 64)",
        "(line 2842,col 9)-(line 2842,col 34)",
        "(line 2843,col 9)-(line 2843,col 44)",
        "(line 2844,col 9)-(line 2870,col 9)",
        "(line 2872,col 9)-(line 2872,col 35)",
        "(line 2876,col 9)-(line 2877,col 38)",
        "(line 2878,col 9)-(line 2878,col 57)",
        "(line 2879,col 9)-(line 2879,col 52)",
        "(line 2880,col 9)-(line 2880,col 67)",
        "(line 2883,col 9)-(line 2888,col 9)",
        "(line 2889,col 9)-(line 2889,col 43)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.drawLeftLabels(org.jfree.data.KeyedValues, java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, float, org.jfree.chart.plot.PiePlotState)",
      "begin_line": 2905,
      "end_line": 2951,
      "comment": "\r\n     * Draws the left labels.\r\n     *\r\n     * @param leftKeys  a collection of keys and angles (to the middle of the\r\n     *         section, in degrees) for the sections on the left side of the\r\n     *         plot.\r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area.\r\n     * @param linkArea  the link area.\r\n     * @param maxLabelWidth  the maximum label width.\r\n     * @param state  the state.\r\n     ",
      "child_ranges": [
        "(line 2909,col 9)-(line 2909,col 38)",
        "(line 2910,col 9)-(line 2910,col 58)",
        "(line 2911,col 9)-(line 2911,col 74)",
        "(line 2912,col 9)-(line 2942,col 9)",
        "(line 2943,col 9)-(line 2943,col 41)",
        "(line 2944,col 9)-(line 2944,col 43)",
        "(line 2945,col 9)-(line 2946,col 30)",
        "(line 2947,col 9)-(line 2950,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.drawRightLabels(org.jfree.data.KeyedValues, java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, float, org.jfree.chart.plot.PiePlotState)",
      "begin_line": 2963,
      "end_line": 3006,
      "comment": "\r\n     * Draws the right labels.\r\n     *\r\n     * @param keys  the keys.\r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area.\r\n     * @param linkArea  the link area.\r\n     * @param maxLabelWidth  the maximum label width.\r\n     * @param state  the state.\r\n     ",
      "child_ranges": [
        "(line 2968,col 9)-(line 2968,col 38)",
        "(line 2969,col 9)-(line 2969,col 58)",
        "(line 2970,col 9)-(line 2970,col 74)",
        "(line 2972,col 9)-(line 2996,col 9)",
        "(line 2997,col 9)-(line 2997,col 41)",
        "(line 2998,col 9)-(line 2998,col 43)",
        "(line 2999,col 9)-(line 3000,col 30)",
        "(line 3001,col 9)-(line 3004,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getLegendItems()",
      "begin_line": 3013,
      "end_line": 3075,
      "comment": "\r\n     * Returns a collection of legend items for the pie chart.\r\n     *\r\n     * @return The legend items (never \u003ccode\u003enull\u003c/code\u003e).\r\n     ",
      "child_ranges": [
        "(line 3015,col 9)-(line 3015,col 65)",
        "(line 3016,col 9)-(line 3018,col 9)",
        "(line 3019,col 9)-(line 3019,col 43)",
        "(line 3020,col 9)-(line 3020,col 24)",
        "(line 3021,col 9)-(line 3021,col 43)",
        "(line 3022,col 9)-(line 3022,col 44)",
        "(line 3023,col 9)-(line 3073,col 9)",
        "(line 3074,col 9)-(line 3074,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getPlotType()",
      "begin_line": 3082,
      "end_line": 3084,
      "comment": "\r\n     * Returns a short string describing the type of plot.\r\n     *\r\n     * @return The plot type.\r\n     ",
      "child_ranges": [
        "(line 3083,col 9)-(line 3083,col 59)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getArcBounds(java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, double, double, double)",
      "begin_line": 3100,
      "end_line": 3121,
      "comment": "\r\n     * Returns a rectangle that can be used to create a pie section (taking\r\n     * into account the amount by which the pie section is \u0027exploded\u0027).\r\n     *\r\n     * @param unexploded  the area inside which the unexploded pie sections are\r\n     *                    drawn.\r\n     * @param exploded  the area inside which the exploded pie sections are\r\n     *                  drawn.\r\n     * @param angle  the start angle.\r\n     * @param extent  the extent of the arc.\r\n     * @param explodePercent  the amount by which the pie section is exploded.\r\n     *\r\n     * @return A rectangle that can be used to create a pie section.\r\n     ",
      "child_ranges": [
        "(line 3105,col 9)-(line 3120,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.drawLeftLabel(java.awt.Graphics2D, org.jfree.chart.plot.PiePlotState, org.jfree.chart.plot.PieLabelRecord)",
      "begin_line": 3130,
      "end_line": 3172,
      "comment": "\r\n     * Draws a section label on the left side of the pie chart.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the state.\r\n     * @param record  the label record.\r\n     ",
      "child_ranges": [
        "(line 3133,col 9)-(line 3133,col 55)",
        "(line 3134,col 9)-(line 3134,col 51)",
        "(line 3135,col 9)-(line 3135,col 48)",
        "(line 3137,col 9)-(line 3168,col 9)",
        "(line 3169,col 9)-(line 3169,col 39)",
        "(line 3170,col 9)-(line 3170,col 77)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.drawRightLabel(java.awt.Graphics2D, org.jfree.chart.plot.PiePlotState, org.jfree.chart.plot.PieLabelRecord)",
      "begin_line": 3181,
      "end_line": 3224,
      "comment": "\r\n     * Draws a section label on the right side of the pie chart.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the state.\r\n     * @param record  the label record.\r\n     ",
      "child_ranges": [
        "(line 3184,col 9)-(line 3184,col 55)",
        "(line 3185,col 9)-(line 3185,col 51)",
        "(line 3186,col 9)-(line 3186,col 48)",
        "(line 3188,col 9)-(line 3219,col 9)",
        "(line 3221,col 9)-(line 3221,col 39)",
        "(line 3222,col 9)-(line 3222,col 76)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.findSelectionStateForDataset(org.jfree.data.pie.PieDataset, java.lang.Object)",
      "begin_line": 3236,
      "end_line": 3245,
      "comment": "\r\n     * Returns the selection state for the specified dataset.  This could be\r\n     * \u003ccode\u003enull\u003c/code\u003e if the dataset hasn\u0027t been set up to support\r\n     * selections.\r\n     *\r\n     * @param dataset  the dataset.\r\n     * @param source  the selection source.\r\n     *\r\n     * @return The selection state (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     ",
      "child_ranges": [
        "(line 3238,col 9)-(line 3242,col 9)",
        "(line 3243,col 9)-(line 3243,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.canSelectByPoint()",
      "begin_line": 3255,
      "end_line": 3257,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e to indicate that the plot supports selection\r\n     * by clicking on a point.\r\n     *\r\n     * @return \u003ccode\u003etrue\u003c/code\u003e.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 3256,col 9)-(line 3256,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.canSelectByRegion()",
      "begin_line": 3267,
      "end_line": 3269,
      "comment": "\r\n     * Returns \u003ccode\u003efalse\u003c/code\u003e to indicate that the plot does not support\r\n     * selection by region.\r\n     *\r\n     * @return \u003ccode\u003efalse\u003c/code\u003e.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 3268,col 9)-(line 3268,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.select(double, double, java.awt.geom.Rectangle2D, org.jfree.chart.RenderingSource)",
      "begin_line": 3279,
      "end_line": 3349,
      "comment": "\r\n     * Selects a data item.\r\n     * \r\n     * @param x\r\n     * @param y\r\n     * @param dataArea\r\n     * @param source\r\n     ",
      "child_ranges": [
        "(line 3282,col 9)-(line 3282,col 53)",
        "(line 3284,col 9)-(line 3285,col 33)",
        "(line 3286,col 9)-(line 3288,col 9)",
        "(line 3290,col 9)-(line 3290,col 75)",
        "(line 3291,col 9)-(line 3291,col 40)",
        "(line 3292,col 9)-(line 3292,col 43)",
        "(line 3297,col 9)-(line 3297,col 66)",
        "(line 3298,col 9)-(line 3298,col 79)",
        "(line 3300,col 9)-(line 3300,col 53)",
        "(line 3301,col 9)-(line 3301,col 54)",
        "(line 3302,col 9)-(line 3304,col 75)",
        "(line 3307,col 9)-(line 3348,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.calculateAngleForValue(double, double)",
      "begin_line": 3351,
      "end_line": 3359,
      "comment": "",
      "child_ranges": [
        "(line 3352,col 9)-(line 3357,col 9)",
        "(line 3358,col 9)-(line 3358,col 66)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.select(java.awt.geom.GeneralPath, java.awt.geom.Rectangle2D, org.jfree.chart.RenderingSource)",
      "begin_line": 3373,
      "end_line": 3376,
      "comment": "\r\n     * This method does nothing, because this plot does not support\r\n     * selection by region.\r\n     *\r\n     * @param region  ignored.\r\n     * @param dataArea  ignored.\r\n     * @param source  ignored.\r\n     *\r\n     * @see #canSelectByRegion()\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": []
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.clearSelection()",
      "begin_line": 3383,
      "end_line": 3385,
      "comment": "\r\n     * Clears the selection.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 3384,col 9)-(line 3384,col 47)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.createHotSpotShape(java.awt.Graphics2D, java.awt.geom.Rectangle2D, int, boolean)",
      "begin_line": 3396,
      "end_line": 3444,
      "comment": "\r\n     * Returns a shape representing the hotspot for a pie section.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area within which the data is being rendered.\r\n     * @param selected  is the item selected?\r\n     *\r\n     * @return A shape equal to the hot spot for a data item.\r\n     ",
      "child_ranges": [
        "(line 3399,col 9)-(line 3399,col 50)",
        "(line 3400,col 9)-(line 3402,col 9)",
        "(line 3403,col 9)-(line 3403,col 39)",
        "(line 3404,col 9)-(line 3404,col 28)",
        "(line 3405,col 9)-(line 3405,col 28)",
        "(line 3407,col 9)-(line 3407,col 79)",
        "(line 3408,col 9)-(line 3408,col 26)",
        "(line 3409,col 9)-(line 3428,col 9)",
        "(line 3430,col 9)-(line 3430,col 41)",
        "(line 3431,col 9)-(line 3442,col 9)",
        "(line 3443,col 9)-(line 3443,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.equals(java.lang.Object)",
      "begin_line": 3454,
      "end_line": 3625,
      "comment": "\r\n     * Tests this plot for equality with an arbitrary object.  Note that the\r\n     * plot\u0027s dataset is NOT included in the test for equality.\r\n     *\r\n     * @param obj  the object to test against (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 3455,col 9)-(line 3457,col 9)",
        "(line 3458,col 9)-(line 3460,col 9)",
        "(line 3461,col 9)-(line 3463,col 9)",
        "(line 3464,col 9)-(line 3464,col 37)",
        "(line 3465,col 9)-(line 3467,col 9)",
        "(line 3468,col 9)-(line 3470,col 9)",
        "(line 3471,col 9)-(line 3473,col 9)",
        "(line 3474,col 9)-(line 3476,col 9)",
        "(line 3477,col 9)-(line 3479,col 9)",
        "(line 3480,col 9)-(line 3482,col 9)",
        "(line 3483,col 9)-(line 3485,col 9)",
        "(line 3486,col 9)-(line 3489,col 9)",
        "(line 3490,col 9)-(line 3493,col 9)",
        "(line 3494,col 9)-(line 3496,col 9)",
        "(line 3497,col 9)-(line 3500,col 9)",
        "(line 3501,col 9)-(line 3504,col 9)",
        "(line 3505,col 9)-(line 3508,col 9)",
        "(line 3509,col 9)-(line 3512,col 9)",
        "(line 3513,col 9)-(line 3515,col 9)",
        "(line 3516,col 9)-(line 3518,col 9)",
        "(line 3519,col 9)-(line 3521,col 9)",
        "(line 3522,col 9)-(line 3525,col 9)",
        "(line 3526,col 9)-(line 3529,col 9)",
        "(line 3530,col 9)-(line 3532,col 9)",
        "(line 3533,col 9)-(line 3535,col 9)",
        "(line 3536,col 9)-(line 3539,col 9)",
        "(line 3540,col 9)-(line 3543,col 9)",
        "(line 3544,col 9)-(line 3547,col 9)",
        "(line 3548,col 9)-(line 3551,col 9)",
        "(line 3552,col 9)-(line 3554,col 9)",
        "(line 3555,col 9)-(line 3557,col 9)",
        "(line 3558,col 9)-(line 3560,col 9)",
        "(line 3561,col 9)-(line 3563,col 9)",
        "(line 3564,col 9)-(line 3566,col 9)",
        "(line 3567,col 9)-(line 3569,col 9)",
        "(line 3570,col 9)-(line 3572,col 9)",
        "(line 3573,col 9)-(line 3575,col 9)",
        "(line 3576,col 9)-(line 3578,col 9)",
        "(line 3579,col 9)-(line 3582,col 9)",
        "(line 3583,col 9)-(line 3586,col 9)",
        "(line 3587,col 9)-(line 3589,col 9)",
        "(line 3590,col 9)-(line 3592,col 9)",
        "(line 3593,col 9)-(line 3595,col 9)",
        "(line 3596,col 9)-(line 3599,col 9)",
        "(line 3600,col 9)-(line 3603,col 9)",
        "(line 3604,col 9)-(line 3607,col 9)",
        "(line 3608,col 9)-(line 3610,col 9)",
        "(line 3611,col 9)-(line 3614,col 9)",
        "(line 3615,col 9)-(line 3618,col 9)",
        "(line 3619,col 9)-(line 3622,col 9)",
        "(line 3624,col 9)-(line 3624,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.clone()",
      "begin_line": 3635,
      "end_line": 3658,
      "comment": "\r\n     * Returns a clone of the plot.\r\n     *\r\n     * @return A clone.\r\n     *\r\n     * @throws CloneNotSupportedException if some component of the plot does\r\n     *         not support cloning.\r\n     ",
      "child_ranges": [
        "(line 3636,col 9)-(line 3636,col 48)",
        "(line 3637,col 9)-(line 3639,col 9)",
        "(line 3640,col 9)-(line 3643,col 9)",
        "(line 3644,col 9)-(line 3644,col 75)",
        "(line 3645,col 9)-(line 3648,col 9)",
        "(line 3649,col 9)-(line 3652,col 9)",
        "(line 3653,col 9)-(line 3656,col 9)",
        "(line 3657,col 9)-(line 3657,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 3667,
      "end_line": 3681,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
      "child_ranges": [
        "(line 3668,col 9)-(line 3668,col 36)",
        "(line 3669,col 9)-(line 3669,col 66)",
        "(line 3670,col 9)-(line 3670,col 73)",
        "(line 3671,col 9)-(line 3671,col 75)",
        "(line 3672,col 9)-(line 3672,col 61)",
        "(line 3673,col 9)-(line 3673,col 60)",
        "(line 3674,col 9)-(line 3674,col 70)",
        "(line 3675,col 9)-(line 3675,col 67)",
        "(line 3676,col 9)-(line 3676,col 69)",
        "(line 3677,col 9)-(line 3677,col 66)",
        "(line 3678,col 9)-(line 3678,col 64)",
        "(line 3679,col 9)-(line 3679,col 66)",
        "(line 3680,col 9)-(line 3680,col 65)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.readObject(java.io.ObjectInputStream)",
      "begin_line": 3691,
      "end_line": 3706,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
      "child_ranges": [
        "(line 3693,col 9)-(line 3693,col 35)",
        "(line 3694,col 9)-(line 3694,col 66)",
        "(line 3695,col 9)-(line 3695,col 73)",
        "(line 3696,col 9)-(line 3696,col 75)",
        "(line 3697,col 9)-(line 3697,col 61)",
        "(line 3698,col 9)-(line 3698,col 60)",
        "(line 3699,col 9)-(line 3699,col 70)",
        "(line 3700,col 9)-(line 3700,col 67)",
        "(line 3701,col 9)-(line 3701,col 69)",
        "(line 3702,col 9)-(line 3702,col 66)",
        "(line 3703,col 9)-(line 3703,col 64)",
        "(line 3704,col 9)-(line 3704,col 66)",
        "(line 3705,col 9)-(line 3705,col 65)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.PiePlot.getSelectedItemAttributes()",
      "begin_line": 3708,
      "end_line": 3710,
      "comment": "",
      "child_ranges": [
        "(line 3709,col 9)-(line 3709,col 43)"
      ]
    }
  ]
}