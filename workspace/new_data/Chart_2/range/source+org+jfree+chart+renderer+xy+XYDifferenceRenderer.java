{
  "filepath": "/tmp/Chart-2b/source/org/jfree/chart/renderer/xy/XYDifferenceRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "XYDifferenceRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "org.jfree.chart.renderer.xy.XYItemRenderer",
        "org.jfree.chart.util.PublicCloneable"
      ],
      "begin_line": 123,
      "end_line": 1226,
      "comment": "\r\n * A renderer for an {@link XYPlot} that highlights the differences between two\r\n * series.  The example shown here is generated by the\r\n * \u003ccode\u003eDifferenceChartDemo1.java\u003c/code\u003e program included in the JFreeChart\r\n * demo collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/XYDifferenceRendererSample.png\"\r\n * alt\u003d\"XYDifferenceRendererSample.png\" /\u003e\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 127,
      "end_line": 127,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "positivePaint"
      ],
      "begin_line": 130,
      "end_line": 130,
      "comment": " The paint used to highlight positive differences (y(0) \u003e y(1)). "
    },
    {
      "type": "field",
      "varNames": [
        "negativePaint"
      ],
      "begin_line": 133,
      "end_line": 133,
      "comment": " The paint used to highlight negative differences (y(0) \u003c y(1)). "
    },
    {
      "type": "field",
      "varNames": [
        "shapesVisible"
      ],
      "begin_line": 136,
      "end_line": 136,
      "comment": " Display shapes at each point? "
    },
    {
      "type": "field",
      "varNames": [
        "legendLine"
      ],
      "begin_line": 139,
      "end_line": 139,
      "comment": " The shape to display in the legend item. "
    },
    {
      "type": "field",
      "varNames": [
        "roundXCoordinates"
      ],
      "begin_line": 150,
      "end_line": 150,
      "comment": "\r\n     * This flag controls whether or not the x-coordinates (in Java2D space)\r\n     * are rounded to integers.  When set to true, this can avoid the vertical\r\n     * striping that anti-aliasing can generate.  However, the rounding may not\r\n     * be appropriate for output in high resolution formats (for example,\r\n     * vector graphics formats such as SVG and PDF).\r\n     *\r\n     * @since 1.0.4\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.XYDifferenceRenderer()",
      "begin_line": 155,
      "end_line": 157,
      "comment": "\r\n     * Creates a new renderer with default attributes.\r\n     ",
      "child_ranges": [
        "(line 156,col 9)-(line 156,col 44)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.XYDifferenceRenderer(java.awt.Paint, java.awt.Paint, boolean)",
      "begin_line": 168,
      "end_line": 183,
      "comment": "\r\n     * Creates a new renderer.\r\n     *\r\n     * @param positivePaint  the highlight color for positive differences\r\n     *                       (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     * @param negativePaint  the highlight color for negative differences\r\n     *                       (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     * @param shapes  draw shapes?\r\n     ",
      "child_ranges": [
        "(line 170,col 9)-(line 173,col 9)",
        "(line 174,col 9)-(line 177,col 9)",
        "(line 178,col 9)-(line 178,col 43)",
        "(line 179,col 9)-(line 179,col 43)",
        "(line 180,col 9)-(line 180,col 36)",
        "(line 181,col 9)-(line 181,col 65)",
        "(line 182,col 9)-(line 182,col 39)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.getPositivePaint()",
      "begin_line": 192,
      "end_line": 194,
      "comment": "\r\n     * Returns the paint used to highlight positive differences.\r\n     *\r\n     * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setPositivePaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 193,col 9)-(line 193,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.setPositivePaint(java.awt.Paint)",
      "begin_line": 204,
      "end_line": 210,
      "comment": "\r\n     * Sets the paint used to highlight positive differences and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getPositivePaint()\r\n     ",
      "child_ranges": [
        "(line 205,col 9)-(line 207,col 9)",
        "(line 208,col 9)-(line 208,col 35)",
        "(line 209,col 9)-(line 209,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.getNegativePaint()",
      "begin_line": 219,
      "end_line": 221,
      "comment": "\r\n     * Returns the paint used to highlight negative differences.\r\n     *\r\n     * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setNegativePaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 220,col 9)-(line 220,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.setNegativePaint(java.awt.Paint)",
      "begin_line": 230,
      "end_line": 236,
      "comment": "\r\n     * Sets the paint used to highlight negative differences.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getNegativePaint()\r\n     ",
      "child_ranges": [
        "(line 231,col 9)-(line 233,col 9)",
        "(line 234,col 9)-(line 234,col 35)",
        "(line 235,col 9)-(line 235,col 55)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.getShapesVisible()",
      "begin_line": 246,
      "end_line": 248,
      "comment": "\r\n     * Returns a flag that controls whether or not shapes are drawn for each\r\n     * data value.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setShapesVisible(boolean)\r\n     ",
      "child_ranges": [
        "(line 247,col 9)-(line 247,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.setShapesVisible(boolean)",
      "begin_line": 259,
      "end_line": 262,
      "comment": "\r\n     * Sets a flag that controls whether or not shapes are drawn for each\r\n     * data value, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getShapesVisible()\r\n     ",
      "child_ranges": [
        "(line 260,col 9)-(line 260,col 34)",
        "(line 261,col 9)-(line 261,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.getLegendLine()",
      "begin_line": 271,
      "end_line": 273,
      "comment": "\r\n     * Returns the shape used to represent a line in the legend.\r\n     *\r\n     * @return The legend line (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLegendLine(Shape)\r\n     ",
      "child_ranges": [
        "(line 272,col 9)-(line 272,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.setLegendLine(java.awt.Shape)",
      "begin_line": 283,
      "end_line": 289,
      "comment": "\r\n     * Sets the shape used as a line in each legend item and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param line  the line (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getLegendLine()\r\n     ",
      "child_ranges": [
        "(line 284,col 9)-(line 286,col 9)",
        "(line 287,col 9)-(line 287,col 31)",
        "(line 288,col 9)-(line 288,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.getRoundXCoordinates()",
      "begin_line": 301,
      "end_line": 303,
      "comment": "\r\n     * Returns the flag that controls whether or not the x-coordinates (in\r\n     * Java2D space) are rounded to integer values.\r\n     *\r\n     * @return The flag.\r\n     *\r\n     * @since 1.0.4\r\n     *\r\n     * @see #setRoundXCoordinates(boolean)\r\n     ",
      "child_ranges": [
        "(line 302,col 9)-(line 302,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.setRoundXCoordinates(boolean)",
      "begin_line": 316,
      "end_line": 319,
      "comment": "\r\n     * Sets the flag that controls whether or not the x-coordinates (in\r\n     * Java2D space) are rounded to integer values, and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param round  the new flag value.\r\n     *\r\n     * @since 1.0.4\r\n     *\r\n     * @see #getRoundXCoordinates()\r\n     ",
      "child_ranges": [
        "(line 317,col 9)-(line 317,col 39)",
        "(line 318,col 9)-(line 318,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 337,
      "end_line": 348,
      "comment": "\r\n     * Initialises the renderer and returns a state object that should be\r\n     * passed to subsequent calls to the drawItem() method.  This method will\r\n     * be called before the first item is rendered, giving the renderer an\r\n     * opportunity to initialise any state information it wants to maintain.\r\n     * The renderer can do nothing if it chooses.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area inside the axes.\r\n     * @param plot  the plot.\r\n     * @param data  the data.\r\n     * @param info  an optional info collection object to return data back to\r\n     *              the caller.\r\n     *\r\n     * @return A state object.\r\n     ",
      "child_ranges": [
        "(line 343,col 9)-(line 344,col 22)",
        "(line 345,col 9)-(line 345,col 48)",
        "(line 346,col 9)-(line 346,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.getPassCount()",
      "begin_line": 356,
      "end_line": 358,
      "comment": "\r\n     * Returns \u003ccode\u003e2\u003c/code\u003e, the number of passes required by the renderer.\r\n     * The {@link XYPlot} will run through the dataset this number of times.\r\n     *\r\n     * @return The number of passes required by the renderer.\r\n     ",
      "child_ranges": [
        "(line 357,col 9)-(line 357,col 17)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, int)",
      "begin_line": 375,
      "end_line": 389,
      "comment": "\r\n     * Draws the visual representation of a single data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the area within which the data is being drawn.\r\n     * @param plot  the plot (can be used to obtain standard color\r\n     *              information etc).\r\n     * @param domainAxis  the domain (horizontal) axis.\r\n     * @param rangeAxis  the range (vertical) axis.\r\n     * @param dataset  the dataset.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 380,col 9)-(line 387,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.drawItemPass0(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean)",
      "begin_line": 408,
      "end_line": 827,
      "comment": "\r\n     * Draws the visual representation of a single data item, first pass.\r\n     *\r\n     * @param x_graphics  the graphics device.\r\n     * @param state  the rendering state.\r\n     * @param x_dataArea  the area within which the data is being drawn.\r\n     * @param x_plot  the plot (can be used to obtain standard color\r\n     *                information etc).\r\n     * @param x_domainAxis  the domain (horizontal) axis.\r\n     * @param x_rangeAxis  the range (vertical) axis.\r\n     * @param x_dataset  the dataset.\r\n     * @param x_series  the series index (zero-based).\r\n     * @param x_item  the item index (zero-based).\r\n     * @param selected  is the data item selected?\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 413,col 9)-(line 415,col 9)",
        "(line 417,col 9)-(line 417,col 76)",
        "(line 420,col 9)-(line 422,col 9)",
        "(line 425,col 9)-(line 427,col 9)",
        "(line 430,col 9)-(line 430,col 53)",
        "(line 431,col 9)-(line 431,col 53)",
        "(line 432,col 9)-(line 432,col 53)",
        "(line 433,col 9)-(line 433,col 53)",
        "(line 434,col 9)-(line 434,col 53)",
        "(line 435,col 9)-(line 435,col 53)",
        "(line 438,col 9)-(line 438,col 35)",
        "(line 439,col 9)-(line 439,col 59)",
        "(line 440,col 9)-(line 440,col 38)",
        "(line 441,col 9)-(line 441,col 38)",
        "(line 442,col 9)-(line 442,col 38)",
        "(line 443,col 9)-(line 443,col 38)",
        "(line 444,col 9)-(line 444,col 58)",
        "(line 445,col 9)-(line 445,col 58)",
        "(line 447,col 9)-(line 447,col 38)",
        "(line 448,col 9)-(line 448,col 38)",
        "(line 449,col 9)-(line 449,col 41)",
        "(line 450,col 9)-(line 450,col 41)",
        "(line 451,col 9)-(line 451,col 41)",
        "(line 452,col 9)-(line 452,col 41)",
        "(line 453,col 9)-(line 453,col 61)",
        "(line 454,col 9)-(line 454,col 61)",
        "(line 457,col 9)-(line 473,col 9)",
        "(line 475,col 9)-(line 475,col 48)",
        "(line 476,col 9)-(line 476,col 47)",
        "(line 477,col 9)-(line 477,col 48)",
        "(line 478,col 9)-(line 478,col 48)",
        "(line 479,col 9)-(line 479,col 48)",
        "(line 480,col 9)-(line 480,col 47)",
        "(line 481,col 9)-(line 481,col 48)",
        "(line 482,col 9)-(line 482,col 48)",
        "(line 483,col 9)-(line 483,col 48)",
        "(line 485,col 9)-(line 485,col 27)",
        "(line 488,col 9)-(line 488,col 38)",
        "(line 489,col 9)-(line 489,col 38)",
        "(line 490,col 9)-(line 490,col 38)",
        "(line 491,col 9)-(line 491,col 38)",
        "(line 494,col 9)-(line 494,col 42)",
        "(line 495,col 9)-(line 568,col 9)",
        "(line 571,col 9)-(line 775,col 9)",
        "(line 778,col 9)-(line 784,col 9)",
        "(line 786,col 9)-(line 792,col 9)",
        "(line 796,col 9)-(line 797,col 46)",
        "(line 798,col 9)-(line 799,col 49)",
        "(line 800,col 9)-(line 801,col 46)",
        "(line 802,col 9)-(line 803,col 49)",
        "(line 806,col 9)-(line 806,col 40)",
        "(line 807,col 9)-(line 807,col 40)",
        "(line 808,col 9)-(line 808,col 46)",
        "(line 809,col 9)-(line 809,col 46)",
        "(line 813,col 9)-(line 813,col 40)",
        "(line 814,col 9)-(line 814,col 40)",
        "(line 817,col 9)-(line 817,col 44)",
        "(line 818,col 9)-(line 818,col 44)",
        "(line 819,col 9)-(line 819,col 43)",
        "(line 820,col 9)-(line 820,col 43)",
        "(line 823,col 9)-(line 824,col 55)",
        "(line 825,col 9)-(line 826,col 67)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.drawItemPass1(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean)",
      "begin_line": 848,
      "end_line": 951,
      "comment": "\r\n     * Draws the visual representation of a single data item, second pass.  In\r\n     * the second pass, the renderer draws the lines and shapes for the\r\n     * individual points in the two series.\r\n     *\r\n     * @param x_graphics  the graphics device.\r\n     * @param state  the rendering state.\r\n     * @param x_dataArea  the area within which the data is being drawn.\r\n     * @param x_plot  the plot (can be used to obtain standard color\r\n     *         information etc).\r\n     * @param x_domainAxis  the domain (horizontal) axis.\r\n     * @param x_rangeAxis  the range (vertical) axis.\r\n     * @param x_dataset  the dataset.\r\n     * @param x_series  the series index (zero-based).\r\n     * @param x_item  the item index (zero-based).\r\n     * @param selected  is the data item selected?\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 853,col 9)-(line 853,col 34)",
        "(line 854,col 9)-(line 854,col 43)",
        "(line 855,col 9)-(line 857,col 9)",
        "(line 859,col 9)-(line 859,col 73)",
        "(line 860,col 9)-(line 860,col 74)",
        "(line 861,col 9)-(line 861,col 43)",
        "(line 862,col 9)-(line 862,col 45)",
        "(line 864,col 9)-(line 864,col 69)",
        "(line 865,col 9)-(line 865,col 72)",
        "(line 866,col 9)-(line 866,col 71)",
        "(line 868,col 9)-(line 868,col 60)",
        "(line 869,col 9)-(line 869,col 60)",
        "(line 870,col 9)-(line 871,col 38)",
        "(line 872,col 9)-(line 873,col 37)",
        "(line 875,col 9)-(line 890,col 9)",
        "(line 893,col 9)-(line 915,col 9)",
        "(line 918,col 9)-(line 921,col 9)",
        "(line 923,col 9)-(line 923,col 72)",
        "(line 924,col 9)-(line 924,col 70)",
        "(line 925,col 9)-(line 925,col 68)",
        "(line 926,col 9)-(line 927,col 75)",
        "(line 929,col 9)-(line 931,col 9)",
        "(line 933,col 9)-(line 934,col 65)",
        "(line 935,col 9)-(line 936,col 64)",
        "(line 938,col 9)-(line 938,col 29)",
        "(line 939,col 9)-(line 944,col 9)",
        "(line 946,col 9)-(line 950,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.isEitherSeriesDegenerate(org.jfree.data.xy.XYDataset, boolean)",
      "begin_line": 962,
      "end_line": 971,
      "comment": "\r\n     * Determines if a dataset is degenerate.  A degenerate dataset is a\r\n     * dataset where either series has less than two (2) points.\r\n     *\r\n     * @param x_dataset  the dataset.\r\n     * @param x_impliedZeroSubtrahend  if false, do not check the subtrahend\r\n     *\r\n     * @return true if the dataset is degenerate.\r\n     ",
      "child_ranges": [
        "(line 965,col 9)-(line 967,col 9)",
        "(line 969,col 9)-(line 970,col 52)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.areSeriesDisjoint(org.jfree.data.xy.XYDataset)",
      "begin_line": 981,
      "end_line": 994,
      "comment": "\r\n     * Determines if the two (2) series are disjoint.\r\n     * Disjoint series do not overlap in the domain space.\r\n     *\r\n     * @param x_dataset  the dataset.\r\n     *\r\n     * @return true if the dataset is degenerate.\r\n     ",
      "child_ranges": [
        "(line 983,col 9)-(line 983,col 59)",
        "(line 984,col 9)-(line 984,col 59)",
        "(line 985,col 9)-(line 985,col 80)",
        "(line 987,col 9)-(line 987,col 62)",
        "(line 988,col 9)-(line 988,col 62)",
        "(line 989,col 9)-(line 990,col 43)",
        "(line 992,col 9)-(line 993,col 56)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.createPolygon(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, boolean, java.util.LinkedList, java.util.LinkedList)",
      "begin_line": 1012,
      "end_line": 1092,
      "comment": "\r\n     * Draws the visual representation of a polygon\r\n     *\r\n     * @param x_graphics  the graphics device.\r\n     * @param x_dataArea  the area within which the data is being drawn.\r\n     * @param x_plot  the plot (can be used to obtain standard color\r\n     *                information etc).\r\n     * @param x_domainAxis  the domain (horizontal) axis.\r\n     * @param x_rangeAxis  the range (vertical) axis.\r\n     * @param x_positive  indicates if the polygon is positive (true) or\r\n     *                    negative (false).\r\n     * @param x_xValues  a linked list of the x values (expects values to be\r\n     *                   of type Double).\r\n     * @param x_yValues  a linked list of the y values (expects values to be\r\n     *                   of type Double).\r\n     ",
      "child_ranges": [
        "(line 1021,col 9)-(line 1021,col 69)",
        "(line 1022,col 9)-(line 1022,col 72)",
        "(line 1023,col 9)-(line 1023,col 71)",
        "(line 1025,col 9)-(line 1025,col 49)",
        "(line 1026,col 9)-(line 1026,col 49)",
        "(line 1028,col 9)-(line 1028,col 47)",
        "(line 1030,col 9)-(line 1085,col 9)",
        "(line 1087,col 9)-(line 1091,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.getLegendItem(int, int)",
      "begin_line": 1103,
      "end_line": 1145,
      "comment": "\r\n     * Returns a default legend item for the specified series.  Subclasses\r\n     * should override this method to generate customised items.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return A legend item for the series.\r\n     ",
      "child_ranges": [
        "(line 1104,col 9)-(line 1104,col 33)",
        "(line 1105,col 9)-(line 1105,col 29)",
        "(line 1106,col 9)-(line 1141,col 9)",
        "(line 1143,col 9)-(line 1143,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.equals(java.lang.Object)",
      "begin_line": 1154,
      "end_line": 1181,
      "comment": "\r\n     * Tests this renderer for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 1155,col 9)-(line 1157,col 9)",
        "(line 1158,col 9)-(line 1160,col 9)",
        "(line 1161,col 9)-(line 1163,col 9)",
        "(line 1164,col 9)-(line 1164,col 63)",
        "(line 1165,col 9)-(line 1167,col 9)",
        "(line 1168,col 9)-(line 1170,col 9)",
        "(line 1171,col 9)-(line 1173,col 9)",
        "(line 1174,col 9)-(line 1176,col 9)",
        "(line 1177,col 9)-(line 1179,col 9)",
        "(line 1180,col 9)-(line 1180,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.clone()",
      "begin_line": 1190,
      "end_line": 1194,
      "comment": "\r\n     * Returns a clone of the renderer.\r\n     *\r\n     * @return A clone.\r\n     *\r\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\r\n     ",
      "child_ranges": [
        "(line 1191,col 9)-(line 1191,col 74)",
        "(line 1192,col 9)-(line 1192,col 65)",
        "(line 1193,col 9)-(line 1193,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 1203,
      "end_line": 1208,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
      "child_ranges": [
        "(line 1204,col 9)-(line 1204,col 36)",
        "(line 1205,col 9)-(line 1205,col 63)",
        "(line 1206,col 9)-(line 1206,col 63)",
        "(line 1207,col 9)-(line 1207,col 60)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.readObject(java.io.ObjectInputStream)",
      "begin_line": 1218,
      "end_line": 1224,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
      "child_ranges": [
        "(line 1220,col 9)-(line 1220,col 35)",
        "(line 1221,col 9)-(line 1221,col 63)",
        "(line 1222,col 9)-(line 1222,col 63)",
        "(line 1223,col 9)-(line 1223,col 60)"
      ]
    }
  ]
}