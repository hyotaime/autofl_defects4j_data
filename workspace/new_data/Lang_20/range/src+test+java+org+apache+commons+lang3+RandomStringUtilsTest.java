{
  "filepath": "/tmp/Lang-20b/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "RandomStringUtilsTest",
      "is_interface": false,
      "parent_types": [
        "junit.framework.TestCase"
      ],
      "begin_line": 28,
      "end_line": 332,
      "comment": "\n * Unit tests {@link org.apache.commons.lang3.RandomStringUtils}.\n *\n * @version $Id$\n "
    },
    {
      "type": "constructor",
      "signature": "org.apache.commons.lang3.RandomStringUtilsTest.RandomStringUtilsTest(java.lang.String)",
      "begin_line": 32,
      "end_line": 34,
      "comment": "\n     * Construct a new instance of RandomStringUtilsTest with the specified name\n     ",
      "child_ranges": [
        "(line 33,col 9)-(line 33,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testConstructor()",
      "begin_line": 37,
      "end_line": 44,
      "comment": "-----------------------------------------------------------------------",
      "child_ranges": [
        "(line 38,col 9)-(line 38,col 47)",
        "(line 39,col 9)-(line 39,col 82)",
        "(line 40,col 9)-(line 40,col 37)",
        "(line 41,col 9)-(line 41,col 70)",
        "(line 42,col 9)-(line 42,col 86)",
        "(line 43,col 9)-(line 43,col 86)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils()",
      "begin_line": 50,
      "end_line": 127,
      "comment": "\n     * Test the implementation\n     ",
      "child_ranges": [
        "(line 51,col 9)-(line 51,col 49)",
        "(line 52,col 9)-(line 52,col 59)",
        "(line 53,col 9)-(line 53,col 49)",
        "(line 54,col 9)-(line 54,col 59)",
        "(line 55,col 9)-(line 55,col 53)",
        "(line 57,col 9)-(line 57,col 47)",
        "(line 58,col 9)-(line 58,col 64)",
        "(line 59,col 9)-(line 61,col 9)",
        "(line 62,col 9)-(line 62,col 47)",
        "(line 63,col 9)-(line 63,col 53)",
        "(line 65,col 9)-(line 65,col 52)",
        "(line 66,col 9)-(line 66,col 62)",
        "(line 67,col 9)-(line 69,col 9)",
        "(line 70,col 9)-(line 70,col 52)",
        "(line 71,col 9)-(line 71,col 53)",
        "(line 73,col 9)-(line 73,col 54)",
        "(line 74,col 9)-(line 74,col 64)",
        "(line 75,col 9)-(line 77,col 9)",
        "(line 78,col 9)-(line 78,col 52)",
        "(line 79,col 9)-(line 79,col 53)",
        "(line 81,col 9)-(line 81,col 49)",
        "(line 82,col 9)-(line 82,col 59)",
        "(line 83,col 9)-(line 85,col 9)",
        "(line 86,col 9)-(line 86,col 49)",
        "(line 87,col 9)-(line 87,col 53)",
        "(line 89,col 9)-(line 89,col 31)",
        "(line 90,col 9)-(line 90,col 47)",
        "(line 91,col 9)-(line 91,col 65)",
        "(line 92,col 9)-(line 94,col 9)",
        "(line 95,col 9)-(line 95,col 47)",
        "(line 96,col 9)-(line 96,col 53)",
        "(line 98,col 9)-(line 98,col 57)",
        "(line 99,col 9)-(line 99,col 59)",
        "(line 100,col 9)-(line 100,col 57)",
        "(line 101,col 9)-(line 101,col 59)",
        "(line 102,col 9)-(line 102,col 53)",
        "(line 104,col 9)-(line 104,col 25)",
        "(line 105,col 9)-(line 105,col 61)",
        "(line 106,col 9)-(line 106,col 66)",
        "(line 107,col 9)-(line 109,col 9)",
        "(line 110,col 9)-(line 110,col 47)",
        "(line 111,col 9)-(line 111,col 53)",
        "(line 113,col 9)-(line 113,col 57)",
        "(line 114,col 9)-(line 114,col 59)",
        "(line 115,col 9)-(line 115,col 57)",
        "(line 116,col 9)-(line 116,col 59)",
        "(line 117,col 9)-(line 117,col 53)",
        "(line 119,col 9)-(line 119,col 47)",
        "(line 120,col 9)-(line 120,col 78)",
        "(line 121,col 9)-(line 121,col 78)",
        "(line 122,col 9)-(line 122,col 46)",
        "(line 124,col 9)-(line 124,col 41)",
        "(line 125,col 9)-(line 125,col 55)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testExceptions()",
      "begin_line": 128,
      "end_line": 157,
      "comment": "",
      "child_ranges": [
        "(line 129,col 9)-(line 132,col 48)",
        "(line 133,col 9)-(line 136,col 48)",
        "(line 137,col 9)-(line 140,col 48)",
        "(line 141,col 9)-(line 144,col 48)",
        "(line 145,col 9)-(line 148,col 48)",
        "(line 149,col 9)-(line 152,col 48)",
        "(line 153,col 9)-(line 156,col 48)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphaNumeric()",
      "begin_line": 163,
      "end_line": 163,
      "comment": "\n     * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric\n     * This test will fail randomly with probability \u003d 6 * (61/62)**1000 ~ 5.2E-7\n     ",
      "child_ranges": []
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomNumeric()",
      "begin_line": 188,
      "end_line": 188,
      "comment": "\n     * Make sure \u00270\u0027 and \u00279\u0027 are generated by randomNumeric\n     * This test will fail randomly with probability \u003d 2 * (9/10)**1000 ~ 3.5E-46\n     ",
      "child_ranges": []
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphabetic()",
      "begin_line": 213,
      "end_line": 213,
      "comment": "\n     * Make sure boundary alpha characters are generated by randomAlphabetic\n     * This test will fail randomly with probability \u003d 4 * (51/52)**1000 ~ 1.58E-8\n     ",
      "child_ranges": []
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomAscii()",
      "begin_line": 238,
      "end_line": 238,
      "comment": "\n     * Make sure 32 and 127 are generated by randomNumeric\n     * This test will fail randomly with probability \u003d 2*(95/96)**1000 ~ 5.7E-5\n     ",
      "child_ranges": []
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsHomog()",
      "begin_line": 266,
      "end_line": 266,
      "comment": " \n     * Test homogeneity of random strings generated --\n     * i.e., test that characters show up with expected frequencies\n     * in generated strings.  Will fail randomly about 1 in 1000 times.\n     * Repeated failures indicate a problem.\n     ",
      "child_ranges": []
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.RandomStringUtilsTest.chiSquare(int[], int[])",
      "begin_line": 295,
      "end_line": 303,
      "comment": "\n     * Computes Chi-Square statistic given observed and expected counts\n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     ",
      "child_ranges": [
        "(line 296,col 9)-(line 296,col 28)",
        "(line 297,col 9)-(line 297,col 26)",
        "(line 298,col 9)-(line 301,col 9)",
        "(line 302,col 9)-(line 302,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testLang100()",
      "begin_line": 313,
      "end_line": 331,
      "comment": "\n     * Checks if the string got by {@link RandomStringUtils#random(int)}\n     * can be converted to UTF-8 and back without loss.\n     *\n     * @see \u003ca href\u003d\"http://issues.apache.org/jira/browse/LANG-100\"\u003eLANG-100\u003c/a\u003e\n     *\n     * @throws Exception\n     ",
      "child_ranges": [
        "(line 314,col 9)-(line 314,col 24)",
        "(line 315,col 9)-(line 315,col 34)",
        "(line 316,col 9)-(line 316,col 53)",
        "(line 317,col 9)-(line 317,col 47)",
        "(line 318,col 9)-(line 318,col 50)",
        "(line 321,col 9)-(line 326,col 9)",
        "(line 328,col 9)-(line 328,col 51)",
        "(line 330,col 9)-(line 330,col 33)"
      ]
    }
  ]
}