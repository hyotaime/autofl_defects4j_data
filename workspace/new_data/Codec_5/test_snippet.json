[
    {
        "class_name": "org.apache.commons.codec.DecoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/DecoderExceptionTest.java",
        "signature": "org.apache.commons.codec.DecoderExceptionTest.testConstructor0()",
        "snippet": "    public void testConstructor0() {\n        DecoderException e = new DecoderException();\n        assertNull(e.getMessage());\n        assertNull(e.getCause());\n    }",
        "begin_line": 34,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 52)",
            "(line 36,col 9)-(line 36,col 35)",
            "(line 37,col 9)-(line 37,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.DecoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/DecoderExceptionTest.java",
        "signature": "org.apache.commons.codec.DecoderExceptionTest.testConstructorString()",
        "snippet": "    public void testConstructorString() {\n        DecoderException e = new DecoderException(MSG);\n        assertEquals(MSG, e.getMessage());\n        assertNull(e.getCause());\n    }",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 55)",
            "(line 42,col 9)-(line 42,col 42)",
            "(line 43,col 9)-(line 43,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.DecoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/DecoderExceptionTest.java",
        "signature": "org.apache.commons.codec.DecoderExceptionTest.testConstructorStringThrowable()",
        "snippet": "    public void testConstructorStringThrowable() {\n        DecoderException e = new DecoderException(MSG, t);\n        assertEquals(MSG, e.getMessage());\n        assertEquals(t, e.getCause());\n    }",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 58)",
            "(line 48,col 9)-(line 48,col 42)",
            "(line 49,col 9)-(line 49,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.DecoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/DecoderExceptionTest.java",
        "signature": "org.apache.commons.codec.DecoderExceptionTest.testConstructorThrowable()",
        "snippet": "    public void testConstructorThrowable() {\n        DecoderException e = new DecoderException(t);\n        assertEquals(t.getClass().getName(), e.getMessage());\n        assertEquals(t, e.getCause());\n    }",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 53)",
            "(line 54,col 9)-(line 54,col 61)",
            "(line 55,col 9)-(line 55,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/CharEncodingTest.java",
        "signature": "org.apache.commons.codec.CharEncodingTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        new CharEncoding();\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "\n     * We could make the constructor private in the future, it's a matter a style.\n     ",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/CharEncodingTest.java",
        "signature": "org.apache.commons.codec.CharEncodingTest.testIso8859_1()",
        "snippet": "    public void testIso8859_1() {\n        Assert.assertEquals(\"ISO-8859-1\", CharEncoding.ISO_8859_1);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/CharEncodingTest.java",
        "signature": "org.apache.commons.codec.CharEncodingTest.testUsAscii()",
        "snippet": "    public void testUsAscii() {\n        Assert.assertEquals(\"US-ASCII\", CharEncoding.US_ASCII);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/CharEncodingTest.java",
        "signature": "org.apache.commons.codec.CharEncodingTest.testUtf16()",
        "snippet": "    public void testUtf16() {\n        Assert.assertEquals(\"UTF-16\", CharEncoding.UTF_16);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/CharEncodingTest.java",
        "signature": "org.apache.commons.codec.CharEncodingTest.testUtf16Be()",
        "snippet": "    public void testUtf16Be() {\n        Assert.assertEquals(\"UTF-16BE\", CharEncoding.UTF_16BE);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/CharEncodingTest.java",
        "signature": "org.apache.commons.codec.CharEncodingTest.testUtf16Le()",
        "snippet": "    public void testUtf16Le() {\n        Assert.assertEquals(\"UTF-16LE\", CharEncoding.UTF_16LE);\n    }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/CharEncodingTest.java",
        "signature": "org.apache.commons.codec.CharEncodingTest.testUtf8()",
        "snippet": "    public void testUtf8() {\n        Assert.assertEquals(\"UTF-8\", CharEncoding.UTF_8);\n    }",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.BinaryEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.BinaryEncoderAbstractTest.BinaryEncoderAbstractTest(java.lang.String)",
        "snippet": "    public BinaryEncoderAbstractTest(String name) {\n        super(name);\n    }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.BinaryEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.BinaryEncoderAbstractTest.makeEncoder()",
        "snippet": "    protected abstract BinaryEncoder makeEncoder();",
        "begin_line": 32,
        "end_line": 32,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.codec.BinaryEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.BinaryEncoderAbstractTest.testEncodeEmpty()",
        "snippet": "    public void testEncodeEmpty() throws Exception {\n        BinaryEncoder encoder = makeEncoder();\n        encoder.encode(new byte[0]);\n    }        ",
        "begin_line": 36,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 46)",
            "(line 38,col 9)-(line 38,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.BinaryEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.BinaryEncoderAbstractTest.testEncodeNull()",
        "snippet": "    public void testEncodeNull() throws Exception {\n        BinaryEncoder encoder = makeEncoder();\n        try {\n            encoder.encode(null);\n        } catch (EncoderException ee) {\n            // An exception should be thrown\n        }\n    }        ",
        "begin_line": 41,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 46)",
            "(line 43,col 9)-(line 47,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.EncoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/EncoderExceptionTest.java",
        "signature": "org.apache.commons.codec.EncoderExceptionTest.testConstructor0()",
        "snippet": "    public void testConstructor0() {\n        EncoderException e = new EncoderException();\n        assertNull(e.getMessage());\n        assertNull(e.getCause());\n    }",
        "begin_line": 34,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 52)",
            "(line 36,col 9)-(line 36,col 35)",
            "(line 37,col 9)-(line 37,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.EncoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/EncoderExceptionTest.java",
        "signature": "org.apache.commons.codec.EncoderExceptionTest.testConstructorString()",
        "snippet": "    public void testConstructorString() {\n        EncoderException e = new EncoderException(MSG);\n        assertEquals(MSG, e.getMessage());\n        assertNull(e.getCause());\n    }",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 55)",
            "(line 42,col 9)-(line 42,col 42)",
            "(line 43,col 9)-(line 43,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.EncoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/EncoderExceptionTest.java",
        "signature": "org.apache.commons.codec.EncoderExceptionTest.testConstructorStringThrowable()",
        "snippet": "    public void testConstructorStringThrowable() {\n        EncoderException e = new EncoderException(MSG, t);\n        assertEquals(MSG, e.getMessage());\n        assertEquals(t, e.getCause());\n    }",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 58)",
            "(line 48,col 9)-(line 48,col 42)",
            "(line 49,col 9)-(line 49,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.EncoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/EncoderExceptionTest.java",
        "signature": "org.apache.commons.codec.EncoderExceptionTest.testConstructorThrowable()",
        "snippet": "    public void testConstructorThrowable() {\n        EncoderException e = new EncoderException(t);\n        assertEquals(t.getClass().getName(), e.getMessage());\n        assertEquals(t, e.getCause());\n    }",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 53)",
            "(line 54,col 9)-(line 54,col 61)",
            "(line 55,col 9)-(line 55,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderComparatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/StringEncoderComparatorTest.java",
        "signature": "org.apache.commons.codec.StringEncoderComparatorTest.StringEncoderComparatorTest(java.lang.String)",
        "snippet": "    public StringEncoderComparatorTest(String name) {\n        super(name);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderComparatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/StringEncoderComparatorTest.java",
        "signature": "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorNoArgCon()",
        "snippet": "    public void testComparatorNoArgCon() throws Exception {\n        new StringEncoderComparator();\n    }        ",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderComparatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/StringEncoderComparatorTest.java",
        "signature": "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex()",
        "snippet": "    public void testComparatorWithSoundex() throws Exception {\n        StringEncoderComparator sCompare = \n            new StringEncoderComparator( new Soundex() );\n\n        assertTrue( \"O'Brien and O'Brian didn't come out with \" +\n                    \"the same Soundex, something must be wrong here\",\n                    0 == sCompare.compare( \"O'Brien\", \"O'Brian\" ) );\n    }",
        "begin_line": 45,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 47,col 57)",
            "(line 49,col 9)-(line 51,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderComparatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/StringEncoderComparatorTest.java",
        "signature": "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone()",
        "snippet": "    public void testComparatorWithDoubleMetaphone() throws Exception {\n        StringEncoderComparator sCompare =\n            new StringEncoderComparator( new DoubleMetaphone() );\n            \n        String[] testArray = { \"Jordan\", \"Sosa\", \"Prior\", \"Pryor\" };\n        List testList = Arrays.asList( testArray );        \n        \n        String[] controlArray = { \"Jordan\", \"Prior\", \"Pryor\", \"Sosa\" };\n\n        Collections.sort( testList, sCompare);            \n        \n        String[] resultArray = (String[]) testList.toArray(new String[0]);\n        \n        for( int i = 0; i < resultArray.length; i++) {\n            assertEquals( \"Result Array not Equal to Control Array at index: \" + i, controlArray[i], resultArray[i] );\n        }\n    }",
        "begin_line": 54,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 56,col 65)",
            "(line 58,col 9)-(line 58,col 68)",
            "(line 59,col 9)-(line 59,col 51)",
            "(line 61,col 9)-(line 61,col 71)",
            "(line 63,col 9)-(line 63,col 46)",
            "(line 65,col 9)-(line 65,col 74)",
            "(line 67,col 9)-(line 69,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderComparatorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/StringEncoderComparatorTest.java",
        "signature": "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput()",
        "snippet": "    public void testComparatorWithDoubleMetaphoneAndInvalidInput() throws Exception {\n        StringEncoderComparator sCompare =\n            new StringEncoderComparator( new DoubleMetaphone() );\n           \n        int compare = sCompare.compare(new Double(3.0), new Long(3));\n        assertEquals( \"Trying to compare objects that make no sense to the underlying encoder should return a zero compare code\",\n                                0, compare);        \n        \n    }",
        "begin_line": 72,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 74,col 65)",
            "(line 76,col 9)-(line 76,col 69)",
            "(line 77,col 9)-(line 78,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [
            "org.apache.commons.codec.language.DoubleMetaphoneTest",
            "org.apache.commons.codec.language.SoundexTest",
            "org.apache.commons.codec.language.RefinedSoundexTest",
            "org.apache.commons.codec.language.MetaphoneTest",
            "org.apache.commons.codec.language.CaverphoneTest"
        ],
        "src_path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.StringEncoderAbstractTest(java.lang.String)",
        "snippet": "    public StringEncoderAbstractTest(String name) {\n        super(name);\n    }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [
            "org.apache.commons.codec.language.DoubleMetaphoneTest",
            "org.apache.commons.codec.language.SoundexTest",
            "org.apache.commons.codec.language.RefinedSoundexTest",
            "org.apache.commons.codec.language.MetaphoneTest",
            "org.apache.commons.codec.language.CaverphoneTest"
        ],
        "src_path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.makeEncoder()",
        "snippet": "    protected abstract StringEncoder makeEncoder();",
        "begin_line": 34,
        "end_line": 34,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [
            "org.apache.commons.codec.language.DoubleMetaphoneTest",
            "org.apache.commons.codec.language.SoundexTest",
            "org.apache.commons.codec.language.RefinedSoundexTest",
            "org.apache.commons.codec.language.MetaphoneTest",
            "org.apache.commons.codec.language.CaverphoneTest"
        ],
        "src_path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.testEncodeEmpty()",
        "snippet": "    public void testEncodeEmpty() throws Exception {\n        Encoder encoder = makeEncoder();\n        encoder.encode(\"\");\n        encoder.encode(\" \");\n        encoder.encode(\"\\t\");\n    }        ",
        "begin_line": 38,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 40)",
            "(line 40,col 9)-(line 40,col 27)",
            "(line 41,col 9)-(line 41,col 28)",
            "(line 42,col 9)-(line 42,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [
            "org.apache.commons.codec.language.DoubleMetaphoneTest",
            "org.apache.commons.codec.language.SoundexTest",
            "org.apache.commons.codec.language.RefinedSoundexTest",
            "org.apache.commons.codec.language.MetaphoneTest",
            "org.apache.commons.codec.language.CaverphoneTest"
        ],
        "src_path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.testEncodeNull()",
        "snippet": "    public void testEncodeNull() throws Exception {\n        StringEncoder encoder = makeEncoder();\n        \n        try {\n            encoder.encode(null);\n        } catch (EncoderException ee) {\n            // An exception should be thrown\n        }\n    }        ",
        "begin_line": 45,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 46)",
            "(line 48,col 9)-(line 52,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [
            "org.apache.commons.codec.language.DoubleMetaphoneTest",
            "org.apache.commons.codec.language.SoundexTest",
            "org.apache.commons.codec.language.RefinedSoundexTest",
            "org.apache.commons.codec.language.MetaphoneTest",
            "org.apache.commons.codec.language.CaverphoneTest"
        ],
        "src_path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.testEncodeWithInvalidObject()",
        "snippet": "    public void testEncodeWithInvalidObject() throws Exception {\n\n        boolean exceptionThrown = false;\n        try {\n            StringEncoder encoder = makeEncoder();\n            encoder.encode( new Float( 3.4 ) );\n        } catch (Exception e) {\n            exceptionThrown = true;\n        }\n\n        assertTrue( \"An exception was not thrown when we tried to encode \" +\n                    \"a Float object\", exceptionThrown );\n    }",
        "begin_line": 55,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 40)",
            "(line 58,col 9)-(line 63,col 9)",
            "(line 65,col 9)-(line 66,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [
            "org.apache.commons.codec.language.DoubleMetaphoneTest",
            "org.apache.commons.codec.language.SoundexTest",
            "org.apache.commons.codec.language.RefinedSoundexTest",
            "org.apache.commons.codec.language.MetaphoneTest",
            "org.apache.commons.codec.language.CaverphoneTest"
        ],
        "src_path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.testLocaleIndependence()",
        "snippet": "    public void testLocaleIndependence() throws Exception {\n        StringEncoder encoder = makeEncoder();\n\n        String[] data = { \"I\", \"i\", };\n\n        Locale orig = Locale.getDefault();\n        Locale[] locales = { Locale.ENGLISH, new Locale(\"tr\"), Locale.getDefault() };\n\n        try {\n            for (int i = 0; i < data.length; i++) {\n                String ref = null;\n                for (int j = 0; j < locales.length; j++) {\n                    Locale.setDefault(locales[j]);\n                    if (j <= 0) {\n                        ref = encoder.encode(data[i]);\n                    } else {\n                        String cur = null;\n                        try {\n                            cur = encoder.encode(data[i]);\n                        } catch (Exception e) {\n                            fail(Locale.getDefault().toString() + \": \" + e.getMessage());\n                        }\n                        assertEquals(Locale.getDefault().toString() + \": \", ref, cur);\n                    }\n                }\n            }\n        } finally {\n            Locale.setDefault(orig);\n        }\n    }",
        "begin_line": 69,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 46)",
            "(line 72,col 9)-(line 72,col 38)",
            "(line 74,col 9)-(line 74,col 42)",
            "(line 75,col 9)-(line 75,col 85)",
            "(line 77,col 9)-(line 97,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.getBytesUtf8(java.lang.String)",
        "snippet": "    private byte[] getBytesUtf8(String hashMe) {\n        return StringUtils.getBytesUtf8(hashMe);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        new Random().nextBytes(testData);\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": " (non-Javadoc)\n     * @see junit.framework.TestCase#setUp()\n     ",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testConstructable()",
        "snippet": "    public void testConstructable() {\n        new DigestUtils();\n    }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testInternalNoSuchAlgorithmException()",
        "snippet": "    public void testInternalNoSuchAlgorithmException() {\n        try {\n            DigestUtils.getDigest(\"Bogus Bogus\");\n            fail(\"A RuntimeException should have been thrown.\");\n        } catch (RuntimeException e) {\n            // Expected exception.\n        }\n    }",
        "begin_line": 53,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 59,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex()",
        "snippet": "    public void testMd5Hex() throws IOException {\n        // Examples from RFC 1321\n        assertEquals(\"d41d8cd98f00b204e9800998ecf8427e\", DigestUtils.md5Hex(\"\"));\n\n        assertEquals(\"0cc175b9c0f1b6a831c399e269772661\", DigestUtils.md5Hex(\"a\"));\n\n        assertEquals(\"900150983cd24fb0d6963f7d28e17f72\", DigestUtils.md5Hex(\"abc\"));\n\n        assertEquals(\"f96b697d7cb7938d525a2f31aaf161d0\", DigestUtils.md5Hex(\"message digest\"));\n\n        assertEquals(\"c3fcd3d76192e4007dfb496cca67e13b\", DigestUtils.md5Hex(\"abcdefghijklmnopqrstuvwxyz\"));\n\n        assertEquals(\n            \"d174ab98d277d9f5a5611c2c9f419d9f\",\n            DigestUtils.md5Hex(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz\" + \"0123456789\"));\n\n        assertEquals(\n            \"57edf4a22be3c955ac49da2e2107b67a\",\n            DigestUtils.md5Hex(\"1234567890123456789012345678901234567890\" + \"1234567890123456789012345678901234567890\"));\n\n        assertEquals(DigestUtils.md5Hex(testData),\n                DigestUtils.md5Hex(new ByteArrayInputStream(testData)));\n    }",
        "begin_line": 62,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 81)",
            "(line 66,col 9)-(line 66,col 82)",
            "(line 68,col 9)-(line 68,col 84)",
            "(line 70,col 9)-(line 70,col 95)",
            "(line 72,col 9)-(line 72,col 107)",
            "(line 74,col 9)-(line 76,col 108)",
            "(line 78,col 9)-(line 80,col 121)",
            "(line 82,col 9)-(line 83,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testMD5HexLength()",
        "snippet": "    public void testMD5HexLength() {\n        String hashMe = \"this is some string that is longer than 32 characters\";\n        String hash = DigestUtils.md5Hex(getBytesUtf8(hashMe));\n        assertEquals(32, hash.length());\n\n        hashMe = \"length < 32\";\n        hash = DigestUtils.md5Hex(getBytesUtf8(hashMe));\n        assertEquals(32, hash.length());\n    }",
        "begin_line": 89,
        "end_line": 97,
        "comment": "\n     * An MD5 hash converted to hex should always be 32 characters.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 80)",
            "(line 91,col 9)-(line 91,col 63)",
            "(line 92,col 9)-(line 92,col 40)",
            "(line 94,col 9)-(line 94,col 31)",
            "(line 95,col 9)-(line 95,col 56)",
            "(line 96,col 9)-(line 96,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testMD5Length()",
        "snippet": "    public void testMD5Length() {\n        String hashMe = \"this is some string that is longer than 16 characters\";\n        byte[] hash = DigestUtils.md5(getBytesUtf8(hashMe));\n        assertEquals(16, hash.length);\n\n        hashMe = \"length < 16\";\n        hash = DigestUtils.md5(getBytesUtf8(hashMe));\n        assertEquals(16, hash.length);\n    }",
        "begin_line": 102,
        "end_line": 110,
        "comment": "\n     * An MD5 hash should always be a 16 element byte[].\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 80)",
            "(line 104,col 9)-(line 104,col 60)",
            "(line 105,col 9)-(line 105,col 38)",
            "(line 107,col 9)-(line 107,col 31)",
            "(line 108,col 9)-(line 108,col 53)",
            "(line 109,col 9)-(line 109,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testSha256()",
        "snippet": "    public void testSha256() throws IOException {\n    // Examples from FIPS 180-2\n    assertEquals(\"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\",\n             DigestUtils.sha256Hex(\"abc\"));\n    assertEquals(\"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\",\n             DigestUtils.sha256Hex(getBytesUtf8(\"abc\")));\n    assertEquals(\"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1\",\n             DigestUtils.sha256Hex(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\"));\n    \n    assertEquals(DigestUtils.sha256Hex(testData),\n            DigestUtils.sha256Hex(new ByteArrayInputStream(testData)));\n    }    ",
        "begin_line": 112,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 115,col 43)",
            "(line 116,col 5)-(line 117,col 57)",
            "(line 118,col 5)-(line 119,col 96)",
            "(line 121,col 5)-(line 122,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testSha384()",
        "snippet": "    public void testSha384() throws IOException {\n    // Examples from FIPS 180-2\n    assertEquals(\"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\" + \n             \"8086072ba1e7cc2358baeca134c825a7\",\n             DigestUtils.sha384Hex(\"abc\"));\n    assertEquals(\"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\" + \n             \"8086072ba1e7cc2358baeca134c825a7\",\n             DigestUtils.sha384Hex(getBytesUtf8(\"abc\")));\n    assertEquals(\"09330c33f71147e83d192fc782cd1b4753111b173b3b05d22fa08086e3b0f712\" +\n            \"fcc7c71a557e2db966c3e9fa91746039\",\n             DigestUtils.sha384Hex(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\" +\n                       \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n    assertEquals(DigestUtils.sha384Hex(testData),\n            DigestUtils.sha384Hex(new ByteArrayInputStream(testData)));\n    }",
        "begin_line": 125,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 127,col 5)-(line 129,col 43)",
            "(line 130,col 5)-(line 132,col 57)",
            "(line 133,col 5)-(line 136,col 84)",
            "(line 137,col 5)-(line 138,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testSha512()",
        "snippet": "    public void testSha512() throws IOException {\n    // Examples from FIPS 180-2\n    assertEquals(\"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\" +\n            \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\",\n             DigestUtils.sha512Hex(\"abc\"));\n    assertEquals(\"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\" +\n             \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\",\n             DigestUtils.sha512Hex(getBytesUtf8(\"abc\")));\n    assertEquals(\"8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018\" + \n             \"501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909\",\n             DigestUtils.sha512Hex(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\" + \n                       \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n    assertEquals(DigestUtils.sha512Hex(testData),\n            DigestUtils.sha512Hex(new ByteArrayInputStream(testData)));\n}    ",
        "begin_line": 141,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 143,col 5)-(line 145,col 43)",
            "(line 146,col 5)-(line 148,col 57)",
            "(line 149,col 5)-(line 152,col 84)",
            "(line 153,col 5)-(line 154,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex()",
        "snippet": "    public void testShaHex() throws IOException {\n        // Examples from FIPS 180-1\n        assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.shaHex(\"abc\"));\n\n        assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.shaHex(getBytesUtf8(\"abc\")));\n\n        assertEquals(\n            \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\",\n            DigestUtils.shaHex(\"abcdbcdecdefdefgefghfghighij\" + \"hijkijkljklmklmnlmnomnopnopq\"));\n        assertEquals(DigestUtils.shaHex(testData),\n                DigestUtils.shaHex(new ByteArrayInputStream(testData)));\n\n    }",
        "begin_line": 157,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 92)",
            "(line 161,col 9)-(line 161,col 106)",
            "(line 163,col 9)-(line 165,col 97)",
            "(line 166,col 9)-(line 167,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64TestData",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64TestData.java",
        "signature": "org.apache.commons.codec.binary.Base64TestData.streamToBytes(java.io.InputStream)",
        "snippet": "    static byte[] streamToBytes(final InputStream in) throws IOException {\n        // new byte[7] is obviously quite slow, but helps exercise the code.\n        return streamToBytes(in, new byte[7]);\n    }",
        "begin_line": 141,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64TestData",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64TestData.java",
        "signature": "org.apache.commons.codec.binary.Base64TestData.streamToBytes(java.io.InputStream, byte[])",
        "snippet": "    static byte[] streamToBytes(final InputStream in, byte[] buf) throws IOException {\n        try {\n            int[] status = fill(buf, 0, in);\n            int size = status[SIZE_KEY];\n            int lastRead = status[LAST_READ_KEY];\n            while (lastRead != -1) {\n                buf = resizeArray(buf);\n                status = fill(buf, size, in);\n                size = status[SIZE_KEY];\n                lastRead = status[LAST_READ_KEY];\n            }\n            if (buf.length != size) {\n                byte[] smallerBuf = new byte[size];\n                System.arraycopy(buf, 0, smallerBuf, 0, size);\n                buf = smallerBuf;\n            }\n        }\n        finally {\n            in.close();\n        }\n        return buf;\n    }",
        "begin_line": 146,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 165,col 9)",
            "(line 166,col 9)-(line 166,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64TestData",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64TestData.java",
        "signature": "org.apache.commons.codec.binary.Base64TestData.fill(byte[], int, java.io.InputStream)",
        "snippet": "    private static int[] fill(final byte[] buf, final int offset, final InputStream in)\n            throws IOException {\n        int read = in.read(buf, offset, buf.length - offset);\n        int lastRead = read;\n        if (read == -1) {\n            read = 0;\n        }\n        while (lastRead != -1 && read + offset < buf.length) {\n            lastRead = in.read(buf, offset + read, buf.length - read - offset);\n            if (lastRead != -1) {\n                read += lastRead;\n            }\n        }\n        return new int[]{offset + read, lastRead};\n    }",
        "begin_line": 169,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 61)",
            "(line 172,col 9)-(line 172,col 28)",
            "(line 173,col 9)-(line 175,col 9)",
            "(line 176,col 9)-(line 181,col 9)",
            "(line 182,col 9)-(line 182,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64TestData",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64TestData.java",
        "signature": "org.apache.commons.codec.binary.Base64TestData.resizeArray(byte[])",
        "snippet": "    private static byte[] resizeArray(final byte[] bytes) {\n        byte[] biggerBytes = new byte[bytes.length * 2];\n        System.arraycopy(bytes, 0, biggerBytes, 0, bytes.length);\n        return biggerBytes;\n    }",
        "begin_line": 185,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 56)",
            "(line 187,col 9)-(line 187,col 65)",
            "(line 188,col 9)-(line 188,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64TestData",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64TestData.java",
        "signature": "org.apache.commons.codec.binary.Base64TestData.randomData(int, boolean)",
        "snippet": "    static byte[][] randomData(int size, boolean urlSafe) {\n        Random r = new Random();\n        byte[] decoded = new byte[size];\n        r.nextBytes(decoded);\n        byte[] encoded = urlSafe ? Base64.encodeBase64URLSafe(decoded) : Base64.encodeBase64(decoded);\n        return new byte[][] {decoded, encoded};\n    }",
        "begin_line": 199,
        "end_line": 205,
        "comment": "\n     * Returns an encoded and decoded copy of the same random data.\n     * \n     * @param size amount of random data to generate and encode\n     * @param urlSafe true if encoding be urlSafe\n     * @return two byte[] arrays:  [0] = decoded, [1] = encoded \n     ",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 32)",
            "(line 201,col 9)-(line 201,col 40)",
            "(line 202,col 9)-(line 202,col 29)",
            "(line 203,col 9)-(line 203,col 102)",
            "(line 204,col 9)-(line 204,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64TestData",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64TestData.java",
        "signature": "org.apache.commons.codec.binary.Base64TestData.bytesContain(byte[], byte)",
        "snippet": "    static boolean bytesContain(byte[] bytes, byte c) {\n        for (int i = 0; i < bytes.length; i++) {\n            if (bytes[i] == c) { return true; }\n        }\n        return false;\n    }",
        "begin_line": 214,
        "end_line": 219,
        "comment": "\n     * Tests the supplied byte[] array to see if it contains the specified byte c.\n     *\n     * @param bytes byte[] array to test\n     * @param c byte to look for\n     * @return true if bytes contains c, false otherwise\n     ",
        "child_ranges": [
            "(line 215,col 9)-(line 217,col 9)",
            "(line 218,col 9)-(line 218,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.Base64OutputStreamTest(java.lang.String)",
        "snippet": "    public Base64OutputStreamTest(String name) {\n        super(name);\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "\n     * Construct a new instance of this test case.\n     * \n     * @param name\n     *            Name of the test case\n     ",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE()",
        "snippet": "    public void testCodec98NPE() throws Exception {\n        byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\n        byte[] codec98_1024 = new byte[1024];\n        System.arraycopy(codec98, 0, codec98_1024, 0, codec98.length);\n        ByteArrayOutputStream data = new ByteArrayOutputStream(1024);\n        Base64OutputStream stream = new Base64OutputStream(data, false);\n        stream.write(codec98_1024, 0, 1024);\n        stream.close();\n\n        byte[] decodedBytes = data.toByteArray();\n        String decoded = StringUtils.newStringUtf8(decodedBytes);\n        assertEquals(\n            \"codec-98 NPE Base64OutputStream\", Base64TestData.CODEC_98_NPE_DECODED, decoded\n        );\n    }",
        "begin_line": 55,
        "end_line": 69,
        "comment": "\n     * Test the Base64OutputStream implementation against the special NPE inducing input\n     * identified in the CODEC-98 bug.\n     *\n     * @throws Exception for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 79)",
            "(line 57,col 9)-(line 57,col 45)",
            "(line 58,col 9)-(line 58,col 70)",
            "(line 59,col 9)-(line 59,col 69)",
            "(line 60,col 9)-(line 60,col 72)",
            "(line 61,col 9)-(line 61,col 44)",
            "(line 62,col 9)-(line 62,col 23)",
            "(line 64,col 9)-(line 64,col 49)",
            "(line 65,col 9)-(line 65,col 65)",
            "(line 66,col 9)-(line 68,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize()",
        "snippet": "    public void testBase64EmptyOutputStreamMimeChunkSize() throws Exception {\n        testBase64EmptyOutputStream(Base64.MIME_CHUNK_SIZE);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Test the Base64OutputStream implementation against empty input.\n     * \n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize()",
        "snippet": "    public void testBase64EmptyOutputStreamPemChunkSize() throws Exception {\n        testBase64EmptyOutputStream(Base64.PEM_CHUNK_SIZE);\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Test the Base64OutputStream implementation against empty input.\n     * \n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStream(int)",
        "snippet": "    private void testBase64EmptyOutputStream(int chunkSize) throws Exception {\n        byte[] emptyEncoded = new byte[0];\n        byte[] emptyDecoded = new byte[0];\n        testByteByByte(emptyEncoded, emptyDecoded, chunkSize, CRLF);\n        testByChunk(emptyEncoded, emptyDecoded, chunkSize, CRLF);\n    }",
        "begin_line": 92,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 42)",
            "(line 94,col 9)-(line 94,col 42)",
            "(line 95,col 9)-(line 95,col 68)",
            "(line 96,col 9)-(line 96,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk()",
        "snippet": "    public void testBase64OutputStreamByChunk() throws Exception {\n        // Hello World test.\n        byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n        byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        testByChunk(encoded, decoded, Base64.MIME_CHUNK_SIZE, CRLF);\n\n        // Single Byte test.\n        encoded = StringUtils.getBytesUtf8(\"AA==\\r\\n\");\n        decoded = new byte[]{(byte) 0};\n        testByChunk(encoded, decoded, Base64.MIME_CHUNK_SIZE, CRLF);\n\n        // OpenSSL interop test.\n        encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n        decoded = Base64TestData.DECODED;\n        testByChunk(encoded, decoded, Base64.PEM_CHUNK_SIZE, LF);\n\n        // Single Line test.\n        String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n        encoded = StringUtils.getBytesUtf8(singleLine);\n        decoded = Base64TestData.DECODED;\n        testByChunk(encoded, decoded, 0, LF);\n\n        // test random data of sizes 0 thru 150\n        for (int i = 0; i <= 150; i++) {\n            byte[][] randomData = Base64TestData.randomData(i, false);\n            encoded = randomData[1];\n            decoded = randomData[0];\n            testByChunk(encoded, decoded, 0, LF);\n        }\n    }",
        "begin_line": 105,
        "end_line": 134,
        "comment": "\n     * Test the Base64OutputStream implementation\n     * \n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 74)",
            "(line 108,col 9)-(line 108,col 66)",
            "(line 109,col 9)-(line 109,col 68)",
            "(line 112,col 9)-(line 112,col 55)",
            "(line 113,col 9)-(line 113,col 39)",
            "(line 114,col 9)-(line 114,col 68)",
            "(line 117,col 9)-(line 117,col 85)",
            "(line 118,col 9)-(line 118,col 41)",
            "(line 119,col 9)-(line 119,col 65)",
            "(line 122,col 9)-(line 122,col 90)",
            "(line 123,col 9)-(line 123,col 55)",
            "(line 124,col 9)-(line 124,col 41)",
            "(line 125,col 9)-(line 125,col 45)",
            "(line 128,col 9)-(line 133,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte()",
        "snippet": "    public void testBase64OutputStreamByteByByte() throws Exception {\n        // Hello World test.\n        byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n        byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        testByteByByte(encoded, decoded, 76, CRLF);\n\n        // Single Byte test.\n        encoded = StringUtils.getBytesUtf8(\"AA==\\r\\n\");\n        decoded = new byte[]{(byte) 0};\n        testByteByByte(encoded, decoded, 76, CRLF);\n\n        // OpenSSL interop test.\n        encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n        decoded = Base64TestData.DECODED;\n        testByteByByte(encoded, decoded, 64, LF);\n\n        // Single Line test.\n        String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n        encoded = StringUtils.getBytesUtf8(singleLine);\n        decoded = Base64TestData.DECODED;\n        testByteByByte(encoded, decoded, 0, LF);\n\n        // test random data of sizes 0 thru 150\n        for (int i = 0; i <= 150; i++) {\n            byte[][] randomData = Base64TestData.randomData(i, false);\n            encoded = randomData[1];\n            decoded = randomData[0];\n            testByteByByte(encoded, decoded, 0, LF);\n        }\n    }",
        "begin_line": 142,
        "end_line": 171,
        "comment": "\n     * Test the Base64OutputStream implementation\n     * \n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 74)",
            "(line 145,col 9)-(line 145,col 66)",
            "(line 146,col 9)-(line 146,col 51)",
            "(line 149,col 9)-(line 149,col 55)",
            "(line 150,col 9)-(line 150,col 39)",
            "(line 151,col 9)-(line 151,col 51)",
            "(line 154,col 9)-(line 154,col 85)",
            "(line 155,col 9)-(line 155,col 41)",
            "(line 156,col 9)-(line 156,col 49)",
            "(line 159,col 9)-(line 159,col 90)",
            "(line 160,col 9)-(line 160,col 55)",
            "(line 161,col 9)-(line 161,col 41)",
            "(line 162,col 9)-(line 162,col 48)",
            "(line 165,col 9)-(line 170,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testByChunk(byte[], byte[], int, byte[])",
        "snippet": "    private void testByChunk(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {\n\n        // Start with encode.\n        ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n        OutputStream out = new Base64OutputStream(byteOut, true, chunkSize, seperator);\n        out.write(decoded);\n        out.close();\n        byte[] output = byteOut.toByteArray();\n        assertTrue(\"Streaming chunked base64 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        byteOut = new ByteArrayOutputStream();\n        out = new Base64OutputStream(byteOut, false);\n        out.write(encoded);\n        out.close();\n        output = byteOut.toByteArray();\n        assertTrue(\"Streaming chunked base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        byteOut = new ByteArrayOutputStream();\n        out = byteOut;\n        for (int i = 0; i < 10; i++) {\n            out = new Base64OutputStream(out, false);\n            out = new Base64OutputStream(out, true, chunkSize, seperator);\n        }\n        out.write(decoded);\n        out.close();\n        output = byteOut.toByteArray();\n\n        assertTrue(\"Streaming chunked base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }",
        "begin_line": 191,
        "end_line": 221,
        "comment": "\n     * Test method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]-->\n     * encoded 3. decoded ---[WRAP-WRAP-WRAP-etc...] --> decoded\n     * <p/>\n     * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base64OutputStream wraps itself in encode and decode\n     * mode over and over again.\n     * \n     * @param encoded\n     *            base64 encoded data\n     * @param decoded\n     *            the data from above, but decoded\n     * @param chunkSize\n     *            chunk size (line-length) of the base64 encoded data.\n     * @param seperator\n     *            Line separator in the base64 encoded data.\n     * @throws Exception\n     *             Usually signifies a bug in the Base64 commons-codec implementation.\n     ",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 68)",
            "(line 195,col 9)-(line 195,col 87)",
            "(line 196,col 9)-(line 196,col 27)",
            "(line 197,col 9)-(line 197,col 20)",
            "(line 198,col 9)-(line 198,col 46)",
            "(line 199,col 9)-(line 199,col 86)",
            "(line 202,col 9)-(line 202,col 46)",
            "(line 203,col 9)-(line 203,col 53)",
            "(line 204,col 9)-(line 204,col 27)",
            "(line 205,col 9)-(line 205,col 20)",
            "(line 206,col 9)-(line 206,col 39)",
            "(line 207,col 9)-(line 207,col 86)",
            "(line 210,col 9)-(line 210,col 46)",
            "(line 211,col 9)-(line 211,col 22)",
            "(line 212,col 9)-(line 215,col 9)",
            "(line 216,col 9)-(line 216,col 27)",
            "(line 217,col 9)-(line 217,col 20)",
            "(line 218,col 9)-(line 218,col 39)",
            "(line 220,col 9)-(line 220,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testByteByByte(byte[], byte[], int, byte[])",
        "snippet": "    private void testByteByByte(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {\n\n        // Start with encode.\n        ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n        OutputStream out = new Base64OutputStream(byteOut, true, chunkSize, seperator);\n        for (int i = 0; i < decoded.length; i++) {\n            out.write(decoded[i]);\n        }\n        out.close();\n        byte[] output = byteOut.toByteArray();\n        assertTrue(\"Streaming byte-by-byte base64 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        byteOut = new ByteArrayOutputStream();\n        out = new Base64OutputStream(byteOut, false);\n        for (int i = 0; i < encoded.length; i++) {\n            out.write(encoded[i]);\n        }\n        out.close();\n        output = byteOut.toByteArray();\n        assertTrue(\"Streaming byte-by-byte base64 decode\", Arrays.equals(output, decoded));\n\n        // Now let's try decode with tonnes of flushes.\n        byteOut = new ByteArrayOutputStream();\n        out = new Base64OutputStream(byteOut, false);\n        for (int i = 0; i < encoded.length; i++) {\n            out.write(encoded[i]);\n            out.flush();\n        }\n        out.close();\n        output = byteOut.toByteArray();\n        assertTrue(\"Streaming byte-by-byte flush() base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        byteOut = new ByteArrayOutputStream();\n        out = byteOut;\n        for (int i = 0; i < 10; i++) {\n            out = new Base64OutputStream(out, false);\n            out = new Base64OutputStream(out, true, chunkSize, seperator);\n        }\n        for (int i = 0; i < decoded.length; i++) {\n            out.write(decoded[i]);\n        }\n        out.close();\n        output = byteOut.toByteArray();\n\n        assertTrue(\"Streaming byte-by-byte base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }",
        "begin_line": 241,
        "end_line": 288,
        "comment": "\n     * Test method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]-->\n     * encoded 3. decoded ---[WRAP-WRAP-WRAP-etc...] --> decoded\n     * <p/>\n     * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base64OutputStream wraps itself in encode and decode\n     * mode over and over again.\n     * \n     * @param encoded\n     *            base64 encoded data\n     * @param decoded\n     *            the data from above, but decoded\n     * @param chunkSize\n     *            chunk size (line-length) of the base64 encoded data.\n     * @param seperator\n     *            Line separator in the base64 encoded data.\n     * @throws Exception\n     *             Usually signifies a bug in the Base64 commons-codec implementation.\n     ",
        "child_ranges": [
            "(line 244,col 9)-(line 244,col 68)",
            "(line 245,col 9)-(line 245,col 87)",
            "(line 246,col 9)-(line 248,col 9)",
            "(line 249,col 9)-(line 249,col 20)",
            "(line 250,col 9)-(line 250,col 46)",
            "(line 251,col 9)-(line 251,col 91)",
            "(line 254,col 9)-(line 254,col 46)",
            "(line 255,col 9)-(line 255,col 53)",
            "(line 256,col 9)-(line 258,col 9)",
            "(line 259,col 9)-(line 259,col 20)",
            "(line 260,col 9)-(line 260,col 39)",
            "(line 261,col 9)-(line 261,col 91)",
            "(line 264,col 9)-(line 264,col 46)",
            "(line 265,col 9)-(line 265,col 53)",
            "(line 266,col 9)-(line 269,col 9)",
            "(line 270,col 9)-(line 270,col 20)",
            "(line 271,col 9)-(line 271,col 39)",
            "(line 272,col 9)-(line 272,col 99)",
            "(line 275,col 9)-(line 275,col 46)",
            "(line 276,col 9)-(line 276,col 22)",
            "(line 277,col 9)-(line 280,col 9)",
            "(line 281,col 9)-(line 283,col 9)",
            "(line 284,col 9)-(line 284,col 20)",
            "(line 285,col 9)-(line 285,col 39)",
            "(line 287,col 9)-(line 287,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds()",
        "snippet": "    public void testWriteOutOfBounds() throws Exception {\n        byte[] buf = new byte[1024];\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        Base64OutputStream out = new Base64OutputStream(bout);\n\n        try {\n            out.write(buf, -1, 1);\n            fail(\"Expected Base64OutputStream.write(buf, -1, 1) to throw a IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ioobe) {\n            // Expected\n        }\n\n        try {\n            out.write(buf, 1, -1);\n            fail(\"Expected Base64OutputStream.write(buf, 1, -1) to throw a IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ioobe) {\n            // Expected\n        }\n\n        try {\n            out.write(buf, buf.length + 1, 0);\n            fail(\"Expected Base64OutputStream.write(buf, buf.length + 1, 0) to throw a IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ioobe) {\n            // Expected\n        }\n\n        try {\n            out.write(buf, buf.length - 1, 2);\n            fail(\"Expected Base64OutputStream.write(buf, buf.length - 1, 2) to throw a IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ioobe) {\n            // Expected\n        }\n    }",
        "begin_line": 296,
        "end_line": 328,
        "comment": "\n     * Tests Base64OutputStream.write for expected IndexOutOfBoundsException conditions.\n     * \n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 36)",
            "(line 298,col 9)-(line 298,col 65)",
            "(line 299,col 9)-(line 299,col 62)",
            "(line 301,col 9)-(line 306,col 9)",
            "(line 308,col 9)-(line 313,col 9)",
            "(line 315,col 9)-(line 320,col 9)",
            "(line 322,col 9)-(line 327,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage()",
        "snippet": "    public void testWriteToNullCoverage() throws Exception {\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        Base64OutputStream out = new Base64OutputStream(bout);\n        try {\n            out.write(null, 0, 0);\n            fail(\"Expcted Base64OutputStream.write(null) to throw a NullPointerException\");\n        } catch (NullPointerException e) {\n            // Expected\n        }\n    }",
        "begin_line": 336,
        "end_line": 345,
        "comment": "\n     * Tests Base64OutputStream.write(null).\n     * \n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 337,col 9)-(line 337,col 65)",
            "(line 338,col 9)-(line 338,col 62)",
            "(line 339,col 9)-(line 344,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n        this.instance = new BinaryCodec();\n    }",
        "begin_line": 64,
        "end_line": 67,
        "comment": "\n     * @see TestCase#setUp()\n     ",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 22)",
            "(line 66,col 9)-(line 66,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n        this.instance = null;\n    }",
        "begin_line": 72,
        "end_line": 75,
        "comment": "\n     * @see TestCase#tearDown()\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 25)",
            "(line 74,col 9)-(line 74,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.BinaryCodecTest(java.lang.String)",
        "snippet": "    public BinaryCodecTest(String arg0) {\n        super(arg0);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructor for BinaryTest.\n     * \n     * @param arg0\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObjectException()",
        "snippet": "    public void testDecodeObjectException() {\n        try {\n            this.instance.decode(new Object());\n        } catch (DecoderException e) {\n            // all is well.\n            return;\n        }\n        fail(\"Expected DecoderException\");\n    }",
        "begin_line": 94,
        "end_line": 102,
        "comment": "\n     * Tests for Object decode(Object)\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 100,col 9)",
            "(line 101,col 9)-(line 101,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject()",
        "snippet": "    public void testDecodeObject() throws Exception {\n        byte[] bits;\n        // With a single raw binary\n        bits = new byte[1];\n        assertDecodeObject(bits, \"00000000\");\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        assertDecodeObject(bits, \"00000001\");\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        assertDecodeObject(bits, \"00000011\");\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        assertDecodeObject(bits, \"00000111\");\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        assertDecodeObject(bits, \"00001111\");\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        assertDecodeObject(bits, \"00011111\");\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        assertDecodeObject(bits, \"00111111\");\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        assertDecodeObject(bits, \"01111111\");\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"11111111\");\n        // With a two raw binaries\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0000000011111111\");\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0000000111111111\");\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0000001111111111\");\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0000011111111111\");\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0000111111111111\");\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0001111111111111\");\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0011111111111111\");\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0111111111111111\");\n        bits = new byte[2];\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"1111111111111111\");\n        assertDecodeObject(new byte[0], null);\n    }",
        "begin_line": 107,
        "end_line": 173,
        "comment": "\n     * Tests for Object decode(Object)\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 20)",
            "(line 110,col 9)-(line 110,col 27)",
            "(line 111,col 9)-(line 111,col 45)",
            "(line 112,col 9)-(line 112,col 27)",
            "(line 113,col 9)-(line 113,col 24)",
            "(line 114,col 9)-(line 114,col 45)",
            "(line 115,col 9)-(line 115,col 27)",
            "(line 116,col 9)-(line 116,col 32)",
            "(line 117,col 9)-(line 117,col 45)",
            "(line 118,col 9)-(line 118,col 27)",
            "(line 119,col 9)-(line 119,col 40)",
            "(line 120,col 9)-(line 120,col 45)",
            "(line 121,col 9)-(line 121,col 27)",
            "(line 122,col 9)-(line 122,col 48)",
            "(line 123,col 9)-(line 123,col 45)",
            "(line 124,col 9)-(line 124,col 27)",
            "(line 125,col 9)-(line 125,col 56)",
            "(line 126,col 9)-(line 126,col 45)",
            "(line 127,col 9)-(line 127,col 27)",
            "(line 128,col 9)-(line 128,col 64)",
            "(line 129,col 9)-(line 129,col 45)",
            "(line 130,col 9)-(line 130,col 27)",
            "(line 131,col 9)-(line 131,col 72)",
            "(line 132,col 9)-(line 132,col 45)",
            "(line 133,col 9)-(line 133,col 27)",
            "(line 134,col 9)-(line 134,col 89)",
            "(line 135,col 9)-(line 135,col 45)",
            "(line 137,col 9)-(line 137,col 27)",
            "(line 138,col 9)-(line 138,col 89)",
            "(line 139,col 9)-(line 139,col 53)",
            "(line 140,col 9)-(line 140,col 27)",
            "(line 141,col 9)-(line 141,col 24)",
            "(line 142,col 9)-(line 142,col 89)",
            "(line 143,col 9)-(line 143,col 53)",
            "(line 144,col 9)-(line 144,col 27)",
            "(line 145,col 9)-(line 145,col 32)",
            "(line 146,col 9)-(line 146,col 89)",
            "(line 147,col 9)-(line 147,col 53)",
            "(line 148,col 9)-(line 148,col 27)",
            "(line 149,col 9)-(line 149,col 40)",
            "(line 150,col 9)-(line 150,col 89)",
            "(line 151,col 9)-(line 151,col 53)",
            "(line 152,col 9)-(line 152,col 27)",
            "(line 153,col 9)-(line 153,col 48)",
            "(line 154,col 9)-(line 154,col 89)",
            "(line 155,col 9)-(line 155,col 53)",
            "(line 156,col 9)-(line 156,col 27)",
            "(line 157,col 9)-(line 157,col 56)",
            "(line 158,col 9)-(line 158,col 89)",
            "(line 159,col 9)-(line 159,col 53)",
            "(line 160,col 9)-(line 160,col 27)",
            "(line 161,col 9)-(line 161,col 64)",
            "(line 162,col 9)-(line 162,col 89)",
            "(line 163,col 9)-(line 163,col 53)",
            "(line 164,col 9)-(line 164,col 27)",
            "(line 165,col 9)-(line 165,col 72)",
            "(line 166,col 9)-(line 166,col 89)",
            "(line 167,col 9)-(line 167,col 53)",
            "(line 168,col 9)-(line 168,col 27)",
            "(line 169,col 9)-(line 169,col 89)",
            "(line 170,col 9)-(line 170,col 89)",
            "(line 171,col 9)-(line 171,col 53)",
            "(line 172,col 9)-(line 172,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.assertDecodeObject(byte[], java.lang.String)",
        "snippet": "    void assertDecodeObject(byte[] bits, String encodeMe) throws DecoderException, UnsupportedEncodingException {\n        byte[] decoded;\n        decoded = (byte[]) instance.decode(encodeMe);\n        assertEquals(new String(bits), new String(decoded));\n        if (encodeMe == null) {\n            decoded = instance.decode((byte[]) null);\n        } else {\n            decoded = (byte[]) instance.decode((Object) encodeMe.getBytes(\"UTF-8\"));\n        }\n        assertEquals(new String(bits), new String(decoded));\n        if (encodeMe == null) {\n            decoded = (byte[]) instance.decode((char[]) null);\n        } else {\n            decoded = (byte[]) instance.decode(encodeMe.toCharArray());\n        }\n        assertEquals(new String(bits), new String(decoded));\n    }",
        "begin_line": 188,
        "end_line": 204,
        "comment": "\n     * Utility used to assert the encoded and decoded values.\n     * \n     * @param bits\n     *            the pre-encoded data\n     * @param encodeMe\n     *            data to encode and compare\n     ",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 23)",
            "(line 190,col 9)-(line 190,col 53)",
            "(line 191,col 9)-(line 191,col 60)",
            "(line 192,col 9)-(line 196,col 9)",
            "(line 197,col 9)-(line 197,col 60)",
            "(line 198,col 9)-(line 202,col 9)",
            "(line 203,col 9)-(line 203,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray()",
        "snippet": "    public void testDecodeByteArray() throws UnsupportedEncodingException {\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        byte[] decoded = instance.decode(\"00000000\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        decoded = instance.decode(\"00000001\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        decoded = instance.decode(\"00000011\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        decoded = instance.decode(\"00000111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        decoded = instance.decode(\"00001111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        decoded = instance.decode(\"00011111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        decoded = instance.decode(\"00111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        decoded = instance.decode(\"01111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"11111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        // With a two raw binaries\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0000000011111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0000000111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0000001111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0000011111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0000111111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0001111111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0011111111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0111111111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"1111111111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n    }",
        "begin_line": 209,
        "end_line": 291,
        "comment": "\n     * Tests for byte[] decode(byte[])\n     ",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 34)",
            "(line 212,col 9)-(line 212,col 71)",
            "(line 213,col 9)-(line 213,col 60)",
            "(line 214,col 9)-(line 214,col 27)",
            "(line 215,col 9)-(line 215,col 24)",
            "(line 216,col 9)-(line 216,col 64)",
            "(line 217,col 9)-(line 217,col 60)",
            "(line 218,col 9)-(line 218,col 27)",
            "(line 219,col 9)-(line 219,col 32)",
            "(line 220,col 9)-(line 220,col 64)",
            "(line 221,col 9)-(line 221,col 60)",
            "(line 222,col 9)-(line 222,col 27)",
            "(line 223,col 9)-(line 223,col 40)",
            "(line 224,col 9)-(line 224,col 64)",
            "(line 225,col 9)-(line 225,col 60)",
            "(line 226,col 9)-(line 226,col 27)",
            "(line 227,col 9)-(line 227,col 48)",
            "(line 228,col 9)-(line 228,col 64)",
            "(line 229,col 9)-(line 229,col 60)",
            "(line 230,col 9)-(line 230,col 27)",
            "(line 231,col 9)-(line 231,col 56)",
            "(line 232,col 9)-(line 232,col 64)",
            "(line 233,col 9)-(line 233,col 60)",
            "(line 234,col 9)-(line 234,col 27)",
            "(line 235,col 9)-(line 235,col 64)",
            "(line 236,col 9)-(line 236,col 64)",
            "(line 237,col 9)-(line 237,col 60)",
            "(line 238,col 9)-(line 238,col 27)",
            "(line 239,col 9)-(line 239,col 72)",
            "(line 240,col 9)-(line 240,col 64)",
            "(line 241,col 9)-(line 241,col 60)",
            "(line 242,col 9)-(line 242,col 27)",
            "(line 243,col 9)-(line 243,col 89)",
            "(line 244,col 9)-(line 244,col 64)",
            "(line 245,col 9)-(line 245,col 60)",
            "(line 247,col 9)-(line 247,col 27)",
            "(line 248,col 9)-(line 248,col 89)",
            "(line 249,col 9)-(line 249,col 72)",
            "(line 250,col 9)-(line 250,col 60)",
            "(line 251,col 9)-(line 251,col 27)",
            "(line 252,col 9)-(line 252,col 24)",
            "(line 253,col 9)-(line 253,col 89)",
            "(line 254,col 9)-(line 254,col 72)",
            "(line 255,col 9)-(line 255,col 60)",
            "(line 256,col 9)-(line 256,col 27)",
            "(line 257,col 9)-(line 257,col 32)",
            "(line 258,col 9)-(line 258,col 89)",
            "(line 259,col 9)-(line 259,col 72)",
            "(line 260,col 9)-(line 260,col 60)",
            "(line 261,col 9)-(line 261,col 27)",
            "(line 262,col 9)-(line 262,col 40)",
            "(line 263,col 9)-(line 263,col 89)",
            "(line 264,col 9)-(line 264,col 72)",
            "(line 265,col 9)-(line 265,col 60)",
            "(line 266,col 9)-(line 266,col 27)",
            "(line 267,col 9)-(line 267,col 48)",
            "(line 268,col 9)-(line 268,col 89)",
            "(line 269,col 9)-(line 269,col 72)",
            "(line 270,col 9)-(line 270,col 60)",
            "(line 271,col 9)-(line 271,col 27)",
            "(line 272,col 9)-(line 272,col 56)",
            "(line 273,col 9)-(line 273,col 89)",
            "(line 274,col 9)-(line 274,col 72)",
            "(line 275,col 9)-(line 275,col 60)",
            "(line 276,col 9)-(line 276,col 27)",
            "(line 277,col 9)-(line 277,col 64)",
            "(line 278,col 9)-(line 278,col 89)",
            "(line 279,col 9)-(line 279,col 72)",
            "(line 280,col 9)-(line 280,col 60)",
            "(line 281,col 9)-(line 281,col 27)",
            "(line 282,col 9)-(line 282,col 72)",
            "(line 283,col 9)-(line 283,col 89)",
            "(line 284,col 9)-(line 284,col 72)",
            "(line 285,col 9)-(line 285,col 60)",
            "(line 286,col 9)-(line 286,col 27)",
            "(line 287,col 9)-(line 287,col 89)",
            "(line 288,col 9)-(line 288,col 89)",
            "(line 289,col 9)-(line 289,col 72)",
            "(line 290,col 9)-(line 290,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString()",
        "snippet": "    public void testToByteArrayFromString() {\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        byte[] decoded = instance.toByteArray(\"00000000\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        decoded = instance.toByteArray(\"00000001\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        decoded = instance.toByteArray(\"00000011\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        decoded = instance.toByteArray(\"00000111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        decoded = instance.toByteArray(\"00001111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        decoded = instance.toByteArray(\"00011111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        decoded = instance.toByteArray(\"00111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        decoded = instance.toByteArray(\"01111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"11111111\");\n        assertEquals(new String(bits), new String(decoded));\n        // With a two raw binaries\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0000000011111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0000000111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0000001111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0000011111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0000111111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0001111111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0011111111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0111111111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"1111111111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        assertEquals(0, instance.toByteArray((String) null).length);\n    }",
        "begin_line": 301,
        "end_line": 384,
        "comment": "\n     * Tests for byte[] toByteArray(String)\n     ",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 34)",
            "(line 304,col 9)-(line 304,col 58)",
            "(line 305,col 9)-(line 305,col 60)",
            "(line 306,col 9)-(line 306,col 27)",
            "(line 307,col 9)-(line 307,col 24)",
            "(line 308,col 9)-(line 308,col 51)",
            "(line 309,col 9)-(line 309,col 60)",
            "(line 310,col 9)-(line 310,col 27)",
            "(line 311,col 9)-(line 311,col 32)",
            "(line 312,col 9)-(line 312,col 51)",
            "(line 313,col 9)-(line 313,col 60)",
            "(line 314,col 9)-(line 314,col 27)",
            "(line 315,col 9)-(line 315,col 40)",
            "(line 316,col 9)-(line 316,col 51)",
            "(line 317,col 9)-(line 317,col 60)",
            "(line 318,col 9)-(line 318,col 27)",
            "(line 319,col 9)-(line 319,col 48)",
            "(line 320,col 9)-(line 320,col 51)",
            "(line 321,col 9)-(line 321,col 60)",
            "(line 322,col 9)-(line 322,col 27)",
            "(line 323,col 9)-(line 323,col 56)",
            "(line 324,col 9)-(line 324,col 51)",
            "(line 325,col 9)-(line 325,col 60)",
            "(line 326,col 9)-(line 326,col 27)",
            "(line 327,col 9)-(line 327,col 64)",
            "(line 328,col 9)-(line 328,col 51)",
            "(line 329,col 9)-(line 329,col 60)",
            "(line 330,col 9)-(line 330,col 27)",
            "(line 331,col 9)-(line 331,col 72)",
            "(line 332,col 9)-(line 332,col 51)",
            "(line 333,col 9)-(line 333,col 60)",
            "(line 334,col 9)-(line 334,col 27)",
            "(line 335,col 9)-(line 335,col 89)",
            "(line 336,col 9)-(line 336,col 51)",
            "(line 337,col 9)-(line 337,col 60)",
            "(line 339,col 9)-(line 339,col 27)",
            "(line 340,col 9)-(line 340,col 89)",
            "(line 341,col 9)-(line 341,col 59)",
            "(line 342,col 9)-(line 342,col 60)",
            "(line 343,col 9)-(line 343,col 27)",
            "(line 344,col 9)-(line 344,col 24)",
            "(line 345,col 9)-(line 345,col 89)",
            "(line 346,col 9)-(line 346,col 59)",
            "(line 347,col 9)-(line 347,col 60)",
            "(line 348,col 9)-(line 348,col 27)",
            "(line 349,col 9)-(line 349,col 32)",
            "(line 350,col 9)-(line 350,col 89)",
            "(line 351,col 9)-(line 351,col 59)",
            "(line 352,col 9)-(line 352,col 60)",
            "(line 353,col 9)-(line 353,col 27)",
            "(line 354,col 9)-(line 354,col 40)",
            "(line 355,col 9)-(line 355,col 89)",
            "(line 356,col 9)-(line 356,col 59)",
            "(line 357,col 9)-(line 357,col 60)",
            "(line 358,col 9)-(line 358,col 27)",
            "(line 359,col 9)-(line 359,col 48)",
            "(line 360,col 9)-(line 360,col 89)",
            "(line 361,col 9)-(line 361,col 59)",
            "(line 362,col 9)-(line 362,col 60)",
            "(line 363,col 9)-(line 363,col 27)",
            "(line 364,col 9)-(line 364,col 56)",
            "(line 365,col 9)-(line 365,col 89)",
            "(line 366,col 9)-(line 366,col 59)",
            "(line 367,col 9)-(line 367,col 60)",
            "(line 368,col 9)-(line 368,col 27)",
            "(line 369,col 9)-(line 369,col 64)",
            "(line 370,col 9)-(line 370,col 89)",
            "(line 371,col 9)-(line 371,col 59)",
            "(line 372,col 9)-(line 372,col 60)",
            "(line 373,col 9)-(line 373,col 27)",
            "(line 374,col 9)-(line 374,col 72)",
            "(line 375,col 9)-(line 375,col 89)",
            "(line 376,col 9)-(line 376,col 59)",
            "(line 377,col 9)-(line 377,col 60)",
            "(line 378,col 9)-(line 378,col 27)",
            "(line 379,col 9)-(line 379,col 89)",
            "(line 380,col 9)-(line 380,col 89)",
            "(line 381,col 9)-(line 381,col 59)",
            "(line 382,col 9)-(line 382,col 60)",
            "(line 383,col 9)-(line 383,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray()",
        "snippet": "    public void testFromAsciiCharArray() {\n        assertEquals(0, BinaryCodec.fromAscii((char[]) null).length);\n        assertEquals(0, BinaryCodec.fromAscii(new char[0]).length);\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        byte[] decoded = BinaryCodec.fromAscii(\"00000000\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        decoded = BinaryCodec.fromAscii(\"00000001\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        decoded = BinaryCodec.fromAscii(\"00000011\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        decoded = BinaryCodec.fromAscii(\"00000111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        decoded = BinaryCodec.fromAscii(\"00001111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        decoded = BinaryCodec.fromAscii(\"00011111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        decoded = BinaryCodec.fromAscii(\"00111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        decoded = BinaryCodec.fromAscii(\"01111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"11111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        // With a two raw binaries\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000000011111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000000111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000001111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000011111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000111111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0001111111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0011111111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0111111111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"1111111111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        assertEquals(0, BinaryCodec.fromAscii((char[]) null).length);\n    }",
        "begin_line": 394,
        "end_line": 479,
        "comment": "\n     * Tests for byte[] fromAscii(char[])\n     ",
        "child_ranges": [
            "(line 395,col 9)-(line 395,col 69)",
            "(line 396,col 9)-(line 396,col 67)",
            "(line 398,col 9)-(line 398,col 34)",
            "(line 399,col 9)-(line 399,col 73)",
            "(line 400,col 9)-(line 400,col 60)",
            "(line 401,col 9)-(line 401,col 27)",
            "(line 402,col 9)-(line 402,col 24)",
            "(line 403,col 9)-(line 403,col 66)",
            "(line 404,col 9)-(line 404,col 60)",
            "(line 405,col 9)-(line 405,col 27)",
            "(line 406,col 9)-(line 406,col 32)",
            "(line 407,col 9)-(line 407,col 66)",
            "(line 408,col 9)-(line 408,col 60)",
            "(line 409,col 9)-(line 409,col 27)",
            "(line 410,col 9)-(line 410,col 40)",
            "(line 411,col 9)-(line 411,col 66)",
            "(line 412,col 9)-(line 412,col 60)",
            "(line 413,col 9)-(line 413,col 27)",
            "(line 414,col 9)-(line 414,col 48)",
            "(line 415,col 9)-(line 415,col 66)",
            "(line 416,col 9)-(line 416,col 60)",
            "(line 417,col 9)-(line 417,col 27)",
            "(line 418,col 9)-(line 418,col 56)",
            "(line 419,col 9)-(line 419,col 66)",
            "(line 420,col 9)-(line 420,col 60)",
            "(line 421,col 9)-(line 421,col 27)",
            "(line 422,col 9)-(line 422,col 64)",
            "(line 423,col 9)-(line 423,col 66)",
            "(line 424,col 9)-(line 424,col 60)",
            "(line 425,col 9)-(line 425,col 27)",
            "(line 426,col 9)-(line 426,col 72)",
            "(line 427,col 9)-(line 427,col 66)",
            "(line 428,col 9)-(line 428,col 60)",
            "(line 429,col 9)-(line 429,col 27)",
            "(line 430,col 9)-(line 430,col 89)",
            "(line 431,col 9)-(line 431,col 66)",
            "(line 432,col 9)-(line 432,col 60)",
            "(line 434,col 9)-(line 434,col 27)",
            "(line 435,col 9)-(line 435,col 89)",
            "(line 436,col 9)-(line 436,col 74)",
            "(line 437,col 9)-(line 437,col 60)",
            "(line 438,col 9)-(line 438,col 27)",
            "(line 439,col 9)-(line 439,col 24)",
            "(line 440,col 9)-(line 440,col 89)",
            "(line 441,col 9)-(line 441,col 74)",
            "(line 442,col 9)-(line 442,col 60)",
            "(line 443,col 9)-(line 443,col 27)",
            "(line 444,col 9)-(line 444,col 32)",
            "(line 445,col 9)-(line 445,col 89)",
            "(line 446,col 9)-(line 446,col 74)",
            "(line 447,col 9)-(line 447,col 60)",
            "(line 448,col 9)-(line 448,col 27)",
            "(line 449,col 9)-(line 449,col 40)",
            "(line 450,col 9)-(line 450,col 89)",
            "(line 451,col 9)-(line 451,col 74)",
            "(line 452,col 9)-(line 452,col 60)",
            "(line 453,col 9)-(line 453,col 27)",
            "(line 454,col 9)-(line 454,col 48)",
            "(line 455,col 9)-(line 455,col 89)",
            "(line 456,col 9)-(line 456,col 74)",
            "(line 457,col 9)-(line 457,col 60)",
            "(line 458,col 9)-(line 458,col 27)",
            "(line 459,col 9)-(line 459,col 56)",
            "(line 460,col 9)-(line 460,col 89)",
            "(line 461,col 9)-(line 461,col 74)",
            "(line 462,col 9)-(line 462,col 60)",
            "(line 463,col 9)-(line 463,col 27)",
            "(line 464,col 9)-(line 464,col 64)",
            "(line 465,col 9)-(line 465,col 89)",
            "(line 466,col 9)-(line 466,col 74)",
            "(line 467,col 9)-(line 467,col 60)",
            "(line 468,col 9)-(line 468,col 27)",
            "(line 469,col 9)-(line 469,col 72)",
            "(line 470,col 9)-(line 470,col 89)",
            "(line 471,col 9)-(line 471,col 74)",
            "(line 472,col 9)-(line 472,col 60)",
            "(line 473,col 9)-(line 473,col 27)",
            "(line 474,col 9)-(line 474,col 89)",
            "(line 475,col 9)-(line 475,col 89)",
            "(line 476,col 9)-(line 476,col 74)",
            "(line 477,col 9)-(line 477,col 60)",
            "(line 478,col 9)-(line 478,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray()",
        "snippet": "    public void testFromAsciiByteArray() throws UnsupportedEncodingException {\n        assertEquals(0, BinaryCodec.fromAscii((byte[]) null).length);\n        assertEquals(0, BinaryCodec.fromAscii(new byte[0]).length);\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        byte[] decoded = BinaryCodec.fromAscii(\"00000000\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        decoded = BinaryCodec.fromAscii(\"00000001\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        decoded = BinaryCodec.fromAscii(\"00000011\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        decoded = BinaryCodec.fromAscii(\"00000111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        decoded = BinaryCodec.fromAscii(\"00001111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        decoded = BinaryCodec.fromAscii(\"00011111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        decoded = BinaryCodec.fromAscii(\"00111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        decoded = BinaryCodec.fromAscii(\"01111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"11111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        // With a two raw binaries\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000000011111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000000111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000001111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000011111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000111111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0001111111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0011111111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0111111111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"1111111111111111\".getBytes(\"UTF-8\"));\n        assertEquals(new String(bits), new String(decoded));\n        assertEquals(0, BinaryCodec.fromAscii((byte[]) null).length);\n    }",
        "begin_line": 489,
        "end_line": 574,
        "comment": "\n     * Tests for byte[] fromAscii(byte[])\n     ",
        "child_ranges": [
            "(line 490,col 9)-(line 490,col 69)",
            "(line 491,col 9)-(line 491,col 67)",
            "(line 493,col 9)-(line 493,col 34)",
            "(line 494,col 9)-(line 494,col 77)",
            "(line 495,col 9)-(line 495,col 60)",
            "(line 496,col 9)-(line 496,col 27)",
            "(line 497,col 9)-(line 497,col 24)",
            "(line 498,col 9)-(line 498,col 70)",
            "(line 499,col 9)-(line 499,col 60)",
            "(line 500,col 9)-(line 500,col 27)",
            "(line 501,col 9)-(line 501,col 32)",
            "(line 502,col 9)-(line 502,col 70)",
            "(line 503,col 9)-(line 503,col 60)",
            "(line 504,col 9)-(line 504,col 27)",
            "(line 505,col 9)-(line 505,col 40)",
            "(line 506,col 9)-(line 506,col 70)",
            "(line 507,col 9)-(line 507,col 60)",
            "(line 508,col 9)-(line 508,col 27)",
            "(line 509,col 9)-(line 509,col 48)",
            "(line 510,col 9)-(line 510,col 70)",
            "(line 511,col 9)-(line 511,col 60)",
            "(line 512,col 9)-(line 512,col 27)",
            "(line 513,col 9)-(line 513,col 56)",
            "(line 514,col 9)-(line 514,col 70)",
            "(line 515,col 9)-(line 515,col 60)",
            "(line 516,col 9)-(line 516,col 27)",
            "(line 517,col 9)-(line 517,col 64)",
            "(line 518,col 9)-(line 518,col 70)",
            "(line 519,col 9)-(line 519,col 60)",
            "(line 520,col 9)-(line 520,col 27)",
            "(line 521,col 9)-(line 521,col 72)",
            "(line 522,col 9)-(line 522,col 70)",
            "(line 523,col 9)-(line 523,col 60)",
            "(line 524,col 9)-(line 524,col 27)",
            "(line 525,col 9)-(line 525,col 89)",
            "(line 526,col 9)-(line 526,col 70)",
            "(line 527,col 9)-(line 527,col 60)",
            "(line 529,col 9)-(line 529,col 27)",
            "(line 530,col 9)-(line 530,col 89)",
            "(line 531,col 9)-(line 531,col 78)",
            "(line 532,col 9)-(line 532,col 60)",
            "(line 533,col 9)-(line 533,col 27)",
            "(line 534,col 9)-(line 534,col 24)",
            "(line 535,col 9)-(line 535,col 89)",
            "(line 536,col 9)-(line 536,col 78)",
            "(line 537,col 9)-(line 537,col 60)",
            "(line 538,col 9)-(line 538,col 27)",
            "(line 539,col 9)-(line 539,col 32)",
            "(line 540,col 9)-(line 540,col 89)",
            "(line 541,col 9)-(line 541,col 78)",
            "(line 542,col 9)-(line 542,col 60)",
            "(line 543,col 9)-(line 543,col 27)",
            "(line 544,col 9)-(line 544,col 40)",
            "(line 545,col 9)-(line 545,col 89)",
            "(line 546,col 9)-(line 546,col 78)",
            "(line 547,col 9)-(line 547,col 60)",
            "(line 548,col 9)-(line 548,col 27)",
            "(line 549,col 9)-(line 549,col 48)",
            "(line 550,col 9)-(line 550,col 89)",
            "(line 551,col 9)-(line 551,col 78)",
            "(line 552,col 9)-(line 552,col 60)",
            "(line 553,col 9)-(line 553,col 27)",
            "(line 554,col 9)-(line 554,col 56)",
            "(line 555,col 9)-(line 555,col 89)",
            "(line 556,col 9)-(line 556,col 78)",
            "(line 557,col 9)-(line 557,col 60)",
            "(line 558,col 9)-(line 558,col 27)",
            "(line 559,col 9)-(line 559,col 64)",
            "(line 560,col 9)-(line 560,col 89)",
            "(line 561,col 9)-(line 561,col 78)",
            "(line 562,col 9)-(line 562,col 60)",
            "(line 563,col 9)-(line 563,col 27)",
            "(line 564,col 9)-(line 564,col 72)",
            "(line 565,col 9)-(line 565,col 89)",
            "(line 566,col 9)-(line 566,col 78)",
            "(line 567,col 9)-(line 567,col 60)",
            "(line 568,col 9)-(line 568,col 27)",
            "(line 569,col 9)-(line 569,col 89)",
            "(line 570,col 9)-(line 570,col 89)",
            "(line 571,col 9)-(line 571,col 78)",
            "(line 572,col 9)-(line 572,col 60)",
            "(line 573,col 9)-(line 573,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray()",
        "snippet": "    public void testEncodeByteArray() {\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        String l_encoded = new String(instance.encode(bits));\n        assertEquals(\"00000000\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"00000001\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"00000011\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"00000111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"00001111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"00011111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"00111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"01111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"11111111\", l_encoded);\n        // With a two raw binaries\n        bits = new byte[2];\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000000000000\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000000000001\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000000000011\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000000000111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000000001111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000000011111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000000111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000001111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000011111111\", l_encoded);\n        // work on the other byte now\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000001111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000011111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0001111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0011111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0111111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"1111111111111111\", l_encoded);\n        assertEquals(0, instance.encode((byte[]) null).length);\n    }",
        "begin_line": 584,
        "end_line": 699,
        "comment": "\n     * Tests for byte[] encode(byte[])\n     ",
        "child_ranges": [
            "(line 586,col 9)-(line 586,col 34)",
            "(line 587,col 9)-(line 587,col 61)",
            "(line 588,col 9)-(line 588,col 44)",
            "(line 589,col 9)-(line 589,col 27)",
            "(line 590,col 9)-(line 590,col 24)",
            "(line 591,col 9)-(line 591,col 54)",
            "(line 592,col 9)-(line 592,col 44)",
            "(line 593,col 9)-(line 593,col 27)",
            "(line 594,col 9)-(line 594,col 32)",
            "(line 595,col 9)-(line 595,col 54)",
            "(line 596,col 9)-(line 596,col 44)",
            "(line 597,col 9)-(line 597,col 27)",
            "(line 598,col 9)-(line 598,col 40)",
            "(line 599,col 9)-(line 599,col 54)",
            "(line 600,col 9)-(line 600,col 44)",
            "(line 601,col 9)-(line 601,col 27)",
            "(line 602,col 9)-(line 602,col 48)",
            "(line 603,col 9)-(line 603,col 54)",
            "(line 604,col 9)-(line 604,col 44)",
            "(line 605,col 9)-(line 605,col 27)",
            "(line 606,col 9)-(line 606,col 56)",
            "(line 607,col 9)-(line 607,col 54)",
            "(line 608,col 9)-(line 608,col 44)",
            "(line 609,col 9)-(line 609,col 27)",
            "(line 610,col 9)-(line 610,col 64)",
            "(line 611,col 9)-(line 611,col 54)",
            "(line 612,col 9)-(line 612,col 44)",
            "(line 613,col 9)-(line 613,col 27)",
            "(line 614,col 9)-(line 614,col 72)",
            "(line 615,col 9)-(line 615,col 54)",
            "(line 616,col 9)-(line 616,col 44)",
            "(line 617,col 9)-(line 617,col 27)",
            "(line 618,col 9)-(line 618,col 89)",
            "(line 619,col 9)-(line 619,col 54)",
            "(line 620,col 9)-(line 620,col 44)",
            "(line 622,col 9)-(line 622,col 27)",
            "(line 623,col 9)-(line 623,col 54)",
            "(line 624,col 9)-(line 624,col 52)",
            "(line 625,col 9)-(line 625,col 27)",
            "(line 626,col 9)-(line 626,col 24)",
            "(line 627,col 9)-(line 627,col 54)",
            "(line 628,col 9)-(line 628,col 52)",
            "(line 629,col 9)-(line 629,col 27)",
            "(line 630,col 9)-(line 630,col 32)",
            "(line 631,col 9)-(line 631,col 54)",
            "(line 632,col 9)-(line 632,col 52)",
            "(line 633,col 9)-(line 633,col 27)",
            "(line 634,col 9)-(line 634,col 40)",
            "(line 635,col 9)-(line 635,col 54)",
            "(line 636,col 9)-(line 636,col 52)",
            "(line 637,col 9)-(line 637,col 27)",
            "(line 638,col 9)-(line 638,col 48)",
            "(line 639,col 9)-(line 639,col 54)",
            "(line 640,col 9)-(line 640,col 52)",
            "(line 641,col 9)-(line 641,col 27)",
            "(line 642,col 9)-(line 642,col 56)",
            "(line 643,col 9)-(line 643,col 54)",
            "(line 644,col 9)-(line 644,col 52)",
            "(line 645,col 9)-(line 645,col 27)",
            "(line 646,col 9)-(line 646,col 64)",
            "(line 647,col 9)-(line 647,col 54)",
            "(line 648,col 9)-(line 648,col 52)",
            "(line 649,col 9)-(line 649,col 27)",
            "(line 650,col 9)-(line 650,col 72)",
            "(line 651,col 9)-(line 651,col 54)",
            "(line 652,col 9)-(line 652,col 52)",
            "(line 653,col 9)-(line 653,col 27)",
            "(line 654,col 9)-(line 654,col 89)",
            "(line 655,col 9)-(line 655,col 54)",
            "(line 656,col 9)-(line 656,col 52)",
            "(line 658,col 9)-(line 658,col 27)",
            "(line 659,col 9)-(line 659,col 24)",
            "(line 660,col 9)-(line 660,col 89)",
            "(line 661,col 9)-(line 661,col 54)",
            "(line 662,col 9)-(line 662,col 52)",
            "(line 663,col 9)-(line 663,col 27)",
            "(line 664,col 9)-(line 664,col 32)",
            "(line 665,col 9)-(line 665,col 89)",
            "(line 666,col 9)-(line 666,col 54)",
            "(line 667,col 9)-(line 667,col 52)",
            "(line 668,col 9)-(line 668,col 27)",
            "(line 669,col 9)-(line 669,col 40)",
            "(line 670,col 9)-(line 670,col 89)",
            "(line 671,col 9)-(line 671,col 54)",
            "(line 672,col 9)-(line 672,col 52)",
            "(line 673,col 9)-(line 673,col 27)",
            "(line 674,col 9)-(line 674,col 48)",
            "(line 675,col 9)-(line 675,col 89)",
            "(line 676,col 9)-(line 676,col 54)",
            "(line 677,col 9)-(line 677,col 52)",
            "(line 678,col 9)-(line 678,col 27)",
            "(line 679,col 9)-(line 679,col 56)",
            "(line 680,col 9)-(line 680,col 89)",
            "(line 681,col 9)-(line 681,col 54)",
            "(line 682,col 9)-(line 682,col 52)",
            "(line 683,col 9)-(line 683,col 27)",
            "(line 684,col 9)-(line 684,col 64)",
            "(line 685,col 9)-(line 685,col 89)",
            "(line 686,col 9)-(line 686,col 54)",
            "(line 687,col 9)-(line 687,col 52)",
            "(line 688,col 9)-(line 688,col 27)",
            "(line 689,col 9)-(line 689,col 72)",
            "(line 690,col 9)-(line 690,col 89)",
            "(line 691,col 9)-(line 691,col 54)",
            "(line 692,col 9)-(line 692,col 52)",
            "(line 693,col 9)-(line 693,col 27)",
            "(line 694,col 9)-(line 694,col 89)",
            "(line 695,col 9)-(line 695,col 89)",
            "(line 696,col 9)-(line 696,col 54)",
            "(line 697,col 9)-(line 697,col 52)",
            "(line 698,col 9)-(line 698,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes()",
        "snippet": "    public void testToAsciiBytes() {\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        String l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"00000000\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"00000001\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"00000011\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"00000111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"00001111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"00011111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"00111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"01111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"11111111\", l_encoded);\n        // With a two raw binaries\n        bits = new byte[2];\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000000000000\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000000000001\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000000000011\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000000000111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000000001111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000000011111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000000111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000001111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000011111111\", l_encoded);\n        // work on the other byte now\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000001111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000011111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0001111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0011111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0111111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"1111111111111111\", l_encoded);\n        assertEquals(0, BinaryCodec.toAsciiBytes((byte[]) null).length);\n    }",
        "begin_line": 706,
        "end_line": 821,
        "comment": " ------------------------------------------------------------------------",
        "child_ranges": [
            "(line 708,col 9)-(line 708,col 34)",
            "(line 709,col 9)-(line 709,col 70)",
            "(line 710,col 9)-(line 710,col 44)",
            "(line 711,col 9)-(line 711,col 27)",
            "(line 712,col 9)-(line 712,col 24)",
            "(line 713,col 9)-(line 713,col 63)",
            "(line 714,col 9)-(line 714,col 44)",
            "(line 715,col 9)-(line 715,col 27)",
            "(line 716,col 9)-(line 716,col 32)",
            "(line 717,col 9)-(line 717,col 63)",
            "(line 718,col 9)-(line 718,col 44)",
            "(line 719,col 9)-(line 719,col 27)",
            "(line 720,col 9)-(line 720,col 40)",
            "(line 721,col 9)-(line 721,col 63)",
            "(line 722,col 9)-(line 722,col 44)",
            "(line 723,col 9)-(line 723,col 27)",
            "(line 724,col 9)-(line 724,col 48)",
            "(line 725,col 9)-(line 725,col 63)",
            "(line 726,col 9)-(line 726,col 44)",
            "(line 727,col 9)-(line 727,col 27)",
            "(line 728,col 9)-(line 728,col 56)",
            "(line 729,col 9)-(line 729,col 63)",
            "(line 730,col 9)-(line 730,col 44)",
            "(line 731,col 9)-(line 731,col 27)",
            "(line 732,col 9)-(line 732,col 64)",
            "(line 733,col 9)-(line 733,col 63)",
            "(line 734,col 9)-(line 734,col 44)",
            "(line 735,col 9)-(line 735,col 27)",
            "(line 736,col 9)-(line 736,col 72)",
            "(line 737,col 9)-(line 737,col 63)",
            "(line 738,col 9)-(line 738,col 44)",
            "(line 739,col 9)-(line 739,col 27)",
            "(line 740,col 9)-(line 740,col 89)",
            "(line 741,col 9)-(line 741,col 63)",
            "(line 742,col 9)-(line 742,col 44)",
            "(line 744,col 9)-(line 744,col 27)",
            "(line 745,col 9)-(line 745,col 63)",
            "(line 746,col 9)-(line 746,col 52)",
            "(line 747,col 9)-(line 747,col 27)",
            "(line 748,col 9)-(line 748,col 24)",
            "(line 749,col 9)-(line 749,col 63)",
            "(line 750,col 9)-(line 750,col 52)",
            "(line 751,col 9)-(line 751,col 27)",
            "(line 752,col 9)-(line 752,col 32)",
            "(line 753,col 9)-(line 753,col 63)",
            "(line 754,col 9)-(line 754,col 52)",
            "(line 755,col 9)-(line 755,col 27)",
            "(line 756,col 9)-(line 756,col 40)",
            "(line 757,col 9)-(line 757,col 63)",
            "(line 758,col 9)-(line 758,col 52)",
            "(line 759,col 9)-(line 759,col 27)",
            "(line 760,col 9)-(line 760,col 48)",
            "(line 761,col 9)-(line 761,col 63)",
            "(line 762,col 9)-(line 762,col 52)",
            "(line 763,col 9)-(line 763,col 27)",
            "(line 764,col 9)-(line 764,col 56)",
            "(line 765,col 9)-(line 765,col 63)",
            "(line 766,col 9)-(line 766,col 52)",
            "(line 767,col 9)-(line 767,col 27)",
            "(line 768,col 9)-(line 768,col 64)",
            "(line 769,col 9)-(line 769,col 63)",
            "(line 770,col 9)-(line 770,col 52)",
            "(line 771,col 9)-(line 771,col 27)",
            "(line 772,col 9)-(line 772,col 72)",
            "(line 773,col 9)-(line 773,col 63)",
            "(line 774,col 9)-(line 774,col 52)",
            "(line 775,col 9)-(line 775,col 27)",
            "(line 776,col 9)-(line 776,col 89)",
            "(line 777,col 9)-(line 777,col 63)",
            "(line 778,col 9)-(line 778,col 52)",
            "(line 780,col 9)-(line 780,col 27)",
            "(line 781,col 9)-(line 781,col 24)",
            "(line 782,col 9)-(line 782,col 89)",
            "(line 783,col 9)-(line 783,col 63)",
            "(line 784,col 9)-(line 784,col 52)",
            "(line 785,col 9)-(line 785,col 27)",
            "(line 786,col 9)-(line 786,col 32)",
            "(line 787,col 9)-(line 787,col 89)",
            "(line 788,col 9)-(line 788,col 63)",
            "(line 789,col 9)-(line 789,col 52)",
            "(line 790,col 9)-(line 790,col 27)",
            "(line 791,col 9)-(line 791,col 40)",
            "(line 792,col 9)-(line 792,col 89)",
            "(line 793,col 9)-(line 793,col 63)",
            "(line 794,col 9)-(line 794,col 52)",
            "(line 795,col 9)-(line 795,col 27)",
            "(line 796,col 9)-(line 796,col 48)",
            "(line 797,col 9)-(line 797,col 89)",
            "(line 798,col 9)-(line 798,col 63)",
            "(line 799,col 9)-(line 799,col 52)",
            "(line 800,col 9)-(line 800,col 27)",
            "(line 801,col 9)-(line 801,col 56)",
            "(line 802,col 9)-(line 802,col 89)",
            "(line 803,col 9)-(line 803,col 63)",
            "(line 804,col 9)-(line 804,col 52)",
            "(line 805,col 9)-(line 805,col 27)",
            "(line 806,col 9)-(line 806,col 64)",
            "(line 807,col 9)-(line 807,col 89)",
            "(line 808,col 9)-(line 808,col 63)",
            "(line 809,col 9)-(line 809,col 52)",
            "(line 810,col 9)-(line 810,col 27)",
            "(line 811,col 9)-(line 811,col 72)",
            "(line 812,col 9)-(line 812,col 89)",
            "(line 813,col 9)-(line 813,col 63)",
            "(line 814,col 9)-(line 814,col 52)",
            "(line 815,col 9)-(line 815,col 27)",
            "(line 816,col 9)-(line 816,col 89)",
            "(line 817,col 9)-(line 817,col 89)",
            "(line 818,col 9)-(line 818,col 63)",
            "(line 819,col 9)-(line 819,col 52)",
            "(line 820,col 9)-(line 820,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars()",
        "snippet": "    public void testToAsciiChars() {\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        String l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"00000000\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"00000001\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"00000011\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"00000111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"00001111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"00011111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"00111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"01111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"11111111\", l_encoded);\n        // With a two raw binaries\n        bits = new byte[2];\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000000000000\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000000000001\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000000000011\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000000000111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000000001111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000000011111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000000111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000001111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000011111111\", l_encoded);\n        // work on the other byte now\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000001111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000011111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0001111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0011111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0111111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"1111111111111111\", l_encoded);\n        assertEquals(0, BinaryCodec.toAsciiChars((byte[]) null).length);\n    }",
        "begin_line": 828,
        "end_line": 943,
        "comment": " ------------------------------------------------------------------------",
        "child_ranges": [
            "(line 830,col 9)-(line 830,col 34)",
            "(line 831,col 9)-(line 831,col 70)",
            "(line 832,col 9)-(line 832,col 44)",
            "(line 833,col 9)-(line 833,col 27)",
            "(line 834,col 9)-(line 834,col 24)",
            "(line 835,col 9)-(line 835,col 63)",
            "(line 836,col 9)-(line 836,col 44)",
            "(line 837,col 9)-(line 837,col 27)",
            "(line 838,col 9)-(line 838,col 32)",
            "(line 839,col 9)-(line 839,col 63)",
            "(line 840,col 9)-(line 840,col 44)",
            "(line 841,col 9)-(line 841,col 27)",
            "(line 842,col 9)-(line 842,col 40)",
            "(line 843,col 9)-(line 843,col 63)",
            "(line 844,col 9)-(line 844,col 44)",
            "(line 845,col 9)-(line 845,col 27)",
            "(line 846,col 9)-(line 846,col 48)",
            "(line 847,col 9)-(line 847,col 63)",
            "(line 848,col 9)-(line 848,col 44)",
            "(line 849,col 9)-(line 849,col 27)",
            "(line 850,col 9)-(line 850,col 56)",
            "(line 851,col 9)-(line 851,col 63)",
            "(line 852,col 9)-(line 852,col 44)",
            "(line 853,col 9)-(line 853,col 27)",
            "(line 854,col 9)-(line 854,col 64)",
            "(line 855,col 9)-(line 855,col 63)",
            "(line 856,col 9)-(line 856,col 44)",
            "(line 857,col 9)-(line 857,col 27)",
            "(line 858,col 9)-(line 858,col 72)",
            "(line 859,col 9)-(line 859,col 63)",
            "(line 860,col 9)-(line 860,col 44)",
            "(line 861,col 9)-(line 861,col 27)",
            "(line 862,col 9)-(line 862,col 89)",
            "(line 863,col 9)-(line 863,col 63)",
            "(line 864,col 9)-(line 864,col 44)",
            "(line 866,col 9)-(line 866,col 27)",
            "(line 867,col 9)-(line 867,col 63)",
            "(line 868,col 9)-(line 868,col 52)",
            "(line 869,col 9)-(line 869,col 27)",
            "(line 870,col 9)-(line 870,col 24)",
            "(line 871,col 9)-(line 871,col 63)",
            "(line 872,col 9)-(line 872,col 52)",
            "(line 873,col 9)-(line 873,col 27)",
            "(line 874,col 9)-(line 874,col 32)",
            "(line 875,col 9)-(line 875,col 63)",
            "(line 876,col 9)-(line 876,col 52)",
            "(line 877,col 9)-(line 877,col 27)",
            "(line 878,col 9)-(line 878,col 40)",
            "(line 879,col 9)-(line 879,col 63)",
            "(line 880,col 9)-(line 880,col 52)",
            "(line 881,col 9)-(line 881,col 27)",
            "(line 882,col 9)-(line 882,col 48)",
            "(line 883,col 9)-(line 883,col 63)",
            "(line 884,col 9)-(line 884,col 52)",
            "(line 885,col 9)-(line 885,col 27)",
            "(line 886,col 9)-(line 886,col 56)",
            "(line 887,col 9)-(line 887,col 63)",
            "(line 888,col 9)-(line 888,col 52)",
            "(line 889,col 9)-(line 889,col 27)",
            "(line 890,col 9)-(line 890,col 64)",
            "(line 891,col 9)-(line 891,col 63)",
            "(line 892,col 9)-(line 892,col 52)",
            "(line 893,col 9)-(line 893,col 27)",
            "(line 894,col 9)-(line 894,col 72)",
            "(line 895,col 9)-(line 895,col 63)",
            "(line 896,col 9)-(line 896,col 52)",
            "(line 897,col 9)-(line 897,col 27)",
            "(line 898,col 9)-(line 898,col 89)",
            "(line 899,col 9)-(line 899,col 63)",
            "(line 900,col 9)-(line 900,col 52)",
            "(line 902,col 9)-(line 902,col 27)",
            "(line 903,col 9)-(line 903,col 24)",
            "(line 904,col 9)-(line 904,col 89)",
            "(line 905,col 9)-(line 905,col 63)",
            "(line 906,col 9)-(line 906,col 52)",
            "(line 907,col 9)-(line 907,col 27)",
            "(line 908,col 9)-(line 908,col 32)",
            "(line 909,col 9)-(line 909,col 89)",
            "(line 910,col 9)-(line 910,col 63)",
            "(line 911,col 9)-(line 911,col 52)",
            "(line 912,col 9)-(line 912,col 27)",
            "(line 913,col 9)-(line 913,col 40)",
            "(line 914,col 9)-(line 914,col 89)",
            "(line 915,col 9)-(line 915,col 63)",
            "(line 916,col 9)-(line 916,col 52)",
            "(line 917,col 9)-(line 917,col 27)",
            "(line 918,col 9)-(line 918,col 48)",
            "(line 919,col 9)-(line 919,col 89)",
            "(line 920,col 9)-(line 920,col 63)",
            "(line 921,col 9)-(line 921,col 52)",
            "(line 922,col 9)-(line 922,col 27)",
            "(line 923,col 9)-(line 923,col 56)",
            "(line 924,col 9)-(line 924,col 89)",
            "(line 925,col 9)-(line 925,col 63)",
            "(line 926,col 9)-(line 926,col 52)",
            "(line 927,col 9)-(line 927,col 27)",
            "(line 928,col 9)-(line 928,col 64)",
            "(line 929,col 9)-(line 929,col 89)",
            "(line 930,col 9)-(line 930,col 63)",
            "(line 931,col 9)-(line 931,col 52)",
            "(line 932,col 9)-(line 932,col 27)",
            "(line 933,col 9)-(line 933,col 72)",
            "(line 934,col 9)-(line 934,col 89)",
            "(line 935,col 9)-(line 935,col 63)",
            "(line 936,col 9)-(line 936,col 52)",
            "(line 937,col 9)-(line 937,col 27)",
            "(line 938,col 9)-(line 938,col 89)",
            "(line 939,col 9)-(line 939,col 89)",
            "(line 940,col 9)-(line 940,col 63)",
            "(line 941,col 9)-(line 941,col 52)",
            "(line 942,col 9)-(line 942,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString()",
        "snippet": "    public void testToAsciiString() {\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        String l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"00000000\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"00000001\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"00000011\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"00000111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"00001111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"00011111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"00111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"01111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"11111111\", l_encoded);\n        // With a two raw binaries\n        bits = new byte[2];\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000000000000\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000000000001\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000000000011\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000000000111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000000001111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000000011111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000000111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000001111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000011111111\", l_encoded);\n        // work on the other byte now\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000001111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000011111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0001111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0011111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0111111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"1111111111111111\", l_encoded);\n    }",
        "begin_line": 953,
        "end_line": 1067,
        "comment": "\n     * Tests the toAsciiString(byte[]) method\n     ",
        "child_ranges": [
            "(line 955,col 9)-(line 955,col 34)",
            "(line 956,col 9)-(line 956,col 59)",
            "(line 957,col 9)-(line 957,col 44)",
            "(line 958,col 9)-(line 958,col 27)",
            "(line 959,col 9)-(line 959,col 24)",
            "(line 960,col 9)-(line 960,col 52)",
            "(line 961,col 9)-(line 961,col 44)",
            "(line 962,col 9)-(line 962,col 27)",
            "(line 963,col 9)-(line 963,col 32)",
            "(line 964,col 9)-(line 964,col 52)",
            "(line 965,col 9)-(line 965,col 44)",
            "(line 966,col 9)-(line 966,col 27)",
            "(line 967,col 9)-(line 967,col 40)",
            "(line 968,col 9)-(line 968,col 52)",
            "(line 969,col 9)-(line 969,col 44)",
            "(line 970,col 9)-(line 970,col 27)",
            "(line 971,col 9)-(line 971,col 48)",
            "(line 972,col 9)-(line 972,col 52)",
            "(line 973,col 9)-(line 973,col 44)",
            "(line 974,col 9)-(line 974,col 27)",
            "(line 975,col 9)-(line 975,col 56)",
            "(line 976,col 9)-(line 976,col 52)",
            "(line 977,col 9)-(line 977,col 44)",
            "(line 978,col 9)-(line 978,col 27)",
            "(line 979,col 9)-(line 979,col 64)",
            "(line 980,col 9)-(line 980,col 52)",
            "(line 981,col 9)-(line 981,col 44)",
            "(line 982,col 9)-(line 982,col 27)",
            "(line 983,col 9)-(line 983,col 72)",
            "(line 984,col 9)-(line 984,col 52)",
            "(line 985,col 9)-(line 985,col 44)",
            "(line 986,col 9)-(line 986,col 27)",
            "(line 987,col 9)-(line 987,col 89)",
            "(line 988,col 9)-(line 988,col 52)",
            "(line 989,col 9)-(line 989,col 44)",
            "(line 991,col 9)-(line 991,col 27)",
            "(line 992,col 9)-(line 992,col 52)",
            "(line 993,col 9)-(line 993,col 52)",
            "(line 994,col 9)-(line 994,col 27)",
            "(line 995,col 9)-(line 995,col 24)",
            "(line 996,col 9)-(line 996,col 52)",
            "(line 997,col 9)-(line 997,col 52)",
            "(line 998,col 9)-(line 998,col 27)",
            "(line 999,col 9)-(line 999,col 32)",
            "(line 1000,col 9)-(line 1000,col 52)",
            "(line 1001,col 9)-(line 1001,col 52)",
            "(line 1002,col 9)-(line 1002,col 27)",
            "(line 1003,col 9)-(line 1003,col 40)",
            "(line 1004,col 9)-(line 1004,col 52)",
            "(line 1005,col 9)-(line 1005,col 52)",
            "(line 1006,col 9)-(line 1006,col 27)",
            "(line 1007,col 9)-(line 1007,col 48)",
            "(line 1008,col 9)-(line 1008,col 52)",
            "(line 1009,col 9)-(line 1009,col 52)",
            "(line 1010,col 9)-(line 1010,col 27)",
            "(line 1011,col 9)-(line 1011,col 56)",
            "(line 1012,col 9)-(line 1012,col 52)",
            "(line 1013,col 9)-(line 1013,col 52)",
            "(line 1014,col 9)-(line 1014,col 27)",
            "(line 1015,col 9)-(line 1015,col 64)",
            "(line 1016,col 9)-(line 1016,col 52)",
            "(line 1017,col 9)-(line 1017,col 52)",
            "(line 1018,col 9)-(line 1018,col 27)",
            "(line 1019,col 9)-(line 1019,col 72)",
            "(line 1020,col 9)-(line 1020,col 52)",
            "(line 1021,col 9)-(line 1021,col 52)",
            "(line 1022,col 9)-(line 1022,col 27)",
            "(line 1023,col 9)-(line 1023,col 89)",
            "(line 1024,col 9)-(line 1024,col 52)",
            "(line 1025,col 9)-(line 1025,col 52)",
            "(line 1027,col 9)-(line 1027,col 27)",
            "(line 1028,col 9)-(line 1028,col 24)",
            "(line 1029,col 9)-(line 1029,col 89)",
            "(line 1030,col 9)-(line 1030,col 52)",
            "(line 1031,col 9)-(line 1031,col 52)",
            "(line 1032,col 9)-(line 1032,col 27)",
            "(line 1033,col 9)-(line 1033,col 32)",
            "(line 1034,col 9)-(line 1034,col 89)",
            "(line 1035,col 9)-(line 1035,col 52)",
            "(line 1036,col 9)-(line 1036,col 52)",
            "(line 1037,col 9)-(line 1037,col 27)",
            "(line 1038,col 9)-(line 1038,col 40)",
            "(line 1039,col 9)-(line 1039,col 89)",
            "(line 1040,col 9)-(line 1040,col 52)",
            "(line 1041,col 9)-(line 1041,col 52)",
            "(line 1042,col 9)-(line 1042,col 27)",
            "(line 1043,col 9)-(line 1043,col 48)",
            "(line 1044,col 9)-(line 1044,col 89)",
            "(line 1045,col 9)-(line 1045,col 52)",
            "(line 1046,col 9)-(line 1046,col 52)",
            "(line 1047,col 9)-(line 1047,col 27)",
            "(line 1048,col 9)-(line 1048,col 56)",
            "(line 1049,col 9)-(line 1049,col 89)",
            "(line 1050,col 9)-(line 1050,col 52)",
            "(line 1051,col 9)-(line 1051,col 52)",
            "(line 1052,col 9)-(line 1052,col 27)",
            "(line 1053,col 9)-(line 1053,col 64)",
            "(line 1054,col 9)-(line 1054,col 89)",
            "(line 1055,col 9)-(line 1055,col 52)",
            "(line 1056,col 9)-(line 1056,col 52)",
            "(line 1057,col 9)-(line 1057,col 27)",
            "(line 1058,col 9)-(line 1058,col 72)",
            "(line 1059,col 9)-(line 1059,col 89)",
            "(line 1060,col 9)-(line 1060,col 52)",
            "(line 1061,col 9)-(line 1061,col 52)",
            "(line 1062,col 9)-(line 1062,col 27)",
            "(line 1063,col 9)-(line 1063,col 89)",
            "(line 1064,col 9)-(line 1064,col 89)",
            "(line 1065,col 9)-(line 1065,col 52)",
            "(line 1066,col 9)-(line 1066,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull()",
        "snippet": "    public void testEncodeObjectNull() throws Exception {\n        Object obj = new byte[0];\n        assertEquals(0, ((char[]) instance.encode(obj)).length);\n    }",
        "begin_line": 1077,
        "end_line": 1080,
        "comment": "\n     * Tests for Object encode(Object)\n     ",
        "child_ranges": [
            "(line 1078,col 9)-(line 1078,col 33)",
            "(line 1079,col 9)-(line 1079,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectException()",
        "snippet": "    public void testEncodeObjectException() {\n        try {\n            instance.encode(\"\");\n        } catch (EncoderException e) {\n            // all is well.\n            return;\n        }\n        fail(\"Expected EncoderException\");\n    }",
        "begin_line": 1085,
        "end_line": 1093,
        "comment": "\n     * Tests for Object encode(Object)\n     ",
        "child_ranges": [
            "(line 1086,col 9)-(line 1091,col 9)",
            "(line 1092,col 9)-(line 1092,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject()",
        "snippet": "    public void testEncodeObject() throws Exception {\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        String l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"00000000\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"00000001\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"00000011\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"00000111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"00001111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"00011111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"00111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"01111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"11111111\", l_encoded);\n        // With a two raw binaries\n        bits = new byte[2];\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000000000000\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000000000001\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000000000011\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000000000111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000000001111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000000011111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000000111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000001111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000011111111\", l_encoded);\n        // work on the other byte now\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000001111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000011111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0001111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0011111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0111111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"1111111111111111\", l_encoded);\n    }",
        "begin_line": 1098,
        "end_line": 1212,
        "comment": "\n     * Tests for Object encode(Object)\n     ",
        "child_ranges": [
            "(line 1100,col 9)-(line 1100,col 34)",
            "(line 1101,col 9)-(line 1101,col 79)",
            "(line 1102,col 9)-(line 1102,col 44)",
            "(line 1103,col 9)-(line 1103,col 27)",
            "(line 1104,col 9)-(line 1104,col 24)",
            "(line 1105,col 9)-(line 1105,col 72)",
            "(line 1106,col 9)-(line 1106,col 44)",
            "(line 1107,col 9)-(line 1107,col 27)",
            "(line 1108,col 9)-(line 1108,col 32)",
            "(line 1109,col 9)-(line 1109,col 72)",
            "(line 1110,col 9)-(line 1110,col 44)",
            "(line 1111,col 9)-(line 1111,col 27)",
            "(line 1112,col 9)-(line 1112,col 40)",
            "(line 1113,col 9)-(line 1113,col 72)",
            "(line 1114,col 9)-(line 1114,col 44)",
            "(line 1115,col 9)-(line 1115,col 27)",
            "(line 1116,col 9)-(line 1116,col 48)",
            "(line 1117,col 9)-(line 1117,col 72)",
            "(line 1118,col 9)-(line 1118,col 44)",
            "(line 1119,col 9)-(line 1119,col 27)",
            "(line 1120,col 9)-(line 1120,col 56)",
            "(line 1121,col 9)-(line 1121,col 72)",
            "(line 1122,col 9)-(line 1122,col 44)",
            "(line 1123,col 9)-(line 1123,col 27)",
            "(line 1124,col 9)-(line 1124,col 64)",
            "(line 1125,col 9)-(line 1125,col 72)",
            "(line 1126,col 9)-(line 1126,col 44)",
            "(line 1127,col 9)-(line 1127,col 27)",
            "(line 1128,col 9)-(line 1128,col 72)",
            "(line 1129,col 9)-(line 1129,col 72)",
            "(line 1130,col 9)-(line 1130,col 44)",
            "(line 1131,col 9)-(line 1131,col 27)",
            "(line 1132,col 9)-(line 1132,col 89)",
            "(line 1133,col 9)-(line 1133,col 72)",
            "(line 1134,col 9)-(line 1134,col 44)",
            "(line 1136,col 9)-(line 1136,col 27)",
            "(line 1137,col 9)-(line 1137,col 72)",
            "(line 1138,col 9)-(line 1138,col 52)",
            "(line 1139,col 9)-(line 1139,col 27)",
            "(line 1140,col 9)-(line 1140,col 24)",
            "(line 1141,col 9)-(line 1141,col 72)",
            "(line 1142,col 9)-(line 1142,col 52)",
            "(line 1143,col 9)-(line 1143,col 27)",
            "(line 1144,col 9)-(line 1144,col 32)",
            "(line 1145,col 9)-(line 1145,col 72)",
            "(line 1146,col 9)-(line 1146,col 52)",
            "(line 1147,col 9)-(line 1147,col 27)",
            "(line 1148,col 9)-(line 1148,col 40)",
            "(line 1149,col 9)-(line 1149,col 72)",
            "(line 1150,col 9)-(line 1150,col 52)",
            "(line 1151,col 9)-(line 1151,col 27)",
            "(line 1152,col 9)-(line 1152,col 48)",
            "(line 1153,col 9)-(line 1153,col 72)",
            "(line 1154,col 9)-(line 1154,col 52)",
            "(line 1155,col 9)-(line 1155,col 27)",
            "(line 1156,col 9)-(line 1156,col 56)",
            "(line 1157,col 9)-(line 1157,col 72)",
            "(line 1158,col 9)-(line 1158,col 52)",
            "(line 1159,col 9)-(line 1159,col 27)",
            "(line 1160,col 9)-(line 1160,col 64)",
            "(line 1161,col 9)-(line 1161,col 72)",
            "(line 1162,col 9)-(line 1162,col 52)",
            "(line 1163,col 9)-(line 1163,col 27)",
            "(line 1164,col 9)-(line 1164,col 72)",
            "(line 1165,col 9)-(line 1165,col 72)",
            "(line 1166,col 9)-(line 1166,col 52)",
            "(line 1167,col 9)-(line 1167,col 27)",
            "(line 1168,col 9)-(line 1168,col 89)",
            "(line 1169,col 9)-(line 1169,col 72)",
            "(line 1170,col 9)-(line 1170,col 52)",
            "(line 1172,col 9)-(line 1172,col 27)",
            "(line 1173,col 9)-(line 1173,col 24)",
            "(line 1174,col 9)-(line 1174,col 89)",
            "(line 1175,col 9)-(line 1175,col 72)",
            "(line 1176,col 9)-(line 1176,col 52)",
            "(line 1177,col 9)-(line 1177,col 27)",
            "(line 1178,col 9)-(line 1178,col 32)",
            "(line 1179,col 9)-(line 1179,col 89)",
            "(line 1180,col 9)-(line 1180,col 72)",
            "(line 1181,col 9)-(line 1181,col 52)",
            "(line 1182,col 9)-(line 1182,col 27)",
            "(line 1183,col 9)-(line 1183,col 40)",
            "(line 1184,col 9)-(line 1184,col 89)",
            "(line 1185,col 9)-(line 1185,col 72)",
            "(line 1186,col 9)-(line 1186,col 52)",
            "(line 1187,col 9)-(line 1187,col 27)",
            "(line 1188,col 9)-(line 1188,col 48)",
            "(line 1189,col 9)-(line 1189,col 89)",
            "(line 1190,col 9)-(line 1190,col 72)",
            "(line 1191,col 9)-(line 1191,col 52)",
            "(line 1192,col 9)-(line 1192,col 27)",
            "(line 1193,col 9)-(line 1193,col 56)",
            "(line 1194,col 9)-(line 1194,col 89)",
            "(line 1195,col 9)-(line 1195,col 72)",
            "(line 1196,col 9)-(line 1196,col 52)",
            "(line 1197,col 9)-(line 1197,col 27)",
            "(line 1198,col 9)-(line 1198,col 64)",
            "(line 1199,col 9)-(line 1199,col 89)",
            "(line 1200,col 9)-(line 1200,col 72)",
            "(line 1201,col 9)-(line 1201,col 52)",
            "(line 1202,col 9)-(line 1202,col 27)",
            "(line 1203,col 9)-(line 1203,col 72)",
            "(line 1204,col 9)-(line 1204,col 89)",
            "(line 1205,col 9)-(line 1205,col 72)",
            "(line 1206,col 9)-(line 1206,col 52)",
            "(line 1207,col 9)-(line 1207,col 27)",
            "(line 1208,col 9)-(line 1208,col 89)",
            "(line 1209,col 9)-(line 1209,col 89)",
            "(line 1210,col 9)-(line 1210,col 72)",
            "(line 1211,col 9)-(line 1211,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.Base64InputStreamTest(java.lang.String)",
        "snippet": "    public Base64InputStreamTest(String name) {\n        super(name);\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "\n     * Construct a new instance of this test case.\n     * \n     * @param name\n     *            Name of the test case\n     ",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE()",
        "snippet": "    public void testCodec98NPE() throws Exception {\n        byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\n        ByteArrayInputStream data = new ByteArrayInputStream(codec98);\n        Base64InputStream stream = new Base64InputStream(data);\n\n        // This line causes an NPE in commons-codec-1.4.jar:\n        byte[] decodedBytes = Base64TestData.streamToBytes(stream, new byte[1024]);\n\n        String decoded = StringUtils.newStringUtf8(decodedBytes);\n        assertEquals(\n            \"codec-98 NPE Base64InputStream\", Base64TestData.CODEC_98_NPE_DECODED, decoded\n        );\n    }",
        "begin_line": 55,
        "end_line": 67,
        "comment": "\n     * Test the Base64InputStream implementation against the special NPE inducing input\n     * identified in the CODEC-98 bug.\n     *\n     * @throws Exception for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 79)",
            "(line 57,col 9)-(line 57,col 70)",
            "(line 58,col 9)-(line 58,col 63)",
            "(line 61,col 9)-(line 61,col 83)",
            "(line 63,col 9)-(line 63,col 65)",
            "(line 64,col 9)-(line 66,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize()",
        "snippet": "    public void testBase64EmptyInputStreamMimeChuckSize() throws Exception {\n        testBase64EmptyInputStream(Base64.MIME_CHUNK_SIZE);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Tests the Base64InputStream implementation against empty input.\n     * \n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize()",
        "snippet": "    public void testBase64EmptyInputStreamPemChuckSize() throws Exception {\n        testBase64EmptyInputStream(Base64.PEM_CHUNK_SIZE);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Tests the Base64InputStream implementation against empty input.\n     * \n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStream(int)",
        "snippet": "    private void testBase64EmptyInputStream(int chuckSize) throws Exception {\n        byte[] emptyEncoded = new byte[0];\n        byte[] emptyDecoded = new byte[0];\n        testByteByByte(emptyEncoded, emptyDecoded, chuckSize, CRLF);\n        testByChunk(emptyEncoded, emptyDecoded, chuckSize, CRLF);\n    }",
        "begin_line": 89,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 42)",
            "(line 91,col 9)-(line 91,col 42)",
            "(line 92,col 9)-(line 92,col 68)",
            "(line 93,col 9)-(line 93,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk()",
        "snippet": "    public void testBase64InputStreamByChunk() throws Exception {\n        // Hello World test.\n        byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n        byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        testByChunk(encoded, decoded, Base64.MIME_CHUNK_SIZE, CRLF);\n\n        // Single Byte test.\n        encoded = StringUtils.getBytesUtf8(\"AA==\\r\\n\");\n        decoded = new byte[]{(byte) 0};\n        testByChunk(encoded, decoded, Base64.MIME_CHUNK_SIZE, CRLF);\n\n        // OpenSSL interop test.\n        encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n        decoded = Base64TestData.DECODED;\n        testByChunk(encoded, decoded, Base64.PEM_CHUNK_SIZE, LF);\n\n        // Single Line test.\n        String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n        encoded = StringUtils.getBytesUtf8(singleLine);\n        decoded = Base64TestData.DECODED;\n        testByChunk(encoded, decoded, 0, LF);\n\n        // test random data of sizes 0 thru 150\n        for (int i = 0; i <= 150; i++) {\n            byte[][] randomData = Base64TestData.randomData(i, false);\n            encoded = randomData[1];\n            decoded = randomData[0];\n            testByChunk(encoded, decoded, 0, LF);\n        }\n    }",
        "begin_line": 102,
        "end_line": 131,
        "comment": "\n     * Tests the Base64InputStream implementation.\n     * \n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 74)",
            "(line 105,col 9)-(line 105,col 66)",
            "(line 106,col 9)-(line 106,col 68)",
            "(line 109,col 9)-(line 109,col 55)",
            "(line 110,col 9)-(line 110,col 39)",
            "(line 111,col 9)-(line 111,col 68)",
            "(line 114,col 9)-(line 114,col 85)",
            "(line 115,col 9)-(line 115,col 41)",
            "(line 116,col 9)-(line 116,col 65)",
            "(line 119,col 9)-(line 119,col 90)",
            "(line 120,col 9)-(line 120,col 55)",
            "(line 121,col 9)-(line 121,col 41)",
            "(line 122,col 9)-(line 122,col 45)",
            "(line 125,col 9)-(line 130,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte()",
        "snippet": "    public void testBase64InputStreamByteByByte() throws Exception {\n        // Hello World test.\n        byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n        byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        testByteByByte(encoded, decoded, Base64.MIME_CHUNK_SIZE, CRLF);\n\n        // Single Byte test.\n        encoded = StringUtils.getBytesUtf8(\"AA==\\r\\n\");\n        decoded = new byte[]{(byte) 0};\n        testByteByByte(encoded, decoded, Base64.MIME_CHUNK_SIZE, CRLF);\n\n        // OpenSSL interop test.\n        encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n        decoded = Base64TestData.DECODED;\n        testByteByByte(encoded, decoded, Base64.PEM_CHUNK_SIZE, LF);\n\n        // Single Line test.\n        String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n        encoded = StringUtils.getBytesUtf8(singleLine);\n        decoded = Base64TestData.DECODED;\n        testByteByByte(encoded, decoded, 0, LF);\n\n        // test random data of sizes 0 thru 150\n        for (int i = 0; i <= 150; i++) {\n            byte[][] randomData = Base64TestData.randomData(i, false);\n            encoded = randomData[1];\n            decoded = randomData[0];\n            testByteByByte(encoded, decoded, 0, LF);\n        }\n    }",
        "begin_line": 139,
        "end_line": 168,
        "comment": "\n     * Tests the Base64InputStream implementation.\n     * \n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 74)",
            "(line 142,col 9)-(line 142,col 66)",
            "(line 143,col 9)-(line 143,col 71)",
            "(line 146,col 9)-(line 146,col 55)",
            "(line 147,col 9)-(line 147,col 39)",
            "(line 148,col 9)-(line 148,col 71)",
            "(line 151,col 9)-(line 151,col 85)",
            "(line 152,col 9)-(line 152,col 41)",
            "(line 153,col 9)-(line 153,col 68)",
            "(line 156,col 9)-(line 156,col 90)",
            "(line 157,col 9)-(line 157,col 55)",
            "(line 158,col 9)-(line 158,col 41)",
            "(line 159,col 9)-(line 159,col 48)",
            "(line 162,col 9)-(line 167,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testByChunk(byte[], byte[], int, byte[])",
        "snippet": "    private void testByChunk(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {\n\n        // Start with encode.\n        InputStream in = new ByteArrayInputStream(decoded);\n        in = new Base64InputStream(in, true, chunkSize, seperator);\n        byte[] output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        in = new ByteArrayInputStream(encoded);\n        in = new Base64InputStream(in);\n        output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base64InputStream(in, true, chunkSize, seperator);\n            in = new Base64InputStream(in, false);\n        }\n        output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }",
        "begin_line": 188,
        "end_line": 219,
        "comment": "\n     * Tests method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]-->\n     * encoded 3. decoded ---[WRAP-WRAP-WRAP-etc...] --> decoded\n     * <p/>\n     * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base64InputStream wraps itself in encode and decode mode\n     * over and over again.\n     * \n     * @param encoded\n     *            base64 encoded data\n     * @param decoded\n     *            the data from above, but decoded\n     * @param chunkSize\n     *            chunk size (line-length) of the base64 encoded data.\n     * @param seperator\n     *            Line separator in the base64 encoded data.\n     * @throws Exception\n     *             Usually signifies a bug in the Base64 commons-codec implementation.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 59)",
            "(line 192,col 9)-(line 192,col 67)",
            "(line 193,col 9)-(line 193,col 57)",
            "(line 195,col 9)-(line 195,col 43)",
            "(line 196,col 9)-(line 196,col 49)",
            "(line 197,col 9)-(line 197,col 78)",
            "(line 200,col 9)-(line 200,col 47)",
            "(line 201,col 9)-(line 201,col 39)",
            "(line 202,col 9)-(line 202,col 50)",
            "(line 204,col 9)-(line 204,col 43)",
            "(line 205,col 9)-(line 205,col 49)",
            "(line 206,col 9)-(line 206,col 78)",
            "(line 209,col 9)-(line 209,col 47)",
            "(line 210,col 9)-(line 213,col 9)",
            "(line 214,col 9)-(line 214,col 50)",
            "(line 216,col 9)-(line 216,col 43)",
            "(line 217,col 9)-(line 217,col 49)",
            "(line 218,col 9)-(line 218,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testByteByByte(byte[], byte[], int, byte[])",
        "snippet": "    private void testByteByByte(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {\n\n        // Start with encode.\n        InputStream in = new ByteArrayInputStream(decoded);\n        in = new Base64InputStream(in, true, chunkSize, seperator);\n        byte[] output = new byte[encoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        in = new ByteArrayInputStream(encoded);\n        in = new Base64InputStream(in);\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base64InputStream(in, true, chunkSize, seperator);\n            in = new Base64InputStream(in, false);\n        }\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }",
        "begin_line": 239,
        "end_line": 279,
        "comment": "\n     * Tests method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]-->\n     * encoded 3. decoded ---[WRAP-WRAP-WRAP-etc...] --> decoded\n     * <p/>\n     * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base64InputStream wraps itself in encode and decode mode\n     * over and over again.\n     * \n     * @param encoded\n     *            base64 encoded data\n     * @param decoded\n     *            the data from above, but decoded\n     * @param chunkSize\n     *            chunk size (line-length) of the base64 encoded data.\n     * @param seperator\n     *            Line separator in the base64 encoded data.\n     * @throws Exception\n     *             Usually signifies a bug in the Base64 commons-codec implementation.\n     ",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 59)",
            "(line 243,col 9)-(line 243,col 67)",
            "(line 244,col 9)-(line 244,col 49)",
            "(line 245,col 9)-(line 247,col 9)",
            "(line 249,col 9)-(line 249,col 43)",
            "(line 250,col 9)-(line 250,col 49)",
            "(line 251,col 9)-(line 251,col 78)",
            "(line 254,col 9)-(line 254,col 47)",
            "(line 255,col 9)-(line 255,col 39)",
            "(line 256,col 9)-(line 256,col 42)",
            "(line 257,col 9)-(line 259,col 9)",
            "(line 261,col 9)-(line 261,col 43)",
            "(line 262,col 9)-(line 262,col 49)",
            "(line 263,col 9)-(line 263,col 78)",
            "(line 266,col 9)-(line 266,col 47)",
            "(line 267,col 9)-(line 270,col 9)",
            "(line 271,col 9)-(line 271,col 42)",
            "(line 272,col 9)-(line 274,col 9)",
            "(line 276,col 9)-(line 276,col 43)",
            "(line 277,col 9)-(line 277,col 49)",
            "(line 278,col 9)-(line 278,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported()",
        "snippet": "    public void testMarkSupported() throws Exception {\n        byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n        Base64InputStream in = new Base64InputStream(bin, true, 4, new byte[]{0, 0, 0});\n        // Always returns false for now.\n        assertFalse(\"Base64InputStream.markSupported() is false\", in.markSupported());\n    }",
        "begin_line": 286,
        "end_line": 292,
        "comment": "\n     * Tests markSupported.\n     * \n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 287,col 9)-(line 287,col 66)",
            "(line 288,col 9)-(line 288,col 69)",
            "(line 289,col 9)-(line 289,col 88)",
            "(line 291,col 9)-(line 291,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testRead0()",
        "snippet": "    public void testRead0() throws Exception {\n        byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        byte[] buf = new byte[1024];\n        int bytesRead = 0;\n        ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n        Base64InputStream in = new Base64InputStream(bin, true, 4, new byte[]{0, 0, 0});\n        bytesRead = in.read(buf, 0, 0);\n        assertEquals(\"Base64InputStream.read(buf, 0, 0) returns 0\", 0, bytesRead);\n    }",
        "begin_line": 299,
        "end_line": 307,
        "comment": "\n     * Tests read returning 0\n     * \n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 66)",
            "(line 301,col 9)-(line 301,col 36)",
            "(line 302,col 9)-(line 302,col 26)",
            "(line 303,col 9)-(line 303,col 69)",
            "(line 304,col 9)-(line 304,col 88)",
            "(line 305,col 9)-(line 305,col 39)",
            "(line 306,col 9)-(line 306,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull()",
        "snippet": "    public void testReadNull() throws Exception {\n        byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n        Base64InputStream in = new Base64InputStream(bin, true, 4, new byte[]{0, 0, 0});\n        try {\n            in.read(null, 0, 0);\n            fail(\"Base64InputStream.read(null, 0, 0) to throw a NullPointerException\");\n        } catch (NullPointerException e) {\n            // Expected\n        }\n    }",
        "begin_line": 315,
        "end_line": 325,
        "comment": "\n     * Tests read with null.\n     * \n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 66)",
            "(line 317,col 9)-(line 317,col 69)",
            "(line 318,col 9)-(line 318,col 88)",
            "(line 319,col 9)-(line 324,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds()",
        "snippet": "    public void testReadOutOfBounds() throws Exception {\n        byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        byte[] buf = new byte[1024];\n        ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n        Base64InputStream in = new Base64InputStream(bin, true, 4, new byte[]{0, 0, 0});\n\n        try {\n            in.read(buf, -1, 0);\n            fail(\"Expected Base64InputStream.read(buf, -1, 0) to throw IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // Expected\n        }\n\n        try {\n            in.read(buf, 0, -1);\n            fail(\"Expected Base64InputStream.read(buf, 0, -1) to throw IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // Expected\n        }\n\n        try {\n            in.read(buf, buf.length + 1, 0);\n            fail(\"Base64InputStream.read(buf, buf.length + 1, 0) throws IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // Expected\n        }\n\n        try {\n            in.read(buf, buf.length - 1, 2);\n            fail(\"Base64InputStream.read(buf, buf.length - 1, 2) throws IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // Expected\n        }\n    }",
        "begin_line": 332,
        "end_line": 365,
        "comment": "\n     * Tests read throwing IndexOutOfBoundsException\n     * \n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 66)",
            "(line 334,col 9)-(line 334,col 36)",
            "(line 335,col 9)-(line 335,col 69)",
            "(line 336,col 9)-(line 336,col 88)",
            "(line 338,col 9)-(line 343,col 9)",
            "(line 345,col 9)-(line 350,col 9)",
            "(line 352,col 9)-(line 357,col 9)",
            "(line 359,col 9)-(line 364,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.HexTest(java.lang.String)",
        "snippet": "    public HexTest(String name) {\n        super(name);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.charsetSanityCheck(java.lang.String)",
        "snippet": "    private boolean charsetSanityCheck(String name) {\n        final String source = \"the quick brown dog jumped over the lazy fox\";\n        try {\n            byte[] bytes = source.getBytes(name);\n            String str = new String(bytes, name);\n            boolean equals = source.equals(str);\n            if (equals == false) {\n                // Here with:\n                //\n                // Java Sun 1.4.2_19 x86 32-bits on Windows XP\n                // JIS_X0212-1990\n                // x-JIS0208\n                //\n                // Java Sun 1.5.0_17 x86 32-bits on Windows XP\n                // JIS_X0212-1990\n                // x-IBM834\n                // x-JIS0208\n                // x-MacDingbat\n                // x-MacSymbol\n                //\n                // Java Sun 1.6.0_14 x86 32-bits\n                // JIS_X0212-1990\n                // x-IBM834\n                // x-JIS0208\n                // x-MacDingbat\n                // x-MacSymbol\n                // \n                log(\"FAILED charsetSanityCheck=Interesting Java charset oddity: Roundtrip failed for \" + name);\n            }\n            return equals;\n        } catch (UnsupportedEncodingException e) {\n            // Should NEVER happen since we are getting the name from the Charset class.\n            if (LOG) {\n                log(\"FAILED charsetSanityCheck=\" + name + \", e=\" + e);\n                log(e);\n            }\n            return false;\n        } catch (UnsupportedOperationException e) {\n            // Caught here with:\n            // x-JISAutoDetect on Windows XP and Java Sun 1.4.2_19 x86 32-bits\n            // x-JISAutoDetect on Windows XP and Java Sun 1.5.0_17 x86 32-bits\n            // x-JISAutoDetect on Windows XP and Java Sun 1.6.0_14 x86 32-bits\n            if (LOG) {\n                log(\"FAILED charsetSanityCheck=\" + name + \", e=\" + e);\n                log(e);\n            }\n            return false;\n        }\n    }",
        "begin_line": 50,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 77)",
            "(line 52,col 9)-(line 97,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.checkDecodeHexOddCharacters(char[])",
        "snippet": "    private void checkDecodeHexOddCharacters(char[] data) {\n        try {\n            Hex.decodeHex(data);\n            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n        } catch (DecoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 103,
        "end_line": 110,
        "comment": "\n     * @param data\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 109,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.log(java.lang.String)",
        "snippet": "    private void log(String s) {\n        if (LOG) {\n            System.out.println(s);\n            System.out.flush();\n        }\n    }",
        "begin_line": 112,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 116,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.log(java.lang.Throwable)",
        "snippet": "    private void log(Throwable t) {\n        if (LOG) {\n            t.printStackTrace(System.out);\n            System.out.flush();\n        }\n    }",
        "begin_line": 119,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 123,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testCustomCharset()",
        "snippet": "    public void testCustomCharset() throws UnsupportedEncodingException, DecoderException {\n        SortedMap map = Charset.availableCharsets();\n        Set keys = map.keySet();\n        Iterator iterator = keys.iterator();\n        log(\"testCustomCharset: Checking \" + keys.size() + \" charsets...\");\n        while (iterator.hasNext()) {\n            String name = (String) iterator.next();\n            testCustomCharset(name, \"testCustomCharset\");\n        }\n    }",
        "begin_line": 126,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 52)",
            "(line 128,col 9)-(line 128,col 32)",
            "(line 129,col 9)-(line 129,col 44)",
            "(line 130,col 9)-(line 130,col 75)",
            "(line 131,col 9)-(line 134,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testCustomCharset(java.lang.String, java.lang.String)",
        "snippet": "    private void testCustomCharset(String name, String parent) throws UnsupportedEncodingException, DecoderException {\n        if (charsetSanityCheck(name) == false) {\n            return;\n        }\n        log(parent + \"=\" + name);\n        Hex customCodec = new Hex(name);\n        // source data\n        String sourceString = \"Hello World\";\n        byte[] sourceBytes = sourceString.getBytes(name);\n        // test 1\n        // encode source to hex string to bytes with charset\n        byte[] actualEncodedBytes = customCodec.encode(sourceBytes);\n        // encode source to hex string...\n        String expectedHexString = Hex.encodeHexString(sourceBytes);\n        // ... and get the bytes in the expected charset\n        byte[] expectedHexStringBytes = expectedHexString.getBytes(name);\n        Assert.assertTrue(Arrays.equals(expectedHexStringBytes, actualEncodedBytes));\n        // test 2\n        String actualStringFromBytes = new String(actualEncodedBytes, name);\n        assertEquals(name + \", expectedHexString=\" + expectedHexString + \", actualStringFromBytes=\" + actualStringFromBytes,\n                expectedHexString, actualStringFromBytes);\n        // second test:\n        Hex utf8Codec = new Hex();\n        expectedHexString = \"48656c6c6f20576f726c64\";\n        byte[] decodedUtf8Bytes = (byte[]) utf8Codec.decode(expectedHexString);\n        actualStringFromBytes = new String(decodedUtf8Bytes, utf8Codec.getCharsetName());\n        // sanity check:\n        assertEquals(name, sourceString, actualStringFromBytes);\n        // actual check:\n        byte[] decodedCustomBytes = customCodec.decode(actualEncodedBytes);\n        actualStringFromBytes = new String(decodedCustomBytes, name);\n        assertEquals(name, sourceString, actualStringFromBytes);\n    }",
        "begin_line": 144,
        "end_line": 176,
        "comment": "\n     * @param name\n     * @param parent\n     *            TODO\n     * @throws UnsupportedEncodingException\n     * @throws DecoderException\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 147,col 9)",
            "(line 148,col 9)-(line 148,col 33)",
            "(line 149,col 9)-(line 149,col 40)",
            "(line 151,col 9)-(line 151,col 44)",
            "(line 152,col 9)-(line 152,col 57)",
            "(line 155,col 9)-(line 155,col 68)",
            "(line 157,col 9)-(line 157,col 68)",
            "(line 159,col 9)-(line 159,col 73)",
            "(line 160,col 9)-(line 160,col 85)",
            "(line 162,col 9)-(line 162,col 76)",
            "(line 163,col 9)-(line 164,col 58)",
            "(line 166,col 9)-(line 166,col 34)",
            "(line 167,col 9)-(line 167,col 53)",
            "(line 168,col 9)-(line 168,col 79)",
            "(line 169,col 9)-(line 169,col 89)",
            "(line 171,col 9)-(line 171,col 64)",
            "(line 173,col 9)-(line 173,col 75)",
            "(line 174,col 9)-(line 174,col 69)",
            "(line 175,col 9)-(line 175,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testCustomCharsetBadNameEncodeByteArray()",
        "snippet": "    public void testCustomCharsetBadNameEncodeByteArray() throws UnsupportedEncodingException {\n        try {\n            new Hex(BAD_ENCODING_NAME).encode(\"Hello World\".getBytes(\"UTF-8\"));\n            fail(\"Expected \" + IllegalStateException.class.getName());\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n    }",
        "begin_line": 178,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 179,col 9)-(line 184,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testCustomCharsetBadNameEncodeObject()",
        "snippet": "    public void testCustomCharsetBadNameEncodeObject() {\n        try {\n            new Hex(BAD_ENCODING_NAME).encode(\"Hello World\");\n            fail(\"Expected \" + EncoderException.class.getName());\n        } catch (EncoderException e) {\n            // Expected\n        }\n    }",
        "begin_line": 187,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 193,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testCustomCharsetBadNameDecodeObject()",
        "snippet": "    public void testCustomCharsetBadNameDecodeObject() throws UnsupportedEncodingException {\n        try {\n            new Hex(BAD_ENCODING_NAME).decode(\"Hello World\".getBytes(\"UTF-8\"));\n            fail(\"Expected \" + DecoderException.class.getName());\n        } catch (DecoderException e) {\n            // Expected\n        }\n    }",
        "begin_line": 196,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 202,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testCustomCharsetToString()",
        "snippet": "    public void testCustomCharsetToString() {\n        assertTrue(new Hex().toString().indexOf(Hex.DEFAULT_CHARSET_NAME) >= 0);\n    }",
        "begin_line": 205,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters()",
        "snippet": "    public void testDecodeArrayOddCharacters() {\n        try {\n            new Hex().decode(new byte[]{65});\n            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n        } catch (DecoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 209,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 210,col 9)-(line 215,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0()",
        "snippet": "    public void testDecodeBadCharacterPos0() {\n        try {\n            new Hex().decode(\"q0\");\n            fail(\"An exception wasn't thrown when trying to decode an illegal character\");\n        } catch (DecoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 218,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 224,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1()",
        "snippet": "    public void testDecodeBadCharacterPos1() {\n        try {\n            new Hex().decode(\"0q\");\n            fail(\"An exception wasn't thrown when trying to decode an illegal character\");\n        } catch (DecoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 227,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 233,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeClassCastException()",
        "snippet": "    public void testDecodeClassCastException() {\n        try {\n            new Hex().decode(new int[]{65});\n            fail(\"An exception wasn't thrown when trying to decode.\");\n        } catch (DecoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 236,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 237,col 9)-(line 242,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters1()",
        "snippet": "    public void testDecodeHexOddCharacters1() {\n        checkDecodeHexOddCharacters(new char[]{'A'});\n    }",
        "begin_line": 245,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters3()",
        "snippet": "    public void testDecodeHexOddCharacters3() {\n        checkDecodeHexOddCharacters(new char[]{'A', 'B', 'C'});\n    }",
        "begin_line": 249,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters5()",
        "snippet": "    public void testDecodeHexOddCharacters5() {\n        checkDecodeHexOddCharacters(new char[]{'A', 'B', 'C', 'D', 'E'});\n    }",
        "begin_line": 253,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters()",
        "snippet": "    public void testDecodeStringOddCharacters() {\n        try {\n            new Hex().decode(\"6\");\n            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n        } catch (DecoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 257,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 258,col 9)-(line 263,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDencodeEmpty()",
        "snippet": "    public void testDencodeEmpty() throws DecoderException {\n        assertTrue(Arrays.equals(new byte[0], Hex.decodeHex(new char[0])));\n        assertTrue(Arrays.equals(new byte[0], new Hex().decode(new byte[0])));\n        assertTrue(Arrays.equals(new byte[0], (byte[]) new Hex().decode(\"\")));\n    }",
        "begin_line": 266,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 75)",
            "(line 268,col 9)-(line 268,col 78)",
            "(line 269,col 9)-(line 269,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeClassCastException()",
        "snippet": "    public void testEncodeClassCastException() {\n        try {\n            new Hex().encode(new int[]{65});\n            fail(\"An exception wasn't thrown when trying to encode.\");\n        } catch (EncoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 272,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 278,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom()",
        "snippet": "    public void testEncodeDecodeRandom() throws DecoderException, EncoderException {\n        Random random = new Random();\n\n        Hex hex = new Hex();\n        for (int i = 5; i > 0; i--) {\n            byte[] data = new byte[random.nextInt(10000) + 1];\n            random.nextBytes(data);\n\n            // static API\n            char[] encodedChars = Hex.encodeHex(data);\n            byte[] decodedBytes = Hex.decodeHex(encodedChars);\n            assertTrue(Arrays.equals(data, decodedBytes));\n\n            // instance API with array parameter\n            byte[] encodedStringBytes = hex.encode(data);\n            decodedBytes = hex.decode(encodedStringBytes);\n            assertTrue(Arrays.equals(data, decodedBytes));\n\n            // instance API with char[] (Object) parameter\n            String dataString = new String(encodedChars);\n            char[] encodedStringChars = (char[]) hex.encode(dataString);\n            decodedBytes = (byte[]) hex.decode(encodedStringChars);\n            assertTrue(Arrays.equals(StringUtils.getBytesUtf8(dataString), decodedBytes));\n\n            // instance API with String (Object) parameter\n            dataString = new String(encodedChars);\n            encodedStringChars = (char[]) hex.encode(dataString);\n            decodedBytes = (byte[]) hex.decode(new String(encodedStringChars));\n            assertTrue(Arrays.equals(StringUtils.getBytesUtf8(dataString), decodedBytes));\n        }\n    }",
        "begin_line": 281,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 37)",
            "(line 284,col 9)-(line 284,col 28)",
            "(line 285,col 9)-(line 310,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeEmpty()",
        "snippet": "    public void testEncodeEmpty() throws EncoderException {\n        assertTrue(Arrays.equals(new char[0], Hex.encodeHex(new byte[0])));\n        assertTrue(Arrays.equals(new byte[0], new Hex().encode(new byte[0])));\n        assertTrue(Arrays.equals(new char[0], (char[]) new Hex().encode(\"\")));\n    }",
        "begin_line": 313,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 314,col 9)-(line 314,col 75)",
            "(line 315,col 9)-(line 315,col 78)",
            "(line 316,col 9)-(line 316,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeZeroes()",
        "snippet": "    public void testEncodeZeroes() {\n        char[] c = Hex.encodeHex(new byte[36]);\n        assertEquals(\"000000000000000000000000000000000000000000000000000000000000000000000000\", new String(c));\n    }",
        "begin_line": 319,
        "end_line": 322,
        "comment": "",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 47)",
            "(line 321,col 9)-(line 321,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex()",
        "snippet": "    public void testHelloWorldLowerCaseHex() {\n        byte[] b = StringUtils.getBytesUtf8(\"Hello World\");\n        final String expected = \"48656c6c6f20576f726c64\";\n        char[] actual;\n        actual = Hex.encodeHex(b);\n        assertTrue(expected.equals(new String(actual)));\n        actual = Hex.encodeHex(b, true);\n        assertTrue(expected.equals(new String(actual)));\n        actual = Hex.encodeHex(b, false);\n        assertFalse(expected.equals(new String(actual)));\n    }",
        "begin_line": 324,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 59)",
            "(line 326,col 9)-(line 326,col 57)",
            "(line 327,col 9)-(line 327,col 22)",
            "(line 328,col 9)-(line 328,col 34)",
            "(line 329,col 9)-(line 329,col 56)",
            "(line 330,col 9)-(line 330,col 40)",
            "(line 331,col 9)-(line 331,col 56)",
            "(line 332,col 9)-(line 332,col 41)",
            "(line 333,col 9)-(line 333,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex()",
        "snippet": "    public void testHelloWorldUpperCaseHex() {\n        byte[] b = StringUtils.getBytesUtf8(\"Hello World\");\n        final String expected = \"48656C6C6F20576F726C64\";\n        char[] actual;\n        actual = Hex.encodeHex(b);\n        assertFalse(expected.equals(new String(actual)));\n        actual = Hex.encodeHex(b, true);\n        assertFalse(expected.equals(new String(actual)));\n        actual = Hex.encodeHex(b, false);\n        assertTrue(expected.equals(new String(actual)));\n    }",
        "begin_line": 336,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 337,col 9)-(line 337,col 59)",
            "(line 338,col 9)-(line 338,col 57)",
            "(line 339,col 9)-(line 339,col 22)",
            "(line 340,col 9)-(line 340,col 34)",
            "(line 341,col 9)-(line 341,col 57)",
            "(line 342,col 9)-(line 342,col 40)",
            "(line 343,col 9)-(line 343,col 57)",
            "(line 344,col 9)-(line 344,col 41)",
            "(line 345,col 9)-(line 345,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testRequiredCharset()",
        "snippet": "    public void testRequiredCharset() throws UnsupportedEncodingException, DecoderException {\n        testCustomCharset(\"UTF-8\", \"testRequiredCharset\");\n        testCustomCharset(\"UTF-16\", \"testRequiredCharset\");\n        testCustomCharset(\"UTF-16BE\", \"testRequiredCharset\");\n        testCustomCharset(\"UTF-16LE\", \"testRequiredCharset\");\n        testCustomCharset(\"US-ASCII\", \"testRequiredCharset\");\n        testCustomCharset(\"ISO8859_1\", \"testRequiredCharset\");\n    }",
        "begin_line": 348,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 58)",
            "(line 350,col 9)-(line 350,col 59)",
            "(line 351,col 9)-(line 351,col 61)",
            "(line 352,col 9)-(line 352,col 61)",
            "(line 353,col 9)-(line 353,col 61)",
            "(line 354,col 9)-(line 354,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.Base64Codec13Test(java.lang.String)",
        "snippet": "    public Base64Codec13Test(String name) {\n        super(name);\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.initSTRINGS()",
        "snippet": "    private static void initSTRINGS() {\n        String[] s = STRINGS;\n        s[0] = \"\";\n        s[1] = \"uA==\";\n        s[2] = \"z9w=\";\n        s[3] = \"TQ+Z\";\n        s[4] = \"bhjUYA==\";\n        s[5] = \"1cO9td8=\";\n        s[6] = \"sMxHoJf5\";\n        s[7] = \"jQcPlDsZzw==\";\n        s[8] = \"TAaPnfW/CYU=\";\n        s[9] = \"cXTZuwzXPONS\";\n        s[10] = \"Ltn/ZTV4IjT6OA==\";\n        s[11] = \"6fh+jdU31SOmWrc=\";\n        s[12] = \"E/5MoD4qCvDuTcFA\";\n        s[13] = \"2n9YyfCMyMXembtssQ==\";\n        s[14] = \"qBka3Bq6V31HmcmHjkY=\";\n        s[15] = \"WvyZe6kQ8py7m25ucawJ\";\n        s[16] = \"oYpxMy6BSpZXhVpOR6dXmA==\";\n        s[63] = \"yexFaNKaP+VkVwEUvxQXbC0HSCi/srOY7c036lT25frs4xjIvp214JHCg7OL/XZW3IMe6CDgSMCaaI91eRgM\";\n        s[64] = \"vkqgnuJ3plxNtoveiMJuYLN6wZQLpb3Fg48/zHkdFuDucuMKWVRO/niFRgKsFqcxq6VgCxwQbePiP9sRnxz7wg==\";\n        s[65] = \"YHks3GCb2uVF47Y2tCieiDGJ879Rm5dBhQhQizYhfWOo+BrB2/K+E7wZWTid14lMpM60+5C0N9JNKAcBESeqZZI=\";\n        s[66] = \"z8551jmQp/Qs95tw226+HCHWruKx/JvfBCfQ5p0fF77mkSpp66E552ik2gycrBBsMC/NbznAgTZoMzZxehfJwu49\";\n        s[67] = \"VsR2whqq/qQm342+TNz1lgOZMoWbpCz+kj2zflq0nx7S/ReEVPUJcqgMtVzrr2FVQPfBAH5VRjR+hkxwv4bssQms8Q==\";\n        s[68] = \"5xmIp8dUJZzkisIkuEPsnPXvzDeMo48qWFfHIn2av3jr5qoZHCs0LfNEyepC3v2sa0nCU0FlqsmDyTI5/2jt5zsLtV0=\";\n        s[69] = \"tGEgXjglUB9NbCtiS88AetLtRqhCAnhzOUKVgvbJZHqOA6x8uOorA1t3NcaIA00ZqbPYALu4LzIm4i4lAL9QgiH/Jg7b\";\n        s[70] = \"gFtxEhYJahDmU5dpudYs6ZTsqAx+s2j+06A0zeyb3U7nhZFsbkCDlds0EYUoqerZqZPm7F6CDOOD3dU7nYmelE0DxyMO9A==\";\n        s[71] = \"j/h/1JygYA5bjttxzQxr5gBtgh+AYVozhF4WgvcU/g49v0hUy6FdhfZewGK+Phtzj7RabI5p2zXyzvkmLQdFhdI5Um4O5sw=\";\n        s[72] = \"m+kYVGojIR5pgbz7pGJm2g+3qqk7fhl3cowa2eVrhki7WofyywnRezqTxOkBgVFz6nKs8qxpbbbzALctcPeMsp9dpXUfuUJr\";\n        s[73] = \"pPaGnMr0UYmldnJVk/F+3WCJJ1r2otvD5KJdt2u1RnS6LwhHhwLCqfW8O/QEg43WdxKomGL/JM33tn/B9pMPoIU0QTGjq2GRow==\";\n        s[74] = \"mOxzGyym6T/BxCV5nSiIYMlfAUmCN7gt7+ZTMg1kd8Ptirk+JF5dk8USbWBu/9ZvNg5ZuiJCeGwfaVpqpZ3K9ySF7C87Jvu1RUE=\";\n        s[75] = \"VYLOIE4DnhxJn3FKS/2RHHHYLlZiGVdV/k4uBbtAYHUSTpRzaaYPGNAVjdNwbTHIihmeuk/5YQUy8NFsxIom+Li7bnWiBoHKBPP7\";\n        s[76] = \"7foMpJ0TknCatjUiSxtnuKSiz4Qvl/idWY9UKiTljoQHZ+C8bcUscnI/bZr13e6AvyUh47MlpdGvzIm05qUdMWWLoZJOaGYvDmvrWQ==\";\n        s[77] = \"jxQSGiFs+b1TfE4lDUAPUPJ0SWeUgl03rK6auieWJcarDIHM97gGOHMmyHudRMqkZmIkxYRgYgCCUg/JeU91OZD3tL4U+wNhShywe88=\";\n        s[78] = \"UGmH/gl7t3Dk801vRhRDEbgsfShtHZ1gZQn4KNZ5Qsw3WiGjW0ImInVHa+LSHBzLUjwC0Z3nXO4i4+CiKYqAspOViE6WqVUY8ZSV0Og4\";\n        s[79] = \"wdEoYmJuRng2z2IkAiSgJ1CW2VE7H7oXpYWEFFO8nG0bZn7PHhT8KyhaO2ridl8eUEysja0VXFDyQqSgZnvdUKrCGepWGZbw0/0bDws3Ag==\";\n        s[80] = \"5kZqgrUbt+rN5BWAddeUtm9TGT43vYpB6PeyQwTyy9Vbr0+U/4Qzy0Iw37Ra293HmkmpgQzuScVpcIiFGXPAFWwToR+bovwu7aXji/FnMwk=\";\n        s[81] = \"E467MMmJbmwv8Omc2TdcyMr/30B8izWbf+CAuJtw67b1g9trhC6n4GYnXjeW9DYvmWoIJPx0zvU/Q+gqv0cteg2bx9P2mrgMDARb6egowqjx\";\n        s[82] = \"Vpt8hYb4jx1F+7REX7K65v6eO5F1GDg/K8SVLWDSp0srupYEQkBVRxnB9dmhSo9XHpz4C8pRl8r82fxXZummEf4U2Oh0Dip5rnNtDL+IJvL8lQ==\";\n        s[121] = \"hf69xr9mtFf4N3j2uA9MgLL5Zy94Hjv+VQi94+LS8972JJgDHCQOwP5whdQkV+SJpXkiyHGaSsQ4fhepPwzuZcEpYER+beny1j+M0HSZe36MdRIhlTqno+4qsXckL0CjXsYkJJM0NAfOYjHAus5G1bgi9VhmiMfAMA==\";\n        s[122] = \"yKzTh5hPp9/PBeZtrZXsFHAR9ywOM3hRaBDkgG9E09wFW8MZD0xMGegcp0QrTJcP8QYOaYhTDVimPqsNTVOmjdjkvS+2WhjJW4mVOXQ8KID91yaBtPo+DStL5GMgctcP5MoVf1Vp8w/mYtofqbllfDm5NfYzh2A7ijY=\";\n        s[123] = \"csFmwvDzoO4IO6ySDA4B2V7emEetAwCgO66zzlfWb3KDrPfFZc3Jgr4+dlaUkEIDHYeLHETdTssWOl2KrPHBEsULpDTR+3OhurXb1Qr2NvHiHFuqT3Geb6EYw2albfTmXxch82ablt4WKl4qPcSey54v6tsCuUuZzrkt\";\n        s[124] = \"5InxvKwpoCV7EK78OzU/tL9/NmK14Prw9tOCAyK+xpUNLZriuVEVdgpoZ05rliufaUDGHH8dPAem8G9DN/VOPktB6vXKtc2kMUgnMTiZwv/UVd+xyqnT8PLEdNQ8rCWxyiCcLdXFf0+xcE7qCcwzC+D7+cRW+i6dnpZkyw==\";\n        s[125] = \"cEx7oTsSHWUFPj92cstdy5wGbRcxH+VRWN8kaNTTCPWqSckyU9Xk/jj5/gj9DFwjfsCSp60xutf4/rFanjtwqtRg6dJLP4JAgpOKswDlHi6Vt7zF/w7HidMf2sdtlsqzayZmT2Hn7iOo3CExzr5Z5JfmMFAX8R9peUN4t5U=\";\n        s[126] = \"AeXetVbj+7mmGiCs3BGUSZDLlq2odMsN8JAHQM64Cly8y5jw75PpISocWRFFQmmXYP7ckKmtuhIvD69HtZxGhNRsl1l1gXzKFhsWykcRtG87F8sS1Uv/i6QvGiRIDVEGGIzWrzRIISkBb9wCxJ2HESfleWwrz/GqryjoN26B\";\n        s[127] = \"aj1/8/+U8VO3D2iAwvQXZ4H0KwtuzDm4JCC8+22ccqk+UzKvqjGs87XngwfsMfSkeGVAi6VB6tfNJTjYctaj7R8dwh2PIfLSrvaphw4wNB2REjplnPojoOb9bNUNtUvdK3b1bArOWugIRJWLnMl72yEHFb1iBfBmn7uIa7KT2Q==\";\n        s[128] = \"kiMuF/1CMRlgoS/uLKn1mNZFZNHJNkRQnivOrzj8HQAagwzvTXvsGgI9hXX3qaeZL9/x/Oq+Y5F6Dh+wXo+0kp6JagFjvbTJcQSowFzIwg7/V9sans0NE0Ejow5BfZKvihFI46sHiALl1qzoXqLQq+5fZGIFRyyY8wFW1uiNu9k=\";\n        s[129] = \"YXmCWhiNz4/IhyxQIYjgNvjX+XwDiPTSBMaFELm5X8Y4knGRnkF4/zix8l9wHBb+7Cgfrr46rF7eiIzaAFLjLjjewy63duBJiVbEWjqFO0fu6T9iIjuEaF2sTppvuZNPHx80vN+HLAnAVmgFESw5APXWn15dizvuUfVHd5isCqbA\";\n        s[130] = \"GJfUoBivW5uqDpUxTRfjGWNYfN3/dTFtdRqCIH5L2c1nWX0dgY3ba1+fW/YX1Oh5aw4lC6BIiiThjJoV1VrNnlXzbcUcMy+GsDUUB8Qe8lBvfe/t4RmNPB0hVgrS89ntbuU0SsCmWw+9DqM3nidPebANKERig1zZTBBKgpVf7HPFCA==\";\n        s[131] = \"eTerNs7dOqJAxAxcMQRnUDc2cBj2x0jU1g1D3G+b22kDz7JBzOy/mxhGXAQ3130lavWMhImSBkReU+z0A13EYVMUv9PFzD747KCvns+SCo52YNHB0896b4l47q8hu8jsD17TZ2uWWJhS4cNnSE1jeM6NoXGKvf90yxfzwucNYc4RdaQ=\";\n        s[132] = \"lbrGsjbzE521q8tzVHV7vcTPchUnzI/UfeR2R+cmOa29YljPWLht9Wx2JrjiKv4Of5nXe7kvhi+LYUuFVqgaqIFhC/PLbqOFiT2VZcXorToaRT9CLiqV5b6nHN/Txz6SI7MiD3hnk7psDbglPOo+ytqc9sFHj7UkR1ZctQjwFYwJjlxf\";\n        s[133] = \"mQwAPzYzfxz9FXEiZ6M8u1oN3EJbFYmNVfpm+j0DqgU+OPI4URHBIrF4xvdMvAPn0WuarbQy/ZVN0eKL7S4K3Mvan0flAwaZdI+e5HpkfxOoGTp8Dk5EFTXjmZ/s+GonePEQEGNVPL1WYoD6xXqAAvMLKtyrFcpoiGS9eDBlsZDQzPzz/g==\";\n        s[134] = \"3G6d12UY4l5W7Nnw0BL0HnViVg9SdEuLMqeZwy0RlJR/Ytcgd/mIxIuXXAlGhvhoX6Xc2BGU7RpTi1jYKzA86yul0j96dbcE4OtrP9lUBJlcY9eWz59dvLqKxwt3cEOBwrPf69MHuIa256es3AOCobfC8RQScW0PQ0QUa1VHB/eXSsVTSWg=\";\n        s[135] = \"AxgrZKTFk5JvLC3DBACHwp266FxKI/yn9F+1tYkzL57RVs5HCJYS47VuG0T0E2wqzHqcLKPQMZWU7vbRoyMGNL3ZtaHoZqTqcq9KWtODC+OnEvSS7+1P4SmQDuyL2MJ/eJABJKNcu1K/Lk0buAaO0FvX6OGBcPzu1+dv/ZkwuORK07qRnxqQ\";\n        s[136] = \"atkG8l2U/Nnm+zLu7zjenrfcAVQJMUqHimFZ3cQfaUp4qyrFn1UiwZ33j66Vt63eVaT/FXx+LlEnsHn6ATPBMp3iEYoBJYyNpjz/zROhBbcznQAMdWUTcyKInvnG3x6ExgBXpyqfxxp/Pm8by7LlSUT5MKHdcu+TEfUXRokCr2iPnt7NYsNDfA==\";\n        s[137] = \"dciU1mSHGcBxOAVBgJx75J6DaQdBZfTIzQ04WhkkdRMupOZWSnv19xhz8hiO+ZnbBtDJuO5rHsUGzH/jYacfZyCQ924roRvkh3T1yxsLq3abZJUCD9HYnPTELVhv1+cEF4aoO3vGOu2FpfLUn5QTd0PozsIqcqZVB2V57B7DjfizUe3D8Yf5Vco=\";\n        s[138] = \"dgR1PPacBvtILBmg33s9KWtuc67ndh3rCHZ/lIN7sENgbFqJQy5DC3XIeHTV7oWd+tJQaXxoC71/SU7Rz6OClAMKXLbMz8U6RPiqn3M7MRCQcDfNjA5cCNknXT9Ehz/IZF/7lcWrwxBKYm4B98lPkpZtR2QHndiQ3venzWrP0P5y27mReaFuaJ++\";\n        s[139] = \"1Q8rfp1HuGsxurTgGMakxj5SwNF7EixXxVPnfGADWDcygh5C1BMXqiL1AuVXOVFOsaydfLWGC8Kbh/JiL6H+12lYrNGUT9yJRIzRDi4XylMnrYwBtwCJjoHSi4exz5K2ih54utVAuzXZg6mnc9ied/mNRjj9d2HFD5mv0w/qTN/WFxEmtuZM/nMMag==\";\n        s[140] = \"w01TnPP/F3Vni3fBdV32Bnbb4J1FcbaE+Xn44no5ug77U8FS1gSm3LqJ8yTyXduzl5v2dwBEfziEfTuyqgeLLsCYTBjXmYOIHQosEl6DyAknu4XK52eQW+Fes9eSs2Nq+G4aaR4y4leeFNmCoZ9BQmAAZr0LFkqnvqaKmBVgcgxPs7/8SQHnpqvaU6Y=\";\n        s[141] = \"OfzIF38Tp5g1W5eVbrkrMe0Mm7e0wBYg5hVvLpn/5MW5OFcmRDuBp15ayRBnJ1sBI93+CNl0LwP8Q0z9IXFjTER5gHZ1KfG8NV+oacKNG7aYrbUftkSL/oPfRNPez6U0FuWgvVrXUB6cwKTWvwb9KoD7s6AGYRdH50ZgJdBniFD7dKoOQnJ/ECuTUXI+\";\n        s[142] = \"4hoX0sjqlkSJPUq627iJkNYRbtD+V2qErCuTikaeRDEZvVHWvzdvwj4W1xxJjz+yHAN6z2EjCWidcSsVgTejQ1bH8uTzJgh/zq3yGUSsJoJWrecqxsge8bEBjkm+qUO8G3kAnC6FMjJ2NYQeXf6OK6OgsqyJwlHPTyAms2/IoYTB4iEqgIFG/2fNEJEIag==\";\n        s[143] = \"M/dy14xNbZMRfHiKKFdmD/OrEB+8MexrRO8mMh0i5LrNA5WUtLXdwUfAysYmal94MSoNJfgmwGCoqNwlWZBW1kpQaPdqsrn2cvc6JcZW9FlOx07DERJGbZ6l6ofbzZWgF+yf+hvT6jnJvXBVCTT3lfO3qo4leNuEJwsuU6erXGC3Ch53uPtGIrdDUpcX6/U=\";\n        s[144] = \"GgLr2hd3nK64IZv0JksKAT/yJNQ38ayuWyBnWLjXbEmT048UDppsrrnP6hikRo5v2TlHGhD2dcwG9NLK3Ph8IoIo9Wf2vZWBB+SMI9FpgZxBWLEjwHbOWsHaEQMVsQfk38EWQP0Fr6VyMKlEQfpsRkuCpp1KxscaxK7g5BgXUlb0a2x0F+C9hEB0OVPsj4JN\";\n        s[145] = \"W9lKcLDqNGQAG/sKQNaRmeOUmLJ7GcMNqBaGZ659Rnjr6RTrfnmkp5Z9meALnwXoHjPjzSQDJnVYsY+xyMnuPgl6gMVAhAm+XprYVpsne4vt+7ojUqavVPBqLy5dtnhp1qfcnAiV5cZhHXX7NbxkUOzptjEGCQjnhSH4rPbZtgoIWE8Z6boF3l/thLnFX+AiiQ==\";\n        s[146] = \"iYLn5h9lIhD/x9moaPRnTX6mJEJKThg4WXxS7IrR2zblH26uOkINz0dJNTJVets0ZNYDnsnT7J2iI3Y6hTVWPGoYU49J3B2LhCREs0DZQ3C7080FtiOcfHbfBLNn0DyCK1LeAC7YB/bNdiyhLqH8fKl+0+KhiPDIUBJY2e7IbZR/9t0sxJbIXx6cRvI5AXex12o=\";\n        s[147] = \"SlRJEc7npTUvQq8SgBYKmVY/3wHYp2gsDxafN/JLUuEqEjmWMtW7fxASi+ePX4gmJJqLhD5t+AZxiCwYK3L3ceuJx4TiqVgJz8d6sc7fgWXluh1K+BcGPbZ7+Cq4Vsga7JEBVekviEZ5Ah4apNr8RkB7oMOUVPGxRcyyaVE4zBW+scA6c1yi/HQXddQ9rWyLUsVo\";\n        s[148] = \"AAlbGR6ekLOzx4hpqZTUqVUQ0FL2CFpgCMOp6CuuUzkSnWXpUjvOiSDkNPgoTPgpgmg3uYvMsX43mkPGUGC9awDThXyGQh6u3WfWtmhiPRqXnjFek+EPd0LYXps71non6C9m7nUlYNWzBJ1YzrzWjlB5LLPBN8bsZG6RbdZkYMxJ9J5ta/c30m8wDDNuTm0nEE0ZVQ==\";\n        s[149] = \"nWWbBhzObqwEFh/TiKREcsqLYbRjIcZflJpol16Mi4YDL6EZri22qRnTgrBtIY+HieTYWuLaCSk/B9WcYujoS6Jb5dyg3FQ6XF9bYaNQGx2w8DHgx0k2nqH/0U1sAU0kft32aD2orqCMIprbO1WJIt2auRnvcOTFoOax926nAkxvR3nrFVDevFjDbugpWHkGwic6G7o=\";\n        s[150] = \"WNk1Rn2qtG+gk0AEewrgo+aRbNrG4CgQpOR8Uo7c2m2XQY8MVDu4uRA6rzYGGdgqTcICKky9MvHeJeNWVAXOxmA4EdXQ2xItFJdQtxBt56cad9FBXXsz21yVsPr5d453abi7T3XfHVTToekiOlxAJs+bpat9cFRbIdHghO9wc/ucoArT53vpYsnyeVnmZG2PX48lXpNS\";\n        s[151] = \"wVmiO6mdf2aahrJlcmnBD0Qa58y8AvzXtJ54ImxgPLPn0NCQIrmUxzNZNTODE3WO6kZMECaT/REqT3PoOBp9stCHCFNXOM7979J44C1ZRU0yPCha00kQZBF5EmcLitVCz10tP8gG1fiIvMjwpd2ZTOaY4/g4NeJHLjJPll0c5nbH7n4v+1I+xG7/7k7G6N8sp21pbgpTYA==\";\n        s[152] = \"OoiVZosI+KG0EZTu+WpH7kKISxmO1zRYaSPMBMW0AyRiC2iZVEkOMiKn12XPqIDSW/kVA58cvv/ysTAzKLTu78Uo+sVcJe3AtLdgeA9vORFELTP4v9DQ/mAmehe3N8xk+VTLY6xHWi6f4j9cTDW/BDyJSDRY00oYoHlvnjgHo4CHBo0sMGgX3CwcnK2hpMFVtB/3qPl6v2w=\";\n        s[153] = \"97ZVsTYwD8VrgN1FOIRZ8jm8OMgrxG3o1aJoYtPVWXp9cjjlgXqTMZVsoWr3pr7pudw+LYo1Ejz3JpiUPHqWcZ2PWrWs7PR1akYGuwdCBHYvCGTcZYFe/yu1AB8w5zYsl1eJR45g0u1DlXfx5BUAUzc4yJDjc48Ls62bn8t0EJ7+30sWwifqKuz2EHpsqp1j/iMlwzKJGjGE\";\n        s[154] = \"0NSYKTvBKKInwL9PJ/pWUWVX4gjF3igsA2qqQMsRew0lI1LcCB18eGCYk0AnyUCe99w5lWHGFUMMeH6DZciAylWGeDn19JdzVOTevBWk3LIujI1GvsEB3oVqf2Zl9IZeDGCT4+bQKBWvgcXHjysZfnn/5z9Xz06qrPqac5LfS36fDcwnkrUYQWDsL2Ike32ALmOnkcDjNq1BoA==\";\n        s[155] = \"5ok+rYI4LCgGa2psGUN/fdkT2gQEToB9HRiFXQpe2YcQvEN2z7YlJCETx4jSWw06p5Y8tZcp08moKNYwUJ40DvPpGlDG+wUpFhC4kkfo6vj6TrCj5yoWJi5D+qdgH2T0JeWM80cYN0bsOsetdaqNhDONlYXZ2lVYkyVS/wzw8K5xX87EWktwOwFq/yYhuWCYJ9GZL7QuDipJjEE=\";\n        s[156] = \"KHzTalU9wPSnIjh5g0eHi1HUaFufxJpXpjDe0N3wEKINqbgzhbj3Kf4qWjb2d1A+0Mlu9tYF/kA9ONjda5jYfRgCHm5mUrjU0TAyT7EQFZ2u6WFK/sFHP++ycJQk8k7KLPUWA5OWScy1EO+dYF4d0r6K5O+7H/rpknxN6M9FlP8sH83DXK1Sd+UXL32D+4flF580FaZ5B3Tkx3dH\";\n        s[157] = \"RrJVxIKoDXtCviWMv/SXMO42Dn6UWOKDy2hh2ASXssT0e+G6m7F1230iJWlEN0wBR8p+BlTdBhQrn25098P3K16rBmZpzw/5dmesIJxhYPaM4GiaOgztFjuScTgkmV0Jl/vZ9eCXdEVNISeXkIixM4pssTFuUV7PY/Upzdj55rDKGLr1eT7AFVSNP30PhL8zZs8MANqKBeKBBDvtww==\";\n        s[158] = \"sy4t5rFA75GRBE+Dqa9sQxjPluKt/JnEY54guHnKqccmx3HGiyJ0jUA+et4XO8Xg69wCA9xVxJZQL73z80mVfIf43HIKOxgxT2IjG7EKMOD/qx6NnMTve4BryggLtbLQUeRfhriQeY7h65tD9ierhccXoXDpGnmBn9m2BQP78y+Qhc4eIsa3LcxbQJUIwvURjFp/rgMD7lhOLboa/2Y=\";\n        s[159] = \"Zs/BfFoWImYau2dZLb7JneeTQp7sQ06yonEq0Ya4BNOJGy/5dGH42ozt0PpP2IZ/S58X7esVgc6jA1y3Bcxj3MPoDjQJSZHFEtR3G31T8eF5OpPVC4dw9s9clllM05tvcemssLdcd85UP/xBaDrmpAl8ZDSc73zflK3nJw8e0HQFYntNnlZPFyyyBLHnLycb6Jlvq7F2OqrZR+FXZnL3\";\n        s[160] = \"hdeDJuRnmb8q9EYec8+futT/CvqhpqoUdtmG6E31RrYJDs96M5Wfng90IEqrncZe4rVYDocRZK23dvqtJaPhTUBXXh42IyMlUnro69KI+075FvYYwgVaUd10r7ExWM5Z7DCQ2x8Tm1meK2YCTPkF1VXXexl1UjYCnRQuQxppdophMwroJK8VqlJbFFslchTSBFuI7wgcdy+f/LHMbMsusQ==\";\n        s[161] = \"ClCCOv0mD9//LR0OisHfamxcTvmlwMLgAIQt3hbOjRPkXwEgaDzP0u6LN8BNwdOVw+LhrbzMI8zQzHvo7mGPkQICeeim/x+xmGPQtmWnXxCWiL1uf/8eR5Wuy9Er8skTB8rG4/ubb2ssvCkubObPAkMSOgFnX9UtxnCN4+nMNV2vvn4xMTSvvQyYWewfnlNkflTyva1epE9RVW2RqRtJikY=\";\n        s[162] = \"Fs+AmFCnUr/imw8D0GpNidIP9qwW8yRAzmtqPS+vT6n5U4YFQcpgbznrYO4TPqkVF2oz1mpgLYIgx/u2XsrtljGX46LfY8OyUPaw4/da38QGngoIlS2cN01cgN3efSjMlnZFo1x8T9p0Nn1IgRgevOd5ezVUL7WdY7eeiE1pXXcGBgDYn7NDQph0dC6HDlBiS95bDFcZ+6FYigE4WybpsOHL\";\n        s[163] = \"wgO4DdGZy9g13IuOhkJGJcToyLuCBVm9T/c8qY4NOheVU1NW2g8sPIo+RiEsSST8sx6+Jh/A/kaCxYvJ9CsgnBjZMMWRsd383HZAoJtkxwKvyoeXzzD+puFvqKQBEKrlBEwffXhLDoFQAW2ycYtBGztl0GsUtoOob2nv7ienx1xD6KNZNaxYx2ObRAYS/e8LS3pg5dku9MPBp1X12m8ZIXRAaw==\";\n        s[164] = \"EkXt02SaRUIjFmoLxyO6N+giL4iA4fY0Exao+mjgEfZ+Wv6w95GXHBI1xlYMVLkOcnu9nescvcXQH0OrqL9uforEUTGTSg2ci67m4GrwAryMy+5eUo77Q5GpWKfsg8nDbD8a3gUI/9EE0sCNp7tMaKwoJ56cxhbG3TJYpqWTpq3/S3q76x+3ETL+zxh6EMh8MJPfWcIxlDS7evKqdPgS00KgUtk=\";\n        s[165] = \"OuBqx5LFJroRbDn41+4azFHlKgw6bMgbsRGaK9UnPvi5xfmV4SLQ2YzIhopGi1F57L6vKukaW0XlFk/Ff5Td5IMC7U+kvXKlf8fGIIQ8FaHI0vbIX89OJlBqlICqftSNiVRxtaE+aCh0rBoDfgPwuC8qBC20I1O3ZLuKfeUVGkMOLEWeZLS6mmcn3cSERj9o/dEl8QYwQvhH+VG6YWF//yki1Vu8\";\n        s[166] = \"SO/vDsqZDdImOdH19sZI7FUVhlx1EI0XRr8ArTuAG5F8LDK76Bct2C7fXTUowilXnJWhQxvbGiulkUGSuVjVP12zac9bShRpr1L3ucde7n1f9y/NcHJCwdqTLq7RYygItQ4ppQGiP9jXf2Dn/qmVZZTh+SY3AZCIS+OVo2LAiYJHWnzzoX8Zt+dOYiOA/ZQKZieVJlc8ks+2xqYPD55eH0btZn5hzA==\";\n        s[167] = \"tZL/qACMO9SzmgJhWQMsbKgE5lPAEbxn3NR7504ilgArR8j7uv1KF46uQyjrkEnyBormYB/6nLGlHht62IQftMYf5gHpHFfTvukRKF8728yIYAAYHPQ/WjHzHdVSqUJqF2a8RE6SvvY+KSKWLMU3hjn1f6dqX599hYD7AnbPGTpFKDU5sLFOXbuynU1sPUhP+a4Hev9yNU6atLDo4CkX/Yq3FbpWVuQ=\";\n        s[168] = \"GRe7uF1wH5/71B3vmGF+pN3H9PKO1tLwsnb0D4/Pm7Pu5KAe4OfelkfFIBgyjuoZrpeEkGZnb+qf+Kn7Kt1hDwYr/Mb9ewuwOXsbIpLQMgfh0I5XsPrWocduVzn+u/cm3cr0Z11zsx0AZjTqvslACkDqiquY41JhtGdc22RCvIYom2l+zzMIMyCPsHeCSB1MBu8EWK3iP7SD3dWttwzMg0xanoPDgk0U\";\n        s[169] = \"8BDFu+29lptlGSjcZe7ghWaUgIzbuUpM5XDFbtJVQPEd3bAE0cGRlQE9EhKXi5J/IskYNrQ357tBhA+UNDNXCibT2AZGpzWAcwE6dP+14FuRL5Gxqh/teuPYKr5IIn7M3SbgOychZzLI7HGCvVhBUiJBu8orI3WmAIVcUhAsMGHsFveck/ZCXQA+Uq/WVnW1VNs6hSmIhsAFc51qsmsQK07z2Wptx4rRjw==\";\n        s[170] = \"siPSXD4u36WYtTvvDzRlFPiuZMnRczrL3eA15955JDCc6/V2Cvu6m/HPO6JxogxO0aYTZ5tejYDOIZgBy40DgUZMqPJ2IpYjsmUbjjJU8u/OpwhMon525m3v0EYlvyj2Qp3pwFKDkvncK3aNjN3KaaX6HuIy6kyqsDl0BTEnB5iJyHLRBCkeznTK019u48Yfsrz2oGuZcWzNj5/vKMdxQPiyJ9EHyox8Ark=\";\n        s[171] = \"+/14PnFQVZ7BTHKUvkTtRrYS7WnPND5gZ5byMhUrDLkJa6UPBV7z0nrDMifEo/dQfUq3EjCiG6xGVhrUvAzgxqOQZTW1Y9p9M0KWW+E0XvCQppHFpuMqF1vYsF0OD6AMiE9JtGnWs3JcaWP/XBF/CvhQlFGbHi3fbrD/haTEBnmpJWBgMdKribdbXHtBSFZ2MzCX2eDtxoDdRdEVGs4v/q8gVBS+WsnZ3TTF\";\n        s[172] = \"31I1ja+B+aopKkztGzJYvJEWAshyoAAV5yve4LnP0kdImUQaVETSuo5CDIYr7zM8MCD1eYPpLicmGnA+C927o9QGAVL3ctO/DCWhNinW7NmeYIM+o4diKBkDPjHmSWa+nq4nr+gOap4CtwL2wW2B5Yqt26pKgN9uAU5CmTL26hYFgMEOZfrkQ7XdYGy2CN8RJLmjeSFVVNBG/FTaK7tpuy0LQSkko6wczBYGeg==\";\n        s[173] = \"XbRfDqGe3eeI1tHx8UnPneDB57N8VeSSzXzVCNSgxOEfd6d/un5CDxHG+m4w3tIbtSky4R2+zMF+S5cRvTOwZ/veegYtLKTxA0mVedWLFkfh/v4NgPJ+NEU+cylbSSZLAeBofDvoJwnYKujN2KFa8PGAxr3Y8ry3qdkS8Ob1ZiHYAmLvKS9sGb/vjTvRy+a4Q7kOepsm7PYisinKelBAvDnjli6/lOutGrenjX4=\";\n        s[174] = \"jGEj/AaBefac9uOcmGuO9nH+N+zMsC4qAe6ZUEMMIXdTGnSWl7Xt0/nKqyOj3ZH249HwkJ8bn5C+0bzOpQ1eA3PxEq6RfKMrjHJPJmTZXrSESTjfj3oNLU/CqqDOqd8znTgN6nvnUdCeStLMh9bmWF1+0G11nDwg6GQWWQ0zjVDTq5j7ocXcFOyUcu0cyl5YDcUP0i2mA2JullInU2uBte7nToeSGB3FJxKueBbv\";\n        s[175] = \"RAzNCxlP2S/8LfbGtlSDShox8cSgmJMOc2xPFs8egZVJiwlmnS3aBWKPRbbxkZiVVYlu4GNJNwbocc6dgrl28HXAsYikE5wwoQ1MeOJWU3zzFiYENh7SLBQfjVPQHucctr8P6Rl7YL5wHc+aC+m92R3bnzm5rp1PeHm7uzy2iUUN0cgfbwJ4FrpXhVMTsAUpTbg1+037EWcGOuxir4dG2xBfgOwa+ejFHkw7y0LWRw==\";\n        s[176] = \"08hmZptBGKKqR6Qz9GNc2Wk1etgU/KogbiPQmAh5IXlTBc97DuEToL4Bb889nfObVQ/WelmiCS8wEjSBdmnlkkU7/b5UT3P4k1pB6ZxPH9Qldj5aazkA/yCb0kzDfJlcdFOh1eAcu5LvwTXOizmPwsDvJEnOkaDZrKESZshsHU2A6Mx6awk9/orf6iBlJHQIIH3l4o3b1gx2TNb/hUgdAlwtQDhvKO3skB0PS+rcWAw=\";\n        s[177] = \"0GhrgbSSHPLWtyS2mnSxrNAj/dyrFQcxIgPjT7+78SZ1ZTGc03vsmlZ4Z/bOO84E9yKblaI5dSHVXrx57L0kikL8tgKCsAkUNO3l/4zv5FfCrRTgGx4sFTFB1NNcLcwagkvFzde764DjYmj4YZhYsXSZCVKi0uu5M8fpgGDZ9UMSFR008cbhaIoFLWSANqiNJYSvTQZhGWfLtIPGLN+gIOMcaKhx1b5vg6OYSz6ScAM/\";\n        s[178] = \"2VGiMV/f2hNZAjw3fdeHx/wRIVzeP018lZynzwSySG/zQBxyRmi3YmKVZmh3aJunuiqmvdt0kJ6lX7M8BajYHPCBkqJOx8oPJ/K1oADxVgnavZ69dKYrSy9/Pm6sHxjFrdSz9TelUK9sgoFTWS6GxgzWEqXRBDDpGUnsNbSEcWLPKVLNNoYAcltY98JZaNSZBXcpa9FeSN7sVU43q2IEcDx3ZkJzRJpl/lb7n+ivMwX/OQ==\";\n        s[179] = \"iMSCh1m5vct3C7LEn5wKRYtalzvG6pKahG19rTb6Z9q7+buDsML5yM6NqDvoVxt3Dv7KRwdS3xG/Pyb7bJGvQ2a4FhRnTa4HvPvl3cpJdMgCCvsXeXXoML4pHzFlpP0bNsMoupmhQ0khAW51PAr4B165u1y5ULpruxE+dGx/HJUQyMfGhOSZ5jDKKxD5TNYQkDEY28Xqln6Fj8duzQLzMIgSoD8KGZKD8jm6/f8Vwvf43NE=\";\n        s[180] = \"hN4+x/sK9FRZn5llaw7/XDGwht3BcIxAFP4JoGqVQCw8c5IOlSqKEOViYss1mnvko6kVrc2iMEA8h8RssJ4dJBpFDZ/bkehCyhQmWpspZtAvRN59mj6nx0SBglYGccPyrn3e0uvvGJ5nYmjTA7gqB0Y+FFGAYwgAO345ipxTrMFsnJ8a913GzpobJdcHiw5hfqYK2iqo8STzVljaGMc5WSzP69vFDTHSS39YSfbE890TPBgm\";\n    }",
        "begin_line": 59,
        "end_line": 158,
        "comment": " These strings were generated from random byte[] arrays fed into commons-codec-1.3.jar ",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 29)",
            "(line 61,col 9)-(line 61,col 18)",
            "(line 62,col 9)-(line 62,col 22)",
            "(line 63,col 9)-(line 63,col 22)",
            "(line 64,col 9)-(line 64,col 22)",
            "(line 65,col 9)-(line 65,col 26)",
            "(line 66,col 9)-(line 66,col 26)",
            "(line 67,col 9)-(line 67,col 26)",
            "(line 68,col 9)-(line 68,col 30)",
            "(line 69,col 9)-(line 69,col 30)",
            "(line 70,col 9)-(line 70,col 30)",
            "(line 71,col 9)-(line 71,col 35)",
            "(line 72,col 9)-(line 72,col 35)",
            "(line 73,col 9)-(line 73,col 35)",
            "(line 74,col 9)-(line 74,col 39)",
            "(line 75,col 9)-(line 75,col 39)",
            "(line 76,col 9)-(line 76,col 39)",
            "(line 77,col 9)-(line 77,col 43)",
            "(line 78,col 9)-(line 78,col 103)",
            "(line 79,col 9)-(line 79,col 107)",
            "(line 80,col 9)-(line 80,col 107)",
            "(line 81,col 9)-(line 81,col 107)",
            "(line 82,col 9)-(line 82,col 111)",
            "(line 83,col 9)-(line 83,col 111)",
            "(line 84,col 9)-(line 84,col 111)",
            "(line 85,col 9)-(line 85,col 115)",
            "(line 86,col 9)-(line 86,col 115)",
            "(line 87,col 9)-(line 87,col 115)",
            "(line 88,col 9)-(line 88,col 119)",
            "(line 89,col 9)-(line 89,col 119)",
            "(line 90,col 9)-(line 90,col 119)",
            "(line 91,col 9)-(line 91,col 123)",
            "(line 92,col 9)-(line 92,col 123)",
            "(line 93,col 9)-(line 93,col 123)",
            "(line 94,col 9)-(line 94,col 127)",
            "(line 95,col 9)-(line 95,col 127)",
            "(line 96,col 9)-(line 96,col 127)",
            "(line 97,col 9)-(line 97,col 131)",
            "(line 98,col 9)-(line 98,col 184)",
            "(line 99,col 9)-(line 99,col 184)",
            "(line 100,col 9)-(line 100,col 184)",
            "(line 101,col 9)-(line 101,col 188)",
            "(line 102,col 9)-(line 102,col 188)",
            "(line 103,col 9)-(line 103,col 188)",
            "(line 104,col 9)-(line 104,col 192)",
            "(line 105,col 9)-(line 105,col 192)",
            "(line 106,col 9)-(line 106,col 192)",
            "(line 107,col 9)-(line 107,col 196)",
            "(line 108,col 9)-(line 108,col 196)",
            "(line 109,col 9)-(line 109,col 196)",
            "(line 110,col 9)-(line 110,col 200)",
            "(line 111,col 9)-(line 111,col 200)",
            "(line 112,col 9)-(line 112,col 200)",
            "(line 113,col 9)-(line 113,col 204)",
            "(line 114,col 9)-(line 114,col 204)",
            "(line 115,col 9)-(line 115,col 204)",
            "(line 116,col 9)-(line 116,col 208)",
            "(line 117,col 9)-(line 117,col 208)",
            "(line 118,col 9)-(line 118,col 208)",
            "(line 119,col 9)-(line 119,col 212)",
            "(line 120,col 9)-(line 120,col 212)",
            "(line 121,col 9)-(line 121,col 212)",
            "(line 122,col 9)-(line 122,col 216)",
            "(line 123,col 9)-(line 123,col 216)",
            "(line 124,col 9)-(line 124,col 216)",
            "(line 125,col 9)-(line 125,col 220)",
            "(line 126,col 9)-(line 126,col 220)",
            "(line 127,col 9)-(line 127,col 220)",
            "(line 128,col 9)-(line 128,col 224)",
            "(line 129,col 9)-(line 129,col 224)",
            "(line 130,col 9)-(line 130,col 224)",
            "(line 131,col 9)-(line 131,col 228)",
            "(line 132,col 9)-(line 132,col 228)",
            "(line 133,col 9)-(line 133,col 228)",
            "(line 134,col 9)-(line 134,col 232)",
            "(line 135,col 9)-(line 135,col 232)",
            "(line 136,col 9)-(line 136,col 232)",
            "(line 137,col 9)-(line 137,col 236)",
            "(line 138,col 9)-(line 138,col 236)",
            "(line 139,col 9)-(line 139,col 236)",
            "(line 140,col 9)-(line 140,col 240)",
            "(line 141,col 9)-(line 141,col 240)",
            "(line 142,col 9)-(line 142,col 240)",
            "(line 143,col 9)-(line 143,col 244)",
            "(line 144,col 9)-(line 144,col 244)",
            "(line 145,col 9)-(line 145,col 244)",
            "(line 146,col 9)-(line 146,col 248)",
            "(line 147,col 9)-(line 147,col 248)",
            "(line 148,col 9)-(line 148,col 248)",
            "(line 149,col 9)-(line 149,col 252)",
            "(line 150,col 9)-(line 150,col 252)",
            "(line 151,col 9)-(line 151,col 252)",
            "(line 152,col 9)-(line 152,col 256)",
            "(line 153,col 9)-(line 153,col 256)",
            "(line 154,col 9)-(line 154,col 256)",
            "(line 155,col 9)-(line 155,col 260)",
            "(line 156,col 9)-(line 156,col 260)",
            "(line 157,col 9)-(line 157,col 260)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.initCHUNKED_STRINGS()",
        "snippet": "    private static void initCHUNKED_STRINGS() {\n        String[] c = CHUNKED_STRINGS;\n        c[0] = \"\";\n        c[1] = \"uA==\\r\\n\";\n        c[2] = \"z9w=\\r\\n\";\n        c[3] = \"TQ+Z\\r\\n\";\n        c[4] = \"bhjUYA==\\r\\n\";\n        c[5] = \"1cO9td8=\\r\\n\";\n        c[6] = \"sMxHoJf5\\r\\n\";\n        c[7] = \"jQcPlDsZzw==\\r\\n\";\n        c[8] = \"TAaPnfW/CYU=\\r\\n\";\n        c[9] = \"cXTZuwzXPONS\\r\\n\";\n        c[10] = \"Ltn/ZTV4IjT6OA==\\r\\n\";\n        c[11] = \"6fh+jdU31SOmWrc=\\r\\n\";\n        c[12] = \"E/5MoD4qCvDuTcFA\\r\\n\";\n        c[13] = \"2n9YyfCMyMXembtssQ==\\r\\n\";\n        c[14] = \"qBka3Bq6V31HmcmHjkY=\\r\\n\";\n        c[15] = \"WvyZe6kQ8py7m25ucawJ\\r\\n\";\n        c[16] = \"oYpxMy6BSpZXhVpOR6dXmA==\\r\\n\";\n        c[63] = \"yexFaNKaP+VkVwEUvxQXbC0HSCi/srOY7c036lT25frs4xjIvp214JHCg7OL/XZW3IMe6CDgSMCa\\r\\naI91eRgM\\r\\n\";\n        c[64] = \"vkqgnuJ3plxNtoveiMJuYLN6wZQLpb3Fg48/zHkdFuDucuMKWVRO/niFRgKsFqcxq6VgCxwQbePi\\r\\nP9sRnxz7wg==\\r\\n\";\n        c[65] = \"YHks3GCb2uVF47Y2tCieiDGJ879Rm5dBhQhQizYhfWOo+BrB2/K+E7wZWTid14lMpM60+5C0N9JN\\r\\nKAcBESeqZZI=\\r\\n\";\n        c[66] = \"z8551jmQp/Qs95tw226+HCHWruKx/JvfBCfQ5p0fF77mkSpp66E552ik2gycrBBsMC/NbznAgTZo\\r\\nMzZxehfJwu49\\r\\n\";\n        c[67] = \"VsR2whqq/qQm342+TNz1lgOZMoWbpCz+kj2zflq0nx7S/ReEVPUJcqgMtVzrr2FVQPfBAH5VRjR+\\r\\nhkxwv4bssQms8Q==\\r\\n\";\n        c[68] = \"5xmIp8dUJZzkisIkuEPsnPXvzDeMo48qWFfHIn2av3jr5qoZHCs0LfNEyepC3v2sa0nCU0FlqsmD\\r\\nyTI5/2jt5zsLtV0=\\r\\n\";\n        c[69] = \"tGEgXjglUB9NbCtiS88AetLtRqhCAnhzOUKVgvbJZHqOA6x8uOorA1t3NcaIA00ZqbPYALu4LzIm\\r\\n4i4lAL9QgiH/Jg7b\\r\\n\";\n        c[70] = \"gFtxEhYJahDmU5dpudYs6ZTsqAx+s2j+06A0zeyb3U7nhZFsbkCDlds0EYUoqerZqZPm7F6CDOOD\\r\\n3dU7nYmelE0DxyMO9A==\\r\\n\";\n        c[71] = \"j/h/1JygYA5bjttxzQxr5gBtgh+AYVozhF4WgvcU/g49v0hUy6FdhfZewGK+Phtzj7RabI5p2zXy\\r\\nzvkmLQdFhdI5Um4O5sw=\\r\\n\";\n        c[72] = \"m+kYVGojIR5pgbz7pGJm2g+3qqk7fhl3cowa2eVrhki7WofyywnRezqTxOkBgVFz6nKs8qxpbbbz\\r\\nALctcPeMsp9dpXUfuUJr\\r\\n\";\n        c[73] = \"pPaGnMr0UYmldnJVk/F+3WCJJ1r2otvD5KJdt2u1RnS6LwhHhwLCqfW8O/QEg43WdxKomGL/JM33\\r\\ntn/B9pMPoIU0QTGjq2GRow==\\r\\n\";\n        c[74] = \"mOxzGyym6T/BxCV5nSiIYMlfAUmCN7gt7+ZTMg1kd8Ptirk+JF5dk8USbWBu/9ZvNg5ZuiJCeGwf\\r\\naVpqpZ3K9ySF7C87Jvu1RUE=\\r\\n\";\n        c[75] = \"VYLOIE4DnhxJn3FKS/2RHHHYLlZiGVdV/k4uBbtAYHUSTpRzaaYPGNAVjdNwbTHIihmeuk/5YQUy\\r\\n8NFsxIom+Li7bnWiBoHKBPP7\\r\\n\";\n        c[76] = \"7foMpJ0TknCatjUiSxtnuKSiz4Qvl/idWY9UKiTljoQHZ+C8bcUscnI/bZr13e6AvyUh47MlpdGv\\r\\nzIm05qUdMWWLoZJOaGYvDmvrWQ==\\r\\n\";\n        c[77] = \"jxQSGiFs+b1TfE4lDUAPUPJ0SWeUgl03rK6auieWJcarDIHM97gGOHMmyHudRMqkZmIkxYRgYgCC\\r\\nUg/JeU91OZD3tL4U+wNhShywe88=\\r\\n\";\n        c[78] = \"UGmH/gl7t3Dk801vRhRDEbgsfShtHZ1gZQn4KNZ5Qsw3WiGjW0ImInVHa+LSHBzLUjwC0Z3nXO4i\\r\\n4+CiKYqAspOViE6WqVUY8ZSV0Og4\\r\\n\";\n        c[79] = \"wdEoYmJuRng2z2IkAiSgJ1CW2VE7H7oXpYWEFFO8nG0bZn7PHhT8KyhaO2ridl8eUEysja0VXFDy\\r\\nQqSgZnvdUKrCGepWGZbw0/0bDws3Ag==\\r\\n\";\n        c[80] = \"5kZqgrUbt+rN5BWAddeUtm9TGT43vYpB6PeyQwTyy9Vbr0+U/4Qzy0Iw37Ra293HmkmpgQzuScVp\\r\\ncIiFGXPAFWwToR+bovwu7aXji/FnMwk=\\r\\n\";\n        c[81] = \"E467MMmJbmwv8Omc2TdcyMr/30B8izWbf+CAuJtw67b1g9trhC6n4GYnXjeW9DYvmWoIJPx0zvU/\\r\\nQ+gqv0cteg2bx9P2mrgMDARb6egowqjx\\r\\n\";\n        c[82] = \"Vpt8hYb4jx1F+7REX7K65v6eO5F1GDg/K8SVLWDSp0srupYEQkBVRxnB9dmhSo9XHpz4C8pRl8r8\\r\\n2fxXZummEf4U2Oh0Dip5rnNtDL+IJvL8lQ==\\r\\n\";\n        c[121] = \"hf69xr9mtFf4N3j2uA9MgLL5Zy94Hjv+VQi94+LS8972JJgDHCQOwP5whdQkV+SJpXkiyHGaSsQ4\\r\\nfhepPwzuZcEpYER+beny1j+M0HSZe36MdRIhlTqno+4qsXckL0CjXsYkJJM0NAfOYjHAus5G1bgi\\r\\n9VhmiMfAMA==\\r\\n\";\n        c[122] = \"yKzTh5hPp9/PBeZtrZXsFHAR9ywOM3hRaBDkgG9E09wFW8MZD0xMGegcp0QrTJcP8QYOaYhTDVim\\r\\nPqsNTVOmjdjkvS+2WhjJW4mVOXQ8KID91yaBtPo+DStL5GMgctcP5MoVf1Vp8w/mYtofqbllfDm5\\r\\nNfYzh2A7ijY=\\r\\n\";\n        c[123] = \"csFmwvDzoO4IO6ySDA4B2V7emEetAwCgO66zzlfWb3KDrPfFZc3Jgr4+dlaUkEIDHYeLHETdTssW\\r\\nOl2KrPHBEsULpDTR+3OhurXb1Qr2NvHiHFuqT3Geb6EYw2albfTmXxch82ablt4WKl4qPcSey54v\\r\\n6tsCuUuZzrkt\\r\\n\";\n        c[124] = \"5InxvKwpoCV7EK78OzU/tL9/NmK14Prw9tOCAyK+xpUNLZriuVEVdgpoZ05rliufaUDGHH8dPAem\\r\\n8G9DN/VOPktB6vXKtc2kMUgnMTiZwv/UVd+xyqnT8PLEdNQ8rCWxyiCcLdXFf0+xcE7qCcwzC+D7\\r\\n+cRW+i6dnpZkyw==\\r\\n\";\n        c[125] = \"cEx7oTsSHWUFPj92cstdy5wGbRcxH+VRWN8kaNTTCPWqSckyU9Xk/jj5/gj9DFwjfsCSp60xutf4\\r\\n/rFanjtwqtRg6dJLP4JAgpOKswDlHi6Vt7zF/w7HidMf2sdtlsqzayZmT2Hn7iOo3CExzr5Z5Jfm\\r\\nMFAX8R9peUN4t5U=\\r\\n\";\n        c[126] = \"AeXetVbj+7mmGiCs3BGUSZDLlq2odMsN8JAHQM64Cly8y5jw75PpISocWRFFQmmXYP7ckKmtuhIv\\r\\nD69HtZxGhNRsl1l1gXzKFhsWykcRtG87F8sS1Uv/i6QvGiRIDVEGGIzWrzRIISkBb9wCxJ2HESfl\\r\\neWwrz/GqryjoN26B\\r\\n\";\n        c[127] = \"aj1/8/+U8VO3D2iAwvQXZ4H0KwtuzDm4JCC8+22ccqk+UzKvqjGs87XngwfsMfSkeGVAi6VB6tfN\\r\\nJTjYctaj7R8dwh2PIfLSrvaphw4wNB2REjplnPojoOb9bNUNtUvdK3b1bArOWugIRJWLnMl72yEH\\r\\nFb1iBfBmn7uIa7KT2Q==\\r\\n\";\n        c[128] = \"kiMuF/1CMRlgoS/uLKn1mNZFZNHJNkRQnivOrzj8HQAagwzvTXvsGgI9hXX3qaeZL9/x/Oq+Y5F6\\r\\nDh+wXo+0kp6JagFjvbTJcQSowFzIwg7/V9sans0NE0Ejow5BfZKvihFI46sHiALl1qzoXqLQq+5f\\r\\nZGIFRyyY8wFW1uiNu9k=\\r\\n\";\n        c[129] = \"YXmCWhiNz4/IhyxQIYjgNvjX+XwDiPTSBMaFELm5X8Y4knGRnkF4/zix8l9wHBb+7Cgfrr46rF7e\\r\\niIzaAFLjLjjewy63duBJiVbEWjqFO0fu6T9iIjuEaF2sTppvuZNPHx80vN+HLAnAVmgFESw5APXW\\r\\nn15dizvuUfVHd5isCqbA\\r\\n\";\n        c[130] = \"GJfUoBivW5uqDpUxTRfjGWNYfN3/dTFtdRqCIH5L2c1nWX0dgY3ba1+fW/YX1Oh5aw4lC6BIiiTh\\r\\njJoV1VrNnlXzbcUcMy+GsDUUB8Qe8lBvfe/t4RmNPB0hVgrS89ntbuU0SsCmWw+9DqM3nidPebAN\\r\\nKERig1zZTBBKgpVf7HPFCA==\\r\\n\";\n        c[131] = \"eTerNs7dOqJAxAxcMQRnUDc2cBj2x0jU1g1D3G+b22kDz7JBzOy/mxhGXAQ3130lavWMhImSBkRe\\r\\nU+z0A13EYVMUv9PFzD747KCvns+SCo52YNHB0896b4l47q8hu8jsD17TZ2uWWJhS4cNnSE1jeM6N\\r\\noXGKvf90yxfzwucNYc4RdaQ=\\r\\n\";\n        c[132] = \"lbrGsjbzE521q8tzVHV7vcTPchUnzI/UfeR2R+cmOa29YljPWLht9Wx2JrjiKv4Of5nXe7kvhi+L\\r\\nYUuFVqgaqIFhC/PLbqOFiT2VZcXorToaRT9CLiqV5b6nHN/Txz6SI7MiD3hnk7psDbglPOo+ytqc\\r\\n9sFHj7UkR1ZctQjwFYwJjlxf\\r\\n\";\n        c[133] = \"mQwAPzYzfxz9FXEiZ6M8u1oN3EJbFYmNVfpm+j0DqgU+OPI4URHBIrF4xvdMvAPn0WuarbQy/ZVN\\r\\n0eKL7S4K3Mvan0flAwaZdI+e5HpkfxOoGTp8Dk5EFTXjmZ/s+GonePEQEGNVPL1WYoD6xXqAAvML\\r\\nKtyrFcpoiGS9eDBlsZDQzPzz/g==\\r\\n\";\n        c[134] = \"3G6d12UY4l5W7Nnw0BL0HnViVg9SdEuLMqeZwy0RlJR/Ytcgd/mIxIuXXAlGhvhoX6Xc2BGU7RpT\\r\\ni1jYKzA86yul0j96dbcE4OtrP9lUBJlcY9eWz59dvLqKxwt3cEOBwrPf69MHuIa256es3AOCobfC\\r\\n8RQScW0PQ0QUa1VHB/eXSsVTSWg=\\r\\n\";\n        c[135] = \"AxgrZKTFk5JvLC3DBACHwp266FxKI/yn9F+1tYkzL57RVs5HCJYS47VuG0T0E2wqzHqcLKPQMZWU\\r\\n7vbRoyMGNL3ZtaHoZqTqcq9KWtODC+OnEvSS7+1P4SmQDuyL2MJ/eJABJKNcu1K/Lk0buAaO0FvX\\r\\n6OGBcPzu1+dv/ZkwuORK07qRnxqQ\\r\\n\";\n        c[136] = \"atkG8l2U/Nnm+zLu7zjenrfcAVQJMUqHimFZ3cQfaUp4qyrFn1UiwZ33j66Vt63eVaT/FXx+LlEn\\r\\nsHn6ATPBMp3iEYoBJYyNpjz/zROhBbcznQAMdWUTcyKInvnG3x6ExgBXpyqfxxp/Pm8by7LlSUT5\\r\\nMKHdcu+TEfUXRokCr2iPnt7NYsNDfA==\\r\\n\";\n        c[137] = \"dciU1mSHGcBxOAVBgJx75J6DaQdBZfTIzQ04WhkkdRMupOZWSnv19xhz8hiO+ZnbBtDJuO5rHsUG\\r\\nzH/jYacfZyCQ924roRvkh3T1yxsLq3abZJUCD9HYnPTELVhv1+cEF4aoO3vGOu2FpfLUn5QTd0Po\\r\\nzsIqcqZVB2V57B7DjfizUe3D8Yf5Vco=\\r\\n\";\n        c[138] = \"dgR1PPacBvtILBmg33s9KWtuc67ndh3rCHZ/lIN7sENgbFqJQy5DC3XIeHTV7oWd+tJQaXxoC71/\\r\\nSU7Rz6OClAMKXLbMz8U6RPiqn3M7MRCQcDfNjA5cCNknXT9Ehz/IZF/7lcWrwxBKYm4B98lPkpZt\\r\\nR2QHndiQ3venzWrP0P5y27mReaFuaJ++\\r\\n\";\n        c[139] = \"1Q8rfp1HuGsxurTgGMakxj5SwNF7EixXxVPnfGADWDcygh5C1BMXqiL1AuVXOVFOsaydfLWGC8Kb\\r\\nh/JiL6H+12lYrNGUT9yJRIzRDi4XylMnrYwBtwCJjoHSi4exz5K2ih54utVAuzXZg6mnc9ied/mN\\r\\nRjj9d2HFD5mv0w/qTN/WFxEmtuZM/nMMag==\\r\\n\";\n        c[140] = \"w01TnPP/F3Vni3fBdV32Bnbb4J1FcbaE+Xn44no5ug77U8FS1gSm3LqJ8yTyXduzl5v2dwBEfziE\\r\\nfTuyqgeLLsCYTBjXmYOIHQosEl6DyAknu4XK52eQW+Fes9eSs2Nq+G4aaR4y4leeFNmCoZ9BQmAA\\r\\nZr0LFkqnvqaKmBVgcgxPs7/8SQHnpqvaU6Y=\\r\\n\";\n        c[141] = \"OfzIF38Tp5g1W5eVbrkrMe0Mm7e0wBYg5hVvLpn/5MW5OFcmRDuBp15ayRBnJ1sBI93+CNl0LwP8\\r\\nQ0z9IXFjTER5gHZ1KfG8NV+oacKNG7aYrbUftkSL/oPfRNPez6U0FuWgvVrXUB6cwKTWvwb9KoD7\\r\\ns6AGYRdH50ZgJdBniFD7dKoOQnJ/ECuTUXI+\\r\\n\";\n        c[142] = \"4hoX0sjqlkSJPUq627iJkNYRbtD+V2qErCuTikaeRDEZvVHWvzdvwj4W1xxJjz+yHAN6z2EjCWid\\r\\ncSsVgTejQ1bH8uTzJgh/zq3yGUSsJoJWrecqxsge8bEBjkm+qUO8G3kAnC6FMjJ2NYQeXf6OK6Og\\r\\nsqyJwlHPTyAms2/IoYTB4iEqgIFG/2fNEJEIag==\\r\\n\";\n        c[143] = \"M/dy14xNbZMRfHiKKFdmD/OrEB+8MexrRO8mMh0i5LrNA5WUtLXdwUfAysYmal94MSoNJfgmwGCo\\r\\nqNwlWZBW1kpQaPdqsrn2cvc6JcZW9FlOx07DERJGbZ6l6ofbzZWgF+yf+hvT6jnJvXBVCTT3lfO3\\r\\nqo4leNuEJwsuU6erXGC3Ch53uPtGIrdDUpcX6/U=\\r\\n\";\n        c[144] = \"GgLr2hd3nK64IZv0JksKAT/yJNQ38ayuWyBnWLjXbEmT048UDppsrrnP6hikRo5v2TlHGhD2dcwG\\r\\n9NLK3Ph8IoIo9Wf2vZWBB+SMI9FpgZxBWLEjwHbOWsHaEQMVsQfk38EWQP0Fr6VyMKlEQfpsRkuC\\r\\npp1KxscaxK7g5BgXUlb0a2x0F+C9hEB0OVPsj4JN\\r\\n\";\n        c[145] = \"W9lKcLDqNGQAG/sKQNaRmeOUmLJ7GcMNqBaGZ659Rnjr6RTrfnmkp5Z9meALnwXoHjPjzSQDJnVY\\r\\nsY+xyMnuPgl6gMVAhAm+XprYVpsne4vt+7ojUqavVPBqLy5dtnhp1qfcnAiV5cZhHXX7NbxkUOzp\\r\\ntjEGCQjnhSH4rPbZtgoIWE8Z6boF3l/thLnFX+AiiQ==\\r\\n\";\n        c[146] = \"iYLn5h9lIhD/x9moaPRnTX6mJEJKThg4WXxS7IrR2zblH26uOkINz0dJNTJVets0ZNYDnsnT7J2i\\r\\nI3Y6hTVWPGoYU49J3B2LhCREs0DZQ3C7080FtiOcfHbfBLNn0DyCK1LeAC7YB/bNdiyhLqH8fKl+\\r\\n0+KhiPDIUBJY2e7IbZR/9t0sxJbIXx6cRvI5AXex12o=\\r\\n\";\n        c[147] = \"SlRJEc7npTUvQq8SgBYKmVY/3wHYp2gsDxafN/JLUuEqEjmWMtW7fxASi+ePX4gmJJqLhD5t+AZx\\r\\niCwYK3L3ceuJx4TiqVgJz8d6sc7fgWXluh1K+BcGPbZ7+Cq4Vsga7JEBVekviEZ5Ah4apNr8RkB7\\r\\noMOUVPGxRcyyaVE4zBW+scA6c1yi/HQXddQ9rWyLUsVo\\r\\n\";\n        c[148] = \"AAlbGR6ekLOzx4hpqZTUqVUQ0FL2CFpgCMOp6CuuUzkSnWXpUjvOiSDkNPgoTPgpgmg3uYvMsX43\\r\\nmkPGUGC9awDThXyGQh6u3WfWtmhiPRqXnjFek+EPd0LYXps71non6C9m7nUlYNWzBJ1YzrzWjlB5\\r\\nLLPBN8bsZG6RbdZkYMxJ9J5ta/c30m8wDDNuTm0nEE0ZVQ==\\r\\n\";\n        c[149] = \"nWWbBhzObqwEFh/TiKREcsqLYbRjIcZflJpol16Mi4YDL6EZri22qRnTgrBtIY+HieTYWuLaCSk/\\r\\nB9WcYujoS6Jb5dyg3FQ6XF9bYaNQGx2w8DHgx0k2nqH/0U1sAU0kft32aD2orqCMIprbO1WJIt2a\\r\\nuRnvcOTFoOax926nAkxvR3nrFVDevFjDbugpWHkGwic6G7o=\\r\\n\";\n        c[150] = \"WNk1Rn2qtG+gk0AEewrgo+aRbNrG4CgQpOR8Uo7c2m2XQY8MVDu4uRA6rzYGGdgqTcICKky9MvHe\\r\\nJeNWVAXOxmA4EdXQ2xItFJdQtxBt56cad9FBXXsz21yVsPr5d453abi7T3XfHVTToekiOlxAJs+b\\r\\npat9cFRbIdHghO9wc/ucoArT53vpYsnyeVnmZG2PX48lXpNS\\r\\n\";\n        c[151] = \"wVmiO6mdf2aahrJlcmnBD0Qa58y8AvzXtJ54ImxgPLPn0NCQIrmUxzNZNTODE3WO6kZMECaT/REq\\r\\nT3PoOBp9stCHCFNXOM7979J44C1ZRU0yPCha00kQZBF5EmcLitVCz10tP8gG1fiIvMjwpd2ZTOaY\\r\\n4/g4NeJHLjJPll0c5nbH7n4v+1I+xG7/7k7G6N8sp21pbgpTYA==\\r\\n\";\n        c[152] = \"OoiVZosI+KG0EZTu+WpH7kKISxmO1zRYaSPMBMW0AyRiC2iZVEkOMiKn12XPqIDSW/kVA58cvv/y\\r\\nsTAzKLTu78Uo+sVcJe3AtLdgeA9vORFELTP4v9DQ/mAmehe3N8xk+VTLY6xHWi6f4j9cTDW/BDyJ\\r\\nSDRY00oYoHlvnjgHo4CHBo0sMGgX3CwcnK2hpMFVtB/3qPl6v2w=\\r\\n\";\n        c[153] = \"97ZVsTYwD8VrgN1FOIRZ8jm8OMgrxG3o1aJoYtPVWXp9cjjlgXqTMZVsoWr3pr7pudw+LYo1Ejz3\\r\\nJpiUPHqWcZ2PWrWs7PR1akYGuwdCBHYvCGTcZYFe/yu1AB8w5zYsl1eJR45g0u1DlXfx5BUAUzc4\\r\\nyJDjc48Ls62bn8t0EJ7+30sWwifqKuz2EHpsqp1j/iMlwzKJGjGE\\r\\n\";\n        c[154] = \"0NSYKTvBKKInwL9PJ/pWUWVX4gjF3igsA2qqQMsRew0lI1LcCB18eGCYk0AnyUCe99w5lWHGFUMM\\r\\neH6DZciAylWGeDn19JdzVOTevBWk3LIujI1GvsEB3oVqf2Zl9IZeDGCT4+bQKBWvgcXHjysZfnn/\\r\\n5z9Xz06qrPqac5LfS36fDcwnkrUYQWDsL2Ike32ALmOnkcDjNq1BoA==\\r\\n\";\n        c[155] = \"5ok+rYI4LCgGa2psGUN/fdkT2gQEToB9HRiFXQpe2YcQvEN2z7YlJCETx4jSWw06p5Y8tZcp08mo\\r\\nKNYwUJ40DvPpGlDG+wUpFhC4kkfo6vj6TrCj5yoWJi5D+qdgH2T0JeWM80cYN0bsOsetdaqNhDON\\r\\nlYXZ2lVYkyVS/wzw8K5xX87EWktwOwFq/yYhuWCYJ9GZL7QuDipJjEE=\\r\\n\";\n        c[156] = \"KHzTalU9wPSnIjh5g0eHi1HUaFufxJpXpjDe0N3wEKINqbgzhbj3Kf4qWjb2d1A+0Mlu9tYF/kA9\\r\\nONjda5jYfRgCHm5mUrjU0TAyT7EQFZ2u6WFK/sFHP++ycJQk8k7KLPUWA5OWScy1EO+dYF4d0r6K\\r\\n5O+7H/rpknxN6M9FlP8sH83DXK1Sd+UXL32D+4flF580FaZ5B3Tkx3dH\\r\\n\";\n        c[157] = \"RrJVxIKoDXtCviWMv/SXMO42Dn6UWOKDy2hh2ASXssT0e+G6m7F1230iJWlEN0wBR8p+BlTdBhQr\\r\\nn25098P3K16rBmZpzw/5dmesIJxhYPaM4GiaOgztFjuScTgkmV0Jl/vZ9eCXdEVNISeXkIixM4ps\\r\\nsTFuUV7PY/Upzdj55rDKGLr1eT7AFVSNP30PhL8zZs8MANqKBeKBBDvtww==\\r\\n\";\n        c[158] = \"sy4t5rFA75GRBE+Dqa9sQxjPluKt/JnEY54guHnKqccmx3HGiyJ0jUA+et4XO8Xg69wCA9xVxJZQ\\r\\nL73z80mVfIf43HIKOxgxT2IjG7EKMOD/qx6NnMTve4BryggLtbLQUeRfhriQeY7h65tD9ierhccX\\r\\noXDpGnmBn9m2BQP78y+Qhc4eIsa3LcxbQJUIwvURjFp/rgMD7lhOLboa/2Y=\\r\\n\";\n        c[159] = \"Zs/BfFoWImYau2dZLb7JneeTQp7sQ06yonEq0Ya4BNOJGy/5dGH42ozt0PpP2IZ/S58X7esVgc6j\\r\\nA1y3Bcxj3MPoDjQJSZHFEtR3G31T8eF5OpPVC4dw9s9clllM05tvcemssLdcd85UP/xBaDrmpAl8\\r\\nZDSc73zflK3nJw8e0HQFYntNnlZPFyyyBLHnLycb6Jlvq7F2OqrZR+FXZnL3\\r\\n\";\n        c[160] = \"hdeDJuRnmb8q9EYec8+futT/CvqhpqoUdtmG6E31RrYJDs96M5Wfng90IEqrncZe4rVYDocRZK23\\r\\ndvqtJaPhTUBXXh42IyMlUnro69KI+075FvYYwgVaUd10r7ExWM5Z7DCQ2x8Tm1meK2YCTPkF1VXX\\r\\nexl1UjYCnRQuQxppdophMwroJK8VqlJbFFslchTSBFuI7wgcdy+f/LHMbMsusQ==\\r\\n\";\n        c[161] = \"ClCCOv0mD9//LR0OisHfamxcTvmlwMLgAIQt3hbOjRPkXwEgaDzP0u6LN8BNwdOVw+LhrbzMI8zQ\\r\\nzHvo7mGPkQICeeim/x+xmGPQtmWnXxCWiL1uf/8eR5Wuy9Er8skTB8rG4/ubb2ssvCkubObPAkMS\\r\\nOgFnX9UtxnCN4+nMNV2vvn4xMTSvvQyYWewfnlNkflTyva1epE9RVW2RqRtJikY=\\r\\n\";\n        c[162] = \"Fs+AmFCnUr/imw8D0GpNidIP9qwW8yRAzmtqPS+vT6n5U4YFQcpgbznrYO4TPqkVF2oz1mpgLYIg\\r\\nx/u2XsrtljGX46LfY8OyUPaw4/da38QGngoIlS2cN01cgN3efSjMlnZFo1x8T9p0Nn1IgRgevOd5\\r\\nezVUL7WdY7eeiE1pXXcGBgDYn7NDQph0dC6HDlBiS95bDFcZ+6FYigE4WybpsOHL\\r\\n\";\n        c[163] = \"wgO4DdGZy9g13IuOhkJGJcToyLuCBVm9T/c8qY4NOheVU1NW2g8sPIo+RiEsSST8sx6+Jh/A/kaC\\r\\nxYvJ9CsgnBjZMMWRsd383HZAoJtkxwKvyoeXzzD+puFvqKQBEKrlBEwffXhLDoFQAW2ycYtBGztl\\r\\n0GsUtoOob2nv7ienx1xD6KNZNaxYx2ObRAYS/e8LS3pg5dku9MPBp1X12m8ZIXRAaw==\\r\\n\";\n        c[164] = \"EkXt02SaRUIjFmoLxyO6N+giL4iA4fY0Exao+mjgEfZ+Wv6w95GXHBI1xlYMVLkOcnu9nescvcXQ\\r\\nH0OrqL9uforEUTGTSg2ci67m4GrwAryMy+5eUo77Q5GpWKfsg8nDbD8a3gUI/9EE0sCNp7tMaKwo\\r\\nJ56cxhbG3TJYpqWTpq3/S3q76x+3ETL+zxh6EMh8MJPfWcIxlDS7evKqdPgS00KgUtk=\\r\\n\";\n        c[165] = \"OuBqx5LFJroRbDn41+4azFHlKgw6bMgbsRGaK9UnPvi5xfmV4SLQ2YzIhopGi1F57L6vKukaW0Xl\\r\\nFk/Ff5Td5IMC7U+kvXKlf8fGIIQ8FaHI0vbIX89OJlBqlICqftSNiVRxtaE+aCh0rBoDfgPwuC8q\\r\\nBC20I1O3ZLuKfeUVGkMOLEWeZLS6mmcn3cSERj9o/dEl8QYwQvhH+VG6YWF//yki1Vu8\\r\\n\";\n        c[166] = \"SO/vDsqZDdImOdH19sZI7FUVhlx1EI0XRr8ArTuAG5F8LDK76Bct2C7fXTUowilXnJWhQxvbGiul\\r\\nkUGSuVjVP12zac9bShRpr1L3ucde7n1f9y/NcHJCwdqTLq7RYygItQ4ppQGiP9jXf2Dn/qmVZZTh\\r\\n+SY3AZCIS+OVo2LAiYJHWnzzoX8Zt+dOYiOA/ZQKZieVJlc8ks+2xqYPD55eH0btZn5hzA==\\r\\n\";\n        c[167] = \"tZL/qACMO9SzmgJhWQMsbKgE5lPAEbxn3NR7504ilgArR8j7uv1KF46uQyjrkEnyBormYB/6nLGl\\r\\nHht62IQftMYf5gHpHFfTvukRKF8728yIYAAYHPQ/WjHzHdVSqUJqF2a8RE6SvvY+KSKWLMU3hjn1\\r\\nf6dqX599hYD7AnbPGTpFKDU5sLFOXbuynU1sPUhP+a4Hev9yNU6atLDo4CkX/Yq3FbpWVuQ=\\r\\n\";\n        c[168] = \"GRe7uF1wH5/71B3vmGF+pN3H9PKO1tLwsnb0D4/Pm7Pu5KAe4OfelkfFIBgyjuoZrpeEkGZnb+qf\\r\\n+Kn7Kt1hDwYr/Mb9ewuwOXsbIpLQMgfh0I5XsPrWocduVzn+u/cm3cr0Z11zsx0AZjTqvslACkDq\\r\\niquY41JhtGdc22RCvIYom2l+zzMIMyCPsHeCSB1MBu8EWK3iP7SD3dWttwzMg0xanoPDgk0U\\r\\n\";\n        c[169] = \"8BDFu+29lptlGSjcZe7ghWaUgIzbuUpM5XDFbtJVQPEd3bAE0cGRlQE9EhKXi5J/IskYNrQ357tB\\r\\nhA+UNDNXCibT2AZGpzWAcwE6dP+14FuRL5Gxqh/teuPYKr5IIn7M3SbgOychZzLI7HGCvVhBUiJB\\r\\nu8orI3WmAIVcUhAsMGHsFveck/ZCXQA+Uq/WVnW1VNs6hSmIhsAFc51qsmsQK07z2Wptx4rRjw==\\r\\n\";\n        c[170] = \"siPSXD4u36WYtTvvDzRlFPiuZMnRczrL3eA15955JDCc6/V2Cvu6m/HPO6JxogxO0aYTZ5tejYDO\\r\\nIZgBy40DgUZMqPJ2IpYjsmUbjjJU8u/OpwhMon525m3v0EYlvyj2Qp3pwFKDkvncK3aNjN3KaaX6\\r\\nHuIy6kyqsDl0BTEnB5iJyHLRBCkeznTK019u48Yfsrz2oGuZcWzNj5/vKMdxQPiyJ9EHyox8Ark=\\r\\n\";\n        c[171] = \"+/14PnFQVZ7BTHKUvkTtRrYS7WnPND5gZ5byMhUrDLkJa6UPBV7z0nrDMifEo/dQfUq3EjCiG6xG\\r\\nVhrUvAzgxqOQZTW1Y9p9M0KWW+E0XvCQppHFpuMqF1vYsF0OD6AMiE9JtGnWs3JcaWP/XBF/CvhQ\\r\\nlFGbHi3fbrD/haTEBnmpJWBgMdKribdbXHtBSFZ2MzCX2eDtxoDdRdEVGs4v/q8gVBS+WsnZ3TTF\\r\\n\";\n        c[172] = \"31I1ja+B+aopKkztGzJYvJEWAshyoAAV5yve4LnP0kdImUQaVETSuo5CDIYr7zM8MCD1eYPpLicm\\r\\nGnA+C927o9QGAVL3ctO/DCWhNinW7NmeYIM+o4diKBkDPjHmSWa+nq4nr+gOap4CtwL2wW2B5Yqt\\r\\n26pKgN9uAU5CmTL26hYFgMEOZfrkQ7XdYGy2CN8RJLmjeSFVVNBG/FTaK7tpuy0LQSkko6wczBYG\\r\\neg==\\r\\n\";\n        c[173] = \"XbRfDqGe3eeI1tHx8UnPneDB57N8VeSSzXzVCNSgxOEfd6d/un5CDxHG+m4w3tIbtSky4R2+zMF+\\r\\nS5cRvTOwZ/veegYtLKTxA0mVedWLFkfh/v4NgPJ+NEU+cylbSSZLAeBofDvoJwnYKujN2KFa8PGA\\r\\nxr3Y8ry3qdkS8Ob1ZiHYAmLvKS9sGb/vjTvRy+a4Q7kOepsm7PYisinKelBAvDnjli6/lOutGren\\r\\njX4=\\r\\n\";\n        c[174] = \"jGEj/AaBefac9uOcmGuO9nH+N+zMsC4qAe6ZUEMMIXdTGnSWl7Xt0/nKqyOj3ZH249HwkJ8bn5C+\\r\\n0bzOpQ1eA3PxEq6RfKMrjHJPJmTZXrSESTjfj3oNLU/CqqDOqd8znTgN6nvnUdCeStLMh9bmWF1+\\r\\n0G11nDwg6GQWWQ0zjVDTq5j7ocXcFOyUcu0cyl5YDcUP0i2mA2JullInU2uBte7nToeSGB3FJxKu\\r\\neBbv\\r\\n\";\n        c[175] = \"RAzNCxlP2S/8LfbGtlSDShox8cSgmJMOc2xPFs8egZVJiwlmnS3aBWKPRbbxkZiVVYlu4GNJNwbo\\r\\ncc6dgrl28HXAsYikE5wwoQ1MeOJWU3zzFiYENh7SLBQfjVPQHucctr8P6Rl7YL5wHc+aC+m92R3b\\r\\nnzm5rp1PeHm7uzy2iUUN0cgfbwJ4FrpXhVMTsAUpTbg1+037EWcGOuxir4dG2xBfgOwa+ejFHkw7\\r\\ny0LWRw==\\r\\n\";\n        c[176] = \"08hmZptBGKKqR6Qz9GNc2Wk1etgU/KogbiPQmAh5IXlTBc97DuEToL4Bb889nfObVQ/WelmiCS8w\\r\\nEjSBdmnlkkU7/b5UT3P4k1pB6ZxPH9Qldj5aazkA/yCb0kzDfJlcdFOh1eAcu5LvwTXOizmPwsDv\\r\\nJEnOkaDZrKESZshsHU2A6Mx6awk9/orf6iBlJHQIIH3l4o3b1gx2TNb/hUgdAlwtQDhvKO3skB0P\\r\\nS+rcWAw=\\r\\n\";\n        c[177] = \"0GhrgbSSHPLWtyS2mnSxrNAj/dyrFQcxIgPjT7+78SZ1ZTGc03vsmlZ4Z/bOO84E9yKblaI5dSHV\\r\\nXrx57L0kikL8tgKCsAkUNO3l/4zv5FfCrRTgGx4sFTFB1NNcLcwagkvFzde764DjYmj4YZhYsXSZ\\r\\nCVKi0uu5M8fpgGDZ9UMSFR008cbhaIoFLWSANqiNJYSvTQZhGWfLtIPGLN+gIOMcaKhx1b5vg6OY\\r\\nSz6ScAM/\\r\\n\";\n        c[178] = \"2VGiMV/f2hNZAjw3fdeHx/wRIVzeP018lZynzwSySG/zQBxyRmi3YmKVZmh3aJunuiqmvdt0kJ6l\\r\\nX7M8BajYHPCBkqJOx8oPJ/K1oADxVgnavZ69dKYrSy9/Pm6sHxjFrdSz9TelUK9sgoFTWS6GxgzW\\r\\nEqXRBDDpGUnsNbSEcWLPKVLNNoYAcltY98JZaNSZBXcpa9FeSN7sVU43q2IEcDx3ZkJzRJpl/lb7\\r\\nn+ivMwX/OQ==\\r\\n\";\n        c[179] = \"iMSCh1m5vct3C7LEn5wKRYtalzvG6pKahG19rTb6Z9q7+buDsML5yM6NqDvoVxt3Dv7KRwdS3xG/\\r\\nPyb7bJGvQ2a4FhRnTa4HvPvl3cpJdMgCCvsXeXXoML4pHzFlpP0bNsMoupmhQ0khAW51PAr4B165\\r\\nu1y5ULpruxE+dGx/HJUQyMfGhOSZ5jDKKxD5TNYQkDEY28Xqln6Fj8duzQLzMIgSoD8KGZKD8jm6\\r\\n/f8Vwvf43NE=\\r\\n\";\n        c[180] = \"hN4+x/sK9FRZn5llaw7/XDGwht3BcIxAFP4JoGqVQCw8c5IOlSqKEOViYss1mnvko6kVrc2iMEA8\\r\\nh8RssJ4dJBpFDZ/bkehCyhQmWpspZtAvRN59mj6nx0SBglYGccPyrn3e0uvvGJ5nYmjTA7gqB0Y+\\r\\nFFGAYwgAO345ipxTrMFsnJ8a913GzpobJdcHiw5hfqYK2iqo8STzVljaGMc5WSzP69vFDTHSS39Y\\r\\nSfbE890TPBgm\\r\\n\";\n\n    }",
        "begin_line": 161,
        "end_line": 261,
        "comment": " These are chunked versions of the strings above (chunked by commons-codec-1.3.jar) ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 37)",
            "(line 163,col 9)-(line 163,col 18)",
            "(line 164,col 9)-(line 164,col 26)",
            "(line 165,col 9)-(line 165,col 26)",
            "(line 166,col 9)-(line 166,col 26)",
            "(line 167,col 9)-(line 167,col 30)",
            "(line 168,col 9)-(line 168,col 30)",
            "(line 169,col 9)-(line 169,col 30)",
            "(line 170,col 9)-(line 170,col 34)",
            "(line 171,col 9)-(line 171,col 34)",
            "(line 172,col 9)-(line 172,col 34)",
            "(line 173,col 9)-(line 173,col 39)",
            "(line 174,col 9)-(line 174,col 39)",
            "(line 175,col 9)-(line 175,col 39)",
            "(line 176,col 9)-(line 176,col 43)",
            "(line 177,col 9)-(line 177,col 43)",
            "(line 178,col 9)-(line 178,col 43)",
            "(line 179,col 9)-(line 179,col 47)",
            "(line 180,col 9)-(line 180,col 111)",
            "(line 181,col 9)-(line 181,col 115)",
            "(line 182,col 9)-(line 182,col 115)",
            "(line 183,col 9)-(line 183,col 115)",
            "(line 184,col 9)-(line 184,col 119)",
            "(line 185,col 9)-(line 185,col 119)",
            "(line 186,col 9)-(line 186,col 119)",
            "(line 187,col 9)-(line 187,col 123)",
            "(line 188,col 9)-(line 188,col 123)",
            "(line 189,col 9)-(line 189,col 123)",
            "(line 190,col 9)-(line 190,col 127)",
            "(line 191,col 9)-(line 191,col 127)",
            "(line 192,col 9)-(line 192,col 127)",
            "(line 193,col 9)-(line 193,col 131)",
            "(line 194,col 9)-(line 194,col 131)",
            "(line 195,col 9)-(line 195,col 131)",
            "(line 196,col 9)-(line 196,col 135)",
            "(line 197,col 9)-(line 197,col 135)",
            "(line 198,col 9)-(line 198,col 135)",
            "(line 199,col 9)-(line 199,col 139)",
            "(line 200,col 9)-(line 200,col 196)",
            "(line 201,col 9)-(line 201,col 196)",
            "(line 202,col 9)-(line 202,col 196)",
            "(line 203,col 9)-(line 203,col 200)",
            "(line 204,col 9)-(line 204,col 200)",
            "(line 205,col 9)-(line 205,col 200)",
            "(line 206,col 9)-(line 206,col 204)",
            "(line 207,col 9)-(line 207,col 204)",
            "(line 208,col 9)-(line 208,col 204)",
            "(line 209,col 9)-(line 209,col 208)",
            "(line 210,col 9)-(line 210,col 208)",
            "(line 211,col 9)-(line 211,col 208)",
            "(line 212,col 9)-(line 212,col 212)",
            "(line 213,col 9)-(line 213,col 212)",
            "(line 214,col 9)-(line 214,col 212)",
            "(line 215,col 9)-(line 215,col 216)",
            "(line 216,col 9)-(line 216,col 216)",
            "(line 217,col 9)-(line 217,col 216)",
            "(line 218,col 9)-(line 218,col 220)",
            "(line 219,col 9)-(line 219,col 220)",
            "(line 220,col 9)-(line 220,col 220)",
            "(line 221,col 9)-(line 221,col 224)",
            "(line 222,col 9)-(line 222,col 224)",
            "(line 223,col 9)-(line 223,col 224)",
            "(line 224,col 9)-(line 224,col 228)",
            "(line 225,col 9)-(line 225,col 228)",
            "(line 226,col 9)-(line 226,col 228)",
            "(line 227,col 9)-(line 227,col 232)",
            "(line 228,col 9)-(line 228,col 232)",
            "(line 229,col 9)-(line 229,col 232)",
            "(line 230,col 9)-(line 230,col 236)",
            "(line 231,col 9)-(line 231,col 236)",
            "(line 232,col 9)-(line 232,col 236)",
            "(line 233,col 9)-(line 233,col 240)",
            "(line 234,col 9)-(line 234,col 240)",
            "(line 235,col 9)-(line 235,col 240)",
            "(line 236,col 9)-(line 236,col 244)",
            "(line 237,col 9)-(line 237,col 244)",
            "(line 238,col 9)-(line 238,col 244)",
            "(line 239,col 9)-(line 239,col 248)",
            "(line 240,col 9)-(line 240,col 248)",
            "(line 241,col 9)-(line 241,col 248)",
            "(line 242,col 9)-(line 242,col 252)",
            "(line 243,col 9)-(line 243,col 252)",
            "(line 244,col 9)-(line 244,col 252)",
            "(line 245,col 9)-(line 245,col 256)",
            "(line 246,col 9)-(line 246,col 256)",
            "(line 247,col 9)-(line 247,col 256)",
            "(line 248,col 9)-(line 248,col 260)",
            "(line 249,col 9)-(line 249,col 260)",
            "(line 250,col 9)-(line 250,col 260)",
            "(line 251,col 9)-(line 251,col 268)",
            "(line 252,col 9)-(line 252,col 268)",
            "(line 253,col 9)-(line 253,col 268)",
            "(line 254,col 9)-(line 254,col 272)",
            "(line 255,col 9)-(line 255,col 272)",
            "(line 256,col 9)-(line 256,col 272)",
            "(line 257,col 9)-(line 257,col 276)",
            "(line 258,col 9)-(line 258,col 276)",
            "(line 259,col 9)-(line 259,col 276)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.initBYTES()",
        "snippet": "    private static void initBYTES() {\n        byte[][] b = BYTES;\n        b[0] = new byte[]{};\n        b[1] = new byte[]{-72};\n        b[2] = new byte[]{-49, -36};\n        b[3] = new byte[]{77, 15, -103};\n        b[4] = new byte[]{110, 24, -44, 96};\n        b[5] = new byte[]{-43, -61, -67, -75, -33};\n        b[6] = new byte[]{-80, -52, 71, -96, -105, -7};\n        b[7] = new byte[]{-115, 7, 15, -108, 59, 25, -49};\n        b[8] = new byte[]{76, 6, -113, -99, -11, -65, 9, -123};\n        b[9] = new byte[]{113, 116, -39, -69, 12, -41, 60, -29, 82};\n        b[10] = new byte[]{46, -39, -1, 101, 53, 120, 34, 52, -6, 56};\n        b[11] = new byte[]{-23, -8, 126, -115, -43, 55, -43, 35, -90, 90, -73};\n        b[12] = new byte[]{19, -2, 76, -96, 62, 42, 10, -16, -18, 77, -63, 64};\n        b[13] = new byte[]{-38, 127, 88, -55, -16, -116, -56, -59, -34, -103, -69, 108, -79};\n        b[14] = new byte[]{-88, 25, 26, -36, 26, -70, 87, 125, 71, -103, -55, -121, -114, 70};\n        b[15] = new byte[]{90, -4, -103, 123, -87, 16, -14, -100, -69, -101, 110, 110, 113, -84, 9};\n        b[16] = new byte[]{-95, -118, 113, 51, 46, -127, 74, -106, 87, -123, 90, 78, 71, -89, 87, -104};\n        b[63] = new byte[]{-55, -20, 69, 104, -46, -102, 63, -27, 100, 87, 1, 20, -65, 20, 23, 108, 45, 7, 72, 40, -65, -78, -77, -104, -19, -51, 55, -22, 84, -10, -27, -6, -20, -29, 24, -56, -66, -99, -75, -32, -111, -62, -125, -77, -117, -3, 118, 86, -36, -125, 30, -24, 32, -32, 72, -64, -102, 104, -113, 117, 121, 24, 12};\n        b[64] = new byte[]{-66, 74, -96, -98, -30, 119, -90, 92, 77, -74, -117, -34, -120, -62, 110, 96, -77, 122, -63, -108, 11, -91, -67, -59, -125, -113, 63, -52, 121, 29, 22, -32, -18, 114, -29, 10, 89, 84, 78, -2, 120, -123, 70, 2, -84, 22, -89, 49, -85, -91, 96, 11, 28, 16, 109, -29, -30, 63, -37, 17, -97, 28, -5, -62};\n        b[65] = new byte[]{96, 121, 44, -36, 96, -101, -38, -27, 69, -29, -74, 54, -76, 40, -98, -120, 49, -119, -13, -65, 81, -101, -105, 65, -123, 8, 80, -117, 54, 33, 125, 99, -88, -8, 26, -63, -37, -14, -66, 19, -68, 25, 89, 56, -99, -41, -119, 76, -92, -50, -76, -5, -112, -76, 55, -46, 77, 40, 7, 1, 17, 39, -86, 101, -110};\n        b[66] = new byte[]{-49, -50, 121, -42, 57, -112, -89, -12, 44, -9, -101, 112, -37, 110, -66, 28, 33, -42, -82, -30, -79, -4, -101, -33, 4, 39, -48, -26, -99, 31, 23, -66, -26, -111, 42, 105, -21, -95, 57, -25, 104, -92, -38, 12, -100, -84, 16, 108, 48, 47, -51, 111, 57, -64, -127, 54, 104, 51, 54, 113, 122, 23, -55, -62, -18, 61};\n        b[67] = new byte[]{86, -60, 118, -62, 26, -86, -2, -92, 38, -33, -115, -66, 76, -36, -11, -106, 3, -103, 50, -123, -101, -92, 44, -2, -110, 61, -77, 126, 90, -76, -97, 30, -46, -3, 23, -124, 84, -11, 9, 114, -88, 12, -75, 92, -21, -81, 97, 85, 64, -9, -63, 0, 126, 85, 70, 52, 126, -122, 76, 112, -65, -122, -20, -79, 9, -84, -15};\n        b[68] = new byte[]{-25, 25, -120, -89, -57, 84, 37, -100, -28, -118, -62, 36, -72, 67, -20, -100, -11, -17, -52, 55, -116, -93, -113, 42, 88, 87, -57, 34, 125, -102, -65, 120, -21, -26, -86, 25, 28, 43, 52, 45, -13, 68, -55, -22, 66, -34, -3, -84, 107, 73, -62, 83, 65, 101, -86, -55, -125, -55, 50, 57, -1, 104, -19, -25, 59, 11, -75, 93};\n        b[69] = new byte[]{-76, 97, 32, 94, 56, 37, 80, 31, 77, 108, 43, 98, 75, -49, 0, 122, -46, -19, 70, -88, 66, 2, 120, 115, 57, 66, -107, -126, -10, -55, 100, 122, -114, 3, -84, 124, -72, -22, 43, 3, 91, 119, 53, -58, -120, 3, 77, 25, -87, -77, -40, 0, -69, -72, 47, 50, 38, -30, 46, 37, 0, -65, 80, -126, 33, -1, 38, 14, -37};\n        b[70] = new byte[]{-128, 91, 113, 18, 22, 9, 106, 16, -26, 83, -105, 105, -71, -42, 44, -23, -108, -20, -88, 12, 126, -77, 104, -2, -45, -96, 52, -51, -20, -101, -35, 78, -25, -123, -111, 108, 110, 64, -125, -107, -37, 52, 17, -123, 40, -87, -22, -39, -87, -109, -26, -20, 94, -126, 12, -29, -125, -35, -43, 59, -99, -119, -98, -108, 77, 3, -57, 35, 14, -12};\n        b[71] = new byte[]{-113, -8, 127, -44, -100, -96, 96, 14, 91, -114, -37, 113, -51, 12, 107, -26, 0, 109, -126, 31, -128, 97, 90, 51, -124, 94, 22, -126, -9, 20, -2, 14, 61, -65, 72, 84, -53, -95, 93, -123, -10, 94, -64, 98, -66, 62, 27, 115, -113, -76, 90, 108, -114, 105, -37, 53, -14, -50, -7, 38, 45, 7, 69, -123, -46, 57, 82, 110, 14, -26, -52};\n        b[72] = new byte[]{-101, -23, 24, 84, 106, 35, 33, 30, 105, -127, -68, -5, -92, 98, 102, -38, 15, -73, -86, -87, 59, 126, 25, 119, 114, -116, 26, -39, -27, 107, -122, 72, -69, 90, -121, -14, -53, 9, -47, 123, 58, -109, -60, -23, 1, -127, 81, 115, -22, 114, -84, -14, -84, 105, 109, -74, -13, 0, -73, 45, 112, -9, -116, -78, -97, 93, -91, 117, 31, -71, 66, 107};\n        b[73] = new byte[]{-92, -10, -122, -100, -54, -12, 81, -119, -91, 118, 114, 85, -109, -15, 126, -35, 96, -119, 39, 90, -10, -94, -37, -61, -28, -94, 93, -73, 107, -75, 70, 116, -70, 47, 8, 71, -121, 2, -62, -87, -11, -68, 59, -12, 4, -125, -115, -42, 119, 18, -88, -104, 98, -1, 36, -51, -9, -74, 127, -63, -10, -109, 15, -96, -123, 52, 65, 49, -93, -85, 97, -111, -93};\n        b[74] = new byte[]{-104, -20, 115, 27, 44, -90, -23, 63, -63, -60, 37, 121, -99, 40, -120, 96, -55, 95, 1, 73, -126, 55, -72, 45, -17, -26, 83, 50, 13, 100, 119, -61, -19, -118, -71, 62, 36, 94, 93, -109, -59, 18, 109, 96, 110, -1, -42, 111, 54, 14, 89, -70, 34, 66, 120, 108, 31, 105, 90, 106, -91, -99, -54, -9, 36, -123, -20, 47, 59, 38, -5, -75, 69, 65};\n        b[75] = new byte[]{85, -126, -50, 32, 78, 3, -98, 28, 73, -97, 113, 74, 75, -3, -111, 28, 113, -40, 46, 86, 98, 25, 87, 85, -2, 78, 46, 5, -69, 64, 96, 117, 18, 78, -108, 115, 105, -90, 15, 24, -48, 21, -115, -45, 112, 109, 49, -56, -118, 25, -98, -70, 79, -7, 97, 5, 50, -16, -47, 108, -60, -118, 38, -8, -72, -69, 110, 117, -94, 6, -127, -54, 4, -13, -5};\n        b[76] = new byte[]{-19, -6, 12, -92, -99, 19, -110, 112, -102, -74, 53, 34, 75, 27, 103, -72, -92, -94, -49, -124, 47, -105, -8, -99, 89, -113, 84, 42, 36, -27, -114, -124, 7, 103, -32, -68, 109, -59, 44, 114, 114, 63, 109, -102, -11, -35, -18, -128, -65, 37, 33, -29, -77, 37, -91, -47, -81, -52, -119, -76, -26, -91, 29, 49, 101, -117, -95, -110, 78, 104, 102, 47, 14, 107, -21, 89};\n        b[77] = new byte[]{-113, 20, 18, 26, 33, 108, -7, -67, 83, 124, 78, 37, 13, 64, 15, 80, -14, 116, 73, 103, -108, -126, 93, 55, -84, -82, -102, -70, 39, -106, 37, -58, -85, 12, -127, -52, -9, -72, 6, 56, 115, 38, -56, 123, -99, 68, -54, -92, 102, 98, 36, -59, -124, 96, 98, 0, -126, 82, 15, -55, 121, 79, 117, 57, -112, -9, -76, -66, 20, -5, 3, 97, 74, 28, -80, 123, -49};\n        b[78] = new byte[]{80, 105, -121, -2, 9, 123, -73, 112, -28, -13, 77, 111, 70, 20, 67, 17, -72, 44, 125, 40, 109, 29, -99, 96, 101, 9, -8, 40, -42, 121, 66, -52, 55, 90, 33, -93, 91, 66, 38, 34, 117, 71, 107, -30, -46, 28, 28, -53, 82, 60, 2, -47, -99, -25, 92, -18, 34, -29, -32, -94, 41, -118, -128, -78, -109, -107, -120, 78, -106, -87, 85, 24, -15, -108, -107, -48, -24, 56};\n        b[79] = new byte[]{-63, -47, 40, 98, 98, 110, 70, 120, 54, -49, 98, 36, 2, 36, -96, 39, 80, -106, -39, 81, 59, 31, -70, 23, -91, -123, -124, 20, 83, -68, -100, 109, 27, 102, 126, -49, 30, 20, -4, 43, 40, 90, 59, 106, -30, 118, 95, 30, 80, 76, -84, -115, -83, 21, 92, 80, -14, 66, -92, -96, 102, 123, -35, 80, -86, -62, 25, -22, 86, 25, -106, -16, -45, -3, 27, 15, 11, 55, 2};\n        b[80] = new byte[]{-26, 70, 106, -126, -75, 27, -73, -22, -51, -28, 21, -128, 117, -41, -108, -74, 111, 83, 25, 62, 55, -67, -118, 65, -24, -9, -78, 67, 4, -14, -53, -43, 91, -81, 79, -108, -1, -124, 51, -53, 66, 48, -33, -76, 90, -37, -35, -57, -102, 73, -87, -127, 12, -18, 73, -59, 105, 112, -120, -123, 25, 115, -64, 21, 108, 19, -95, 31, -101, -94, -4, 46, -19, -91, -29, -117, -15, 103, 51, 9};\n        b[81] = new byte[]{19, -114, -69, 48, -55, -119, 110, 108, 47, -16, -23, -100, -39, 55, 92, -56, -54, -1, -33, 64, 124, -117, 53, -101, 127, -32, -128, -72, -101, 112, -21, -74, -11, -125, -37, 107, -124, 46, -89, -32, 102, 39, 94, 55, -106, -12, 54, 47, -103, 106, 8, 36, -4, 116, -50, -11, 63, 67, -24, 42, -65, 71, 45, 122, 13, -101, -57, -45, -10, -102, -72, 12, 12, 4, 91, -23, -24, 40, -62, -88, -15};\n        b[82] = new byte[]{86, -101, 124, -123, -122, -8, -113, 29, 69, -5, -76, 68, 95, -78, -70, -26, -2, -98, 59, -111, 117, 24, 56, 63, 43, -60, -107, 45, 96, -46, -89, 75, 43, -70, -106, 4, 66, 64, 85, 71, 25, -63, -11, -39, -95, 74, -113, 87, 30, -100, -8, 11, -54, 81, -105, -54, -4, -39, -4, 87, 102, -23, -90, 17, -2, 20, -40, -24, 116, 14, 42, 121, -82, 115, 109, 12, -65, -120, 38, -14, -4, -107};\n        b[121] = new byte[]{-123, -2, -67, -58, -65, 102, -76, 87, -8, 55, 120, -10, -72, 15, 76, -128, -78, -7, 103, 47, 120, 30, 59, -2, 85, 8, -67, -29, -30, -46, -13, -34, -10, 36, -104, 3, 28, 36, 14, -64, -2, 112, -123, -44, 36, 87, -28, -119, -91, 121, 34, -56, 113, -102, 74, -60, 56, 126, 23, -87, 63, 12, -18, 101, -63, 41, 96, 68, 126, 109, -23, -14, -42, 63, -116, -48, 116, -103, 123, 126, -116, 117, 18, 33, -107, 58, -89, -93, -18, 42, -79, 119, 36, 47, 64, -93, 94, -58, 36, 36, -109, 52, 52, 7, -50, 98, 49, -64, -70, -50, 70, -43, -72, 34, -11, 88, 102, -120, -57, -64, 48};\n        b[122] = new byte[]{-56, -84, -45, -121, -104, 79, -89, -33, -49, 5, -26, 109, -83, -107, -20, 20, 112, 17, -9, 44, 14, 51, 120, 81, 104, 16, -28, -128, 111, 68, -45, -36, 5, 91, -61, 25, 15, 76, 76, 25, -24, 28, -89, 68, 43, 76, -105, 15, -15, 6, 14, 105, -120, 83, 13, 88, -90, 62, -85, 13, 77, 83, -90, -115, -40, -28, -67, 47, -74, 90, 24, -55, 91, -119, -107, 57, 116, 60, 40, -128, -3, -41, 38, -127, -76, -6, 62, 13, 43, 75, -28, 99, 32, 114, -41, 15, -28, -54, 21, 127, 85, 105, -13, 15, -26, 98, -38, 31, -87, -71, 101, 124, 57, -71, 53, -10, 51, -121, 96, 59, -118, 54};\n        b[123] = new byte[]{114, -63, 102, -62, -16, -13, -96, -18, 8, 59, -84, -110, 12, 14, 1, -39, 94, -34, -104, 71, -83, 3, 0, -96, 59, -82, -77, -50, 87, -42, 111, 114, -125, -84, -9, -59, 101, -51, -55, -126, -66, 62, 118, 86, -108, -112, 66, 3, 29, -121, -117, 28, 68, -35, 78, -53, 22, 58, 93, -118, -84, -15, -63, 18, -59, 11, -92, 52, -47, -5, 115, -95, -70, -75, -37, -43, 10, -10, 54, -15, -30, 28, 91, -86, 79, 113, -98, 111, -95, 24, -61, 102, -91, 109, -12, -26, 95, 23, 33, -13, 102, -101, -106, -34, 22, 42, 94, 42, 61, -60, -98, -53, -98, 47, -22, -37, 2, -71, 75, -103, -50, -71, 45};\n        b[124] = new byte[]{-28, -119, -15, -68, -84, 41, -96, 37, 123, 16, -82, -4, 59, 53, 63, -76, -65, 127, 54, 98, -75, -32, -6, -16, -10, -45, -126, 3, 34, -66, -58, -107, 13, 45, -102, -30, -71, 81, 21, 118, 10, 104, 103, 78, 107, -106, 43, -97, 105, 64, -58, 28, 127, 29, 60, 7, -90, -16, 111, 67, 55, -11, 78, 62, 75, 65, -22, -11, -54, -75, -51, -92, 49, 72, 39, 49, 56, -103, -62, -1, -44, 85, -33, -79, -54, -87, -45, -16, -14, -60, 116, -44, 60, -84, 37, -79, -54, 32, -100, 45, -43, -59, 127, 79, -79, 112, 78, -22, 9, -52, 51, 11, -32, -5, -7, -60, 86, -6, 46, -99, -98, -106, 100, -53};\n        b[125] = new byte[]{112, 76, 123, -95, 59, 18, 29, 101, 5, 62, 63, 118, 114, -53, 93, -53, -100, 6, 109, 23, 49, 31, -27, 81, 88, -33, 36, 104, -44, -45, 8, -11, -86, 73, -55, 50, 83, -43, -28, -2, 56, -7, -2, 8, -3, 12, 92, 35, 126, -64, -110, -89, -83, 49, -70, -41, -8, -2, -79, 90, -98, 59, 112, -86, -44, 96, -23, -46, 75, 63, -126, 64, -126, -109, -118, -77, 0, -27, 30, 46, -107, -73, -68, -59, -1, 14, -57, -119, -45, 31, -38, -57, 109, -106, -54, -77, 107, 38, 102, 79, 97, -25, -18, 35, -88, -36, 33, 49, -50, -66, 89, -28, -105, -26, 48, 80, 23, -15, 31, 105, 121, 67, 120, -73, -107};\n        b[126] = new byte[]{1, -27, -34, -75, 86, -29, -5, -71, -90, 26, 32, -84, -36, 17, -108, 73, -112, -53, -106, -83, -88, 116, -53, 13, -16, -112, 7, 64, -50, -72, 10, 92, -68, -53, -104, -16, -17, -109, -23, 33, 42, 28, 89, 17, 69, 66, 105, -105, 96, -2, -36, -112, -87, -83, -70, 18, 47, 15, -81, 71, -75, -100, 70, -124, -44, 108, -105, 89, 117, -127, 124, -54, 22, 27, 22, -54, 71, 17, -76, 111, 59, 23, -53, 18, -43, 75, -1, -117, -92, 47, 26, 36, 72, 13, 81, 6, 24, -116, -42, -81, 52, 72, 33, 41, 1, 111, -36, 2, -60, -99, -121, 17, 39, -27, 121, 108, 43, -49, -15, -86, -81, 40, -24, 55, 110, -127};\n        b[127] = new byte[]{106, 61, 127, -13, -1, -108, -15, 83, -73, 15, 104, -128, -62, -12, 23, 103, -127, -12, 43, 11, 110, -52, 57, -72, 36, 32, -68, -5, 109, -100, 114, -87, 62, 83, 50, -81, -86, 49, -84, -13, -75, -25, -125, 7, -20, 49, -12, -92, 120, 101, 64, -117, -91, 65, -22, -41, -51, 37, 56, -40, 114, -42, -93, -19, 31, 29, -62, 29, -113, 33, -14, -46, -82, -10, -87, -121, 14, 48, 52, 29, -111, 18, 58, 101, -100, -6, 35, -96, -26, -3, 108, -43, 13, -75, 75, -35, 43, 118, -11, 108, 10, -50, 90, -24, 8, 68, -107, -117, -100, -55, 123, -37, 33, 7, 21, -67, 98, 5, -16, 102, -97, -69, -120, 107, -78, -109, -39};\n        b[128] = new byte[]{-110, 35, 46, 23, -3, 66, 49, 25, 96, -95, 47, -18, 44, -87, -11, -104, -42, 69, 100, -47, -55, 54, 68, 80, -98, 43, -50, -81, 56, -4, 29, 0, 26, -125, 12, -17, 77, 123, -20, 26, 2, 61, -123, 117, -9, -87, -89, -103, 47, -33, -15, -4, -22, -66, 99, -111, 122, 14, 31, -80, 94, -113, -76, -110, -98, -119, 106, 1, 99, -67, -76, -55, 113, 4, -88, -64, 92, -56, -62, 14, -1, 87, -37, 26, -98, -51, 13, 19, 65, 35, -93, 14, 65, 125, -110, -81, -118, 17, 72, -29, -85, 7, -120, 2, -27, -42, -84, -24, 94, -94, -48, -85, -18, 95, 100, 98, 5, 71, 44, -104, -13, 1, 86, -42, -24, -115, -69, -39};\n        b[129] = new byte[]{97, 121, -126, 90, 24, -115, -49, -113, -56, -121, 44, 80, 33, -120, -32, 54, -8, -41, -7, 124, 3, -120, -12, -46, 4, -58, -123, 16, -71, -71, 95, -58, 56, -110, 113, -111, -98, 65, 120, -1, 56, -79, -14, 95, 112, 28, 22, -2, -20, 40, 31, -82, -66, 58, -84, 94, -34, -120, -116, -38, 0, 82, -29, 46, 56, -34, -61, 46, -73, 118, -32, 73, -119, 86, -60, 90, 58, -123, 59, 71, -18, -23, 63, 98, 34, 59, -124, 104, 93, -84, 78, -102, 111, -71, -109, 79, 31, 31, 52, -68, -33, -121, 44, 9, -64, 86, 104, 5, 17, 44, 57, 0, -11, -42, -97, 94, 93, -117, 59, -18, 81, -11, 71, 119, -104, -84, 10, -90, -64};\n        b[130] = new byte[]{24, -105, -44, -96, 24, -81, 91, -101, -86, 14, -107, 49, 77, 23, -29, 25, 99, 88, 124, -35, -1, 117, 49, 109, 117, 26, -126, 32, 126, 75, -39, -51, 103, 89, 125, 29, -127, -115, -37, 107, 95, -97, 91, -10, 23, -44, -24, 121, 107, 14, 37, 11, -96, 72, -118, 36, -31, -116, -102, 21, -43, 90, -51, -98, 85, -13, 109, -59, 28, 51, 47, -122, -80, 53, 20, 7, -60, 30, -14, 80, 111, 125, -17, -19, -31, 25, -115, 60, 29, 33, 86, 10, -46, -13, -39, -19, 110, -27, 52, 74, -64, -90, 91, 15, -67, 14, -93, 55, -98, 39, 79, 121, -80, 13, 40, 68, 98, -125, 92, -39, 76, 16, 74, -126, -107, 95, -20, 115, -59, 8};\n        b[131] = new byte[]{121, 55, -85, 54, -50, -35, 58, -94, 64, -60, 12, 92, 49, 4, 103, 80, 55, 54, 112, 24, -10, -57, 72, -44, -42, 13, 67, -36, 111, -101, -37, 105, 3, -49, -78, 65, -52, -20, -65, -101, 24, 70, 92, 4, 55, -41, 125, 37, 106, -11, -116, -124, -119, -110, 6, 68, 94, 83, -20, -12, 3, 93, -60, 97, 83, 20, -65, -45, -59, -52, 62, -8, -20, -96, -81, -98, -49, -110, 10, -114, 118, 96, -47, -63, -45, -49, 122, 111, -119, 120, -18, -81, 33, -69, -56, -20, 15, 94, -45, 103, 107, -106, 88, -104, 82, -31, -61, 103, 72, 77, 99, 120, -50, -115, -95, 113, -118, -67, -1, 116, -53, 23, -13, -62, -25, 13, 97, -50, 17, 117, -92};\n        b[132] = new byte[]{-107, -70, -58, -78, 54, -13, 19, -99, -75, -85, -53, 115, 84, 117, 123, -67, -60, -49, 114, 21, 39, -52, -113, -44, 125, -28, 118, 71, -25, 38, 57, -83, -67, 98, 88, -49, 88, -72, 109, -11, 108, 118, 38, -72, -30, 42, -2, 14, 127, -103, -41, 123, -71, 47, -122, 47, -117, 97, 75, -123, 86, -88, 26, -88, -127, 97, 11, -13, -53, 110, -93, -123, -119, 61, -107, 101, -59, -24, -83, 58, 26, 69, 63, 66, 46, 42, -107, -27, -66, -89, 28, -33, -45, -57, 62, -110, 35, -77, 34, 15, 120, 103, -109, -70, 108, 13, -72, 37, 60, -22, 62, -54, -38, -100, -10, -63, 71, -113, -75, 36, 71, 86, 92, -75, 8, -16, 21, -116, 9, -114, 92, 95};\n        b[133] = new byte[]{-103, 12, 0, 63, 54, 51, 127, 28, -3, 21, 113, 34, 103, -93, 60, -69, 90, 13, -36, 66, 91, 21, -119, -115, 85, -6, 102, -6, 61, 3, -86, 5, 62, 56, -14, 56, 81, 17, -63, 34, -79, 120, -58, -9, 76, -68, 3, -25, -47, 107, -102, -83, -76, 50, -3, -107, 77, -47, -30, -117, -19, 46, 10, -36, -53, -38, -97, 71, -27, 3, 6, -103, 116, -113, -98, -28, 122, 100, 127, 19, -88, 25, 58, 124, 14, 78, 68, 21, 53, -29, -103, -97, -20, -8, 106, 39, 120, -15, 16, 16, 99, 85, 60, -67, 86, 98, -128, -6, -59, 122, -128, 2, -13, 11, 42, -36, -85, 21, -54, 104, -120, 100, -67, 120, 48, 101, -79, -112, -48, -52, -4, -13, -2};\n        b[134] = new byte[]{-36, 110, -99, -41, 101, 24, -30, 94, 86, -20, -39, -16, -48, 18, -12, 30, 117, 98, 86, 15, 82, 116, 75, -117, 50, -89, -103, -61, 45, 17, -108, -108, 127, 98, -41, 32, 119, -7, -120, -60, -117, -105, 92, 9, 70, -122, -8, 104, 95, -91, -36, -40, 17, -108, -19, 26, 83, -117, 88, -40, 43, 48, 60, -21, 43, -91, -46, 63, 122, 117, -73, 4, -32, -21, 107, 63, -39, 84, 4, -103, 92, 99, -41, -106, -49, -97, 93, -68, -70, -118, -57, 11, 119, 112, 67, -127, -62, -77, -33, -21, -45, 7, -72, -122, -74, -25, -89, -84, -36, 3, -126, -95, -73, -62, -15, 20, 18, 113, 109, 15, 67, 68, 20, 107, 85, 71, 7, -9, -105, 74, -59, 83, 73, 104};\n        b[135] = new byte[]{3, 24, 43, 100, -92, -59, -109, -110, 111, 44, 45, -61, 4, 0, -121, -62, -99, -70, -24, 92, 74, 35, -4, -89, -12, 95, -75, -75, -119, 51, 47, -98, -47, 86, -50, 71, 8, -106, 18, -29, -75, 110, 27, 68, -12, 19, 108, 42, -52, 122, -100, 44, -93, -48, 49, -107, -108, -18, -10, -47, -93, 35, 6, 52, -67, -39, -75, -95, -24, 102, -92, -22, 114, -81, 74, 90, -45, -125, 11, -29, -89, 18, -12, -110, -17, -19, 79, -31, 41, -112, 14, -20, -117, -40, -62, 127, 120, -112, 1, 36, -93, 92, -69, 82, -65, 46, 77, 27, -72, 6, -114, -48, 91, -41, -24, -31, -127, 112, -4, -18, -41, -25, 111, -3, -103, 48, -72, -28, 74, -45, -70, -111, -97, 26, -112};\n        b[136] = new byte[]{106, -39, 6, -14, 93, -108, -4, -39, -26, -5, 50, -18, -17, 56, -34, -98, -73, -36, 1, 84, 9, 49, 74, -121, -118, 97, 89, -35, -60, 31, 105, 74, 120, -85, 42, -59, -97, 85, 34, -63, -99, -9, -113, -82, -107, -73, -83, -34, 85, -92, -1, 21, 124, 126, 46, 81, 39, -80, 121, -6, 1, 51, -63, 50, -99, -30, 17, -118, 1, 37, -116, -115, -90, 60, -1, -51, 19, -95, 5, -73, 51, -99, 0, 12, 117, 101, 19, 115, 34, -120, -98, -7, -58, -33, 30, -124, -58, 0, 87, -89, 42, -97, -57, 26, 127, 62, 111, 27, -53, -78, -27, 73, 68, -7, 48, -95, -35, 114, -17, -109, 17, -11, 23, 70, -119, 2, -81, 104, -113, -98, -34, -51, 98, -61, 67, 124};\n        b[137] = new byte[]{117, -56, -108, -42, 100, -121, 25, -64, 113, 56, 5, 65, -128, -100, 123, -28, -98, -125, 105, 7, 65, 101, -12, -56, -51, 13, 56, 90, 25, 36, 117, 19, 46, -92, -26, 86, 74, 123, -11, -9, 24, 115, -14, 24, -114, -7, -103, -37, 6, -48, -55, -72, -18, 107, 30, -59, 6, -52, 127, -29, 97, -89, 31, 103, 32, -112, -9, 110, 43, -95, 27, -28, -121, 116, -11, -53, 27, 11, -85, 118, -101, 100, -107, 2, 15, -47, -40, -100, -12, -60, 45, 88, 111, -41, -25, 4, 23, -122, -88, 59, 123, -58, 58, -19, -123, -91, -14, -44, -97, -108, 19, 119, 67, -24, -50, -62, 42, 114, -90, 85, 7, 101, 121, -20, 30, -61, -115, -8, -77, 81, -19, -61, -15, -121, -7, 85, -54};\n        b[138] = new byte[]{118, 4, 117, 60, -10, -100, 6, -5, 72, 44, 25, -96, -33, 123, 61, 41, 107, 110, 115, -82, -25, 118, 29, -21, 8, 118, 127, -108, -125, 123, -80, 67, 96, 108, 90, -119, 67, 46, 67, 11, 117, -56, 120, 116, -43, -18, -123, -99, -6, -46, 80, 105, 124, 104, 11, -67, 127, 73, 78, -47, -49, -93, -126, -108, 3, 10, 92, -74, -52, -49, -59, 58, 68, -8, -86, -97, 115, 59, 49, 16, -112, 112, 55, -51, -116, 14, 92, 8, -39, 39, 93, 63, 68, -121, 63, -56, 100, 95, -5, -107, -59, -85, -61, 16, 74, 98, 110, 1, -9, -55, 79, -110, -106, 109, 71, 100, 7, -99, -40, -112, -34, -9, -89, -51, 106, -49, -48, -2, 114, -37, -71, -111, 121, -95, 110, 104, -97, -66};\n        b[139] = new byte[]{-43, 15, 43, 126, -99, 71, -72, 107, 49, -70, -76, -32, 24, -58, -92, -58, 62, 82, -64, -47, 123, 18, 44, 87, -59, 83, -25, 124, 96, 3, 88, 55, 50, -126, 30, 66, -44, 19, 23, -86, 34, -11, 2, -27, 87, 57, 81, 78, -79, -84, -99, 124, -75, -122, 11, -62, -101, -121, -14, 98, 47, -95, -2, -41, 105, 88, -84, -47, -108, 79, -36, -119, 68, -116, -47, 14, 46, 23, -54, 83, 39, -83, -116, 1, -73, 0, -119, -114, -127, -46, -117, -121, -79, -49, -110, -74, -118, 30, 120, -70, -43, 64, -69, 53, -39, -125, -87, -89, 115, -40, -98, 119, -7, -115, 70, 56, -3, 119, 97, -59, 15, -103, -81, -45, 15, -22, 76, -33, -42, 23, 17, 38, -74, -26, 76, -2, 115, 12, 106};\n        b[140] = new byte[]{-61, 77, 83, -100, -13, -1, 23, 117, 103, -117, 119, -63, 117, 93, -10, 6, 118, -37, -32, -99, 69, 113, -74, -124, -7, 121, -8, -30, 122, 57, -70, 14, -5, 83, -63, 82, -42, 4, -90, -36, -70, -119, -13, 36, -14, 93, -37, -77, -105, -101, -10, 119, 0, 68, 127, 56, -124, 125, 59, -78, -86, 7, -117, 46, -64, -104, 76, 24, -41, -103, -125, -120, 29, 10, 44, 18, 94, -125, -56, 9, 39, -69, -123, -54, -25, 103, -112, 91, -31, 94, -77, -41, -110, -77, 99, 106, -8, 110, 26, 105, 30, 50, -30, 87, -98, 20, -39, -126, -95, -97, 65, 66, 96, 0, 102, -67, 11, 22, 74, -89, -66, -90, -118, -104, 21, 96, 114, 12, 79, -77, -65, -4, 73, 1, -25, -90, -85, -38, 83, -90};\n        b[141] = new byte[]{57, -4, -56, 23, 127, 19, -89, -104, 53, 91, -105, -107, 110, -71, 43, 49, -19, 12, -101, -73, -76, -64, 22, 32, -26, 21, 111, 46, -103, -1, -28, -59, -71, 56, 87, 38, 68, 59, -127, -89, 94, 90, -55, 16, 103, 39, 91, 1, 35, -35, -2, 8, -39, 116, 47, 3, -4, 67, 76, -3, 33, 113, 99, 76, 68, 121, -128, 118, 117, 41, -15, -68, 53, 95, -88, 105, -62, -115, 27, -74, -104, -83, -75, 31, -74, 68, -117, -2, -125, -33, 68, -45, -34, -49, -91, 52, 22, -27, -96, -67, 90, -41, 80, 30, -100, -64, -92, -42, -65, 6, -3, 42, -128, -5, -77, -96, 6, 97, 23, 71, -25, 70, 96, 37, -48, 103, -120, 80, -5, 116, -86, 14, 66, 114, 127, 16, 43, -109, 81, 114, 62};\n        b[142] = new byte[]{-30, 26, 23, -46, -56, -22, -106, 68, -119, 61, 74, -70, -37, -72, -119, -112, -42, 17, 110, -48, -2, 87, 106, -124, -84, 43, -109, -118, 70, -98, 68, 49, 25, -67, 81, -42, -65, 55, 111, -62, 62, 22, -41, 28, 73, -113, 63, -78, 28, 3, 122, -49, 97, 35, 9, 104, -99, 113, 43, 21, -127, 55, -93, 67, 86, -57, -14, -28, -13, 38, 8, 127, -50, -83, -14, 25, 68, -84, 38, -126, 86, -83, -25, 42, -58, -56, 30, -15, -79, 1, -114, 73, -66, -87, 67, -68, 27, 121, 0, -100, 46, -123, 50, 50, 118, 53, -124, 30, 93, -2, -114, 43, -93, -96, -78, -84, -119, -62, 81, -49, 79, 32, 38, -77, 111, -56, -95, -124, -63, -30, 33, 42, -128, -127, 70, -1, 103, -51, 16, -111, 8, 106};\n        b[143] = new byte[]{51, -9, 114, -41, -116, 77, 109, -109, 17, 124, 120, -118, 40, 87, 102, 15, -13, -85, 16, 31, -68, 49, -20, 107, 68, -17, 38, 50, 29, 34, -28, -70, -51, 3, -107, -108, -76, -75, -35, -63, 71, -64, -54, -58, 38, 106, 95, 120, 49, 42, 13, 37, -8, 38, -64, 96, -88, -88, -36, 37, 89, -112, 86, -42, 74, 80, 104, -9, 106, -78, -71, -10, 114, -9, 58, 37, -58, 86, -12, 89, 78, -57, 78, -61, 17, 18, 70, 109, -98, -91, -22, -121, -37, -51, -107, -96, 23, -20, -97, -6, 27, -45, -22, 57, -55, -67, 112, 85, 9, 52, -9, -107, -13, -73, -86, -114, 37, 120, -37, -124, 39, 11, 46, 83, -89, -85, 92, 96, -73, 10, 30, 119, -72, -5, 70, 34, -73, 67, 82, -105, 23, -21, -11};\n        b[144] = new byte[]{26, 2, -21, -38, 23, 119, -100, -82, -72, 33, -101, -12, 38, 75, 10, 1, 63, -14, 36, -44, 55, -15, -84, -82, 91, 32, 103, 88, -72, -41, 108, 73, -109, -45, -113, 20, 14, -102, 108, -82, -71, -49, -22, 24, -92, 70, -114, 111, -39, 57, 71, 26, 16, -10, 117, -52, 6, -12, -46, -54, -36, -8, 124, 34, -126, 40, -11, 103, -10, -67, -107, -127, 7, -28, -116, 35, -47, 105, -127, -100, 65, 88, -79, 35, -64, 118, -50, 90, -63, -38, 17, 3, 21, -79, 7, -28, -33, -63, 22, 64, -3, 5, -81, -91, 114, 48, -87, 68, 65, -6, 108, 70, 75, -126, -90, -99, 74, -58, -57, 26, -60, -82, -32, -28, 24, 23, 82, 86, -12, 107, 108, 116, 23, -32, -67, -124, 64, 116, 57, 83, -20, -113, -126, 77};\n        b[145] = new byte[]{91, -39, 74, 112, -80, -22, 52, 100, 0, 27, -5, 10, 64, -42, -111, -103, -29, -108, -104, -78, 123, 25, -61, 13, -88, 22, -122, 103, -82, 125, 70, 120, -21, -23, 20, -21, 126, 121, -92, -89, -106, 125, -103, -32, 11, -97, 5, -24, 30, 51, -29, -51, 36, 3, 38, 117, 88, -79, -113, -79, -56, -55, -18, 62, 9, 122, -128, -59, 64, -124, 9, -66, 94, -102, -40, 86, -101, 39, 123, -117, -19, -5, -70, 35, 82, -90, -81, 84, -16, 106, 47, 46, 93, -74, 120, 105, -42, -89, -36, -100, 8, -107, -27, -58, 97, 29, 117, -5, 53, -68, 100, 80, -20, -23, -74, 49, 6, 9, 8, -25, -123, 33, -8, -84, -10, -39, -74, 10, 8, 88, 79, 25, -23, -70, 5, -34, 95, -19, -124, -71, -59, 95, -32, 34, -119};\n        b[146] = new byte[]{-119, -126, -25, -26, 31, 101, 34, 16, -1, -57, -39, -88, 104, -12, 103, 77, 126, -90, 36, 66, 74, 78, 24, 56, 89, 124, 82, -20, -118, -47, -37, 54, -27, 31, 110, -82, 58, 66, 13, -49, 71, 73, 53, 50, 85, 122, -37, 52, 100, -42, 3, -98, -55, -45, -20, -99, -94, 35, 118, 58, -123, 53, 86, 60, 106, 24, 83, -113, 73, -36, 29, -117, -124, 36, 68, -77, 64, -39, 67, 112, -69, -45, -51, 5, -74, 35, -100, 124, 118, -33, 4, -77, 103, -48, 60, -126, 43, 82, -34, 0, 46, -40, 7, -10, -51, 118, 44, -95, 46, -95, -4, 124, -87, 126, -45, -30, -95, -120, -16, -56, 80, 18, 88, -39, -18, -56, 109, -108, 127, -10, -35, 44, -60, -106, -56, 95, 30, -100, 70, -14, 57, 1, 119, -79, -41, 106};\n        b[147] = new byte[]{74, 84, 73, 17, -50, -25, -91, 53, 47, 66, -81, 18, -128, 22, 10, -103, 86, 63, -33, 1, -40, -89, 104, 44, 15, 22, -97, 55, -14, 75, 82, -31, 42, 18, 57, -106, 50, -43, -69, 127, 16, 18, -117, -25, -113, 95, -120, 38, 36, -102, -117, -124, 62, 109, -8, 6, 113, -120, 44, 24, 43, 114, -9, 113, -21, -119, -57, -124, -30, -87, 88, 9, -49, -57, 122, -79, -50, -33, -127, 101, -27, -70, 29, 74, -8, 23, 6, 61, -74, 123, -8, 42, -72, 86, -56, 26, -20, -111, 1, 85, -23, 47, -120, 70, 121, 2, 30, 26, -92, -38, -4, 70, 64, 123, -96, -61, -108, 84, -15, -79, 69, -52, -78, 105, 81, 56, -52, 21, -66, -79, -64, 58, 115, 92, -94, -4, 116, 23, 117, -44, 61, -83, 108, -117, 82, -59, 104};\n        b[148] = new byte[]{0, 9, 91, 25, 30, -98, -112, -77, -77, -57, -120, 105, -87, -108, -44, -87, 85, 16, -48, 82, -10, 8, 90, 96, 8, -61, -87, -24, 43, -82, 83, 57, 18, -99, 101, -23, 82, 59, -50, -119, 32, -28, 52, -8, 40, 76, -8, 41, -126, 104, 55, -71, -117, -52, -79, 126, 55, -102, 67, -58, 80, 96, -67, 107, 0, -45, -123, 124, -122, 66, 30, -82, -35, 103, -42, -74, 104, 98, 61, 26, -105, -98, 49, 94, -109, -31, 15, 119, 66, -40, 94, -101, 59, -42, 122, 39, -24, 47, 102, -18, 117, 37, 96, -43, -77, 4, -99, 88, -50, -68, -42, -114, 80, 121, 44, -77, -63, 55, -58, -20, 100, 110, -111, 109, -42, 100, 96, -52, 73, -12, -98, 109, 107, -9, 55, -46, 111, 48, 12, 51, 110, 78, 109, 39, 16, 77, 25, 85};\n        b[149] = new byte[]{-99, 101, -101, 6, 28, -50, 110, -84, 4, 22, 31, -45, -120, -92, 68, 114, -54, -117, 97, -76, 99, 33, -58, 95, -108, -102, 104, -105, 94, -116, -117, -122, 3, 47, -95, 25, -82, 45, -74, -87, 25, -45, -126, -80, 109, 33, -113, -121, -119, -28, -40, 90, -30, -38, 9, 41, 63, 7, -43, -100, 98, -24, -24, 75, -94, 91, -27, -36, -96, -36, 84, 58, 92, 95, 91, 97, -93, 80, 27, 29, -80, -16, 49, -32, -57, 73, 54, -98, -95, -1, -47, 77, 108, 1, 77, 36, 126, -35, -10, 104, 61, -88, -82, -96, -116, 34, -102, -37, 59, 85, -119, 34, -35, -102, -71, 25, -17, 112, -28, -59, -96, -26, -79, -9, 110, -89, 2, 76, 111, 71, 121, -21, 21, 80, -34, -68, 88, -61, 110, -24, 41, 88, 121, 6, -62, 39, 58, 27, -70};\n        b[150] = new byte[]{88, -39, 53, 70, 125, -86, -76, 111, -96, -109, 64, 4, 123, 10, -32, -93, -26, -111, 108, -38, -58, -32, 40, 16, -92, -28, 124, 82, -114, -36, -38, 109, -105, 65, -113, 12, 84, 59, -72, -71, 16, 58, -81, 54, 6, 25, -40, 42, 77, -62, 2, 42, 76, -67, 50, -15, -34, 37, -29, 86, 84, 5, -50, -58, 96, 56, 17, -43, -48, -37, 18, 45, 20, -105, 80, -73, 16, 109, -25, -89, 26, 119, -47, 65, 93, 123, 51, -37, 92, -107, -80, -6, -7, 119, -114, 119, 105, -72, -69, 79, 117, -33, 29, 84, -45, -95, -23, 34, 58, 92, 64, 38, -49, -101, -91, -85, 125, 112, 84, 91, 33, -47, -32, -124, -17, 112, 115, -5, -100, -96, 10, -45, -25, 123, -23, 98, -55, -14, 121, 89, -26, 100, 109, -113, 95, -113, 37, 94, -109, 82};\n        b[151] = new byte[]{-63, 89, -94, 59, -87, -99, 127, 102, -102, -122, -78, 101, 114, 105, -63, 15, 68, 26, -25, -52, -68, 2, -4, -41, -76, -98, 120, 34, 108, 96, 60, -77, -25, -48, -48, -112, 34, -71, -108, -57, 51, 89, 53, 51, -125, 19, 117, -114, -22, 70, 76, 16, 38, -109, -3, 17, 42, 79, 115, -24, 56, 26, 125, -78, -48, -121, 8, 83, 87, 56, -50, -3, -17, -46, 120, -32, 45, 89, 69, 77, 50, 60, 40, 90, -45, 73, 16, 100, 17, 121, 18, 103, 11, -118, -43, 66, -49, 93, 45, 63, -56, 6, -43, -8, -120, -68, -56, -16, -91, -35, -103, 76, -26, -104, -29, -8, 56, 53, -30, 71, 46, 50, 79, -106, 93, 28, -26, 118, -57, -18, 126, 47, -5, 82, 62, -60, 110, -1, -18, 78, -58, -24, -33, 44, -89, 109, 105, 110, 10, 83, 96};\n        b[152] = new byte[]{58, -120, -107, 102, -117, 8, -8, -95, -76, 17, -108, -18, -7, 106, 71, -18, 66, -120, 75, 25, -114, -41, 52, 88, 105, 35, -52, 4, -59, -76, 3, 36, 98, 11, 104, -103, 84, 73, 14, 50, 34, -89, -41, 101, -49, -88, -128, -46, 91, -7, 21, 3, -97, 28, -66, -1, -14, -79, 48, 51, 40, -76, -18, -17, -59, 40, -6, -59, 92, 37, -19, -64, -76, -73, 96, 120, 15, 111, 57, 17, 68, 45, 51, -8, -65, -48, -48, -2, 96, 38, 122, 23, -73, 55, -52, 100, -7, 84, -53, 99, -84, 71, 90, 46, -97, -30, 63, 92, 76, 53, -65, 4, 60, -119, 72, 52, 88, -45, 74, 24, -96, 121, 111, -98, 56, 7, -93, -128, -121, 6, -115, 44, 48, 104, 23, -36, 44, 28, -100, -83, -95, -92, -63, 85, -76, 31, -9, -88, -7, 122, -65, 108};\n        b[153] = new byte[]{-9, -74, 85, -79, 54, 48, 15, -59, 107, -128, -35, 69, 56, -124, 89, -14, 57, -68, 56, -56, 43, -60, 109, -24, -43, -94, 104, 98, -45, -43, 89, 122, 125, 114, 56, -27, -127, 122, -109, 49, -107, 108, -95, 106, -9, -90, -66, -23, -71, -36, 62, 45, -118, 53, 18, 60, -9, 38, -104, -108, 60, 122, -106, 113, -99, -113, 90, -75, -84, -20, -12, 117, 106, 70, 6, -69, 7, 66, 4, 118, 47, 8, 100, -36, 101, -127, 94, -1, 43, -75, 0, 31, 48, -25, 54, 44, -105, 87, -119, 71, -114, 96, -46, -19, 67, -107, 119, -15, -28, 21, 0, 83, 55, 56, -56, -112, -29, 115, -113, 11, -77, -83, -101, -97, -53, 116, 16, -98, -2, -33, 75, 22, -62, 39, -22, 42, -20, -10, 16, 122, 108, -86, -99, 99, -2, 35, 37, -61, 50, -119, 26, 49, -124};\n        b[154] = new byte[]{-48, -44, -104, 41, 59, -63, 40, -94, 39, -64, -65, 79, 39, -6, 86, 81, 101, 87, -30, 8, -59, -34, 40, 44, 3, 106, -86, 64, -53, 17, 123, 13, 37, 35, 82, -36, 8, 29, 124, 120, 96, -104, -109, 64, 39, -55, 64, -98, -9, -36, 57, -107, 97, -58, 21, 67, 12, 120, 126, -125, 101, -56, -128, -54, 85, -122, 120, 57, -11, -12, -105, 115, 84, -28, -34, -68, 21, -92, -36, -78, 46, -116, -115, 70, -66, -63, 1, -34, -123, 106, 127, 102, 101, -12, -122, 94, 12, 96, -109, -29, -26, -48, 40, 21, -81, -127, -59, -57, -113, 43, 25, 126, 121, -1, -25, 63, 87, -49, 78, -86, -84, -6, -102, 115, -110, -33, 75, 126, -97, 13, -52, 39, -110, -75, 24, 65, 96, -20, 47, 98, 36, 123, 125, -128, 46, 99, -89, -111, -64, -29, 54, -83, 65, -96};\n        b[155] = new byte[]{-26, -119, 62, -83, -126, 56, 44, 40, 6, 107, 106, 108, 25, 67, 127, 125, -39, 19, -38, 4, 4, 78, -128, 125, 29, 24, -123, 93, 10, 94, -39, -121, 16, -68, 67, 118, -49, -74, 37, 36, 33, 19, -57, -120, -46, 91, 13, 58, -89, -106, 60, -75, -105, 41, -45, -55, -88, 40, -42, 48, 80, -98, 52, 14, -13, -23, 26, 80, -58, -5, 5, 41, 22, 16, -72, -110, 71, -24, -22, -8, -6, 78, -80, -93, -25, 42, 22, 38, 46, 67, -6, -89, 96, 31, 100, -12, 37, -27, -116, -13, 71, 24, 55, 70, -20, 58, -57, -83, 117, -86, -115, -124, 51, -115, -107, -123, -39, -38, 85, 88, -109, 37, 82, -1, 12, -16, -16, -82, 113, 95, -50, -60, 90, 75, 112, 59, 1, 106, -1, 38, 33, -71, 96, -104, 39, -47, -103, 47, -76, 46, 14, 42, 73, -116, 65};\n        b[156] = new byte[]{40, 124, -45, 106, 85, 61, -64, -12, -89, 34, 56, 121, -125, 71, -121, -117, 81, -44, 104, 91, -97, -60, -102, 87, -90, 48, -34, -48, -35, -16, 16, -94, 13, -87, -72, 51, -123, -72, -9, 41, -2, 42, 90, 54, -10, 119, 80, 62, -48, -55, 110, -10, -42, 5, -2, 64, 61, 56, -40, -35, 107, -104, -40, 125, 24, 2, 30, 110, 102, 82, -72, -44, -47, 48, 50, 79, -79, 16, 21, -99, -82, -23, 97, 74, -2, -63, 71, 63, -17, -78, 112, -108, 36, -14, 78, -54, 44, -11, 22, 3, -109, -106, 73, -52, -75, 16, -17, -99, 96, 94, 29, -46, -66, -118, -28, -17, -69, 31, -6, -23, -110, 124, 77, -24, -49, 69, -108, -1, 44, 31, -51, -61, 92, -83, 82, 119, -27, 23, 47, 125, -125, -5, -121, -27, 23, -97, 52, 21, -90, 121, 7, 116, -28, -57, 119, 71};\n        b[157] = new byte[]{70, -78, 85, -60, -126, -88, 13, 123, 66, -66, 37, -116, -65, -12, -105, 48, -18, 54, 14, 126, -108, 88, -30, -125, -53, 104, 97, -40, 4, -105, -78, -60, -12, 123, -31, -70, -101, -79, 117, -37, 125, 34, 37, 105, 68, 55, 76, 1, 71, -54, 126, 6, 84, -35, 6, 20, 43, -97, 110, 116, -9, -61, -9, 43, 94, -85, 6, 102, 105, -49, 15, -7, 118, 103, -84, 32, -100, 97, 96, -10, -116, -32, 104, -102, 58, 12, -19, 22, 59, -110, 113, 56, 36, -103, 93, 9, -105, -5, -39, -11, -32, -105, 116, 69, 77, 33, 39, -105, -112, -120, -79, 51, -118, 108, -79, 49, 110, 81, 94, -49, 99, -11, 41, -51, -40, -7, -26, -80, -54, 24, -70, -11, 121, 62, -64, 21, 84, -115, 63, 125, 15, -124, -65, 51, 102, -49, 12, 0, -38, -118, 5, -30, -127, 4, 59, -19, -61};\n        b[158] = new byte[]{-77, 46, 45, -26, -79, 64, -17, -111, -111, 4, 79, -125, -87, -81, 108, 67, 24, -49, -106, -30, -83, -4, -103, -60, 99, -98, 32, -72, 121, -54, -87, -57, 38, -57, 113, -58, -117, 34, 116, -115, 64, 62, 122, -34, 23, 59, -59, -32, -21, -36, 2, 3, -36, 85, -60, -106, 80, 47, -67, -13, -13, 73, -107, 124, -121, -8, -36, 114, 10, 59, 24, 49, 79, 98, 35, 27, -79, 10, 48, -32, -1, -85, 30, -115, -100, -60, -17, 123, -128, 107, -54, 8, 11, -75, -78, -48, 81, -28, 95, -122, -72, -112, 121, -114, -31, -21, -101, 67, -10, 39, -85, -123, -57, 23, -95, 112, -23, 26, 121, -127, -97, -39, -74, 5, 3, -5, -13, 47, -112, -123, -50, 30, 34, -58, -73, 45, -52, 91, 64, -107, 8, -62, -11, 17, -116, 90, 127, -82, 3, 3, -18, 88, 78, 45, -70, 26, -1, 102};\n        b[159] = new byte[]{102, -49, -63, 124, 90, 22, 34, 102, 26, -69, 103, 89, 45, -66, -55, -99, -25, -109, 66, -98, -20, 67, 78, -78, -94, 113, 42, -47, -122, -72, 4, -45, -119, 27, 47, -7, 116, 97, -8, -38, -116, -19, -48, -6, 79, -40, -122, 127, 75, -97, 23, -19, -21, 21, -127, -50, -93, 3, 92, -73, 5, -52, 99, -36, -61, -24, 14, 52, 9, 73, -111, -59, 18, -44, 119, 27, 125, 83, -15, -31, 121, 58, -109, -43, 11, -121, 112, -10, -49, 92, -106, 89, 76, -45, -101, 111, 113, -23, -84, -80, -73, 92, 119, -50, 84, 63, -4, 65, 104, 58, -26, -92, 9, 124, 100, 52, -100, -17, 124, -33, -108, -83, -25, 39, 15, 30, -48, 116, 5, 98, 123, 77, -98, 86, 79, 23, 44, -78, 4, -79, -25, 47, 39, 27, -24, -103, 111, -85, -79, 118, 58, -86, -39, 71, -31, 87, 102, 114, -9};\n        b[160] = new byte[]{-123, -41, -125, 38, -28, 103, -103, -65, 42, -12, 70, 30, 115, -49, -97, -70, -44, -1, 10, -6, -95, -90, -86, 20, 118, -39, -122, -24, 77, -11, 70, -74, 9, 14, -49, 122, 51, -107, -97, -98, 15, 116, 32, 74, -85, -99, -58, 94, -30, -75, 88, 14, -121, 17, 100, -83, -73, 118, -6, -83, 37, -93, -31, 77, 64, 87, 94, 30, 54, 35, 35, 37, 82, 122, -24, -21, -46, -120, -5, 78, -7, 22, -10, 24, -62, 5, 90, 81, -35, 116, -81, -79, 49, 88, -50, 89, -20, 48, -112, -37, 31, 19, -101, 89, -98, 43, 102, 2, 76, -7, 5, -43, 85, -41, 123, 25, 117, 82, 54, 2, -99, 20, 46, 67, 26, 105, 118, -118, 97, 51, 10, -24, 36, -81, 21, -86, 82, 91, 20, 91, 37, 114, 20, -46, 4, 91, -120, -17, 8, 28, 119, 47, -97, -4, -79, -52, 108, -53, 46, -79};\n        b[161] = new byte[]{10, 80, -126, 58, -3, 38, 15, -33, -1, 45, 29, 14, -118, -63, -33, 106, 108, 92, 78, -7, -91, -64, -62, -32, 0, -124, 45, -34, 22, -50, -115, 19, -28, 95, 1, 32, 104, 60, -49, -46, -18, -117, 55, -64, 77, -63, -45, -107, -61, -30, -31, -83, -68, -52, 35, -52, -48, -52, 123, -24, -18, 97, -113, -111, 2, 2, 121, -24, -90, -1, 31, -79, -104, 99, -48, -74, 101, -89, 95, 16, -106, -120, -67, 110, 127, -1, 30, 71, -107, -82, -53, -47, 43, -14, -55, 19, 7, -54, -58, -29, -5, -101, 111, 107, 44, -68, 41, 46, 108, -26, -49, 2, 67, 18, 58, 1, 103, 95, -43, 45, -58, 112, -115, -29, -23, -52, 53, 93, -81, -66, 126, 49, 49, 52, -81, -67, 12, -104, 89, -20, 31, -98, 83, 100, 126, 84, -14, -67, -83, 94, -92, 79, 81, 85, 109, -111, -87, 27, 73, -118, 70};\n        b[162] = new byte[]{22, -49, -128, -104, 80, -89, 82, -65, -30, -101, 15, 3, -48, 106, 77, -119, -46, 15, -10, -84, 22, -13, 36, 64, -50, 107, 106, 61, 47, -81, 79, -87, -7, 83, -122, 5, 65, -54, 96, 111, 57, -21, 96, -18, 19, 62, -87, 21, 23, 106, 51, -42, 106, 96, 45, -126, 32, -57, -5, -74, 94, -54, -19, -106, 49, -105, -29, -94, -33, 99, -61, -78, 80, -10, -80, -29, -9, 90, -33, -60, 6, -98, 10, 8, -107, 45, -100, 55, 77, 92, -128, -35, -34, 125, 40, -52, -106, 118, 69, -93, 92, 124, 79, -38, 116, 54, 125, 72, -127, 24, 30, -68, -25, 121, 123, 53, 84, 47, -75, -99, 99, -73, -98, -120, 77, 105, 93, 119, 6, 6, 0, -40, -97, -77, 67, 66, -104, 116, 116, 46, -121, 14, 80, 98, 75, -34, 91, 12, 87, 25, -5, -95, 88, -118, 1, 56, 91, 38, -23, -80, -31, -53};\n        b[163] = new byte[]{-62, 3, -72, 13, -47, -103, -53, -40, 53, -36, -117, -114, -122, 66, 70, 37, -60, -24, -56, -69, -126, 5, 89, -67, 79, -9, 60, -87, -114, 13, 58, 23, -107, 83, 83, 86, -38, 15, 44, 60, -118, 62, 70, 33, 44, 73, 36, -4, -77, 30, -66, 38, 31, -64, -2, 70, -126, -59, -117, -55, -12, 43, 32, -100, 24, -39, 48, -59, -111, -79, -35, -4, -36, 118, 64, -96, -101, 100, -57, 2, -81, -54, -121, -105, -49, 48, -2, -90, -31, 111, -88, -92, 1, 16, -86, -27, 4, 76, 31, 125, 120, 75, 14, -127, 80, 1, 109, -78, 113, -117, 65, 27, 59, 101, -48, 107, 20, -74, -125, -88, 111, 105, -17, -18, 39, -89, -57, 92, 67, -24, -93, 89, 53, -84, 88, -57, 99, -101, 68, 6, 18, -3, -17, 11, 75, 122, 96, -27, -39, 46, -12, -61, -63, -89, 85, -11, -38, 111, 25, 33, 116, 64, 107};\n        b[164] = new byte[]{18, 69, -19, -45, 100, -102, 69, 66, 35, 22, 106, 11, -57, 35, -70, 55, -24, 34, 47, -120, -128, -31, -10, 52, 19, 22, -88, -6, 104, -32, 17, -10, 126, 90, -2, -80, -9, -111, -105, 28, 18, 53, -58, 86, 12, 84, -71, 14, 114, 123, -67, -99, -21, 28, -67, -59, -48, 31, 67, -85, -88, -65, 110, 126, -118, -60, 81, 49, -109, 74, 13, -100, -117, -82, -26, -32, 106, -16, 2, -68, -116, -53, -18, 94, 82, -114, -5, 67, -111, -87, 88, -89, -20, -125, -55, -61, 108, 63, 26, -34, 5, 8, -1, -47, 4, -46, -64, -115, -89, -69, 76, 104, -84, 40, 39, -98, -100, -58, 22, -58, -35, 50, 88, -90, -91, -109, -90, -83, -1, 75, 122, -69, -21, 31, -73, 17, 50, -2, -49, 24, 122, 16, -56, 124, 48, -109, -33, 89, -62, 49, -108, 52, -69, 122, -14, -86, 116, -8, 18, -45, 66, -96, 82, -39};\n        b[165] = new byte[]{58, -32, 106, -57, -110, -59, 38, -70, 17, 108, 57, -8, -41, -18, 26, -52, 81, -27, 42, 12, 58, 108, -56, 27, -79, 17, -102, 43, -43, 39, 62, -8, -71, -59, -7, -107, -31, 34, -48, -39, -116, -56, -122, -118, 70, -117, 81, 121, -20, -66, -81, 42, -23, 26, 91, 69, -27, 22, 79, -59, 127, -108, -35, -28, -125, 2, -19, 79, -92, -67, 114, -91, 127, -57, -58, 32, -124, 60, 21, -95, -56, -46, -10, -56, 95, -49, 78, 38, 80, 106, -108, -128, -86, 126, -44, -115, -119, 84, 113, -75, -95, 62, 104, 40, 116, -84, 26, 3, 126, 3, -16, -72, 47, 42, 4, 45, -76, 35, 83, -73, 100, -69, -118, 125, -27, 21, 26, 67, 14, 44, 69, -98, 100, -76, -70, -102, 103, 39, -35, -60, -124, 70, 63, 104, -3, -47, 37, -15, 6, 48, 66, -8, 71, -7, 81, -70, 97, 97, 127, -1, 41, 34, -43, 91, -68};\n        b[166] = new byte[]{72, -17, -17, 14, -54, -103, 13, -46, 38, 57, -47, -11, -10, -58, 72, -20, 85, 21, -122, 92, 117, 16, -115, 23, 70, -65, 0, -83, 59, -128, 27, -111, 124, 44, 50, -69, -24, 23, 45, -40, 46, -33, 93, 53, 40, -62, 41, 87, -100, -107, -95, 67, 27, -37, 26, 43, -91, -111, 65, -110, -71, 88, -43, 63, 93, -77, 105, -49, 91, 74, 20, 105, -81, 82, -9, -71, -57, 94, -18, 125, 95, -9, 47, -51, 112, 114, 66, -63, -38, -109, 46, -82, -47, 99, 40, 8, -75, 14, 41, -91, 1, -94, 63, -40, -41, 127, 96, -25, -2, -87, -107, 101, -108, -31, -7, 38, 55, 1, -112, -120, 75, -29, -107, -93, 98, -64, -119, -126, 71, 90, 124, -13, -95, 127, 25, -73, -25, 78, 98, 35, -128, -3, -108, 10, 102, 39, -107, 38, 87, 60, -110, -49, -74, -58, -90, 15, 15, -98, 94, 31, 70, -19, 102, 126, 97, -52};\n        b[167] = new byte[]{-75, -110, -1, -88, 0, -116, 59, -44, -77, -102, 2, 97, 89, 3, 44, 108, -88, 4, -26, 83, -64, 17, -68, 103, -36, -44, 123, -25, 78, 34, -106, 0, 43, 71, -56, -5, -70, -3, 74, 23, -114, -82, 67, 40, -21, -112, 73, -14, 6, -118, -26, 96, 31, -6, -100, -79, -91, 30, 27, 122, -40, -124, 31, -76, -58, 31, -26, 1, -23, 28, 87, -45, -66, -23, 17, 40, 95, 59, -37, -52, -120, 96, 0, 24, 28, -12, 63, 90, 49, -13, 29, -43, 82, -87, 66, 106, 23, 102, -68, 68, 78, -110, -66, -10, 62, 41, 34, -106, 44, -59, 55, -122, 57, -11, 127, -89, 106, 95, -97, 125, -123, -128, -5, 2, 118, -49, 25, 58, 69, 40, 53, 57, -80, -79, 78, 93, -69, -78, -99, 77, 108, 61, 72, 79, -7, -82, 7, 122, -1, 114, 53, 78, -102, -76, -80, -24, -32, 41, 23, -3, -118, -73, 21, -70, 86, 86, -28};\n        b[168] = new byte[]{25, 23, -69, -72, 93, 112, 31, -97, -5, -44, 29, -17, -104, 97, 126, -92, -35, -57, -12, -14, -114, -42, -46, -16, -78, 118, -12, 15, -113, -49, -101, -77, -18, -28, -96, 30, -32, -25, -34, -106, 71, -59, 32, 24, 50, -114, -22, 25, -82, -105, -124, -112, 102, 103, 111, -22, -97, -8, -87, -5, 42, -35, 97, 15, 6, 43, -4, -58, -3, 123, 11, -80, 57, 123, 27, 34, -110, -48, 50, 7, -31, -48, -114, 87, -80, -6, -42, -95, -57, 110, 87, 57, -2, -69, -9, 38, -35, -54, -12, 103, 93, 115, -77, 29, 0, 102, 52, -22, -66, -55, 64, 10, 64, -22, -118, -85, -104, -29, 82, 97, -76, 103, 92, -37, 100, 66, -68, -122, 40, -101, 105, 126, -49, 51, 8, 51, 32, -113, -80, 119, -126, 72, 29, 76, 6, -17, 4, 88, -83, -30, 63, -76, -125, -35, -43, -83, -73, 12, -52, -125, 76, 90, -98, -125, -61, -126, 77, 20};\n        b[169] = new byte[]{-16, 16, -59, -69, -19, -67, -106, -101, 101, 25, 40, -36, 101, -18, -32, -123, 102, -108, -128, -116, -37, -71, 74, 76, -27, 112, -59, 110, -46, 85, 64, -15, 29, -35, -80, 4, -47, -63, -111, -107, 1, 61, 18, 18, -105, -117, -110, 127, 34, -55, 24, 54, -76, 55, -25, -69, 65, -124, 15, -108, 52, 51, 87, 10, 38, -45, -40, 6, 70, -89, 53, -128, 115, 1, 58, 116, -1, -75, -32, 91, -111, 47, -111, -79, -86, 31, -19, 122, -29, -40, 42, -66, 72, 34, 126, -52, -35, 38, -32, 59, 39, 33, 103, 50, -56, -20, 113, -126, -67, 88, 65, 82, 34, 65, -69, -54, 43, 35, 117, -90, 0, -123, 92, 82, 16, 44, 48, 97, -20, 22, -9, -100, -109, -10, 66, 93, 0, 62, 82, -81, -42, 86, 117, -75, 84, -37, 58, -123, 41, -120, -122, -64, 5, 115, -99, 106, -78, 107, 16, 43, 78, -13, -39, 106, 109, -57, -118, -47, -113};\n        b[170] = new byte[]{-78, 35, -46, 92, 62, 46, -33, -91, -104, -75, 59, -17, 15, 52, 101, 20, -8, -82, 100, -55, -47, 115, 58, -53, -35, -32, 53, -25, -34, 121, 36, 48, -100, -21, -11, 118, 10, -5, -70, -101, -15, -49, 59, -94, 113, -94, 12, 78, -47, -90, 19, 103, -101, 94, -115, -128, -50, 33, -104, 1, -53, -115, 3, -127, 70, 76, -88, -14, 118, 34, -106, 35, -78, 101, 27, -114, 50, 84, -14, -17, -50, -89, 8, 76, -94, 126, 118, -26, 109, -17, -48, 70, 37, -65, 40, -10, 66, -99, -23, -64, 82, -125, -110, -7, -36, 43, 118, -115, -116, -35, -54, 105, -91, -6, 30, -30, 50, -22, 76, -86, -80, 57, 116, 5, 49, 39, 7, -104, -119, -56, 114, -47, 4, 41, 30, -50, 116, -54, -45, 95, 110, -29, -58, 31, -78, -68, -10, -96, 107, -103, 113, 108, -51, -113, -97, -17, 40, -57, 113, 64, -8, -78, 39, -47, 7, -54, -116, 124, 2, -71};\n        b[171] = new byte[]{-5, -3, 120, 62, 113, 80, 85, -98, -63, 76, 114, -108, -66, 68, -19, 70, -74, 18, -19, 105, -49, 52, 62, 96, 103, -106, -14, 50, 21, 43, 12, -71, 9, 107, -91, 15, 5, 94, -13, -46, 122, -61, 50, 39, -60, -93, -9, 80, 125, 74, -73, 18, 48, -94, 27, -84, 70, 86, 26, -44, -68, 12, -32, -58, -93, -112, 101, 53, -75, 99, -38, 125, 51, 66, -106, 91, -31, 52, 94, -16, -112, -90, -111, -59, -90, -29, 42, 23, 91, -40, -80, 93, 14, 15, -96, 12, -120, 79, 73, -76, 105, -42, -77, 114, 92, 105, 99, -1, 92, 17, 127, 10, -8, 80, -108, 81, -101, 30, 45, -33, 110, -80, -1, -123, -92, -60, 6, 121, -87, 37, 96, 96, 49, -46, -85, -119, -73, 91, 92, 123, 65, 72, 86, 118, 51, 48, -105, -39, -32, -19, -58, -128, -35, 69, -47, 21, 26, -50, 47, -2, -81, 32, 84, 20, -66, 90, -55, -39, -35, 52, -59};\n        b[172] = new byte[]{-33, 82, 53, -115, -81, -127, -7, -86, 41, 42, 76, -19, 27, 50, 88, -68, -111, 22, 2, -56, 114, -96, 0, 21, -25, 43, -34, -32, -71, -49, -46, 71, 72, -103, 68, 26, 84, 68, -46, -70, -114, 66, 12, -122, 43, -17, 51, 60, 48, 32, -11, 121, -125, -23, 46, 39, 38, 26, 112, 62, 11, -35, -69, -93, -44, 6, 1, 82, -9, 114, -45, -65, 12, 37, -95, 54, 41, -42, -20, -39, -98, 96, -125, 62, -93, -121, 98, 40, 25, 3, 62, 49, -26, 73, 102, -66, -98, -82, 39, -81, -24, 14, 106, -98, 2, -73, 2, -10, -63, 109, -127, -27, -118, -83, -37, -86, 74, -128, -33, 110, 1, 78, 66, -103, 50, -10, -22, 22, 5, -128, -63, 14, 101, -6, -28, 67, -75, -35, 96, 108, -74, 8, -33, 17, 36, -71, -93, 121, 33, 85, 84, -48, 70, -4, 84, -38, 43, -69, 105, -69, 45, 11, 65, 41, 36, -93, -84, 28, -52, 22, 6, 122};\n        b[173] = new byte[]{93, -76, 95, 14, -95, -98, -35, -25, -120, -42, -47, -15, -15, 73, -49, -99, -32, -63, -25, -77, 124, 85, -28, -110, -51, 124, -43, 8, -44, -96, -60, -31, 31, 119, -89, 127, -70, 126, 66, 15, 17, -58, -6, 110, 48, -34, -46, 27, -75, 41, 50, -31, 29, -66, -52, -63, 126, 75, -105, 17, -67, 51, -80, 103, -5, -34, 122, 6, 45, 44, -92, -15, 3, 73, -107, 121, -43, -117, 22, 71, -31, -2, -2, 13, -128, -14, 126, 52, 69, 62, 115, 41, 91, 73, 38, 75, 1, -32, 104, 124, 59, -24, 39, 9, -40, 42, -24, -51, -40, -95, 90, -16, -15, -128, -58, -67, -40, -14, -68, -73, -87, -39, 18, -16, -26, -11, 102, 33, -40, 2, 98, -17, 41, 47, 108, 25, -65, -17, -115, 59, -47, -53, -26, -72, 67, -71, 14, 122, -101, 38, -20, -10, 34, -78, 41, -54, 122, 80, 64, -68, 57, -29, -106, 46, -65, -108, -21, -83, 26, -73, -89, -115, 126};\n        b[174] = new byte[]{-116, 97, 35, -4, 6, -127, 121, -10, -100, -10, -29, -100, -104, 107, -114, -10, 113, -2, 55, -20, -52, -80, 46, 42, 1, -18, -103, 80, 67, 12, 33, 119, 83, 26, 116, -106, -105, -75, -19, -45, -7, -54, -85, 35, -93, -35, -111, -10, -29, -47, -16, -112, -97, 27, -97, -112, -66, -47, -68, -50, -91, 13, 94, 3, 115, -15, 18, -82, -111, 124, -93, 43, -116, 114, 79, 38, 100, -39, 94, -76, -124, 73, 56, -33, -113, 122, 13, 45, 79, -62, -86, -96, -50, -87, -33, 51, -99, 56, 13, -22, 123, -25, 81, -48, -98, 74, -46, -52, -121, -42, -26, 88, 93, 126, -48, 109, 117, -100, 60, 32, -24, 100, 22, 89, 13, 51, -115, 80, -45, -85, -104, -5, -95, -59, -36, 20, -20, -108, 114, -19, 28, -54, 94, 88, 13, -59, 15, -46, 45, -90, 3, 98, 110, -106, 82, 39, 83, 107, -127, -75, -18, -25, 78, -121, -110, 24, 29, -59, 39, 18, -82, 120, 22, -17};\n        b[175] = new byte[]{68, 12, -51, 11, 25, 79, -39, 47, -4, 45, -10, -58, -74, 84, -125, 74, 26, 49, -15, -60, -96, -104, -109, 14, 115, 108, 79, 22, -49, 30, -127, -107, 73, -117, 9, 102, -99, 45, -38, 5, 98, -113, 69, -74, -15, -111, -104, -107, 85, -119, 110, -32, 99, 73, 55, 6, -24, 113, -50, -99, -126, -71, 118, -16, 117, -64, -79, -120, -92, 19, -100, 48, -95, 13, 76, 120, -30, 86, 83, 124, -13, 22, 38, 4, 54, 30, -46, 44, 20, 31, -115, 83, -48, 30, -25, 28, -74, -65, 15, -23, 25, 123, 96, -66, 112, 29, -49, -102, 11, -23, -67, -39, 29, -37, -97, 57, -71, -82, -99, 79, 120, 121, -69, -69, 60, -74, -119, 69, 13, -47, -56, 31, 111, 2, 120, 22, -70, 87, -123, 83, 19, -80, 5, 41, 77, -72, 53, -5, 77, -5, 17, 103, 6, 58, -20, 98, -81, -121, 70, -37, 16, 95, -128, -20, 26, -7, -24, -59, 30, 76, 59, -53, 66, -42, 71};\n        b[176] = new byte[]{-45, -56, 102, 102, -101, 65, 24, -94, -86, 71, -92, 51, -12, 99, 92, -39, 105, 53, 122, -40, 20, -4, -86, 32, 110, 35, -48, -104, 8, 121, 33, 121, 83, 5, -49, 123, 14, -31, 19, -96, -66, 1, 111, -49, 61, -99, -13, -101, 85, 15, -42, 122, 89, -94, 9, 47, 48, 18, 52, -127, 118, 105, -27, -110, 69, 59, -3, -66, 84, 79, 115, -8, -109, 90, 65, -23, -100, 79, 31, -44, 37, 118, 62, 90, 107, 57, 0, -1, 32, -101, -46, 76, -61, 124, -103, 92, 116, 83, -95, -43, -32, 28, -69, -110, -17, -63, 53, -50, -117, 57, -113, -62, -64, -17, 36, 73, -50, -111, -96, -39, -84, -95, 18, 102, -56, 108, 29, 77, -128, -24, -52, 122, 107, 9, 61, -2, -118, -33, -22, 32, 101, 36, 116, 8, 32, 125, -27, -30, -115, -37, -42, 12, 118, 76, -42, -1, -123, 72, 29, 2, 92, 45, 64, 56, 111, 40, -19, -20, -112, 29, 15, 75, -22, -36, 88, 12};\n        b[177] = new byte[]{-48, 104, 107, -127, -76, -110, 28, -14, -42, -73, 36, -74, -102, 116, -79, -84, -48, 35, -3, -36, -85, 21, 7, 49, 34, 3, -29, 79, -65, -69, -15, 38, 117, 101, 49, -100, -45, 123, -20, -102, 86, 120, 103, -10, -50, 59, -50, 4, -9, 34, -101, -107, -94, 57, 117, 33, -43, 94, -68, 121, -20, -67, 36, -118, 66, -4, -74, 2, -126, -80, 9, 20, 52, -19, -27, -1, -116, -17, -28, 87, -62, -83, 20, -32, 27, 30, 44, 21, 49, 65, -44, -45, 92, 45, -52, 26, -126, 75, -59, -51, -41, -69, -21, -128, -29, 98, 104, -8, 97, -104, 88, -79, 116, -103, 9, 82, -94, -46, -21, -71, 51, -57, -23, -128, 96, -39, -11, 67, 18, 21, 29, 52, -15, -58, -31, 104, -118, 5, 45, 100, -128, 54, -88, -115, 37, -124, -81, 77, 6, 97, 25, 103, -53, -76, -125, -58, 44, -33, -96, 32, -29, 28, 104, -88, 113, -43, -66, 111, -125, -93, -104, 75, 62, -110, 112, 3, 63};\n        b[178] = new byte[]{-39, 81, -94, 49, 95, -33, -38, 19, 89, 2, 60, 55, 125, -41, -121, -57, -4, 17, 33, 92, -34, 63, 77, 124, -107, -100, -89, -49, 4, -78, 72, 111, -13, 64, 28, 114, 70, 104, -73, 98, 98, -107, 102, 104, 119, 104, -101, -89, -70, 42, -90, -67, -37, 116, -112, -98, -91, 95, -77, 60, 5, -88, -40, 28, -16, -127, -110, -94, 78, -57, -54, 15, 39, -14, -75, -96, 0, -15, 86, 9, -38, -67, -98, -67, 116, -90, 43, 75, 47, 127, 62, 110, -84, 31, 24, -59, -83, -44, -77, -11, 55, -91, 80, -81, 108, -126, -127, 83, 89, 46, -122, -58, 12, -42, 18, -91, -47, 4, 48, -23, 25, 73, -20, 53, -76, -124, 113, 98, -49, 41, 82, -51, 54, -122, 0, 114, 91, 88, -9, -62, 89, 104, -44, -103, 5, 119, 41, 107, -47, 94, 72, -34, -20, 85, 78, 55, -85, 98, 4, 112, 60, 119, 102, 66, 115, 68, -102, 101, -2, 86, -5, -97, -24, -81, 51, 5, -1, 57};\n        b[179] = new byte[]{-120, -60, -126, -121, 89, -71, -67, -53, 119, 11, -78, -60, -97, -100, 10, 69, -117, 90, -105, 59, -58, -22, -110, -102, -124, 109, 125, -83, 54, -6, 103, -38, -69, -7, -69, -125, -80, -62, -7, -56, -50, -115, -88, 59, -24, 87, 27, 119, 14, -2, -54, 71, 7, 82, -33, 17, -65, 63, 38, -5, 108, -111, -81, 67, 102, -72, 22, 20, 103, 77, -82, 7, -68, -5, -27, -35, -54, 73, 116, -56, 2, 10, -5, 23, 121, 117, -24, 48, -66, 41, 31, 49, 101, -92, -3, 27, 54, -61, 40, -70, -103, -95, 67, 73, 33, 1, 110, 117, 60, 10, -8, 7, 94, -71, -69, 92, -71, 80, -70, 107, -69, 17, 62, 116, 108, 127, 28, -107, 16, -56, -57, -58, -124, -28, -103, -26, 48, -54, 43, 16, -7, 76, -42, 16, -112, 49, 24, -37, -59, -22, -106, 126, -123, -113, -57, 110, -51, 2, -13, 48, -120, 18, -96, 63, 10, 25, -110, -125, -14, 57, -70, -3, -1, 21, -62, -9, -8, -36, -47};\n        b[180] = new byte[]{-124, -34, 62, -57, -5, 10, -12, 84, 89, -97, -103, 101, 107, 14, -1, 92, 49, -80, -122, -35, -63, 112, -116, 64, 20, -2, 9, -96, 106, -107, 64, 44, 60, 115, -110, 14, -107, 42, -118, 16, -27, 98, 98, -53, 53, -102, 123, -28, -93, -87, 21, -83, -51, -94, 48, 64, 60, -121, -60, 108, -80, -98, 29, 36, 26, 69, 13, -97, -37, -111, -24, 66, -54, 20, 38, 90, -101, 41, 102, -48, 47, 68, -34, 125, -102, 62, -89, -57, 68, -127, -126, 86, 6, 113, -61, -14, -82, 125, -34, -46, -21, -17, 24, -98, 103, 98, 104, -45, 3, -72, 42, 7, 70, 62, 20, 81, -128, 99, 8, 0, 59, 126, 57, -118, -100, 83, -84, -63, 108, -100, -97, 26, -9, 93, -58, -50, -102, 27, 37, -41, 7, -117, 14, 97, 126, -90, 10, -38, 42, -88, -15, 36, -13, 86, 88, -38, 24, -57, 57, 89, 44, -49, -21, -37, -59, 13, 49, -46, 75, 127, 88, 73, -10, -60, -13, -35, 19, 60, 24, 38};\n    }",
        "begin_line": 264,
        "end_line": 363,
        "comment": " Here are the randomly generated byte[] arrays we generated to exercise commons-codec-1.3.jar ",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 27)",
            "(line 266,col 9)-(line 266,col 28)",
            "(line 267,col 9)-(line 267,col 31)",
            "(line 268,col 9)-(line 268,col 36)",
            "(line 269,col 9)-(line 269,col 40)",
            "(line 270,col 9)-(line 270,col 44)",
            "(line 271,col 9)-(line 271,col 51)",
            "(line 272,col 9)-(line 272,col 55)",
            "(line 273,col 9)-(line 273,col 58)",
            "(line 274,col 9)-(line 274,col 63)",
            "(line 275,col 9)-(line 275,col 68)",
            "(line 276,col 9)-(line 276,col 70)",
            "(line 277,col 9)-(line 277,col 79)",
            "(line 278,col 9)-(line 278,col 79)",
            "(line 279,col 9)-(line 279,col 93)",
            "(line 280,col 9)-(line 280,col 94)",
            "(line 281,col 9)-(line 281,col 100)",
            "(line 282,col 9)-(line 282,col 104)",
            "(line 283,col 9)-(line 283,col 326)",
            "(line 284,col 9)-(line 284,col 327)",
            "(line 285,col 9)-(line 285,col 330)",
            "(line 286,col 9)-(line 286,col 340)",
            "(line 287,col 9)-(line 287,col 339)",
            "(line 288,col 9)-(line 288,col 348)",
            "(line 289,col 9)-(line 289,col 333)",
            "(line 290,col 9)-(line 290,col 367)",
            "(line 291,col 9)-(line 291,col 357)",
            "(line 292,col 9)-(line 292,col 369)",
            "(line 293,col 9)-(line 293,col 378)",
            "(line 294,col 9)-(line 294,col 366)",
            "(line 295,col 9)-(line 295,col 365)",
            "(line 296,col 9)-(line 296,col 393)",
            "(line 297,col 9)-(line 297,col 379)",
            "(line 298,col 9)-(line 298,col 387)",
            "(line 299,col 9)-(line 299,col 383)",
            "(line 300,col 9)-(line 300,col 408)",
            "(line 301,col 9)-(line 301,col 415)",
            "(line 302,col 9)-(line 302,col 408)",
            "(line 303,col 9)-(line 303,col 592)",
            "(line 304,col 9)-(line 304,col 588)",
            "(line 305,col 9)-(line 305,col 604)",
            "(line 306,col 9)-(line 306,col 602)",
            "(line 307,col 9)-(line 307,col 604)",
            "(line 308,col 9)-(line 308,col 613)",
            "(line 309,col 9)-(line 309,col 628)",
            "(line 310,col 9)-(line 310,col 616)",
            "(line 311,col 9)-(line 311,col 626)",
            "(line 312,col 9)-(line 312,col 630)",
            "(line 313,col 9)-(line 313,col 642)",
            "(line 314,col 9)-(line 314,col 653)",
            "(line 315,col 9)-(line 315,col 636)",
            "(line 316,col 9)-(line 316,col 655)",
            "(line 317,col 9)-(line 317,col 666)",
            "(line 318,col 9)-(line 318,col 653)",
            "(line 319,col 9)-(line 319,col 675)",
            "(line 320,col 9)-(line 320,col 673)",
            "(line 321,col 9)-(line 321,col 680)",
            "(line 322,col 9)-(line 322,col 684)",
            "(line 323,col 9)-(line 323,col 673)",
            "(line 324,col 9)-(line 324,col 691)",
            "(line 325,col 9)-(line 325,col 688)",
            "(line 326,col 9)-(line 326,col 699)",
            "(line 327,col 9)-(line 327,col 704)",
            "(line 328,col 9)-(line 328,col 706)",
            "(line 329,col 9)-(line 329,col 706)",
            "(line 330,col 9)-(line 330,col 712)",
            "(line 331,col 9)-(line 331,col 722)",
            "(line 332,col 9)-(line 332,col 726)",
            "(line 333,col 9)-(line 333,col 723)",
            "(line 334,col 9)-(line 334,col 717)",
            "(line 335,col 9)-(line 335,col 743)",
            "(line 336,col 9)-(line 336,col 750)",
            "(line 337,col 9)-(line 337,col 737)",
            "(line 338,col 9)-(line 338,col 751)",
            "(line 339,col 9)-(line 339,col 761)",
            "(line 340,col 9)-(line 340,col 770)",
            "(line 341,col 9)-(line 341,col 767)",
            "(line 342,col 9)-(line 342,col 753)",
            "(line 343,col 9)-(line 343,col 777)",
            "(line 344,col 9)-(line 344,col 771)",
            "(line 345,col 9)-(line 345,col 782)",
            "(line 346,col 9)-(line 346,col 795)",
            "(line 347,col 9)-(line 347,col 794)",
            "(line 348,col 9)-(line 348,col 798)",
            "(line 349,col 9)-(line 349,col 787)",
            "(line 350,col 9)-(line 350,col 819)",
            "(line 351,col 9)-(line 351,col 821)",
            "(line 352,col 9)-(line 352,col 831)",
            "(line 353,col 9)-(line 353,col 811)",
            "(line 354,col 9)-(line 354,col 808)",
            "(line 355,col 9)-(line 355,col 837)",
            "(line 356,col 9)-(line 356,col 855)",
            "(line 357,col 9)-(line 357,col 834)",
            "(line 358,col 9)-(line 358,col 840)",
            "(line 359,col 9)-(line 359,col 859)",
            "(line 360,col 9)-(line 360,col 845)",
            "(line 361,col 9)-(line 361,col 864)",
            "(line 362,col 9)-(line 362,col 859)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder()",
        "snippet": "    public void testEncoder() throws EncoderException {\n        Encoder enc = new Base64();\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                byte[] base64 = utf8(STRINGS[i]);\n                byte[] binary = BYTES[i];\n                boolean b = Arrays.equals(base64, (byte[]) enc.encode(binary));\n                assertTrue(\"Encoder test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 371,
        "end_line": 381,
        "comment": "\n     * Tests to make sure Base64's implementation of the org.apache.commons.codec.Encoder\n     * interface is behaving identical to commons-codec-1.3.jar.\n     * \n     * @throws EncoderException problem\n     ",
        "child_ranges": [
            "(line 372,col 9)-(line 372,col 35)",
            "(line 373,col 9)-(line 380,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder()",
        "snippet": "    public void testDecoder() throws DecoderException {\n        Decoder dec = new Base64();\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                byte[] base64 = utf8(STRINGS[i]);\n                byte[] binary = BYTES[i];\n                boolean b = Arrays.equals(binary, (byte[]) dec.decode(base64));\n                assertTrue(\"Decoder test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 389,
        "end_line": 399,
        "comment": "\n     * Tests to make sure Base64's implementation of the org.apache.commons.codec.Decoder\n     * interface is behaving identical to commons-codec-1.3.jar.\n     *\n     * @throws DecoderException problem\n     ",
        "child_ranges": [
            "(line 390,col 9)-(line 390,col 35)",
            "(line 391,col 9)-(line 398,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder()",
        "snippet": "    public void testBinaryEncoder() throws EncoderException {\n        BinaryEncoder enc = new Base64();\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                byte[] base64 = utf8(STRINGS[i]);\n                byte[] binary = BYTES[i];\n                boolean b = Arrays.equals(base64, enc.encode(binary));\n                assertTrue(\"BinaryEncoder test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 407,
        "end_line": 417,
        "comment": "\n     * Tests to make sure Base64's implementation of the org.apache.commons.codec.BinaryEncoder\n     * interface is behaving identical to commons-codec-1.3.jar.\n     *\n     * @throws EncoderException problem\n     ",
        "child_ranges": [
            "(line 408,col 9)-(line 408,col 41)",
            "(line 409,col 9)-(line 416,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder()",
        "snippet": "    public void testBinaryDecoder() throws DecoderException {\n        BinaryDecoder dec = new Base64();\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                byte[] base64 = utf8(STRINGS[i]);\n                byte[] binary = BYTES[i];\n                boolean b = Arrays.equals(binary, dec.decode(base64));\n                assertTrue(\"BinaryDecoder test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 425,
        "end_line": 435,
        "comment": "\n     * Tests to make sure Base64's implementation of the org.apache.commons.codec.BinaryDecoder\n     * interface is behaving identical to commons-codec-1.3.jar.\n     *\n     * @throws DecoderException problem\n     ",
        "child_ranges": [
            "(line 426,col 9)-(line 426,col 41)",
            "(line 427,col 9)-(line 434,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode()",
        "snippet": "    public void testStaticEncode() throws EncoderException {\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                byte[] base64 = utf8(STRINGS[i]);\n                byte[] binary = BYTES[i];\n                boolean b = Arrays.equals(base64, Base64.encodeBase64(binary));\n                assertTrue(\"static Base64.encodeBase64() test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 443,
        "end_line": 452,
        "comment": "\n     * Tests to make sure Base64's implementation of Base64.encodeBase64()\n     * static method is behaving identical to commons-codec-1.3.jar.\n     *\n     * @throws EncoderException problem\n     ",
        "child_ranges": [
            "(line 444,col 9)-(line 451,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode()",
        "snippet": "    public void testStaticDecode() throws DecoderException {\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                byte[] base64 = utf8(STRINGS[i]);\n                byte[] binary = BYTES[i];\n                boolean b = Arrays.equals(binary, Base64.decodeBase64(base64));\n                assertTrue(\"static Base64.decodeBase64() test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 460,
        "end_line": 469,
        "comment": "\n     * Tests to make sure Base64's implementation of Base64.decodeBase64()\n     * static method is behaving identical to commons-codec-1.3.jar.\n     *\n     * @throws DecoderException problem\n     ",
        "child_ranges": [
            "(line 461,col 9)-(line 468,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked()",
        "snippet": "    public void testStaticEncodeChunked() throws EncoderException {\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                byte[] base64Chunked = utf8(CHUNKED_STRINGS[i]);\n                byte[] binary = BYTES[i];\n                boolean b = Arrays.equals(base64Chunked, Base64.encodeBase64Chunked(binary));\n                assertTrue(\"static Base64.encodeBase64Chunked() test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 477,
        "end_line": 486,
        "comment": "\n     * Tests to make sure Base64's implementation of Base64.encodeBase64Chunked()\n     * static method is behaving identical to commons-codec-1.3.jar.\n     *\n     * @throws EncoderException problem\n     ",
        "child_ranges": [
            "(line 478,col 9)-(line 485,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked()",
        "snippet": "    public void testStaticDecodeChunked() throws DecoderException {\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                byte[] base64Chunked = utf8(CHUNKED_STRINGS[i]);\n                byte[] binary = BYTES[i];\n                boolean b = Arrays.equals(binary, Base64.decodeBase64(base64Chunked));\n                assertTrue(\"static Base64.decodeBase64Chunked() test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 495,
        "end_line": 504,
        "comment": "\n     * Tests to make sure Base64's implementation of Base64.decodeBase64()\n     * static method is behaving identical to commons-codec-1.3.jar when\n     * supplied with chunked input.\n     *\n     * @throws DecoderException problem\n     ",
        "child_ranges": [
            "(line 496,col 9)-(line 503,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.utf8(java.lang.String)",
        "snippet": "    private static byte[] utf8(String s) {\n\n        // We would use commons-codec-1.4.jar own utility method for this, but we\n        // need this class to be able to run against commons-codec-1.3.jar, hence the\n        // duplication here.\n        \n        try {\n            return s != null ? s.getBytes(\"UTF-8\") : null;\n        } catch (UnsupportedEncodingException uee) {\n            throw new IllegalStateException(uee.toString());\n        }\n    }",
        "begin_line": 506,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 512,col 9)-(line 516,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestSuite suite = new TestSuite(Base64Codec13Test.class);\n\n        TestResult r = new TestResult();\n        suite.run(r);\n        int runCount = r.runCount();\n        int failureCount = r.failureCount();\n        System.out.println((runCount - failureCount) + \"/\" + runCount + \" tests succeeded!\");\n        if (!r.wasSuccessful()) {\n            Enumeration en = r.errors();\n            while (en.hasMoreElements()) {\n                TestFailure tf = (TestFailure) en.nextElement();\n                System.out.println(tf.toString());\n            }\n\n            en = r.failures();\n            while (en.hasMoreElements()) {\n                TestFailure tf = (TestFailure) en.nextElement();\n                System.out.println(tf.toString());\n            }\n\n        }\n\n    }",
        "begin_line": 526,
        "end_line": 549,
        "comment": "\n     * This main() method can be run with just commons-codec-1.3.jar and junit-3.8.1.jar\n     * on the classpath to make sure these tests truly capture the behaviour of\n     * commons-codec-1.3.jar.\n     *\n     * @param args command-line args\n     ",
        "child_ranges": [
            "(line 527,col 9)-(line 527,col 65)",
            "(line 529,col 9)-(line 529,col 40)",
            "(line 530,col 9)-(line 530,col 21)",
            "(line 531,col 9)-(line 531,col 36)",
            "(line 532,col 9)-(line 532,col 44)",
            "(line 533,col 9)-(line 533,col 93)",
            "(line 534,col 9)-(line 547,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        new StringUtils();\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "\n     * We could make the constructor private but there does not seem to be a point to jumping through extra code hoops\n     * to restrict instantiation right now.\n     ",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1()",
        "snippet": "    public void testGetBytesIso8859_1() throws UnsupportedEncodingException {\n        String charsetName = \"ISO-8859-1\";\n        testGetBytesUnchecked(charsetName);\n        byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        byte[] actual = StringUtils.getBytesIso8859_1(STRING_FIXTURE);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }",
        "begin_line": 46,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 42)",
            "(line 48,col 9)-(line 48,col 43)",
            "(line 49,col 9)-(line 49,col 63)",
            "(line 50,col 9)-(line 50,col 70)",
            "(line 51,col 9)-(line 51,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUnchecked(java.lang.String)",
        "snippet": "    private void testGetBytesUnchecked(String charsetName) throws UnsupportedEncodingException {\n        byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        byte[] actual = StringUtils.getBytesUnchecked(STRING_FIXTURE, charsetName);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 63)",
            "(line 56,col 9)-(line 56,col 83)",
            "(line 57,col 9)-(line 57,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii()",
        "snippet": "    public void testGetBytesUsAscii() throws UnsupportedEncodingException {\n        String charsetName = \"US-ASCII\";\n        testGetBytesUnchecked(charsetName);\n        byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        byte[] actual = StringUtils.getBytesUsAscii(STRING_FIXTURE);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }",
        "begin_line": 60,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 40)",
            "(line 62,col 9)-(line 62,col 43)",
            "(line 63,col 9)-(line 63,col 63)",
            "(line 64,col 9)-(line 64,col 68)",
            "(line 65,col 9)-(line 65,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16()",
        "snippet": "    public void testGetBytesUtf16() throws UnsupportedEncodingException {\n        String charsetName = \"UTF-16\";\n        testGetBytesUnchecked(charsetName);\n        byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        byte[] actual = StringUtils.getBytesUtf16(STRING_FIXTURE);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }",
        "begin_line": 68,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 38)",
            "(line 70,col 9)-(line 70,col 43)",
            "(line 71,col 9)-(line 71,col 63)",
            "(line 72,col 9)-(line 72,col 66)",
            "(line 73,col 9)-(line 73,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be()",
        "snippet": "    public void testGetBytesUtf16Be() throws UnsupportedEncodingException {\n        String charsetName = \"UTF-16BE\";\n        testGetBytesUnchecked(charsetName);\n        byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        byte[] actual = StringUtils.getBytesUtf16Be(STRING_FIXTURE);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }",
        "begin_line": 76,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 40)",
            "(line 78,col 9)-(line 78,col 43)",
            "(line 79,col 9)-(line 79,col 63)",
            "(line 80,col 9)-(line 80,col 68)",
            "(line 81,col 9)-(line 81,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le()",
        "snippet": "    public void testGetBytesUtf16Le() throws UnsupportedEncodingException {\n        String charsetName = \"UTF-16LE\";\n        testGetBytesUnchecked(charsetName);\n        byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        byte[] actual = StringUtils.getBytesUtf16Le(STRING_FIXTURE);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }",
        "begin_line": 84,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 40)",
            "(line 86,col 9)-(line 86,col 43)",
            "(line 87,col 9)-(line 87,col 63)",
            "(line 88,col 9)-(line 88,col 68)",
            "(line 89,col 9)-(line 89,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8()",
        "snippet": "    public void testGetBytesUtf8() throws UnsupportedEncodingException {\n        String charsetName = \"UTF-8\";\n        testGetBytesUnchecked(charsetName);\n        byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        byte[] actual = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }",
        "begin_line": 92,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 37)",
            "(line 94,col 9)-(line 94,col 43)",
            "(line 95,col 9)-(line 95,col 63)",
            "(line 96,col 9)-(line 96,col 65)",
            "(line 97,col 9)-(line 97,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName()",
        "snippet": "    public void testGetBytesUncheckedBadName() {\n        try {\n            StringUtils.getBytesUnchecked(STRING_FIXTURE, \"UNKNOWN\");\n            Assert.fail(\"Expected \" + IllegalStateException.class.getName());\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n    }",
        "begin_line": 100,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 106,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewString(java.lang.String)",
        "snippet": "    private void testNewString(String charsetName) throws UnsupportedEncodingException {\n        String expected = new String(BYTES_FIXTURE, charsetName);\n        String actual = StringUtils.newString(BYTES_FIXTURE, charsetName);\n        Assert.assertEquals(expected, actual);\n    }",
        "begin_line": 109,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 65)",
            "(line 111,col 9)-(line 111,col 74)",
            "(line 112,col 9)-(line 112,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc()",
        "snippet": "    public void testNewStringBadEnc() {\n        try {\n            StringUtils.newString(BYTES_FIXTURE, \"UNKNOWN\");\n            Assert.fail(\"Expected \" + IllegalStateException.class.getName());\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n    }",
        "begin_line": 115,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 121,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1()",
        "snippet": "    public void testNewStringIso8859_1() throws UnsupportedEncodingException {\n        String charsetName = \"ISO-8859-1\";\n        testNewString(charsetName);\n        String expected = new String(BYTES_FIXTURE, charsetName);\n        String actual = StringUtils.newStringIso8859_1(BYTES_FIXTURE);\n        Assert.assertEquals(expected, actual);\n    }",
        "begin_line": 124,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 42)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 127,col 65)",
            "(line 128,col 9)-(line 128,col 70)",
            "(line 129,col 9)-(line 129,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii()",
        "snippet": "    public void testNewStringUsAscii() throws UnsupportedEncodingException {\n        String charsetName = \"US-ASCII\";\n        testNewString(charsetName);\n        String expected = new String(BYTES_FIXTURE, charsetName);\n        String actual = StringUtils.newStringUsAscii(BYTES_FIXTURE);\n        Assert.assertEquals(expected, actual);\n    }",
        "begin_line": 132,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 40)",
            "(line 134,col 9)-(line 134,col 35)",
            "(line 135,col 9)-(line 135,col 65)",
            "(line 136,col 9)-(line 136,col 68)",
            "(line 137,col 9)-(line 137,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16()",
        "snippet": "    public void testNewStringUtf16() throws UnsupportedEncodingException {\n        String charsetName = \"UTF-16\";\n        testNewString(charsetName);\n        String expected = new String(BYTES_FIXTURE, charsetName);\n        String actual = StringUtils.newStringUtf16(BYTES_FIXTURE);\n        Assert.assertEquals(expected, actual);\n    }",
        "begin_line": 140,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 38)",
            "(line 142,col 9)-(line 142,col 35)",
            "(line 143,col 9)-(line 143,col 65)",
            "(line 144,col 9)-(line 144,col 66)",
            "(line 145,col 9)-(line 145,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be()",
        "snippet": "    public void testNewStringUtf16Be() throws UnsupportedEncodingException {\n        String charsetName = \"UTF-16BE\";\n        testNewString(charsetName);\n        String expected = new String(BYTES_FIXTURE, charsetName);\n        String actual = StringUtils.newStringUtf16Be(BYTES_FIXTURE);\n        Assert.assertEquals(expected, actual);\n    }",
        "begin_line": 148,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 40)",
            "(line 150,col 9)-(line 150,col 35)",
            "(line 151,col 9)-(line 151,col 65)",
            "(line 152,col 9)-(line 152,col 68)",
            "(line 153,col 9)-(line 153,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le()",
        "snippet": "    public void testNewStringUtf16Le() throws UnsupportedEncodingException {\n        String charsetName = \"UTF-16LE\";\n        testNewString(charsetName);\n        String expected = new String(BYTES_FIXTURE, charsetName);\n        String actual = StringUtils.newStringUtf16Le(BYTES_FIXTURE);\n        Assert.assertEquals(expected, actual);\n    }",
        "begin_line": 156,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 40)",
            "(line 158,col 9)-(line 158,col 35)",
            "(line 159,col 9)-(line 159,col 65)",
            "(line 160,col 9)-(line 160,col 68)",
            "(line 161,col 9)-(line 161,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8()",
        "snippet": "    public void testNewStringUtf8() throws UnsupportedEncodingException {\n        String charsetName = \"UTF-8\";\n        testNewString(charsetName);\n        String expected = new String(BYTES_FIXTURE, charsetName);\n        String actual = StringUtils.newStringUtf8(BYTES_FIXTURE);\n        Assert.assertEquals(expected, actual);\n    }",
        "begin_line": 164,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 37)",
            "(line 166,col 9)-(line 166,col 35)",
            "(line 167,col 9)-(line 167,col 65)",
            "(line 168,col 9)-(line 168,col 65)",
            "(line 169,col 9)-(line 169,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.Base64Test(java.lang.String)",
        "snippet": "    public Base64Test(String name) {\n        super(name);\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "\n     * Construct a new instance of this test case.\n     * \n     * @param name\n     *            Name of the test case\n     ",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.getRandom()",
        "snippet": "    public Random getRandom() {\n        return this._random;\n    }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "\n     * @return Returns the _random.\n     ",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testBase64()",
        "snippet": "    public void testBase64() {\n        String content = \"Hello World\";\n        String encodedContent;\n        byte[] encodedBytes = Base64.encodeBase64(StringUtils.getBytesUtf8(content));\n        encodedContent = StringUtils.newStringUtf8(encodedBytes);\n        assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));\n\n        Base64 b64 = new Base64(Base64.MIME_CHUNK_SIZE, null);  // null lineSeparator same as saying no-chunking\n        encodedBytes = b64.encode(StringUtils.getBytesUtf8(content));\n        encodedContent = StringUtils.newStringUtf8(encodedBytes);\n        assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));\n\n        b64 = new Base64(0, null);  // null lineSeparator same as saying no-chunking\n        encodedBytes = b64.encode(StringUtils.getBytesUtf8(content));\n        encodedContent = StringUtils.newStringUtf8(encodedBytes);\n        assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));\n\n        // bogus characters to decode (to skip actually)\n        byte[] decode = b64.decode(\"SGVsbG{\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9}8gV29ybGQ=\");\n        String decodeString = StringUtils.newStringUtf8(decode);\n        assertTrue(\"decode hello world\", decodeString.equals(\"Hello World\"));        \n    }",
        "begin_line": 61,
        "end_line": 82,
        "comment": "\n     * Test the Base64 implementation\n     ",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 39)",
            "(line 63,col 9)-(line 63,col 30)",
            "(line 64,col 9)-(line 64,col 85)",
            "(line 65,col 9)-(line 65,col 65)",
            "(line 66,col 9)-(line 66,col 86)",
            "(line 68,col 9)-(line 68,col 62)",
            "(line 69,col 9)-(line 69,col 69)",
            "(line 70,col 9)-(line 70,col 65)",
            "(line 71,col 9)-(line 71,col 86)",
            "(line 73,col 9)-(line 73,col 34)",
            "(line 74,col 9)-(line 74,col 69)",
            "(line 75,col 9)-(line 75,col 65)",
            "(line 76,col 9)-(line 76,col 86)",
            "(line 79,col 9)-(line 79,col 63)",
            "(line 80,col 9)-(line 80,col 64)",
            "(line 81,col 9)-(line 81,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76()",
        "snippet": "    public void testChunkedEncodeMultipleOf76() {\n        byte[] expectedEncode = Base64.encodeBase64(Base64TestData.DECODED, true);\n        // convert to \"\\r\\n\" so we're equal to the old openssl encoding test stored\n        // in Base64TestData.ENCODED_76_CHARS_PER_LINE:\n        String actualResult = Base64TestData.ENCODED_76_CHARS_PER_LINE.replaceAll(\"\\n\", \"\\r\\n\");\n        byte[] actualEncode = StringUtils.getBytesUtf8(actualResult);\n        assertTrue(\"chunkedEncodeMultipleOf76\", Arrays.equals(expectedEncode, actualEncode));\n    }",
        "begin_line": 87,
        "end_line": 94,
        "comment": "\n     * Tests Base64.encodeBase64().\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 82)",
            "(line 91,col 9)-(line 91,col 96)",
            "(line 92,col 9)-(line 92,col 69)",
            "(line 93,col 9)-(line 93,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodec68()",
        "snippet": "    public void testCodec68() {\n        byte[] x = new byte[]{'n', 'A', '=', '=', (byte) 0x9c};\n        Base64.decodeBase64(x);\n    }",
        "begin_line": 99,
        "end_line": 102,
        "comment": "\n     * CODEC-68: isBase64 throws ArrayIndexOutOfBoundsException on some non-BASE64 bytes\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 63)",
            "(line 101,col 9)-(line 101,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodeInteger1()",
        "snippet": "    public void testCodeInteger1() throws UnsupportedEncodingException {\n        String encodedInt1 = \"li7dzDacuo67Jg7mtqEm2TRuOMU=\";\n        BigInteger bigInt1 = new BigInteger(\"85739377120809420210425962799\" + \"0318636601332086981\");\n\n        assertEquals(encodedInt1, new String(Base64.encodeInteger(bigInt1)));\n        assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(\"UTF-8\")));\n    }",
        "begin_line": 104,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 60)",
            "(line 106,col 9)-(line 106,col 101)",
            "(line 108,col 9)-(line 108,col 77)",
            "(line 109,col 9)-(line 109,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodeInteger2()",
        "snippet": "    public void testCodeInteger2() throws UnsupportedEncodingException {\n        String encodedInt2 = \"9B5ypLY9pMOmtxCeTDHgwdNFeGs=\";\n        BigInteger bigInt2 = new BigInteger(\"13936727572861167254666467268\" + \"91466679477132949611\");\n\n        assertEquals(encodedInt2, new String(Base64.encodeInteger(bigInt2)));\n        assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(\"UTF-8\")));\n    }",
        "begin_line": 112,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 60)",
            "(line 114,col 9)-(line 114,col 102)",
            "(line 116,col 9)-(line 116,col 77)",
            "(line 117,col 9)-(line 117,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodeInteger3()",
        "snippet": "    public void testCodeInteger3() throws UnsupportedEncodingException {\n        String encodedInt3 = \"FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2\" + \"rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg==\";\n        BigInteger bigInt3 = new BigInteger(\"10806548154093873461951748545\"\n            + \"1196989136416448805819079363524309897749044958112417136240557\"\n            + \"4495062430572478766856090958495998158114332651671116876320938126\");\n\n        assertEquals(encodedInt3, new String(Base64.encodeInteger(bigInt3)));\n        assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(\"UTF-8\")));\n    }",
        "begin_line": 120,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 125)",
            "(line 122,col 9)-(line 124,col 82)",
            "(line 126,col 9)-(line 126,col 77)",
            "(line 127,col 9)-(line 127,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodeInteger4()",
        "snippet": "    public void testCodeInteger4() throws UnsupportedEncodingException {\n        String encodedInt4 = \"ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI\"\n            + \"4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o\"\n            + \"DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv\"\n            + \"Q0=\";\n        BigInteger bigInt4 = new BigInteger(\"80624726256040348115552042320\"\n            + \"6968135001872753709424419772586693950232350200555646471175944\"\n            + \"519297087885987040810778908507262272892702303774422853675597\"\n            + \"748008534040890923814202286633163248086055216976551456088015\"\n            + \"338880713818192088877057717530169381044092839402438015097654\"\n            + \"53542091716518238707344493641683483917\");\n\n        assertEquals(encodedInt4, new String(Base64.encodeInteger(bigInt4)));\n        assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(\"UTF-8\")));\n    }",
        "begin_line": 130,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 134,col 20)",
            "(line 135,col 9)-(line 140,col 56)",
            "(line 142,col 9)-(line 142,col 77)",
            "(line 143,col 9)-(line 143,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodeIntegerEdgeCases()",
        "snippet": "    public void testCodeIntegerEdgeCases() {\n        // TODO\n    }",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodeIntegerNull()",
        "snippet": "    public void testCodeIntegerNull() {\n        try {\n            Base64.encodeInteger(null);\n            fail(\"Exception not thrown when passing in null to encodeInteger(BigInteger)\");\n        } catch (NullPointerException npe) {\n            // expected\n        } catch (Exception e) {\n            fail(\"Incorrect Exception caught when passing in null to encodeInteger(BigInteger)\");\n        }\n    }",
        "begin_line": 150,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 158,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testConstructors()",
        "snippet": "    public void testConstructors() {\n        Base64 base64;\n        base64 = new Base64();\n        base64 = new Base64(-1);\n        base64 = new Base64(-1, new byte[]{});\n        base64 = new Base64(64, new byte[]{});\n        try {\n            base64 = new Base64(-1, new byte[]{'A'});\n            fail(\"Should have rejected attempt to use 'A' as a line separator\");\n        } catch (IllegalArgumentException ignored) {\n            // Expected\n        }\n        try {\n            base64 = new Base64(64, new byte[]{'A'});\n            fail(\"Should have rejected attempt to use 'A' as a line separator\");\n        } catch (IllegalArgumentException ignored) {\n            // Expected\n        }\n        try {\n            base64 = new Base64(64, new byte[]{'='});\n            fail(\"Should have rejected attempt to use '=' as a line separator\");\n        } catch (IllegalArgumentException ignored) {\n            // Expected\n        }\n        base64 = new Base64(64, new byte[]{'$'}); // OK\n        try {\n            base64 = new Base64(64, new byte[]{'A', '$'});\n            fail(\"Should have rejected attempt to use 'A$' as a line separator\");\n        } catch (IllegalArgumentException ignored) {\n            // Expected\n        }\n        base64 = new Base64(64, new byte[]{' ', '$', '\\n', '\\r', '\\t'}); // OK\n    }",
        "begin_line": 161,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 22)",
            "(line 163,col 9)-(line 163,col 30)",
            "(line 164,col 9)-(line 164,col 32)",
            "(line 165,col 9)-(line 165,col 46)",
            "(line 166,col 9)-(line 166,col 46)",
            "(line 167,col 9)-(line 172,col 9)",
            "(line 173,col 9)-(line 178,col 9)",
            "(line 179,col 9)-(line 184,col 9)",
            "(line 185,col 9)-(line 185,col 49)",
            "(line 186,col 9)-(line 191,col 9)",
            "(line 192,col 9)-(line 192,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean()",
        "snippet": "    public void testConstructor_Int_ByteArray_Boolean() {\n        Base64 base64 = new Base64(65, new byte[]{'\\t'}, false);\n        byte[] encoded = base64.encode(Base64TestData.DECODED);\n        String expectedResult = Base64TestData.ENCODED_64_CHARS_PER_LINE;\n        expectedResult = expectedResult.replace('\\n', '\\t');\n        String result = StringUtils.newStringUtf8(encoded);\n        assertEquals(\"new Base64(65, \\\\t, false)\", expectedResult, result);\n    }",
        "begin_line": 195,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 64)",
            "(line 197,col 9)-(line 197,col 63)",
            "(line 198,col 9)-(line 198,col 73)",
            "(line 199,col 9)-(line 199,col 60)",
            "(line 200,col 9)-(line 200,col 59)",
            "(line 201,col 9)-(line 201,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe()",
        "snippet": "    public void testConstructor_Int_ByteArray_Boolean_UrlSafe() {\n        // url-safe variation\n        Base64 base64 = new Base64(64, new byte[]{'\\t'}, true);\n        byte[] encoded = base64.encode(Base64TestData.DECODED);\n        String expectedResult = Base64TestData.ENCODED_64_CHARS_PER_LINE;\n        expectedResult = expectedResult.replaceAll(\"=\", \"\"); // url-safe has no == padding.\n        expectedResult = expectedResult.replace('\\n', '\\t');\n        expectedResult = expectedResult.replace('+', '-');\n        expectedResult = expectedResult.replace('/', '_');\n        String result = StringUtils.newStringUtf8(encoded);\n        assertEquals(\"new Base64(64, \\\\t, true)\", result, expectedResult);\n    }",
        "begin_line": 204,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 63)",
            "(line 207,col 9)-(line 207,col 63)",
            "(line 208,col 9)-(line 208,col 73)",
            "(line 209,col 9)-(line 209,col 60)",
            "(line 210,col 9)-(line 210,col 60)",
            "(line 211,col 9)-(line 211,col 58)",
            "(line 212,col 9)-(line 212,col 58)",
            "(line 213,col 9)-(line 213,col 59)",
            "(line 214,col 9)-(line 214,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2()",
        "snippet": "    public void testDecodePadMarkerIndex2() throws UnsupportedEncodingException {\n        assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes(\"UTF-8\"))));\n    }",
        "begin_line": 220,
        "end_line": 222,
        "comment": "\n     * Tests conditional true branch for \"marker0\" test.\n     ",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3()",
        "snippet": "    public void testDecodePadMarkerIndex3() throws UnsupportedEncodingException {\n        assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes(\"UTF-8\"))));\n        assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes(\"UTF-8\"))));\n    }",
        "begin_line": 227,
        "end_line": 230,
        "comment": "\n     * Tests conditional branches for \"marker1\" test.\n     ",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 86)",
            "(line 229,col 9)-(line 229,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly()",
        "snippet": "    public void testDecodePadOnly() throws UnsupportedEncodingException {\n        assertTrue(Base64.decodeBase64(\"====\".getBytes(\"UTF-8\")).length == 0);\n        assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes(\"UTF-8\"))));\n        // Test truncated padding\n        assertTrue(Base64.decodeBase64(\"===\".getBytes(\"UTF-8\")).length == 0);\n        assertTrue(Base64.decodeBase64(\"==\".getBytes(\"UTF-8\")).length == 0);\n        assertTrue(Base64.decodeBase64(\"=\".getBytes(\"UTF-8\")).length == 0);\n        assertTrue(Base64.decodeBase64(\"\".getBytes(\"UTF-8\")).length == 0);\n    }",
        "begin_line": 232,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 78)",
            "(line 234,col 9)-(line 234,col 84)",
            "(line 236,col 9)-(line 236,col 77)",
            "(line 237,col 9)-(line 237,col 76)",
            "(line 238,col 9)-(line 238,col 75)",
            "(line 239,col 9)-(line 239,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked()",
        "snippet": "    public void testDecodePadOnlyChunked() throws UnsupportedEncodingException {\n        assertTrue(Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\")).length == 0);\n        assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\"))));\n        // Test truncated padding\n        assertTrue(Base64.decodeBase64(\"===\\n\".getBytes(\"UTF-8\")).length == 0);\n        assertTrue(Base64.decodeBase64(\"==\\n\".getBytes(\"UTF-8\")).length == 0);\n        assertTrue(Base64.decodeBase64(\"=\\n\".getBytes(\"UTF-8\")).length == 0);\n        assertTrue(Base64.decodeBase64(\"\\n\".getBytes(\"UTF-8\")).length == 0);\n    }",
        "begin_line": 242,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 80)",
            "(line 244,col 9)-(line 244,col 86)",
            "(line 246,col 9)-(line 246,col 79)",
            "(line 247,col 9)-(line 247,col 78)",
            "(line 248,col 9)-(line 248,col 77)",
            "(line 249,col 9)-(line 249,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace()",
        "snippet": "    public void testDecodeWithWhitespace() throws Exception {\n\n        String orig = \"I am a late night coder.\";\n\n        byte[] encodedArray = Base64.encodeBase64(orig.getBytes(\"UTF-8\"));\n        StringBuffer intermediate = new StringBuffer(new String(encodedArray));\n\n        intermediate.insert(2, ' ');\n        intermediate.insert(5, '\\t');\n        intermediate.insert(10, '\\r');\n        intermediate.insert(15, '\\n');\n\n        byte[] encodedWithWS = intermediate.toString().getBytes(\"UTF-8\");\n        byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n\n        String dest = new String(decodedWithWS);\n\n        assertTrue(\"Dest string doesn't equal the original\", dest.equals(orig));\n    }",
        "begin_line": 252,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 49)",
            "(line 256,col 9)-(line 256,col 74)",
            "(line 257,col 9)-(line 257,col 79)",
            "(line 259,col 9)-(line 259,col 36)",
            "(line 260,col 9)-(line 260,col 37)",
            "(line 261,col 9)-(line 261,col 38)",
            "(line 262,col 9)-(line 262,col 38)",
            "(line 264,col 9)-(line 264,col 73)",
            "(line 265,col 9)-(line 265,col 66)",
            "(line 267,col 9)-(line 267,col 48)",
            "(line 269,col 9)-(line 269,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testDiscardWhitespace()",
        "snippet": "    public void testDiscardWhitespace() throws Exception {\n\n        String orig = \"I am a late night coder.\";\n\n        byte[] encodedArray = Base64.encodeBase64(orig.getBytes(\"UTF-8\"));\n        StringBuffer intermediate = new StringBuffer(new String(encodedArray));\n\n        intermediate.insert(2, ' ');\n        intermediate.insert(5, '\\t');\n        intermediate.insert(10, '\\r');\n        intermediate.insert(15, '\\n');\n\n        byte[] encodedWithWS = intermediate.toString().getBytes(\"UTF-8\");\n        byte[] encodedNoWS = Base64.discardWhitespace(encodedWithWS);\n        byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n        byte[] decodedNoWS = Base64.decodeBase64(encodedNoWS);\n\n        String destFromWS = new String(decodedWithWS);\n        String destFromNoWS = new String(decodedNoWS);\n\n        assertTrue(\"Dest string doesn't equal original\", destFromWS.equals(orig));\n        assertTrue(\"Dest string doesn't equal original\", destFromNoWS.equals(orig));\n    }",
        "begin_line": 272,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 49)",
            "(line 276,col 9)-(line 276,col 74)",
            "(line 277,col 9)-(line 277,col 79)",
            "(line 279,col 9)-(line 279,col 36)",
            "(line 280,col 9)-(line 280,col 37)",
            "(line 281,col 9)-(line 281,col 38)",
            "(line 282,col 9)-(line 282,col 38)",
            "(line 284,col 9)-(line 284,col 73)",
            "(line 285,col 9)-(line 285,col 69)",
            "(line 286,col 9)-(line 286,col 66)",
            "(line 287,col 9)-(line 287,col 62)",
            "(line 289,col 9)-(line 289,col 54)",
            "(line 290,col 9)-(line 290,col 54)",
            "(line 292,col 9)-(line 292,col 82)",
            "(line 293,col 9)-(line 293,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testEmptyBase64()",
        "snippet": "    public void testEmptyBase64() {\n        byte[] empty = new byte[0];\n        byte[] result = Base64.encodeBase64(empty);\n        assertEquals(\"empty base64 encode\", 0, result.length);\n        assertEquals(\"empty base64 encode\", null, Base64.encodeBase64(null));\n\n        empty = new byte[0];\n        result = Base64.decodeBase64(empty);\n        assertEquals(\"empty base64 decode\", 0, result.length);\n        assertEquals(\"empty base64 encode\", null, Base64.decodeBase64((byte[]) null));\n    }",
        "begin_line": 299,
        "end_line": 309,
        "comment": "\n     * Test encode and decode of empty byte array.\n     ",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 35)",
            "(line 301,col 9)-(line 301,col 51)",
            "(line 302,col 9)-(line 302,col 62)",
            "(line 303,col 9)-(line 303,col 77)",
            "(line 305,col 9)-(line 305,col 28)",
            "(line 306,col 9)-(line 306,col 44)",
            "(line 307,col 9)-(line 307,col 62)",
            "(line 308,col 9)-(line 308,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom()",
        "snippet": "    public void testEncodeDecodeRandom() {\n        for (int i = 1; i < 5; i++) {\n            byte[] data = new byte[this.getRandom().nextInt(10000) + 1];\n            this.getRandom().nextBytes(data);\n            byte[] enc = Base64.encodeBase64(data);\n            assertTrue(Base64.isArrayByteBase64(enc));\n            byte[] data2 = Base64.decodeBase64(enc);\n            assertTrue(Arrays.equals(data, data2));\n        }\n    }",
        "begin_line": 312,
        "end_line": 321,
        "comment": " encode/decode a large random array",
        "child_ranges": [
            "(line 313,col 9)-(line 320,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall()",
        "snippet": "    public void testEncodeDecodeSmall() {\n        for (int i = 0; i < 12; i++) {\n            byte[] data = new byte[i];\n            this.getRandom().nextBytes(data);\n            byte[] enc = Base64.encodeBase64(data);\n            assertTrue(\"\\\"\" + (new String(enc)) + \"\\\" is Base64 data.\", Base64.isArrayByteBase64(enc));\n            byte[] data2 = Base64.decodeBase64(enc);\n            assertTrue(toString(data) + \" equals \" + toString(data2), Arrays.equals(data, data2));\n        }\n    }",
        "begin_line": 324,
        "end_line": 333,
        "comment": " encode/decode random arrays from size 0 to size 11",
        "child_ranges": [
            "(line 325,col 9)-(line 332,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize()",
        "snippet": "    public void testEncodeOverMaxSize() throws Exception {\n        testEncodeOverMaxSize(-1);\n        testEncodeOverMaxSize(0);\n        testEncodeOverMaxSize(1);\n        testEncodeOverMaxSize(2);\n    }",
        "begin_line": 335,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 336,col 9)-(line 336,col 34)",
            "(line 337,col 9)-(line 337,col 33)",
            "(line 338,col 9)-(line 338,col 33)",
            "(line 339,col 9)-(line 339,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(int)",
        "snippet": "    private void testEncodeOverMaxSize(int maxSize) throws Exception {\n        try {\n            Base64.encodeBase64(Base64TestData.DECODED, true, false, maxSize);\n            fail(\"Expected \" + IllegalArgumentException.class.getName());\n        } catch (IllegalArgumentException e) {\n            // Expceted\n        }\n    }",
        "begin_line": 342,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 343,col 9)-(line 348,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode()",
        "snippet": "    public void testIgnoringNonBase64InDecode() throws Exception {\n        assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n                .decodeBase64(\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(\"UTF-8\"))));\n    }",
        "begin_line": 351,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 352,col 9)-(line 353,col 148)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64()",
        "snippet": "    public void testIsArrayByteBase64() {\n        assertFalse(Base64.isArrayByteBase64(new byte[]{Byte.MIN_VALUE}));\n        assertFalse(Base64.isArrayByteBase64(new byte[]{-125}));\n        assertFalse(Base64.isArrayByteBase64(new byte[]{-10}));\n        assertFalse(Base64.isArrayByteBase64(new byte[]{0}));\n        assertFalse(Base64.isArrayByteBase64(new byte[]{64, Byte.MAX_VALUE}));\n        assertFalse(Base64.isArrayByteBase64(new byte[]{Byte.MAX_VALUE}));\n        assertTrue(Base64.isArrayByteBase64(new byte[]{'A'}));\n        assertFalse(Base64.isArrayByteBase64(new byte[]{'A', Byte.MIN_VALUE}));\n        assertTrue(Base64.isArrayByteBase64(new byte[]{'A', 'Z', 'a'}));\n        assertTrue(Base64.isArrayByteBase64(new byte[]{'/', '=', '+'}));\n        assertFalse(Base64.isArrayByteBase64(new byte[]{'$'}));\n    }",
        "begin_line": 356,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 357,col 9)-(line 357,col 74)",
            "(line 358,col 9)-(line 358,col 64)",
            "(line 359,col 9)-(line 359,col 63)",
            "(line 360,col 9)-(line 360,col 61)",
            "(line 361,col 9)-(line 361,col 78)",
            "(line 362,col 9)-(line 362,col 74)",
            "(line 363,col 9)-(line 363,col 62)",
            "(line 364,col 9)-(line 364,col 79)",
            "(line 365,col 9)-(line 365,col 72)",
            "(line 366,col 9)-(line 366,col 72)",
            "(line 367,col 9)-(line 367,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe()",
        "snippet": "    public void testIsUrlSafe() {\n        Base64 base64Standard = new Base64(false);\n        Base64 base64URLSafe = new Base64(true);\n\n        assertFalse(\"Base64.isUrlSafe=false\", base64Standard.isUrlSafe());\n        assertTrue(\"Base64.isUrlSafe=true\", base64URLSafe.isUrlSafe());\n\n        byte[] whiteSpace = {' ', '\\n', '\\r', '\\t'};\n        assertTrue(\"Base64.isArrayByteBase64(whiteSpace)=true\", Base64.isArrayByteBase64(whiteSpace));\n    }",
        "begin_line": 373,
        "end_line": 382,
        "comment": "\n     * Tests isUrlSafe.\n     ",
        "child_ranges": [
            "(line 374,col 9)-(line 374,col 50)",
            "(line 375,col 9)-(line 375,col 48)",
            "(line 377,col 9)-(line 377,col 74)",
            "(line 378,col 9)-(line 378,col 71)",
            "(line 380,col 9)-(line 380,col 52)",
            "(line 381,col 9)-(line 381,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testKnownDecodings()",
        "snippet": "    public void testKnownDecodings() throws UnsupportedEncodingException {\n        assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n                .decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(\"UTF-8\"))));\n        assertEquals(\"It was the best of times, it was the worst of times.\", new String(Base64\n                .decodeBase64(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes(\"UTF-8\"))));\n        assertEquals(\"http://jakarta.apache.org/commmons\", new String(Base64\n                .decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes(\"UTF-8\"))));\n        assertEquals(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\", new String(Base64\n                .decodeBase64(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes(\"UTF-8\"))));\n        assertEquals(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\", new String(Base64.decodeBase64(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\"\n                .getBytes(\"UTF-8\"))));\n        assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes(\"UTF-8\"))));\n    }",
        "begin_line": 384,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 386,col 118)",
            "(line 387,col 9)-(line 388,col 126)",
            "(line 389,col 9)-(line 390,col 102)",
            "(line 391,col 9)-(line 392,col 126)",
            "(line 393,col 9)-(line 394,col 38)",
            "(line 395,col 9)-(line 395,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testKnownEncodings()",
        "snippet": "    public void testKnownEncodings() throws UnsupportedEncodingException {\n        assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\", new String(Base64\n                .encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes(\"UTF-8\"))));\n        assertEquals(\n                \"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\\r\\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\\r\\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\\r\\nbGFoIGJsYWg=\\r\\n\",\n                new String(\n                        Base64\n                                .encodeBase64Chunked(\"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\"\n                                        .getBytes(\"UTF-8\"))));\n        assertEquals(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\", new String(Base64\n                .encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes(\"UTF-8\"))));\n        assertEquals(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\", new String(Base64\n                .encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes(\"UTF-8\"))));\n        assertEquals(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\", new String(Base64\n                .encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(\"UTF-8\"))));\n        assertEquals(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\", new String(Base64.encodeBase64(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\"\n                .getBytes(\"UTF-8\"))));\n        assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes(\"UTF-8\"))));\n    }",
        "begin_line": 398,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 399,col 9)-(line 400,col 100)",
            "(line 401,col 9)-(line 406,col 62)",
            "(line 407,col 9)-(line 408,col 106)",
            "(line 409,col 9)-(line 410,col 88)",
            "(line 411,col 9)-(line 412,col 106)",
            "(line 413,col 9)-(line 414,col 38)",
            "(line 415,col 9)-(line 415,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testNonBase64Test()",
        "snippet": "    public void testNonBase64Test() throws Exception {\n\n        byte[] bArray = {'%'};\n\n        assertFalse(\"Invalid Base64 array was incorrectly validated as \" + \"an array of Base64 encoded data\", Base64\n                .isArrayByteBase64(bArray));\n\n        try {\n            Base64 b64 = new Base64();\n            byte[] result = b64.decode(bArray);\n\n            assertTrue(\"The result should be empty as the test encoded content did \" + \"not contain any valid base 64 characters\",\n                    result.length == 0);\n        } catch (Exception e) {\n            fail(\"Exception was thrown when trying to decode \"\n                + \"invalid base64 encoded data - RFC 2045 requires that all \"\n                + \"non base64 character be discarded, an exception should not\"\n                + \" have been thrown\");\n        }\n    }",
        "begin_line": 418,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 420,col 9)-(line 420,col 30)",
            "(line 422,col 9)-(line 423,col 44)",
            "(line 425,col 9)-(line 436,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter()",
        "snippet": "    public void testObjectDecodeWithInvalidParameter() throws Exception {\n        Base64 b64 = new Base64();\n\n        try {\n            b64.decode(new Integer(5));\n            fail(\"decode(Object) didn't throw an exception when passed an Integer object\");\n        } catch (DecoderException e) {\n            // ignored\n        }\n\n    }",
        "begin_line": 439,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 440,col 9)-(line 440,col 34)",
            "(line 442,col 9)-(line 447,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter()",
        "snippet": "    public void testObjectDecodeWithValidParameter() throws Exception {\n\n        String original = \"Hello World!\";\n        Object o = Base64.encodeBase64(original.getBytes(\"UTF-8\"));\n\n        Base64 b64 = new Base64();\n        Object oDecoded = b64.decode(o);\n        byte[] baDecoded = (byte[]) oDecoded;\n        String dest = new String(baDecoded);\n\n        assertTrue(\"dest string does not equal original\", dest.equals(original));\n    }",
        "begin_line": 451,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 41)",
            "(line 454,col 9)-(line 454,col 67)",
            "(line 456,col 9)-(line 456,col 34)",
            "(line 457,col 9)-(line 457,col 40)",
            "(line 458,col 9)-(line 458,col 45)",
            "(line 459,col 9)-(line 459,col 44)",
            "(line 461,col 9)-(line 461,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter()",
        "snippet": "    public void testObjectEncodeWithInvalidParameter() throws Exception {\n        Base64 b64 = new Base64();\n        try {\n            b64.encode(\"Yadayadayada\");\n            fail(\"encode(Object) didn't throw an exception when passed a String object\");\n        } catch (EncoderException e) {\n            // Expected\n        }\n    }",
        "begin_line": 464,
        "end_line": 472,
        "comment": "",
        "child_ranges": [
            "(line 465,col 9)-(line 465,col 34)",
            "(line 466,col 9)-(line 471,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter()",
        "snippet": "    public void testObjectEncodeWithValidParameter() throws Exception {\n\n        String original = \"Hello World!\";\n        Object origObj = original.getBytes(\"UTF-8\");\n\n        Base64 b64 = new Base64();\n        Object oEncoded = b64.encode(origObj);\n        byte[] bArray = Base64.decodeBase64((byte[]) oEncoded);\n        String dest = new String(bArray);\n\n        assertTrue(\"dest string does not equal original\", dest.equals(original));\n    }",
        "begin_line": 474,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 476,col 9)-(line 476,col 41)",
            "(line 477,col 9)-(line 477,col 52)",
            "(line 479,col 9)-(line 479,col 34)",
            "(line 480,col 9)-(line 480,col 46)",
            "(line 481,col 9)-(line 481,col 63)",
            "(line 482,col 9)-(line 482,col 41)",
            "(line 484,col 9)-(line 484,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testObjectEncode()",
        "snippet": "    public void testObjectEncode() throws Exception {\n        Base64 b64 = new Base64();\n        assertEquals(\"SGVsbG8gV29ybGQ=\", new String(b64.encode(\"Hello World\".getBytes(\"UTF-8\"))));\n    }",
        "begin_line": 487,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 488,col 9)-(line 488,col 34)",
            "(line 489,col 9)-(line 489,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testPairs()",
        "snippet": "    public void testPairs() {\n        assertEquals(\"AAA=\", new String(Base64.encodeBase64(new byte[]{0, 0})));\n        for (int i = -128; i <= 127; i++) {\n            byte test[] = {(byte) i, (byte) i};\n            assertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));\n        }\n    }",
        "begin_line": 492,
        "end_line": 498,
        "comment": "",
        "child_ranges": [
            "(line 493,col 9)-(line 493,col 80)",
            "(line 494,col 9)-(line 497,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc2045Section2Dot1CrLfDefinition()",
        "snippet": "    public void testRfc2045Section2Dot1CrLfDefinition() {\n        assertTrue(Arrays.equals(new byte[]{13, 10}, Base64.CHUNK_SEPARATOR));\n    }",
        "begin_line": 503,
        "end_line": 505,
        "comment": "\n     * Tests RFC 2045 section 2.1 CRLF definition.\n     ",
        "child_ranges": [
            "(line 504,col 9)-(line 504,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc2045Section6Dot8ChunkSizeDefinition()",
        "snippet": "    public void testRfc2045Section6Dot8ChunkSizeDefinition() {\n        assertEquals(76, Base64.MIME_CHUNK_SIZE);\n    }",
        "begin_line": 510,
        "end_line": 512,
        "comment": "\n     * Tests RFC 2045 section 6.8 chuck size definition.\n     ",
        "child_ranges": [
            "(line 511,col 9)-(line 511,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc1421Section6Dot8ChunkSizeDefinition()",
        "snippet": "    public void testRfc1421Section6Dot8ChunkSizeDefinition() {\n        assertEquals(64, Base64.PEM_CHUNK_SIZE);\n    }",
        "begin_line": 517,
        "end_line": 519,
        "comment": "\n     * Tests RFC 1421 section 4.3.2.4 chuck size definition.\n     ",
        "child_ranges": [
            "(line 518,col 9)-(line 518,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode()",
        "snippet": "    public void testRfc4648Section10Decode() {\n        assertEquals(\"\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"\")));\n        assertEquals(\"f\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zg==\")));\n        assertEquals(\"fo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm8=\")));\n        assertEquals(\"foo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9v\")));\n        assertEquals(\"foob\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYg==\")));\n        assertEquals(\"fooba\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmE=\")));\n        assertEquals(\"foobar\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmFy\")));\n    }",
        "begin_line": 535,
        "end_line": 543,
        "comment": "\n     * Tests RFC 4648 section 10 test vectors.\n     * <ul>\n     * <li>BASE64(\"\") = \"\"</li>\n     * <li>BASE64(\"f\") = \"Zg==\"</li>\n     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n     * </ul>\n     * \n     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n     ",
        "child_ranges": [
            "(line 536,col 9)-(line 536,col 80)",
            "(line 537,col 9)-(line 537,col 85)",
            "(line 538,col 9)-(line 538,col 86)",
            "(line 539,col 9)-(line 539,col 87)",
            "(line 540,col 9)-(line 540,col 92)",
            "(line 541,col 9)-(line 541,col 93)",
            "(line 542,col 9)-(line 542,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf()",
        "snippet": "    public void testRfc4648Section10DecodeWithCrLf() {\n        String CRLF = StringUtils.newStringUsAscii(Base64.CHUNK_SEPARATOR);\n        assertEquals(\"\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"\" + CRLF)));\n        assertEquals(\"f\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zg==\" + CRLF)));\n        assertEquals(\"fo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm8=\" + CRLF)));\n        assertEquals(\"foo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9v\" + CRLF)));\n        assertEquals(\"foob\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYg==\" + CRLF)));\n        assertEquals(\"fooba\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmE=\" + CRLF)));\n        assertEquals(\"foobar\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmFy\" + CRLF)));\n    }",
        "begin_line": 559,
        "end_line": 568,
        "comment": "\n     * Tests RFC 4648 section 10 test vectors.\n     * <ul>\n     * <li>BASE64(\"\") = \"\"</li>\n     * <li>BASE64(\"f\") = \"Zg==\"</li>\n     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n     * </ul>\n     * \n     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n     ",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 75)",
            "(line 561,col 9)-(line 561,col 87)",
            "(line 562,col 9)-(line 562,col 92)",
            "(line 563,col 9)-(line 563,col 93)",
            "(line 564,col 9)-(line 564,col 94)",
            "(line 565,col 9)-(line 565,col 99)",
            "(line 566,col 9)-(line 566,col 100)",
            "(line 567,col 9)-(line 567,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode()",
        "snippet": "    public void testRfc4648Section10Encode() {\n        assertEquals(\"\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"\")));\n        //assertEquals(\"Zg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"f\")));\n        //assertEquals(\"Zm8=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fo\")));\n        //assertEquals(\"Zm9v\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foo\")));\n        //assertEquals(\"Zm9vYg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foob\")));\n        //assertEquals(\"Zm9vYmE=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fooba\")));\n        //assertEquals(\"Zm9vYmFy\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foobar\")));\n    }",
        "begin_line": 584,
        "end_line": 592,
        "comment": "\n     * Tests RFC 4648 section 10 test vectors.\n     * <ul>\n     * <li>BASE64(\"\") = \"\"</li>\n     * <li>BASE64(\"f\") = \"Zg==\"</li>\n     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n     * </ul>\n     * \n     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n     ",
        "child_ranges": [
            "(line 585,col 9)-(line 585,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode()",
        "snippet": "    public void testRfc4648Section10DecodeEncode() {\n        testDecodeEncode(\"\");\n        //testDecodeEncode(\"Zg==\");\n        //testDecodeEncode(\"Zm8=\");\n        //testDecodeEncode(\"Zm9v\");\n        //testDecodeEncode(\"Zm9vYg==\");\n        //testDecodeEncode(\"Zm9vYmE=\");\n        //testDecodeEncode(\"Zm9vYmFy\");\n    }",
        "begin_line": 608,
        "end_line": 616,
        "comment": "\n     * Tests RFC 4648 section 10 test vectors.\n     * <ul>\n     * <li>BASE64(\"\") = \"\"</li>\n     * <li>BASE64(\"f\") = \"Zg==\"</li>\n     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n     * </ul>\n     * \n     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n     ",
        "child_ranges": [
            "(line 609,col 9)-(line 609,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testDecodeEncode(java.lang.String)",
        "snippet": "    private void testDecodeEncode(String encodedText) {\n        String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));\n        String encodedText2 = Base64.encodeBase64String(StringUtils.getBytesUtf8(decodedText));\n        assertEquals(encodedText, encodedText2);\n    }",
        "begin_line": 618,
        "end_line": 622,
        "comment": "",
        "child_ranges": [
            "(line 619,col 9)-(line 619,col 92)",
            "(line 620,col 9)-(line 620,col 95)",
            "(line 621,col 9)-(line 621,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode()",
        "snippet": "    public void testRfc4648Section10EncodeDecode() {\n        testEncodeDecode(\"\");\n        testEncodeDecode(\"f\");\n        testEncodeDecode(\"fo\");\n        testEncodeDecode(\"foo\");\n        testEncodeDecode(\"foob\");\n        testEncodeDecode(\"fooba\");\n        testEncodeDecode(\"foobar\");\n    }",
        "begin_line": 638,
        "end_line": 646,
        "comment": "\n     * Tests RFC 4648 section 10 test vectors.\n     * <ul>\n     * <li>BASE64(\"\") = \"\"</li>\n     * <li>BASE64(\"f\") = \"Zg==\"</li>\n     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n     * </ul>\n     * \n     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n     ",
        "child_ranges": [
            "(line 639,col 9)-(line 639,col 29)",
            "(line 640,col 9)-(line 640,col 30)",
            "(line 641,col 9)-(line 641,col 31)",
            "(line 642,col 9)-(line 642,col 32)",
            "(line 643,col 9)-(line 643,col 33)",
            "(line 644,col 9)-(line 644,col 34)",
            "(line 645,col 9)-(line 645,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testEncodeDecode(java.lang.String)",
        "snippet": "    private void testEncodeDecode(String plainText) {\n        String encodedText = Base64.encodeBase64String(StringUtils.getBytesUtf8(plainText));\n        String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));\n        assertEquals(plainText, decodedText);\n    }",
        "begin_line": 648,
        "end_line": 652,
        "comment": "",
        "child_ranges": [
            "(line 649,col 9)-(line 649,col 92)",
            "(line 650,col 9)-(line 650,col 92)",
            "(line 651,col 9)-(line 651,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testSingletons()",
        "snippet": "    public void testSingletons() {\n        assertEquals(\"AA==\", new String(Base64.encodeBase64(new byte[]{(byte) 0})));\n        assertEquals(\"AQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 1})));\n        assertEquals(\"Ag==\", new String(Base64.encodeBase64(new byte[]{(byte) 2})));\n        assertEquals(\"Aw==\", new String(Base64.encodeBase64(new byte[]{(byte) 3})));\n        assertEquals(\"BA==\", new String(Base64.encodeBase64(new byte[]{(byte) 4})));\n        assertEquals(\"BQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 5})));\n        assertEquals(\"Bg==\", new String(Base64.encodeBase64(new byte[]{(byte) 6})));\n        assertEquals(\"Bw==\", new String(Base64.encodeBase64(new byte[]{(byte) 7})));\n        assertEquals(\"CA==\", new String(Base64.encodeBase64(new byte[]{(byte) 8})));\n        assertEquals(\"CQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 9})));\n        assertEquals(\"Cg==\", new String(Base64.encodeBase64(new byte[]{(byte) 10})));\n        assertEquals(\"Cw==\", new String(Base64.encodeBase64(new byte[]{(byte) 11})));\n        assertEquals(\"DA==\", new String(Base64.encodeBase64(new byte[]{(byte) 12})));\n        assertEquals(\"DQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 13})));\n        assertEquals(\"Dg==\", new String(Base64.encodeBase64(new byte[]{(byte) 14})));\n        assertEquals(\"Dw==\", new String(Base64.encodeBase64(new byte[]{(byte) 15})));\n        assertEquals(\"EA==\", new String(Base64.encodeBase64(new byte[]{(byte) 16})));\n        assertEquals(\"EQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 17})));\n        assertEquals(\"Eg==\", new String(Base64.encodeBase64(new byte[]{(byte) 18})));\n        assertEquals(\"Ew==\", new String(Base64.encodeBase64(new byte[]{(byte) 19})));\n        assertEquals(\"FA==\", new String(Base64.encodeBase64(new byte[]{(byte) 20})));\n        assertEquals(\"FQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 21})));\n        assertEquals(\"Fg==\", new String(Base64.encodeBase64(new byte[]{(byte) 22})));\n        assertEquals(\"Fw==\", new String(Base64.encodeBase64(new byte[]{(byte) 23})));\n        assertEquals(\"GA==\", new String(Base64.encodeBase64(new byte[]{(byte) 24})));\n        assertEquals(\"GQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 25})));\n        assertEquals(\"Gg==\", new String(Base64.encodeBase64(new byte[]{(byte) 26})));\n        assertEquals(\"Gw==\", new String(Base64.encodeBase64(new byte[]{(byte) 27})));\n        assertEquals(\"HA==\", new String(Base64.encodeBase64(new byte[]{(byte) 28})));\n        assertEquals(\"HQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 29})));\n        assertEquals(\"Hg==\", new String(Base64.encodeBase64(new byte[]{(byte) 30})));\n        assertEquals(\"Hw==\", new String(Base64.encodeBase64(new byte[]{(byte) 31})));\n        assertEquals(\"IA==\", new String(Base64.encodeBase64(new byte[]{(byte) 32})));\n        assertEquals(\"IQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 33})));\n        assertEquals(\"Ig==\", new String(Base64.encodeBase64(new byte[]{(byte) 34})));\n        assertEquals(\"Iw==\", new String(Base64.encodeBase64(new byte[]{(byte) 35})));\n        assertEquals(\"JA==\", new String(Base64.encodeBase64(new byte[]{(byte) 36})));\n        assertEquals(\"JQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 37})));\n        assertEquals(\"Jg==\", new String(Base64.encodeBase64(new byte[]{(byte) 38})));\n        assertEquals(\"Jw==\", new String(Base64.encodeBase64(new byte[]{(byte) 39})));\n        assertEquals(\"KA==\", new String(Base64.encodeBase64(new byte[]{(byte) 40})));\n        assertEquals(\"KQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 41})));\n        assertEquals(\"Kg==\", new String(Base64.encodeBase64(new byte[]{(byte) 42})));\n        assertEquals(\"Kw==\", new String(Base64.encodeBase64(new byte[]{(byte) 43})));\n        assertEquals(\"LA==\", new String(Base64.encodeBase64(new byte[]{(byte) 44})));\n        assertEquals(\"LQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 45})));\n        assertEquals(\"Lg==\", new String(Base64.encodeBase64(new byte[]{(byte) 46})));\n        assertEquals(\"Lw==\", new String(Base64.encodeBase64(new byte[]{(byte) 47})));\n        assertEquals(\"MA==\", new String(Base64.encodeBase64(new byte[]{(byte) 48})));\n        assertEquals(\"MQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 49})));\n        assertEquals(\"Mg==\", new String(Base64.encodeBase64(new byte[]{(byte) 50})));\n        assertEquals(\"Mw==\", new String(Base64.encodeBase64(new byte[]{(byte) 51})));\n        assertEquals(\"NA==\", new String(Base64.encodeBase64(new byte[]{(byte) 52})));\n        assertEquals(\"NQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 53})));\n        assertEquals(\"Ng==\", new String(Base64.encodeBase64(new byte[]{(byte) 54})));\n        assertEquals(\"Nw==\", new String(Base64.encodeBase64(new byte[]{(byte) 55})));\n        assertEquals(\"OA==\", new String(Base64.encodeBase64(new byte[]{(byte) 56})));\n        assertEquals(\"OQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 57})));\n        assertEquals(\"Og==\", new String(Base64.encodeBase64(new byte[]{(byte) 58})));\n        assertEquals(\"Ow==\", new String(Base64.encodeBase64(new byte[]{(byte) 59})));\n        assertEquals(\"PA==\", new String(Base64.encodeBase64(new byte[]{(byte) 60})));\n        assertEquals(\"PQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 61})));\n        assertEquals(\"Pg==\", new String(Base64.encodeBase64(new byte[]{(byte) 62})));\n        assertEquals(\"Pw==\", new String(Base64.encodeBase64(new byte[]{(byte) 63})));\n        assertEquals(\"QA==\", new String(Base64.encodeBase64(new byte[]{(byte) 64})));\n        assertEquals(\"QQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 65})));\n        assertEquals(\"Qg==\", new String(Base64.encodeBase64(new byte[]{(byte) 66})));\n        assertEquals(\"Qw==\", new String(Base64.encodeBase64(new byte[]{(byte) 67})));\n        assertEquals(\"RA==\", new String(Base64.encodeBase64(new byte[]{(byte) 68})));\n        assertEquals(\"RQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 69})));\n        assertEquals(\"Rg==\", new String(Base64.encodeBase64(new byte[]{(byte) 70})));\n        assertEquals(\"Rw==\", new String(Base64.encodeBase64(new byte[]{(byte) 71})));\n        assertEquals(\"SA==\", new String(Base64.encodeBase64(new byte[]{(byte) 72})));\n        assertEquals(\"SQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 73})));\n        assertEquals(\"Sg==\", new String(Base64.encodeBase64(new byte[]{(byte) 74})));\n        assertEquals(\"Sw==\", new String(Base64.encodeBase64(new byte[]{(byte) 75})));\n        assertEquals(\"TA==\", new String(Base64.encodeBase64(new byte[]{(byte) 76})));\n        assertEquals(\"TQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 77})));\n        assertEquals(\"Tg==\", new String(Base64.encodeBase64(new byte[]{(byte) 78})));\n        assertEquals(\"Tw==\", new String(Base64.encodeBase64(new byte[]{(byte) 79})));\n        assertEquals(\"UA==\", new String(Base64.encodeBase64(new byte[]{(byte) 80})));\n        assertEquals(\"UQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 81})));\n        assertEquals(\"Ug==\", new String(Base64.encodeBase64(new byte[]{(byte) 82})));\n        assertEquals(\"Uw==\", new String(Base64.encodeBase64(new byte[]{(byte) 83})));\n        assertEquals(\"VA==\", new String(Base64.encodeBase64(new byte[]{(byte) 84})));\n        assertEquals(\"VQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 85})));\n        assertEquals(\"Vg==\", new String(Base64.encodeBase64(new byte[]{(byte) 86})));\n        assertEquals(\"Vw==\", new String(Base64.encodeBase64(new byte[]{(byte) 87})));\n        assertEquals(\"WA==\", new String(Base64.encodeBase64(new byte[]{(byte) 88})));\n        assertEquals(\"WQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 89})));\n        assertEquals(\"Wg==\", new String(Base64.encodeBase64(new byte[]{(byte) 90})));\n        assertEquals(\"Ww==\", new String(Base64.encodeBase64(new byte[]{(byte) 91})));\n        assertEquals(\"XA==\", new String(Base64.encodeBase64(new byte[]{(byte) 92})));\n        assertEquals(\"XQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 93})));\n        assertEquals(\"Xg==\", new String(Base64.encodeBase64(new byte[]{(byte) 94})));\n        assertEquals(\"Xw==\", new String(Base64.encodeBase64(new byte[]{(byte) 95})));\n        assertEquals(\"YA==\", new String(Base64.encodeBase64(new byte[]{(byte) 96})));\n        assertEquals(\"YQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 97})));\n        assertEquals(\"Yg==\", new String(Base64.encodeBase64(new byte[]{(byte) 98})));\n        assertEquals(\"Yw==\", new String(Base64.encodeBase64(new byte[]{(byte) 99})));\n        assertEquals(\"ZA==\", new String(Base64.encodeBase64(new byte[]{(byte) 100})));\n        assertEquals(\"ZQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 101})));\n        assertEquals(\"Zg==\", new String(Base64.encodeBase64(new byte[]{(byte) 102})));\n        assertEquals(\"Zw==\", new String(Base64.encodeBase64(new byte[]{(byte) 103})));\n        assertEquals(\"aA==\", new String(Base64.encodeBase64(new byte[]{(byte) 104})));\n        for (int i = -128; i <= 127; i++) {\n            byte test[] = {(byte) i};\n            assertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));\n        }\n    }",
        "begin_line": 654,
        "end_line": 764,
        "comment": "",
        "child_ranges": [
            "(line 655,col 9)-(line 655,col 84)",
            "(line 656,col 9)-(line 656,col 84)",
            "(line 657,col 9)-(line 657,col 84)",
            "(line 658,col 9)-(line 658,col 84)",
            "(line 659,col 9)-(line 659,col 84)",
            "(line 660,col 9)-(line 660,col 84)",
            "(line 661,col 9)-(line 661,col 84)",
            "(line 662,col 9)-(line 662,col 84)",
            "(line 663,col 9)-(line 663,col 84)",
            "(line 664,col 9)-(line 664,col 84)",
            "(line 665,col 9)-(line 665,col 85)",
            "(line 666,col 9)-(line 666,col 85)",
            "(line 667,col 9)-(line 667,col 85)",
            "(line 668,col 9)-(line 668,col 85)",
            "(line 669,col 9)-(line 669,col 85)",
            "(line 670,col 9)-(line 670,col 85)",
            "(line 671,col 9)-(line 671,col 85)",
            "(line 672,col 9)-(line 672,col 85)",
            "(line 673,col 9)-(line 673,col 85)",
            "(line 674,col 9)-(line 674,col 85)",
            "(line 675,col 9)-(line 675,col 85)",
            "(line 676,col 9)-(line 676,col 85)",
            "(line 677,col 9)-(line 677,col 85)",
            "(line 678,col 9)-(line 678,col 85)",
            "(line 679,col 9)-(line 679,col 85)",
            "(line 680,col 9)-(line 680,col 85)",
            "(line 681,col 9)-(line 681,col 85)",
            "(line 682,col 9)-(line 682,col 85)",
            "(line 683,col 9)-(line 683,col 85)",
            "(line 684,col 9)-(line 684,col 85)",
            "(line 685,col 9)-(line 685,col 85)",
            "(line 686,col 9)-(line 686,col 85)",
            "(line 687,col 9)-(line 687,col 85)",
            "(line 688,col 9)-(line 688,col 85)",
            "(line 689,col 9)-(line 689,col 85)",
            "(line 690,col 9)-(line 690,col 85)",
            "(line 691,col 9)-(line 691,col 85)",
            "(line 692,col 9)-(line 692,col 85)",
            "(line 693,col 9)-(line 693,col 85)",
            "(line 694,col 9)-(line 694,col 85)",
            "(line 695,col 9)-(line 695,col 85)",
            "(line 696,col 9)-(line 696,col 85)",
            "(line 697,col 9)-(line 697,col 85)",
            "(line 698,col 9)-(line 698,col 85)",
            "(line 699,col 9)-(line 699,col 85)",
            "(line 700,col 9)-(line 700,col 85)",
            "(line 701,col 9)-(line 701,col 85)",
            "(line 702,col 9)-(line 702,col 85)",
            "(line 703,col 9)-(line 703,col 85)",
            "(line 704,col 9)-(line 704,col 85)",
            "(line 705,col 9)-(line 705,col 85)",
            "(line 706,col 9)-(line 706,col 85)",
            "(line 707,col 9)-(line 707,col 85)",
            "(line 708,col 9)-(line 708,col 85)",
            "(line 709,col 9)-(line 709,col 85)",
            "(line 710,col 9)-(line 710,col 85)",
            "(line 711,col 9)-(line 711,col 85)",
            "(line 712,col 9)-(line 712,col 85)",
            "(line 713,col 9)-(line 713,col 85)",
            "(line 714,col 9)-(line 714,col 85)",
            "(line 715,col 9)-(line 715,col 85)",
            "(line 716,col 9)-(line 716,col 85)",
            "(line 717,col 9)-(line 717,col 85)",
            "(line 718,col 9)-(line 718,col 85)",
            "(line 719,col 9)-(line 719,col 85)",
            "(line 720,col 9)-(line 720,col 85)",
            "(line 721,col 9)-(line 721,col 85)",
            "(line 722,col 9)-(line 722,col 85)",
            "(line 723,col 9)-(line 723,col 85)",
            "(line 724,col 9)-(line 724,col 85)",
            "(line 725,col 9)-(line 725,col 85)",
            "(line 726,col 9)-(line 726,col 85)",
            "(line 727,col 9)-(line 727,col 85)",
            "(line 728,col 9)-(line 728,col 85)",
            "(line 729,col 9)-(line 729,col 85)",
            "(line 730,col 9)-(line 730,col 85)",
            "(line 731,col 9)-(line 731,col 85)",
            "(line 732,col 9)-(line 732,col 85)",
            "(line 733,col 9)-(line 733,col 85)",
            "(line 734,col 9)-(line 734,col 85)",
            "(line 735,col 9)-(line 735,col 85)",
            "(line 736,col 9)-(line 736,col 85)",
            "(line 737,col 9)-(line 737,col 85)",
            "(line 738,col 9)-(line 738,col 85)",
            "(line 739,col 9)-(line 739,col 85)",
            "(line 740,col 9)-(line 740,col 85)",
            "(line 741,col 9)-(line 741,col 85)",
            "(line 742,col 9)-(line 742,col 85)",
            "(line 743,col 9)-(line 743,col 85)",
            "(line 744,col 9)-(line 744,col 85)",
            "(line 745,col 9)-(line 745,col 85)",
            "(line 746,col 9)-(line 746,col 85)",
            "(line 747,col 9)-(line 747,col 85)",
            "(line 748,col 9)-(line 748,col 85)",
            "(line 749,col 9)-(line 749,col 85)",
            "(line 750,col 9)-(line 750,col 85)",
            "(line 751,col 9)-(line 751,col 85)",
            "(line 752,col 9)-(line 752,col 85)",
            "(line 753,col 9)-(line 753,col 85)",
            "(line 754,col 9)-(line 754,col 85)",
            "(line 755,col 9)-(line 755,col 86)",
            "(line 756,col 9)-(line 756,col 86)",
            "(line 757,col 9)-(line 757,col 86)",
            "(line 758,col 9)-(line 758,col 86)",
            "(line 759,col 9)-(line 759,col 86)",
            "(line 760,col 9)-(line 763,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked()",
        "snippet": "    public void testSingletonsChunked() {\n        assertEquals(\"AA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0})));\n        assertEquals(\"AQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 1})));\n        assertEquals(\"Ag==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 2})));\n        assertEquals(\"Aw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 3})));\n        assertEquals(\"BA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 4})));\n        assertEquals(\"BQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 5})));\n        assertEquals(\"Bg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 6})));\n        assertEquals(\"Bw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 7})));\n        assertEquals(\"CA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 8})));\n        assertEquals(\"CQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 9})));\n        assertEquals(\"Cg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 10})));\n        assertEquals(\"Cw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 11})));\n        assertEquals(\"DA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 12})));\n        assertEquals(\"DQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 13})));\n        assertEquals(\"Dg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 14})));\n        assertEquals(\"Dw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 15})));\n        assertEquals(\"EA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 16})));\n        assertEquals(\"EQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 17})));\n        assertEquals(\"Eg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 18})));\n        assertEquals(\"Ew==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 19})));\n        assertEquals(\"FA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 20})));\n        assertEquals(\"FQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 21})));\n        assertEquals(\"Fg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 22})));\n        assertEquals(\"Fw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 23})));\n        assertEquals(\"GA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 24})));\n        assertEquals(\"GQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 25})));\n        assertEquals(\"Gg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 26})));\n        assertEquals(\"Gw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 27})));\n        assertEquals(\"HA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 28})));\n        assertEquals(\"HQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 29})));\n        assertEquals(\"Hg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 30})));\n        assertEquals(\"Hw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 31})));\n        assertEquals(\"IA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 32})));\n        assertEquals(\"IQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 33})));\n        assertEquals(\"Ig==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 34})));\n        assertEquals(\"Iw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 35})));\n        assertEquals(\"JA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 36})));\n        assertEquals(\"JQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 37})));\n        assertEquals(\"Jg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 38})));\n        assertEquals(\"Jw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 39})));\n        assertEquals(\"KA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 40})));\n        assertEquals(\"KQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 41})));\n        assertEquals(\"Kg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 42})));\n        assertEquals(\"Kw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 43})));\n        assertEquals(\"LA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 44})));\n        assertEquals(\"LQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 45})));\n        assertEquals(\"Lg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 46})));\n        assertEquals(\"Lw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 47})));\n        assertEquals(\"MA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 48})));\n        assertEquals(\"MQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 49})));\n        assertEquals(\"Mg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 50})));\n        assertEquals(\"Mw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 51})));\n        assertEquals(\"NA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 52})));\n        assertEquals(\"NQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 53})));\n        assertEquals(\"Ng==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 54})));\n        assertEquals(\"Nw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 55})));\n        assertEquals(\"OA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 56})));\n        assertEquals(\"OQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 57})));\n        assertEquals(\"Og==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 58})));\n        assertEquals(\"Ow==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 59})));\n        assertEquals(\"PA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 60})));\n        assertEquals(\"PQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 61})));\n        assertEquals(\"Pg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 62})));\n        assertEquals(\"Pw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 63})));\n        assertEquals(\"QA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 64})));\n        assertEquals(\"QQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 65})));\n        assertEquals(\"Qg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 66})));\n        assertEquals(\"Qw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 67})));\n        assertEquals(\"RA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 68})));\n        assertEquals(\"RQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 69})));\n        assertEquals(\"Rg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 70})));\n        assertEquals(\"Rw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 71})));\n        assertEquals(\"SA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 72})));\n        assertEquals(\"SQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 73})));\n        assertEquals(\"Sg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 74})));\n        assertEquals(\"Sw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 75})));\n        assertEquals(\"TA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 76})));\n        assertEquals(\"TQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 77})));\n        assertEquals(\"Tg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 78})));\n        assertEquals(\"Tw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 79})));\n        assertEquals(\"UA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 80})));\n        assertEquals(\"UQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 81})));\n        assertEquals(\"Ug==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 82})));\n        assertEquals(\"Uw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 83})));\n        assertEquals(\"VA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 84})));\n        assertEquals(\"VQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 85})));\n        assertEquals(\"Vg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 86})));\n        assertEquals(\"Vw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 87})));\n        assertEquals(\"WA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 88})));\n        assertEquals(\"WQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 89})));\n        assertEquals(\"Wg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 90})));\n        assertEquals(\"Ww==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 91})));\n        assertEquals(\"XA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 92})));\n        assertEquals(\"XQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 93})));\n        assertEquals(\"Xg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 94})));\n        assertEquals(\"Xw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 95})));\n        assertEquals(\"YA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 96})));\n        assertEquals(\"YQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 97})));\n        assertEquals(\"Yg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 98})));\n        assertEquals(\"Yw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 99})));\n        assertEquals(\"ZA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 100})));\n        assertEquals(\"ZQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 101})));\n        assertEquals(\"Zg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 102})));\n        assertEquals(\"Zw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 103})));\n        assertEquals(\"aA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 104})));\n    }",
        "begin_line": 766,
        "end_line": 872,
        "comment": "",
        "child_ranges": [
            "(line 767,col 9)-(line 767,col 95)",
            "(line 768,col 9)-(line 768,col 95)",
            "(line 769,col 9)-(line 769,col 95)",
            "(line 770,col 9)-(line 770,col 95)",
            "(line 771,col 9)-(line 771,col 95)",
            "(line 772,col 9)-(line 772,col 95)",
            "(line 773,col 9)-(line 773,col 95)",
            "(line 774,col 9)-(line 774,col 95)",
            "(line 775,col 9)-(line 775,col 95)",
            "(line 776,col 9)-(line 776,col 95)",
            "(line 777,col 9)-(line 777,col 96)",
            "(line 778,col 9)-(line 778,col 96)",
            "(line 779,col 9)-(line 779,col 96)",
            "(line 780,col 9)-(line 780,col 96)",
            "(line 781,col 9)-(line 781,col 96)",
            "(line 782,col 9)-(line 782,col 96)",
            "(line 783,col 9)-(line 783,col 96)",
            "(line 784,col 9)-(line 784,col 96)",
            "(line 785,col 9)-(line 785,col 96)",
            "(line 786,col 9)-(line 786,col 96)",
            "(line 787,col 9)-(line 787,col 96)",
            "(line 788,col 9)-(line 788,col 96)",
            "(line 789,col 9)-(line 789,col 96)",
            "(line 790,col 9)-(line 790,col 96)",
            "(line 791,col 9)-(line 791,col 96)",
            "(line 792,col 9)-(line 792,col 96)",
            "(line 793,col 9)-(line 793,col 96)",
            "(line 794,col 9)-(line 794,col 96)",
            "(line 795,col 9)-(line 795,col 96)",
            "(line 796,col 9)-(line 796,col 96)",
            "(line 797,col 9)-(line 797,col 96)",
            "(line 798,col 9)-(line 798,col 96)",
            "(line 799,col 9)-(line 799,col 96)",
            "(line 800,col 9)-(line 800,col 96)",
            "(line 801,col 9)-(line 801,col 96)",
            "(line 802,col 9)-(line 802,col 96)",
            "(line 803,col 9)-(line 803,col 96)",
            "(line 804,col 9)-(line 804,col 96)",
            "(line 805,col 9)-(line 805,col 96)",
            "(line 806,col 9)-(line 806,col 96)",
            "(line 807,col 9)-(line 807,col 96)",
            "(line 808,col 9)-(line 808,col 96)",
            "(line 809,col 9)-(line 809,col 96)",
            "(line 810,col 9)-(line 810,col 96)",
            "(line 811,col 9)-(line 811,col 96)",
            "(line 812,col 9)-(line 812,col 96)",
            "(line 813,col 9)-(line 813,col 96)",
            "(line 814,col 9)-(line 814,col 96)",
            "(line 815,col 9)-(line 815,col 96)",
            "(line 816,col 9)-(line 816,col 96)",
            "(line 817,col 9)-(line 817,col 96)",
            "(line 818,col 9)-(line 818,col 96)",
            "(line 819,col 9)-(line 819,col 96)",
            "(line 820,col 9)-(line 820,col 96)",
            "(line 821,col 9)-(line 821,col 96)",
            "(line 822,col 9)-(line 822,col 96)",
            "(line 823,col 9)-(line 823,col 96)",
            "(line 824,col 9)-(line 824,col 96)",
            "(line 825,col 9)-(line 825,col 96)",
            "(line 826,col 9)-(line 826,col 96)",
            "(line 827,col 9)-(line 827,col 96)",
            "(line 828,col 9)-(line 828,col 96)",
            "(line 829,col 9)-(line 829,col 96)",
            "(line 830,col 9)-(line 830,col 96)",
            "(line 831,col 9)-(line 831,col 96)",
            "(line 832,col 9)-(line 832,col 96)",
            "(line 833,col 9)-(line 833,col 96)",
            "(line 834,col 9)-(line 834,col 96)",
            "(line 835,col 9)-(line 835,col 96)",
            "(line 836,col 9)-(line 836,col 96)",
            "(line 837,col 9)-(line 837,col 96)",
            "(line 838,col 9)-(line 838,col 96)",
            "(line 839,col 9)-(line 839,col 96)",
            "(line 840,col 9)-(line 840,col 96)",
            "(line 841,col 9)-(line 841,col 96)",
            "(line 842,col 9)-(line 842,col 96)",
            "(line 843,col 9)-(line 843,col 96)",
            "(line 844,col 9)-(line 844,col 96)",
            "(line 845,col 9)-(line 845,col 96)",
            "(line 846,col 9)-(line 846,col 96)",
            "(line 847,col 9)-(line 847,col 96)",
            "(line 848,col 9)-(line 848,col 96)",
            "(line 849,col 9)-(line 849,col 96)",
            "(line 850,col 9)-(line 850,col 96)",
            "(line 851,col 9)-(line 851,col 96)",
            "(line 852,col 9)-(line 852,col 96)",
            "(line 853,col 9)-(line 853,col 96)",
            "(line 854,col 9)-(line 854,col 96)",
            "(line 855,col 9)-(line 855,col 96)",
            "(line 856,col 9)-(line 856,col 96)",
            "(line 857,col 9)-(line 857,col 96)",
            "(line 858,col 9)-(line 858,col 96)",
            "(line 859,col 9)-(line 859,col 96)",
            "(line 860,col 9)-(line 860,col 96)",
            "(line 861,col 9)-(line 861,col 96)",
            "(line 862,col 9)-(line 862,col 96)",
            "(line 863,col 9)-(line 863,col 96)",
            "(line 864,col 9)-(line 864,col 96)",
            "(line 865,col 9)-(line 865,col 96)",
            "(line 866,col 9)-(line 866,col 96)",
            "(line 867,col 9)-(line 867,col 97)",
            "(line 868,col 9)-(line 868,col 97)",
            "(line 869,col 9)-(line 869,col 97)",
            "(line 870,col 9)-(line 870,col 97)",
            "(line 871,col 9)-(line 871,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testTriplets()",
        "snippet": "    public void testTriplets() {\n        assertEquals(\"AAAA\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 0})));\n        assertEquals(\"AAAB\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 1})));\n        assertEquals(\"AAAC\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 2})));\n        assertEquals(\"AAAD\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 3})));\n        assertEquals(\"AAAE\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 4})));\n        assertEquals(\"AAAF\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 5})));\n        assertEquals(\"AAAG\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 6})));\n        assertEquals(\"AAAH\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 7})));\n        assertEquals(\"AAAI\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 8})));\n        assertEquals(\"AAAJ\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 9})));\n        assertEquals(\"AAAK\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 10})));\n        assertEquals(\"AAAL\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 11})));\n        assertEquals(\"AAAM\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 12})));\n        assertEquals(\"AAAN\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 13})));\n        assertEquals(\"AAAO\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 14})));\n        assertEquals(\"AAAP\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 15})));\n        assertEquals(\"AAAQ\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 16})));\n        assertEquals(\"AAAR\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 17})));\n        assertEquals(\"AAAS\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 18})));\n        assertEquals(\"AAAT\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 19})));\n        assertEquals(\"AAAU\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 20})));\n        assertEquals(\"AAAV\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 21})));\n        assertEquals(\"AAAW\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 22})));\n        assertEquals(\"AAAX\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 23})));\n        assertEquals(\"AAAY\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 24})));\n        assertEquals(\"AAAZ\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 25})));\n        assertEquals(\"AAAa\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 26})));\n        assertEquals(\"AAAb\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 27})));\n        assertEquals(\"AAAc\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 28})));\n        assertEquals(\"AAAd\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 29})));\n        assertEquals(\"AAAe\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 30})));\n        assertEquals(\"AAAf\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 31})));\n        assertEquals(\"AAAg\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 32})));\n        assertEquals(\"AAAh\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 33})));\n        assertEquals(\"AAAi\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 34})));\n        assertEquals(\"AAAj\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 35})));\n        assertEquals(\"AAAk\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 36})));\n        assertEquals(\"AAAl\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 37})));\n        assertEquals(\"AAAm\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 38})));\n        assertEquals(\"AAAn\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 39})));\n        assertEquals(\"AAAo\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 40})));\n        assertEquals(\"AAAp\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 41})));\n        assertEquals(\"AAAq\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 42})));\n        assertEquals(\"AAAr\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 43})));\n        assertEquals(\"AAAs\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 44})));\n        assertEquals(\"AAAt\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 45})));\n        assertEquals(\"AAAu\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 46})));\n        assertEquals(\"AAAv\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 47})));\n        assertEquals(\"AAAw\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 48})));\n        assertEquals(\"AAAx\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 49})));\n        assertEquals(\"AAAy\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 50})));\n        assertEquals(\"AAAz\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 51})));\n        assertEquals(\"AAA0\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 52})));\n        assertEquals(\"AAA1\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 53})));\n        assertEquals(\"AAA2\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 54})));\n        assertEquals(\"AAA3\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 55})));\n        assertEquals(\"AAA4\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 56})));\n        assertEquals(\"AAA5\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 57})));\n        assertEquals(\"AAA6\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 58})));\n        assertEquals(\"AAA7\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 59})));\n        assertEquals(\"AAA8\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 60})));\n        assertEquals(\"AAA9\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 61})));\n        assertEquals(\"AAA+\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 62})));\n        assertEquals(\"AAA/\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 63})));\n    }",
        "begin_line": 874,
        "end_line": 939,
        "comment": "",
        "child_ranges": [
            "(line 875,col 9)-(line 875,col 104)",
            "(line 876,col 9)-(line 876,col 104)",
            "(line 877,col 9)-(line 877,col 104)",
            "(line 878,col 9)-(line 878,col 104)",
            "(line 879,col 9)-(line 879,col 104)",
            "(line 880,col 9)-(line 880,col 104)",
            "(line 881,col 9)-(line 881,col 104)",
            "(line 882,col 9)-(line 882,col 104)",
            "(line 883,col 9)-(line 883,col 104)",
            "(line 884,col 9)-(line 884,col 104)",
            "(line 885,col 9)-(line 885,col 105)",
            "(line 886,col 9)-(line 886,col 105)",
            "(line 887,col 9)-(line 887,col 105)",
            "(line 888,col 9)-(line 888,col 105)",
            "(line 889,col 9)-(line 889,col 105)",
            "(line 890,col 9)-(line 890,col 105)",
            "(line 891,col 9)-(line 891,col 105)",
            "(line 892,col 9)-(line 892,col 105)",
            "(line 893,col 9)-(line 893,col 105)",
            "(line 894,col 9)-(line 894,col 105)",
            "(line 895,col 9)-(line 895,col 105)",
            "(line 896,col 9)-(line 896,col 105)",
            "(line 897,col 9)-(line 897,col 105)",
            "(line 898,col 9)-(line 898,col 105)",
            "(line 899,col 9)-(line 899,col 105)",
            "(line 900,col 9)-(line 900,col 105)",
            "(line 901,col 9)-(line 901,col 105)",
            "(line 902,col 9)-(line 902,col 105)",
            "(line 903,col 9)-(line 903,col 105)",
            "(line 904,col 9)-(line 904,col 105)",
            "(line 905,col 9)-(line 905,col 105)",
            "(line 906,col 9)-(line 906,col 105)",
            "(line 907,col 9)-(line 907,col 105)",
            "(line 908,col 9)-(line 908,col 105)",
            "(line 909,col 9)-(line 909,col 105)",
            "(line 910,col 9)-(line 910,col 105)",
            "(line 911,col 9)-(line 911,col 105)",
            "(line 912,col 9)-(line 912,col 105)",
            "(line 913,col 9)-(line 913,col 105)",
            "(line 914,col 9)-(line 914,col 105)",
            "(line 915,col 9)-(line 915,col 105)",
            "(line 916,col 9)-(line 916,col 105)",
            "(line 917,col 9)-(line 917,col 105)",
            "(line 918,col 9)-(line 918,col 105)",
            "(line 919,col 9)-(line 919,col 105)",
            "(line 920,col 9)-(line 920,col 105)",
            "(line 921,col 9)-(line 921,col 105)",
            "(line 922,col 9)-(line 922,col 105)",
            "(line 923,col 9)-(line 923,col 105)",
            "(line 924,col 9)-(line 924,col 105)",
            "(line 925,col 9)-(line 925,col 105)",
            "(line 926,col 9)-(line 926,col 105)",
            "(line 927,col 9)-(line 927,col 105)",
            "(line 928,col 9)-(line 928,col 105)",
            "(line 929,col 9)-(line 929,col 105)",
            "(line 930,col 9)-(line 930,col 105)",
            "(line 931,col 9)-(line 931,col 105)",
            "(line 932,col 9)-(line 932,col 105)",
            "(line 933,col 9)-(line 933,col 105)",
            "(line 934,col 9)-(line 934,col 105)",
            "(line 935,col 9)-(line 935,col 105)",
            "(line 936,col 9)-(line 936,col 105)",
            "(line 937,col 9)-(line 937,col 105)",
            "(line 938,col 9)-(line 938,col 105)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testTripletsChunked()",
        "snippet": "    public void testTripletsChunked() {\n        assertEquals(\"AAAA\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 0})));\n        assertEquals(\"AAAB\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 1})));\n        assertEquals(\"AAAC\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 2})));\n        assertEquals(\"AAAD\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 3})));\n        assertEquals(\"AAAE\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 4})));\n        assertEquals(\"AAAF\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 5})));\n        assertEquals(\"AAAG\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 6})));\n        assertEquals(\"AAAH\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 7})));\n        assertEquals(\"AAAI\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 8})));\n        assertEquals(\"AAAJ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 9})));\n        assertEquals(\"AAAK\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 10})));\n        assertEquals(\"AAAL\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 11})));\n        assertEquals(\"AAAM\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 12})));\n        assertEquals(\"AAAN\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 13})));\n        assertEquals(\"AAAO\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 14})));\n        assertEquals(\"AAAP\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 15})));\n        assertEquals(\"AAAQ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 16})));\n        assertEquals(\"AAAR\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 17})));\n        assertEquals(\"AAAS\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 18})));\n        assertEquals(\"AAAT\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 19})));\n        assertEquals(\"AAAU\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 20})));\n        assertEquals(\"AAAV\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 21})));\n        assertEquals(\"AAAW\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 22})));\n        assertEquals(\"AAAX\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 23})));\n        assertEquals(\"AAAY\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 24})));\n        assertEquals(\"AAAZ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 25})));\n        assertEquals(\"AAAa\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 26})));\n        assertEquals(\"AAAb\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 27})));\n        assertEquals(\"AAAc\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 28})));\n        assertEquals(\"AAAd\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 29})));\n        assertEquals(\"AAAe\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 30})));\n        assertEquals(\"AAAf\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 31})));\n        assertEquals(\"AAAg\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 32})));\n        assertEquals(\"AAAh\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 33})));\n        assertEquals(\"AAAi\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 34})));\n        assertEquals(\"AAAj\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 35})));\n        assertEquals(\"AAAk\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 36})));\n        assertEquals(\"AAAl\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 37})));\n        assertEquals(\"AAAm\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 38})));\n        assertEquals(\"AAAn\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 39})));\n        assertEquals(\"AAAo\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 40})));\n        assertEquals(\"AAAp\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 41})));\n        assertEquals(\"AAAq\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 42})));\n        assertEquals(\"AAAr\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 43})));\n        assertEquals(\"AAAs\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 44})));\n        assertEquals(\"AAAt\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 45})));\n        assertEquals(\"AAAu\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 46})));\n        assertEquals(\"AAAv\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 47})));\n        assertEquals(\"AAAw\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 48})));\n        assertEquals(\"AAAx\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 49})));\n        assertEquals(\"AAAy\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 50})));\n        assertEquals(\"AAAz\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 51})));\n        assertEquals(\"AAA0\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 52})));\n        assertEquals(\"AAA1\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 53})));\n        assertEquals(\"AAA2\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 54})));\n        assertEquals(\"AAA3\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 55})));\n        assertEquals(\"AAA4\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 56})));\n        assertEquals(\"AAA5\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 57})));\n        assertEquals(\"AAA6\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 58})));\n        assertEquals(\"AAA7\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 59})));\n        assertEquals(\"AAA8\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 60})));\n        assertEquals(\"AAA9\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 61})));\n        assertEquals(\"AAA+\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 62})));\n        assertEquals(\"AAA/\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 63})));\n    }",
        "begin_line": 941,
        "end_line": 1006,
        "comment": "",
        "child_ranges": [
            "(line 942,col 9)-(line 942,col 115)",
            "(line 943,col 9)-(line 943,col 115)",
            "(line 944,col 9)-(line 944,col 115)",
            "(line 945,col 9)-(line 945,col 115)",
            "(line 946,col 9)-(line 946,col 115)",
            "(line 947,col 9)-(line 947,col 115)",
            "(line 948,col 9)-(line 948,col 115)",
            "(line 949,col 9)-(line 949,col 115)",
            "(line 950,col 9)-(line 950,col 115)",
            "(line 951,col 9)-(line 951,col 115)",
            "(line 952,col 9)-(line 952,col 116)",
            "(line 953,col 9)-(line 953,col 116)",
            "(line 954,col 9)-(line 954,col 116)",
            "(line 955,col 9)-(line 955,col 116)",
            "(line 956,col 9)-(line 956,col 116)",
            "(line 957,col 9)-(line 957,col 116)",
            "(line 958,col 9)-(line 958,col 116)",
            "(line 959,col 9)-(line 959,col 116)",
            "(line 960,col 9)-(line 960,col 116)",
            "(line 961,col 9)-(line 961,col 116)",
            "(line 962,col 9)-(line 962,col 116)",
            "(line 963,col 9)-(line 963,col 116)",
            "(line 964,col 9)-(line 964,col 116)",
            "(line 965,col 9)-(line 965,col 116)",
            "(line 966,col 9)-(line 966,col 116)",
            "(line 967,col 9)-(line 967,col 116)",
            "(line 968,col 9)-(line 968,col 116)",
            "(line 969,col 9)-(line 969,col 116)",
            "(line 970,col 9)-(line 970,col 116)",
            "(line 971,col 9)-(line 971,col 116)",
            "(line 972,col 9)-(line 972,col 116)",
            "(line 973,col 9)-(line 973,col 116)",
            "(line 974,col 9)-(line 974,col 116)",
            "(line 975,col 9)-(line 975,col 116)",
            "(line 976,col 9)-(line 976,col 116)",
            "(line 977,col 9)-(line 977,col 116)",
            "(line 978,col 9)-(line 978,col 116)",
            "(line 979,col 9)-(line 979,col 116)",
            "(line 980,col 9)-(line 980,col 116)",
            "(line 981,col 9)-(line 981,col 116)",
            "(line 982,col 9)-(line 982,col 116)",
            "(line 983,col 9)-(line 983,col 116)",
            "(line 984,col 9)-(line 984,col 116)",
            "(line 985,col 9)-(line 985,col 116)",
            "(line 986,col 9)-(line 986,col 116)",
            "(line 987,col 9)-(line 987,col 116)",
            "(line 988,col 9)-(line 988,col 116)",
            "(line 989,col 9)-(line 989,col 116)",
            "(line 990,col 9)-(line 990,col 116)",
            "(line 991,col 9)-(line 991,col 116)",
            "(line 992,col 9)-(line 992,col 116)",
            "(line 993,col 9)-(line 993,col 116)",
            "(line 994,col 9)-(line 994,col 116)",
            "(line 995,col 9)-(line 995,col 116)",
            "(line 996,col 9)-(line 996,col 116)",
            "(line 997,col 9)-(line 997,col 116)",
            "(line 998,col 9)-(line 998,col 116)",
            "(line 999,col 9)-(line 999,col 116)",
            "(line 1000,col 9)-(line 1000,col 116)",
            "(line 1001,col 9)-(line 1001,col 116)",
            "(line 1002,col 9)-(line 1002,col 116)",
            "(line 1003,col 9)-(line 1003,col 116)",
            "(line 1004,col 9)-(line 1004,col 116)",
            "(line 1005,col 9)-(line 1005,col 116)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testUrlSafe()",
        "snippet": "    public void testUrlSafe() {\n        // test random data of sizes 0 thru 150\n        for (int i = 0; i <= 150; i++) {\n            byte[][] randomData = Base64TestData.randomData(i, true);\n            byte[] encoded = randomData[1];\n            byte[] decoded = randomData[0];\n            byte[] result = Base64.decodeBase64(encoded);\n            assertTrue(\"url-safe i=\" + i, Arrays.equals(decoded, result));\n            assertFalse(\"url-safe i=\" + i + \" no '='\", Base64TestData.bytesContain(encoded, (byte) '='));\n            assertFalse(\"url-safe i=\" + i + \" no '\\\\'\", Base64TestData.bytesContain(encoded, (byte) '\\\\'));\n            assertFalse(\"url-safe i=\" + i + \" no '+'\", Base64TestData.bytesContain(encoded, (byte) '+'));\n        }\n\n    }",
        "begin_line": 1011,
        "end_line": 1024,
        "comment": "\n     * Tests url-safe Base64 against random data, sizes 0 to 150.\n     ",
        "child_ranges": [
            "(line 1013,col 9)-(line 1022,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testUUID()",
        "snippet": "    public void testUUID() throws DecoderException {\n        // The 4 UUID's below contains mixtures of + and / to help us test the\n        // URL-SAFE encoding mode.\n        byte[][] ids = new byte[4][];\n\n        // ids[0] was chosen so that it encodes with at least one +.\n        ids[0] = Hex.decodeHex(\"94ed8d0319e4493399560fb67404d370\".toCharArray());\n\n        // ids[1] was chosen so that it encodes with both / and +.\n        ids[1] = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\".toCharArray());\n\n        // ids[2] was chosen so that it encodes with at least one /.\n        ids[2] = Hex.decodeHex(\"64be154b6ffa40258d1a01288e7c31ca\".toCharArray());\n\n        // ids[3] was chosen so that it encodes with both / and +, with /\n        // right at the beginning.\n        ids[3] = Hex.decodeHex(\"ff7f8fc01cdb471a8c8b5a9306183fe8\".toCharArray());\n\n        byte[][] standard = new byte[4][];\n        standard[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg+2dATTcA==\");\n        standard[1] = StringUtils.getBytesUtf8(\"K/fMJwH+Q5e0nr7tWsxwkA==\");\n        standard[2] = StringUtils.getBytesUtf8(\"ZL4VS2/6QCWNGgEojnwxyg==\");\n        standard[3] = StringUtils.getBytesUtf8(\"/3+PwBzbRxqMi1qTBhg/6A==\");\n\n        byte[][] urlSafe1 = new byte[4][];\n        // regular padding (two '==' signs).\n        urlSafe1[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA==\");\n        urlSafe1[1] = StringUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA==\");\n        urlSafe1[2] = StringUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg==\");\n        urlSafe1[3] = StringUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A==\");\n\n        byte[][] urlSafe2 = new byte[4][];\n        // single padding (only one '=' sign).\n        urlSafe2[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA=\");\n        urlSafe2[1] = StringUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA=\");\n        urlSafe2[2] = StringUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg=\");\n        urlSafe2[3] = StringUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A=\");\n\n        byte[][] urlSafe3 = new byte[4][];\n        // no padding (no '=' signs).\n        urlSafe3[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA\");\n        urlSafe3[1] = StringUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA\");\n        urlSafe3[2] = StringUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg\");\n        urlSafe3[3] = StringUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A\");\n\n        for (int i = 0; i < 4; i++) {\n            byte[] encodedStandard = Base64.encodeBase64(ids[i]);\n            byte[] encodedUrlSafe = Base64.encodeBase64URLSafe(ids[i]);\n            byte[] decodedStandard = Base64.decodeBase64(standard[i]);\n            byte[] decodedUrlSafe1 = Base64.decodeBase64(urlSafe1[i]);\n            byte[] decodedUrlSafe2 = Base64.decodeBase64(urlSafe2[i]);\n            byte[] decodedUrlSafe3 = Base64.decodeBase64(urlSafe3[i]);\n\n            // Very important debugging output should anyone\n            // ever need to delve closely into this stuff.\n            if (false) {\n                System.out.println(\"reference: [\" + Hex.encodeHexString(ids[i]) + \"]\");\n                System.out.println(\"standard:  [\" +\n                        Hex.encodeHexString(decodedStandard) +\n                    \"] From: [\" +\n                    StringUtils.newStringUtf8(standard[i]) +\n                    \"]\");\n                System.out.println(\"safe1:     [\" +\n                        Hex.encodeHexString(decodedUrlSafe1) +\n                    \"] From: [\" +\n                    StringUtils.newStringUtf8(urlSafe1[i]) +\n                    \"]\");\n                System.out.println(\"safe2:     [\" +\n                        Hex.encodeHexString(decodedUrlSafe2) +\n                    \"] From: [\" +\n                    StringUtils.newStringUtf8(urlSafe2[i]) +\n                    \"]\");\n                System.out.println(\"safe3:     [\" +\n                        Hex.encodeHexString(decodedUrlSafe3) +\n                    \"] From: [\" +\n                    StringUtils.newStringUtf8(urlSafe3[i]) +\n                    \"]\");\n            }\n\n            assertTrue(\"standard encode uuid\", Arrays.equals(encodedStandard, standard[i]));\n            assertTrue(\"url-safe encode uuid\", Arrays.equals(encodedUrlSafe, urlSafe3[i]));\n            assertTrue(\"standard decode uuid\", Arrays.equals(decodedStandard, ids[i]));\n            assertTrue(\"url-safe1 decode uuid\", Arrays.equals(decodedUrlSafe1, ids[i]));\n            assertTrue(\"url-safe2 decode uuid\", Arrays.equals(decodedUrlSafe2, ids[i]));\n            assertTrue(\"url-safe3 decode uuid\", Arrays.equals(decodedUrlSafe3, ids[i]));\n        }\n    }",
        "begin_line": 1033,
        "end_line": 1119,
        "comment": "\n     * Base64 encoding of UUID's is a common use-case, especially in URL-SAFE mode. This test case ends up being the\n     * \"URL-SAFE\" JUnit's.\n     * \n     * @throws DecoderException\n     *             if Hex.decode() fails - a serious problem since Hex comes from our own commons-codec!\n     ",
        "child_ranges": [
            "(line 1036,col 9)-(line 1036,col 37)",
            "(line 1039,col 9)-(line 1039,col 81)",
            "(line 1042,col 9)-(line 1042,col 81)",
            "(line 1045,col 9)-(line 1045,col 81)",
            "(line 1049,col 9)-(line 1049,col 81)",
            "(line 1051,col 9)-(line 1051,col 42)",
            "(line 1052,col 9)-(line 1052,col 75)",
            "(line 1053,col 9)-(line 1053,col 75)",
            "(line 1054,col 9)-(line 1054,col 75)",
            "(line 1055,col 9)-(line 1055,col 75)",
            "(line 1057,col 9)-(line 1057,col 42)",
            "(line 1059,col 9)-(line 1059,col 75)",
            "(line 1060,col 9)-(line 1060,col 75)",
            "(line 1061,col 9)-(line 1061,col 75)",
            "(line 1062,col 9)-(line 1062,col 75)",
            "(line 1064,col 9)-(line 1064,col 42)",
            "(line 1066,col 9)-(line 1066,col 74)",
            "(line 1067,col 9)-(line 1067,col 74)",
            "(line 1068,col 9)-(line 1068,col 74)",
            "(line 1069,col 9)-(line 1069,col 74)",
            "(line 1071,col 9)-(line 1071,col 42)",
            "(line 1073,col 9)-(line 1073,col 73)",
            "(line 1074,col 9)-(line 1074,col 73)",
            "(line 1075,col 9)-(line 1075,col 73)",
            "(line 1076,col 9)-(line 1076,col 73)",
            "(line 1078,col 9)-(line 1118,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations()",
        "snippet": "    public void testByteToStringVariations() throws DecoderException {\n        Base64 base64 = new Base64(0);\n        byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n        byte[] b2 = new byte[0];\n        byte[] b3 = null;\n        byte[] b4 = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\".toCharArray());  // for url-safe tests\n\n        assertEquals(\"byteToString Hello World\", \"SGVsbG8gV29ybGQ=\", base64.encodeToString(b1));\n        assertEquals(\"byteToString static Hello World\", \"SGVsbG8gV29ybGQ=\\r\\n\", Base64.encodeBase64String(b1));\n        assertEquals(\"byteToString \\\"\\\"\", \"\", base64.encodeToString(b2));\n        assertEquals(\"byteToString static \\\"\\\"\", \"\", Base64.encodeBase64String(b2));\n        assertEquals(\"byteToString null\", null, base64.encodeToString(b3));\n        assertEquals(\"byteToString static null\", null, Base64.encodeBase64String(b3));\n        assertEquals(\"byteToString UUID\", \"K/fMJwH+Q5e0nr7tWsxwkA==\", base64.encodeToString(b4));\n        assertEquals(\"byteToString static UUID\", \"K/fMJwH+Q5e0nr7tWsxwkA==\\r\\n\", Base64.encodeBase64String(b4));\n        assertEquals(\"byteToString static-url-safe UUID\", \"K_fMJwH-Q5e0nr7tWsxwkA\", Base64.encodeBase64URLSafeString(b4));\n    }",
        "begin_line": 1121,
        "end_line": 1137,
        "comment": "",
        "child_ranges": [
            "(line 1122,col 9)-(line 1122,col 38)",
            "(line 1123,col 9)-(line 1123,col 60)",
            "(line 1124,col 9)-(line 1124,col 32)",
            "(line 1125,col 9)-(line 1125,col 25)",
            "(line 1126,col 9)-(line 1126,col 84)",
            "(line 1128,col 9)-(line 1128,col 96)",
            "(line 1129,col 9)-(line 1129,col 111)",
            "(line 1130,col 9)-(line 1130,col 73)",
            "(line 1131,col 9)-(line 1131,col 84)",
            "(line 1132,col 9)-(line 1132,col 75)",
            "(line 1133,col 9)-(line 1133,col 86)",
            "(line 1134,col 9)-(line 1134,col 97)",
            "(line 1135,col 9)-(line 1135,col 112)",
            "(line 1136,col 9)-(line 1136,col 122)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations()",
        "snippet": "    public void testStringToByteVariations() throws DecoderException {\n        Base64 base64 = new Base64();\n        String s1 = \"SGVsbG8gV29ybGQ=\\r\\n\";\n        String s2 = \"\";\n        String s3 = null;\n        String s4a = \"K/fMJwH+Q5e0nr7tWsxwkA==\\r\\n\";\n        String s4b = \"K_fMJwH-Q5e0nr7tWsxwkA\";\n        byte[] b4 = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\".toCharArray());  // for url-safe tests\n\n        assertEquals(\"StringToByte Hello World\", \"Hello World\", StringUtils.newStringUtf8(base64.decode(s1)));\n        assertEquals(\"StringToByte Hello World\", \"Hello World\", StringUtils.newStringUtf8((byte[])base64.decode((Object)s1)));\n        assertEquals(\"StringToByte static Hello World\", \"Hello World\", StringUtils.newStringUtf8(Base64.decodeBase64(s1)));\n        assertEquals(\"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(base64.decode(s2)));\n        assertEquals(\"StringToByte static \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base64.decodeBase64(s2)));\n        assertEquals(\"StringToByte null\", null, StringUtils.newStringUtf8(base64.decode(s3)));\n        assertEquals(\"StringToByte static null\", null, StringUtils.newStringUtf8(Base64.decodeBase64(s3)));\n        assertTrue(\"StringToByte UUID\", Arrays.equals(b4, base64.decode(s4b)));\n        assertTrue(\"StringToByte static UUID\", Arrays.equals(b4, Base64.decodeBase64(s4a)));\n        assertTrue(\"StringToByte static-url-safe UUID\", Arrays.equals(b4, Base64.decodeBase64(s4b)));\n    }",
        "begin_line": 1139,
        "end_line": 1158,
        "comment": "",
        "child_ranges": [
            "(line 1140,col 9)-(line 1140,col 37)",
            "(line 1141,col 9)-(line 1141,col 43)",
            "(line 1142,col 9)-(line 1142,col 23)",
            "(line 1143,col 9)-(line 1143,col 25)",
            "(line 1144,col 9)-(line 1144,col 52)",
            "(line 1145,col 9)-(line 1145,col 46)",
            "(line 1146,col 9)-(line 1146,col 84)",
            "(line 1148,col 9)-(line 1148,col 110)",
            "(line 1149,col 9)-(line 1149,col 126)",
            "(line 1150,col 9)-(line 1150,col 123)",
            "(line 1151,col 9)-(line 1151,col 92)",
            "(line 1152,col 9)-(line 1152,col 105)",
            "(line 1153,col 9)-(line 1153,col 94)",
            "(line 1154,col 9)-(line 1154,col 107)",
            "(line 1155,col 9)-(line 1155,col 79)",
            "(line 1156,col 9)-(line 1156,col 92)",
            "(line 1157,col 9)-(line 1157,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.toString(byte[])",
        "snippet": "    private String toString(byte[] data) {\n        StringBuffer buf = new StringBuffer();\n        for (int i = 0; i < data.length; i++) {\n            buf.append(data[i]);\n            if (i != data.length - 1) {\n                buf.append(\",\");\n            }\n        }\n        return buf.toString();\n    }",
        "begin_line": 1160,
        "end_line": 1169,
        "comment": "",
        "child_ranges": [
            "(line 1161,col 9)-(line 1161,col 46)",
            "(line 1162,col 9)-(line 1167,col 9)",
            "(line 1168,col 9)-(line 1168,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.QCodecTest(java.lang.String)",
        "snippet": "    public QCodecTest(String name) {\n        super(name);\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.constructString(int[])",
        "snippet": "    private String constructString(int [] unicodeChars) {\n        StringBuffer buffer = new StringBuffer();\n        if (unicodeChars != null) {\n            for (int i = 0; i < unicodeChars.length; i++) {\n                buffer.append((char)unicodeChars[i]); \n            }\n        }\n        return buffer.toString();\n    }",
        "begin_line": 48,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 49)",
            "(line 50,col 9)-(line 54,col 9)",
            "(line 55,col 9)-(line 55,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testNullInput()",
        "snippet": "    public void testNullInput() throws Exception {\n        QCodec qcodec = new QCodec();\n        assertNull(qcodec.doDecoding(null));\n        assertNull(qcodec.doEncoding(null));\n    }",
        "begin_line": 58,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 37)",
            "(line 60,col 9)-(line 60,col 44)",
            "(line 61,col 9)-(line 61,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip()",
        "snippet": "    public void testUTF8RoundTrip() throws Exception {\n\n        String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); \n        \n        QCodec qcodec = new QCodec(CharEncoding.UTF_8);\n        \n        assertEquals(\n            \"=?UTF-8?Q?=D0=92=D1=81=D0=B5=D0=BC=5F=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82?=\", \n        qcodec.encode(ru_msg)\n        );\n        assertEquals(\"=?UTF-8?Q?Gr=C3=BCezi=5Fz=C3=A4m=C3=A4?=\", qcodec.encode(ch_msg));\n        \n        assertEquals(ru_msg, qcodec.decode(qcodec.encode(ru_msg)));\n        assertEquals(ch_msg, qcodec.decode(qcodec.encode(ch_msg)));\n    }",
        "begin_line": 64,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 63)",
            "(line 67,col 9)-(line 67,col 68)",
            "(line 69,col 9)-(line 69,col 55)",
            "(line 71,col 9)-(line 74,col 10)",
            "(line 75,col 9)-(line 75,col 88)",
            "(line 77,col 9)-(line 77,col 67)",
            "(line 78,col 9)-(line 78,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode()",
        "snippet": "    public void testBasicEncodeDecode() throws Exception {\n        QCodec qcodec = new QCodec();\n        String plain = \"= Hello there =\\r\\n\";\n        String encoded = qcodec.encode(plain);\n        assertEquals(\"Basic Q encoding test\", \n            \"=?UTF-8?Q?=3D Hello there =3D=0D=0A?=\", encoded);\n        assertEquals(\"Basic Q decoding test\", \n            plain, qcodec.decode(encoded));\n    }",
        "begin_line": 82,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 37)",
            "(line 84,col 9)-(line 84,col 45)",
            "(line 85,col 9)-(line 85,col 46)",
            "(line 86,col 9)-(line 87,col 62)",
            "(line 88,col 9)-(line 89,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode()",
        "snippet": "    public void testUnsafeEncodeDecode() throws Exception {\n        QCodec qcodec = new QCodec();\n        String plain = \"?_=\\r\\n\";\n        String encoded = qcodec.encode(plain);\n        assertEquals(\"Unsafe chars Q encoding test\", \n            \"=?UTF-8?Q?=3F=5F=3D=0D=0A?=\", encoded);\n        assertEquals(\"Unsafe chars Q decoding test\", \n            plain, qcodec.decode(encoded));\n    }",
        "begin_line": 92,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 37)",
            "(line 94,col 9)-(line 94,col 33)",
            "(line 95,col 9)-(line 95,col 46)",
            "(line 96,col 9)-(line 97,col 52)",
            "(line 98,col 9)-(line 99,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull()",
        "snippet": "    public void testEncodeDecodeNull() throws Exception {\n        QCodec qcodec = new QCodec();\n        assertNull(\"Null string Q encoding test\", \n            qcodec.encode((String)null));\n        assertNull(\"Null string Q decoding test\", \n            qcodec.decode((String)null));\n    }",
        "begin_line": 102,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 37)",
            "(line 104,col 9)-(line 105,col 41)",
            "(line 106,col 9)-(line 107,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull()",
        "snippet": "    public void testEncodeStringWithNull() throws Exception {\n        QCodec qcodec = new QCodec();\n        String test = null;\n        String result = qcodec.encode( test, \"charset\" );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 110,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 37)",
            "(line 112,col 9)-(line 112,col 27)",
            "(line 113,col 9)-(line 113,col 57)",
            "(line 114,col 9)-(line 114,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull()",
        "snippet": "    public void testDecodeStringWithNull() throws Exception {\n        QCodec qcodec = new QCodec();\n        String test = null;\n        String result = qcodec.decode( test );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 117,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 37)",
            "(line 119,col 9)-(line 119,col 27)",
            "(line 120,col 9)-(line 120,col 46)",
            "(line 121,col 9)-(line 121,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testEncodeObjects()",
        "snippet": "    public void testEncodeObjects() throws Exception {\n        QCodec qcodec = new QCodec();\n        String plain = \"1+1 = 2\";\n        String encoded = (String) qcodec.encode((Object) plain);\n        assertEquals(\"Basic Q encoding test\", \n            \"=?UTF-8?Q?1+1 =3D 2?=\", encoded);\n\n        Object result = qcodec.encode((Object) null);\n        assertEquals( \"Encoding a null Object should return null\", null, result);\n        \n        try {\n            Object dObj = new Double(3.0);\n            qcodec.encode( dObj );\n            fail( \"Trying to url encode a Double object should cause an exception.\");\n        } catch (EncoderException ee) {\n            // Exception expected, test segment passes.\n        }\n    }",
        "begin_line": 125,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 37)",
            "(line 127,col 9)-(line 127,col 33)",
            "(line 128,col 9)-(line 128,col 64)",
            "(line 129,col 9)-(line 130,col 46)",
            "(line 132,col 9)-(line 132,col 53)",
            "(line 133,col 9)-(line 133,col 81)",
            "(line 135,col 9)-(line 141,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testInvalidEncoding()",
        "snippet": "    public void testInvalidEncoding() {\n        QCodec qcodec = new QCodec(\"NONSENSE\");\n            try {\n               qcodec.encode(\"Hello there!\");\n                fail( \"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n            } catch (EncoderException ee) {\n                // Exception expected, test segment passes.\n            }\n            try {\n               qcodec.decode(\"=?NONSENSE?Q?Hello there!?=\");\n                fail( \"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n            } catch (DecoderException ee) {\n                // Exception expected, test segment passes.\n            }\n    }",
        "begin_line": 145,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 47)",
            "(line 147,col 13)-(line 152,col 13)",
            "(line 153,col 13)-(line 158,col 13)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testDecodeObjects()",
        "snippet": "    public void testDecodeObjects() throws Exception {\n        QCodec qcodec = new QCodec();\n        String decoded = \"=?UTF-8?Q?1+1 =3D 2?=\";\n        String plain = (String) qcodec.decode((Object) decoded);\n        assertEquals(\"Basic Q decoding test\", \n            \"1+1 = 2\", plain);\n\n        Object result = qcodec.decode((Object) null);\n        assertEquals( \"Decoding a null Object should return null\", null, result);\n        \n        try {\n            Object dObj = new Double(3.0);\n            qcodec.decode( dObj );\n            fail( \"Trying to url encode a Double object should cause an exception.\");\n        } catch (DecoderException ee) {\n            // Exception expected, test segment passes.\n        }\n    }",
        "begin_line": 161,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 37)",
            "(line 163,col 9)-(line 163,col 49)",
            "(line 164,col 9)-(line 164,col 64)",
            "(line 165,col 9)-(line 166,col 30)",
            "(line 168,col 9)-(line 168,col 53)",
            "(line 169,col 9)-(line 169,col 81)",
            "(line 171,col 9)-(line 177,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks()",
        "snippet": "    public void testEncodeDecodeBlanks() throws Exception {\n        String plain = \"Mind those pesky blanks\";\n        String encoded1 = \"=?UTF-8?Q?Mind those pesky blanks?=\";\n        String encoded2 = \"=?UTF-8?Q?Mind_those_pesky_blanks?=\";\n        QCodec qcodec = new QCodec();\n        qcodec.setEncodeBlanks(false);\n        String s = qcodec.encode(plain);\n        assertEquals(\"Blanks encoding with the Q codec test\", encoded1, s);\n        qcodec.setEncodeBlanks(true);\n        s = qcodec.encode(plain);\n        assertEquals(\"Blanks encoding with the Q codec test\", encoded2, s);\n        s = qcodec.decode(encoded1);\n        assertEquals(\"Blanks decoding with the Q codec test\", plain, s);\n        s = qcodec.decode(encoded2);\n        assertEquals(\"Blanks decoding with the Q codec test\", plain, s);\n    }",
        "begin_line": 181,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 49)",
            "(line 183,col 9)-(line 183,col 64)",
            "(line 184,col 9)-(line 184,col 64)",
            "(line 185,col 9)-(line 185,col 37)",
            "(line 186,col 9)-(line 186,col 38)",
            "(line 187,col 9)-(line 187,col 40)",
            "(line 188,col 9)-(line 188,col 75)",
            "(line 189,col 9)-(line 189,col 37)",
            "(line 190,col 9)-(line 190,col 33)",
            "(line 191,col 9)-(line 191,col 75)",
            "(line 192,col 9)-(line 192,col 36)",
            "(line 193,col 9)-(line 193,col 72)",
            "(line 194,col 9)-(line 194,col 36)",
            "(line 195,col 9)-(line 195,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testLetUsMakeCloverHappy()",
        "snippet": "    public void testLetUsMakeCloverHappy() throws Exception {\n        QCodec qcodec = new QCodec();\n        qcodec.setEncodeBlanks(true);\n        assertTrue(qcodec.isEncodeBlanks());\n        qcodec.setEncodeBlanks(false);\n        assertFalse(qcodec.isEncodeBlanks());\n    }",
        "begin_line": 199,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 37)",
            "(line 201,col 9)-(line 201,col 37)",
            "(line 202,col 9)-(line 202,col 44)",
            "(line 203,col 9)-(line 203,col 38)",
            "(line 204,col 9)-(line 204,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.URLCodecTest(java.lang.String)",
        "snippet": "    public URLCodecTest(String name) {\n        super(name);\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)",
        "snippet": "    private void validateState(URLCodec urlCodec) {\n        assertEquals(urlCodec.getEncoding(), urlCodec.getDefaultCharset());        \n    }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.constructString(int[])",
        "snippet": "    private String constructString(int [] unicodeChars) {\n        StringBuffer buffer = new StringBuffer();\n        if (unicodeChars != null) {\n            for (int i = 0; i < unicodeChars.length; i++) {\n                buffer.append((char)unicodeChars[i]); \n            }\n        }\n        return buffer.toString();\n    }",
        "begin_line": 53,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 49)",
            "(line 55,col 9)-(line 59,col 9)",
            "(line 60,col 9)-(line 60,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip()",
        "snippet": "    public void testUTF8RoundTrip() throws Exception {\n\n        String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); \n        \n        URLCodec urlCodec = new URLCodec();\n        this.validateState(urlCodec);\n        \n        assertEquals(\n            \"%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\", \n            urlCodec.encode(ru_msg, CharEncoding.UTF_8)\n        );\n        assertEquals(\"Gr%C3%BCezi_z%C3%A4m%C3%A4\", urlCodec.encode(ch_msg, CharEncoding.UTF_8));\n        \n        assertEquals(ru_msg, urlCodec.decode(urlCodec.encode(ru_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n        assertEquals(ch_msg, urlCodec.decode(urlCodec.encode(ch_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n        this.validateState(urlCodec);\n    }",
        "begin_line": 63,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 63)",
            "(line 66,col 9)-(line 66,col 68)",
            "(line 68,col 9)-(line 68,col 43)",
            "(line 69,col 9)-(line 69,col 37)",
            "(line 71,col 9)-(line 74,col 10)",
            "(line 75,col 9)-(line 75,col 96)",
            "(line 77,col 9)-(line 77,col 111)",
            "(line 78,col 9)-(line 78,col 111)",
            "(line 79,col 9)-(line 79,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode()",
        "snippet": "    public void testBasicEncodeDecode() throws Exception {\n        URLCodec urlCodec = new URLCodec();\n        String plain = \"Hello there!\";\n        String encoded = urlCodec.encode(plain);\n        assertEquals(\"Basic URL encoding test\", \n            \"Hello+there%21\", encoded);\n        assertEquals(\"Basic URL decoding test\", \n            plain, urlCodec.decode(encoded));\n        this.validateState(urlCodec);\n    }",
        "begin_line": 82,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 43)",
            "(line 84,col 9)-(line 84,col 38)",
            "(line 85,col 9)-(line 85,col 48)",
            "(line 86,col 9)-(line 87,col 39)",
            "(line 88,col 9)-(line 89,col 45)",
            "(line 90,col 9)-(line 90,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode()",
        "snippet": "    public void testSafeCharEncodeDecode() throws Exception {\n        URLCodec urlCodec = new URLCodec();\n        String plain = \"abc123_-.*\";\n        String encoded = urlCodec.encode(plain);\n        assertEquals(\"Safe chars URL encoding test\", \n            plain, encoded);\n        assertEquals(\"Safe chars URL decoding test\", \n            plain, urlCodec.decode(encoded));\n        this.validateState(urlCodec);\n    }",
        "begin_line": 94,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 43)",
            "(line 96,col 9)-(line 96,col 36)",
            "(line 97,col 9)-(line 97,col 48)",
            "(line 98,col 9)-(line 99,col 28)",
            "(line 100,col 9)-(line 101,col 45)",
            "(line 102,col 9)-(line 102,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode()",
        "snippet": "    public void testUnsafeEncodeDecode() throws Exception {\n        URLCodec urlCodec = new URLCodec();\n        String plain = \"~!@#$%^&()+{}\\\"\\\\;:`,/[]\";\n        String encoded = urlCodec.encode(plain);\n        assertEquals(\"Unsafe chars URL encoding test\", \n            \"%7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D\", encoded);\n        assertEquals(\"Unsafe chars URL decoding test\", \n            plain, urlCodec.decode(encoded));\n        this.validateState(urlCodec);\n    }",
        "begin_line": 106,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 43)",
            "(line 108,col 9)-(line 108,col 50)",
            "(line 109,col 9)-(line 109,col 48)",
            "(line 110,col 9)-(line 111,col 91)",
            "(line 112,col 9)-(line 113,col 45)",
            "(line 114,col 9)-(line 114,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull()",
        "snippet": "    public void testEncodeDecodeNull() throws Exception {\n        URLCodec urlCodec = new URLCodec();\n        assertNull(\"Null string URL encoding test\", \n            urlCodec.encode((String)null));\n        assertNull(\"Null string URL decoding test\", \n            urlCodec.decode((String)null));\n        this.validateState(urlCodec);\n    }",
        "begin_line": 118,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 43)",
            "(line 120,col 9)-(line 121,col 43)",
            "(line 122,col 9)-(line 123,col 43)",
            "(line 124,col 9)-(line 124,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid()",
        "snippet": "    public void testDecodeInvalid() throws Exception {\n        URLCodec urlCodec = new URLCodec();\n        try {\n            urlCodec.decode(\"%\");\n            fail(\"DecoderException should have been thrown\");\n        } catch (DecoderException e) {\n            // Expected. Move on\n        }\n        try {\n            urlCodec.decode(\"%A\");\n            fail(\"DecoderException should have been thrown\");\n        } catch (DecoderException e) {\n            // Expected. Move on\n        }        \n        try {\n            // Bad 1st char after %\n            urlCodec.decode(\"%WW\");\n            fail(\"DecoderException should have been thrown\");\n        } catch (DecoderException e) {\n            // Expected. Move on\n        }\n        try {\n            // Bad 2nd char after %\n            urlCodec.decode(\"%0W\");\n            fail(\"DecoderException should have been thrown\");\n        } catch (DecoderException e) {\n            // Expected. Move on\n        }\n        this.validateState(urlCodec);\n    }",
        "begin_line": 128,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 43)",
            "(line 130,col 9)-(line 135,col 9)",
            "(line 136,col 9)-(line 141,col 9)",
            "(line 142,col 9)-(line 148,col 9)",
            "(line 149,col 9)-(line 155,col 9)",
            "(line 156,col 9)-(line 156,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent()",
        "snippet": "    public void testDecodeInvalidContent() throws UnsupportedEncodingException, DecoderException {\n        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); \n        URLCodec urlCodec = new URLCodec();\n        byte[] input = ch_msg.getBytes(\"ISO-8859-1\");\n        byte[] output = urlCodec.decode(input);\n        assertEquals(input.length, output.length);\n        for (int i = 0; i < input.length; i++) {\n            assertEquals(input[i], output[i]);\n        }\n        this.validateState(urlCodec);\n    }",
        "begin_line": 159,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 68)",
            "(line 161,col 9)-(line 161,col 43)",
            "(line 162,col 9)-(line 162,col 53)",
            "(line 163,col 9)-(line 163,col 47)",
            "(line 164,col 9)-(line 164,col 50)",
            "(line 165,col 9)-(line 167,col 9)",
            "(line 168,col 9)-(line 168,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testEncodeNull()",
        "snippet": "    public void testEncodeNull() throws Exception {\n        URLCodec urlCodec = new URLCodec();\n        byte[] plain = null;\n        byte[] encoded = urlCodec.encode(plain);\n        assertEquals(\"Encoding a null string should return null\", \n            null, encoded);\n        this.validateState(urlCodec);\n    }",
        "begin_line": 171,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 43)",
            "(line 173,col 9)-(line 173,col 28)",
            "(line 174,col 9)-(line 174,col 48)",
            "(line 175,col 9)-(line 176,col 27)",
            "(line 177,col 9)-(line 177,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet()",
        "snippet": "    public void testEncodeUrlWithNullBitSet() throws Exception {\n        URLCodec urlCodec = new URLCodec();\n        String plain = \"Hello there!\";\n        String encoded = new String( URLCodec.encodeUrl(null, plain.getBytes(\"UTF-8\")));\n        assertEquals(\"Basic URL encoding test\", \n            \"Hello+there%21\", encoded);\n        assertEquals(\"Basic URL decoding test\", \n            plain, urlCodec.decode(encoded));\n        this.validateState(urlCodec);        \n    }",
        "begin_line": 180,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 43)",
            "(line 182,col 9)-(line 182,col 38)",
            "(line 183,col 9)-(line 183,col 88)",
            "(line 184,col 9)-(line 185,col 39)",
            "(line 186,col 9)-(line 187,col 45)",
            "(line 188,col 9)-(line 188,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testDecodeWithNullArray()",
        "snippet": "    public void testDecodeWithNullArray() throws Exception {\n        byte[] plain = null;\n        byte[] result = URLCodec.decodeUrl( plain );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 191,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 28)",
            "(line 193,col 9)-(line 193,col 52)",
            "(line 194,col 9)-(line 194,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull()",
        "snippet": "    public void testEncodeStringWithNull() throws Exception {\n        URLCodec urlCodec = new URLCodec();\n        String test = null;\n        String result = urlCodec.encode( test, \"charset\" );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 197,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 43)",
            "(line 199,col 9)-(line 199,col 27)",
            "(line 200,col 9)-(line 200,col 59)",
            "(line 201,col 9)-(line 201,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull()",
        "snippet": "    public void testDecodeStringWithNull() throws Exception {\n        URLCodec urlCodec = new URLCodec();\n        String test = null;\n        String result = urlCodec.decode( test, \"charset\" );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 204,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 43)",
            "(line 206,col 9)-(line 206,col 27)",
            "(line 207,col 9)-(line 207,col 59)",
            "(line 208,col 9)-(line 208,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects()",
        "snippet": "    public void testEncodeObjects() throws Exception {\n        URLCodec urlCodec = new URLCodec();\n        String plain = \"Hello there!\";\n        String encoded = (String) urlCodec.encode((Object) plain);\n        assertEquals(\"Basic URL encoding test\", \n            \"Hello+there%21\", encoded);\n\n        byte[] plainBA = plain.getBytes(\"UTF-8\");\n        byte[] encodedBA = (byte[]) urlCodec.encode((Object) plainBA);\n        encoded = new String(encodedBA);\n        assertEquals(\"Basic URL encoding test\", \n            \"Hello+there%21\", encoded);\n            \n        Object result = urlCodec.encode((Object) null);\n        assertEquals( \"Encoding a null Object should return null\", null, result);\n        \n        try {\n            Object dObj = new Double(3.0);\n            urlCodec.encode( dObj );\n            fail( \"Trying to url encode a Double object should cause an exception.\");\n        } catch (EncoderException ee) {\n            // Exception expected, test segment passes.\n        }\n        this.validateState(urlCodec);\n    }",
        "begin_line": 211,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 43)",
            "(line 213,col 9)-(line 213,col 38)",
            "(line 214,col 9)-(line 214,col 66)",
            "(line 215,col 9)-(line 216,col 39)",
            "(line 218,col 9)-(line 218,col 49)",
            "(line 219,col 9)-(line 219,col 70)",
            "(line 220,col 9)-(line 220,col 40)",
            "(line 221,col 9)-(line 222,col 39)",
            "(line 224,col 9)-(line 224,col 55)",
            "(line 225,col 9)-(line 225,col 81)",
            "(line 227,col 9)-(line 233,col 9)",
            "(line 234,col 9)-(line 234,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding()",
        "snippet": "    public void testInvalidEncoding() {\n        URLCodec urlCodec = new URLCodec(\"NONSENSE\");\n        String plain = \"Hello there!\";\n        try {\n            urlCodec.encode(plain);\n            fail(\"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n        } catch (EncoderException ee) {\n            // Exception expected, test segment passes.\n        }\n        try {\n            urlCodec.decode(plain);\n            fail(\"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n        } catch (DecoderException ee) {\n            // Exception expected, test segment passes.\n        }\n        this.validateState(urlCodec);\n    }",
        "begin_line": 237,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 53)",
            "(line 239,col 9)-(line 239,col 38)",
            "(line 240,col 9)-(line 245,col 9)",
            "(line 246,col 9)-(line 251,col 9)",
            "(line 252,col 9)-(line 252,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects()",
        "snippet": "    public void testDecodeObjects() throws Exception {\n        URLCodec urlCodec = new URLCodec();\n        String plain = \"Hello+there%21\";\n        String decoded = (String) urlCodec.decode((Object) plain);\n        assertEquals(\"Basic URL decoding test\", \n            \"Hello there!\", decoded);\n\n        byte[] plainBA = plain.getBytes(\"UTF-8\");\n        byte[] decodedBA = (byte[]) urlCodec.decode((Object) plainBA);\n        decoded = new String(decodedBA);\n        assertEquals(\"Basic URL decoding test\", \n            \"Hello there!\", decoded);\n            \n        Object result = urlCodec.decode((Object) null);\n        assertEquals( \"Decoding a null Object should return null\", null, result);\n        \n        try {\n            Object dObj = new Double(3.0);\n            urlCodec.decode( dObj );\n            fail( \"Trying to url encode a Double object should cause an exception.\");\n        } catch (DecoderException ee) {\n            // Exception expected, test segment passes.\n        }\n        this.validateState(urlCodec);\n    }",
        "begin_line": 255,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 43)",
            "(line 257,col 9)-(line 257,col 40)",
            "(line 258,col 9)-(line 258,col 66)",
            "(line 259,col 9)-(line 260,col 37)",
            "(line 262,col 9)-(line 262,col 49)",
            "(line 263,col 9)-(line 263,col 70)",
            "(line 264,col 9)-(line 264,col 40)",
            "(line 265,col 9)-(line 266,col 37)",
            "(line 268,col 9)-(line 268,col 55)",
            "(line 269,col 9)-(line 269,col 81)",
            "(line 271,col 9)-(line 277,col 9)",
            "(line 278,col 9)-(line 278,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding()",
        "snippet": "    public void testDefaultEncoding() throws Exception {\n        String plain = \"Hello there!\";\n        URLCodec urlCodec = new URLCodec(\"UnicodeBig\");\n        urlCodec.encode(plain); // To work around a weird quirk in Java 1.2.2\n        String encoded1 = urlCodec.encode(plain, \"UnicodeBig\");\n        String encoded2 = urlCodec.encode(plain);\n        assertEquals(encoded1, encoded2);\n        this.validateState(urlCodec);\n    }",
        "begin_line": 281,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 38)",
            "(line 283,col 9)-(line 283,col 55)",
            "(line 284,col 9)-(line 284,col 31)",
            "(line 285,col 9)-(line 285,col 63)",
            "(line 286,col 9)-(line 286,col 49)",
            "(line 287,col 9)-(line 287,col 41)",
            "(line 288,col 9)-(line 288,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.UtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/UtilsTest.java",
        "signature": "org.apache.commons.codec.net.UtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        new Utils();\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "\r\n     * We could make the constructor private but there does not seem to be a point to jumping through extra code hoops\r\n     * to restrict instantiation right now.\r\n     ",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.QuotedPrintableCodecTest(java.lang.String)",
        "snippet": "    public QuotedPrintableCodecTest(String name) {\n        super(name);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.constructString(int[])",
        "snippet": "    private String constructString(int [] unicodeChars) {\n        StringBuffer buffer = new StringBuffer();\n        if (unicodeChars != null) {\n            for (int i = 0; i < unicodeChars.length; i++) {\n                buffer.append((char)unicodeChars[i]); \n            }\n        }\n        return buffer.toString();\n    }",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 49)",
            "(line 49,col 9)-(line 53,col 9)",
            "(line 54,col 9)-(line 54,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip()",
        "snippet": "    public void testUTF8RoundTrip() throws Exception {\n\n        String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); \n        \n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        \n        assertEquals(\n            \"=D0=92=D1=81=D0=B5=D0=BC_=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82\", \n        qpcodec.encode(ru_msg, CharEncoding.UTF_8)\n        );\n        assertEquals(\"Gr=C3=BCezi_z=C3=A4m=C3=A4\", qpcodec.encode(ch_msg, CharEncoding.UTF_8));\n        \n        assertEquals(ru_msg, qpcodec.decode(qpcodec.encode(ru_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n        assertEquals(ch_msg, qpcodec.decode(qpcodec.encode(ch_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n    }",
        "begin_line": 57,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 63)",
            "(line 60,col 9)-(line 60,col 68)",
            "(line 62,col 9)-(line 62,col 66)",
            "(line 64,col 9)-(line 67,col 10)",
            "(line 68,col 9)-(line 68,col 95)",
            "(line 70,col 9)-(line 70,col 109)",
            "(line 71,col 9)-(line 71,col 109)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode()",
        "snippet": "    public void testBasicEncodeDecode() throws Exception {\n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        String plain = \"= Hello there =\\r\\n\";\n        String encoded = qpcodec.encode(plain);\n        assertEquals(\"Basic quoted-printable encoding test\", \n            \"=3D Hello there =3D=0D=0A\", encoded);\n        assertEquals(\"Basic quoted-printable decoding test\", \n            plain, qpcodec.decode(encoded));\n    }",
        "begin_line": 74,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 66)",
            "(line 76,col 9)-(line 76,col 45)",
            "(line 77,col 9)-(line 77,col 47)",
            "(line 78,col 9)-(line 79,col 50)",
            "(line 80,col 9)-(line 81,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode()",
        "snippet": "    public void testSafeCharEncodeDecode() throws Exception {\n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        String plain = \"abc123_-.*~!@#$%^&()+{}\\\"\\\\;:`,/[]\";\n        String encoded = qpcodec.encode(plain);\n        assertEquals(\"Safe chars quoted-printable encoding test\", \n            plain, encoded);\n        assertEquals(\"Safe chars quoted-printable decoding test\", \n            plain, qpcodec.decode(encoded));\n    }",
        "begin_line": 84,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 66)",
            "(line 86,col 9)-(line 86,col 60)",
            "(line 87,col 9)-(line 87,col 47)",
            "(line 88,col 9)-(line 89,col 28)",
            "(line 90,col 9)-(line 91,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode()",
        "snippet": "    public void testUnsafeEncodeDecode() throws Exception {\n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        String plain = \"=\\r\\n\";\n        String encoded = qpcodec.encode(plain);\n        assertEquals(\"Unsafe chars quoted-printable encoding test\", \n            \"=3D=0D=0A\", encoded);\n        assertEquals(\"Unsafe chars quoted-printable decoding test\", \n            plain, qpcodec.decode(encoded));\n    }",
        "begin_line": 95,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 66)",
            "(line 97,col 9)-(line 97,col 31)",
            "(line 98,col 9)-(line 98,col 47)",
            "(line 99,col 9)-(line 100,col 34)",
            "(line 101,col 9)-(line 102,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull()",
        "snippet": "    public void testEncodeDecodeNull() throws Exception {\n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        assertNull(\"Null string quoted-printable encoding test\", \n            qpcodec.encode((String)null));\n        assertNull(\"Null string quoted-printable decoding test\", \n            qpcodec.decode((String)null));\n    }",
        "begin_line": 105,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 66)",
            "(line 107,col 9)-(line 108,col 42)",
            "(line 109,col 9)-(line 110,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid()",
        "snippet": "    public void testDecodeInvalid() throws Exception {\n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        try {\n            qpcodec.decode(\"=\");\n            fail(\"DecoderException should have been thrown\");\n        } catch (DecoderException e) {\n            // Expected. Move on\n        }\n        try {\n            qpcodec.decode(\"=A\");\n            fail(\"DecoderException should have been thrown\");\n        } catch (DecoderException e) {\n            // Expected. Move on\n        }\n        try {\n            qpcodec.decode(\"=WW\");\n            fail(\"DecoderException should have been thrown\");\n        } catch (DecoderException e) {\n            // Expected. Move on\n        }\n    }",
        "begin_line": 114,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 66)",
            "(line 116,col 9)-(line 121,col 9)",
            "(line 122,col 9)-(line 127,col 9)",
            "(line 128,col 9)-(line 133,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull()",
        "snippet": "    public void testEncodeNull() throws Exception {\n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        byte[] plain = null;\n        byte[] encoded = qpcodec.encode(plain);\n        assertEquals(\"Encoding a null string should return null\", \n            null, encoded);\n    }",
        "begin_line": 136,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 66)",
            "(line 138,col 9)-(line 138,col 28)",
            "(line 139,col 9)-(line 139,col 47)",
            "(line 140,col 9)-(line 141,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet()",
        "snippet": "    public void testEncodeUrlWithNullBitSet() throws Exception {\n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        String plain = \"1+1 = 2\";\n        String encoded = new String(QuotedPrintableCodec.\n            encodeQuotedPrintable(null, plain.getBytes(\"UTF-8\")));\n        assertEquals(\"Basic quoted-printable encoding test\", \n            \"1+1 =3D 2\", encoded);\n        assertEquals(\"Basic quoted-printable decoding test\", \n            plain, qpcodec.decode(encoded));\n        \n    }",
        "begin_line": 144,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 66)",
            "(line 146,col 9)-(line 146,col 33)",
            "(line 147,col 9)-(line 148,col 66)",
            "(line 149,col 9)-(line 150,col 34)",
            "(line 151,col 9)-(line 152,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeWithNullArray()",
        "snippet": "    public void testDecodeWithNullArray() throws Exception {\n        byte[] plain = null;\n        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable( plain );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 156,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 28)",
            "(line 158,col 9)-(line 158,col 76)",
            "(line 159,col 9)-(line 159,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull()",
        "snippet": "    public void testEncodeStringWithNull() throws Exception {\n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        String test = null;\n        String result = qpcodec.encode( test, \"charset\" );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 162,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 66)",
            "(line 164,col 9)-(line 164,col 27)",
            "(line 165,col 9)-(line 165,col 58)",
            "(line 166,col 9)-(line 166,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull()",
        "snippet": "    public void testDecodeStringWithNull() throws Exception {\n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        String test = null;\n        String result = qpcodec.decode( test, \"charset\" );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 169,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 66)",
            "(line 171,col 9)-(line 171,col 27)",
            "(line 172,col 9)-(line 172,col 58)",
            "(line 173,col 9)-(line 173,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects()",
        "snippet": "    public void testEncodeObjects() throws Exception {\n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        String plain = \"1+1 = 2\";\n        String encoded = (String) qpcodec.encode((Object) plain);\n        assertEquals(\"Basic quoted-printable encoding test\", \n            \"1+1 =3D 2\", encoded);\n\n        byte[] plainBA = plain.getBytes(\"UTF-8\");\n        byte[] encodedBA = (byte[]) qpcodec.encode((Object) plainBA);\n        encoded = new String(encodedBA);\n        assertEquals(\"Basic quoted-printable encoding test\", \n            \"1+1 =3D 2\", encoded);\n            \n        Object result = qpcodec.encode((Object) null);\n        assertEquals( \"Encoding a null Object should return null\", null, result);\n        \n        try {\n            Object dObj = new Double(3.0);\n            qpcodec.encode( dObj );\n            fail( \"Trying to url encode a Double object should cause an exception.\");\n        } catch (EncoderException ee) {\n            // Exception expected, test segment passes.\n        }\n    }",
        "begin_line": 176,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 66)",
            "(line 178,col 9)-(line 178,col 33)",
            "(line 179,col 9)-(line 179,col 65)",
            "(line 180,col 9)-(line 181,col 34)",
            "(line 183,col 9)-(line 183,col 49)",
            "(line 184,col 9)-(line 184,col 69)",
            "(line 185,col 9)-(line 185,col 40)",
            "(line 186,col 9)-(line 187,col 34)",
            "(line 189,col 9)-(line 189,col 54)",
            "(line 190,col 9)-(line 190,col 81)",
            "(line 192,col 9)-(line 198,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testInvalidEncoding()",
        "snippet": "    public void testInvalidEncoding() {\n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(\"NONSENSE\");\n           String plain = \"Hello there!\";\n            try {\n               qpcodec.encode(plain);\n                fail( \"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n            } catch (EncoderException ee) {\n                // Exception expected, test segment passes.\n            }\n            try {\n               qpcodec.decode(plain);\n                fail( \"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n            } catch (DecoderException ee) {\n                // Exception expected, test segment passes.\n            }\n    }",
        "begin_line": 201,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 76)",
            "(line 203,col 12)-(line 203,col 41)",
            "(line 204,col 13)-(line 209,col 13)",
            "(line 210,col 13)-(line 215,col 13)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects()",
        "snippet": "    public void testDecodeObjects() throws Exception {\n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        String plain = \"1+1 =3D 2\";\n        String decoded = (String) qpcodec.decode((Object) plain);\n        assertEquals(\"Basic quoted-printable decoding test\", \n            \"1+1 = 2\", decoded);\n\n        byte[] plainBA = plain.getBytes(\"UTF-8\");\n        byte[] decodedBA = (byte[]) qpcodec.decode((Object) plainBA);\n        decoded = new String(decodedBA);\n        assertEquals(\"Basic quoted-printable decoding test\", \n            \"1+1 = 2\", decoded);\n            \n        Object result = qpcodec.decode((Object) null);\n        assertEquals( \"Decoding a null Object should return null\", null, result);\n        \n        try {\n            Object dObj = new Double(3.0);\n            qpcodec.decode( dObj );\n            fail( \"Trying to url encode a Double object should cause an exception.\");\n        } catch (DecoderException ee) {\n            // Exception expected, test segment passes.\n        }\n    }",
        "begin_line": 218,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 66)",
            "(line 220,col 9)-(line 220,col 35)",
            "(line 221,col 9)-(line 221,col 65)",
            "(line 222,col 9)-(line 223,col 32)",
            "(line 225,col 9)-(line 225,col 49)",
            "(line 226,col 9)-(line 226,col 69)",
            "(line 227,col 9)-(line 227,col 40)",
            "(line 228,col 9)-(line 229,col 32)",
            "(line 231,col 9)-(line 231,col 54)",
            "(line 232,col 9)-(line 232,col 81)",
            "(line 234,col 9)-(line 240,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding()",
        "snippet": "    public void testDefaultEncoding() throws Exception {\n        String plain = \"Hello there!\";\n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(\"UnicodeBig\");\n        qpcodec.encode(plain); // To work around a weird quirk in Java 1.2.2\n        String encoded1 = qpcodec.encode(plain, \"UnicodeBig\");\n        String encoded2 = qpcodec.encode(plain);\n        assertEquals(encoded1, encoded2);\n    }",
        "begin_line": 243,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 244,col 9)-(line 244,col 38)",
            "(line 245,col 9)-(line 245,col 78)",
            "(line 246,col 9)-(line 246,col 30)",
            "(line 247,col 9)-(line 247,col 62)",
            "(line 248,col 9)-(line 248,col 48)",
            "(line 249,col 9)-(line 249,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522CodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/RFC1522CodecTest.java",
        "signature": "org.apache.commons.codec.net.RFC1522CodecTest.RFC1522CodecTest(java.lang.String)",
        "snippet": "    public RFC1522CodecTest(String name) {\n        super(name);\n    }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522CodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/RFC1522CodecTest.java",
        "signature": "org.apache.commons.codec.net.RFC1522CodecTest.RFC1522TestCodec.doDecoding(byte[])",
        "snippet": "        protected byte[] doDecoding(byte[] bytes) {\n            return bytes;\n        }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 13)-(line 40,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522CodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/RFC1522CodecTest.java",
        "signature": "org.apache.commons.codec.net.RFC1522CodecTest.RFC1522TestCodec.doEncoding(byte[])",
        "snippet": "        protected byte[] doEncoding(byte[] bytes) {\n            return bytes;\n        }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 13)-(line 44,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522CodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/RFC1522CodecTest.java",
        "signature": "org.apache.commons.codec.net.RFC1522CodecTest.RFC1522TestCodec.getEncoding()",
        "snippet": "        protected String getEncoding() {\n            return \"T\";\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522CodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/RFC1522CodecTest.java",
        "signature": "org.apache.commons.codec.net.RFC1522CodecTest.testNullInput()",
        "snippet": "    public void testNullInput() throws Exception {\n        RFC1522TestCodec testcodec = new RFC1522TestCodec();\n        assertNull(testcodec.decodeText(null));\n        assertNull(testcodec.encodeText(null, CharEncoding.UTF_8));\n    }",
        "begin_line": 53,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 60)",
            "(line 55,col 9)-(line 55,col 47)",
            "(line 56,col 9)-(line 56,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522CodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/RFC1522CodecTest.java",
        "signature": "org.apache.commons.codec.net.RFC1522CodecTest.assertExpectedDecoderException(java.lang.String)",
        "snippet": "    private void assertExpectedDecoderException(String s) throws Exception {\n        RFC1522TestCodec testcodec = new RFC1522TestCodec();\n        try {\n            testcodec.decodeText(s);\n            fail(\"DecoderException should have been thrown\");\n        } catch (DecoderException e) {\n            // Expected.\n        }\n    }",
        "begin_line": 59,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 60)",
            "(line 61,col 9)-(line 66,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522CodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/RFC1522CodecTest.java",
        "signature": "org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid()",
        "snippet": "    public void testDecodeInvalid() throws Exception {\n        assertExpectedDecoderException(\"whatever\");\n        assertExpectedDecoderException(\"=?\");\n        assertExpectedDecoderException(\"?=\");\n        assertExpectedDecoderException(\"==\");\n        assertExpectedDecoderException(\"=??=\");\n        assertExpectedDecoderException(\"=?stuff?=\");\n        assertExpectedDecoderException(\"=?UTF-8??=\");\n        assertExpectedDecoderException(\"=?UTF-8?stuff?=\");\n        assertExpectedDecoderException(\"=?UTF-8?T?stuff\");\n        assertExpectedDecoderException(\"=??T?stuff?=\");\n        assertExpectedDecoderException(\"=?UTF-8??stuff?=\");\n        assertExpectedDecoderException(\"=?UTF-8?W?stuff?=\");\n    }",
        "begin_line": 69,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 51)",
            "(line 71,col 9)-(line 71,col 45)",
            "(line 72,col 9)-(line 72,col 45)",
            "(line 73,col 9)-(line 73,col 45)",
            "(line 74,col 9)-(line 74,col 47)",
            "(line 75,col 9)-(line 75,col 52)",
            "(line 76,col 9)-(line 76,col 53)",
            "(line 77,col 9)-(line 77,col 58)",
            "(line 78,col 9)-(line 78,col 58)",
            "(line 79,col 9)-(line 79,col 55)",
            "(line 80,col 9)-(line 80,col 59)",
            "(line 81,col 9)-(line 81,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.BCodecTest(java.lang.String)",
        "snippet": "    public BCodecTest(String name) {\n        super(name);\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.constructString(int[])",
        "snippet": "    private String constructString(int[] unicodeChars) {\n        StringBuffer buffer = new StringBuffer();\n        if (unicodeChars != null) {\n            for (int i = 0; i < unicodeChars.length; i++) {\n                buffer.append((char) unicodeChars[i]);\n            }\n        }\n        return buffer.toString();\n    }",
        "begin_line": 44,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 49)",
            "(line 46,col 9)-(line 50,col 9)",
            "(line 51,col 9)-(line 51,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testNullInput()",
        "snippet": "    public void testNullInput() throws Exception {\n        BCodec bcodec = new BCodec();\n        assertNull(bcodec.doDecoding(null));\n        assertNull(bcodec.doEncoding(null));\n    }",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 37)",
            "(line 56,col 9)-(line 56,col 44)",
            "(line 57,col 9)-(line 57,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip()",
        "snippet": "    public void testUTF8RoundTrip() throws Exception {\n\n        String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);\n        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);\n\n        BCodec bcodec = new BCodec(CharEncoding.UTF_8);\n\n        assertEquals(\"=?UTF-8?B?0JLRgdC10Lxf0L/RgNC40LLQtdGC?=\", bcodec.encode(ru_msg));\n        assertEquals(\"=?UTF-8?B?R3LDvGV6aV96w6Rtw6Q=?=\", bcodec.encode(ch_msg));\n\n        assertEquals(ru_msg, bcodec.decode(bcodec.encode(ru_msg)));\n        assertEquals(ch_msg, bcodec.decode(bcodec.encode(ch_msg)));\n    }",
        "begin_line": 60,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 63)",
            "(line 63,col 9)-(line 63,col 68)",
            "(line 65,col 9)-(line 65,col 55)",
            "(line 67,col 9)-(line 67,col 88)",
            "(line 68,col 9)-(line 68,col 80)",
            "(line 70,col 9)-(line 70,col 67)",
            "(line 71,col 9)-(line 71,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode()",
        "snippet": "    public void testBasicEncodeDecode() throws Exception {\n        BCodec bcodec = new BCodec();\n        String plain = \"Hello there\";\n        String encoded = bcodec.encode(plain);\n        assertEquals(\"Basic B encoding test\", \"=?UTF-8?B?SGVsbG8gdGhlcmU=?=\", encoded);\n        assertEquals(\"Basic B decoding test\", plain, bcodec.decode(encoded));\n    }",
        "begin_line": 74,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 37)",
            "(line 76,col 9)-(line 76,col 37)",
            "(line 77,col 9)-(line 77,col 46)",
            "(line 78,col 9)-(line 78,col 87)",
            "(line 79,col 9)-(line 79,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull()",
        "snippet": "    public void testEncodeDecodeNull() throws Exception {\n        BCodec bcodec = new BCodec();\n        assertNull(\"Null string B encoding test\", bcodec.encode((String) null));\n        assertNull(\"Null string B decoding test\", bcodec.decode((String) null));\n    }",
        "begin_line": 82,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 37)",
            "(line 84,col 9)-(line 84,col 80)",
            "(line 85,col 9)-(line 85,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull()",
        "snippet": "    public void testEncodeStringWithNull() throws Exception {\n        BCodec bcodec = new BCodec();\n        String test = null;\n        String result = bcodec.encode(test, \"charset\");\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 88,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 37)",
            "(line 90,col 9)-(line 90,col 27)",
            "(line 91,col 9)-(line 91,col 55)",
            "(line 92,col 9)-(line 92,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull()",
        "snippet": "    public void testDecodeStringWithNull() throws Exception {\n        BCodec bcodec = new BCodec();\n        String test = null;\n        String result = bcodec.decode(test);\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 95,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 37)",
            "(line 97,col 9)-(line 97,col 27)",
            "(line 98,col 9)-(line 98,col 44)",
            "(line 99,col 9)-(line 99,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testEncodeObjects()",
        "snippet": "    public void testEncodeObjects() throws Exception {\n        BCodec bcodec = new BCodec();\n        String plain = \"what not\";\n        String encoded = (String) bcodec.encode((Object) plain);\n\n        assertEquals(\"Basic B encoding test\", \"=?UTF-8?B?d2hhdCBub3Q=?=\", encoded);\n\n        Object result = bcodec.encode((Object) null);\n        assertEquals(\"Encoding a null Object should return null\", null, result);\n\n        try {\n            Object dObj = new Double(3.0);\n            bcodec.encode(dObj);\n            fail(\"Trying to url encode a Double object should cause an exception.\");\n        } catch (EncoderException ee) {\n            // Exception expected, test segment passes.\n        }\n    }",
        "begin_line": 102,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 37)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 105,col 9)-(line 105,col 64)",
            "(line 107,col 9)-(line 107,col 83)",
            "(line 109,col 9)-(line 109,col 53)",
            "(line 110,col 9)-(line 110,col 80)",
            "(line 112,col 9)-(line 118,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testInvalidEncoding()",
        "snippet": "    public void testInvalidEncoding() {\n        BCodec bcodec = new BCodec(\"NONSENSE\");\n        try {\n            bcodec.encode(\"Hello there!\");\n            fail(\"We set the encoding to a bogus NONSENSE value, this shouldn't have worked.\");\n        } catch (EncoderException ee) {\n            // Exception expected, test segment passes.\n        }\n        try {\n            bcodec.decode(\"=?NONSENSE?B?Hello there!?=\");\n            fail(\"We set the encoding to a bogus NONSENSE value, this shouldn't have worked.\");\n        } catch (DecoderException ee) {\n            // Exception expected, test segment passes.\n        }\n    }",
        "begin_line": 121,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 47)",
            "(line 123,col 9)-(line 128,col 9)",
            "(line 129,col 9)-(line 134,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testDecodeObjects()",
        "snippet": "    public void testDecodeObjects() throws Exception {\n        BCodec bcodec = new BCodec();\n        String decoded = \"=?UTF-8?B?d2hhdCBub3Q=?=\";\n        String plain = (String) bcodec.decode((Object) decoded);\n        assertEquals(\"Basic B decoding test\", \"what not\", plain);\n\n        Object result = bcodec.decode((Object) null);\n        assertEquals(\"Decoding a null Object should return null\", null, result);\n\n        try {\n            Object dObj = new Double(3.0);\n            bcodec.decode(dObj);\n            fail(\"Trying to url encode a Double object should cause an exception.\");\n        } catch (DecoderException ee) {\n            // Exception expected, test segment passes.\n        }\n    }",
        "begin_line": 137,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 37)",
            "(line 139,col 9)-(line 139,col 52)",
            "(line 140,col 9)-(line 140,col 64)",
            "(line 141,col 9)-(line 141,col 65)",
            "(line 143,col 9)-(line 143,col 53)",
            "(line 144,col 9)-(line 144,col 80)",
            "(line 146,col 9)-(line 152,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.MetaphoneTest(java.lang.String)",
        "snippet": "    public MetaphoneTest(String name) {\n        super(name);\n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String, java.lang.String[])",
        "snippet": "    public void assertIsMetaphoneEqual(String source, String[] matches) {\n        // match source to all matches\n        for (int i = 0; i < matches.length; i++) {\n            assertTrue(\"Source: \" + source + \", should have same Metaphone as: \" + matches[i],\n                       this.getMetaphone().isMetaphoneEqual(source, matches[i]));\n        }\n        // match to each other\n        for (int i = 0; i < matches.length; i++) {\n            for (int j = 0; j < matches.length; j++) {\n                assertTrue(this.getMetaphone().isMetaphoneEqual(matches[i], matches[j]));\n            }\n        }\n    }",
        "begin_line": 35,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 40,col 9)",
            "(line 42,col 9)-(line 46,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.assertMetaphoneEqual(java.lang.String[][])",
        "snippet": "    public void assertMetaphoneEqual(String[][] pairs) {\n        this.validateFixture(pairs);\n        for (int i = 0; i < pairs.length; i++) {\n            String name0 = pairs[i][0];\n            String name1 = pairs[i][1];\n            String failMsg = \"Expected match between \" + name0 + \" and \" + name1;\n            assertTrue(failMsg, this.getMetaphone().isMetaphoneEqual(name0, name1));\n            assertTrue(failMsg, this.getMetaphone().isMetaphoneEqual(name1, name0));\n        }\n    }",
        "begin_line": 49,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 36)",
            "(line 51,col 9)-(line 57,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.getMetaphone()",
        "snippet": "    private Metaphone getMetaphone() {\n        return this.metaphone;\n    }",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\n     * @return Returns the metaphone.\n     ",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.makeEncoder()",
        "snippet": "    protected StringEncoder makeEncoder() {\n        return new Metaphone();\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.setMetaphone(org.apache.commons.codec.language.Metaphone)",
        "snippet": "    private void setMetaphone(Metaphone metaphone) {\n        this.metaphone = metaphone;\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * @param metaphone\n     *                  The metaphone to set.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.setUp()",
        "snippet": "    public void setUp() throws Exception {\n        super.setUp();\n        this.setMetaphone(new Metaphone());\n    }",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 22)",
            "(line 80,col 9)-(line 80,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.tearDown()",
        "snippet": "    public void tearDown() throws Exception {\n        super.tearDown();\n        this.setMetaphone(null);\n    }",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 25)",
            "(line 85,col 9)-(line 85,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1()",
        "snippet": "    public void testIsMetaphoneEqual1() {\n        this.assertMetaphoneEqual(new String[][] { { \"Case\", \"case\" }, {\n                \"CASE\", \"Case\" }, {\n                \"caSe\", \"cAsE\" }, {\n                \"quick\", \"cookie\" }\n        });\n    }",
        "begin_line": 88,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 93,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2()",
        "snippet": "    public void testIsMetaphoneEqual2() {\n        this.assertMetaphoneEqual(new String[][] { { \"Lawrence\", \"Lorenza\" }, {\n                \"Gary\", \"Cahra\" }, });\n    }",
        "begin_line": 99,
        "end_line": 102,
        "comment": "\n     * Matches computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 101,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero()",
        "snippet": "    public void testIsMetaphoneEqualAero() {\n        this.assertIsMetaphoneEqual(\"Aero\", new String[] { \"Eure\" });\n    }",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n     * Initial AE case.\n     * \n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite()",
        "snippet": "    public void testIsMetaphoneEqualWhite() {\n        this.assertIsMetaphoneEqual(\n            \"White\",\n            new String[] { \"Wade\", \"Wait\", \"Waite\", \"Wat\", \"Whit\", \"Wiatt\", \"Wit\", \"Wittie\", \"Witty\", \"Wood\", \"Woodie\", \"Woody\" });\n    }",
        "begin_line": 118,
        "end_line": 122,
        "comment": "\n     * Initial WH case.\n     * \n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 121,col 131)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert()",
        "snippet": "    public void testIsMetaphoneEqualAlbert() {\n        this.assertIsMetaphoneEqual(\"Albert\", new String[] { \"Ailbert\", \"Alberik\", \"Albert\", \"Alberto\", \"Albrecht\" });\n    }",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\n     * Initial A, not followed by an E case.\n     * \n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary()",
        "snippet": "    public void testIsMetaphoneEqualGary() {\n        this.assertIsMetaphoneEqual(\n            \"Gary\",\n            new String[] {\n                \"Cahra\",\n                \"Cara\",\n                \"Carey\",\n                \"Cari\",\n                \"Caria\",\n                \"Carie\",\n                \"Caro\",\n                \"Carree\",\n                \"Carri\",\n                \"Carrie\",\n                \"Carry\",\n                \"Cary\",\n                \"Cora\",\n                \"Corey\",\n                \"Cori\",\n                \"Corie\",\n                \"Correy\",\n                \"Corri\",\n                \"Corrie\",\n                \"Corry\",\n                \"Cory\",\n                \"Gray\",\n                \"Kara\",\n                \"Kare\",\n                \"Karee\",\n                \"Kari\",\n                \"Karia\",\n                \"Karie\",\n                \"Karrah\",\n                \"Karrie\",\n                \"Karry\",\n                \"Kary\",\n                \"Keri\",\n                \"Kerri\",\n                \"Kerrie\",\n                \"Kerry\",\n                \"Kira\",\n                \"Kiri\",\n                \"Kora\",\n                \"Kore\",\n                \"Kori\",\n                \"Korie\",\n                \"Korrie\",\n                \"Korry\" });\n    }",
        "begin_line": 136,
        "end_line": 184,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 183,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn()",
        "snippet": "    public void testIsMetaphoneEqualJohn() {\n        this.assertIsMetaphoneEqual(\n            \"John\",\n            new String[] {\n                \"Gena\",\n                \"Gene\",\n                \"Genia\",\n                \"Genna\",\n                \"Genni\",\n                \"Gennie\",\n                \"Genny\",\n                \"Giana\",\n                \"Gianna\",\n                \"Gina\",\n                \"Ginni\",\n                \"Ginnie\",\n                \"Ginny\",\n                \"Jaine\",\n                \"Jan\",\n                \"Jana\",\n                \"Jane\",\n                \"Janey\",\n                \"Jania\",\n                \"Janie\",\n                \"Janna\",\n                \"Jany\",\n                \"Jayne\",\n                \"Jean\",\n                \"Jeana\",\n                \"Jeane\",\n                \"Jeanie\",\n                \"Jeanna\",\n                \"Jeanne\",\n                \"Jeannie\",\n                \"Jen\",\n                \"Jena\",\n                \"Jeni\",\n                \"Jenn\",\n                \"Jenna\",\n                \"Jennee\",\n                \"Jenni\",\n                \"Jennie\",\n                \"Jenny\",\n                \"Jinny\",\n                \"Jo Ann\",\n                \"Jo-Ann\",\n                \"Jo-Anne\",\n                \"Joan\",\n                \"Joana\",\n                \"Joane\",\n                \"Joanie\",\n                \"Joann\",\n                \"Joanna\",\n                \"Joanne\",\n                \"Joeann\",\n                \"Johna\",\n                \"Johnna\",\n                \"Joni\",\n                \"Jonie\",\n                \"Juana\",\n                \"June\",\n                \"Junia\",\n                \"Junie\" });\n    }",
        "begin_line": 189,
        "end_line": 252,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 190,col 9)-(line 251,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight()",
        "snippet": "    public void testIsMetaphoneEqualKnight() {\n        this.assertIsMetaphoneEqual(\n            \"Knight\",\n            new String[] {\n                \"Hynda\",\n                \"Nada\",\n                \"Nadia\",\n                \"Nady\",\n                \"Nat\",\n                \"Nata\",\n                \"Natty\",\n                \"Neda\",\n                \"Nedda\",\n                \"Nedi\",\n                \"Netta\",\n                \"Netti\",\n                \"Nettie\",\n                \"Netty\",\n                \"Nita\",\n                \"Nydia\" });\n    }",
        "begin_line": 259,
        "end_line": 279,
        "comment": "\n     * Initial KN case.\n     * \n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 260,col 9)-(line 278,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary()",
        "snippet": "    public void testIsMetaphoneEqualMary() {\n        this.assertIsMetaphoneEqual(\n            \"Mary\",\n            new String[] {\n                \"Mair\",\n                \"Maire\",\n                \"Mara\",\n                \"Mareah\",\n                \"Mari\",\n                \"Maria\",\n                \"Marie\",\n                \"Mary\",\n                \"Maura\",\n                \"Maure\",\n                \"Meara\",\n                \"Merrie\",\n                \"Merry\",\n                \"Mira\",\n                \"Moira\",\n                \"Mora\",\n                \"Moria\",\n                \"Moyra\",\n                \"Muire\",\n                \"Myra\",\n                \"Myrah\" });\n    }",
        "begin_line": 283,
        "end_line": 308,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 284,col 9)-(line 307,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis()",
        "snippet": "    public void testIsMetaphoneEqualParis() {\n        this.assertIsMetaphoneEqual(\"Paris\", new String[] { \"Pearcy\", \"Perris\", \"Piercy\", \"Pierz\", \"Pryse\" });\n    }",
        "begin_line": 313,
        "end_line": 315,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 314,col 9)-(line 314,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter()",
        "snippet": "    public void testIsMetaphoneEqualPeter() {\n        this.assertIsMetaphoneEqual(\n            \"Peter\",\n            new String[] { \"Peadar\", \"Peder\", \"Pedro\", \"Peter\", \"Petr\", \"Peyter\", \"Pieter\", \"Pietro\", \"Piotr\" });\n    }",
        "begin_line": 320,
        "end_line": 324,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 321,col 9)-(line 323,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay()",
        "snippet": "    public void testIsMetaphoneEqualRay() {\n        this.assertIsMetaphoneEqual(\"Ray\", new String[] { \"Ray\", \"Rey\", \"Roi\", \"Roy\", \"Ruy\" });\n    }",
        "begin_line": 329,
        "end_line": 331,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 330,col 9)-(line 330,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan()",
        "snippet": "    public void testIsMetaphoneEqualSusan() {\n        this.assertIsMetaphoneEqual(\n            \"Susan\",\n            new String[] {\n                \"Siusan\",\n                \"Sosanna\",\n                \"Susan\",\n                \"Susana\",\n                \"Susann\",\n                \"Susanna\",\n                \"Susannah\",\n                \"Susanne\",\n                \"Suzann\",\n                \"Suzanna\",\n                \"Suzanne\",\n                \"Zuzana\" });\n    }",
        "begin_line": 336,
        "end_line": 352,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 337,col 9)-(line 351,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright()",
        "snippet": "    public void testIsMetaphoneEqualWright() {\n        this.assertIsMetaphoneEqual(\"Wright\", new String[] { \"Rota\", \"Rudd\", \"Ryde\" });\n    }",
        "begin_line": 359,
        "end_line": 361,
        "comment": "\n     * Initial WR case.\n     * \n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan()",
        "snippet": "    public void testIsMetaphoneEqualXalan() {\n        this.assertIsMetaphoneEqual(\n            \"Xalan\",\n            new String[] { \"Celene\", \"Celina\", \"Celine\", \"Selena\", \"Selene\", \"Selina\", \"Seline\", \"Suellen\", \"Xylina\" });\n    }",
        "begin_line": 366,
        "end_line": 370,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 367,col 9)-(line 369,col 120)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testMetaphone()",
        "snippet": "    public void testMetaphone() {\n        assertEquals(\"HL\", this.getMetaphone().metaphone(\"howl\"));\n        assertEquals(\"TSTN\", this.getMetaphone().metaphone(\"testing\"));\n        assertEquals(\"0\", this.getMetaphone().metaphone(\"The\"));\n        assertEquals(\"KK\", this.getMetaphone().metaphone(\"quick\"));\n        assertEquals(\"BRN\", this.getMetaphone().metaphone(\"brown\"));\n        assertEquals(\"FKS\", this.getMetaphone().metaphone(\"fox\"));\n        assertEquals(\"JMPT\", this.getMetaphone().metaphone(\"jumped\"));\n        assertEquals(\"OFR\", this.getMetaphone().metaphone(\"over\"));\n        assertEquals(\"0\", this.getMetaphone().metaphone(\"the\"));\n        assertEquals(\"LS\", this.getMetaphone().metaphone(\"lazy\"));\n        assertEquals(\"TKS\", this.getMetaphone().metaphone(\"dogs\"));\n    }",
        "begin_line": 372,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 373,col 9)-(line 373,col 66)",
            "(line 374,col 9)-(line 374,col 71)",
            "(line 375,col 9)-(line 375,col 64)",
            "(line 376,col 9)-(line 376,col 67)",
            "(line 377,col 9)-(line 377,col 68)",
            "(line 378,col 9)-(line 378,col 66)",
            "(line 379,col 9)-(line 379,col 70)",
            "(line 380,col 9)-(line 380,col 67)",
            "(line 381,col 9)-(line 381,col 64)",
            "(line 382,col 9)-(line 382,col 66)",
            "(line 383,col 9)-(line 383,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB()",
        "snippet": "    public void testWordEndingInMB() {\n        assertEquals( \"KM\", this.getMetaphone().metaphone(\"COMB\") );\n        assertEquals( \"TM\", this.getMetaphone().metaphone(\"TOMB\") );\n        assertEquals( \"WM\", this.getMetaphone().metaphone(\"WOMB\") );\n    }",
        "begin_line": 386,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 387,col 9)-(line 387,col 68)",
            "(line 388,col 9)-(line 388,col 68)",
            "(line 389,col 9)-(line 389,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY()",
        "snippet": "    public void testDiscardOfSCEOrSCIOrSCY() {\n        assertEquals( \"SNS\", this.getMetaphone().metaphone(\"SCIENCE\") );\n        assertEquals( \"SN\", this.getMetaphone().metaphone(\"SCENE\") );\n        assertEquals( \"S\", this.getMetaphone().metaphone(\"SCY\") );\n    }",
        "begin_line": 392,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 393,col 9)-(line 393,col 72)",
            "(line 394,col 9)-(line 394,col 69)",
            "(line 395,col 9)-(line 395,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testWhy()",
        "snippet": "    public void testWhy() {\n        // PHP returns \"H\". The original metaphone returns an empty string. \n        assertEquals(\"\", this.getMetaphone().metaphone(\"WHY\"));\n    }",
        "begin_line": 401,
        "end_line": 404,
        "comment": "\n     * Tests (CODEC-57) Metaphone.metaphone(String) returns an empty string when passed the word \"why\"\n     ",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA()",
        "snippet": "    public void testWordsWithCIA() {\n        assertEquals( \"XP\", this.getMetaphone().metaphone(\"CIAPO\") );\n    }",
        "begin_line": 406,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 407,col 9)-(line 407,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH()",
        "snippet": "    public void testTranslateOfSCHAndCH() {\n        assertEquals( \"SKTL\", this.getMetaphone().metaphone(\"SCHEDULE\") );\n        assertEquals( \"SKMT\", this.getMetaphone().metaphone(\"SCHEMATIC\") );\n\n        assertEquals( \"KRKT\", this.getMetaphone().metaphone(\"CHARACTER\") );\n        assertEquals( \"TX\", this.getMetaphone().metaphone(\"TEACH\") );\n    }",
        "begin_line": 410,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 411,col 9)-(line 411,col 74)",
            "(line 412,col 9)-(line 412,col 75)",
            "(line 414,col 9)-(line 414,col 75)",
            "(line 415,col 9)-(line 415,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY()",
        "snippet": "    public void testTranslateToJOfDGEOrDGIOrDGY() {\n        assertEquals( \"TJ\", this.getMetaphone().metaphone(\"DODGY\") );\n        assertEquals( \"TJ\", this.getMetaphone().metaphone(\"DODGE\") );\n        assertEquals( \"AJMT\", this.getMetaphone().metaphone(\"ADGIEMTI\") );\n    }",
        "begin_line": 418,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 419,col 9)-(line 419,col 69)",
            "(line 420,col 9)-(line 420,col 69)",
            "(line 421,col 9)-(line 421,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG()",
        "snippet": "    public void testDiscardOfSilentHAfterG() {\n        assertEquals( \"KNT\", this.getMetaphone().metaphone(\"GHENT\") );\n        assertEquals( \"B\", this.getMetaphone().metaphone(\"BAUGH\") );\n    }",
        "begin_line": 424,
        "end_line": 427,
        "comment": "",
        "child_ranges": [
            "(line 425,col 9)-(line 425,col 70)",
            "(line 426,col 9)-(line 426,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN()",
        "snippet": "    public void testDiscardOfSilentGN() {\n        // NOTE: This does not test for silent GN, but for starting with GN\n        assertEquals( \"N\", this.getMetaphone().metaphone(\"GNU\") );\n\n        // NOTE: Trying to test for GNED, but expected code does not appear to execute\n        assertEquals( \"SNT\", this.getMetaphone().metaphone(\"SIGNED\") );\n    }",
        "begin_line": 429,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 431,col 9)-(line 431,col 66)",
            "(line 434,col 9)-(line 434,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testPHTOF()",
        "snippet": "    public void testPHTOF() {\n        assertEquals( \"FX\", this.getMetaphone().metaphone(\"PHISH\") );\n    }",
        "begin_line": 437,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 438,col 9)-(line 438,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX()",
        "snippet": "    public void testSHAndSIOAndSIAToX() {\n        assertEquals( \"XT\", this.getMetaphone().metaphone(\"SHOT\") );\n        assertEquals( \"OTXN\", this.getMetaphone().metaphone(\"ODSIAN\") );\n        assertEquals( \"PLXN\", this.getMetaphone().metaphone(\"PULSION\") );\n    }",
        "begin_line": 441,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 442,col 9)-(line 442,col 68)",
            "(line 443,col 9)-(line 443,col 72)",
            "(line 444,col 9)-(line 444,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX()",
        "snippet": "    public void testTIOAndTIAToX() {\n        assertEquals( \"OX\", this.getMetaphone().metaphone(\"OTIA\") );\n        assertEquals( \"PRXN\", this.getMetaphone().metaphone(\"PORTION\") );\n    }",
        "begin_line": 447,
        "end_line": 450,
        "comment": "",
        "child_ranges": [
            "(line 448,col 9)-(line 448,col 68)",
            "(line 449,col 9)-(line 449,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testTCH()",
        "snippet": "    public void testTCH() {\n        assertEquals( \"RX\", this.getMetaphone().metaphone(\"RETCH\") );\n        assertEquals( \"WX\", this.getMetaphone().metaphone(\"WATCH\") );\n    }",
        "begin_line": 452,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 69)",
            "(line 454,col 9)-(line 454,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testExceedLength()",
        "snippet": "    public void testExceedLength() {\n        // should be AKSKS, but istruncated by Max Code Length\n        assertEquals( \"AKSK\", this.getMetaphone().metaphone(\"AXEAXE\") );\n    }",
        "begin_line": 457,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 459,col 9)-(line 459,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation()",
        "snippet": "    public void testSetMaxLengthWithTruncation() {\n        // should be AKSKS, but istruncated by Max Code Length\n        this.getMetaphone().setMaxCodeLen( 6 );\n        assertEquals( \"AKSKSK\", this.getMetaphone().metaphone(\"AXEAXEAXE\") );\n    }",
        "begin_line": 462,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 464,col 9)-(line 464,col 47)",
            "(line 465,col 9)-(line 465,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.validateFixture(java.lang.String[][])",
        "snippet": "    public void validateFixture(String[][] pairs) {\n        if (pairs.length == 0) {\n            fail(\"Test fixture is empty\");\n        }\n        for (int i = 0; i < pairs.length; i++) {\n            if (pairs[i].length != 2) {\n                fail(\"Error in test fixture in the data array at index \" + i);\n            }\n        }\n    }",
        "begin_line": 468,
        "end_line": 477,
        "comment": "",
        "child_ranges": [
            "(line 469,col 9)-(line 471,col 9)",
            "(line 472,col 9)-(line 476,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.RefinedSoundexTest(java.lang.String)",
        "snippet": "    public RefinedSoundexTest(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.getEncoder()",
        "snippet": "    private RefinedSoundex getEncoder() {\n        return this.encoder;\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n     * @return Returns the encoder.\n     ",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.makeEncoder()",
        "snippet": "    protected StringEncoder makeEncoder() {\n        return new RefinedSoundex();\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.setEncoder(org.apache.commons.codec.language.RefinedSoundex)",
        "snippet": "    private void setEncoder(RefinedSoundex encoder) {\n        this.encoder = encoder;\n    }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n     * @param encoder\n     *                  The encoder to set.\n     ",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.setUp()",
        "snippet": "    public void setUp() throws Exception {\n        super.setUp();\n        this.setEncoder(new RefinedSoundex());\n    }",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 22)",
            "(line 59,col 9)-(line 59,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.tearDown()",
        "snippet": "    public void tearDown() throws Exception {\n        super.tearDown();\n        this.setEncoder(null);\n    }",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 25)",
            "(line 64,col 9)-(line 64,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.testDifference()",
        "snippet": "    public void testDifference() throws EncoderException {\n        // Edge cases\n        assertEquals(0, this.getEncoder().difference(null, null));\n        assertEquals(0, this.getEncoder().difference(\"\", \"\"));\n        assertEquals(0, this.getEncoder().difference(\" \", \" \"));\n        // Normal cases\n        assertEquals(6, this.getEncoder().difference(\"Smith\", \"Smythe\"));\n        assertEquals(3, this.getEncoder().difference(\"Ann\", \"Andrew\"));\n        assertEquals(1, this.getEncoder().difference(\"Margaret\", \"Andrew\"));\n        assertEquals(1, this.getEncoder().difference(\"Janet\", \"Margaret\"));\n        // Examples from\n        // http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\n        assertEquals(5, this.getEncoder().difference(\"Green\", \"Greene\"));\n        assertEquals(1, this.getEncoder().difference(\"Blotchet-Halls\", \"Greene\"));\n        // Examples from\n        // http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp\n        assertEquals(6, this.getEncoder().difference(\"Smith\", \"Smythe\"));\n        assertEquals(8, this.getEncoder().difference(\"Smithers\", \"Smythers\"));\n        assertEquals(5, this.getEncoder().difference(\"Anothers\", \"Brothers\"));\n    }",
        "begin_line": 67,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 66)",
            "(line 70,col 9)-(line 70,col 62)",
            "(line 71,col 9)-(line 71,col 64)",
            "(line 73,col 9)-(line 73,col 73)",
            "(line 74,col 9)-(line 74,col 71)",
            "(line 75,col 9)-(line 75,col 76)",
            "(line 76,col 9)-(line 76,col 75)",
            "(line 79,col 9)-(line 79,col 73)",
            "(line 80,col 9)-(line 80,col 82)",
            "(line 83,col 9)-(line 83,col 73)",
            "(line 84,col 9)-(line 84,col 78)",
            "(line 85,col 9)-(line 85,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.testEncode()",
        "snippet": "    public void testEncode() {\n        assertEquals(\"T6036084\", this.getEncoder().encode(\"testing\"));\n        assertEquals(\"T6036084\", this.getEncoder().encode(\"TESTING\"));\n        assertEquals(\"T60\", this.getEncoder().encode(\"The\"));\n        assertEquals(\"Q503\", this.getEncoder().encode(\"quick\"));\n        assertEquals(\"B1908\", this.getEncoder().encode(\"brown\"));\n        assertEquals(\"F205\", this.getEncoder().encode(\"fox\"));\n        assertEquals(\"J408106\", this.getEncoder().encode(\"jumped\"));\n        assertEquals(\"O0209\", this.getEncoder().encode(\"over\"));\n        assertEquals(\"T60\", this.getEncoder().encode(\"the\"));\n        assertEquals(\"L7050\", this.getEncoder().encode(\"lazy\"));\n        assertEquals(\"D6043\", this.getEncoder().encode(\"dogs\"));\n\n        // Testing CODEC-56\n        assertEquals(\"D6043\", RefinedSoundex.US_ENGLISH.encode(\"dogs\"));\n    }",
        "begin_line": 88,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 70)",
            "(line 90,col 9)-(line 90,col 70)",
            "(line 91,col 9)-(line 91,col 61)",
            "(line 92,col 9)-(line 92,col 64)",
            "(line 93,col 9)-(line 93,col 65)",
            "(line 94,col 9)-(line 94,col 62)",
            "(line 95,col 9)-(line 95,col 68)",
            "(line 96,col 9)-(line 96,col 64)",
            "(line 97,col 9)-(line 97,col 61)",
            "(line 98,col 9)-(line 98,col 64)",
            "(line 99,col 9)-(line 99,col 64)",
            "(line 102,col 9)-(line 102,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter()",
        "snippet": "    public void testGetMappingCodeNonLetter() {\n        char code = this.getEncoder().getMappingCode('#');\n        assertEquals(\"Code does not equals zero\", 0, code);\n    }",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 58)",
            "(line 107,col 9)-(line 107,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance()",
        "snippet": "    public void testNewInstance() {\n        assertEquals(\"D6043\", new RefinedSoundex().soundex(\"dogs\"));\n    }",
        "begin_line": 110,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2()",
        "snippet": "    public void testNewInstance2() {\n        assertEquals(\"D6043\", new RefinedSoundex(RefinedSoundex.US_ENGLISH_MAPPING_STRING.toCharArray()).soundex(\"dogs\"));\n    }",
        "begin_line": 114,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 122)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3()",
        "snippet": "    public void testNewInstance3() {\n        assertEquals(\"D6043\", new RefinedSoundex(RefinedSoundex.US_ENGLISH_MAPPING_STRING).soundex(\"dogs\"));\n    }",
        "begin_line": 118,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.CaverphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
        "signature": "org.apache.commons.codec.language.CaverphoneTest.CaverphoneTest(java.lang.String)",
        "snippet": "    public CaverphoneTest(String name) {\n        super(name);\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.CaverphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
        "signature": "org.apache.commons.codec.language.CaverphoneTest.makeEncoder()",
        "snippet": "    protected StringEncoder makeEncoder() {\n        return new Caverphone();\n    }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.CaverphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
        "signature": "org.apache.commons.codec.language.CaverphoneTest.testSpecificationExamples()",
        "snippet": "    public void testSpecificationExamples() {\n        Caverphone caverphone = new Caverphone();\n        String[][] data = {\n            {\"Stevenson\", \"STFNSN1111\"},\n            {\"Peter\",     \"PTA1111111\"},\n            {\"ready\",     \"RTA1111111\"},\n            {\"social\",    \"SSA1111111\"},\n            {\"able\",      \"APA1111111\"},\n            {\"Tedder\",    \"TTA1111111\"},\n            {\"Karleen\",   \"KLN1111111\"},\n            {\"Dyun\",      \"TN11111111\"},\n        };\n\n        for(int i=0; i<data.length; i++) {\n            assertEquals( data[i][1], caverphone.caverphone(data[i][0]) );\n        }\n    }",
        "begin_line": 37,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 49)",
            "(line 39,col 9)-(line 48,col 10)",
            "(line 50,col 9)-(line 52,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.CaverphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
        "signature": "org.apache.commons.codec.language.CaverphoneTest.testIsCaverphoneEquals()",
        "snippet": "    public void testIsCaverphoneEquals() {\n        Caverphone caverphone = new Caverphone();\n        assertFalse(\"Caverphone encodings should not be equal\", caverphone.isCaverphoneEqual(\"Peter\", \"Stevenson\"));\n        assertTrue(\"Caverphone encodings should be equal\", caverphone.isCaverphoneEqual(\"Peter\", \"Peady\"));\n    }",
        "begin_line": 55,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 49)",
            "(line 57,col 9)-(line 57,col 116)",
            "(line 58,col 9)-(line 58,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.SoundexTest(java.lang.String)",
        "snippet": "    public SoundexTest(String name) {\n        super(name);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.encodeAll(java.lang.String[], java.lang.String)",
        "snippet": "    void encodeAll(String[] strings, String expectedEncoding) {\n        for (int i = 0; i < strings.length; i++) {\n            assertEquals(expectedEncoding, this.getEncoder().encode(strings[i]));\n        }\n    }",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 42,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.getEncoder()",
        "snippet": "    public Soundex getEncoder() {\n        return this.encoder;\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "\n     * @return Returns the _encoder.\n     ",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.makeEncoder()",
        "snippet": "    protected StringEncoder makeEncoder() {\n        return new Soundex();\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.setEncoder(org.apache.commons.codec.language.Soundex)",
        "snippet": "    public void setEncoder(Soundex encoder) {\n        this.encoder = encoder;\n    }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\n     * @param encoder\n     *                  The encoder to set.\n     ",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.setUp()",
        "snippet": "    public void setUp() throws Exception {\n        super.setUp();\n        this.setEncoder(new Soundex());\n    }",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 22)",
            "(line 66,col 9)-(line 66,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.tearDown()",
        "snippet": "    public void tearDown() throws Exception {\n        super.tearDown();\n        this.setEncoder(null);\n    }",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 25)",
            "(line 71,col 9)-(line 71,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testB650()",
        "snippet": "    public void testB650() {\n        this.encodeAll(\n            new String[] {\n                \"BARHAM\",\n                \"BARONE\",\n                \"BARRON\",\n                \"BERNA\",\n                \"BIRNEY\",\n                \"BIRNIE\",\n                \"BOOROM\",\n                \"BOREN\",\n                \"BORN\",\n                \"BOURN\",\n                \"BOURNE\",\n                \"BOWRON\",\n                \"BRAIN\",\n                \"BRAME\",\n                \"BRANN\",\n                \"BRAUN\",\n                \"BREEN\",\n                \"BRIEN\",\n                \"BRIM\",\n                \"BRIMM\",\n                \"BRINN\",\n                \"BRION\",\n                \"BROOM\",\n                \"BROOME\",\n                \"BROWN\",\n                \"BROWNE\",\n                \"BRUEN\",\n                \"BRUHN\",\n                \"BRUIN\",\n                \"BRUMM\",\n                \"BRUN\",\n                \"BRUNO\",\n                \"BRYAN\",\n                \"BURIAN\",\n                \"BURN\",\n                \"BURNEY\",\n                \"BYRAM\",\n                \"BYRNE\",\n                \"BYRON\",\n                \"BYRUM\" },\n            \"B650\");\n    }",
        "begin_line": 74,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 117,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testDifference()",
        "snippet": "    public void testDifference() throws EncoderException {\n        // Edge cases\n        assertEquals(0, this.getEncoder().difference(null, null));\n        assertEquals(0, this.getEncoder().difference(\"\", \"\"));\n        assertEquals(0, this.getEncoder().difference(\" \", \" \"));\n        // Normal cases\n        assertEquals(4, this.getEncoder().difference(\"Smith\", \"Smythe\"));\n        assertEquals(2, this.getEncoder().difference(\"Ann\", \"Andrew\"));\n        assertEquals(1, this.getEncoder().difference(\"Margaret\", \"Andrew\"));\n        assertEquals(0, this.getEncoder().difference(\"Janet\", \"Margaret\"));\n        // Examples from http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\n        assertEquals(4, this.getEncoder().difference(\"Green\", \"Greene\"));\n        assertEquals(0, this.getEncoder().difference(\"Blotchet-Halls\", \"Greene\"));\n        // Examples from http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp\n        assertEquals(4, this.getEncoder().difference(\"Smith\", \"Smythe\"));\n        assertEquals(4, this.getEncoder().difference(\"Smithers\", \"Smythers\"));\n        assertEquals(2, this.getEncoder().difference(\"Anothers\", \"Brothers\"));\n    }",
        "begin_line": 120,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 66)",
            "(line 123,col 9)-(line 123,col 62)",
            "(line 124,col 9)-(line 124,col 64)",
            "(line 126,col 9)-(line 126,col 73)",
            "(line 127,col 9)-(line 127,col 71)",
            "(line 128,col 9)-(line 128,col 76)",
            "(line 129,col 9)-(line 129,col 75)",
            "(line 131,col 9)-(line 131,col 73)",
            "(line 132,col 9)-(line 132,col 82)",
            "(line 134,col 9)-(line 134,col 73)",
            "(line 135,col 9)-(line 135,col 78)",
            "(line 136,col 9)-(line 136,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testEncodeBasic()",
        "snippet": "    public void testEncodeBasic() {\n        assertEquals(\"T235\", this.getEncoder().encode(\"testing\"));\n        assertEquals(\"T000\", this.getEncoder().encode(\"The\"));\n        assertEquals(\"Q200\", this.getEncoder().encode(\"quick\"));\n        assertEquals(\"B650\", this.getEncoder().encode(\"brown\"));\n        assertEquals(\"F200\", this.getEncoder().encode(\"fox\"));\n        assertEquals(\"J513\", this.getEncoder().encode(\"jumped\"));\n        assertEquals(\"O160\", this.getEncoder().encode(\"over\"));\n        assertEquals(\"T000\", this.getEncoder().encode(\"the\"));\n        assertEquals(\"L200\", this.getEncoder().encode(\"lazy\"));\n        assertEquals(\"D200\", this.getEncoder().encode(\"dogs\"));\n    }",
        "begin_line": 139,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 66)",
            "(line 141,col 9)-(line 141,col 62)",
            "(line 142,col 9)-(line 142,col 64)",
            "(line 143,col 9)-(line 143,col 64)",
            "(line 144,col 9)-(line 144,col 62)",
            "(line 145,col 9)-(line 145,col 65)",
            "(line 146,col 9)-(line 146,col 63)",
            "(line 147,col 9)-(line 147,col 62)",
            "(line 148,col 9)-(line 148,col 63)",
            "(line 149,col 9)-(line 149,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testEncodeBatch2()",
        "snippet": "    public void testEncodeBatch2() {\n        assertEquals(\"A462\", this.getEncoder().encode(\"Allricht\"));\n        assertEquals(\"E166\", this.getEncoder().encode(\"Eberhard\"));\n        assertEquals(\"E521\", this.getEncoder().encode(\"Engebrethson\"));\n        assertEquals(\"H512\", this.getEncoder().encode(\"Heimbach\"));\n        assertEquals(\"H524\", this.getEncoder().encode(\"Hanselmann\"));\n        assertEquals(\"H431\", this.getEncoder().encode(\"Hildebrand\"));\n        assertEquals(\"K152\", this.getEncoder().encode(\"Kavanagh\"));\n        assertEquals(\"L530\", this.getEncoder().encode(\"Lind\"));\n        assertEquals(\"L222\", this.getEncoder().encode(\"Lukaschowsky\"));\n        assertEquals(\"M235\", this.getEncoder().encode(\"McDonnell\"));\n        assertEquals(\"M200\", this.getEncoder().encode(\"McGee\"));\n        assertEquals(\"O155\", this.getEncoder().encode(\"Opnian\"));\n        assertEquals(\"O155\", this.getEncoder().encode(\"Oppenheimer\"));\n        assertEquals(\"R355\", this.getEncoder().encode(\"Riedemanas\"));\n        assertEquals(\"Z300\", this.getEncoder().encode(\"Zita\"));\n        assertEquals(\"Z325\", this.getEncoder().encode(\"Zitzmeinn\"));\n    }",
        "begin_line": 156,
        "end_line": 173,
        "comment": "\n     * Examples from\n     * http://www.bradandkathy.com/genealogy/overviewofsoundex.html\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 67)",
            "(line 158,col 9)-(line 158,col 67)",
            "(line 159,col 9)-(line 159,col 71)",
            "(line 160,col 9)-(line 160,col 67)",
            "(line 161,col 9)-(line 161,col 69)",
            "(line 162,col 9)-(line 162,col 69)",
            "(line 163,col 9)-(line 163,col 67)",
            "(line 164,col 9)-(line 164,col 63)",
            "(line 165,col 9)-(line 165,col 71)",
            "(line 166,col 9)-(line 166,col 68)",
            "(line 167,col 9)-(line 167,col 64)",
            "(line 168,col 9)-(line 168,col 65)",
            "(line 169,col 9)-(line 169,col 70)",
            "(line 170,col 9)-(line 170,col 69)",
            "(line 171,col 9)-(line 171,col 63)",
            "(line 172,col 9)-(line 172,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testEncodeBatch3()",
        "snippet": "    public void testEncodeBatch3() {\n        assertEquals(\"W252\", this.getEncoder().encode(\"Washington\"));\n        assertEquals(\"L000\", this.getEncoder().encode(\"Lee\"));\n        assertEquals(\"G362\", this.getEncoder().encode(\"Gutierrez\"));\n        assertEquals(\"P236\", this.getEncoder().encode(\"Pfister\"));\n        assertEquals(\"J250\", this.getEncoder().encode(\"Jackson\"));\n        assertEquals(\"T522\", this.getEncoder().encode(\"Tymczak\"));\n        // For VanDeusen: D-250 (D, 2 for the S, 5 for the N, 0 added) is also\n        // possible.\n        assertEquals(\"V532\", this.getEncoder().encode(\"VanDeusen\"));\n    }",
        "begin_line": 179,
        "end_line": 189,
        "comment": "\n     * Examples from\n     * http://www.archives.gov/research_room/genealogy/census/soundex.html\n     ",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 69)",
            "(line 181,col 9)-(line 181,col 62)",
            "(line 182,col 9)-(line 182,col 68)",
            "(line 183,col 9)-(line 183,col 66)",
            "(line 184,col 9)-(line 184,col 66)",
            "(line 185,col 9)-(line 185,col 66)",
            "(line 188,col 9)-(line 188,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testEncodeBatch4()",
        "snippet": "    public void testEncodeBatch4() {\n        assertEquals(\"H452\", this.getEncoder().encode(\"HOLMES\"));\n        assertEquals(\"A355\", this.getEncoder().encode(\"ADOMOMI\"));\n        assertEquals(\"V536\", this.getEncoder().encode(\"VONDERLEHR\"));\n        assertEquals(\"B400\", this.getEncoder().encode(\"BALL\"));\n        assertEquals(\"S000\", this.getEncoder().encode(\"SHAW\"));\n        assertEquals(\"J250\", this.getEncoder().encode(\"JACKSON\"));\n        assertEquals(\"S545\", this.getEncoder().encode(\"SCANLON\"));\n        assertEquals(\"S532\", this.getEncoder().encode(\"SAINTJOHN\"));\n\n    }",
        "begin_line": 194,
        "end_line": 204,
        "comment": "\n     * Examples from: http://www.myatt.demon.co.uk/sxalg.htm\n     ",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 65)",
            "(line 196,col 9)-(line 196,col 66)",
            "(line 197,col 9)-(line 197,col 69)",
            "(line 198,col 9)-(line 198,col 63)",
            "(line 199,col 9)-(line 199,col 63)",
            "(line 200,col 9)-(line 200,col 66)",
            "(line 201,col 9)-(line 201,col 66)",
            "(line 202,col 9)-(line 202,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testBadCharacters()",
        "snippet": "    public void testBadCharacters() {\n        assertEquals(\"H452\", this.getEncoder().encode(\"HOL>MES\"));\n\n    }",
        "begin_line": 206,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 207,col 9)-(line 207,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes()",
        "snippet": "    public void testEncodeIgnoreApostrophes() {\n        this.encodeAll(new String[] { \"OBrien\", \"'OBrien\", \"O'Brien\", \"OB'rien\", \"OBr'ien\", \"OBri'en\", \"OBrie'n\", \"OBrien'\" }, \"O165\");\n    }",
        "begin_line": 211,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 135)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens()",
        "snippet": "    public void testEncodeIgnoreHyphens() {\n        this.encodeAll(\n            new String[] {\n                \"KINGSMITH\",\n                \"-KINGSMITH\",\n                \"K-INGSMITH\",\n                \"KI-NGSMITH\",\n                \"KIN-GSMITH\",\n                \"KING-SMITH\",\n                \"KINGS-MITH\",\n                \"KINGSM-ITH\",\n                \"KINGSMI-TH\",\n                \"KINGSMIT-H\",\n                \"KINGSMITH-\" },\n            \"K525\");\n    }",
        "begin_line": 218,
        "end_line": 233,
        "comment": "\n     * Test data from http://www.myatt.demon.co.uk/sxalg.htm\n     ",
        "child_ranges": [
            "(line 219,col 9)-(line 232,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable()",
        "snippet": "    public void testEncodeIgnoreTrimmable() {\n        assertEquals(\"W252\", this.getEncoder().encode(\" \\t\\n\\r Washington \\t\\n\\r \"));\n    }",
        "begin_line": 235,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testHWRuleEx1()",
        "snippet": "    public void testHWRuleEx1() {\n        // From\n        // http://www.archives.gov/research_room/genealogy/census/soundex.html:\n        // Ashcraft is coded A-261 (A, 2 for the S, C ignored, 6 for the R, 1\n        // for the F). It is not coded A-226.\n        assertEquals(\"A261\", this.getEncoder().encode(\"Ashcraft\"));\n    }",
        "begin_line": 243,
        "end_line": 249,
        "comment": "\n     * Consonants from the same code group separated by W or H are treated as\n     * one.\n     ",
        "child_ranges": [
            "(line 248,col 9)-(line 248,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testHWRuleEx2()",
        "snippet": "    public void testHWRuleEx2() {\n        assertEquals(\"B312\", this.getEncoder().encode(\"BOOTHDAVIS\"));\n        assertEquals(\"B312\", this.getEncoder().encode(\"BOOTH-DAVIS\"));\n    }",
        "begin_line": 257,
        "end_line": 260,
        "comment": "\n     * Consonants from the same code group separated by W or H are treated as\n     * one.\n     *\n     * Test data from http://www.myatt.demon.co.uk/sxalg.htm\n     ",
        "child_ranges": [
            "(line 258,col 9)-(line 258,col 69)",
            "(line 259,col 9)-(line 259,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testHWRuleEx3()",
        "snippet": "    public void testHWRuleEx3() {\n        assertEquals(\"S460\", this.getEncoder().encode(\"Sgler\"));\n        assertEquals(\"S460\", this.getEncoder().encode(\"Swhgler\"));\n        // Also S460:\n        this.encodeAll(\n            new String[] {\n                \"SAILOR\",\n                \"SALYER\",\n                \"SAYLOR\",\n                \"SCHALLER\",\n                \"SCHELLER\",\n                \"SCHILLER\",\n                \"SCHOOLER\",\n                \"SCHULER\",\n                \"SCHUYLER\",\n                \"SEILER\",\n                \"SEYLER\",\n                \"SHOLAR\",\n                \"SHULER\",\n                \"SILAR\",\n                \"SILER\",\n                \"SILLER\" },\n            \"S460\");\n    }",
        "begin_line": 266,
        "end_line": 289,
        "comment": "\n     * Consonants from the same code group separated by W or H are treated as\n     * one.\n     ",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 64)",
            "(line 268,col 9)-(line 268,col 66)",
            "(line 270,col 9)-(line 288,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testMaxLength()",
        "snippet": "    public void testMaxLength() throws Exception {\n        Soundex soundex = new Soundex();\n        soundex.setMaxLength(soundex.getMaxLength());\n        assertEquals(\"S460\", this.getEncoder().encode(\"Sgler\"));\n    }",
        "begin_line": 291,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 40)",
            "(line 293,col 9)-(line 293,col 53)",
            "(line 294,col 9)-(line 294,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testMaxLengthLessThan3Fix()",
        "snippet": "    public void testMaxLengthLessThan3Fix() throws Exception {\n        Soundex soundex = new Soundex();\n        soundex.setMaxLength(2);\n        assertEquals(\"S460\", soundex.encode(\"SCHELLER\"));\n    }",
        "begin_line": 297,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 40)",
            "(line 299,col 9)-(line 299,col 32)",
            "(line 300,col 9)-(line 300,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testMsSqlServer1()",
        "snippet": "    public void testMsSqlServer1() {\n        assertEquals(\"S530\", this.getEncoder().encode(\"Smith\"));\n        assertEquals(\"S530\", this.getEncoder().encode(\"Smythe\"));\n    }",
        "begin_line": 307,
        "end_line": 310,
        "comment": "\n     * Examples for MS SQLServer from\n     * http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp\n     ",
        "child_ranges": [
            "(line 308,col 9)-(line 308,col 64)",
            "(line 309,col 9)-(line 309,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testMsSqlServer2()",
        "snippet": "    public void testMsSqlServer2() {\n        this.encodeAll(new String[]{\"Erickson\", \"Erickson\", \"Erikson\", \"Ericson\", \"Ericksen\", \"Ericsen\"}, \"E625\");\n    }",
        "begin_line": 316,
        "end_line": 318,
        "comment": "\n     * Examples for MS SQLServer from\n     * http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support/kb/articles/Q100/3/65.asp&NoWebContent=1\n     ",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testMsSqlServer3()",
        "snippet": "    public void testMsSqlServer3() {\n        assertEquals(\"A500\", this.getEncoder().encode(\"Ann\"));\n        assertEquals(\"A536\", this.getEncoder().encode(\"Andrew\"));\n        assertEquals(\"J530\", this.getEncoder().encode(\"Janet\"));\n        assertEquals(\"M626\", this.getEncoder().encode(\"Margaret\"));\n        assertEquals(\"S315\", this.getEncoder().encode(\"Steven\"));\n        assertEquals(\"M240\", this.getEncoder().encode(\"Michael\"));\n        assertEquals(\"R163\", this.getEncoder().encode(\"Robert\"));\n        assertEquals(\"L600\", this.getEncoder().encode(\"Laura\"));\n        assertEquals(\"A500\", this.getEncoder().encode(\"Anne\"));\n    }",
        "begin_line": 323,
        "end_line": 333,
        "comment": "\n     * Examples for MS SQLServer from\n     * http://databases.about.com/library/weekly/aa042901a.htm\n     ",
        "child_ranges": [
            "(line 324,col 9)-(line 324,col 62)",
            "(line 325,col 9)-(line 325,col 65)",
            "(line 326,col 9)-(line 326,col 64)",
            "(line 327,col 9)-(line 327,col 67)",
            "(line 328,col 9)-(line 328,col 65)",
            "(line 329,col 9)-(line 329,col 66)",
            "(line 330,col 9)-(line 330,col 65)",
            "(line 331,col 9)-(line 331,col 64)",
            "(line 332,col 9)-(line 332,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis()",
        "snippet": "    public void testUsMappingOWithDiaeresis() {\n        assertEquals(\"O000\", this.getEncoder().encode(\"o\"));\n        if ( Character.isLetter('\u00c3\u00b6') ) {\n            try {\n                assertEquals(\"\u00c3\u0096000\", this.getEncoder().encode(\"\u00c3\u00b6\"));\n                fail(\"Expected IllegalArgumentException not thrown\");\n            } catch (IllegalArgumentException e) {\n                // expected\n            }\n        } else {\n            assertEquals(\"\", this.getEncoder().encode(\"\u00c3\u00b6\"));\n        }\n    }",
        "begin_line": 340,
        "end_line": 352,
        "comment": "\n     * Fancy characters are not mapped by the default US mapping.\n     *\n     * http://issues.apache.org/bugzilla/show_bug.cgi?id=29080\n     ",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 60)",
            "(line 342,col 9)-(line 351,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute()",
        "snippet": "    public void testUsMappingEWithAcute() {\n        assertEquals(\"E000\", this.getEncoder().encode(\"e\"));\n        if ( Character.isLetter('\u00c3\u00a9') ) {\n            try {\n                assertEquals(\"\u00c3\u0089000\", this.getEncoder().encode(\"\u00c3\u00a9\"));\n                fail(\"Expected IllegalArgumentException not thrown\");\n            } catch (IllegalArgumentException e) {\n                // expected\n            }\n        } else {\n            assertEquals(\"\", this.getEncoder().encode(\"\u00c3\u00a9\"));\n        }\n    }",
        "begin_line": 359,
        "end_line": 371,
        "comment": "\n     * Fancy characters are not mapped by the default US mapping.\n     *\n     * http://issues.apache.org/bugzilla/show_bug.cgi?id=29080\n     ",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 60)",
            "(line 361,col 9)-(line 370,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic()",
        "snippet": "    public void testUsEnglishStatic() {\n        assertEquals(\"W452\", Soundex.US_ENGLISH.soundex(\"Williams\"));\n    }",
        "begin_line": 377,
        "end_line": 379,
        "comment": "\n     * https://issues.apache.org/jira/browse/CODEC-54\n     * https://issues.apache.org/jira/browse/CODEC-56\n     ",
        "child_ranges": [
            "(line 378,col 9)-(line 378,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testNewInstance()",
        "snippet": "    public void testNewInstance() {\n        assertEquals(\"W452\", new Soundex().soundex(\"Williams\"));\n    }",
        "begin_line": 385,
        "end_line": 387,
        "comment": "\n     * https://issues.apache.org/jira/browse/CODEC-54\n     * https://issues.apache.org/jira/browse/CODEC-56\n     ",
        "child_ranges": [
            "(line 386,col 9)-(line 386,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testNewInstance2()",
        "snippet": "    public void testNewInstance2() {\n        assertEquals(\"W452\", new Soundex(Soundex.US_ENGLISH_MAPPING_STRING.toCharArray()).soundex(\"Williams\"));\n    }",
        "begin_line": 389,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 390,col 9)-(line 390,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testNewInstance3()",
        "snippet": "    public void testNewInstance3() {\n        assertEquals(\"W452\", new Soundex(Soundex.US_ENGLISH_MAPPING_STRING).soundex(\"Williams\"));\n    }",
        "begin_line": 393,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 394,col 9)-(line 394,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour()",
        "snippet": "    public void testSoundexUtilsNullBehaviour() {\n        assertEquals(null, SoundexUtils.clean(null));\n        assertEquals(\"\", SoundexUtils.clean(\"\"));\n        assertEquals(0, SoundexUtils.differenceEncoded(null, \"\"));\n        assertEquals(0, SoundexUtils.differenceEncoded(\"\", null));\n    }",
        "begin_line": 397,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 398,col 9)-(line 398,col 53)",
            "(line 399,col 9)-(line 399,col 49)",
            "(line 400,col 9)-(line 400,col 66)",
            "(line 401,col 9)-(line 401,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testSoundexUtilsConstructable()",
        "snippet": "    public void testSoundexUtilsConstructable() {\n        new SoundexUtils();\n    }",
        "begin_line": 403,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 404,col 9)-(line 404,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone2Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphone2Test.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone2Test.DoubleMetaphone2Test(java.lang.String)",
        "snippet": "    public DoubleMetaphone2Test(String name) {\n        super(name);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "\n     * Construct a new test case.\n     *\n     * @param name The name of the test\n     ",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone2Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphone2Test.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone2Test.setUp()",
        "snippet": "    public void setUp() throws Exception {\n        super.setUp();\n        this.doubleMetaphone = new DoubleMetaphone();\n    }",
        "begin_line": 46,
        "end_line": 49,
        "comment": "\n     * Set up.\n     ",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 22)",
            "(line 48,col 9)-(line 48,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone2Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphone2Test.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone2Test.tearDown()",
        "snippet": "    public void tearDown() throws Exception {\n        super.tearDown();\n        this.doubleMetaphone = null;\n    }",
        "begin_line": 54,
        "end_line": 57,
        "comment": "\n     * Tear Down.\n     ",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 25)",
            "(line 56,col 9)-(line 56,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone2Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphone2Test.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary()",
        "snippet": "    public void testDoubleMetaphonePrimary() {\n        String value = null;\n        for (int i = 0; i < TEST_DATA.length; i++) {\n            value = TEST_DATA[i][0];\n            assertEquals(\"Test [\" + i + \"]=\" + value, TEST_DATA[i][1], doubleMetaphone.doubleMetaphone(value, false));\n        }\n    }",
        "begin_line": 62,
        "end_line": 68,
        "comment": "\n     * Test primary encoding.\n     ",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 28)",
            "(line 64,col 9)-(line 67,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone2Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphone2Test.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate()",
        "snippet": "    public void testDoubleMetaphoneAlternate() {\n        String value = null;\n        for (int i = 0; i < TEST_DATA.length; i++) {\n            value = TEST_DATA[i][0];\n            assertEquals(\"Test [\" + i + \"]=\" + value, TEST_DATA[i][2], doubleMetaphone.doubleMetaphone(value, true));\n        }\n    }",
        "begin_line": 73,
        "end_line": 79,
        "comment": "\n     * Test alternative encoding.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 28)",
            "(line 75,col 9)-(line 78,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.DoubleMetaphoneTest(java.lang.String)",
        "snippet": "    public DoubleMetaphoneTest(String name) {\n        super(name);\n    }",
        "begin_line": 1003,
        "end_line": 1005,
        "comment": "",
        "child_ranges": [
            "(line 1004,col 9)-(line 1004,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphone(java.lang.String, java.lang.String)",
        "snippet": "    private void assertDoubleMetaphone(String expected, String source) {\n        assertEquals(expected, this.getDoubleMetaphone().encode(source));\n        try {\n            assertEquals(expected, this.getDoubleMetaphone().encode((Object) source));\n        } catch (EncoderException e) {\n            fail(\"Unexpected expection: \" + e);\n        }\n        assertEquals(expected, this.getDoubleMetaphone().doubleMetaphone(source));\n        assertEquals(expected, this.getDoubleMetaphone().doubleMetaphone(source, false));\n    }",
        "begin_line": 1010,
        "end_line": 1019,
        "comment": "\n     * Tests encoding APIs in one place.\n     ",
        "child_ranges": [
            "(line 1011,col 9)-(line 1011,col 73)",
            "(line 1012,col 9)-(line 1016,col 9)",
            "(line 1017,col 9)-(line 1017,col 82)",
            "(line 1018,col 9)-(line 1018,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphoneAlt(java.lang.String, java.lang.String)",
        "snippet": "    public void assertDoubleMetaphoneAlt(String expected, String source) {\n        assertEquals(expected, this.getDoubleMetaphone().doubleMetaphone(source, true));\n    }",
        "begin_line": 1024,
        "end_line": 1026,
        "comment": "\n     * Tests encoding APIs in one place.\n     ",
        "child_ranges": [
            "(line 1025,col 9)-(line 1025,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest(java.lang.String[][], boolean)",
        "snippet": "    public void doubleMetaphoneEqualTest(String[][] pairs, boolean useAlternate) {\n        this.validateFixture(pairs);\n        for (int i = 0; i < pairs.length; i++) {\n            String name0 = pairs[i][0];\n            String name1 = pairs[i][1];\n            String failMsg = \"Expected match between \" + name0 + \" and \" + name1 + \" (use alternate: \" + useAlternate + \")\";\n            assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, useAlternate));\n            assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name1, name0, useAlternate));\n            if (!useAlternate) {\n                assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1));\n                assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name1, name0));\n            }\n        }\n    }",
        "begin_line": 1028,
        "end_line": 1041,
        "comment": "",
        "child_ranges": [
            "(line 1029,col 9)-(line 1029,col 36)",
            "(line 1030,col 9)-(line 1040,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneNotEqualTest(boolean)",
        "snippet": "    public void doubleMetaphoneNotEqualTest(boolean alternate) {\n        assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"Brain\", \"Band\", alternate));\n        assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"Band\", \"Brain\", alternate));\n\n        if (!alternate) {\n            assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"Brain\", \"Band\"));\n            assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"Band\", \"Brain\"));\n        }\n    }",
        "begin_line": 1043,
        "end_line": 1051,
        "comment": "",
        "child_ranges": [
            "(line 1044,col 9)-(line 1044,col 98)",
            "(line 1045,col 9)-(line 1045,col 98)",
            "(line 1047,col 9)-(line 1050,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.getDoubleMetaphone()",
        "snippet": "    private DoubleMetaphone getDoubleMetaphone() {\n        return this.doubleMetaphone;\n    }",
        "begin_line": 1053,
        "end_line": 1055,
        "comment": "",
        "child_ranges": [
            "(line 1054,col 9)-(line 1054,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.makeEncoder()",
        "snippet": "    protected StringEncoder makeEncoder() {\n        return new Metaphone();\n    }",
        "begin_line": 1057,
        "end_line": 1059,
        "comment": "",
        "child_ranges": [
            "(line 1058,col 9)-(line 1058,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.setDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphone)",
        "snippet": "    private void setDoubleMetaphone(DoubleMetaphone doubleMetaphone) {\n        this.doubleMetaphone = doubleMetaphone;\n    }",
        "begin_line": 1061,
        "end_line": 1063,
        "comment": "",
        "child_ranges": [
            "(line 1062,col 9)-(line 1062,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.setUp()",
        "snippet": "    public void setUp() throws Exception {\n        super.setUp();\n        this.setDoubleMetaphone(new DoubleMetaphone());\n    }",
        "begin_line": 1065,
        "end_line": 1068,
        "comment": "",
        "child_ranges": [
            "(line 1066,col 9)-(line 1066,col 22)",
            "(line 1067,col 9)-(line 1067,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.tearDown()",
        "snippet": "    public void tearDown() throws Exception {\n        super.tearDown();\n        this.setDoubleMetaphone(null);\n    }",
        "begin_line": 1070,
        "end_line": 1073,
        "comment": "",
        "child_ranges": [
            "(line 1071,col 9)-(line 1071,col 25)",
            "(line 1072,col 9)-(line 1072,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone()",
        "snippet": "    public void testDoubleMetaphone() {\n        assertDoubleMetaphone(\"TSTN\", \"testing\");\n        assertDoubleMetaphone(\"0\", \"The\");\n        assertDoubleMetaphone(\"KK\", \"quick\");\n        assertDoubleMetaphone(\"PRN\", \"brown\");\n        assertDoubleMetaphone(\"FKS\", \"fox\");\n        assertDoubleMetaphone(\"JMPT\", \"jumped\");\n        assertDoubleMetaphone(\"AFR\", \"over\");\n        assertDoubleMetaphone(\"0\", \"the\");\n        assertDoubleMetaphone(\"LS\", \"lazy\");\n        assertDoubleMetaphone(\"TKS\", \"dogs\");\n        assertDoubleMetaphone(\"MKFR\", \"MacCafferey\");\n        assertDoubleMetaphone(\"STFN\", \"Stephan\");\n        assertDoubleMetaphone(\"KSSK\", \"Kuczewski\");\n        assertDoubleMetaphone(\"MKLL\", \"McClelland\");\n        assertDoubleMetaphone(\"SNHS\", \"san jose\");\n        assertDoubleMetaphone(\"SNFP\", \"xenophobia\");\n\n        assertDoubleMetaphoneAlt(\"TSTN\", \"testing\");\n        assertDoubleMetaphoneAlt(\"T\", \"The\");\n        assertDoubleMetaphoneAlt(\"KK\", \"quick\");\n        assertDoubleMetaphoneAlt(\"PRN\", \"brown\");\n        assertDoubleMetaphoneAlt(\"FKS\", \"fox\");\n        assertDoubleMetaphoneAlt(\"AMPT\", \"jumped\");\n        assertDoubleMetaphoneAlt(\"AFR\", \"over\");\n        assertDoubleMetaphoneAlt(\"T\", \"the\");\n        assertDoubleMetaphoneAlt(\"LS\", \"lazy\");\n        assertDoubleMetaphoneAlt(\"TKS\", \"dogs\");\n        assertDoubleMetaphoneAlt(\"MKFR\", \"MacCafferey\");\n        assertDoubleMetaphoneAlt(\"STFN\", \"Stephan\");\n        assertDoubleMetaphoneAlt(\"KXFS\", \"Kutchefski\");\n        assertDoubleMetaphoneAlt(\"MKLL\", \"McClelland\");\n        assertDoubleMetaphoneAlt(\"SNHS\", \"san jose\");\n        assertDoubleMetaphoneAlt(\"SNFP\", \"xenophobia\");\n        assertDoubleMetaphoneAlt(\"FKR\", \"Fokker\");\n        assertDoubleMetaphoneAlt(\"AK\", \"Joqqi\");\n        assertDoubleMetaphoneAlt(\"HF\", \"Hovvi\");\n        assertDoubleMetaphoneAlt(\"XRN\", \"Czerny\");\n    }",
        "begin_line": 1075,
        "end_line": 1113,
        "comment": "",
        "child_ranges": [
            "(line 1076,col 9)-(line 1076,col 49)",
            "(line 1077,col 9)-(line 1077,col 42)",
            "(line 1078,col 9)-(line 1078,col 45)",
            "(line 1079,col 9)-(line 1079,col 46)",
            "(line 1080,col 9)-(line 1080,col 44)",
            "(line 1081,col 9)-(line 1081,col 48)",
            "(line 1082,col 9)-(line 1082,col 45)",
            "(line 1083,col 9)-(line 1083,col 42)",
            "(line 1084,col 9)-(line 1084,col 44)",
            "(line 1085,col 9)-(line 1085,col 45)",
            "(line 1086,col 9)-(line 1086,col 53)",
            "(line 1087,col 9)-(line 1087,col 49)",
            "(line 1088,col 9)-(line 1088,col 51)",
            "(line 1089,col 9)-(line 1089,col 52)",
            "(line 1090,col 9)-(line 1090,col 50)",
            "(line 1091,col 9)-(line 1091,col 52)",
            "(line 1093,col 9)-(line 1093,col 52)",
            "(line 1094,col 9)-(line 1094,col 45)",
            "(line 1095,col 9)-(line 1095,col 48)",
            "(line 1096,col 9)-(line 1096,col 49)",
            "(line 1097,col 9)-(line 1097,col 47)",
            "(line 1098,col 9)-(line 1098,col 51)",
            "(line 1099,col 9)-(line 1099,col 48)",
            "(line 1100,col 9)-(line 1100,col 45)",
            "(line 1101,col 9)-(line 1101,col 47)",
            "(line 1102,col 9)-(line 1102,col 48)",
            "(line 1103,col 9)-(line 1103,col 56)",
            "(line 1104,col 9)-(line 1104,col 52)",
            "(line 1105,col 9)-(line 1105,col 55)",
            "(line 1106,col 9)-(line 1106,col 55)",
            "(line 1107,col 9)-(line 1107,col 53)",
            "(line 1108,col 9)-(line 1108,col 55)",
            "(line 1109,col 9)-(line 1109,col 50)",
            "(line 1110,col 9)-(line 1110,col 48)",
            "(line 1111,col 9)-(line 1111,col 48)",
            "(line 1112,col 9)-(line 1112,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty()",
        "snippet": "    public void testEmpty() {\n        assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(null));\n        assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(\"\"));\n        assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(\" \"));\n        assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(\"\\t\\n\\r \"));\n    }",
        "begin_line": 1115,
        "end_line": 1120,
        "comment": "",
        "child_ranges": [
            "(line 1116,col 9)-(line 1116,col 76)",
            "(line 1117,col 9)-(line 1117,col 74)",
            "(line 1118,col 9)-(line 1118,col 75)",
            "(line 1119,col 9)-(line 1119,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength()",
        "snippet": "    public void testSetMaxCodeLength() {\n        String value = \"jumped\";\n        \n        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();\n\n        // Sanity check of default settings\n        assertEquals(\"Default Max Code Length\", 4, doubleMetaphone.getMaxCodeLen());\n        assertEquals(\"Default Primary\",   \"JMPT\", doubleMetaphone.doubleMetaphone(value, false));\n        assertEquals(\"Default Alternate\", \"AMPT\", doubleMetaphone.doubleMetaphone(value, true));\n\n        // Check setting Max Code Length\n        doubleMetaphone.setMaxCodeLen(3);\n        assertEquals(\"Set Max Code Length\", 3, doubleMetaphone.getMaxCodeLen());\n        assertEquals(\"Max=3 Primary\",   \"JMP\", doubleMetaphone.doubleMetaphone(value, false));\n        assertEquals(\"Max=3 Alternate\", \"AMP\", doubleMetaphone.doubleMetaphone(value, true));\n    }",
        "begin_line": 1125,
        "end_line": 1140,
        "comment": "\n     * Test setting maximum length\n     ",
        "child_ranges": [
            "(line 1126,col 9)-(line 1126,col 32)",
            "(line 1128,col 9)-(line 1128,col 64)",
            "(line 1131,col 9)-(line 1131,col 84)",
            "(line 1132,col 9)-(line 1132,col 97)",
            "(line 1133,col 9)-(line 1133,col 96)",
            "(line 1136,col 9)-(line 1136,col 41)",
            "(line 1137,col 9)-(line 1137,col 80)",
            "(line 1138,col 9)-(line 1138,col 94)",
            "(line 1139,col 9)-(line 1139,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic()",
        "snippet": "    public void testIsDoubleMetaphoneEqualBasic() {\n        String[][] testFixture = new String[][] { { \"Case\", \"case\" }, {\n                \"CASE\", \"Case\" }, {\n                \"caSe\", \"cAsE\" }, {\n                \"cookie\", \"quick\" }, {\n                \"quick\", \"cookie\" }, {\n                \"Brian\", \"Bryan\" }, {\n                \"Auto\", \"Otto\" }, {\n                \"Steven\", \"Stefan\" }, {\n                \"Philipowitz\", \"Filipowicz\" }\n        };\n        doubleMetaphoneEqualTest(testFixture, false);\n        doubleMetaphoneEqualTest(testFixture, true);\n    }",
        "begin_line": 1142,
        "end_line": 1155,
        "comment": "",
        "child_ranges": [
            "(line 1143,col 9)-(line 1152,col 10)",
            "(line 1153,col 9)-(line 1153,col 53)",
            "(line 1154,col 9)-(line 1154,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended1()",
        "snippet": "    public void testIsDoubleMetaphoneEqualExtended1() {\n        //        String[][] testFixture = new String[][] { { \"Smith\", \"Schmidt\" }\n        //        };\n        //        doubleMetaphoneEqualTest(testFixture, false);\n        //        doubleMetaphoneEqualTest(testFixture, true);\n    }",
        "begin_line": 1160,
        "end_line": 1165,
        "comment": "\n     * Example in the original article but failures in this Java impl:\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2()",
        "snippet": "    public void testIsDoubleMetaphoneEqualExtended2() {\n        String[][] testFixture = new String[][] { { \"Jablonski\", \"Yablonsky\" }\n        };\n        //doubleMetaphoneEqualTest(testFixture, false);\n        doubleMetaphoneEqualTest(testFixture, true);\n    }",
        "begin_line": 1167,
        "end_line": 1172,
        "comment": "",
        "child_ranges": [
            "(line 1168,col 9)-(line 1169,col 10)",
            "(line 1171,col 9)-(line 1171,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3()",
        "snippet": "    public void testIsDoubleMetaphoneEqualExtended3() {\n        this.validateFixture(FIXTURE);\n        StringBuffer failures = new StringBuffer();\n        StringBuffer matches = new StringBuffer();\n        String cr = System.getProperty(\"line.separator\");\n        matches.append(\"private static final String[][] MATCHES = {\" + cr);\n        int failCount = 0;\n        for (int i = 0; i < FIXTURE.length; i++) {\n            String name0 = FIXTURE[i][0];\n            String name1 = FIXTURE[i][1];\n            boolean match1 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, false);\n            boolean match2 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, true);\n            if (match1 == false && match2 == false) {\n                String failMsg = \"[\" + i + \"] \" + name0 + \" and \" + name1 + cr;\n                failures.append(failMsg);\n                failCount++;\n            } else {\n                matches.append(\"{\\\"\" + name0 + \"\\\", \\\"\" + name1 + \"\\\"},\" + cr);\n            }\n        }\n        String msg = failures.toString();\n        matches.append(\"};\");\n        // Turn on to print a new MATCH array\n        //System.out.println(matches.toString());\n        if (msg.length() > 0) {\n            // Turn on to see which pairs do NOT match.\n            //fail(failCount + \" failures out of \" + FIXTURE.length + \". The\n            // following could be made to match: \" + cr + msg);\n        }\n    }",
        "begin_line": 1178,
        "end_line": 1207,
        "comment": "\n     * Used to generate the MATCHES array and test possible matches from the\n     * FIXTURE arrary.\n     ",
        "child_ranges": [
            "(line 1179,col 9)-(line 1179,col 38)",
            "(line 1180,col 9)-(line 1180,col 51)",
            "(line 1181,col 9)-(line 1181,col 50)",
            "(line 1182,col 9)-(line 1182,col 57)",
            "(line 1183,col 9)-(line 1183,col 75)",
            "(line 1184,col 9)-(line 1184,col 26)",
            "(line 1185,col 9)-(line 1197,col 9)",
            "(line 1198,col 9)-(line 1198,col 41)",
            "(line 1199,col 9)-(line 1199,col 29)",
            "(line 1202,col 9)-(line 1206,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES()",
        "snippet": "    public void testIsDoubleMetaphoneEqualWithMATCHES() {\n        this.validateFixture(MATCHES);\n        for (int i = 0; i < MATCHES.length; i++) {\n            String name0 = MATCHES[i][0];\n            String name1 = MATCHES[i][1];\n            boolean match1 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, false);\n            boolean match2 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, true);\n            if (match1 == false && match2 == false) {\n                fail(\"Expected match [\" + i + \"] \" + name0 + \" and \" + name1);\n            }\n        }\n    }",
        "begin_line": 1209,
        "end_line": 1220,
        "comment": "",
        "child_ranges": [
            "(line 1210,col 9)-(line 1210,col 38)",
            "(line 1211,col 9)-(line 1219,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual()",
        "snippet": "    public void testIsDoubleMetaphoneNotEqual() {\n        doubleMetaphoneNotEqualTest(false);\n        doubleMetaphoneNotEqualTest(true);\n    }",
        "begin_line": 1222,
        "end_line": 1225,
        "comment": "",
        "child_ranges": [
            "(line 1223,col 9)-(line 1223,col 43)",
            "(line 1224,col 9)-(line 1224,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla()",
        "snippet": "    public void testCCedilla() {\n        this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00c3\u00a7\", \"S\");\n    }",
        "begin_line": 1227,
        "end_line": 1229,
        "comment": "",
        "child_ranges": [
            "(line 1228,col 9)-(line 1228,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde()",
        "snippet": "    public void testNTilde() {\n        this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00c3\u00b1\", \"N\");\n    }",
        "begin_line": 1231,
        "end_line": 1233,
        "comment": "",
        "child_ranges": [
            "(line 1232,col 9)-(line 1232,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.validateFixture(java.lang.String[][])",
        "snippet": "    public void validateFixture(String[][] pairs) {\n        if (pairs.length == 0) {\n            fail(\"Test fixture is empty\");\n        }\n        for (int i = 0; i < pairs.length; i++) {\n            if (pairs[i].length != 2) {\n                fail(\"Error in test fixture in the data array at index \" + i);\n            }\n        }\n    }",
        "begin_line": 1235,
        "end_line": 1244,
        "comment": "",
        "child_ranges": [
            "(line 1236,col 9)-(line 1238,col 9)",
            "(line 1239,col 9)-(line 1243,col 9)"
        ]
    }
]