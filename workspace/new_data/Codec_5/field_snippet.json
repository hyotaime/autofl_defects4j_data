[
    {
        "class_name": "org.apache.commons.codec.EncoderException",
        "src_path": "src/java/org/apache/commons/codec/EncoderException.java",
        "signature": "org.apache.commons.codec.EncoderException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\n     * Declares the Serial Version Uid.\n     * \n     * @see <a href=\"http://c2.com/cgi/wiki?AlwaysDeclareSerialVersionUid\">Always Declare Serial Version Uid</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderComparator",
        "src_path": "src/java/org/apache/commons/codec/StringEncoderComparator.java",
        "signature": "org.apache.commons.codec.StringEncoderComparator.stringEncoder",
        "snippet": "    private final StringEncoder stringEncoder;",
        "begin_line": 39,
        "end_line": 39,
        "comment": "\n     * Internal encoder instance.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.DecoderException",
        "src_path": "src/java/org/apache/commons/codec/DecoderException.java",
        "signature": "org.apache.commons.codec.DecoderException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": "\n     * Declares the Serial Version Uid.\n     * \n     * @see <a href=\"http://c2.com/cgi/wiki?AlwaysDeclareSerialVersionUid\">Always Declare Serial Version Uid</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.CharEncoding",
        "src_path": "src/java/org/apache/commons/codec/CharEncoding.java",
        "signature": "org.apache.commons.codec.CharEncoding.ISO_8859_1",
        "snippet": "    public static final String ISO_8859_1 = \"ISO-8859-1\";",
        "begin_line": 64,
        "end_line": 64,
        "comment": "\n     * CharEncodingISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1. </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     * \n     * @see <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.CharEncoding",
        "src_path": "src/java/org/apache/commons/codec/CharEncoding.java",
        "signature": "org.apache.commons.codec.CharEncoding.US_ASCII",
        "snippet": "    public static final String US_ASCII = \"US-ASCII\";",
        "begin_line": 76,
        "end_line": 76,
        "comment": "\n     * <p>\n     * Seven-bit ASCII, also known as ISO646-US, also known as the Basic Latin block of the Unicode character set.\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     * \n     * @see <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.CharEncoding",
        "src_path": "src/java/org/apache/commons/codec/CharEncoding.java",
        "signature": "org.apache.commons.codec.CharEncoding.UTF_16",
        "snippet": "    public static final String UTF_16 = \"UTF-16\";",
        "begin_line": 89,
        "end_line": 89,
        "comment": "\n     * <p>\n     * Sixteen-bit Unicode Transformation Format, The byte order specified by a mandatory initial byte-order mark\n     * (either order accepted on input, big-endian used on output)\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     * \n     * @see <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.CharEncoding",
        "src_path": "src/java/org/apache/commons/codec/CharEncoding.java",
        "signature": "org.apache.commons.codec.CharEncoding.UTF_16BE",
        "snippet": "    public static final String UTF_16BE = \"UTF-16BE\";",
        "begin_line": 101,
        "end_line": 101,
        "comment": "\n     * <p>\n     * Sixteen-bit Unicode Transformation Format, big-endian byte order.\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     * \n     * @see <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.CharEncoding",
        "src_path": "src/java/org/apache/commons/codec/CharEncoding.java",
        "signature": "org.apache.commons.codec.CharEncoding.UTF_16LE",
        "snippet": "    public static final String UTF_16LE = \"UTF-16LE\";",
        "begin_line": 113,
        "end_line": 113,
        "comment": "\n     * <p>\n     * Sixteen-bit Unicode Transformation Format, little-endian byte order.\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     * \n     * @see <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.CharEncoding",
        "src_path": "src/java/org/apache/commons/codec/CharEncoding.java",
        "signature": "org.apache.commons.codec.CharEncoding.UTF_8",
        "snippet": "    public static final String UTF_8 = \"UTF-8\";",
        "begin_line": 125,
        "end_line": 125,
        "comment": "\n     * <p>\n     * Eight-bit Unicode Transformation Format.\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     * \n     * @see <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtils",
        "src_path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
        "signature": "org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH",
        "snippet": "    private static final int STREAM_BUFFER_LENGTH = 1024;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStream",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStream.doEncode",
        "snippet": "    private final boolean doEncode;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStream",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStream.base64",
        "snippet": "    private final Base64 base64;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStream",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStream.singleByte",
        "snippet": "    private final byte[] singleByte = new byte[1];",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.DEFAULT_BUFFER_RESIZE_FACTOR",
        "snippet": "    private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.DEFAULT_BUFFER_SIZE",
        "snippet": "    private static final int DEFAULT_BUFFER_SIZE = 8192;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.MIME_CHUNK_SIZE",
        "snippet": "    public static final int MIME_CHUNK_SIZE = 76;",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\n     *  MIME chunk size per RFC 2045 section 6.8.\n     * \n     * <p>\n     * The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any\n     * equal signs.\n     * </p>\n     * \n     * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045 section 6.8</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.PEM_CHUNK_SIZE",
        "snippet": "    public static final int PEM_CHUNK_SIZE = 64;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\n     * PEM chunk size per RFC 1421 section 4.3.2.4.\n     * \n     * <p>\n     * The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any\n     * equal signs.\n     * </p>\n     * \n     * @see <a href=\"http://tools.ietf.org/html/rfc1421\">RFC 1421 section 4.3.2.4</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.CHUNK_SEPARATOR",
        "snippet": "    static final byte[] CHUNK_SEPARATOR = {'\\r', '\\n'};",
        "begin_line": 91,
        "end_line": 91,
        "comment": "\n     * Chunk separator per RFC 2045 section 2.1.\n     *\n     * <p>\n     * N.B. The next major release may break compatibility and make this field private.\n     * </p>\n     * \n     * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045 section 2.1</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE",
        "snippet": "    private static final byte[] STANDARD_ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n    };",
        "begin_line": 100,
        "end_line": 106,
        "comment": "\n     * This array is a lookup table that translates 6-bit positive integer index values into their \"Base64 Alphabet\"\n     * equivalents as specified in Table 1 of RFC 2045.\n     * \n     * Thanks to \"commons\" project in ws.apache.org for this code.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.URL_SAFE_ENCODE_TABLE",
        "snippet": "    private static final byte[] URL_SAFE_ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'\n    };",
        "begin_line": 113,
        "end_line": 119,
        "comment": "\n     * This is a copy of the STANDARD_ENCODE_TABLE above, but with + and /\n     * changed to - and _ to make the encoded Base64 results more URL-SAFE.\n     * This table is only used when the Base64's mode is set to URL-SAFE.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.PAD",
        "snippet": "    private static final byte PAD = '=';",
        "begin_line": 124,
        "end_line": 124,
        "comment": "\n     * Byte used to pad output.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.DECODE_TABLE",
        "snippet": "    private static final byte[] DECODE_TABLE = {\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54,\n            55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4,\n            5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n            24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n    };",
        "begin_line": 137,
        "end_line": 145,
        "comment": "\n     * This array is a lookup table that translates Unicode characters drawn from the \"Base64 Alphabet\" (as specified in\n     * Table 1 of RFC 2045) into their 6-bit positive integer equivalents. Characters that are not in the Base64\n     * alphabet but fall within the bounds of the array are translated to -1.\n     * \n     * Note: '+' and '-' both decode to 62. '/' and '_' both decode to 63. This means decoder seamlessly handles both\n     * URL_SAFE and STANDARD base64. (The encoder, on the other hand, needs to know ahead of time what to emit).\n     * \n     * Thanks to \"commons\" project in ws.apache.org for this code.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.MASK_6BITS",
        "snippet": "    private static final int MASK_6BITS = 0x3f;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " Mask used to extract 6 bits, used when encoding "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.MASK_8BITS",
        "snippet": "    private static final int MASK_8BITS = 0xff;",
        "begin_line": 151,
        "end_line": 151,
        "comment": " Mask used to extract 8 bits, used in decoding base64 bytes "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.encodeTable",
        "snippet": "    private final byte[] encodeTable;",
        "begin_line": 162,
        "end_line": 162,
        "comment": "\n     * Encode table to use: either STANDARD or URL_SAFE. Note: the DECODE_TABLE above remains static because it is able\n     * to decode both STANDARD and URL_SAFE streams, but the encodeTable must be a member variable so we can switch\n     * between the two modes.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.lineLength",
        "snippet": "    private final int lineLength;",
        "begin_line": 168,
        "end_line": 168,
        "comment": "\n     * Line length for encoding. Not used when decoding. A value of zero or less implies no chunking of the base64\n     * encoded data.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.lineSeparator",
        "snippet": "    private final byte[] lineSeparator;",
        "begin_line": 173,
        "end_line": 173,
        "comment": "\n     * Line separator for encoding. Not used when decoding. Only used if lineLength > 0.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.decodeSize",
        "snippet": "    private final int decodeSize;",
        "begin_line": 179,
        "end_line": 179,
        "comment": "\n     * Convenience variable to help us determine when our buffer is going to run out of room and needs resizing.\n     * <code>decodeSize = 3 + lineSeparator.length;</code>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.encodeSize",
        "snippet": "    private final int encodeSize;",
        "begin_line": 185,
        "end_line": 185,
        "comment": "\n     * Convenience variable to help us determine when our buffer is going to run out of room and needs resizing.\n     * <code>encodeSize = 4 + lineSeparator.length;</code>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.buffer",
        "snippet": "    private byte[] buffer;",
        "begin_line": 190,
        "end_line": 190,
        "comment": "\n     * Buffer for streaming.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.pos",
        "snippet": "    private int pos;",
        "begin_line": 195,
        "end_line": 195,
        "comment": "\n     * Position where next character should be written in the buffer.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.readPos",
        "snippet": "    private int readPos;",
        "begin_line": 200,
        "end_line": 200,
        "comment": "\n     * Position where next character should be read from the buffer.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.currentLinePos",
        "snippet": "    private int currentLinePos;",
        "begin_line": 206,
        "end_line": 206,
        "comment": "\n     * Variable tracks how many characters have been written to the current line. Only used when encoding. We use it to\n     * make sure each encoded line never goes beyond lineLength (if lineLength > 0).\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.modulus",
        "snippet": "    private int modulus;",
        "begin_line": 212,
        "end_line": 212,
        "comment": "\n     * Writes to the buffer only occur after every 3 reads when encoding, an every 4 reads when decoding. This variable\n     * helps track that.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.eof",
        "snippet": "    private boolean eof;",
        "begin_line": 218,
        "end_line": 218,
        "comment": "\n     * Boolean flag to indicate the EOF has been reached. Once EOF has been reached, this Base64 object becomes useless,\n     * and must be thrown away.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.x",
        "snippet": "    private int x;",
        "begin_line": 224,
        "end_line": 224,
        "comment": "\n     * Place holder for the 3 bytes we're dealing with for our base64 logic. Bitwise operations store and extract the\n     * base64 encoding or decoding from this variable.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStream",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64OutputStream.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStream.doEncode",
        "snippet": "    private final boolean doEncode;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStream",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64OutputStream.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStream.base64",
        "snippet": "    private final Base64 base64;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStream",
        "src_path": "src/java/org/apache/commons/codec/binary/Base64OutputStream.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStream.singleByte",
        "snippet": "    private final byte[] singleByte = new byte[1];",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.Hex",
        "src_path": "src/java/org/apache/commons/codec/binary/Hex.java",
        "signature": "org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET_NAME",
        "snippet": "    public static final String DEFAULT_CHARSET_NAME = CharEncoding.UTF_8;",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n     * Default charset name is {@link CharEncoding#UTF_8}\n     * \n     * @since 1.4\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Hex",
        "src_path": "src/java/org/apache/commons/codec/binary/Hex.java",
        "signature": "org.apache.commons.codec.binary.Hex.DIGITS_LOWER",
        "snippet": "    private static final char[] DIGITS_LOWER = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};",
        "begin_line": 48,
        "end_line": 48,
        "comment": "\n     * Used to build output as Hex\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Hex",
        "src_path": "src/java/org/apache/commons/codec/binary/Hex.java",
        "signature": "org.apache.commons.codec.binary.Hex.DIGITS_UPPER",
        "snippet": "    private static final char[] DIGITS_UPPER = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n     * Used to build output as Hex\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Hex",
        "src_path": "src/java/org/apache/commons/codec/binary/Hex.java",
        "signature": "org.apache.commons.codec.binary.Hex.charsetName",
        "snippet": "    private final String charsetName;",
        "begin_line": 172,
        "end_line": 172,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY",
        "snippet": "    private static final char[] EMPTY_CHAR_ARRAY = new char[0];",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Empty char array. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY",
        "snippet": "    private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Empty byte array. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_0",
        "snippet": "    private static final int BIT_0 = 1;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Mask for bit 0 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_1",
        "snippet": "    private static final int BIT_1 = 0x02;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Mask for bit 1 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_2",
        "snippet": "    private static final int BIT_2 = 0x04;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Mask for bit 2 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_3",
        "snippet": "    private static final int BIT_3 = 0x08;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Mask for bit 3 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_4",
        "snippet": "    private static final int BIT_4 = 0x10;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Mask for bit 4 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_5",
        "snippet": "    private static final int BIT_5 = 0x20;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Mask for bit 5 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_6",
        "snippet": "    private static final int BIT_6 = 0x40;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Mask for bit 6 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_7",
        "snippet": "    private static final int BIT_7 = 0x80;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Mask for bit 7 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BITS",
        "snippet": "    private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodec",
        "src_path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodec.charset",
        "snippet": "    private final String charset;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n     * The default charset used for string decoding and encoding.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodec",
        "src_path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS",
        "snippet": "    private static final BitSet PRINTABLE_CHARS = new BitSet(256);",
        "begin_line": 72,
        "end_line": 72,
        "comment": "\n     * BitSet of printable characters as defined in RFC 1521.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodec",
        "src_path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR",
        "snippet": "    private static final byte ESCAPE_CHAR = '=';",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodec",
        "src_path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodec.TAB",
        "snippet": "    private static final byte TAB = 9;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodec",
        "src_path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodec.SPACE",
        "snippet": "    private static final byte SPACE = 32;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodec",
        "src_path": "src/java/org/apache/commons/codec/net/BCodec.java",
        "signature": "org.apache.commons.codec.net.BCodec.charset",
        "snippet": "    private final String charset;",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n     * The default charset used for string decoding and encoding.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522Codec",
        "src_path": "src/java/org/apache/commons/codec/net/RFC1522Codec.java",
        "signature": "org.apache.commons.codec.net.RFC1522Codec.SEP",
        "snippet": "    protected static final char SEP = '?';",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n     * Separator.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522Codec",
        "src_path": "src/java/org/apache/commons/codec/net/RFC1522Codec.java",
        "signature": "org.apache.commons.codec.net.RFC1522Codec.POSTFIX",
        "snippet": "    protected static final String POSTFIX = \"?=\";",
        "begin_line": 57,
        "end_line": 57,
        "comment": "\n     * Prefix\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522Codec",
        "src_path": "src/java/org/apache/commons/codec/net/RFC1522Codec.java",
        "signature": "org.apache.commons.codec.net.RFC1522Codec.PREFIX",
        "snippet": "    protected static final String PREFIX = \"=?\";",
        "begin_line": 62,
        "end_line": 62,
        "comment": "\n     * Postfix\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodec",
        "src_path": "src/java/org/apache/commons/codec/net/URLCodec.java",
        "signature": "org.apache.commons.codec.net.URLCodec.RADIX",
        "snippet": "    static final int RADIX = 16;",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n     * Radix used in encoding and decoding.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodec",
        "src_path": "src/java/org/apache/commons/codec/net/URLCodec.java",
        "signature": "org.apache.commons.codec.net.URLCodec.charset",
        "snippet": "    protected String charset;",
        "begin_line": 64,
        "end_line": 64,
        "comment": "\n     * The default charset used for string decoding and encoding. Consider this field final. The next major release may\n     * break compatibility and make this field be final.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodec",
        "src_path": "src/java/org/apache/commons/codec/net/URLCodec.java",
        "signature": "org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR",
        "snippet": "    protected static byte ESCAPE_CHAR = '%';",
        "begin_line": 69,
        "end_line": 69,
        "comment": "\n     * Consider this field final. The next major release may break compatibility and make this field be final.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodec",
        "src_path": "src/java/org/apache/commons/codec/net/URLCodec.java",
        "signature": "org.apache.commons.codec.net.URLCodec.WWW_FORM_URL",
        "snippet": "    protected static final BitSet WWW_FORM_URL = new BitSet(256);",
        "begin_line": 73,
        "end_line": 73,
        "comment": "\n     * BitSet of www-form-url safe characters.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodec",
        "src_path": "src/java/org/apache/commons/codec/net/QCodec.java",
        "signature": "org.apache.commons.codec.net.QCodec.charset",
        "snippet": "    private final String charset;",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n     * The default charset used for string decoding and encoding.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodec",
        "src_path": "src/java/org/apache/commons/codec/net/QCodec.java",
        "signature": "org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS",
        "snippet": "    private static final BitSet PRINTABLE_CHARS = new BitSet(256);",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n     * BitSet of printable characters as defined in RFC 1522.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodec",
        "src_path": "src/java/org/apache/commons/codec/net/QCodec.java",
        "signature": "org.apache.commons.codec.net.QCodec.BLANK",
        "snippet": "    private static final byte BLANK = 32;",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodec",
        "src_path": "src/java/org/apache/commons/codec/net/QCodec.java",
        "signature": "org.apache.commons.codec.net.QCodec.UNDERSCORE",
        "snippet": "    private static final byte UNDERSCORE = 95;",
        "begin_line": 105,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodec",
        "src_path": "src/java/org/apache/commons/codec/net/QCodec.java",
        "signature": "org.apache.commons.codec.net.QCodec.encodeBlanks",
        "snippet": "    private boolean encodeBlanks = false;",
        "begin_line": 107,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
        "src_path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone.VOWELS",
        "snippet": "    private static final String VOWELS = \"AEIOUY\";",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n     * \"Vowels\" to test for\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
        "src_path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone.SILENT_START",
        "snippet": "    private static final String[] SILENT_START = \n    { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };",
        "begin_line": 47,
        "end_line": 48,
        "comment": "\n     * Prefixes when present which are not pronounced\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
        "src_path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone.L_R_N_M_B_H_F_V_W_SPACE",
        "snippet": "    private static final String[] L_R_N_M_B_H_F_V_W_SPACE = \n    { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" };",
        "begin_line": 49,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
        "src_path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone.ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER",
        "snippet": "    private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER = \n    { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" };",
        "begin_line": 51,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
        "src_path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone.L_T_K_S_N_M_B_Z",
        "snippet": "    private static final String[] L_T_K_S_N_M_B_Z = \n    { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" };",
        "begin_line": 53,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
        "src_path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone.maxCodeLen",
        "snippet": "    protected int maxCodeLen = 4;",
        "begin_line": 59,
        "end_line": 59,
        "comment": "\n     * Maximum length of an encoding, default is 4\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneResult",
        "src_path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneResult.primary",
        "snippet": "        private StringBuffer primary = new StringBuffer(getMaxCodeLen());",
        "begin_line": 1034,
        "end_line": 1034,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneResult",
        "src_path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneResult.alternate",
        "snippet": "        private StringBuffer alternate = new StringBuffer(getMaxCodeLen());",
        "begin_line": 1035,
        "end_line": 1035,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneResult",
        "src_path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneResult.maxLength",
        "snippet": "        private int maxLength;",
        "begin_line": 1036,
        "end_line": 1036,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Metaphone",
        "src_path": "src/java/org/apache/commons/codec/language/Metaphone.java",
        "signature": "org.apache.commons.codec.language.Metaphone.VOWELS",
        "snippet": "    private static final String VOWELS = \"AEIOU\" ;",
        "begin_line": 48,
        "end_line": 48,
        "comment": "\n     * Five values in the English language \n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Metaphone",
        "src_path": "src/java/org/apache/commons/codec/language/Metaphone.java",
        "signature": "org.apache.commons.codec.language.Metaphone.FRONTV",
        "snippet": "    private static final String FRONTV = \"EIY\"   ;",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n     * Variable used in Metaphone algorithm\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Metaphone",
        "src_path": "src/java/org/apache/commons/codec/language/Metaphone.java",
        "signature": "org.apache.commons.codec.language.Metaphone.VARSON",
        "snippet": "    private static final String VARSON = \"CSPTG\" ;",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n     * Variable used in Metaphone algorithm\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Metaphone",
        "src_path": "src/java/org/apache/commons/codec/language/Metaphone.java",
        "signature": "org.apache.commons.codec.language.Metaphone.maxCodeLen",
        "snippet": "    private int maxCodeLen = 4 ;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n     * The max code length for metaphone is 4\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Soundex",
        "src_path": "src/java/org/apache/commons/codec/language/Soundex.java",
        "signature": "org.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING_STRING",
        "snippet": "    public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\";",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     * means do not encode.\n     * <p>\n     * (This constant is provided as both an implementation convenience and to allow Javadoc to pick\n     * up the value for the constant values page.)\n     * </p>\n     * \n     * @see #US_ENGLISH_MAPPING\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Soundex",
        "src_path": "src/java/org/apache/commons/codec/language/Soundex.java",
        "signature": "org.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING",
        "snippet": "    public static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     * means do not encode.\n     * \n     * @see Soundex#Soundex(char[])\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Soundex",
        "src_path": "src/java/org/apache/commons/codec/language/Soundex.java",
        "signature": "org.apache.commons.codec.language.Soundex.US_ENGLISH",
        "snippet": "    public static final Soundex US_ENGLISH = new Soundex();",
        "begin_line": 57,
        "end_line": 57,
        "comment": "\n     * An instance of Soundex using the US_ENGLISH_MAPPING mapping.\n     * \n     * @see #US_ENGLISH_MAPPING\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Soundex",
        "src_path": "src/java/org/apache/commons/codec/language/Soundex.java",
        "signature": "org.apache.commons.codec.language.Soundex.maxLength",
        "snippet": "    private int maxLength = 4;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n     * The maximum length of a Soundex code - Soundex codes are only four characters by definition.\n     * \n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Soundex",
        "src_path": "src/java/org/apache/commons/codec/language/Soundex.java",
        "signature": "org.apache.commons.codec.language.Soundex.soundexMapping",
        "snippet": "    private final char[] soundexMapping;",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\n     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n     * letter is mapped. This implementation contains a default map for US_ENGLISH\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundex",
        "src_path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING_STRING",
        "snippet": "    public static final String US_ENGLISH_MAPPING_STRING = \"01360240043788015936020505\";",
        "begin_line": 36,
        "end_line": 36,
        "comment": "\n     * @since 1.4\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundex",
        "src_path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING",
        "snippet": "    public static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n     * RefinedSoundex is *refined* for a number of reasons one being that the\n     * mappings have been altered. This implementation contains default\n     * mappings for US English.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundex",
        "src_path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundex.soundexMapping",
        "snippet": "    private final char[] soundexMapping;",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n     * Every letter of the alphabet is \"mapped\" to a numerical value. This char\n     * array holds the values to which each letter is mapped. This\n     * implementation contains a default map for US_ENGLISH\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundex",
        "src_path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH",
        "snippet": "    public static final RefinedSoundex US_ENGLISH = new RefinedSoundex();",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\n     * This static variable contains an instance of the RefinedSoundex using\n     * the US_ENGLISH mapping.\n     "
    }
]