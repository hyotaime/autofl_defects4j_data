[
    {
        "class_name": "org.apache.commons.codec.EncoderException",
        "src_path": "src/main/java/org/apache/commons/codec/EncoderException.java",
        "signature": "org.apache.commons.codec.EncoderException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 34,
        "end_line": 34,
        "comment": "\n     * Declares the Serial Version Uid.\n     *\n     * @see <a href=\"http://c2.com/cgi/wiki?AlwaysDeclareSerialVersionUid\">Always Declare Serial Version Uid</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.// TODO ought to implement Comparator<String> but that's not possible whilst maintaining binary compatibility.\nStringEncoderComparator",
        "src_path": "src/main/java/org/apache/commons/codec/StringEncoderComparator.java",
        "signature": "org.apache.commons.codec.// TODO ought to implement Comparator<String> but that's not possible whilst maintaining binary compatibility.\nStringEncoderComparator.stringEncoder",
        "snippet": "    private final StringEncoder stringEncoder;",
        "begin_line": 38,
        "end_line": 38,
        "comment": "\n     * Internal encoder instance.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.DecoderException",
        "src_path": "src/main/java/org/apache/commons/codec/DecoderException.java",
        "signature": "org.apache.commons.codec.DecoderException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": "\n     * Declares the Serial Version Uid.\n     *\n     * @see <a href=\"http://c2.com/cgi/wiki?AlwaysDeclareSerialVersionUid\">Always Declare Serial Version Uid</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.CharEncoding",
        "src_path": "src/main/java/org/apache/commons/codec/CharEncoding.java",
        "signature": "org.apache.commons.codec.CharEncoding.ISO_8859_1",
        "snippet": "    public static final String ISO_8859_1 = \"ISO-8859-1\";",
        "begin_line": 66,
        "end_line": 66,
        "comment": "\n     * CharEncodingISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     *\n     * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.CharEncoding",
        "src_path": "src/main/java/org/apache/commons/codec/CharEncoding.java",
        "signature": "org.apache.commons.codec.CharEncoding.US_ASCII",
        "snippet": "    public static final String US_ASCII = \"US-ASCII\";",
        "begin_line": 75,
        "end_line": 75,
        "comment": "\n     * Seven-bit ASCII, also known as ISO646-US, also known as the Basic Latin block of the Unicode character set.\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     *\n     * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.CharEncoding",
        "src_path": "src/main/java/org/apache/commons/codec/CharEncoding.java",
        "signature": "org.apache.commons.codec.CharEncoding.UTF_16",
        "snippet": "    public static final String UTF_16 = \"UTF-16\";",
        "begin_line": 85,
        "end_line": 85,
        "comment": "\n     * Sixteen-bit Unicode Transformation Format, The byte order specified by a mandatory initial byte-order mark\n     * (either order accepted on input, big-endian used on output)\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     *\n     * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.CharEncoding",
        "src_path": "src/main/java/org/apache/commons/codec/CharEncoding.java",
        "signature": "org.apache.commons.codec.CharEncoding.UTF_16BE",
        "snippet": "    public static final String UTF_16BE = \"UTF-16BE\";",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\n     * Sixteen-bit Unicode Transformation Format, big-endian byte order.\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     *\n     * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.CharEncoding",
        "src_path": "src/main/java/org/apache/commons/codec/CharEncoding.java",
        "signature": "org.apache.commons.codec.CharEncoding.UTF_16LE",
        "snippet": "    public static final String UTF_16LE = \"UTF-16LE\";",
        "begin_line": 103,
        "end_line": 103,
        "comment": "\n     * Sixteen-bit Unicode Transformation Format, little-endian byte order.\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     *\n     * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.CharEncoding",
        "src_path": "src/main/java/org/apache/commons/codec/CharEncoding.java",
        "signature": "org.apache.commons.codec.CharEncoding.UTF_8",
        "snippet": "    public static final String UTF_8 = \"UTF-8\";",
        "begin_line": 112,
        "end_line": 112,
        "comment": "\n     * Eight-bit Unicode Transformation Format.\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     *\n     * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.Charsets",
        "src_path": "src/main/java/org/apache/commons/codec/Charsets.java",
        "signature": "org.apache.commons.codec.Charsets.ISO_8859_1",
        "snippet": "    @Deprecated\n    public static final Charset ISO_8859_1 = Charset.forName(CharEncoding.ISO_8859_1);",
        "begin_line": 98,
        "end_line": 99,
        "comment": "\n     * CharEncodingISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     *\n     * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     * @deprecated Use Java 7's {@link java.nio.charset.StandardCharsets}\n     "
    },
    {
        "class_name": "org.apache.commons.codec.Charsets",
        "src_path": "src/main/java/org/apache/commons/codec/Charsets.java",
        "signature": "org.apache.commons.codec.Charsets.US_ASCII",
        "snippet": "    @Deprecated\n    public static final Charset US_ASCII = Charset.forName(CharEncoding.US_ASCII);",
        "begin_line": 109,
        "end_line": 110,
        "comment": "\n     * Seven-bit ASCII, also known as ISO646-US, also known as the Basic Latin block of the Unicode character set.\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     *\n     * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     * @deprecated Use Java 7's {@link java.nio.charset.StandardCharsets}\n     "
    },
    {
        "class_name": "org.apache.commons.codec.Charsets",
        "src_path": "src/main/java/org/apache/commons/codec/Charsets.java",
        "signature": "org.apache.commons.codec.Charsets.UTF_16",
        "snippet": "    @Deprecated\n    public static final Charset UTF_16 = Charset.forName(CharEncoding.UTF_16);",
        "begin_line": 121,
        "end_line": 122,
        "comment": "\n     * Sixteen-bit Unicode Transformation Format, The byte order specified by a mandatory initial byte-order mark\n     * (either order accepted on input, big-endian used on output)\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     *\n     * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     * @deprecated Use Java 7's {@link java.nio.charset.StandardCharsets}\n     "
    },
    {
        "class_name": "org.apache.commons.codec.Charsets",
        "src_path": "src/main/java/org/apache/commons/codec/Charsets.java",
        "signature": "org.apache.commons.codec.Charsets.UTF_16BE",
        "snippet": "    @Deprecated\n    public static final Charset UTF_16BE = Charset.forName(CharEncoding.UTF_16BE);",
        "begin_line": 132,
        "end_line": 133,
        "comment": "\n     * Sixteen-bit Unicode Transformation Format, big-endian byte order.\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     *\n     * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     * @deprecated Use Java 7's {@link java.nio.charset.StandardCharsets}\n     "
    },
    {
        "class_name": "org.apache.commons.codec.Charsets",
        "src_path": "src/main/java/org/apache/commons/codec/Charsets.java",
        "signature": "org.apache.commons.codec.Charsets.UTF_16LE",
        "snippet": "    @Deprecated\n    public static final Charset UTF_16LE = Charset.forName(CharEncoding.UTF_16LE);",
        "begin_line": 143,
        "end_line": 144,
        "comment": "\n     * Sixteen-bit Unicode Transformation Format, little-endian byte order.\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     *\n     * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     * @deprecated Use Java 7's {@link java.nio.charset.StandardCharsets}\n     "
    },
    {
        "class_name": "org.apache.commons.codec.Charsets",
        "src_path": "src/main/java/org/apache/commons/codec/Charsets.java",
        "signature": "org.apache.commons.codec.Charsets.UTF_8",
        "snippet": "    @Deprecated\n    public static final Charset UTF_8 = Charset.forName(CharEncoding.UTF_8);",
        "begin_line": 154,
        "end_line": 155,
        "comment": "\n     * Eight-bit Unicode Transformation Format.\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     *\n     * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     * @deprecated Use Java 7's {@link java.nio.charset.StandardCharsets}\n     "
    },
    {
        "class_name": "org.apache.commons.codec.digest.Md5Crypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/Md5Crypt.java",
        "signature": "org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX",
        "snippet": "    static final String APR1_PREFIX = \"$apr1$\";",
        "begin_line": 51,
        "end_line": 51,
        "comment": " The Identifier of the Apache variant. "
    },
    {
        "class_name": "org.apache.commons.codec.digest.Md5Crypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/Md5Crypt.java",
        "signature": "org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE",
        "snippet": "    private static final int BLOCKSIZE = 16;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The number of bytes of the final hash. "
    },
    {
        "class_name": "org.apache.commons.codec.digest.Md5Crypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/Md5Crypt.java",
        "signature": "org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX",
        "snippet": "    static final String MD5_PREFIX = \"$1$\";",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The Identifier of this crypt() variant. "
    },
    {
        "class_name": "org.apache.commons.codec.digest.Md5Crypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/Md5Crypt.java",
        "signature": "org.apache.commons.codec.digest.Md5Crypt.ROUNDS",
        "snippet": "    private static final int ROUNDS = 1000;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The number of rounds of the big loop. "
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCrypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
        "signature": "org.apache.commons.codec.digest.UnixCrypt.CON_SALT",
        "snippet": "    private static final int CON_SALT[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 5, 6,\n            7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n            34, 35, 36, 37, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 0, 0, 0, 0 };",
        "begin_line": 42,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCrypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
        "signature": "org.apache.commons.codec.digest.UnixCrypt.COV2CHAR",
        "snippet": "    private static final int COV2CHAR[] = { 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70,\n            71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102,\n            103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122 };",
        "begin_line": 48,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCrypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
        "signature": "org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS",
        "snippet": "    private static final char SALT_CHARS[] = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./\"\n            .toCharArray();",
        "begin_line": 52,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCrypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
        "signature": "org.apache.commons.codec.digest.UnixCrypt.SHIFT2",
        "snippet": "    private static final boolean SHIFT2[] = { false, false, true, true, true, true, true, true, false, true, true,\n            true, true, true, true, false };",
        "begin_line": 55,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCrypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
        "signature": "org.apache.commons.codec.digest.UnixCrypt.SKB",
        "snippet": "    private static final int SKB[][] = {\n            { 0, 16, 0x20000000, 0x20000010, 0x10000, 0x10010, 0x20010000, 0x20010010, 2048, 2064, 0x20000800,\n                    0x20000810, 0x10800, 0x10810, 0x20010800, 0x20010810, 32, 48, 0x20000020, 0x20000030, 0x10020,\n                    0x10030, 0x20010020, 0x20010030, 2080, 2096, 0x20000820, 0x20000830, 0x10820, 0x10830, 0x20010820,\n                    0x20010830, 0x80000, 0x80010, 0x20080000, 0x20080010, 0x90000, 0x90010, 0x20090000, 0x20090010,\n                    0x80800, 0x80810, 0x20080800, 0x20080810, 0x90800, 0x90810, 0x20090800, 0x20090810, 0x80020,\n                    0x80030, 0x20080020, 0x20080030, 0x90020, 0x90030, 0x20090020, 0x20090030, 0x80820, 0x80830,\n                    0x20080820, 0x20080830, 0x90820, 0x90830, 0x20090820, 0x20090830 },\n            { 0, 0x2000000, 8192, 0x2002000, 0x200000, 0x2200000, 0x202000, 0x2202000, 4, 0x2000004, 8196, 0x2002004,\n                    0x200004, 0x2200004, 0x202004, 0x2202004, 1024, 0x2000400, 9216, 0x2002400, 0x200400, 0x2200400,\n                    0x202400, 0x2202400, 1028, 0x2000404, 9220, 0x2002404, 0x200404, 0x2200404, 0x202404, 0x2202404,\n                    0x10000000, 0x12000000, 0x10002000, 0x12002000, 0x10200000, 0x12200000, 0x10202000, 0x12202000,\n                    0x10000004, 0x12000004, 0x10002004, 0x12002004, 0x10200004, 0x12200004, 0x10202004, 0x12202004,\n                    0x10000400, 0x12000400, 0x10002400, 0x12002400, 0x10200400, 0x12200400, 0x10202400, 0x12202400,\n                    0x10000404, 0x12000404, 0x10002404, 0x12002404, 0x10200404, 0x12200404, 0x10202404, 0x12202404 },\n            { 0, 1, 0x40000, 0x40001, 0x1000000, 0x1000001, 0x1040000, 0x1040001, 2, 3, 0x40002, 0x40003, 0x1000002,\n                    0x1000003, 0x1040002, 0x1040003, 512, 513, 0x40200, 0x40201, 0x1000200, 0x1000201, 0x1040200,\n                    0x1040201, 514, 515, 0x40202, 0x40203, 0x1000202, 0x1000203, 0x1040202, 0x1040203, 0x8000000,\n                    0x8000001, 0x8040000, 0x8040001, 0x9000000, 0x9000001, 0x9040000, 0x9040001, 0x8000002, 0x8000003,\n                    0x8040002, 0x8040003, 0x9000002, 0x9000003, 0x9040002, 0x9040003, 0x8000200, 0x8000201, 0x8040200,\n                    0x8040201, 0x9000200, 0x9000201, 0x9040200, 0x9040201, 0x8000202, 0x8000203, 0x8040202, 0x8040203,\n                    0x9000202, 0x9000203, 0x9040202, 0x9040203 },\n            { 0, 0x100000, 256, 0x100100, 8, 0x100008, 264, 0x100108, 4096, 0x101000, 4352, 0x101100, 4104, 0x101008,\n                    4360, 0x101108, 0x4000000, 0x4100000, 0x4000100, 0x4100100, 0x4000008, 0x4100008, 0x4000108,\n                    0x4100108, 0x4001000, 0x4101000, 0x4001100, 0x4101100, 0x4001008, 0x4101008, 0x4001108, 0x4101108,\n                    0x20000, 0x120000, 0x20100, 0x120100, 0x20008, 0x120008, 0x20108, 0x120108, 0x21000, 0x121000,\n                    0x21100, 0x121100, 0x21008, 0x121008, 0x21108, 0x121108, 0x4020000, 0x4120000, 0x4020100,\n                    0x4120100, 0x4020008, 0x4120008, 0x4020108, 0x4120108, 0x4021000, 0x4121000, 0x4021100, 0x4121100,\n                    0x4021008, 0x4121008, 0x4021108, 0x4121108 },\n            { 0, 0x10000000, 0x10000, 0x10010000, 4, 0x10000004, 0x10004, 0x10010004, 0x20000000, 0x30000000,\n                    0x20010000, 0x30010000, 0x20000004, 0x30000004, 0x20010004, 0x30010004, 0x100000, 0x10100000,\n                    0x110000, 0x10110000, 0x100004, 0x10100004, 0x110004, 0x10110004, 0x20100000, 0x30100000,\n                    0x20110000, 0x30110000, 0x20100004, 0x30100004, 0x20110004, 0x30110004, 4096, 0x10001000, 0x11000,\n                    0x10011000, 4100, 0x10001004, 0x11004, 0x10011004, 0x20001000, 0x30001000, 0x20011000, 0x30011000,\n                    0x20001004, 0x30001004, 0x20011004, 0x30011004, 0x101000, 0x10101000, 0x111000, 0x10111000,\n                    0x101004, 0x10101004, 0x111004, 0x10111004, 0x20101000, 0x30101000, 0x20111000, 0x30111000,\n                    0x20101004, 0x30101004, 0x20111004, 0x30111004 },\n            { 0, 0x8000000, 8, 0x8000008, 1024, 0x8000400, 1032, 0x8000408, 0x20000, 0x8020000, 0x20008, 0x8020008,\n                    0x20400, 0x8020400, 0x20408, 0x8020408, 1, 0x8000001, 9, 0x8000009, 1025, 0x8000401, 1033,\n                    0x8000409, 0x20001, 0x8020001, 0x20009, 0x8020009, 0x20401, 0x8020401, 0x20409, 0x8020409,\n                    0x2000000, 0xa000000, 0x2000008, 0xa000008, 0x2000400, 0xa000400, 0x2000408, 0xa000408, 0x2020000,\n                    0xa020000, 0x2020008, 0xa020008, 0x2020400, 0xa020400, 0x2020408, 0xa020408, 0x2000001, 0xa000001,\n                    0x2000009, 0xa000009, 0x2000401, 0xa000401, 0x2000409, 0xa000409, 0x2020001, 0xa020001, 0x2020009,\n                    0xa020009, 0x2020401, 0xa020401, 0x2020409, 0xa020409 },\n            { 0, 256, 0x80000, 0x80100, 0x1000000, 0x1000100, 0x1080000, 0x1080100, 16, 272, 0x80010, 0x80110,\n                    0x1000010, 0x1000110, 0x1080010, 0x1080110, 0x200000, 0x200100, 0x280000, 0x280100, 0x1200000,\n                    0x1200100, 0x1280000, 0x1280100, 0x200010, 0x200110, 0x280010, 0x280110, 0x1200010, 0x1200110,\n                    0x1280010, 0x1280110, 512, 768, 0x80200, 0x80300, 0x1000200, 0x1000300, 0x1080200, 0x1080300, 528,\n                    784, 0x80210, 0x80310, 0x1000210, 0x1000310, 0x1080210, 0x1080310, 0x200200, 0x200300, 0x280200,\n                    0x280300, 0x1200200, 0x1200300, 0x1280200, 0x1280300, 0x200210, 0x200310, 0x280210, 0x280310,\n                    0x1200210, 0x1200310, 0x1280210, 0x1280310 },\n            { 0, 0x4000000, 0x40000, 0x4040000, 2, 0x4000002, 0x40002, 0x4040002, 8192, 0x4002000, 0x42000, 0x4042000,\n                    8194, 0x4002002, 0x42002, 0x4042002, 32, 0x4000020, 0x40020, 0x4040020, 34, 0x4000022, 0x40022,\n                    0x4040022, 8224, 0x4002020, 0x42020, 0x4042020, 8226, 0x4002022, 0x42022, 0x4042022, 2048,\n                    0x4000800, 0x40800, 0x4040800, 2050, 0x4000802, 0x40802, 0x4040802, 10240, 0x4002800, 0x42800,\n                    0x4042800, 10242, 0x4002802, 0x42802, 0x4042802, 2080, 0x4000820, 0x40820, 0x4040820, 2082,\n                    0x4000822, 0x40822, 0x4040822, 10272, 0x4002820, 0x42820, 0x4042820, 10274, 0x4002822, 0x42822,\n                    0x4042822 } };",
        "begin_line": 58,
        "end_line": 115,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCrypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
        "signature": "org.apache.commons.codec.digest.UnixCrypt.SPTRANS",
        "snippet": "    private static final int SPTRANS[][] = {\n            { 0x820200, 0x20000, 0x80800000, 0x80820200, 0x800000, 0x80020200, 0x80020000, 0x80800000, 0x80020200,\n                    0x820200, 0x820000, 0x80000200, 0x80800200, 0x800000, 0, 0x80020000, 0x20000, 0x80000000,\n                    0x800200, 0x20200, 0x80820200, 0x820000, 0x80000200, 0x800200, 0x80000000, 512, 0x20200,\n                    0x80820000, 512, 0x80800200, 0x80820000, 0, 0, 0x80820200, 0x800200, 0x80020000, 0x820200,\n                    0x20000, 0x80000200, 0x800200, 0x80820000, 512, 0x20200, 0x80800000, 0x80020200, 0x80000000,\n                    0x80800000, 0x820000, 0x80820200, 0x20200, 0x820000, 0x80800200, 0x800000, 0x80000200, 0x80020000,\n                    0, 0x20000, 0x800000, 0x80800200, 0x820200, 0x80000000, 0x80820000, 512, 0x80020200 },\n            { 0x10042004, 0, 0x42000, 0x10040000, 0x10000004, 8196, 0x10002000, 0x42000, 8192, 0x10040004, 4,\n                    0x10002000, 0x40004, 0x10042000, 0x10040000, 4, 0x40000, 0x10002004, 0x10040004, 8192, 0x42004,\n                    0x10000000, 0, 0x40004, 0x10002004, 0x42004, 0x10042000, 0x10000004, 0x10000000, 0x40000, 8196,\n                    0x10042004, 0x40004, 0x10042000, 0x10002000, 0x42004, 0x10042004, 0x40004, 0x10000004, 0,\n                    0x10000000, 8196, 0x40000, 0x10040004, 8192, 0x10000000, 0x42004, 0x10002004, 0x10042000, 8192, 0,\n                    0x10000004, 4, 0x10042004, 0x42000, 0x10040000, 0x10040004, 0x40000, 8196, 0x10002000, 0x10002004,\n                    4, 0x10040000, 0x42000 },\n            { 0x41000000, 0x1010040, 64, 0x41000040, 0x40010000, 0x1000000, 0x41000040, 0x10040, 0x1000040, 0x10000,\n                    0x1010000, 0x40000000, 0x41010040, 0x40000040, 0x40000000, 0x41010000, 0, 0x40010000, 0x1010040,\n                    64, 0x40000040, 0x41010040, 0x10000, 0x41000000, 0x41010000, 0x1000040, 0x40010040, 0x1010000,\n                    0x10040, 0, 0x1000000, 0x40010040, 0x1010040, 64, 0x40000000, 0x10000, 0x40000040, 0x40010000,\n                    0x1010000, 0x41000040, 0, 0x1010040, 0x10040, 0x41010000, 0x40010000, 0x1000000, 0x41010040,\n                    0x40000000, 0x40010040, 0x41000000, 0x1000000, 0x41010040, 0x10000, 0x1000040, 0x41000040,\n                    0x10040, 0x1000040, 0, 0x41010000, 0x40000040, 0x41000000, 0x40010040, 64, 0x1010000 },\n            { 0x100402, 0x4000400, 2, 0x4100402, 0, 0x4100000, 0x4000402, 0x100002, 0x4100400, 0x4000002, 0x4000000,\n                    1026, 0x4000002, 0x100402, 0x100000, 0x4000000, 0x4100002, 0x100400, 1024, 2, 0x100400, 0x4000402,\n                    0x4100000, 1024, 1026, 0, 0x100002, 0x4100400, 0x4000400, 0x4100002, 0x4100402, 0x100000,\n                    0x4100002, 1026, 0x100000, 0x4000002, 0x100400, 0x4000400, 2, 0x4100000, 0x4000402, 0, 1024,\n                    0x100002, 0, 0x4100002, 0x4100400, 1024, 0x4000000, 0x4100402, 0x100402, 0x100000, 0x4100402, 2,\n                    0x4000400, 0x100402, 0x100002, 0x100400, 0x4100000, 0x4000402, 1026, 0x4000000, 0x4000002,\n                    0x4100400 },\n            { 0x2000000, 16384, 256, 0x2004108, 0x2004008, 0x2000100, 16648, 0x2004000, 16384, 8, 0x2000008, 16640,\n                    0x2000108, 0x2004008, 0x2004100, 0, 16640, 0x2000000, 16392, 264, 0x2000100, 16648, 0, 0x2000008,\n                    8, 0x2000108, 0x2004108, 16392, 0x2004000, 256, 264, 0x2004100, 0x2004100, 0x2000108, 16392,\n                    0x2004000, 16384, 8, 0x2000008, 0x2000100, 0x2000000, 16640, 0x2004108, 0, 16648, 0x2000000, 256,\n                    16392, 0x2000108, 256, 0, 0x2004108, 0x2004008, 0x2004100, 264, 16384, 16640, 0x2004008,\n                    0x2000100, 264, 8, 16648, 0x2004000, 0x2000008 },\n            { 0x20000010, 0x80010, 0, 0x20080800, 0x80010, 2048, 0x20000810, 0x80000, 2064, 0x20080810, 0x80800,\n                    0x20000000, 0x20000800, 0x20000010, 0x20080000, 0x80810, 0x80000, 0x20000810, 0x20080010, 0, 2048,\n                    16, 0x20080800, 0x20080010, 0x20080810, 0x20080000, 0x20000000, 2064, 16, 0x80800, 0x80810,\n                    0x20000800, 2064, 0x20000000, 0x20000800, 0x80810, 0x20080800, 0x80010, 0, 0x20000800, 0x20000000,\n                    2048, 0x20080010, 0x80000, 0x80010, 0x20080810, 0x80800, 16, 0x20080810, 0x80800, 0x80000,\n                    0x20000810, 0x20000010, 0x20080000, 0x80810, 0, 2048, 0x20000010, 0x20000810, 0x20080800,\n                    0x20080000, 2064, 16, 0x20080010 },\n            { 4096, 128, 0x400080, 0x400001, 0x401081, 4097, 4224, 0, 0x400000, 0x400081, 129, 0x401000, 1, 0x401080,\n                    0x401000, 129, 0x400081, 4096, 4097, 0x401081, 0, 0x400080, 0x400001, 4224, 0x401001, 4225,\n                    0x401080, 1, 4225, 0x401001, 128, 0x400000, 4225, 0x401000, 0x401001, 129, 4096, 128, 0x400000,\n                    0x401001, 0x400081, 4225, 4224, 0, 128, 0x400001, 1, 0x400080, 0, 0x400081, 0x400080, 4224, 129,\n                    4096, 0x401081, 0x400000, 0x401080, 1, 4097, 0x401081, 0x400001, 0x401080, 0x401000, 4097 },\n            { 0x8200020, 0x8208000, 32800, 0, 0x8008000, 0x200020, 0x8200000, 0x8208020, 32, 0x8000000, 0x208000,\n                    32800, 0x208020, 0x8008020, 0x8000020, 0x8200000, 32768, 0x208020, 0x200020, 0x8008000, 0x8208020,\n                    0x8000020, 0, 0x208000, 0x8000000, 0x200000, 0x8008020, 0x8200020, 0x200000, 32768, 0x8208000, 32,\n                    0x200000, 32768, 0x8000020, 0x8208020, 32800, 0x8000000, 0, 0x208000, 0x8200020, 0x8008020,\n                    0x8008000, 0x200020, 0x8208000, 32, 0x200020, 0x8008000, 0x8208020, 0x200000, 0x8200000,\n                    0x8000020, 0x208000, 32800, 0x8008020, 0x8200000, 32, 0x8208000, 0x208020, 0, 0x8000000,\n                    0x8200020, 32768, 0x208020 } };",
        "begin_line": 117,
        "end_line": 170,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha2Crypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java",
        "signature": "org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_DEFAULT",
        "snippet": "    private static final int ROUNDS_DEFAULT = 5000;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Default number of rounds if not explicitly specified. "
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha2Crypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java",
        "signature": "org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_MAX",
        "snippet": "    private static final int ROUNDS_MAX = 999999999;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Maximum number of rounds. "
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha2Crypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java",
        "signature": "org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_MIN",
        "snippet": "    private static final int ROUNDS_MIN = 1000;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Minimum number of rounds. "
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha2Crypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java",
        "signature": "org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_PREFIX",
        "snippet": "    private static final String ROUNDS_PREFIX = \"rounds=\";",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Prefix for optional rounds specification. "
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha2Crypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java",
        "signature": "org.apache.commons.codec.digest.Sha2Crypt.SHA256_BLOCKSIZE",
        "snippet": "    private static final int SHA256_BLOCKSIZE = 32;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The number of bytes the final hash value will have (SHA-256 variant). "
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha2Crypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java",
        "signature": "org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX",
        "snippet": "    static final String SHA256_PREFIX = \"$5$\";",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The prefixes that can be used to identify this crypt() variant (SHA-256). "
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha2Crypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java",
        "signature": "org.apache.commons.codec.digest.Sha2Crypt.SHA512_BLOCKSIZE",
        "snippet": "    private static final int SHA512_BLOCKSIZE = 64;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The number of bytes the final hash value will have (SHA-512 variant). "
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha2Crypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java",
        "signature": "org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX",
        "snippet": "    static final String SHA512_PREFIX = \"$6$\";",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The prefixes that can be used to identify this crypt() variant (SHA-512). "
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha2Crypt",
        "src_path": "src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java",
        "signature": "org.apache.commons.codec.digest.Sha2Crypt.SALT_PATTERN",
        "snippet": "    private static final Pattern SALT_PATTERN = Pattern\n            .compile(\"^\\\\$([56])\\\\$(rounds=(\\\\d+)\\\\$)?([\\\\.\\\\/a-zA-Z0-9]{1,16}).*\");",
        "begin_line": 68,
        "end_line": 69,
        "comment": " The pattern to match valid salt values. "
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtils",
        "src_path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
        "signature": "org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH",
        "snippet": "    private static final int STREAM_BUFFER_LENGTH = 1024;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.digest.B64",
        "src_path": "src/main/java/org/apache/commons/codec/digest/B64.java",
        "signature": "org.apache.commons.codec.digest.B64.B64T",
        "snippet": "    static final String B64T = \"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
        "begin_line": 38,
        "end_line": 38,
        "comment": "\n     * Table with characters for Base64 transformation.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithms",
        "src_path": "src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithms.MD2",
        "snippet": "    public static final String MD2 = \"MD2\";",
        "begin_line": 44,
        "end_line": 44,
        "comment": "\n     * The MD2 message digest algorithm defined in RFC 1319.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithms",
        "src_path": "src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithms.MD5",
        "snippet": "    public static final String MD5 = \"MD5\";",
        "begin_line": 49,
        "end_line": 49,
        "comment": "\n     * The MD5 message digest algorithm defined in RFC 1321.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithms",
        "src_path": "src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_1",
        "snippet": "    public static final String SHA_1 = \"SHA-1\";",
        "begin_line": 54,
        "end_line": 54,
        "comment": "\n     * The SHA-1 hash algorithm defined in the FIPS PUB 180-2.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithms",
        "src_path": "src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_256",
        "snippet": "    public static final String SHA_256 = \"SHA-256\";",
        "begin_line": 59,
        "end_line": 59,
        "comment": "\n     * The SHA-256 hash algorithm defined in the FIPS PUB 180-2.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithms",
        "src_path": "src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_384",
        "snippet": "    public static final String SHA_384 = \"SHA-384\";",
        "begin_line": 64,
        "end_line": 64,
        "comment": "\n     * The SHA-384 hash algorithm defined in the FIPS PUB 180-2.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithms",
        "src_path": "src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_512",
        "snippet": "    public static final String SHA_512 = \"SHA-512\";",
        "begin_line": 69,
        "end_line": 69,
        "comment": "\n     * The SHA-512 hash algorithm defined in the FIPS PUB 180-2.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecInputStream",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecInputStream.baseNCodec",
        "snippet": "    private final BaseNCodec baseNCodec;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecInputStream",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecInputStream.doEncode",
        "snippet": "    private final boolean doEncode;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecInputStream",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecInputStream.singleByte",
        "snippet": "    private final byte[] singleByte = new byte[1];",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecInputStream",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecInputStream.context",
        "snippet": "    private final Context context = new Context();",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.Context",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.Context.ibitWorkArea",
        "snippet": "        int ibitWorkArea;",
        "begin_line": 51,
        "end_line": 51,
        "comment": "\n         * Place holder for the bytes we're dealing with for our based logic.\n         * Bitwise operations store and extract the encoding or decoding from this variable.\n         "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Context",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.Context.lbitWorkArea",
        "snippet": "        long lbitWorkArea;",
        "begin_line": 57,
        "end_line": 57,
        "comment": "\n         * Place holder for the bytes we're dealing with for our based logic.\n         * Bitwise operations store and extract the encoding or decoding from this variable.\n         "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Context",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.Context.buffer",
        "snippet": "        byte[] buffer;",
        "begin_line": 62,
        "end_line": 62,
        "comment": "\n         * Buffer for streaming.\n         "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Context",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.Context.pos",
        "snippet": "        int pos;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n         * Position where next character should be written in the buffer.\n         "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Context",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.Context.readPos",
        "snippet": "        int readPos;",
        "begin_line": 72,
        "end_line": 72,
        "comment": "\n         * Position where next character should be read from the buffer.\n         "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Context",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.Context.eof",
        "snippet": "        boolean eof;",
        "begin_line": 78,
        "end_line": 78,
        "comment": "\n         * Boolean flag to indicate the EOF has been reached. Once EOF has been reached, this object becomes useless,\n         * and must be thrown away.\n         "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Context",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.Context.currentLinePos",
        "snippet": "        int currentLinePos;",
        "begin_line": 84,
        "end_line": 84,
        "comment": "\n         * Variable tracks how many characters have been written to the current line. Only used when encoding. We use\n         * it to make sure each encoded line never goes beyond lineLength (if lineLength &gt; 0).\n         "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Context",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.Context.modulus",
        "snippet": "        int modulus;",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\n         * Writes to the buffer only occur after every 3/5 reads when encoding, and every 4/8 reads when decoding. This\n         * variable helps track that.\n         "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodec.EOF",
        "snippet": "    static final int EOF = -1;",
        "begin_line": 114,
        "end_line": 114,
        "comment": "\n     * EOF\n     *\n     * @since 1.7\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodec.MIME_CHUNK_SIZE",
        "snippet": "    public static final int MIME_CHUNK_SIZE = 76;",
        "begin_line": 126,
        "end_line": 126,
        "comment": "\n     *  MIME chunk size per RFC 2045 section 6.8.\n     *\n     * <p>\n     * The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any\n     * equal signs.\n     * </p>\n     *\n     * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045 section 6.8</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodec.PEM_CHUNK_SIZE",
        "snippet": "    public static final int PEM_CHUNK_SIZE = 64;",
        "begin_line": 138,
        "end_line": 138,
        "comment": "\n     * PEM chunk size per RFC 1421 section 4.3.2.4.\n     *\n     * <p>\n     * The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any\n     * equal signs.\n     * </p>\n     *\n     * @see <a href=\"http://tools.ietf.org/html/rfc1421\">RFC 1421 section 4.3.2.4</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_RESIZE_FACTOR",
        "snippet": "    private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;",
        "begin_line": 140,
        "end_line": 140,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE",
        "snippet": "    private static final int DEFAULT_BUFFER_SIZE = 8192;",
        "begin_line": 146,
        "end_line": 146,
        "comment": "\n     * Defines the default buffer size - currently {@value}\n     * - must be large enough for at least one encoded block+separator\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS",
        "snippet": "    protected static final int MASK_8BITS = 0xff;",
        "begin_line": 149,
        "end_line": 149,
        "comment": " Mask used to extract 8 bits, used in decoding bytes "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodec.PAD_DEFAULT",
        "snippet": "    protected static final byte PAD_DEFAULT = '='; // Allow static access to default",
        "begin_line": 154,
        "end_line": 154,
        "comment": " Allow static access to default"
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodec.PAD",
        "snippet": "    @Deprecated\n    protected final byte PAD = PAD_DEFAULT; // instance variable just in case it needs to vary later",
        "begin_line": 159,
        "end_line": 160,
        "comment": "\n     * @deprecated Use {@link #pad}. Will be removed in 2.0.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodec.pad",
        "snippet": "    protected final byte pad; // instance variable just in case it needs to vary later",
        "begin_line": 162,
        "end_line": 162,
        "comment": " instance variable just in case it needs to vary later"
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodec.unencodedBlockSize",
        "snippet": "    private final int unencodedBlockSize;",
        "begin_line": 165,
        "end_line": 165,
        "comment": " Number of bytes in each full block of unencoded data, e.g. 4 for Base64 and 5 for Base32 "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodec.encodedBlockSize",
        "snippet": "    private final int encodedBlockSize;",
        "begin_line": 168,
        "end_line": 168,
        "comment": " Number of bytes in each full block of encoded data, e.g. 3 for Base64 and 8 for Base32 "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodec.lineLength",
        "snippet": "    protected final int lineLength;",
        "begin_line": 175,
        "end_line": 175,
        "comment": "\n     * Chunksize for encoding. Not used when decoding.\n     * A value of zero or less implies no chunking of the encoded data.\n     * Rounded down to nearest multiple of encodedBlockSize.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodec.chunkSeparatorLength",
        "snippet": "    private final int chunkSeparatorLength;",
        "begin_line": 180,
        "end_line": 180,
        "comment": "\n     * Size of chunk separator. Not used unless {@link #lineLength} &gt; 0.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE",
        "snippet": "    private static final int BITS_PER_ENCODED_BYTE = 6;",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n     * BASE32 characters are 6 bits in length.\n     * They are formed by taking a block of 3 octets to form a 24-bit string,\n     * which is converted into 4 BASE64 characters.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.BYTES_PER_UNENCODED_BLOCK",
        "snippet": "    private static final int BYTES_PER_UNENCODED_BLOCK = 3;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK",
        "snippet": "    private static final int BYTES_PER_ENCODED_BLOCK = 4;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.CHUNK_SEPARATOR",
        "snippet": "    static final byte[] CHUNK_SEPARATOR = {'\\r', '\\n'};",
        "begin_line": 71,
        "end_line": 71,
        "comment": "\n     * Chunk separator per RFC 2045 section 2.1.\n     *\n     * <p>\n     * N.B. The next major release may break compatibility and make this field private.\n     * </p>\n     *\n     * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045 section 2.1</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE",
        "snippet": "    private static final byte[] STANDARD_ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n    };",
        "begin_line": 80,
        "end_line": 86,
        "comment": "\n     * This array is a lookup table that translates 6-bit positive integer index values into their \"Base64 Alphabet\"\n     * equivalents as specified in Table 1 of RFC 2045.\n     *\n     * Thanks to \"commons\" project in ws.apache.org for this code.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.URL_SAFE_ENCODE_TABLE",
        "snippet": "    private static final byte[] URL_SAFE_ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'\n    };",
        "begin_line": 93,
        "end_line": 99,
        "comment": "\n     * This is a copy of the STANDARD_ENCODE_TABLE above, but with + and /\n     * changed to - and _ to make the encoded Base64 results more URL-SAFE.\n     * This table is only used when the Base64's mode is set to URL-SAFE.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.DECODE_TABLE",
        "snippet": "    private static final byte[] DECODE_TABLE = {\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54,\n            55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4,\n            5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n            24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n    };",
        "begin_line": 112,
        "end_line": 120,
        "comment": "\n     * This array is a lookup table that translates Unicode characters drawn from the \"Base64 Alphabet\" (as specified\n     * in Table 1 of RFC 2045) into their 6-bit positive integer equivalents. Characters that are not in the Base64\n     * alphabet but fall within the bounds of the array are translated to -1.\n     *\n     * Note: '+' and '-' both decode to 62. '/' and '_' both decode to 63. This means decoder seamlessly handles both\n     * URL_SAFE and STANDARD base64. (The encoder, on the other hand, needs to know ahead of time what to emit).\n     *\n     * Thanks to \"commons\" project in ws.apache.org for this code.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.MASK_6BITS",
        "snippet": "    private static final int MASK_6BITS = 0x3f;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " Mask used to extract 6 bits, used when encoding "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.encodeTable",
        "snippet": "    private final byte[] encodeTable;",
        "begin_line": 137,
        "end_line": 137,
        "comment": "\n     * Encode table to use: either STANDARD or URL_SAFE. Note: the DECODE_TABLE above remains static because it is able\n     * to decode both STANDARD and URL_SAFE streams, but the encodeTable must be a member variable so we can switch\n     * between the two modes.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.decodeTable",
        "snippet": "    private final byte[] decodeTable = DECODE_TABLE;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " Only one decode table currently; keep for consistency with Base32 code"
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.lineSeparator",
        "snippet": "    private final byte[] lineSeparator;",
        "begin_line": 145,
        "end_line": 145,
        "comment": "\n     * Line separator for encoding. Not used when decoding. Only used if lineLength &gt; 0.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.decodeSize",
        "snippet": "    private final int decodeSize;",
        "begin_line": 151,
        "end_line": 151,
        "comment": "\n     * Convenience variable to help us determine when our buffer is going to run out of room and needs resizing.\n     * <code>decodeSize = 3 + lineSeparator.length;</code>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
        "signature": "org.apache.commons.codec.binary.Base64.encodeSize",
        "snippet": "    private final int encodeSize;",
        "begin_line": 157,
        "end_line": 157,
        "comment": "\n     * Convenience variable to help us determine when our buffer is going to run out of room and needs resizing.\n     * <code>encodeSize = 4 + lineSeparator.length;</code>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
        "signature": "org.apache.commons.codec.binary.Base32.BITS_PER_ENCODED_BYTE",
        "snippet": "    private static final int BITS_PER_ENCODED_BYTE = 5;",
        "begin_line": 51,
        "end_line": 51,
        "comment": "\n     * BASE32 characters are 5 bits in length.\n     * They are formed by taking a block of five octets to form a 40-bit string,\n     * which is converted into eight BASE32 characters.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
        "signature": "org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK",
        "snippet": "    private static final int BYTES_PER_ENCODED_BLOCK = 8;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
        "signature": "org.apache.commons.codec.binary.Base32.BYTES_PER_UNENCODED_BLOCK",
        "snippet": "    private static final int BYTES_PER_UNENCODED_BLOCK = 5;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
        "signature": "org.apache.commons.codec.binary.Base32.CHUNK_SEPARATOR",
        "snippet": "    private static final byte[] CHUNK_SEPARATOR = {'\\r', '\\n'};",
        "begin_line": 60,
        "end_line": 60,
        "comment": "\n     * Chunk separator per RFC 2045 section 2.1.\n     *\n     * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045 section 2.1</a>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
        "signature": "org.apache.commons.codec.binary.Base32.DECODE_TABLE",
        "snippet": "    private static final byte[] DECODE_TABLE = {\n         //  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f\n            -1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, // 30-3f 2-7\n            -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, // 40-4f A-N\n            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,                     // 50-5a O-Z\n    };",
        "begin_line": 67,
        "end_line": 75,
        "comment": "\n     * This array is a lookup table that translates Unicode characters drawn from the \"Base32 Alphabet\" (as specified\n     * in Table 3 of RFC 4648) into their 5-bit positive integer equivalents. Characters that are not in the Base32\n     * alphabet but fall within the bounds of the array are translated to -1.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
        "signature": "org.apache.commons.codec.binary.Base32.ENCODE_TABLE",
        "snippet": "    private static final byte[] ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            '2', '3', '4', '5', '6', '7',\n    };",
        "begin_line": 81,
        "end_line": 85,
        "comment": "\n     * This array is a lookup table that translates 5-bit positive integer index values into their \"Base32 Alphabet\"\n     * equivalents as specified in Table 3 of RFC 4648.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
        "signature": "org.apache.commons.codec.binary.Base32.HEX_DECODE_TABLE",
        "snippet": "    private static final byte[] HEX_DECODE_TABLE = {\n         //  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f\n             0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1, // 30-3f 2-7\n            -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, // 40-4f A-N\n            25, 26, 27, 28, 29, 30, 31, 32,                                 // 50-57 O-V\n    };",
        "begin_line": 92,
        "end_line": 100,
        "comment": "\n     * This array is a lookup table that translates Unicode characters drawn from the \"Base32 |Hex Alphabet\" (as\n     * specified in Table 3 of RFC 4648) into their 5-bit positive integer equivalents. Characters that are not in the\n     * Base32 Hex alphabet but fall within the bounds of the array are translated to -1.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
        "signature": "org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE",
        "snippet": "    private static final byte[] HEX_ENCODE_TABLE = {\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\n    };",
        "begin_line": 106,
        "end_line": 110,
        "comment": "\n     * This array is a lookup table that translates 5-bit positive integer index values into their\n     * \"Base32 Hex Alphabet\" equivalents as specified in Table 3 of RFC 4648.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
        "signature": "org.apache.commons.codec.binary.Base32.MASK_5BITS",
        "snippet": "    private static final int MASK_5BITS = 0x1f;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " Mask used to extract 5 bits, used when encoding Base32 bytes "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
        "signature": "org.apache.commons.codec.binary.Base32.decodeSize",
        "snippet": "    private final int decodeSize;",
        "begin_line": 128,
        "end_line": 128,
        "comment": "\n     * Convenience variable to help us determine when our buffer is going to run out of room and needs resizing.\n     * <code>decodeSize = {@link #BYTES_PER_ENCODED_BLOCK} - 1 + lineSeparator.length;</code>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
        "signature": "org.apache.commons.codec.binary.Base32.decodeTable",
        "snippet": "    private final byte[] decodeTable;",
        "begin_line": 133,
        "end_line": 133,
        "comment": "\n     * Decode table to use.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
        "signature": "org.apache.commons.codec.binary.Base32.encodeSize",
        "snippet": "    private final int encodeSize;",
        "begin_line": 139,
        "end_line": 139,
        "comment": "\n     * Convenience variable to help us determine when our buffer is going to run out of room and needs resizing.\n     * <code>encodeSize = {@link #BYTES_PER_ENCODED_BLOCK} + lineSeparator.length;</code>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
        "signature": "org.apache.commons.codec.binary.Base32.encodeTable",
        "snippet": "    private final byte[] encodeTable;",
        "begin_line": 144,
        "end_line": 144,
        "comment": "\n     * Encode table to use.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
        "signature": "org.apache.commons.codec.binary.Base32.lineSeparator",
        "snippet": "    private final byte[] lineSeparator;",
        "begin_line": 149,
        "end_line": 149,
        "comment": "\n     * Line separator for encoding. Not used when decoding. Only used if lineLength &gt; 0.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Hex",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Hex.java",
        "signature": "org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET",
        "snippet": "    public static final Charset DEFAULT_CHARSET = Charsets.UTF_8;",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n     * Default charset name is {@link Charsets#UTF_8}\n     *\n     * @since 1.7\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Hex",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Hex.java",
        "signature": "org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET_NAME",
        "snippet": "    public static final String DEFAULT_CHARSET_NAME = CharEncoding.UTF_8;",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n     * Default charset name is {@link CharEncoding#UTF_8}\n     *\n     * @since 1.4\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Hex",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Hex.java",
        "signature": "org.apache.commons.codec.binary.Hex.DIGITS_LOWER",
        "snippet": "    private static final char[] DIGITS_LOWER =\n        {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};",
        "begin_line": 57,
        "end_line": 58,
        "comment": "\n     * Used to build output as Hex\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Hex",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Hex.java",
        "signature": "org.apache.commons.codec.binary.Hex.DIGITS_UPPER",
        "snippet": "    private static final char[] DIGITS_UPPER =\n        {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};",
        "begin_line": 63,
        "end_line": 64,
        "comment": "\n     * Used to build output as Hex\n     "
    },
    {
        "class_name": "org.apache.commons.codec.binary.Hex",
        "src_path": "src/main/java/org/apache/commons/codec/binary/Hex.java",
        "signature": "org.apache.commons.codec.binary.Hex.charset",
        "snippet": "    private final Charset charset;",
        "begin_line": 183,
        "end_line": 183,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecOutputStream",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecOutputStream.doEncode",
        "snippet": "    private final boolean doEncode;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecOutputStream",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecOutputStream.baseNCodec",
        "snippet": "    private final BaseNCodec baseNCodec;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecOutputStream",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecOutputStream.singleByte",
        "snippet": "    private final byte[] singleByte = new byte[1];",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecOutputStream",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecOutputStream.context",
        "snippet": "    private final Context context = new Context();",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY",
        "snippet": "    private static final char[] EMPTY_CHAR_ARRAY = new char[0];",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Empty char array. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY",
        "snippet": "    private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Empty byte array. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_0",
        "snippet": "    private static final int BIT_0 = 1;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Mask for bit 0 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_1",
        "snippet": "    private static final int BIT_1 = 0x02;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Mask for bit 1 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_2",
        "snippet": "    private static final int BIT_2 = 0x04;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Mask for bit 2 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_3",
        "snippet": "    private static final int BIT_3 = 0x08;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Mask for bit 3 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_4",
        "snippet": "    private static final int BIT_4 = 0x10;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Mask for bit 4 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_5",
        "snippet": "    private static final int BIT_5 = 0x20;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Mask for bit 5 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_6",
        "snippet": "    private static final int BIT_6 = 0x40;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Mask for bit 6 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BIT_7",
        "snippet": "    private static final int BIT_7 = 0x80;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Mask for bit 7 of a byte. "
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodec",
        "src_path": "src/main/java/org/apache/commons/codec/binary/BinaryCodec.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodec.BITS",
        "snippet": "    private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodec.charset",
        "snippet": "    private final Charset charset;",
        "begin_line": 65,
        "end_line": 65,
        "comment": "\n     * The default charset used for string decoding and encoding.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS",
        "snippet": "    private static final BitSet PRINTABLE_CHARS = new BitSet(256);",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\n     * BitSet of printable characters as defined in RFC 1521.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR",
        "snippet": "    private static final byte ESCAPE_CHAR = '=';",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodec.TAB",
        "snippet": "    private static final byte TAB = 9;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodec.SPACE",
        "snippet": "    private static final byte SPACE = 32;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/BCodec.java",
        "signature": "org.apache.commons.codec.net.BCodec.charset",
        "snippet": "    private final Charset charset;",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n     * The default charset used for string decoding and encoding.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522Codec",
        "src_path": "src/main/java/org/apache/commons/codec/net/RFC1522Codec.java",
        "signature": "org.apache.commons.codec.net.RFC1522Codec.SEP",
        "snippet": "    protected static final char SEP = '?';",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Separator. "
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522Codec",
        "src_path": "src/main/java/org/apache/commons/codec/net/RFC1522Codec.java",
        "signature": "org.apache.commons.codec.net.RFC1522Codec.POSTFIX",
        "snippet": "    protected static final String POSTFIX = \"?=\";",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Prefix. "
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522Codec",
        "src_path": "src/main/java/org/apache/commons/codec/net/RFC1522Codec.java",
        "signature": "org.apache.commons.codec.net.RFC1522Codec.PREFIX",
        "snippet": "    protected static final String PREFIX = \"=?\";",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Postfix. "
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
        "signature": "org.apache.commons.codec.net.URLCodec.RADIX",
        "snippet": "    static final int RADIX = 16;",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n     * Radix used in encoding and decoding.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
        "signature": "org.apache.commons.codec.net.URLCodec.charset",
        "snippet": "    @Deprecated\n    protected String charset;",
        "begin_line": 60,
        "end_line": 61,
        "comment": "\n     * The default charset used for string decoding and encoding.\n     *\n     * @deprecated TODO: This field will be changed to a private final Charset in 2.0.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
        "signature": "org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR",
        "snippet": "    protected static final byte ESCAPE_CHAR = '%';",
        "begin_line": 66,
        "end_line": 66,
        "comment": "\n     * Release 1.5 made this field final.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
        "signature": "org.apache.commons.codec.net.URLCodec.WWW_FORM_URL",
        "snippet": "    protected static final BitSet WWW_FORM_URL = new BitSet(256);",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\n     * BitSet of www-form-url safe characters.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/QCodec.java",
        "signature": "org.apache.commons.codec.net.QCodec.charset",
        "snippet": "    private final Charset charset;",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\n     * The default charset used for string decoding and encoding.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/QCodec.java",
        "signature": "org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS",
        "snippet": "    private static final BitSet PRINTABLE_CHARS = new BitSet(256);",
        "begin_line": 61,
        "end_line": 61,
        "comment": "\n     * BitSet of printable characters as defined in RFC 1522.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/QCodec.java",
        "signature": "org.apache.commons.codec.net.QCodec.BLANK",
        "snippet": "    private static final byte BLANK = 32;",
        "begin_line": 106,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/QCodec.java",
        "signature": "org.apache.commons.codec.net.QCodec.UNDERSCORE",
        "snippet": "    private static final byte UNDERSCORE = 95;",
        "begin_line": 108,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodec",
        "src_path": "src/main/java/org/apache/commons/codec/net/QCodec.java",
        "signature": "org.apache.commons.codec.net.QCodec.encodeBlanks",
        "snippet": "    private boolean encodeBlanks = false;",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
        "src_path": "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone.VOWELS",
        "snippet": "    private static final String VOWELS = \"AEIOUY\";",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n     * \"Vowels\" to test for\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
        "src_path": "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone.SILENT_START",
        "snippet": "    private static final String[] SILENT_START =\n        { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };",
        "begin_line": 47,
        "end_line": 48,
        "comment": "\n     * Prefixes when present which are not pronounced\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
        "src_path": "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone.L_R_N_M_B_H_F_V_W_SPACE",
        "snippet": "    private static final String[] L_R_N_M_B_H_F_V_W_SPACE =\n        { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" };",
        "begin_line": 49,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
        "src_path": "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone.ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER",
        "snippet": "    private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER =\n        { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" };",
        "begin_line": 51,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
        "src_path": "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone.L_T_K_S_N_M_B_Z",
        "snippet": "    private static final String[] L_T_K_S_N_M_B_Z =\n        { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" };",
        "begin_line": 53,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
        "src_path": "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone.maxCodeLen",
        "snippet": "    private int maxCodeLen = 4;",
        "begin_line": 59,
        "end_line": 59,
        "comment": "\n     * Maximum length of an encoding, default is 4\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneResult",
        "src_path": "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneResult.primary",
        "snippet": "        private final StringBuilder primary = new StringBuilder(getMaxCodeLen());",
        "begin_line": 937,
        "end_line": 937,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneResult",
        "src_path": "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneResult.alternate",
        "snippet": "        private final StringBuilder alternate = new StringBuilder(getMaxCodeLen());",
        "begin_line": 938,
        "end_line": 938,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneResult",
        "src_path": "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneResult.maxLength",
        "snippet": "        private final int maxLength;",
        "begin_line": 939,
        "end_line": 939,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Metaphone",
        "src_path": "src/main/java/org/apache/commons/codec/language/Metaphone.java",
        "signature": "org.apache.commons.codec.language.Metaphone.VOWELS",
        "snippet": "    private static final String VOWELS = \"AEIOU\";",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n     * Five values in the English language\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Metaphone",
        "src_path": "src/main/java/org/apache/commons/codec/language/Metaphone.java",
        "signature": "org.apache.commons.codec.language.Metaphone.FRONTV",
        "snippet": "    private static final String FRONTV = \"EIY\";",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n     * Variable used in Metaphone algorithm\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Metaphone",
        "src_path": "src/main/java/org/apache/commons/codec/language/Metaphone.java",
        "signature": "org.apache.commons.codec.language.Metaphone.VARSON",
        "snippet": "    private static final String VARSON = \"CSPTG\";",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\n     * Variable used in Metaphone algorithm\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Metaphone",
        "src_path": "src/main/java/org/apache/commons/codec/language/Metaphone.java",
        "signature": "org.apache.commons.codec.language.Metaphone.maxCodeLen",
        "snippet": "    private int maxCodeLen = 4;",
        "begin_line": 73,
        "end_line": 73,
        "comment": "\n     * The max code length for metaphone is 4\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Soundex",
        "src_path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
        "signature": "org.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING_STRING",
        "snippet": "    public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\";",
        "begin_line": 44,
        "end_line": 44,
        "comment": "\n     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     * means do not encode.\n     * <p>\n     * (This constant is provided as both an implementation convenience and to allow Javadoc to pick\n     * up the value for the constant values page.)\n     * </p>\n     *\n     * @see #US_ENGLISH_MAPPING\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Soundex",
        "src_path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
        "signature": "org.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING",
        "snippet": "    private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     * means do not encode.\n     *\n     * @see Soundex#Soundex(char[])\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Soundex",
        "src_path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
        "signature": "org.apache.commons.codec.language.Soundex.US_ENGLISH",
        "snippet": "    public static final Soundex US_ENGLISH = new Soundex();",
        "begin_line": 59,
        "end_line": 59,
        "comment": "\n     * An instance of Soundex using the US_ENGLISH_MAPPING mapping.\n     *\n     * @see #US_ENGLISH_MAPPING\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Soundex",
        "src_path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
        "signature": "org.apache.commons.codec.language.Soundex.maxLength",
        "snippet": "    @Deprecated\n    private int maxLength = 4;",
        "begin_line": 66,
        "end_line": 67,
        "comment": "\n     * The maximum length of a Soundex code - Soundex codes are only four characters by definition.\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Soundex",
        "src_path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
        "signature": "org.apache.commons.codec.language.Soundex.soundexMapping",
        "snippet": "    private final char[] soundexMapping;",
        "begin_line": 73,
        "end_line": 73,
        "comment": "\n     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n     * letter is mapped. This implementation contains a default map for US_ENGLISH\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhonetic",
        "src_path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
        "signature": "org.apache.commons.codec.language.ColognePhonetic.AEIJOUY",
        "snippet": "    private static final char[] AEIJOUY = new char[] { 'A', 'E', 'I', 'J', 'O', 'U', 'Y' };",
        "begin_line": 181,
        "end_line": 181,
        "comment": " Predefined char arrays for better performance and less GC load"
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhonetic",
        "src_path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
        "signature": "org.apache.commons.codec.language.ColognePhonetic.SCZ",
        "snippet": "    private static final char[] SCZ = new char[] { 'S', 'C', 'Z' };",
        "begin_line": 182,
        "end_line": 182,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhonetic",
        "src_path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
        "signature": "org.apache.commons.codec.language.ColognePhonetic.WFPV",
        "snippet": "    private static final char[] WFPV = new char[] { 'W', 'F', 'P', 'V' };",
        "begin_line": 183,
        "end_line": 183,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhonetic",
        "src_path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
        "signature": "org.apache.commons.codec.language.ColognePhonetic.GKQ",
        "snippet": "    private static final char[] GKQ = new char[] { 'G', 'K', 'Q' };",
        "begin_line": 184,
        "end_line": 184,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhonetic",
        "src_path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
        "signature": "org.apache.commons.codec.language.ColognePhonetic.CKQ",
        "snippet": "    private static final char[] CKQ = new char[] { 'C', 'K', 'Q' };",
        "begin_line": 185,
        "end_line": 185,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhonetic",
        "src_path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
        "signature": "org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX",
        "snippet": "    private static final char[] AHKLOQRUX = new char[] { 'A', 'H', 'K', 'L', 'O', 'Q', 'R', 'U', 'X' };",
        "begin_line": 186,
        "end_line": 186,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhonetic",
        "src_path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
        "signature": "org.apache.commons.codec.language.ColognePhonetic.SZ",
        "snippet": "    private static final char[] SZ = new char[] { 'S', 'Z' };",
        "begin_line": 187,
        "end_line": 187,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhonetic",
        "src_path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
        "signature": "org.apache.commons.codec.language.ColognePhonetic.AHOUKQX",
        "snippet": "    private static final char[] AHOUKQX = new char[] { 'A', 'H', 'O', 'U', 'K', 'Q', 'X' };",
        "begin_line": 188,
        "end_line": 188,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhonetic",
        "src_path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
        "signature": "org.apache.commons.codec.language.ColognePhonetic.TDX",
        "snippet": "    private static final char[] TDX = new char[] { 'T', 'D', 'X' };",
        "begin_line": 189,
        "end_line": 189,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.CologneBuffer",
        "src_path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
        "signature": "org.apache.commons.codec.language.CologneBuffer.data",
        "snippet": "        protected final char[] data;",
        "begin_line": 198,
        "end_line": 198,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.CologneBuffer",
        "src_path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
        "signature": "org.apache.commons.codec.language.CologneBuffer.length",
        "snippet": "        protected int length = 0;",
        "begin_line": 200,
        "end_line": 200,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhonetic",
        "src_path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
        "signature": "org.apache.commons.codec.language.ColognePhonetic.PREPROCESS_MAP",
        "snippet": "    private static final char[][] PREPROCESS_MAP = new char[][]{\n        {'\\u00C4', 'A'}, // capital a, umlaut mark\n        {'\\u00DC', 'U'}, // capital u, umlaut mark\n        {'\\u00D6', 'O'}, // capital o, umlaut mark\n        {'\\u00DF', 'S'} // small sharp s, German\n    };",
        "begin_line": 285,
        "end_line": 290,
        "comment": "\n     * Maps some Germanic characters to plain for internal processing. The following characters are mapped:\n     * <ul>\n     * <li>capital a, umlaut mark</li>\n     * <li>capital u, umlaut mark</li>\n     * <li>capital o, umlaut mark</li>\n     * <li>small sharp s, German</li>\n     * </ul>\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundex",
        "src_path": "src/main/java/org/apache/commons/codec/language/RefinedSoundex.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING_STRING",
        "snippet": "    public static final String US_ENGLISH_MAPPING_STRING = \"01360240043788015936020505\";",
        "begin_line": 37,
        "end_line": 37,
        "comment": "\n     * @since 1.4\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundex",
        "src_path": "src/main/java/org/apache/commons/codec/language/RefinedSoundex.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING",
        "snippet": "    private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();",
        "begin_line": 44,
        "end_line": 44,
        "comment": "\n     * RefinedSoundex is *refined* for a number of reasons one being that the\n     * mappings have been altered. This implementation contains default\n     * mappings for US English.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundex",
        "src_path": "src/main/java/org/apache/commons/codec/language/RefinedSoundex.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundex.soundexMapping",
        "snippet": "    private final char[] soundexMapping;",
        "begin_line": 51,
        "end_line": 51,
        "comment": "\n     * Every letter of the alphabet is \"mapped\" to a numerical value. This char\n     * array holds the values to which each letter is mapped. This\n     * implementation contains a default map for US_ENGLISH\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundex",
        "src_path": "src/main/java/org/apache/commons/codec/language/RefinedSoundex.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH",
        "snippet": "    public static final RefinedSoundex US_ENGLISH = new RefinedSoundex();",
        "begin_line": 57,
        "end_line": 57,
        "comment": "\n     * This static variable contains an instance of the RefinedSoundex using\n     * the US_ENGLISH mapping.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.CHARS_A",
        "snippet": "    private static final char[] CHARS_A   = new char[] { 'A' };",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.CHARS_AF",
        "snippet": "    private static final char[] CHARS_AF  = new char[] { 'A', 'F' };",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.CHARS_C",
        "snippet": "    private static final char[] CHARS_C   = new char[] { 'C' };",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.CHARS_FF",
        "snippet": "    private static final char[] CHARS_FF  = new char[] { 'F', 'F' };",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.CHARS_G",
        "snippet": "    private static final char[] CHARS_G   = new char[] { 'G' };",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.CHARS_N",
        "snippet": "    private static final char[] CHARS_N   = new char[] { 'N' };",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.CHARS_NN",
        "snippet": "    private static final char[] CHARS_NN  = new char[] { 'N', 'N' };",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.CHARS_S",
        "snippet": "    private static final char[] CHARS_S   = new char[] { 'S' };",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.CHARS_SSS",
        "snippet": "    private static final char[] CHARS_SSS = new char[] { 'S', 'S', 'S' };",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.PAT_MAC",
        "snippet": "    private static final Pattern PAT_MAC    = Pattern.compile(\"^MAC\");",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.PAT_KN",
        "snippet": "    private static final Pattern PAT_KN     = Pattern.compile(\"^KN\");",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.PAT_K",
        "snippet": "    private static final Pattern PAT_K      = Pattern.compile(\"^K\");",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.PAT_PH_PF",
        "snippet": "    private static final Pattern PAT_PH_PF  = Pattern.compile(\"^(PH|PF)\");",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.PAT_SCH",
        "snippet": "    private static final Pattern PAT_SCH    = Pattern.compile(\"^SCH\");",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.PAT_EE_IE",
        "snippet": "    private static final Pattern PAT_EE_IE  = Pattern.compile(\"(EE|IE)$\");",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.PAT_DT_ETC",
        "snippet": "    private static final Pattern PAT_DT_ETC = Pattern.compile(\"(DT|RT|RD|NT|ND)$\");",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.SPACE",
        "snippet": "    private static final char SPACE = ' ';",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.TRUE_LENGTH",
        "snippet": "    private static final int TRUE_LENGTH = 6;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Nysiis",
        "src_path": "src/main/java/org/apache/commons/codec/language/Nysiis.java",
        "signature": "org.apache.commons.codec.language.Nysiis.strict",
        "snippet": "    private final boolean strict;",
        "begin_line": 171,
        "end_line": 171,
        "comment": " Indicates the strict mode. "
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE",
        "snippet": "    private static final String SPACE = \" \";",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY",
        "snippet": "    private static final String EMPTY = \"\";",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE",
        "snippet": "    private static final int ONE = 1, TWO = 2, THREE = 3, FOUR = 4, FIVE = 5, SIX = 6, SEVEN = 7, EIGHT = 8,\n                             ELEVEN = 11, TWELVE = 12;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\n     * Constants used mainly for the min rating value.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO",
        "snippet": "    private static final int ONE = 1, TWO = 2, THREE = 3, FOUR = 4, FIVE = 5, SIX = 6, SEVEN = 7, EIGHT = 8,\n                             ELEVEN = 11, TWELVE = 12;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\n     * Constants used mainly for the min rating value.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE",
        "snippet": "    private static final int ONE = 1, TWO = 2, THREE = 3, FOUR = 4, FIVE = 5, SIX = 6, SEVEN = 7, EIGHT = 8,\n                             ELEVEN = 11, TWELVE = 12;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\n     * Constants used mainly for the min rating value.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR",
        "snippet": "    private static final int ONE = 1, TWO = 2, THREE = 3, FOUR = 4, FIVE = 5, SIX = 6, SEVEN = 7, EIGHT = 8,\n                             ELEVEN = 11, TWELVE = 12;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\n     * Constants used mainly for the min rating value.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE",
        "snippet": "    private static final int ONE = 1, TWO = 2, THREE = 3, FOUR = 4, FIVE = 5, SIX = 6, SEVEN = 7, EIGHT = 8,\n                             ELEVEN = 11, TWELVE = 12;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\n     * Constants used mainly for the min rating value.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX",
        "snippet": "    private static final int ONE = 1, TWO = 2, THREE = 3, FOUR = 4, FIVE = 5, SIX = 6, SEVEN = 7, EIGHT = 8,\n                             ELEVEN = 11, TWELVE = 12;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\n     * Constants used mainly for the min rating value.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN",
        "snippet": "    private static final int ONE = 1, TWO = 2, THREE = 3, FOUR = 4, FIVE = 5, SIX = 6, SEVEN = 7, EIGHT = 8,\n                             ELEVEN = 11, TWELVE = 12;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\n     * Constants used mainly for the min rating value.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT",
        "snippet": "    private static final int ONE = 1, TWO = 2, THREE = 3, FOUR = 4, FIVE = 5, SIX = 6, SEVEN = 7, EIGHT = 8,\n                             ELEVEN = 11, TWELVE = 12;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\n     * Constants used mainly for the min rating value.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN",
        "snippet": "    private static final int ONE = 1, TWO = 2, THREE = 3, FOUR = 4, FIVE = 5, SIX = 6, SEVEN = 7, EIGHT = 8,\n                             ELEVEN = 11, TWELVE = 12;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\n     * Constants used mainly for the min rating value.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE",
        "snippet": "    private static final int ONE = 1, TWO = 2, THREE = 3, FOUR = 4, FIVE = 5, SIX = 6, SEVEN = 7, EIGHT = 8,\n                             ELEVEN = 11, TWELVE = 12;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\n     * Constants used mainly for the min rating value.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII",
        "snippet": "    private static final String PLAIN_ASCII = \"AaEeIiOoUu\" + // grave\n            \"AaEeIiOoUuYy\" + // acute\n            \"AaEeIiOoUuYy\" + // circumflex\n            \"AaOoNn\" + // tilde\n            \"AaEeIiOoUuYy\" + // umlaut\n            \"Aa\" + // ring\n            \"Cc\" + // cedilla\n            \"OoUu\"; // double acute",
        "begin_line": 47,
        "end_line": 54,
        "comment": "\n     * The plain letter equivalent of the accented letters.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.UNICODE",
        "snippet": "    private static final String UNICODE = \"\\u00C0\\u00E0\\u00C8\\u00E8\\u00CC\\u00EC\\u00D2\\u00F2\\u00D9\\u00F9\" +\n            \"\\u00C1\\u00E1\\u00C9\\u00E9\\u00CD\\u00ED\\u00D3\\u00F3\\u00DA\\u00FA\\u00DD\\u00FD\" +\n            \"\\u00C2\\u00E2\\u00CA\\u00EA\\u00CE\\u00EE\\u00D4\\u00F4\\u00DB\\u00FB\\u0176\\u0177\" +\n            \"\\u00C3\\u00E3\\u00D5\\u00F5\\u00D1\\u00F1\" +\n            \"\\u00C4\\u00E4\\u00CB\\u00EB\\u00CF\\u00EF\\u00D6\\u00F6\\u00DC\\u00FC\\u0178\\u00FF\" +\n            \"\\u00C5\\u00E5\" + \"\\u00C7\\u00E7\" + \"\\u0150\\u0151\\u0170\\u0171\";",
        "begin_line": 59,
        "end_line": 64,
        "comment": "\n     * Unicode characters corresponding to various accented letters. For example: \\u00DA is U acute etc...\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoder.DOUBLE_CONSONANT",
        "snippet": "    private static final String[] DOUBLE_CONSONANT =\n            new String[] { \"BB\", \"CC\", \"DD\", \"FF\", \"GG\", \"HH\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"PP\", \"QQ\", \"RR\", \"SS\",\n                           \"TT\", \"VV\", \"WW\", \"XX\", \"YY\", \"ZZ\" };",
        "begin_line": 66,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone2",
        "src_path": "src/main/java/org/apache/commons/codec/language/Caverphone2.java",
        "signature": "org.apache.commons.codec.language.Caverphone2.TEN_1",
        "snippet": "    private static final String TEN_1 = \"1111111111\";",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone",
        "src_path": "src/main/java/org/apache/commons/codec/language/Caverphone.java",
        "signature": "org.apache.commons.codec.language.Caverphone.encoder",
        "snippet": "    final private Caverphone2 encoder = new Caverphone2();",
        "begin_line": 41,
        "end_line": 41,
        "comment": "\n     * Delegate to a {@link Caverphone2} instance to avoid code duplication.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone1",
        "src_path": "src/main/java/org/apache/commons/codec/language/Caverphone1.java",
        "signature": "org.apache.commons.codec.language.Caverphone1.SIX_1",
        "snippet": "    private static final String SIX_1 = \"111111\";",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.NameType",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/NameType.java",
        "signature": "org.apache.commons.codec.language.bm.NameType.name",
        "snippet": "    private final String name;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoder",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoder.engine",
        "snippet": "    private PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.APPROX, true);",
        "begin_line": 76,
        "end_line": 76,
        "comment": " a cached object"
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.LangRule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Lang.java",
        "signature": "org.apache.commons.codec.language.bm.LangRule.acceptOnMatch",
        "snippet": "        private final boolean acceptOnMatch;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.LangRule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Lang.java",
        "signature": "org.apache.commons.codec.language.bm.LangRule.languages",
        "snippet": "        private final Set<String> languages;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.LangRule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Lang.java",
        "signature": "org.apache.commons.codec.language.bm.LangRule.pattern",
        "snippet": "        private final Pattern pattern;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Lang",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Lang.java",
        "signature": "org.apache.commons.codec.language.bm.Lang.Langs",
        "snippet": "    private static final Map<NameType, Lang> Langs = new EnumMap<NameType, Lang>(NameType.class);",
        "begin_line": 96,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Lang",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Lang.java",
        "signature": "org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN",
        "snippet": "    private static final String LANGUAGE_RULES_RN = \"org/apache/commons/codec/language/bm/lang.txt\";",
        "begin_line": 98,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Lang",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Lang.java",
        "signature": "org.apache.commons.codec.language.bm.Lang.languages",
        "snippet": "    private final Languages languages;",
        "begin_line": 187,
        "end_line": 187,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Lang",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Lang.java",
        "signature": "org.apache.commons.codec.language.bm.Lang.rules",
        "snippet": "    private final List<LangRule> rules;",
        "begin_line": 188,
        "end_line": 188,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.RuleType",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/RuleType.java",
        "signature": "org.apache.commons.codec.language.bm.RuleType.name",
        "snippet": "    private final String name;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Phoneme",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Phoneme.COMPARATOR",
        "snippet": "        public static final Comparator<Phoneme> COMPARATOR = new Comparator<Phoneme>() {\n            @Override\n            public int compare(final Phoneme o1, final Phoneme o2) {\n                for (int i = 0; i < o1.phonemeText.length(); i++) {\n                    if (i >= o2.phonemeText.length()) {\n                        return +1;\n                    }\n                    final int c = o1.phonemeText.charAt(i) - o2.phonemeText.charAt(i);\n                    if (c != 0) {\n                        return c;\n                    }\n                }\n\n                if (o1.phonemeText.length() < o2.phonemeText.length()) {\n                    return -1;\n                }\n\n                return 0;\n            }\n        };",
        "begin_line": 85,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Phoneme",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Phoneme.phonemeText",
        "snippet": "        private final StringBuilder phonemeText;",
        "begin_line": 106,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Phoneme",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Phoneme.languages",
        "snippet": "        private final Languages.LanguageSet languages;",
        "begin_line": 107,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhonemeList",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.PhonemeList.phonemes",
        "snippet": "        private final List<Phoneme> phonemes;",
        "begin_line": 157,
        "end_line": 157,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Rule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER",
        "snippet": "    public static final RPattern ALL_STRINGS_RMATCHER = new RPattern() {\n        @Override\n        public boolean isMatch(final CharSequence input) {\n            return true;\n        }\n    };",
        "begin_line": 176,
        "end_line": 181,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Rule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Rule.ALL",
        "snippet": "    public static final String ALL = \"ALL\";",
        "begin_line": 183,
        "end_line": 183,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Rule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE",
        "snippet": "    private static final String DOUBLE_QUOTE = \"\\\"\";",
        "begin_line": 185,
        "end_line": 185,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Rule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE",
        "snippet": "    private static final String HASH_INCLUDE = \"#include\";",
        "begin_line": 187,
        "end_line": 187,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Rule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Rule.RULES",
        "snippet": "    private static final Map<NameType, Map<RuleType, Map<String, Map<String, List<Rule>>>>> RULES =\n            new EnumMap<NameType, Map<RuleType, Map<String, Map<String, List<Rule>>>>>(NameType.class);",
        "begin_line": 189,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Rule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Rule.myLine",
        "snippet": "                                    private final int myLine = cLine;",
        "begin_line": 436,
        "end_line": 436,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Rule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Rule.loc",
        "snippet": "                                    private final String loc = location;",
        "begin_line": 437,
        "end_line": 437,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Rule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Rule.pattern",
        "snippet": "            Pattern pattern = Pattern.compile(regex);",
        "begin_line": 567,
        "end_line": 567,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Rule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Rule.lContext",
        "snippet": "    private final RPattern lContext;",
        "begin_line": 601,
        "end_line": 601,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Rule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Rule.pattern",
        "snippet": "    private final String pattern;",
        "begin_line": 603,
        "end_line": 603,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Rule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Rule.phoneme",
        "snippet": "    private final PhonemeExpr phoneme;",
        "begin_line": 605,
        "end_line": 605,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Rule",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "signature": "org.apache.commons.codec.language.bm.Rule.rContext",
        "snippet": "    private final RPattern rContext;",
        "begin_line": 607,
        "end_line": 607,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhonemeBuilder",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "signature": "org.apache.commons.codec.language.bm.PhonemeBuilder.phonemes",
        "snippet": "        private final Set<Rule.Phoneme> phonemes;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.RulesApplication",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "signature": "org.apache.commons.codec.language.bm.RulesApplication.finalRules",
        "snippet": "        private final Map<String, List<Rule>> finalRules;",
        "begin_line": 171,
        "end_line": 171,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.RulesApplication",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "signature": "org.apache.commons.codec.language.bm.RulesApplication.input",
        "snippet": "        private final CharSequence input;",
        "begin_line": 172,
        "end_line": 172,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.RulesApplication",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "signature": "org.apache.commons.codec.language.bm.RulesApplication.phonemeBuilder",
        "snippet": "        private PhonemeBuilder phonemeBuilder;",
        "begin_line": 174,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.RulesApplication",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "signature": "org.apache.commons.codec.language.bm.RulesApplication.i",
        "snippet": "        private int i;",
        "begin_line": 175,
        "end_line": 175,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.RulesApplication",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "signature": "org.apache.commons.codec.language.bm.RulesApplication.maxPhonemes",
        "snippet": "        private final int maxPhonemes;",
        "begin_line": 176,
        "end_line": 176,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.RulesApplication",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "signature": "org.apache.commons.codec.language.bm.RulesApplication.found",
        "snippet": "        private boolean found;",
        "begin_line": 177,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngine",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES",
        "snippet": "    private static final Map<NameType, Set<String>> NAME_PREFIXES = new EnumMap<NameType, Set<String>>(NameType.class);",
        "begin_line": 235,
        "end_line": 235,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngine",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngine.DEFAULT_MAX_PHONEMES",
        "snippet": "    private static final int DEFAULT_MAX_PHONEMES = 20;",
        "begin_line": 270,
        "end_line": 270,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngine",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngine.lang",
        "snippet": "    private final Lang lang;",
        "begin_line": 272,
        "end_line": 272,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngine",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngine.nameType",
        "snippet": "    private final NameType nameType;",
        "begin_line": 274,
        "end_line": 274,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngine",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngine.ruleType",
        "snippet": "    private final RuleType ruleType;",
        "begin_line": 276,
        "end_line": 276,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngine",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngine.concat",
        "snippet": "    private final boolean concat;",
        "begin_line": 278,
        "end_line": 278,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngine",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngine.maxPhonemes",
        "snippet": "    private final int maxPhonemes;",
        "begin_line": 280,
        "end_line": 280,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.ResourceConstants",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/ResourceConstants.java",
        "signature": "org.apache.commons.codec.language.bm.ResourceConstants.CMT",
        "snippet": "    static final String CMT = \"//\";",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.ResourceConstants",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/ResourceConstants.java",
        "signature": "org.apache.commons.codec.language.bm.ResourceConstants.ENCODING",
        "snippet": "    static final String ENCODING = CharEncoding.UTF_8;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.ResourceConstants",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/ResourceConstants.java",
        "signature": "org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END",
        "snippet": "    static final String EXT_CMT_END = \"*/\";",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.ResourceConstants",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/ResourceConstants.java",
        "signature": "org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START",
        "snippet": "    static final String EXT_CMT_START = \"/*\";",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.SomeLanguages",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Languages.java",
        "signature": "org.apache.commons.codec.language.bm.SomeLanguages.languages",
        "snippet": "        private final Set<String> languages;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Languages",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Languages.java",
        "signature": "org.apache.commons.codec.language.bm.Languages.ANY",
        "snippet": "    public static final String ANY = \"any\";",
        "begin_line": 137,
        "end_line": 137,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Languages",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Languages.java",
        "signature": "org.apache.commons.codec.language.bm.Languages.LANGUAGES",
        "snippet": "    private static final Map<NameType, Languages> LANGUAGES = new EnumMap<NameType, Languages>(NameType.class);",
        "begin_line": 139,
        "end_line": 139,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Languages",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Languages.java",
        "signature": "org.apache.commons.codec.language.bm.Languages.languages",
        "snippet": "    private final Set<String> languages;",
        "begin_line": 188,
        "end_line": 188,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Languages",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Languages.java",
        "signature": "org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES",
        "snippet": "    public static final LanguageSet NO_LANGUAGES = new LanguageSet() {\n        @Override\n        public boolean contains(final String language) {\n            return false;\n        }\n\n        @Override\n        public String getAny() {\n            throw new NoSuchElementException(\"Can't fetch any language from the empty language set.\");\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return true;\n        }\n\n        @Override\n        public boolean isSingleton() {\n            return false;\n        }\n\n        @Override\n        public LanguageSet restrictTo(final LanguageSet other) {\n            return this;\n        }\n\n        @Override\n        public String toString() {\n            return \"NO_LANGUAGES\";\n        }\n    };",
        "begin_line": 193,
        "end_line": 223,
        "comment": "\n     * No languages at all.\n     "
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.Languages",
        "src_path": "src/main/java/org/apache/commons/codec/language/bm/Languages.java",
        "signature": "org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE",
        "snippet": "    public static final LanguageSet ANY_LANGUAGE = new LanguageSet() {\n        @Override\n        public boolean contains(final String language) {\n            return true;\n        }\n\n        @Override\n        public String getAny() {\n            throw new NoSuchElementException(\"Can't fetch any language from the any language set.\");\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return false;\n        }\n\n        @Override\n        public boolean isSingleton() {\n            return false;\n        }\n\n        @Override\n        public LanguageSet restrictTo(final LanguageSet other) {\n            return other;\n        }\n\n        @Override\n        public String toString() {\n            return \"ANY_LANGUAGE\";\n        }\n    };",
        "begin_line": 228,
        "end_line": 258,
        "comment": "\n     * Any/all languages.\n     "
    }
]