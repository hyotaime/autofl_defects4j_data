{
  "filepath": "/tmp/Codec-13b/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "DoubleMetaphoneTest",
      "is_interface": false,
      "parent_types": [
        "StringEncoderAbstractTest\u003cDoubleMetaphone\u003e"
      ],
      "begin_line": 37,
      "end_line": 1251,
      "comment": "\n * Tests {@link DoubleMetaphone}.\n *\n * \u003cp\u003eKeep this file in UTF-8 encoding for proper Javadoc processing.\u003c/p\u003e\n *\n * @see \"http://www.cuj.com/documents/s\u003d8038/cuj0006philips/\"\n * @version $Id$\n "
    },
    {
      "type": "field",
      "varNames": [
        "FIXTURE"
      ],
      "begin_line": 48,
      "end_line": 595,
      "comment": "\n     * Test data from http://aspell.net/test/orig/batch0.tab.\n     *\n     * \"Copyright (C) 2002 Kevin Atkinson (kevina@gnu.org). Verbatim copying\n     * and distribution of this entire article is permitted in any medium,\n     * provided this notice is preserved.\"\n     *\n     * Massaged the test data in the array below.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "MATCHES"
      ],
      "begin_line": 600,
      "end_line": 1005,
      "comment": "\n     * A subset of FIXTURE generated by this test.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphone(java.lang.String, java.lang.String)",
      "begin_line": 1010,
      "end_line": 1019,
      "comment": "\n     * Tests encoding APIs in one place.\n     ",
      "child_ranges": [
        "(line 1011,col 9)-(line 1011,col 71)",
        "(line 1012,col 9)-(line 1016,col 9)",
        "(line 1017,col 9)-(line 1017,col 80)",
        "(line 1018,col 9)-(line 1018,col 87)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphoneAlt(java.lang.String, java.lang.String)",
      "begin_line": 1024,
      "end_line": 1026,
      "comment": "\n     * Tests encoding APIs in one place.\n     ",
      "child_ranges": [
        "(line 1025,col 9)-(line 1025,col 86)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.createStringEncoder()",
      "begin_line": 1028,
      "end_line": 1031,
      "comment": "",
      "child_ranges": [
        "(line 1030,col 9)-(line 1030,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest(java.lang.String[][], boolean)",
      "begin_line": 1033,
      "end_line": 1046,
      "comment": "",
      "child_ranges": [
        "(line 1034,col 9)-(line 1034,col 36)",
        "(line 1035,col 9)-(line 1045,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneNotEqualTest(boolean)",
      "begin_line": 1048,
      "end_line": 1056,
      "comment": "",
      "child_ranges": [
        "(line 1049,col 9)-(line 1049,col 96)",
        "(line 1050,col 9)-(line 1050,col 96)",
        "(line 1052,col 9)-(line 1055,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla()",
      "begin_line": 1058,
      "end_line": 1061,
      "comment": "",
      "child_ranges": [
        "(line 1060,col 9)-(line 1060,col 82)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184()",
      "begin_line": 1063,
      "end_line": 1071,
      "comment": "",
      "child_ranges": [
        "(line 1065,col 9)-(line 1065,col 80)",
        "(line 1066,col 9)-(line 1066,col 79)",
        "(line 1067,col 9)-(line 1067,col 83)",
        "(line 1068,col 9)-(line 1068,col 82)",
        "(line 1069,col 9)-(line 1069,col 83)",
        "(line 1070,col 9)-(line 1070,col 82)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone()",
      "begin_line": 1073,
      "end_line": 1112,
      "comment": "",
      "child_ranges": [
        "(line 1075,col 9)-(line 1075,col 49)",
        "(line 1076,col 9)-(line 1076,col 42)",
        "(line 1077,col 9)-(line 1077,col 45)",
        "(line 1078,col 9)-(line 1078,col 46)",
        "(line 1079,col 9)-(line 1079,col 44)",
        "(line 1080,col 9)-(line 1080,col 48)",
        "(line 1081,col 9)-(line 1081,col 45)",
        "(line 1082,col 9)-(line 1082,col 42)",
        "(line 1083,col 9)-(line 1083,col 44)",
        "(line 1084,col 9)-(line 1084,col 45)",
        "(line 1085,col 9)-(line 1085,col 53)",
        "(line 1086,col 9)-(line 1086,col 49)",
        "(line 1087,col 9)-(line 1087,col 51)",
        "(line 1088,col 9)-(line 1088,col 52)",
        "(line 1089,col 9)-(line 1089,col 50)",
        "(line 1090,col 9)-(line 1090,col 52)",
        "(line 1092,col 9)-(line 1092,col 52)",
        "(line 1093,col 9)-(line 1093,col 45)",
        "(line 1094,col 9)-(line 1094,col 48)",
        "(line 1095,col 9)-(line 1095,col 49)",
        "(line 1096,col 9)-(line 1096,col 47)",
        "(line 1097,col 9)-(line 1097,col 51)",
        "(line 1098,col 9)-(line 1098,col 48)",
        "(line 1099,col 9)-(line 1099,col 45)",
        "(line 1100,col 9)-(line 1100,col 47)",
        "(line 1101,col 9)-(line 1101,col 48)",
        "(line 1102,col 9)-(line 1102,col 56)",
        "(line 1103,col 9)-(line 1103,col 52)",
        "(line 1104,col 9)-(line 1104,col 55)",
        "(line 1105,col 9)-(line 1105,col 55)",
        "(line 1106,col 9)-(line 1106,col 53)",
        "(line 1107,col 9)-(line 1107,col 55)",
        "(line 1108,col 9)-(line 1108,col 50)",
        "(line 1109,col 9)-(line 1109,col 48)",
        "(line 1110,col 9)-(line 1110,col 48)",
        "(line 1111,col 9)-(line 1111,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty()",
      "begin_line": 1114,
      "end_line": 1120,
      "comment": "",
      "child_ranges": [
        "(line 1116,col 9)-(line 1116,col 74)",
        "(line 1117,col 9)-(line 1117,col 72)",
        "(line 1118,col 9)-(line 1118,col 73)",
        "(line 1119,col 9)-(line 1119,col 79)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic()",
      "begin_line": 1122,
      "end_line": 1138,
      "comment": "",
      "child_ranges": [
        "(line 1124,col 9)-(line 1135,col 10)",
        "(line 1136,col 9)-(line 1136,col 53)",
        "(line 1137,col 9)-(line 1137,col 52)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended1()",
      "begin_line": 1143,
      "end_line": 1149,
      "comment": "\n     * Example in the original article but failures in this Java impl:\n     ",
      "child_ranges": []
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2()",
      "begin_line": 1151,
      "end_line": 1157,
      "comment": "",
      "child_ranges": [
        "(line 1153,col 9)-(line 1154,col 10)",
        "(line 1156,col 9)-(line 1156,col 52)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3()",
      "begin_line": 1163,
      "end_line": 1193,
      "comment": "\n     * Used to generate the MATCHES array and test possible matches from the\n     * FIXTURE array.\n     ",
      "child_ranges": [
        "(line 1165,col 9)-(line 1165,col 38)",
        "(line 1166,col 9)-(line 1166,col 59)",
        "(line 1167,col 9)-(line 1167,col 58)",
        "(line 1168,col 9)-(line 1168,col 63)",
        "(line 1169,col 9)-(line 1169,col 75)",
        "(line 1170,col 9)-(line 1170,col 26)",
        "(line 1171,col 9)-(line 1183,col 9)",
        "(line 1184,col 9)-(line 1184,col 29)",
        "(line 1187,col 9)-(line 1192,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES()",
      "begin_line": 1195,
      "end_line": 1207,
      "comment": "",
      "child_ranges": [
        "(line 1197,col 9)-(line 1197,col 38)",
        "(line 1198,col 9)-(line 1206,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual()",
      "begin_line": 1209,
      "end_line": 1213,
      "comment": "",
      "child_ranges": [
        "(line 1211,col 9)-(line 1211,col 43)",
        "(line 1212,col 9)-(line 1212,col 42)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde()",
      "begin_line": 1215,
      "end_line": 1218,
      "comment": "",
      "child_ranges": [
        "(line 1217,col 9)-(line 1217,col 82)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength()",
      "begin_line": 1223,
      "end_line": 1239,
      "comment": "\n     * Test setting maximum length\n     ",
      "child_ranges": [
        "(line 1225,col 9)-(line 1225,col 38)",
        "(line 1227,col 9)-(line 1227,col 70)",
        "(line 1230,col 9)-(line 1230,col 84)",
        "(line 1231,col 9)-(line 1231,col 97)",
        "(line 1232,col 9)-(line 1232,col 96)",
        "(line 1235,col 9)-(line 1235,col 41)",
        "(line 1236,col 9)-(line 1236,col 80)",
        "(line 1237,col 9)-(line 1237,col 94)",
        "(line 1238,col 9)-(line 1238,col 93)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.validateFixture(java.lang.String[][])",
      "begin_line": 1241,
      "end_line": 1250,
      "comment": "",
      "child_ranges": [
        "(line 1242,col 9)-(line 1244,col 9)",
        "(line 1245,col 9)-(line 1249,col 9)"
      ]
    }
  ]
}