{
  "filepath": "/tmp/Chart-14b/tests/org/jfree/chart/plot/junit/XYPlotTests.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "XYPlotTests",
      "is_interface": false,
      "parent_types": [
        "TestCase"
      ],
      "begin_line": 108,
      "end_line": 1040,
      "comment": "\n * Tests for the {@link XYPlot} class.\n "
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.suite()",
      "begin_line": 115,
      "end_line": 117,
      "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
      "child_ranges": [
        "(line 116,col 9)-(line 116,col 48)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.XYPlotTests(java.lang.String)",
      "begin_line": 124,
      "end_line": 126,
      "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
      "child_ranges": [
        "(line 125,col 9)-(line 125,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testEquals()",
      "begin_line": 142,
      "end_line": 390,
      "comment": "\n     * Some checks for the equals() method.\n     ",
      "child_ranges": [
        "(line 144,col 9)-(line 144,col 36)",
        "(line 145,col 9)-(line 145,col 36)",
        "(line 146,col 9)-(line 146,col 40)",
        "(line 149,col 9)-(line 149,col 57)",
        "(line 150,col 9)-(line 150,col 41)",
        "(line 151,col 9)-(line 151,col 57)",
        "(line 152,col 9)-(line 152,col 40)",
        "(line 155,col 9)-(line 155,col 73)",
        "(line 156,col 9)-(line 156,col 41)",
        "(line 157,col 9)-(line 157,col 73)",
        "(line 158,col 9)-(line 158,col 40)",
        "(line 161,col 9)-(line 161,col 59)",
        "(line 162,col 9)-(line 162,col 41)",
        "(line 163,col 9)-(line 163,col 59)",
        "(line 164,col 9)-(line 164,col 40)",
        "(line 167,col 9)-(line 167,col 63)",
        "(line 168,col 9)-(line 168,col 41)",
        "(line 169,col 9)-(line 169,col 63)",
        "(line 170,col 9)-(line 170,col 40)",
        "(line 173,col 9)-(line 173,col 73)",
        "(line 174,col 9)-(line 174,col 41)",
        "(line 175,col 9)-(line 175,col 73)",
        "(line 176,col 9)-(line 176,col 40)",
        "(line 179,col 9)-(line 179,col 67)",
        "(line 180,col 9)-(line 180,col 41)",
        "(line 181,col 9)-(line 181,col 67)",
        "(line 182,col 9)-(line 182,col 40)",
        "(line 185,col 9)-(line 185,col 57)",
        "(line 186,col 9)-(line 186,col 41)",
        "(line 187,col 9)-(line 187,col 57)",
        "(line 188,col 9)-(line 188,col 40)",
        "(line 191,col 9)-(line 191,col 62)",
        "(line 192,col 9)-(line 192,col 41)",
        "(line 193,col 9)-(line 193,col 62)",
        "(line 194,col 9)-(line 194,col 40)",
        "(line 197,col 9)-(line 197,col 71)",
        "(line 198,col 9)-(line 198,col 41)",
        "(line 199,col 9)-(line 199,col 71)",
        "(line 200,col 9)-(line 200,col 40)",
        "(line 203,col 9)-(line 203,col 66)",
        "(line 204,col 9)-(line 204,col 41)",
        "(line 205,col 9)-(line 205,col 66)",
        "(line 206,col 9)-(line 206,col 40)",
        "(line 209,col 9)-(line 209,col 45)",
        "(line 210,col 9)-(line 210,col 41)",
        "(line 211,col 9)-(line 211,col 45)",
        "(line 212,col 9)-(line 212,col 40)",
        "(line 215,col 9)-(line 215,col 44)",
        "(line 216,col 9)-(line 216,col 41)",
        "(line 217,col 9)-(line 217,col 44)",
        "(line 218,col 9)-(line 218,col 40)",
        "(line 221,col 9)-(line 221,col 55)",
        "(line 222,col 9)-(line 222,col 41)",
        "(line 223,col 9)-(line 223,col 55)",
        "(line 224,col 9)-(line 224,col 40)",
        "(line 227,col 9)-(line 227,col 59)",
        "(line 228,col 9)-(line 228,col 41)",
        "(line 229,col 9)-(line 229,col 59)",
        "(line 230,col 9)-(line 230,col 40)",
        "(line 233,col 9)-(line 233,col 47)",
        "(line 234,col 9)-(line 234,col 41)",
        "(line 235,col 9)-(line 235,col 47)",
        "(line 236,col 9)-(line 236,col 40)",
        "(line 239,col 9)-(line 239,col 46)",
        "(line 240,col 9)-(line 240,col 46)",
        "(line 241,col 9)-(line 241,col 41)",
        "(line 242,col 9)-(line 242,col 46)",
        "(line 243,col 9)-(line 243,col 40)",
        "(line 246,col 9)-(line 247,col 40)",
        "(line 248,col 9)-(line 248,col 41)",
        "(line 249,col 9)-(line 250,col 40)",
        "(line 251,col 9)-(line 251,col 40)",
        "(line 254,col 9)-(line 254,col 46)",
        "(line 255,col 9)-(line 255,col 41)",
        "(line 256,col 9)-(line 256,col 46)",
        "(line 257,col 9)-(line 257,col 40)",
        "(line 260,col 9)-(line 260,col 45)",
        "(line 261,col 9)-(line 261,col 41)",
        "(line 262,col 9)-(line 262,col 45)",
        "(line 263,col 9)-(line 263,col 40)",
        "(line 266,col 9)-(line 267,col 40)",
        "(line 268,col 9)-(line 268,col 41)",
        "(line 269,col 9)-(line 270,col 40)",
        "(line 271,col 9)-(line 271,col 40)",
        "(line 274,col 9)-(line 274,col 48)",
        "(line 275,col 9)-(line 275,col 41)",
        "(line 276,col 9)-(line 276,col 48)",
        "(line 277,col 9)-(line 277,col 40)",
        "(line 280,col 9)-(line 280,col 49)",
        "(line 281,col 9)-(line 281,col 41)",
        "(line 282,col 9)-(line 282,col 49)",
        "(line 283,col 9)-(line 283,col 40)",
        "(line 286,col 9)-(line 287,col 40)",
        "(line 288,col 9)-(line 288,col 41)",
        "(line 289,col 9)-(line 290,col 40)",
        "(line 291,col 9)-(line 291,col 40)",
        "(line 294,col 9)-(line 294,col 45)",
        "(line 295,col 9)-(line 295,col 41)",
        "(line 296,col 9)-(line 296,col 45)",
        "(line 297,col 9)-(line 297,col 40)",
        "(line 300,col 9)-(line 300,col 44)",
        "(line 301,col 9)-(line 301,col 41)",
        "(line 302,col 9)-(line 302,col 44)",
        "(line 303,col 9)-(line 303,col 40)",
        "(line 306,col 9)-(line 306,col 46)",
        "(line 307,col 9)-(line 307,col 41)",
        "(line 308,col 9)-(line 308,col 46)",
        "(line 309,col 9)-(line 309,col 40)",
        "(line 312,col 9)-(line 313,col 40)",
        "(line 314,col 9)-(line 314,col 41)",
        "(line 315,col 9)-(line 316,col 40)",
        "(line 317,col 9)-(line 317,col 40)",
        "(line 320,col 9)-(line 320,col 51)",
        "(line 321,col 9)-(line 321,col 41)",
        "(line 322,col 9)-(line 322,col 51)",
        "(line 323,col 9)-(line 323,col 40)",
        "(line 326,col 9)-(line 326,col 51)",
        "(line 327,col 9)-(line 327,col 41)",
        "(line 328,col 9)-(line 328,col 51)",
        "(line 329,col 9)-(line 329,col 40)",
        "(line 332,col 9)-(line 332,col 72)",
        "(line 333,col 9)-(line 333,col 41)",
        "(line 334,col 9)-(line 334,col 72)",
        "(line 335,col 9)-(line 335,col 40)",
        "(line 337,col 9)-(line 337,col 73)",
        "(line 338,col 9)-(line 338,col 41)",
        "(line 339,col 9)-(line 339,col 73)",
        "(line 340,col 9)-(line 340,col 40)",
        "(line 343,col 9)-(line 343,col 27)",
        "(line 344,col 9)-(line 344,col 41)",
        "(line 345,col 9)-(line 345,col 27)",
        "(line 346,col 9)-(line 346,col 40)",
        "(line 349,col 9)-(line 349,col 64)",
        "(line 350,col 9)-(line 350,col 41)",
        "(line 351,col 9)-(line 351,col 64)",
        "(line 352,col 9)-(line 352,col 40)",
        "(line 355,col 9)-(line 356,col 41)",
        "(line 357,col 9)-(line 357,col 41)",
        "(line 358,col 9)-(line 359,col 41)",
        "(line 360,col 9)-(line 360,col 40)",
        "(line 361,col 9)-(line 362,col 41)",
        "(line 363,col 9)-(line 363,col 41)",
        "(line 364,col 9)-(line 365,col 41)",
        "(line 366,col 9)-(line 366,col 40)",
        "(line 367,col 9)-(line 368,col 41)",
        "(line 369,col 9)-(line 369,col 41)",
        "(line 370,col 9)-(line 371,col 41)",
        "(line 372,col 9)-(line 372,col 40)",
        "(line 373,col 9)-(line 374,col 41)",
        "(line 375,col 9)-(line 375,col 41)",
        "(line 376,col 9)-(line 377,col 41)",
        "(line 378,col 9)-(line 378,col 40)",
        "(line 380,col 9)-(line 380,col 48)",
        "(line 381,col 9)-(line 381,col 41)",
        "(line 382,col 9)-(line 382,col 48)",
        "(line 383,col 9)-(line 383,col 40)",
        "(line 385,col 9)-(line 385,col 48)",
        "(line 386,col 9)-(line 386,col 41)",
        "(line 387,col 9)-(line 387,col 48)",
        "(line 388,col 9)-(line 388,col 40)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning()",
      "begin_line": 395,
      "end_line": 407,
      "comment": "\n     * Confirm that basic cloning works.\n     ",
      "child_ranges": [
        "(line 396,col 9)-(line 396,col 33)",
        "(line 397,col 9)-(line 397,col 25)",
        "(line 398,col 9)-(line 403,col 9)",
        "(line 404,col 9)-(line 404,col 29)",
        "(line 405,col 9)-(line 405,col 51)",
        "(line 406,col 9)-(line 406,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning2()",
      "begin_line": 412,
      "end_line": 427,
      "comment": "\n     * Tests cloning for a more complex plot.\n     ",
      "child_ranges": [
        "(line 413,col 9)-(line 414,col 76)",
        "(line 415,col 9)-(line 415,col 59)",
        "(line 416,col 9)-(line 416,col 47)",
        "(line 417,col 9)-(line 417,col 25)",
        "(line 418,col 9)-(line 423,col 9)",
        "(line 424,col 9)-(line 424,col 29)",
        "(line 425,col 9)-(line 425,col 51)",
        "(line 426,col 9)-(line 426,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantOrigin()",
      "begin_line": 432,
      "end_line": 447,
      "comment": "\n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
      "child_ranges": [
        "(line 433,col 9)-(line 433,col 33)",
        "(line 434,col 9)-(line 434,col 49)",
        "(line 435,col 9)-(line 435,col 32)",
        "(line 436,col 9)-(line 436,col 25)",
        "(line 437,col 9)-(line 442,col 9)",
        "(line 443,col 9)-(line 443,col 29)",
        "(line 444,col 9)-(line 444,col 51)",
        "(line 445,col 9)-(line 445,col 34)",
        "(line 446,col 9)-(line 446,col 48)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantPaint()",
      "begin_line": 452,
      "end_line": 472,
      "comment": "\n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
      "child_ranges": [
        "(line 453,col 9)-(line 453,col 33)",
        "(line 454,col 9)-(line 455,col 41)",
        "(line 456,col 9)-(line 456,col 25)",
        "(line 457,col 9)-(line 462,col 9)",
        "(line 463,col 9)-(line 463,col 29)",
        "(line 464,col 9)-(line 464,col 51)",
        "(line 465,col 9)-(line 465,col 34)",
        "(line 468,col 9)-(line 468,col 42)",
        "(line 469,col 9)-(line 469,col 35)",
        "(line 470,col 9)-(line 470,col 42)",
        "(line 471,col 9)-(line 471,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloneIndependence()",
      "begin_line": 477,
      "end_line": 545,
      "comment": "\n     * Tests the independence of the clones.\n     ",
      "child_ranges": [
        "(line 478,col 9)-(line 479,col 76)",
        "(line 480,col 9)-(line 480,col 61)",
        "(line 481,col 9)-(line 481,col 65)",
        "(line 482,col 9)-(line 482,col 59)",
        "(line 483,col 9)-(line 483,col 62)",
        "(line 484,col 9)-(line 484,col 47)",
        "(line 485,col 9)-(line 485,col 25)",
        "(line 486,col 9)-(line 492,col 9)",
        "(line 493,col 9)-(line 493,col 34)",
        "(line 495,col 9)-(line 495,col 45)",
        "(line 496,col 9)-(line 496,col 35)",
        "(line 497,col 9)-(line 497,col 45)",
        "(line 498,col 9)-(line 498,col 34)",
        "(line 500,col 9)-(line 500,col 43)",
        "(line 501,col 9)-(line 501,col 35)",
        "(line 502,col 9)-(line 502,col 43)",
        "(line 503,col 9)-(line 503,col 34)",
        "(line 505,col 9)-(line 505,col 63)",
        "(line 506,col 9)-(line 506,col 35)",
        "(line 507,col 9)-(line 507,col 63)",
        "(line 508,col 9)-(line 508,col 34)",
        "(line 510,col 9)-(line 510,col 40)",
        "(line 511,col 9)-(line 511,col 35)",
        "(line 512,col 9)-(line 512,col 40)",
        "(line 513,col 9)-(line 513,col 34)",
        "(line 515,col 9)-(line 515,col 44)",
        "(line 516,col 9)-(line 516,col 35)",
        "(line 517,col 9)-(line 517,col 44)",
        "(line 518,col 9)-(line 518,col 34)",
        "(line 520,col 9)-(line 520,col 42)",
        "(line 521,col 9)-(line 521,col 35)",
        "(line 522,col 9)-(line 522,col 42)",
        "(line 523,col 9)-(line 523,col 34)",
        "(line 525,col 9)-(line 525,col 61)",
        "(line 526,col 9)-(line 526,col 35)",
        "(line 527,col 9)-(line 527,col 61)",
        "(line 528,col 9)-(line 528,col 34)",
        "(line 530,col 9)-(line 530,col 39)",
        "(line 531,col 9)-(line 531,col 35)",
        "(line 532,col 9)-(line 532,col 39)",
        "(line 533,col 9)-(line 533,col 34)",
        "(line 535,col 9)-(line 535,col 57)",
        "(line 536,col 9)-(line 536,col 35)",
        "(line 537,col 9)-(line 537,col 57)",
        "(line 538,col 9)-(line 538,col 34)",
        "(line 540,col 9)-(line 540,col 57)",
        "(line 541,col 9)-(line 541,col 35)",
        "(line 542,col 9)-(line 542,col 57)",
        "(line 543,col 9)-(line 543,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetNullRenderer()",
      "begin_line": 551,
      "end_line": 562,
      "comment": "\n     * Setting a null renderer should be allowed, but is generating a null \n     * pointer exception in 0.9.7.\n     ",
      "child_ranges": [
        "(line 552,col 9)-(line 552,col 31)",
        "(line 553,col 9)-(line 560,col 9)",
        "(line 561,col 9)-(line 561,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization1()",
      "begin_line": 567,
      "end_line": 593,
      "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
      "child_ranges": [
        "(line 569,col 9)-(line 569,col 50)",
        "(line 570,col 9)-(line 570,col 57)",
        "(line 571,col 9)-(line 571,col 55)",
        "(line 572,col 9)-(line 572,col 71)",
        "(line 573,col 9)-(line 573,col 70)",
        "(line 574,col 9)-(line 574,col 25)",
        "(line 576,col 9)-(line 590,col 9)",
        "(line 591,col 9)-(line 591,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization2()",
      "begin_line": 599,
      "end_line": 624,
      "comment": "\n     * Serialize an instance, restore it, and check for equality.  This test \n     * uses a {@link DateAxis} and a {@link StandardXYToolTipGenerator}.\n     ",
      "child_ranges": [
        "(line 601,col 9)-(line 601,col 51)",
        "(line 602,col 9)-(line 602,col 59)",
        "(line 603,col 9)-(line 604,col 68)",
        "(line 605,col 9)-(line 605,col 77)",
        "(line 606,col 9)-(line 606,col 25)",
        "(line 608,col 9)-(line 621,col 9)",
        "(line 622,col 9)-(line 622,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization3()",
      "begin_line": 636,
      "end_line": 678,
      "comment": "\n     * Problem to reproduce a bug in serialization.  The bug (first reported \n     * against the {@link org.jfree.chart.plot.CategoryPlot} class) is a null \n     * pointer exception that occurs when drawing a plot after deserialization.\n     * It is caused by four temporary storage structures (axesAtTop, \n     * axesAtBottom, axesAtLeft and axesAtRight - all initialized as empty \n     * lists in the constructor) not being initialized by the readObject() \n     * method following deserialization.  This test has been written to \n     * reproduce the bug (now fixed).\n     ",
      "child_ranges": [
        "(line 638,col 9)-(line 638,col 62)",
        "(line 639,col 9)-(line 648,col 10)",
        "(line 649,col 9)-(line 649,col 33)",
        "(line 652,col 9)-(line 666,col 9)",
        "(line 668,col 9)-(line 668,col 36)",
        "(line 669,col 9)-(line 669,col 30)",
        "(line 670,col 9)-(line 676,col 9)",
        "(line 677,col 9)-(line 677,col 27)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization4()",
      "begin_line": 684,
      "end_line": 731,
      "comment": "\n     * A test to reproduce a bug in serialization: the domain and/or range\n     * markers for a plot are not being serialized.\n     ",
      "child_ranges": [
        "(line 686,col 9)-(line 686,col 62)",
        "(line 687,col 9)-(line 696,col 10)",
        "(line 697,col 9)-(line 697,col 47)",
        "(line 698,col 9)-(line 698,col 69)",
        "(line 699,col 9)-(line 699,col 77)",
        "(line 700,col 9)-(line 700,col 68)",
        "(line 701,col 9)-(line 701,col 76)",
        "(line 702,col 9)-(line 702,col 33)",
        "(line 705,col 9)-(line 719,col 9)",
        "(line 721,col 9)-(line 721,col 36)",
        "(line 722,col 9)-(line 722,col 30)",
        "(line 723,col 9)-(line 729,col 9)",
        "(line 730,col 9)-(line 730,col 27)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization5()",
      "begin_line": 738,
      "end_line": 789,
      "comment": "\n     * Tests a bug where the plot is no longer registered as a listener\n     * with the dataset(s) and axes after deserialization.  See patch 1209475\n     * at SourceForge.\n     ",
      "child_ranges": [
        "(line 739,col 9)-(line 739,col 63)",
        "(line 740,col 9)-(line 740,col 60)",
        "(line 741,col 9)-(line 741,col 58)",
        "(line 742,col 9)-(line 742,col 72)",
        "(line 743,col 9)-(line 743,col 77)",
        "(line 744,col 9)-(line 744,col 60)",
        "(line 745,col 9)-(line 745,col 58)",
        "(line 746,col 9)-(line 746,col 72)",
        "(line 747,col 9)-(line 747,col 63)",
        "(line 748,col 9)-(line 748,col 35)",
        "(line 749,col 9)-(line 749,col 41)",
        "(line 750,col 9)-(line 750,col 39)",
        "(line 751,col 9)-(line 751,col 37)",
        "(line 752,col 9)-(line 752,col 25)",
        "(line 753,col 9)-(line 766,col 9)",
        "(line 767,col 9)-(line 767,col 29)",
        "(line 771,col 9)-(line 771,col 66)",
        "(line 772,col 9)-(line 772,col 64)",
        "(line 773,col 9)-(line 773,col 76)",
        "(line 774,col 9)-(line 775,col 57)",
        "(line 776,col 9)-(line 776,col 66)",
        "(line 777,col 9)-(line 777,col 64)",
        "(line 778,col 9)-(line 778,col 76)",
        "(line 779,col 9)-(line 780,col 57)",
        "(line 781,col 9)-(line 781,col 45)",
        "(line 782,col 9)-(line 782,col 48)",
        "(line 783,col 9)-(line 783,col 47)",
        "(line 784,col 9)-(line 784,col 46)",
        "(line 785,col 9)-(line 785,col 45)",
        "(line 786,col 9)-(line 786,col 48)",
        "(line 787,col 9)-(line 787,col 47)",
        "(line 788,col 9)-(line 788,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetRendererForDataset()",
      "begin_line": 794,
      "end_line": 813,
      "comment": "\n     * Some checks for the getRendererForDataset() method.\n     ",
      "child_ranges": [
        "(line 795,col 9)-(line 795,col 48)",
        "(line 796,col 9)-(line 796,col 48)",
        "(line 797,col 9)-(line 797,col 48)",
        "(line 798,col 9)-(line 798,col 48)",
        "(line 799,col 9)-(line 799,col 57)",
        "(line 800,col 9)-(line 800,col 57)",
        "(line 801,col 9)-(line 801,col 35)",
        "(line 802,col 9)-(line 802,col 31)",
        "(line 803,col 9)-(line 803,col 31)",
        "(line 804,col 9)-(line 804,col 31)",
        "(line 805,col 9)-(line 805,col 32)",
        "(line 807,col 9)-(line 807,col 32)",
        "(line 808,col 9)-(line 808,col 57)",
        "(line 809,col 9)-(line 809,col 57)",
        "(line 810,col 9)-(line 810,col 57)",
        "(line 811,col 9)-(line 811,col 59)",
        "(line 812,col 9)-(line 812,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetLegendItems()",
      "begin_line": 818,
      "end_line": 830,
      "comment": "\n     * Some checks for the getLegendItems() method.\n     ",
      "child_ranges": [
        "(line 821,col 9)-(line 821,col 40)",
        "(line 822,col 9)-(line 822,col 40)",
        "(line 823,col 9)-(line 823,col 57)",
        "(line 824,col 9)-(line 824,col 35)",
        "(line 825,col 9)-(line 825,col 31)",
        "(line 826,col 9)-(line 826,col 31)",
        "(line 827,col 9)-(line 827,col 32)",
        "(line 828,col 9)-(line 828,col 59)",
        "(line 829,col 9)-(line 829,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset1()",
      "begin_line": 837,
      "end_line": 860,
      "comment": "\n     * Creates a sample dataset.\n     *\n     * @return Series 1.\n     ",
      "child_ranges": [
        "(line 840,col 9)-(line 840,col 67)",
        "(line 841,col 9)-(line 841,col 69)",
        "(line 842,col 9)-(line 842,col 69)",
        "(line 843,col 9)-(line 843,col 69)",
        "(line 844,col 9)-(line 844,col 69)",
        "(line 845,col 9)-(line 845,col 69)",
        "(line 846,col 9)-(line 846,col 69)",
        "(line 847,col 9)-(line 847,col 69)",
        "(line 848,col 9)-(line 848,col 69)",
        "(line 849,col 9)-(line 849,col 69)",
        "(line 850,col 9)-(line 850,col 70)",
        "(line 851,col 9)-(line 851,col 70)",
        "(line 852,col 9)-(line 852,col 70)",
        "(line 853,col 9)-(line 853,col 70)",
        "(line 854,col 9)-(line 854,col 70)",
        "(line 855,col 9)-(line 855,col 70)",
        "(line 857,col 9)-(line 857,col 76)",
        "(line 858,col 9)-(line 858,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset2()",
      "begin_line": 867,
      "end_line": 873,
      "comment": "\n     * Creates a sample dataset.\n     *\n     * @return A sample dataset.\n     ",
      "child_ranges": [
        "(line 869,col 9)-(line 869,col 51)",
        "(line 870,col 9)-(line 870,col 71)",
        "(line 871,col 9)-(line 871,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetRenderer()",
      "begin_line": 879,
      "end_line": 889,
      "comment": "\n     * A test for a bug where setting the renderer doesn\u0027t register the plot\n     * as a RendererChangeListener.\n     ",
      "child_ranges": [
        "(line 880,col 9)-(line 880,col 35)",
        "(line 881,col 9)-(line 881,col 63)",
        "(line 882,col 9)-(line 882,col 35)",
        "(line 885,col 9)-(line 885,col 67)",
        "(line 886,col 9)-(line 886,col 41)",
        "(line 887,col 9)-(line 887,col 48)",
        "(line 888,col 9)-(line 888,col 48)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveAnnotation()",
      "begin_line": 894,
      "end_line": 912,
      "comment": "\n     * Some checks for the removeAnnotation() method.\n     ",
      "child_ranges": [
        "(line 895,col 9)-(line 895,col 35)",
        "(line 896,col 9)-(line 896,col 66)",
        "(line 897,col 9)-(line 897,col 66)",
        "(line 898,col 9)-(line 898,col 66)",
        "(line 899,col 9)-(line 899,col 31)",
        "(line 900,col 9)-(line 900,col 31)",
        "(line 901,col 9)-(line 901,col 31)",
        "(line 902,col 9)-(line 902,col 34)",
        "(line 903,col 9)-(line 903,col 77)",
        "(line 904,col 9)-(line 904,col 28)",
        "(line 908,col 9)-(line 908,col 34)",
        "(line 909,col 9)-(line 909,col 34)",
        "(line 910,col 9)-(line 910,col 60)",
        "(line 911,col 9)-(line 911,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddDomainMarker()",
      "begin_line": 917,
      "end_line": 927,
      "comment": "\n     * Some tests for the addDomainMarker() method(s).\n     ",
      "child_ranges": [
        "(line 918,col 9)-(line 918,col 35)",
        "(line 919,col 9)-(line 919,col 40)",
        "(line 920,col 9)-(line 920,col 32)",
        "(line 921,col 9)-(line 922,col 45)",
        "(line 923,col 9)-(line 923,col 45)",
        "(line 924,col 9)-(line 924,col 34)",
        "(line 925,col 9)-(line 925,col 78)",
        "(line 926,col 9)-(line 926,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddRangeMarker()",
      "begin_line": 932,
      "end_line": 942,
      "comment": "\n     * Some tests for the addRangeMarker() method(s).\n     ",
      "child_ranges": [
        "(line 933,col 9)-(line 933,col 35)",
        "(line 934,col 9)-(line 934,col 40)",
        "(line 935,col 9)-(line 935,col 31)",
        "(line 936,col 9)-(line 937,col 45)",
        "(line 938,col 9)-(line 938,col 45)",
        "(line 939,col 9)-(line 939,col 33)",
        "(line 940,col 9)-(line 940,col 78)",
        "(line 941,col 9)-(line 941,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.test1654215()",
      "begin_line": 948,
      "end_line": 968,
      "comment": "\n     * A test for bug 1654215 (where a renderer is added to the plot without\n     * a corresponding dataset and it throws an exception at drawing time).\n     ",
      "child_ranges": [
        "(line 949,col 9)-(line 949,col 58)",
        "(line 950,col 9)-(line 951,col 71)",
        "(line 952,col 9)-(line 952,col 47)",
        "(line 953,col 9)-(line 953,col 58)",
        "(line 954,col 9)-(line 954,col 32)",
        "(line 955,col 9)-(line 966,col 9)",
        "(line 967,col 9)-(line 967,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawRangeGridlines()",
      "begin_line": 974,
      "end_line": 994,
      "comment": "\n     * A test for drawing range grid lines when there is no primary renderer.\n     * In 1.0.4, this is throwing a NullPointerException.\n     ",
      "child_ranges": [
        "(line 975,col 9)-(line 975,col 58)",
        "(line 976,col 9)-(line 977,col 71)",
        "(line 978,col 9)-(line 978,col 47)",
        "(line 979,col 9)-(line 979,col 31)",
        "(line 980,col 9)-(line 980,col 32)",
        "(line 981,col 9)-(line 992,col 9)",
        "(line 993,col 9)-(line 993,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawSeriesWithZeroItems()",
      "begin_line": 1000,
      "end_line": 1020,
      "comment": "\n     * A test for drawing a plot where a series has zero items.  With\n     * JFreeChart 1.0.5+cvs this was throwing an exception at one point.\n     ",
      "child_ranges": [
        "(line 1001,col 9)-(line 1001,col 58)",
        "(line 1002,col 9)-(line 1002,col 79)",
        "(line 1003,col 9)-(line 1003,col 63)",
        "(line 1004,col 9)-(line 1005,col 71)",
        "(line 1006,col 9)-(line 1006,col 32)",
        "(line 1007,col 9)-(line 1018,col 9)",
        "(line 1019,col 9)-(line 1019,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveDomainMarker()",
      "begin_line": 1026,
      "end_line": 1029,
      "comment": "\n     * Check that removing a marker that isn\u0027t assigned to the plot returns \n     * false.\n     ",
      "child_ranges": [
        "(line 1027,col 6)-(line 1027,col 32)",
        "(line 1028,col 6)-(line 1028,col 64)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveRangeMarker()",
      "begin_line": 1035,
      "end_line": 1038,
      "comment": "\n     * Check that removing a marker that isn\u0027t assigned to the plot returns \n     * false.\n     ",
      "child_ranges": [
        "(line 1036,col 6)-(line 1036,col 32)",
        "(line 1037,col 6)-(line 1037,col 63)"
      ]
    }
  ]
}