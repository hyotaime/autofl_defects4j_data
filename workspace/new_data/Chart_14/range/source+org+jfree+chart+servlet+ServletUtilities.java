{
  "filepath": "/tmp/Chart-14b/source/org/jfree/chart/servlet/ServletUtilities.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "ServletUtilities",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 81,
      "end_line": 441,
      "comment": "\r\n * Utility class used for servlet related JFreeChart operations.\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "tempFilePrefix"
      ],
      "begin_line": 84,
      "end_line": 84,
      "comment": " The filename prefix. "
    },
    {
      "type": "field",
      "varNames": [
        "tempOneTimeFilePrefix"
      ],
      "begin_line": 87,
      "end_line": 87,
      "comment": " A prefix for \"one time\" charts. "
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.servlet.ServletUtilities.getTempFilePrefix()",
      "begin_line": 94,
      "end_line": 96,
      "comment": "\r\n     * Returns the prefix for the temporary file names generated by this class.\r\n     * \r\n     * @return The prefix (never \u003ccode\u003enull\u003c/code\u003e).\r\n     ",
      "child_ranges": [
        "(line 95,col 9)-(line 95,col 47)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.servlet.ServletUtilities.setTempFilePrefix(java.lang.String)",
      "begin_line": 103,
      "end_line": 108,
      "comment": "\r\n     * Sets the prefix for the temporary file names generated by this class.\r\n     * \r\n     * @param prefix  the prefix (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     ",
      "child_ranges": [
        "(line 104,col 9)-(line 106,col 9)",
        "(line 107,col 9)-(line 107,col 49)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.servlet.ServletUtilities.getTempOneTimeFilePrefix()",
      "begin_line": 116,
      "end_line": 118,
      "comment": "\r\n     * Returns the prefix for \"one time\" temporary file names generated by\r\n     * this class.\r\n     * \r\n     * @return The prefix.\r\n     ",
      "child_ranges": [
        "(line 117,col 9)-(line 117,col 54)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.servlet.ServletUtilities.setTempOneTimeFilePrefix(java.lang.String)",
      "begin_line": 126,
      "end_line": 131,
      "comment": "\r\n     * Sets the prefix for the \"one time\" temporary file names generated by \r\n     * this class.\r\n     * \r\n     * @param prefix  the prefix (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     ",
      "child_ranges": [
        "(line 127,col 9)-(line 129,col 9)",
        "(line 130,col 9)-(line 130,col 56)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.servlet.ServletUtilities.saveChartAsPNG(org.jfree.chart.JFreeChart, int, int, javax.servlet.http.HttpSession)",
      "begin_line": 148,
      "end_line": 154,
      "comment": "\r\n     * Saves the chart as a PNG format file in the temporary directory.\r\n     *\r\n     * @param chart  the JFreeChart to be saved.\r\n     * @param width  the width of the chart.\r\n     * @param height  the height of the chart.\r\n     * @param session  the HttpSession of the client (if \u003ccode\u003enull\u003c/code\u003e, the\r\n     *                 temporary file is marked as \"one-time\" and deleted by \r\n     *                 the {@link DisplayChart} servlet right after it is\r\n     *                 streamed to the client).\r\n     *\r\n     * @return The filename of the chart saved in the temporary directory.\r\n     *\r\n     * @throws IOException if there is a problem saving the file.\r\n     ",
      "child_ranges": [
        "(line 151,col 9)-(line 152,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.servlet.ServletUtilities.saveChartAsPNG(org.jfree.chart.JFreeChart, int, int, org.jfree.chart.ChartRenderingInfo, javax.servlet.http.HttpSession)",
      "begin_line": 175,
      "end_line": 194,
      "comment": "\r\n     * Saves the chart as a PNG format file in the temporary directory and\r\n     * populates the {@link ChartRenderingInfo} object which can be used to \r\n     * generate an HTML image map.\r\n     *\r\n     * @param chart  the chart to be saved (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     * @param width  the width of the chart.\r\n     * @param height  the height of the chart.\r\n     * @param info  the ChartRenderingInfo object to be populated \r\n     *              (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     * @param session  the HttpSession of the client (if \u003ccode\u003enull\u003c/code\u003e, the\r\n     *                 temporary file is marked as \"one-time\" and deleted by \r\n     *                 the {@link DisplayChart} servlet right after it is\r\n     *                 streamed to the client).\r\n     *\r\n     * @return The filename of the chart saved in the temporary directory.\r\n     *\r\n     * @throws IOException if there is a problem saving the file.\r\n     ",
      "child_ranges": [
        "(line 178,col 9)-(line 180,col 9)",
        "(line 181,col 9)-(line 181,col 41)",
        "(line 182,col 9)-(line 182,col 56)",
        "(line 183,col 9)-(line 185,col 9)",
        "(line 186,col 9)-(line 187,col 64)",
        "(line 188,col 9)-(line 188,col 76)",
        "(line 189,col 9)-(line 191,col 9)",
        "(line 192,col 9)-(line 192,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.servlet.ServletUtilities.saveChartAsJPEG(org.jfree.chart.JFreeChart, int, int, javax.servlet.http.HttpSession)",
      "begin_line": 216,
      "end_line": 223,
      "comment": "\r\n     * Saves the chart as a JPEG format file in the temporary directory.\r\n     * \u003cp\u003e\r\n     * SPECIAL NOTE: Please avoid using JPEG as an image format for charts,\r\n     * it is a \"lossy\" format that introduces visible distortions in the\r\n     * resulting image - use PNG instead.  In addition, note that JPEG output\r\n     * is supported by JFreeChart only for JRE 1.4.2 or later.\r\n     * \r\n     * @param chart  the JFreeChart to be saved.\r\n     * @param width  the width of the chart.\r\n     * @param height  the height of the chart.\r\n     * @param session  the HttpSession of the client (if \u003ccode\u003enull\u003c/code\u003e, the\r\n     *                 temporary file is marked as \"one-time\" and deleted by \r\n     *                 the {@link DisplayChart} servlet right after it is\r\n     *                 streamed to the client).\r\n     *\r\n     * @return The filename of the chart saved in the temporary directory.\r\n     *\r\n     * @throws IOException if there is a problem saving the file.\r\n     ",
      "child_ranges": [
        "(line 220,col 9)-(line 221,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.servlet.ServletUtilities.saveChartAsJPEG(org.jfree.chart.JFreeChart, int, int, org.jfree.chart.ChartRenderingInfo, javax.servlet.http.HttpSession)",
      "begin_line": 248,
      "end_line": 269,
      "comment": "\r\n     * Saves the chart as a JPEG format file in the temporary directory and\r\n     * populates the \u003ccode\u003eChartRenderingInfo\u003c/code\u003e object which can be used \r\n     * to generate an HTML image map.\r\n     * \u003cp\u003e\r\n     * SPECIAL NOTE: Please avoid using JPEG as an image format for charts,\r\n     * it is a \"lossy\" format that introduces visible distortions in the\r\n     * resulting image - use PNG instead.  In addition, note that JPEG output\r\n     * is supported by JFreeChart only for JRE 1.4.2 or later.\r\n     *\r\n     * @param chart  the chart to be saved (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     * @param width  the width of the chart\r\n     * @param height  the height of the chart\r\n     * @param info  the ChartRenderingInfo object to be populated\r\n     * @param session  the HttpSession of the client (if \u003ccode\u003enull\u003c/code\u003e, the\r\n     *                 temporary file is marked as \"one-time\" and deleted by \r\n     *                 the {@link DisplayChart} servlet right after it is\r\n     *                 streamed to the client).\r\n     *\r\n     * @return The filename of the chart saved in the temporary directory\r\n     *\r\n     * @throws IOException if there is a problem saving the file.\r\n     ",
      "child_ranges": [
        "(line 252,col 9)-(line 254,col 9)",
        "(line 256,col 9)-(line 256,col 41)",
        "(line 257,col 9)-(line 257,col 56)",
        "(line 258,col 9)-(line 260,col 9)",
        "(line 261,col 9)-(line 262,col 64)",
        "(line 263,col 9)-(line 263,col 77)",
        "(line 264,col 9)-(line 266,col 9)",
        "(line 267,col 9)-(line 267,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.servlet.ServletUtilities.createTempDir()",
      "begin_line": 280,
      "end_line": 292,
      "comment": "\r\n     * Creates the temporary directory if it does not exist.  Throws a \r\n     * \u003ccode\u003eRuntimeException\u003c/code\u003e if the temporary directory is \r\n     * \u003ccode\u003enull\u003c/code\u003e.  Uses the system property \u003ccode\u003ejava.io.tmpdir\u003c/code\u003e \r\n     * as the temporary directory.  This sounds like a strange thing to do but \r\n     * my temporary directory was not created on my default Tomcat 4.0.3 \r\n     * installation.  Could save some questions on the forum if it is created \r\n     * when not present.\r\n     ",
      "child_ranges": [
        "(line 281,col 9)-(line 281,col 66)",
        "(line 282,col 9)-(line 285,col 9)",
        "(line 288,col 9)-(line 288,col 45)",
        "(line 289,col 9)-(line 291,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.servlet.ServletUtilities.registerChartForDeletion(java.io.File, javax.servlet.http.HttpSession)",
      "begin_line": 302,
      "end_line": 318,
      "comment": "\r\n     * Adds a {@link ChartDeleter} object to the session object with the name \r\n     * \u003ccode\u003eJFreeChart_Deleter\u003c/code\u003e if there is not already one bound to the \r\n     * session and adds the filename to the list of charts to be deleted.\r\n     *\r\n     * @param tempFile  the file to be deleted.\r\n     * @param session  the HTTP session of the client.\r\n     ",
      "child_ranges": [
        "(line 306,col 9)-(line 317,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.servlet.ServletUtilities.sendTempFile(java.lang.String, javax.servlet.http.HttpServletResponse)",
      "begin_line": 329,
      "end_line": 334,
      "comment": "\r\n     * Binary streams the specified file in the temporary directory to the\r\n     * HTTP response in 1KB chunks.\r\n     * \r\n     * @param filename  the name of the file in the temporary directory.\r\n     * @param response  the HTTP response object.\r\n     * \r\n     * @throws IOException  if there is an I/O problem.\r\n     ",
      "child_ranges": [
        "(line 332,col 9)-(line 332,col 77)",
        "(line 333,col 9)-(line 333,col 54)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.servlet.ServletUtilities.sendTempFile(java.io.File, javax.servlet.http.HttpServletResponse)",
      "begin_line": 344,
      "end_line": 360,
      "comment": "\r\n     * Binary streams the specified file to the HTTP response in 1KB chunks.\r\n     *\r\n     * @param file  the file to be streamed.\r\n     * @param response  the HTTP response object.\r\n     *\r\n     * @throws IOException if there is an I/O problem.\r\n     ",
      "child_ranges": [
        "(line 347,col 9)-(line 347,col 31)",
        "(line 348,col 9)-(line 348,col 41)",
        "(line 349,col 9)-(line 358,col 9)",
        "(line 359,col 9)-(line 359,col 64)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.servlet.ServletUtilities.sendTempFile(java.io.File, javax.servlet.http.HttpServletResponse, java.lang.String)",
      "begin_line": 371,
      "end_line": 410,
      "comment": "\r\n     * Binary streams the specified file to the HTTP response in 1KB chunks.\r\n     *\r\n     * @param file  the file to be streamed.\r\n     * @param response  the HTTP response object.\r\n     * @param mimeType  the mime type of the file, null allowed.\r\n     *\r\n     * @throws IOException if there is an I/O problem.\r\n     ",
      "child_ranges": [
        "(line 374,col 9)-(line 408,col 9)",
        "(line 409,col 9)-(line 409,col 15)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.servlet.ServletUtilities.searchReplace(java.lang.String, java.lang.String, java.lang.String)",
      "begin_line": 422,
      "end_line": 439,
      "comment": "\r\n     * Perform a search/replace operation on a String\r\n     * There are String methods to do this since (JDK 1.4)\r\n     *\r\n     * @param inputString  the String to have the search/replace operation.\r\n     * @param searchString  the search String.\r\n     * @param replaceString  the replace String.\r\n     *\r\n     * @return The String with the replacements made.\r\n     ",
      "child_ranges": [
        "(line 426,col 9)-(line 426,col 50)",
        "(line 427,col 9)-(line 429,col 9)",
        "(line 431,col 9)-(line 431,col 22)",
        "(line 432,col 9)-(line 432,col 57)",
        "(line 433,col 9)-(line 436,col 9)",
        "(line 438,col 9)-(line 438,col 17)"
      ]
    }
  ]
}