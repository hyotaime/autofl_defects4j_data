[
    {
        "class_name": "org.jfree.chart.LegendItemCollection",
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "signature": "org.jfree.chart.LegendItemCollection.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1365215565589815953L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.LegendItemCollection",
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "signature": "org.jfree.chart.LegendItemCollection.items",
        "snippet": "    private List items;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Storage for the legend items. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6046366297214274674L;",
        "begin_line": 206,
        "end_line": 206,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.DEFAULT_BUFFER_USED",
        "snippet": "    public static final boolean DEFAULT_BUFFER_USED = false;",
        "begin_line": 209,
        "end_line": 209,
        "comment": " Default setting for buffer usage. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.DEFAULT_WIDTH",
        "snippet": "    public static final int DEFAULT_WIDTH = 680;",
        "begin_line": 212,
        "end_line": 212,
        "comment": " The default panel width. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.DEFAULT_HEIGHT",
        "snippet": "    public static final int DEFAULT_HEIGHT = 420;",
        "begin_line": 215,
        "end_line": 215,
        "comment": " The default panel height. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH",
        "snippet": "    public static final int DEFAULT_MINIMUM_DRAW_WIDTH = 300;",
        "begin_line": 218,
        "end_line": 218,
        "comment": " The default limit below which chart scaling kicks in. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT",
        "snippet": "    public static final int DEFAULT_MINIMUM_DRAW_HEIGHT = 200;",
        "begin_line": 221,
        "end_line": 221,
        "comment": " The default limit below which chart scaling kicks in. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH",
        "snippet": "    public static final int DEFAULT_MAXIMUM_DRAW_WIDTH = 800;",
        "begin_line": 224,
        "end_line": 224,
        "comment": " The default limit below which chart scaling kicks in. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT",
        "snippet": "    public static final int DEFAULT_MAXIMUM_DRAW_HEIGHT = 600;",
        "begin_line": 227,
        "end_line": 227,
        "comment": " The default limit below which chart scaling kicks in. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE",
        "snippet": "    public static final int DEFAULT_ZOOM_TRIGGER_DISTANCE = 10;",
        "begin_line": 230,
        "end_line": 230,
        "comment": " The minimum size required to perform a zoom on a rectangle "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.PROPERTIES_COMMAND",
        "snippet": "    public static final String PROPERTIES_COMMAND = \"PROPERTIES\";",
        "begin_line": 233,
        "end_line": 233,
        "comment": " Properties action command. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.SAVE_COMMAND",
        "snippet": "    public static final String SAVE_COMMAND = \"SAVE\";",
        "begin_line": 236,
        "end_line": 236,
        "comment": " Save action command. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.PRINT_COMMAND",
        "snippet": "    public static final String PRINT_COMMAND = \"PRINT\";",
        "begin_line": 239,
        "end_line": 239,
        "comment": " Print action command. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.ZOOM_IN_BOTH_COMMAND",
        "snippet": "    public static final String ZOOM_IN_BOTH_COMMAND = \"ZOOM_IN_BOTH\";",
        "begin_line": 242,
        "end_line": 242,
        "comment": " Zoom in (both axes) action command. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.ZOOM_IN_DOMAIN_COMMAND",
        "snippet": "    public static final String ZOOM_IN_DOMAIN_COMMAND = \"ZOOM_IN_DOMAIN\";",
        "begin_line": 245,
        "end_line": 245,
        "comment": " Zoom in (domain axis only) action command. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.ZOOM_IN_RANGE_COMMAND",
        "snippet": "    public static final String ZOOM_IN_RANGE_COMMAND = \"ZOOM_IN_RANGE\";",
        "begin_line": 248,
        "end_line": 248,
        "comment": " Zoom in (range axis only) action command. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.ZOOM_OUT_BOTH_COMMAND",
        "snippet": "    public static final String ZOOM_OUT_BOTH_COMMAND = \"ZOOM_OUT_BOTH\";",
        "begin_line": 251,
        "end_line": 251,
        "comment": " Zoom out (both axes) action command. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.ZOOM_OUT_DOMAIN_COMMAND",
        "snippet": "    public static final String ZOOM_OUT_DOMAIN_COMMAND = \"ZOOM_DOMAIN_BOTH\";",
        "begin_line": 254,
        "end_line": 254,
        "comment": " Zoom out (domain axis only) action command. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.ZOOM_OUT_RANGE_COMMAND",
        "snippet": "    public static final String ZOOM_OUT_RANGE_COMMAND = \"ZOOM_RANGE_BOTH\";",
        "begin_line": 257,
        "end_line": 257,
        "comment": " Zoom out (range axis only) action command. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.ZOOM_RESET_BOTH_COMMAND",
        "snippet": "    public static final String ZOOM_RESET_BOTH_COMMAND = \"ZOOM_RESET_BOTH\";",
        "begin_line": 260,
        "end_line": 260,
        "comment": " Zoom reset (both axes) action command. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.ZOOM_RESET_DOMAIN_COMMAND",
        "snippet": "    public static final String ZOOM_RESET_DOMAIN_COMMAND = \"ZOOM_RESET_DOMAIN\";",
        "begin_line": 263,
        "end_line": 263,
        "comment": " Zoom reset (domain axis only) action command. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.ZOOM_RESET_RANGE_COMMAND",
        "snippet": "    public static final String ZOOM_RESET_RANGE_COMMAND = \"ZOOM_RESET_RANGE\";",
        "begin_line": 266,
        "end_line": 266,
        "comment": " Zoom reset (range axis only) action command. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.chart",
        "snippet": "    private JFreeChart chart;",
        "begin_line": 269,
        "end_line": 269,
        "comment": " The chart that is displayed in the panel. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.chartMouseListeners",
        "snippet": "    private EventListenerList chartMouseListeners;",
        "begin_line": 272,
        "end_line": 272,
        "comment": " Storage for registered (chart) mouse listeners. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.useBuffer",
        "snippet": "    private boolean useBuffer;",
        "begin_line": 275,
        "end_line": 275,
        "comment": " A flag that controls whether or not the off-screen buffer is used. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.refreshBuffer",
        "snippet": "    private boolean refreshBuffer;",
        "begin_line": 278,
        "end_line": 278,
        "comment": " A flag that indicates that the buffer should be refreshed. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.chartBuffer",
        "snippet": "    private Image chartBuffer;",
        "begin_line": 281,
        "end_line": 281,
        "comment": " A buffer for the rendered chart. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.chartBufferHeight",
        "snippet": "    private int chartBufferHeight;",
        "begin_line": 284,
        "end_line": 284,
        "comment": " The height of the chart buffer. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.chartBufferWidth",
        "snippet": "    private int chartBufferWidth;",
        "begin_line": 287,
        "end_line": 287,
        "comment": " The width of the chart buffer. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.minimumDrawWidth",
        "snippet": "    private int minimumDrawWidth;",
        "begin_line": 292,
        "end_line": 292,
        "comment": " \r\n     * The minimum width for drawing a chart (uses scaling for smaller widths). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.minimumDrawHeight",
        "snippet": "    private int minimumDrawHeight;",
        "begin_line": 298,
        "end_line": 298,
        "comment": " \r\n     * The minimum height for drawing a chart (uses scaling for smaller \r\n     * heights). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.maximumDrawWidth",
        "snippet": "    private int maximumDrawWidth;",
        "begin_line": 304,
        "end_line": 304,
        "comment": " \r\n     * The maximum width for drawing a chart (uses scaling for bigger \r\n     * widths). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.maximumDrawHeight",
        "snippet": "    private int maximumDrawHeight;",
        "begin_line": 310,
        "end_line": 310,
        "comment": " \r\n     * The maximum height for drawing a chart (uses scaling for bigger \r\n     * heights). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.popup",
        "snippet": "    private JPopupMenu popup;",
        "begin_line": 313,
        "end_line": 313,
        "comment": " The popup menu for the frame. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.info",
        "snippet": "    private ChartRenderingInfo info;",
        "begin_line": 316,
        "end_line": 316,
        "comment": " The drawing info collected the last time the chart was drawn. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.anchor",
        "snippet": "    private Point2D anchor;",
        "begin_line": 319,
        "end_line": 319,
        "comment": " The chart anchor point. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.scaleX",
        "snippet": "    private double scaleX;",
        "begin_line": 322,
        "end_line": 322,
        "comment": " The scale factor used to draw the chart. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.scaleY",
        "snippet": "    private double scaleY;",
        "begin_line": 325,
        "end_line": 325,
        "comment": " The scale factor used to draw the chart. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.orientation",
        "snippet": "    private PlotOrientation orientation = PlotOrientation.VERTICAL;",
        "begin_line": 328,
        "end_line": 328,
        "comment": " The plot orientation. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.domainZoomable",
        "snippet": "    private boolean domainZoomable = false;",
        "begin_line": 331,
        "end_line": 331,
        "comment": " A flag that controls whether or not domain zooming is enabled. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.rangeZoomable",
        "snippet": "    private boolean rangeZoomable = false;",
        "begin_line": 334,
        "end_line": 334,
        "comment": " A flag that controls whether or not range zooming is enabled. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomPoint",
        "snippet": "    private Point zoomPoint = null;",
        "begin_line": 341,
        "end_line": 341,
        "comment": " \r\n     * The zoom rectangle starting point (selected by the user with a mouse \r\n     * click).  This is a point on the screen, not the chart (which may have\r\n     * been scaled up or down to fit the panel).  \r\n     "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomRectangle",
        "snippet": "    private transient Rectangle2D zoomRectangle = null;",
        "begin_line": 344,
        "end_line": 344,
        "comment": " The zoom rectangle (selected by the user with the mouse). "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.fillZoomRectangle",
        "snippet": "    private boolean fillZoomRectangle = false;",
        "begin_line": 347,
        "end_line": 347,
        "comment": " Controls if the zoom rectangle is drawn as an outline or filled. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomTriggerDistance",
        "snippet": "    private int zoomTriggerDistance;",
        "begin_line": 350,
        "end_line": 350,
        "comment": " The minimum distance required to drag the mouse to trigger a zoom. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.horizontalAxisTrace",
        "snippet": "    private boolean horizontalAxisTrace = false;",
        "begin_line": 353,
        "end_line": 353,
        "comment": " A flag that controls whether or not horizontal tracing is enabled. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.verticalAxisTrace",
        "snippet": "    private boolean verticalAxisTrace = false;",
        "begin_line": 356,
        "end_line": 356,
        "comment": " A flag that controls whether or not vertical tracing is enabled. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.verticalTraceLine",
        "snippet": "    private transient Line2D verticalTraceLine;",
        "begin_line": 359,
        "end_line": 359,
        "comment": " A vertical trace line. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.horizontalTraceLine",
        "snippet": "    private transient Line2D horizontalTraceLine;",
        "begin_line": 362,
        "end_line": 362,
        "comment": " A horizontal trace line. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomInBothMenuItem",
        "snippet": "    private JMenuItem zoomInBothMenuItem;",
        "begin_line": 365,
        "end_line": 365,
        "comment": " Menu item for zooming in on a chart (both axes). "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomInDomainMenuItem",
        "snippet": "    private JMenuItem zoomInDomainMenuItem;",
        "begin_line": 368,
        "end_line": 368,
        "comment": " Menu item for zooming in on a chart (domain axis). "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomInRangeMenuItem",
        "snippet": "    private JMenuItem zoomInRangeMenuItem;",
        "begin_line": 371,
        "end_line": 371,
        "comment": " Menu item for zooming in on a chart (range axis). "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomOutBothMenuItem",
        "snippet": "    private JMenuItem zoomOutBothMenuItem;",
        "begin_line": 374,
        "end_line": 374,
        "comment": " Menu item for zooming out on a chart. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomOutDomainMenuItem",
        "snippet": "    private JMenuItem zoomOutDomainMenuItem;",
        "begin_line": 377,
        "end_line": 377,
        "comment": " Menu item for zooming out on a chart (domain axis). "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomOutRangeMenuItem",
        "snippet": "    private JMenuItem zoomOutRangeMenuItem;",
        "begin_line": 380,
        "end_line": 380,
        "comment": " Menu item for zooming out on a chart (range axis). "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomResetBothMenuItem",
        "snippet": "    private JMenuItem zoomResetBothMenuItem;",
        "begin_line": 383,
        "end_line": 383,
        "comment": " Menu item for resetting the zoom (both axes). "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomResetDomainMenuItem",
        "snippet": "    private JMenuItem zoomResetDomainMenuItem;",
        "begin_line": 386,
        "end_line": 386,
        "comment": " Menu item for resetting the zoom (domain axis only). "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomResetRangeMenuItem",
        "snippet": "    private JMenuItem zoomResetRangeMenuItem;",
        "begin_line": 389,
        "end_line": 389,
        "comment": " Menu item for resetting the zoom (range axis only). "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.defaultDirectoryForSaveAs",
        "snippet": "    private File defaultDirectoryForSaveAs;",
        "begin_line": 396,
        "end_line": 396,
        "comment": "\r\n     * The default directory for saving charts to file.\r\n     * \r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.enforceFileExtensions",
        "snippet": "    private boolean enforceFileExtensions;",
        "begin_line": 399,
        "end_line": 399,
        "comment": " A flag that controls whether or not file extensions are enforced. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.ownToolTipDelaysActive",
        "snippet": "    private boolean ownToolTipDelaysActive;  ",
        "begin_line": 402,
        "end_line": 402,
        "comment": " A flag that indicates if original tooltip delays are changed. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.originalToolTipInitialDelay",
        "snippet": "    private int originalToolTipInitialDelay;",
        "begin_line": 405,
        "end_line": 405,
        "comment": " Original initial tooltip delay of ToolTipManager.sharedInstance(). "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.originalToolTipReshowDelay",
        "snippet": "    private int originalToolTipReshowDelay;  ",
        "begin_line": 408,
        "end_line": 408,
        "comment": " Original reshow tooltip delay of ToolTipManager.sharedInstance(). "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.originalToolTipDismissDelay",
        "snippet": "    private int originalToolTipDismissDelay;",
        "begin_line": 411,
        "end_line": 411,
        "comment": " Original dismiss tooltip delay of ToolTipManager.sharedInstance(). "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.ownToolTipInitialDelay",
        "snippet": "    private int ownToolTipInitialDelay;",
        "begin_line": 414,
        "end_line": 414,
        "comment": " Own initial tooltip delay to be used in this chart panel. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.ownToolTipReshowDelay",
        "snippet": "    private int ownToolTipReshowDelay;  ",
        "begin_line": 417,
        "end_line": 417,
        "comment": " Own reshow tooltip delay to be used in this chart panel. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.ownToolTipDismissDelay",
        "snippet": "    private int ownToolTipDismissDelay;    ",
        "begin_line": 420,
        "end_line": 420,
        "comment": " Own dismiss tooltip delay to be used in this chart panel. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomInFactor",
        "snippet": "    private double zoomInFactor = 0.5;",
        "begin_line": 423,
        "end_line": 423,
        "comment": " The factor used to zoom in on an axis range. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomOutFactor",
        "snippet": "    private double zoomOutFactor = 2.0;",
        "begin_line": 426,
        "end_line": 426,
        "comment": " The factor used to zoom out on an axis range. "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.zoomAroundAnchor",
        "snippet": "    private boolean zoomAroundAnchor;",
        "begin_line": 434,
        "end_line": 434,
        "comment": "\r\n     * A flag that controls whether zoom operations are centred on the\r\n     * current anchor point, or the centre point of the relevant axis.\r\n     *\r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.ChartPanel",
        "src_path": "source/org/jfree/chart/ChartPanel.java",
        "signature": "org.jfree.chart.ChartPanel.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources \n            = ResourceBundle.getBundle(\"org.jfree.chart.LocalizationBundle\");",
        "begin_line": 437,
        "end_line": 438,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.ChartMouseEvent",
        "src_path": "source/org/jfree/chart/ChartMouseEvent.java",
        "signature": "org.jfree.chart.ChartMouseEvent.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -682393837314562149L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.ChartMouseEvent",
        "src_path": "source/org/jfree/chart/ChartMouseEvent.java",
        "signature": "org.jfree.chart.ChartMouseEvent.chart",
        "snippet": "    private JFreeChart chart;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The chart that the mouse event relates to. "
    },
    {
        "class_name": "org.jfree.chart.ChartMouseEvent",
        "src_path": "source/org/jfree/chart/ChartMouseEvent.java",
        "signature": "org.jfree.chart.ChartMouseEvent.trigger",
        "snippet": "    private MouseEvent trigger;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The Java mouse event that triggered this event. "
    },
    {
        "class_name": "org.jfree.chart.ChartMouseEvent",
        "src_path": "source/org/jfree/chart/ChartMouseEvent.java",
        "signature": "org.jfree.chart.ChartMouseEvent.entity",
        "snippet": "    private ChartEntity entity;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The chart entity (if any). "
    },
    {
        "class_name": "org.jfree.chart.PolarChartPanel",
        "src_path": "source/org/jfree/chart/PolarChartPanel.java",
        "signature": "org.jfree.chart.PolarChartPanel.POLAR_ZOOM_IN_ACTION_COMMAND",
        "snippet": "    private static final String POLAR_ZOOM_IN_ACTION_COMMAND = \"Polar Zoom In\";",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Zoom in command string. "
    },
    {
        "class_name": "org.jfree.chart.PolarChartPanel",
        "src_path": "source/org/jfree/chart/PolarChartPanel.java",
        "signature": "org.jfree.chart.PolarChartPanel.POLAR_ZOOM_OUT_ACTION_COMMAND",
        "snippet": "    private static final String POLAR_ZOOM_OUT_ACTION_COMMAND \n        = \"Polar Zoom Out\";",
        "begin_line": 79,
        "end_line": 80,
        "comment": " Zoom out command string. "
    },
    {
        "class_name": "org.jfree.chart.PolarChartPanel",
        "src_path": "source/org/jfree/chart/PolarChartPanel.java",
        "signature": "org.jfree.chart.PolarChartPanel.POLAR_AUTO_RANGE_ACTION_COMMAND",
        "snippet": "    private static final String POLAR_AUTO_RANGE_ACTION_COMMAND \n        = \"Polar Auto Range\";",
        "begin_line": 83,
        "end_line": 84,
        "comment": " Auto range command string. "
    },
    {
        "class_name": "org.jfree.chart.LegendRenderingOrder",
        "src_path": "source/org/jfree/chart/LegendRenderingOrder.java",
        "signature": "org.jfree.chart.LegendRenderingOrder.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3832486612685808616L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.LegendRenderingOrder",
        "src_path": "source/org/jfree/chart/LegendRenderingOrder.java",
        "signature": "org.jfree.chart.LegendRenderingOrder.STANDARD",
        "snippet": "    public static final LegendRenderingOrder STANDARD \n        = new LegendRenderingOrder(\"LegendRenderingOrder.STANDARD\");",
        "begin_line": 55,
        "end_line": 56,
        "comment": " In order. "
    },
    {
        "class_name": "org.jfree.chart.LegendRenderingOrder",
        "src_path": "source/org/jfree/chart/LegendRenderingOrder.java",
        "signature": "org.jfree.chart.LegendRenderingOrder.REVERSE",
        "snippet": "    public static final LegendRenderingOrder REVERSE \n        = new LegendRenderingOrder(\"LegendRenderingOrder.REVERSE\");",
        "begin_line": 59,
        "end_line": 60,
        "comment": " In reverse order. "
    },
    {
        "class_name": "org.jfree.chart.LegendRenderingOrder",
        "src_path": "source/org/jfree/chart/LegendRenderingOrder.java",
        "signature": "org.jfree.chart.LegendRenderingOrder.name",
        "snippet": "    private String name;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3470703747817429120L;",
        "begin_line": 240,
        "end_line": 240,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.INFO",
        "snippet": "    public static final ProjectInfo INFO = new JFreeChartInfo();",
        "begin_line": 243,
        "end_line": 243,
        "comment": " Information about the project. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT",
        "snippet": "    public static final Font DEFAULT_TITLE_FONT \n            = new Font(\"SansSerif\", Font.BOLD, 18);",
        "begin_line": 246,
        "end_line": 247,
        "comment": " The default font for titles. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT",
        "snippet": "    public static final Paint DEFAULT_BACKGROUND_PAINT = Color.WHITE;",
        "begin_line": 250,
        "end_line": 250,
        "comment": " The default background color. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE",
        "snippet": "    public static final Image DEFAULT_BACKGROUND_IMAGE = null;",
        "begin_line": 253,
        "end_line": 253,
        "comment": " The default background image. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT",
        "snippet": "    public static final int DEFAULT_BACKGROUND_IMAGE_ALIGNMENT = Align.FIT;",
        "begin_line": 256,
        "end_line": 256,
        "comment": " The default background image alignment. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA",
        "snippet": "    public static final float DEFAULT_BACKGROUND_IMAGE_ALPHA = 0.5f;",
        "begin_line": 259,
        "end_line": 259,
        "comment": " The default background image alpha. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.renderingHints",
        "snippet": "    private transient RenderingHints renderingHints;",
        "begin_line": 265,
        "end_line": 265,
        "comment": " \r\n     * Rendering hints that will be used for chart drawing.  This should never\r\n     * be <code>null</code>. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.borderVisible",
        "snippet": "    private boolean borderVisible;",
        "begin_line": 268,
        "end_line": 268,
        "comment": " A flag that controls whether or not the chart border is drawn. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.borderStroke",
        "snippet": "    private transient Stroke borderStroke;",
        "begin_line": 271,
        "end_line": 271,
        "comment": " The stroke used to draw the chart border (if visible). "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.borderPaint",
        "snippet": "    private transient Paint borderPaint;",
        "begin_line": 274,
        "end_line": 274,
        "comment": " The paint used to draw the chart border (if visible). "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.padding",
        "snippet": "    private RectangleInsets padding;",
        "begin_line": 277,
        "end_line": 277,
        "comment": " The padding between the chart border and the chart drawing area. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.title",
        "snippet": "    private TextTitle title;",
        "begin_line": 280,
        "end_line": 280,
        "comment": " The chart title (optional). "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.subtitles",
        "snippet": "    private List subtitles;",
        "begin_line": 286,
        "end_line": 286,
        "comment": " \r\n     * The chart subtitles (zero, one or many).  This field should never be\r\n     * <code>null</code>.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.plot",
        "snippet": "    private Plot plot;",
        "begin_line": 289,
        "end_line": 289,
        "comment": " Draws the visual representation of the data. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.backgroundPaint",
        "snippet": "    private transient Paint backgroundPaint;",
        "begin_line": 292,
        "end_line": 292,
        "comment": " Paint used to draw the background of the chart. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.backgroundImage",
        "snippet": "    private transient Image backgroundImage;  // todo: not serialized yet",
        "begin_line": 295,
        "end_line": 295,
        "comment": " todo: not serialized yet"
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.backgroundImageAlignment",
        "snippet": "    private int backgroundImageAlignment = Align.FIT;",
        "begin_line": 298,
        "end_line": 298,
        "comment": " The alignment for the background image. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.backgroundImageAlpha",
        "snippet": "    private float backgroundImageAlpha = 0.5f;",
        "begin_line": 301,
        "end_line": 301,
        "comment": " The alpha transparency for the background image. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.changeListeners",
        "snippet": "    private transient EventListenerList changeListeners;",
        "begin_line": 304,
        "end_line": 304,
        "comment": " Storage for registered change listeners. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.progressListeners",
        "snippet": "    private transient EventListenerList progressListeners;",
        "begin_line": 307,
        "end_line": 307,
        "comment": " Storage for registered progress listeners. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.notify",
        "snippet": "    private boolean notify;",
        "begin_line": 313,
        "end_line": 313,
        "comment": " \r\n     * A flag that can be used to enable/disable notification of chart change \r\n     * events. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.ChartRenderingInfo",
        "src_path": "source/org/jfree/chart/ChartRenderingInfo.java",
        "signature": "org.jfree.chart.ChartRenderingInfo.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2751952018173406822L;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.ChartRenderingInfo",
        "src_path": "source/org/jfree/chart/ChartRenderingInfo.java",
        "signature": "org.jfree.chart.ChartRenderingInfo.chartArea",
        "snippet": "    private transient Rectangle2D chartArea;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The area in which the chart is drawn. "
    },
    {
        "class_name": "org.jfree.chart.ChartRenderingInfo",
        "src_path": "source/org/jfree/chart/ChartRenderingInfo.java",
        "signature": "org.jfree.chart.ChartRenderingInfo.plotInfo",
        "snippet": "    private PlotRenderingInfo plotInfo;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " Rendering info for the chart's plot (and subplots, if any). "
    },
    {
        "class_name": "org.jfree.chart.ChartRenderingInfo",
        "src_path": "source/org/jfree/chart/ChartRenderingInfo.java",
        "signature": "org.jfree.chart.ChartRenderingInfo.entities",
        "snippet": "    private EntityCollection entities;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " \r\n     * Storage for the chart entities.  Since retaining entity information for \r\n     * charts with a large number of data points consumes a lot of memory, it \r\n     * is intended that you can set this to <code>null</code> to prevent the \r\n     * information being collected.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_DARK_RED",
        "snippet": "    public static final Color VERY_DARK_RED = new Color(0x80, 0x00, 0x00);",
        "begin_line": 59,
        "end_line": 59,
        "comment": " A very dark red color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.DARK_RED",
        "snippet": "    public static final Color DARK_RED = new Color(0xc0, 0x00, 0x00);",
        "begin_line": 62,
        "end_line": 62,
        "comment": " A dark red color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.LIGHT_RED",
        "snippet": "    public static final Color LIGHT_RED = new Color(0xFF, 0x40, 0x40);",
        "begin_line": 65,
        "end_line": 65,
        "comment": " A light red color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_RED",
        "snippet": "    public static final Color VERY_LIGHT_RED = new Color(0xFF, 0x80, 0x80);",
        "begin_line": 68,
        "end_line": 68,
        "comment": " A very light red color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_DARK_YELLOW",
        "snippet": "    public static final Color VERY_DARK_YELLOW = new Color(0x80, 0x80, 0x00);",
        "begin_line": 71,
        "end_line": 71,
        "comment": " A very dark yellow color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.DARK_YELLOW",
        "snippet": "    public static final Color DARK_YELLOW = new Color(0xC0, 0xC0, 0x00);",
        "begin_line": 74,
        "end_line": 74,
        "comment": " A dark yellow color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.LIGHT_YELLOW",
        "snippet": "    public static final Color LIGHT_YELLOW = new Color(0xFF, 0xFF, 0x40);",
        "begin_line": 77,
        "end_line": 77,
        "comment": " A light yellow color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_YELLOW",
        "snippet": "    public static final Color VERY_LIGHT_YELLOW = new Color(0xFF, 0xFF, 0x80);",
        "begin_line": 80,
        "end_line": 80,
        "comment": " A very light yellow color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_DARK_GREEN",
        "snippet": "    public static final Color VERY_DARK_GREEN = new Color(0x00, 0x80, 0x00);",
        "begin_line": 83,
        "end_line": 83,
        "comment": " A very dark green color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.DARK_GREEN",
        "snippet": "    public static final Color DARK_GREEN = new Color(0x00, 0xC0, 0x00);",
        "begin_line": 86,
        "end_line": 86,
        "comment": " A dark green color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.LIGHT_GREEN",
        "snippet": "    public static final Color LIGHT_GREEN = new Color(0x40, 0xFF, 0x40);",
        "begin_line": 89,
        "end_line": 89,
        "comment": " A light green color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_GREEN",
        "snippet": "    public static final Color VERY_LIGHT_GREEN = new Color(0x80, 0xFF, 0x80);",
        "begin_line": 92,
        "end_line": 92,
        "comment": " A very light green color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_DARK_CYAN",
        "snippet": "    public static final Color VERY_DARK_CYAN = new Color(0x00, 0x80, 0x80);",
        "begin_line": 95,
        "end_line": 95,
        "comment": " A very dark cyan color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.DARK_CYAN",
        "snippet": "    public static final Color DARK_CYAN = new Color(0x00, 0xC0, 0xC0);",
        "begin_line": 98,
        "end_line": 98,
        "comment": " A dark cyan color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.LIGHT_CYAN",
        "snippet": "    public static final Color LIGHT_CYAN = new Color(0x40, 0xFF, 0xFF);",
        "begin_line": 101,
        "end_line": 101,
        "comment": " A light cyan color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_CYAN",
        "snippet": "    public static final Color VERY_LIGHT_CYAN = new Color(0x80, 0xFF, 0xFF);",
        "begin_line": 104,
        "end_line": 104,
        "comment": " Aa very light cyan color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_DARK_BLUE",
        "snippet": "    public static final Color VERY_DARK_BLUE = new Color(0x00, 0x00, 0x80);",
        "begin_line": 107,
        "end_line": 107,
        "comment": " A very dark blue color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.DARK_BLUE",
        "snippet": "    public static final Color DARK_BLUE = new Color(0x00, 0x00, 0xC0);",
        "begin_line": 110,
        "end_line": 110,
        "comment": " A dark blue color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.LIGHT_BLUE",
        "snippet": "    public static final Color LIGHT_BLUE = new Color(0x40, 0x40, 0xFF);",
        "begin_line": 113,
        "end_line": 113,
        "comment": " A light blue color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_BLUE",
        "snippet": "    public static final Color VERY_LIGHT_BLUE = new Color(0x80, 0x80, 0xFF);",
        "begin_line": 116,
        "end_line": 116,
        "comment": " A very light blue color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_DARK_MAGENTA",
        "snippet": "    public static final Color VERY_DARK_MAGENTA = new Color(0x80, 0x00, 0x80);",
        "begin_line": 119,
        "end_line": 119,
        "comment": " A very dark magenta/purple color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.DARK_MAGENTA",
        "snippet": "    public static final Color DARK_MAGENTA = new Color(0xC0, 0x00, 0xC0);",
        "begin_line": 122,
        "end_line": 122,
        "comment": " A dark magenta color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.LIGHT_MAGENTA",
        "snippet": "    public static final Color LIGHT_MAGENTA = new Color(0xFF, 0x40, 0xFF);",
        "begin_line": 125,
        "end_line": 125,
        "comment": " A light magenta color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_MAGENTA",
        "snippet": "    public static final Color VERY_LIGHT_MAGENTA = new Color(0xFF, 0x80, 0xFF);",
        "begin_line": 128,
        "end_line": 128,
        "comment": " A very light magenta color. "
    },
    {
        "class_name": "org.jfree.chart.StrokeMap",
        "src_path": "source/org/jfree/chart/StrokeMap.java",
        "signature": "org.jfree.chart.StrokeMap.store",
        "snippet": "    private transient Map store;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Storage for the keys and values. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -797214582948827144L;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.dataset",
        "snippet": "    private Dataset dataset;",
        "begin_line": 98,
        "end_line": 98,
        "comment": "\r\n     * The dataset.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.seriesKey",
        "snippet": "    private Comparable seriesKey;",
        "begin_line": 105,
        "end_line": 105,
        "comment": "\r\n     * The series key.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.datasetIndex",
        "snippet": "    private int datasetIndex;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " The dataset index. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.series",
        "snippet": "    private int series;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " The series index. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.label",
        "snippet": "    private String label;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " The label. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.attributedLabel",
        "snippet": "    private transient AttributedString attributedLabel;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " The attributed label (if null, fall back to the regular label). "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.description",
        "snippet": "    private String description;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " \r\n     * The description (not currently used - could be displayed as a tool tip). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.toolTipText",
        "snippet": "    private String toolTipText;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " The tool tip text. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.urlText",
        "snippet": "    private String urlText;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " The url text. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.shapeVisible",
        "snippet": "    private boolean shapeVisible;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " A flag that controls whether or not the shape is visible. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.shape",
        "snippet": "    private transient Shape shape;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " The shape. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.shapeFilled",
        "snippet": "    private boolean shapeFilled;",
        "begin_line": 137,
        "end_line": 137,
        "comment": " A flag that controls whether or not the shape is filled. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.fillPaint",
        "snippet": "    private transient Paint fillPaint;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " The paint. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.fillPaintTransformer",
        "snippet": "    private GradientPaintTransformer fillPaintTransformer;",
        "begin_line": 147,
        "end_line": 147,
        "comment": " \r\n     * A gradient paint transformer. \r\n     * \r\n     * @since 1.0.4\r\n     "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.shapeOutlineVisible",
        "snippet": "    private boolean shapeOutlineVisible;",
        "begin_line": 150,
        "end_line": 150,
        "comment": " A flag that controls whether or not the shape outline is visible. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " The outline paint. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.outlineStroke",
        "snippet": "    private transient Stroke outlineStroke;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " The outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.lineVisible",
        "snippet": "    private boolean lineVisible;",
        "begin_line": 159,
        "end_line": 159,
        "comment": " A flag that controls whether or not the line is visible. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.line",
        "snippet": "    private transient Shape line;",
        "begin_line": 162,
        "end_line": 162,
        "comment": " The line. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.lineStroke",
        "snippet": "    private transient Stroke lineStroke;",
        "begin_line": 165,
        "end_line": 165,
        "comment": " The stroke. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.linePaint",
        "snippet": "    private transient Paint linePaint;",
        "begin_line": 168,
        "end_line": 168,
        "comment": " The line paint. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.UNUSED_SHAPE",
        "snippet": "    private static final Shape UNUSED_SHAPE = new Line2D.Float();",
        "begin_line": 174,
        "end_line": 174,
        "comment": "\r\n     * The shape must be non-null for a LegendItem - if no shape is required,\r\n     * use this.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.UNUSED_STROKE",
        "snippet": "    private static final Stroke UNUSED_STROKE = new BasicStroke(0.0f);",
        "begin_line": 180,
        "end_line": 180,
        "comment": "\r\n     * The stroke must be non-null for a LegendItem - if no stroke is required,\r\n     * use this.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.ChartFrame",
        "src_path": "source/org/jfree/chart/ChartFrame.java",
        "signature": "org.jfree.chart.ChartFrame.chartPanel",
        "snippet": "    private ChartPanel chartPanel;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The chart panel. "
    },
    {
        "class_name": "org.jfree.chart.PaintMap",
        "src_path": "source/org/jfree/chart/PaintMap.java",
        "signature": "org.jfree.chart.PaintMap.store",
        "snippet": "    private transient Map store;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Storage for the keys and values. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5886554608114265863L;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.DEFAULT_AXIS_MARGIN",
        "snippet": "    public static final double DEFAULT_AXIS_MARGIN = 0.05;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " \r\n     * The default margin for the axis (used for both lower and upper margins).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.DEFAULT_CATEGORY_MARGIN",
        "snippet": "    public static final double DEFAULT_CATEGORY_MARGIN = 0.20;",
        "begin_line": 147,
        "end_line": 147,
        "comment": " \r\n     * The default margin between categories (a percentage of the overall axis\r\n     * length). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.lowerMargin",
        "snippet": "    private double lowerMargin;",
        "begin_line": 150,
        "end_line": 150,
        "comment": " The amount of space reserved at the start of the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.upperMargin",
        "snippet": "    private double upperMargin;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " The amount of space reserved at the end of the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.categoryMargin",
        "snippet": "    private double categoryMargin;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " The amount of space reserved between categories. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.maximumCategoryLabelLines",
        "snippet": "    private int maximumCategoryLabelLines;",
        "begin_line": 159,
        "end_line": 159,
        "comment": " The maximum number of lines for category labels. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.maximumCategoryLabelWidthRatio",
        "snippet": "    private float maximumCategoryLabelWidthRatio;",
        "begin_line": 165,
        "end_line": 165,
        "comment": " \r\n     * A ratio that is multiplied by the width of one category to determine the \r\n     * maximum label width. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.categoryLabelPositionOffset",
        "snippet": "    private int categoryLabelPositionOffset; ",
        "begin_line": 168,
        "end_line": 168,
        "comment": " The category label offset. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.categoryLabelPositions",
        "snippet": "    private CategoryLabelPositions categoryLabelPositions;",
        "begin_line": 174,
        "end_line": 174,
        "comment": " \r\n     * A structure defining the category label positions for each axis \r\n     * location. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.tickLabelFontMap",
        "snippet": "    private Map tickLabelFontMap;",
        "begin_line": 177,
        "end_line": 177,
        "comment": " Storage for tick label font overrides (if any). "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.tickLabelPaintMap",
        "snippet": "    private transient Map tickLabelPaintMap;",
        "begin_line": 180,
        "end_line": 180,
        "comment": " Storage for tick label paint overrides (if any). "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.categoryLabelToolTips",
        "snippet": "    private Map categoryLabelToolTips;",
        "begin_line": 183,
        "end_line": 183,
        "comment": " Storage for the category label tooltips (if any). "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxis",
        "src_path": "source/org/jfree/chart/axis/PeriodAxis.java",
        "signature": "org.jfree.chart.axis.PeriodAxis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8353295532075872069L;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxis",
        "src_path": "source/org/jfree/chart/axis/PeriodAxis.java",
        "signature": "org.jfree.chart.axis.PeriodAxis.first",
        "snippet": "    private RegularTimePeriod first;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " The first time period in the overall range. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxis",
        "src_path": "source/org/jfree/chart/axis/PeriodAxis.java",
        "signature": "org.jfree.chart.axis.PeriodAxis.last",
        "snippet": "    private RegularTimePeriod last;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " The last time period in the overall range. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxis",
        "src_path": "source/org/jfree/chart/axis/PeriodAxis.java",
        "signature": "org.jfree.chart.axis.PeriodAxis.timeZone",
        "snippet": "    private TimeZone timeZone;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " \r\n     * The time zone used to convert 'first' and 'last' to absolute \r\n     * milliseconds. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxis",
        "src_path": "source/org/jfree/chart/axis/PeriodAxis.java",
        "signature": "org.jfree.chart.axis.PeriodAxis.calendar",
        "snippet": "    private Calendar calendar;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " \r\n     * A calendar used for date manipulations in the current time zone.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxis",
        "src_path": "source/org/jfree/chart/axis/PeriodAxis.java",
        "signature": "org.jfree.chart.axis.PeriodAxis.autoRangeTimePeriodClass",
        "snippet": "    private Class autoRangeTimePeriodClass;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " \r\n     * The {@link RegularTimePeriod} subclass used to automatically determine \r\n     * the axis range. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxis",
        "src_path": "source/org/jfree/chart/axis/PeriodAxis.java",
        "signature": "org.jfree.chart.axis.PeriodAxis.majorTickTimePeriodClass",
        "snippet": "    private Class majorTickTimePeriodClass;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " \r\n     * Indicates the {@link RegularTimePeriod} subclass that is used to \r\n     * determine the spacing of the major tick marks.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxis",
        "src_path": "source/org/jfree/chart/axis/PeriodAxis.java",
        "signature": "org.jfree.chart.axis.PeriodAxis.minorTickMarksVisible",
        "snippet": "    private boolean minorTickMarksVisible;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " \r\n     * A flag that indicates whether or not tick marks are visible for the \r\n     * axis. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxis",
        "src_path": "source/org/jfree/chart/axis/PeriodAxis.java",
        "signature": "org.jfree.chart.axis.PeriodAxis.minorTickTimePeriodClass",
        "snippet": "    private Class minorTickTimePeriodClass;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " \r\n     * Indicates the {@link RegularTimePeriod} subclass that is used to \r\n     * determine the spacing of the minor tick marks.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxis",
        "src_path": "source/org/jfree/chart/axis/PeriodAxis.java",
        "signature": "org.jfree.chart.axis.PeriodAxis.minorTickMarkInsideLength",
        "snippet": "    private float minorTickMarkInsideLength = 0.0f;",
        "begin_line": 151,
        "end_line": 151,
        "comment": " The length of the tick mark inside the data area (zero permitted). "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxis",
        "src_path": "source/org/jfree/chart/axis/PeriodAxis.java",
        "signature": "org.jfree.chart.axis.PeriodAxis.minorTickMarkOutsideLength",
        "snippet": "    private float minorTickMarkOutsideLength = 2.0f;",
        "begin_line": 154,
        "end_line": 154,
        "comment": " The length of the tick mark outside the data area (zero permitted). "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxis",
        "src_path": "source/org/jfree/chart/axis/PeriodAxis.java",
        "signature": "org.jfree.chart.axis.PeriodAxis.minorTickMarkStroke",
        "snippet": "    private transient Stroke minorTickMarkStroke = new BasicStroke(0.5f);",
        "begin_line": 157,
        "end_line": 157,
        "comment": " The stroke used to draw tick marks. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxis",
        "src_path": "source/org/jfree/chart/axis/PeriodAxis.java",
        "signature": "org.jfree.chart.axis.PeriodAxis.minorTickMarkPaint",
        "snippet": "    private transient Paint minorTickMarkPaint = Color.black;",
        "begin_line": 160,
        "end_line": 160,
        "comment": " The paint used to draw tick marks. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxis",
        "src_path": "source/org/jfree/chart/axis/PeriodAxis.java",
        "signature": "org.jfree.chart.axis.PeriodAxis.labelInfo",
        "snippet": "    private PeriodAxisLabelInfo[] labelInfo;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " Info for each labelling band. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberTick",
        "src_path": "source/org/jfree/chart/axis/NumberTick.java",
        "signature": "org.jfree.chart.axis.NumberTick.number",
        "snippet": "    private Number number;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The number. "
    },
    {
        "class_name": "org.jfree.chart.axis.ModuloAxis",
        "src_path": "source/org/jfree/chart/axis/ModuloAxis.java",
        "signature": "org.jfree.chart.axis.ModuloAxis.fixedRange",
        "snippet": "    private Range fixedRange;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " \r\n     * The fixed range for the axis - all data values will be mapped to this\r\n     * range using a modulo calculation. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ModuloAxis",
        "src_path": "source/org/jfree/chart/axis/ModuloAxis.java",
        "signature": "org.jfree.chart.axis.ModuloAxis.displayStart",
        "snippet": "    private double displayStart;",
        "begin_line": 66,
        "end_line": 66,
        "comment": "\r\n     * The display start value (this will sometimes be > displayEnd, in which\r\n     * case the axis wraps around at some point in the middle of the axis).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ModuloAxis",
        "src_path": "source/org/jfree/chart/axis/ModuloAxis.java",
        "signature": "org.jfree.chart.axis.ModuloAxis.displayEnd",
        "snippet": "    private double displayEnd;",
        "begin_line": 71,
        "end_line": 71,
        "comment": "\r\n     * The display end value.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1093779862539903110L;",
        "begin_line": 169,
        "end_line": 169,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.DAY_SEGMENT_SIZE",
        "snippet": "    public static final long DAY_SEGMENT_SIZE = 24 * 60 * 60 * 1000;",
        "begin_line": 176,
        "end_line": 176,
        "comment": " Defines a day segment size in ms. "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.HOUR_SEGMENT_SIZE",
        "snippet": "    public static final long HOUR_SEGMENT_SIZE = 60 * 60 * 1000;",
        "begin_line": 179,
        "end_line": 179,
        "comment": " Defines a one hour segment size in ms. "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.FIFTEEN_MINUTE_SEGMENT_SIZE",
        "snippet": "    public static final long FIFTEEN_MINUTE_SEGMENT_SIZE = 15 * 60 * 1000;",
        "begin_line": 182,
        "end_line": 182,
        "comment": " Defines a 15-minute segment size in ms. "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.MINUTE_SEGMENT_SIZE",
        "snippet": "    public static final long MINUTE_SEGMENT_SIZE = 60 * 1000;",
        "begin_line": 185,
        "end_line": 185,
        "comment": " Defines a one-minute segment size in ms. "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.FIRST_MONDAY_AFTER_1900",
        "snippet": "    public static long FIRST_MONDAY_AFTER_1900;",
        "begin_line": 200,
        "end_line": 200,
        "comment": "\r\n     * Utility constant that defines the startTime as the first monday after \r\n     * 1/1/1970.  This should be used when creating a SegmentedTimeline for \r\n     * Monday through Friday. See static block below for calculation of this \r\n     * constant.\r\n     * \r\n     * @deprecated As of 1.0.7.  This field doesn't take into account changes\r\n     *         to the default time zone.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.NO_DST_TIME_ZONE",
        "snippet": "    public static TimeZone NO_DST_TIME_ZONE;",
        "begin_line": 211,
        "end_line": 211,
        "comment": "\r\n     * Utility TimeZone object that has no DST and an offset equal to the \r\n     * default TimeZone. This allows easy arithmetic between days as each one \r\n     * will have equal size.\r\n     * \r\n     * @deprecated As of 1.0.7.  This field is initialised based on the \r\n     *         default time zone, and doesn't take into account subsequent \r\n     *         changes to the default.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.DEFAULT_TIME_ZONE",
        "snippet": "    public static TimeZone DEFAULT_TIME_ZONE = TimeZone.getDefault();",
        "begin_line": 222,
        "end_line": 222,
        "comment": "\r\n     * This is the default time zone where the application is running. See \r\n     * getTime() below where we make use of certain transformations between \r\n     * times in the default time zone and the no-dst time zone used for our \r\n     * calculations.\r\n     * \r\n     * @deprecated As of 1.0.7.  When the default time zone is required,\r\n     *         just call <code>TimeZone.getDefault()</code>.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.workingCalendarNoDST",
        "snippet": "    private Calendar workingCalendarNoDST;",
        "begin_line": 228,
        "end_line": 228,
        "comment": "\r\n     * This will be a utility calendar that has no DST but is shifted relative \r\n     * to the default time zone's offset.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.workingCalendar",
        "snippet": "    private Calendar workingCalendar = Calendar.getInstance();",
        "begin_line": 233,
        "end_line": 233,
        "comment": "\r\n     * This will be a utility calendar that used the default time zone.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.segmentSize",
        "snippet": "    private long segmentSize;",
        "begin_line": 240,
        "end_line": 240,
        "comment": " Segment size in ms. "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.segmentsIncluded",
        "snippet": "    private int segmentsIncluded;",
        "begin_line": 243,
        "end_line": 243,
        "comment": " Number of consecutive segments to include in a segment group. "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.segmentsExcluded",
        "snippet": "    private int segmentsExcluded;",
        "begin_line": 246,
        "end_line": 246,
        "comment": " Number of consecutive segments to exclude in a segment group. "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.groupSegmentCount",
        "snippet": "    private int groupSegmentCount;",
        "begin_line": 249,
        "end_line": 249,
        "comment": " Number of segments in a group (segmentsIncluded + segmentsExcluded). "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.startTime",
        "snippet": "    private long startTime;",
        "begin_line": 255,
        "end_line": 255,
        "comment": " \r\n     * Start of time reference from time zero (1/1/1970). \r\n     * This is the start of segment #0. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.segmentsIncludedSize",
        "snippet": "    private long segmentsIncludedSize;",
        "begin_line": 258,
        "end_line": 258,
        "comment": " Consecutive ms in segmentsIncluded (segmentsIncluded * segmentSize). "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.segmentsExcludedSize",
        "snippet": "    private long segmentsExcludedSize;",
        "begin_line": 261,
        "end_line": 261,
        "comment": " Consecutive ms in segmentsExcluded (segmentsExcluded * segmentSize). "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.segmentsGroupSize",
        "snippet": "    private long segmentsGroupSize;",
        "begin_line": 264,
        "end_line": 264,
        "comment": " ms in a segment group (segmentsIncludedSize + segmentsExcludedSize). "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.exceptionSegments",
        "snippet": "    private List exceptionSegments = new ArrayList();",
        "begin_line": 270,
        "end_line": 270,
        "comment": "\r\n     * List of exception segments (exceptions segments that would otherwise be\r\n     * included based on the periodic (included, excluded) grouping).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.baseTimeline",
        "snippet": "    private SegmentedTimeline baseTimeline;",
        "begin_line": 282,
        "end_line": 282,
        "comment": "\r\n     * This base timeline is used to specify exceptions at a higher level. For \r\n     * example, if we are a intraday timeline and want to exclude holidays, \r\n     * instead of having to exclude all intraday segments for the holiday, \r\n     * segments from this base timeline can be excluded. This baseTimeline is \r\n     * always optional and is only a convenience method.\r\n     * <p>\r\n     * Additionally, all excluded segments from this baseTimeline will be \r\n     * considered exceptions at this level.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentedTimeline",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentedTimeline.adjustForDaylightSaving",
        "snippet": "    private boolean adjustForDaylightSaving = false;",
        "begin_line": 285,
        "end_line": 285,
        "comment": " A flag that controls whether or not to adjust for daylight saving. "
    },
    {
        "class_name": "org.jfree.chart.axis.Segment",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.Segment.segmentNumber",
        "snippet": "        protected long segmentNumber;",
        "begin_line": 1246,
        "end_line": 1246,
        "comment": " The segment number. "
    },
    {
        "class_name": "org.jfree.chart.axis.Segment",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.Segment.segmentStart",
        "snippet": "        protected long segmentStart;",
        "begin_line": 1249,
        "end_line": 1249,
        "comment": " The segment start. "
    },
    {
        "class_name": "org.jfree.chart.axis.Segment",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.Segment.segmentEnd",
        "snippet": "        protected long segmentEnd;",
        "begin_line": 1252,
        "end_line": 1252,
        "comment": " The segment end. "
    },
    {
        "class_name": "org.jfree.chart.axis.Segment",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.Segment.millisecond",
        "snippet": "        protected long millisecond;",
        "begin_line": 1255,
        "end_line": 1255,
        "comment": " A reference point within the segment. "
    },
    {
        "class_name": "org.jfree.chart.axis.SegmentRange",
        "src_path": "source/org/jfree/chart/axis/SegmentedTimeline.java",
        "signature": "org.jfree.chart.axis.SegmentRange.segmentCount",
        "snippet": "        private long segmentCount; ",
        "begin_line": 1634,
        "end_line": 1634,
        "comment": " The number of segments in the range. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7719289504573298271L;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_VISIBLE",
        "snippet": "    public static final boolean DEFAULT_AXIS_VISIBLE = true;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " The default axis visibility. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LABEL_FONT",
        "snippet": "    public static final Font DEFAULT_AXIS_LABEL_FONT = new Font(\n            \"SansSerif\", Font.PLAIN, 12);",
        "begin_line": 136,
        "end_line": 137,
        "comment": " The default axis label font. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LABEL_PAINT",
        "snippet": "    public static final Paint DEFAULT_AXIS_LABEL_PAINT = Color.black;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " The default axis label paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LABEL_INSETS",
        "snippet": "    public static final RectangleInsets DEFAULT_AXIS_LABEL_INSETS \n            = new RectangleInsets(3.0, 3.0, 3.0, 3.0);",
        "begin_line": 143,
        "end_line": 144,
        "comment": " The default axis label insets. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_PAINT",
        "snippet": "    public static final Paint DEFAULT_AXIS_LINE_PAINT = Color.gray;",
        "begin_line": 147,
        "end_line": 147,
        "comment": " The default axis line paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE",
        "snippet": "    public static final Stroke DEFAULT_AXIS_LINE_STROKE = new BasicStroke(1.0f);",
        "begin_line": 150,
        "end_line": 150,
        "comment": " The default axis line stroke. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_LABELS_VISIBLE",
        "snippet": "    public static final boolean DEFAULT_TICK_LABELS_VISIBLE = true;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " The default tick labels visibility. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT",
        "snippet": "    public static final Font DEFAULT_TICK_LABEL_FONT = new Font(\"SansSerif\", \n            Font.PLAIN, 10);",
        "begin_line": 156,
        "end_line": 157,
        "comment": " The default tick label font. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_PAINT",
        "snippet": "    public static final Paint DEFAULT_TICK_LABEL_PAINT = Color.black;",
        "begin_line": 160,
        "end_line": 160,
        "comment": " The default tick label paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS",
        "snippet": "    public static final RectangleInsets DEFAULT_TICK_LABEL_INSETS \n            = new RectangleInsets(2.0, 4.0, 2.0, 4.0);",
        "begin_line": 163,
        "end_line": 164,
        "comment": " The default tick label insets. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARKS_VISIBLE",
        "snippet": "    public static final boolean DEFAULT_TICK_MARKS_VISIBLE = true;",
        "begin_line": 167,
        "end_line": 167,
        "comment": " The default tick marks visible. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_STROKE",
        "snippet": "    public static final Stroke DEFAULT_TICK_MARK_STROKE = new BasicStroke(1);",
        "begin_line": 170,
        "end_line": 170,
        "comment": " The default tick stroke. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT",
        "snippet": "    public static final Paint DEFAULT_TICK_MARK_PAINT = Color.gray;",
        "begin_line": 173,
        "end_line": 173,
        "comment": " The default tick paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH",
        "snippet": "    public static final float DEFAULT_TICK_MARK_INSIDE_LENGTH = 0.0f;",
        "begin_line": 176,
        "end_line": 176,
        "comment": " The default tick mark inside length. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH",
        "snippet": "    public static final float DEFAULT_TICK_MARK_OUTSIDE_LENGTH = 2.0f;",
        "begin_line": 179,
        "end_line": 179,
        "comment": " The default tick mark outside length. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.visible",
        "snippet": "    private boolean visible;",
        "begin_line": 182,
        "end_line": 182,
        "comment": " A flag indicating whether or not the axis is visible. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.label",
        "snippet": "    private String label;",
        "begin_line": 185,
        "end_line": 185,
        "comment": " The label for the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.labelFont",
        "snippet": "    private Font labelFont;",
        "begin_line": 188,
        "end_line": 188,
        "comment": " The font for displaying the axis label. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.labelPaint",
        "snippet": "    private transient Paint labelPaint;",
        "begin_line": 191,
        "end_line": 191,
        "comment": " The paint for drawing the axis label. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.labelInsets",
        "snippet": "    private RectangleInsets labelInsets;",
        "begin_line": 194,
        "end_line": 194,
        "comment": " The insets for the axis label. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.labelAngle",
        "snippet": "    private double labelAngle;",
        "begin_line": 197,
        "end_line": 197,
        "comment": " The label angle. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.labelToolTip",
        "snippet": "    private String labelToolTip;",
        "begin_line": 204,
        "end_line": 204,
        "comment": "\r\n     * The tool tip text for the label (<code>null</code> is permitted).\r\n     * \r\n     * @since 1.2.0\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.labelURL",
        "snippet": "    private String labelURL;",
        "begin_line": 211,
        "end_line": 211,
        "comment": "\r\n     * The URL for the label (<code>null</code> is permitted).\r\n     * \r\n     * @since 1.2.0.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.axisLineVisible",
        "snippet": "    private boolean axisLineVisible;",
        "begin_line": 214,
        "end_line": 214,
        "comment": " A flag that controls whether or not the axis line is visible. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.axisLineStroke",
        "snippet": "    private transient Stroke axisLineStroke;",
        "begin_line": 217,
        "end_line": 217,
        "comment": " The stroke used for the axis line. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.axisLinePaint",
        "snippet": "    private transient Paint axisLinePaint;",
        "begin_line": 220,
        "end_line": 220,
        "comment": " The paint used for the axis line. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickLabelsVisible",
        "snippet": "    private boolean tickLabelsVisible;",
        "begin_line": 226,
        "end_line": 226,
        "comment": " \r\n     * A flag that indicates whether or not tick labels are visible for the \r\n     * axis. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickLabelFont",
        "snippet": "    private Font tickLabelFont;",
        "begin_line": 229,
        "end_line": 229,
        "comment": " The font used to display the tick labels. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickLabelPaint",
        "snippet": "    private transient Paint tickLabelPaint;",
        "begin_line": 232,
        "end_line": 232,
        "comment": " The color used to display the tick labels. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickLabelInsets",
        "snippet": "    private RectangleInsets tickLabelInsets;",
        "begin_line": 235,
        "end_line": 235,
        "comment": " The blank space around each tick label. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickMarksVisible",
        "snippet": "    private boolean tickMarksVisible;",
        "begin_line": 241,
        "end_line": 241,
        "comment": " \r\n     * A flag that indicates whether or not tick marks are visible for the \r\n     * axis. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickMarkInsideLength",
        "snippet": "    private float tickMarkInsideLength;",
        "begin_line": 244,
        "end_line": 244,
        "comment": " The length of the tick mark inside the data area (zero permitted). "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickMarkOutsideLength",
        "snippet": "    private float tickMarkOutsideLength;",
        "begin_line": 247,
        "end_line": 247,
        "comment": " The length of the tick mark outside the data area (zero permitted). "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickMarkStroke",
        "snippet": "    private transient Stroke tickMarkStroke;",
        "begin_line": 250,
        "end_line": 250,
        "comment": " The stroke used to draw tick marks. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickMarkPaint",
        "snippet": "    private transient Paint tickMarkPaint;",
        "begin_line": 253,
        "end_line": 253,
        "comment": " The paint used to draw tick marks. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.fixedDimension",
        "snippet": "    private double fixedDimension;",
        "begin_line": 256,
        "end_line": 256,
        "comment": " The fixed (horizontal or vertical) dimension for the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.plot",
        "snippet": "    private transient Plot plot;",
        "begin_line": 262,
        "end_line": 262,
        "comment": " \r\n     * A reference back to the plot that the axis is assigned to (can be \r\n     * <code>null</code>). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.listenerList",
        "snippet": "    private transient EventListenerList listenerList;",
        "begin_line": 265,
        "end_line": 265,
        "comment": " Storage for registered listeners. "
    },
    {
        "class_name": "org.jfree.chart.axis.SymbolAxis",
        "src_path": "source/org/jfree/chart/axis/SymbolAxis.java",
        "signature": "org.jfree.chart.axis.SymbolAxis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7216330468770619716L;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.SymbolAxis",
        "src_path": "source/org/jfree/chart/axis/SymbolAxis.java",
        "signature": "org.jfree.chart.axis.SymbolAxis.DEFAULT_GRID_BAND_PAINT",
        "snippet": "    public static final Paint DEFAULT_GRID_BAND_PAINT \n            = new Color(232, 234, 232, 128);",
        "begin_line": 120,
        "end_line": 121,
        "comment": " The default grid band paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.SymbolAxis",
        "src_path": "source/org/jfree/chart/axis/SymbolAxis.java",
        "signature": "org.jfree.chart.axis.SymbolAxis.DEFAULT_GRID_BAND_ALTERNATE_PAINT",
        "snippet": "    public static final Paint DEFAULT_GRID_BAND_ALTERNATE_PAINT\n            = new Color(0, 0, 0, 0);  // transparent",
        "begin_line": 128,
        "end_line": 129,
        "comment": "\r\n     * The default paint for alternate grid bands.\r\n     * \r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.SymbolAxis",
        "src_path": "source/org/jfree/chart/axis/SymbolAxis.java",
        "signature": "org.jfree.chart.axis.SymbolAxis.symbols",
        "snippet": "    private List symbols;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " The list of symbols to display instead of the numeric values. "
    },
    {
        "class_name": "org.jfree.chart.axis.SymbolAxis",
        "src_path": "source/org/jfree/chart/axis/SymbolAxis.java",
        "signature": "org.jfree.chart.axis.SymbolAxis.gridBandsVisible",
        "snippet": "    private boolean gridBandsVisible;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " Flag that indicates whether or not grid bands are visible. "
    },
    {
        "class_name": "org.jfree.chart.axis.SymbolAxis",
        "src_path": "source/org/jfree/chart/axis/SymbolAxis.java",
        "signature": "org.jfree.chart.axis.SymbolAxis.gridBandPaint",
        "snippet": "    private transient Paint gridBandPaint;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " The paint used to color the grid bands (if the bands are visible). "
    },
    {
        "class_name": "org.jfree.chart.axis.SymbolAxis",
        "src_path": "source/org/jfree/chart/axis/SymbolAxis.java",
        "signature": "org.jfree.chart.axis.SymbolAxis.gridBandAlternatePaint",
        "snippet": "    private transient Paint gridBandAlternatePaint;",
        "begin_line": 145,
        "end_line": 145,
        "comment": " \r\n     * The paint used to fill the alternate grid bands.\r\n     * \r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisState",
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "signature": "org.jfree.chart.axis.AxisState.cursor",
        "snippet": "    private double cursor;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The cursor position. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisState",
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "signature": "org.jfree.chart.axis.AxisState.ticks",
        "snippet": "    private List ticks;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The axis ticks. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisState",
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "signature": "org.jfree.chart.axis.AxisState.max",
        "snippet": "    private double max;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The maximum width/height. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
        "src_path": "source/org/jfree/chart/axis/DateTickMarkPosition.java",
        "signature": "org.jfree.chart.axis.DateTickMarkPosition.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2540750672764537240L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
        "src_path": "source/org/jfree/chart/axis/DateTickMarkPosition.java",
        "signature": "org.jfree.chart.axis.DateTickMarkPosition.START",
        "snippet": "    public static final DateTickMarkPosition START\n        = new DateTickMarkPosition(\"DateTickMarkPosition.START\");",
        "begin_line": 56,
        "end_line": 57,
        "comment": " Start of period. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
        "src_path": "source/org/jfree/chart/axis/DateTickMarkPosition.java",
        "signature": "org.jfree.chart.axis.DateTickMarkPosition.MIDDLE",
        "snippet": "    public static final DateTickMarkPosition MIDDLE\n        = new DateTickMarkPosition(\"DateTickMarkPosition.MIDDLE\");",
        "begin_line": 60,
        "end_line": 61,
        "comment": " Middle of period. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
        "src_path": "source/org/jfree/chart/axis/DateTickMarkPosition.java",
        "signature": "org.jfree.chart.axis.DateTickMarkPosition.END",
        "snippet": "    public static final DateTickMarkPosition END\n        = new DateTickMarkPosition(\"DateTickMarkPosition.END\");",
        "begin_line": 64,
        "end_line": 65,
        "comment": " End of period. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
        "src_path": "source/org/jfree/chart/axis/DateTickMarkPosition.java",
        "signature": "org.jfree.chart.axis.DateTickMarkPosition.name",
        "snippet": "    private String name;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.axis.TickUnits",
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "signature": "org.jfree.chart.axis.TickUnits.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1134174035901467545L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.TickUnits",
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "signature": "org.jfree.chart.axis.TickUnits.tickUnits",
        "snippet": "    private List tickUnits;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " Storage for the tick units. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "signature": "org.jfree.chart.axis.AxisSpace.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2490732595134766305L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "signature": "org.jfree.chart.axis.AxisSpace.top",
        "snippet": "    private double top;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The top space. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "signature": "org.jfree.chart.axis.AxisSpace.bottom",
        "snippet": "    private double bottom;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The bottom space. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "signature": "org.jfree.chart.axis.AxisSpace.left",
        "snippet": "    private double left;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The left space. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "signature": "org.jfree.chart.axis.AxisSpace.right",
        "snippet": "    private double right;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The right space. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxisLabelInfo",
        "src_path": "source/org/jfree/chart/axis/PeriodAxisLabelInfo.java",
        "signature": "org.jfree.chart.axis.PeriodAxisLabelInfo.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5710451740920277357L;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxisLabelInfo",
        "src_path": "source/org/jfree/chart/axis/PeriodAxisLabelInfo.java",
        "signature": "org.jfree.chart.axis.PeriodAxisLabelInfo.DEFAULT_INSETS",
        "snippet": "    public static final RectangleInsets DEFAULT_INSETS \n            = new RectangleInsets(2, 2, 2, 2);",
        "begin_line": 81,
        "end_line": 82,
        "comment": " The default insets. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxisLabelInfo",
        "src_path": "source/org/jfree/chart/axis/PeriodAxisLabelInfo.java",
        "signature": "org.jfree.chart.axis.PeriodAxisLabelInfo.DEFAULT_FONT",
        "snippet": "    public static final Font DEFAULT_FONT \n            = new Font(\"SansSerif\", Font.PLAIN, 10);",
        "begin_line": 85,
        "end_line": 86,
        "comment": " The default font. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxisLabelInfo",
        "src_path": "source/org/jfree/chart/axis/PeriodAxisLabelInfo.java",
        "signature": "org.jfree.chart.axis.PeriodAxisLabelInfo.DEFAULT_LABEL_PAINT",
        "snippet": "    public static final Paint DEFAULT_LABEL_PAINT = Color.black;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " The default label paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxisLabelInfo",
        "src_path": "source/org/jfree/chart/axis/PeriodAxisLabelInfo.java",
        "signature": "org.jfree.chart.axis.PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE",
        "snippet": "    public static final Stroke DEFAULT_DIVIDER_STROKE = new BasicStroke(0.5f);",
        "begin_line": 92,
        "end_line": 92,
        "comment": " The default divider stroke. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxisLabelInfo",
        "src_path": "source/org/jfree/chart/axis/PeriodAxisLabelInfo.java",
        "signature": "org.jfree.chart.axis.PeriodAxisLabelInfo.DEFAULT_DIVIDER_PAINT",
        "snippet": "    public static final Paint DEFAULT_DIVIDER_PAINT = Color.gray;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " The default divider paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxisLabelInfo",
        "src_path": "source/org/jfree/chart/axis/PeriodAxisLabelInfo.java",
        "signature": "org.jfree.chart.axis.PeriodAxisLabelInfo.periodClass",
        "snippet": "    private Class periodClass;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " The subclass of {@link RegularTimePeriod} to use for this band. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxisLabelInfo",
        "src_path": "source/org/jfree/chart/axis/PeriodAxisLabelInfo.java",
        "signature": "org.jfree.chart.axis.PeriodAxisLabelInfo.padding",
        "snippet": "    private RectangleInsets padding;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " Controls the gaps around the band. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxisLabelInfo",
        "src_path": "source/org/jfree/chart/axis/PeriodAxisLabelInfo.java",
        "signature": "org.jfree.chart.axis.PeriodAxisLabelInfo.dateFormat",
        "snippet": "    private DateFormat dateFormat;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " The date formatter. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxisLabelInfo",
        "src_path": "source/org/jfree/chart/axis/PeriodAxisLabelInfo.java",
        "signature": "org.jfree.chart.axis.PeriodAxisLabelInfo.labelFont",
        "snippet": "    private Font labelFont;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " The label font. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxisLabelInfo",
        "src_path": "source/org/jfree/chart/axis/PeriodAxisLabelInfo.java",
        "signature": "org.jfree.chart.axis.PeriodAxisLabelInfo.labelPaint",
        "snippet": "    private transient Paint labelPaint;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " The label paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxisLabelInfo",
        "src_path": "source/org/jfree/chart/axis/PeriodAxisLabelInfo.java",
        "signature": "org.jfree.chart.axis.PeriodAxisLabelInfo.drawDividers",
        "snippet": "    private boolean drawDividers;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " A flag that controls whether or not dividers are visible. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxisLabelInfo",
        "src_path": "source/org/jfree/chart/axis/PeriodAxisLabelInfo.java",
        "signature": "org.jfree.chart.axis.PeriodAxisLabelInfo.dividerStroke",
        "snippet": "    private transient Stroke dividerStroke;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " The stroke used to draw the dividers. "
    },
    {
        "class_name": "org.jfree.chart.axis.PeriodAxisLabelInfo",
        "src_path": "source/org/jfree/chart/axis/PeriodAxisLabelInfo.java",
        "signature": "org.jfree.chart.axis.PeriodAxisLabelInfo.dividerPaint",
        "snippet": "    private transient Paint dividerPaint;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " The paint used to draw the dividers. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryTick",
        "src_path": "source/org/jfree/chart/axis/CategoryTick.java",
        "signature": "org.jfree.chart.axis.CategoryTick.category",
        "snippet": "    private Comparable category;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The category. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryTick",
        "src_path": "source/org/jfree/chart/axis/CategoryTick.java",
        "signature": "org.jfree.chart.axis.CategoryTick.label",
        "snippet": "    private TextBlock label;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The label. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryTick",
        "src_path": "source/org/jfree/chart/axis/CategoryTick.java",
        "signature": "org.jfree.chart.axis.CategoryTick.labelAnchor",
        "snippet": "    private TextBlockAnchor labelAnchor;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The label anchor. "
    },
    {
        "class_name": "org.jfree.chart.axis.LogarithmicAxis",
        "src_path": "source/org/jfree/chart/axis/LogarithmicAxis.java",
        "signature": "org.jfree.chart.axis.LogarithmicAxis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2502918599004103054L;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.LogarithmicAxis",
        "src_path": "source/org/jfree/chart/axis/LogarithmicAxis.java",
        "signature": "org.jfree.chart.axis.LogarithmicAxis.LOG10_VALUE",
        "snippet": "    public static final double LOG10_VALUE = Math.log(10.0);",
        "begin_line": 119,
        "end_line": 119,
        "comment": " Useful constant for log(10). "
    },
    {
        "class_name": "org.jfree.chart.axis.LogarithmicAxis",
        "src_path": "source/org/jfree/chart/axis/LogarithmicAxis.java",
        "signature": "org.jfree.chart.axis.LogarithmicAxis.SMALL_LOG_VALUE",
        "snippet": "    public static final double SMALL_LOG_VALUE = 1e-100;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Smallest arbitrarily-close-to-zero value allowed. "
    },
    {
        "class_name": "org.jfree.chart.axis.LogarithmicAxis",
        "src_path": "source/org/jfree/chart/axis/LogarithmicAxis.java",
        "signature": "org.jfree.chart.axis.LogarithmicAxis.allowNegativesFlag",
        "snippet": "    protected boolean allowNegativesFlag = false;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " Flag set true to allow negative values in data. "
    },
    {
        "class_name": "org.jfree.chart.axis.LogarithmicAxis",
        "src_path": "source/org/jfree/chart/axis/LogarithmicAxis.java",
        "signature": "org.jfree.chart.axis.LogarithmicAxis.strictValuesFlag",
        "snippet": "    protected boolean strictValuesFlag = true;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " \r\n     * Flag set true make axis throw exception if any values are\r\n     * <= 0 and 'allowNegativesFlag' is false. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.LogarithmicAxis",
        "src_path": "source/org/jfree/chart/axis/LogarithmicAxis.java",
        "signature": "org.jfree.chart.axis.LogarithmicAxis.numberFormatterObj",
        "snippet": "    protected final NumberFormat numberFormatterObj\n        = NumberFormat.getInstance();",
        "begin_line": 134,
        "end_line": 135,
        "comment": " Number formatter for generating numeric strings. "
    },
    {
        "class_name": "org.jfree.chart.axis.LogarithmicAxis",
        "src_path": "source/org/jfree/chart/axis/LogarithmicAxis.java",
        "signature": "org.jfree.chart.axis.LogarithmicAxis.expTickLabelsFlag",
        "snippet": "    protected boolean expTickLabelsFlag = false;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " Flag set true for \"1e#\"-style tick labels. "
    },
    {
        "class_name": "org.jfree.chart.axis.LogarithmicAxis",
        "src_path": "source/org/jfree/chart/axis/LogarithmicAxis.java",
        "signature": "org.jfree.chart.axis.LogarithmicAxis.log10TickLabelsFlag",
        "snippet": "    protected boolean log10TickLabelsFlag = false;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " Flag set true for \"10^n\"-style tick labels. "
    },
    {
        "class_name": "org.jfree.chart.axis.LogarithmicAxis",
        "src_path": "source/org/jfree/chart/axis/LogarithmicAxis.java",
        "signature": "org.jfree.chart.axis.LogarithmicAxis.autoRangeNextLogFlag",
        "snippet": "    protected boolean autoRangeNextLogFlag = false;",
        "begin_line": 144,
        "end_line": 144,
        "comment": " True to make 'autoAdjustRange()' select \"10^n\" values. "
    },
    {
        "class_name": "org.jfree.chart.axis.LogarithmicAxis",
        "src_path": "source/org/jfree/chart/axis/LogarithmicAxis.java",
        "signature": "org.jfree.chart.axis.LogarithmicAxis.smallLogFlag",
        "snippet": "    protected boolean smallLogFlag = false;",
        "begin_line": 147,
        "end_line": 147,
        "comment": " Helper flag for log axis processing. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1013460999649007604L;",
        "begin_line": 170,
        "end_line": 170,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_DATE_RANGE",
        "snippet": "    public static final DateRange DEFAULT_DATE_RANGE = new DateRange();",
        "begin_line": 173,
        "end_line": 173,
        "comment": " The default axis range. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS",
        "snippet": "    public static final double \n            DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS = 2.0;",
        "begin_line": 176,
        "end_line": 177,
        "comment": " The default minimum auto range size. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_DATE_TICK_UNIT",
        "snippet": "    public static final DateTickUnit DEFAULT_DATE_TICK_UNIT\n            = new DateTickUnit(DateTickUnit.DAY, 1, new SimpleDateFormat());",
        "begin_line": 180,
        "end_line": 181,
        "comment": " The default date tick unit. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_ANCHOR_DATE",
        "snippet": "    public static final Date DEFAULT_ANCHOR_DATE = new Date();",
        "begin_line": 184,
        "end_line": 184,
        "comment": " The default anchor date. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.tickUnit",
        "snippet": "    private DateTickUnit tickUnit;",
        "begin_line": 187,
        "end_line": 187,
        "comment": " The current tick unit. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.dateFormatOverride",
        "snippet": "    private DateFormat dateFormatOverride;",
        "begin_line": 190,
        "end_line": 190,
        "comment": " The override date format. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.tickMarkPosition",
        "snippet": "    private DateTickMarkPosition tickMarkPosition = DateTickMarkPosition.START;",
        "begin_line": 196,
        "end_line": 196,
        "comment": " \r\n     * Tick marks can be displayed at the start or the middle of the time \r\n     * period. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_TIMELINE",
        "snippet": "    private static final Timeline DEFAULT_TIMELINE = new DefaultTimeline();",
        "begin_line": 310,
        "end_line": 310,
        "comment": " A static default timeline shared by all standard DateAxis "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.timeZone",
        "snippet": "    private TimeZone timeZone;",
        "begin_line": 313,
        "end_line": 313,
        "comment": " The time zone for the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.timeline",
        "snippet": "    private Timeline timeline;",
        "begin_line": 316,
        "end_line": 316,
        "comment": " Our underlying timeline. "
    },
    {
        "class_name": "org.jfree.chart.axis.SubCategoryAxis",
        "src_path": "source/org/jfree/chart/axis/SubCategoryAxis.java",
        "signature": "org.jfree.chart.axis.SubCategoryAxis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1279463299793228344L;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.SubCategoryAxis",
        "src_path": "source/org/jfree/chart/axis/SubCategoryAxis.java",
        "signature": "org.jfree.chart.axis.SubCategoryAxis.subCategories",
        "snippet": "    private List subCategories;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Storage for the sub-categories (these need to be set manually). "
    },
    {
        "class_name": "org.jfree.chart.axis.SubCategoryAxis",
        "src_path": "source/org/jfree/chart/axis/SubCategoryAxis.java",
        "signature": "org.jfree.chart.axis.SubCategoryAxis.subLabelFont",
        "snippet": "    private Font subLabelFont = new Font(\"SansSerif\", Font.PLAIN, 10);",
        "begin_line": 89,
        "end_line": 89,
        "comment": " The font for the sub-category labels. "
    },
    {
        "class_name": "org.jfree.chart.axis.SubCategoryAxis",
        "src_path": "source/org/jfree/chart/axis/SubCategoryAxis.java",
        "signature": "org.jfree.chart.axis.SubCategoryAxis.subLabelPaint",
        "snippet": "    private transient Paint subLabelPaint = Color.black;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " The paint for the sub-category labels. "
    },
    {
        "class_name": "org.jfree.chart.axis.ExtendedCategoryAxis",
        "src_path": "source/org/jfree/chart/axis/ExtendedCategoryAxis.java",
        "signature": "org.jfree.chart.axis.ExtendedCategoryAxis.sublabels",
        "snippet": "    private Map sublabels;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Storage for the sublabels. "
    },
    {
        "class_name": "org.jfree.chart.axis.ExtendedCategoryAxis",
        "src_path": "source/org/jfree/chart/axis/ExtendedCategoryAxis.java",
        "signature": "org.jfree.chart.axis.ExtendedCategoryAxis.sublabelFont",
        "snippet": "    private Font sublabelFont;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The sublabel font. "
    },
    {
        "class_name": "org.jfree.chart.axis.ExtendedCategoryAxis",
        "src_path": "source/org/jfree/chart/axis/ExtendedCategoryAxis.java",
        "signature": "org.jfree.chart.axis.ExtendedCategoryAxis.sublabelPaint",
        "snippet": "    private transient Paint sublabelPaint;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The sublabel paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "signature": "org.jfree.chart.axis.AxisCollection.axesAtTop",
        "snippet": "    private List axesAtTop;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The axes that need to be drawn at the top of the plot area. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "signature": "org.jfree.chart.axis.AxisCollection.axesAtBottom",
        "snippet": "    private List axesAtBottom;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The axes that need to be drawn at the bottom of the plot area. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "signature": "org.jfree.chart.axis.AxisCollection.axesAtLeft",
        "snippet": "    private List axesAtLeft;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The axes that need to be drawn at the left of the plot area. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "signature": "org.jfree.chart.axis.AxisCollection.axesAtRight",
        "snippet": "    private List axesAtRight;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The axes that need to be drawn at the right of the plot area. "
    },
    {
        "class_name": "org.jfree.chart.axis.QuarterDateFormat",
        "src_path": "source/org/jfree/chart/axis/QuarterDateFormat.java",
        "signature": "org.jfree.chart.axis.QuarterDateFormat.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6738465248529797176L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.QuarterDateFormat",
        "src_path": "source/org/jfree/chart/axis/QuarterDateFormat.java",
        "signature": "org.jfree.chart.axis.QuarterDateFormat.REGULAR_QUARTERS",
        "snippet": "    public static final String[] REGULAR_QUARTERS = new String[] {\"1\", \"2\", \n            \"3\", \"4\"};",
        "begin_line": 70,
        "end_line": 71,
        "comment": " Symbols for regular quarters. "
    },
    {
        "class_name": "org.jfree.chart.axis.QuarterDateFormat",
        "src_path": "source/org/jfree/chart/axis/QuarterDateFormat.java",
        "signature": "org.jfree.chart.axis.QuarterDateFormat.ROMAN_QUARTERS",
        "snippet": "    public static final String[] ROMAN_QUARTERS  = new String[] {\"I\", \"II\", \n            \"III\", \"IV\"};",
        "begin_line": 74,
        "end_line": 75,
        "comment": " Symbols for roman numbered quarters. "
    },
    {
        "class_name": "org.jfree.chart.axis.QuarterDateFormat",
        "src_path": "source/org/jfree/chart/axis/QuarterDateFormat.java",
        "signature": "org.jfree.chart.axis.QuarterDateFormat.GREEK_QUARTERS",
        "snippet": "    public static final String[] GREEK_QUARTERS = new String[] {\"\\u0391\", \n            \"\\u0392\", \"\\u0393\", \"\\u0394\"};",
        "begin_line": 82,
        "end_line": 83,
        "comment": " \r\n     * Symbols for greek numbered quarters. \r\n     *\r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.QuarterDateFormat",
        "src_path": "source/org/jfree/chart/axis/QuarterDateFormat.java",
        "signature": "org.jfree.chart.axis.QuarterDateFormat.quarters",
        "snippet": "    private String[] quarters = REGULAR_QUARTERS;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " The strings. "
    },
    {
        "class_name": "org.jfree.chart.axis.QuarterDateFormat",
        "src_path": "source/org/jfree/chart/axis/QuarterDateFormat.java",
        "signature": "org.jfree.chart.axis.QuarterDateFormat.quarterFirst",
        "snippet": "    private boolean quarterFirst;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " A flag that controls whether the quarter or the year goes first. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelWidthType",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelWidthType.java",
        "signature": "org.jfree.chart.axis.CategoryLabelWidthType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6976024792582949656L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelWidthType",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelWidthType.java",
        "signature": "org.jfree.chart.axis.CategoryLabelWidthType.CATEGORY",
        "snippet": "    public static final CategoryLabelWidthType \n        CATEGORY = new CategoryLabelWidthType(\n            \"CategoryLabelWidthType.CATEGORY\"\n        );",
        "begin_line": 55,
        "end_line": 58,
        "comment": " Percentage of category. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelWidthType",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelWidthType.java",
        "signature": "org.jfree.chart.axis.CategoryLabelWidthType.RANGE",
        "snippet": "    public static final CategoryLabelWidthType \n        RANGE = new CategoryLabelWidthType(\"CategoryLabelWidthType.RANGE\");",
        "begin_line": 61,
        "end_line": 62,
        "comment": " Percentage of range. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelWidthType",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelWidthType.java",
        "signature": "org.jfree.chart.axis.CategoryLabelWidthType.name",
        "snippet": "    private String name;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5168681143844183864L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.categoryAnchor",
        "snippet": "    private RectangleAnchor categoryAnchor;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The category anchor point. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.labelAnchor",
        "snippet": "    private TextBlockAnchor labelAnchor;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The text block anchor. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.rotationAnchor",
        "snippet": "    private TextAnchor rotationAnchor;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The rotation anchor. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.angle",
        "snippet": "    private double angle;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The rotation angle (in radians). "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.widthType",
        "snippet": "    private CategoryLabelWidthType widthType;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The width calculation type. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.widthRatio",
        "snippet": "    private float widthRatio;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " \r\n     * The maximum label width as a percentage of the category space or the \r\n     * range space. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.LogAxis",
        "src_path": "source/org/jfree/chart/axis/LogAxis.java",
        "signature": "org.jfree.chart.axis.LogAxis.base",
        "snippet": "    private double base = 10.0;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The logarithm base. "
    },
    {
        "class_name": "org.jfree.chart.axis.LogAxis",
        "src_path": "source/org/jfree/chart/axis/LogAxis.java",
        "signature": "org.jfree.chart.axis.LogAxis.baseLog",
        "snippet": "    private double baseLog = Math.log(10.0);",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The logarithm of the base value - cached for performance. "
    },
    {
        "class_name": "org.jfree.chart.axis.LogAxis",
        "src_path": "source/org/jfree/chart/axis/LogAxis.java",
        "signature": "org.jfree.chart.axis.LogAxis.smallestValue",
        "snippet": "    private double smallestValue = 1E-100;",
        "begin_line": 93,
        "end_line": 93,
        "comment": "  The smallest value permitted on the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.LogAxis",
        "src_path": "source/org/jfree/chart/axis/LogAxis.java",
        "signature": "org.jfree.chart.axis.LogAxis.tickUnit",
        "snippet": "    private NumberTickUnit tickUnit;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " The current tick unit. "
    },
    {
        "class_name": "org.jfree.chart.axis.LogAxis",
        "src_path": "source/org/jfree/chart/axis/LogAxis.java",
        "signature": "org.jfree.chart.axis.LogAxis.numberFormatOverride",
        "snippet": "    private NumberFormat numberFormatOverride;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The override number format. "
    },
    {
        "class_name": "org.jfree.chart.axis.LogAxis",
        "src_path": "source/org/jfree/chart/axis/LogAxis.java",
        "signature": "org.jfree.chart.axis.LogAxis.minorTickCount",
        "snippet": "    private int minorTickCount; ",
        "begin_line": 102,
        "end_line": 102,
        "comment": " The number of minor ticks per major tick unit. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis3D",
        "src_path": "source/org/jfree/chart/axis/NumberAxis3D.java",
        "signature": "org.jfree.chart.axis.NumberAxis3D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1790205852569123512L;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.TickUnit",
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "signature": "org.jfree.chart.axis.TickUnit.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 510179855057013974L;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.TickUnit",
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "signature": "org.jfree.chart.axis.TickUnit.size",
        "snippet": "    private double size;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The size of the tick unit. "
    },
    {
        "class_name": "org.jfree.chart.axis.TickUnit",
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "signature": "org.jfree.chart.axis.TickUnit.minorTickCount",
        "snippet": "    private int minorTickCount;",
        "begin_line": 76,
        "end_line": 76,
        "comment": "\r\n     * The number of minor ticks.\r\n     * \r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis3D",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis3D.java",
        "signature": "org.jfree.chart.axis.CategoryAxis3D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4114732251353700972L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.TickType",
        "src_path": "source/org/jfree/chart/axis/TickType.java",
        "signature": "org.jfree.chart.axis.TickType.MAJOR",
        "snippet": "    public static final TickType MAJOR = new TickType(\"MAJOR\");",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Major tick. "
    },
    {
        "class_name": "org.jfree.chart.axis.TickType",
        "src_path": "source/org/jfree/chart/axis/TickType.java",
        "signature": "org.jfree.chart.axis.TickType.MINOR",
        "snippet": "    public static final TickType MINOR = new TickType(\"MINOR\");",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Minor tick. "
    },
    {
        "class_name": "org.jfree.chart.axis.TickType",
        "src_path": "source/org/jfree/chart/axis/TickType.java",
        "signature": "org.jfree.chart.axis.TickType.name",
        "snippet": "    private String name;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "signature": "org.jfree.chart.axis.AxisLocation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3276922179323563410L;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "signature": "org.jfree.chart.axis.AxisLocation.TOP_OR_LEFT",
        "snippet": "    public static final AxisLocation TOP_OR_LEFT = new AxisLocation(\n            \"AxisLocation.TOP_OR_LEFT\");",
        "begin_line": 61,
        "end_line": 62,
        "comment": " Axis at the top or left. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "signature": "org.jfree.chart.axis.AxisLocation.TOP_OR_RIGHT",
        "snippet": "    public static final AxisLocation TOP_OR_RIGHT = new AxisLocation(\n            \"AxisLocation.TOP_OR_RIGHT\");",
        "begin_line": 65,
        "end_line": 66,
        "comment": " Axis at the top or right. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "signature": "org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT",
        "snippet": "    public static final AxisLocation BOTTOM_OR_LEFT = new AxisLocation(\n            \"AxisLocation.BOTTOM_OR_LEFT\");",
        "begin_line": 69,
        "end_line": 70,
        "comment": " Axis at the bottom or left. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "signature": "org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT",
        "snippet": "    public static final AxisLocation BOTTOM_OR_RIGHT = new AxisLocation(\n            \"AxisLocation.BOTTOM_OR_RIGHT\");",
        "begin_line": 73,
        "end_line": 74,
        "comment": " Axis at the bottom or right. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "signature": "org.jfree.chart.axis.AxisLocation.name",
        "snippet": "    private String name;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.axis.StandardTickUnitSource",
        "src_path": "source/org/jfree/chart/axis/StandardTickUnitSource.java",
        "signature": "org.jfree.chart.axis.StandardTickUnitSource.LOG_10_VALUE",
        "snippet": "    private static final double LOG_10_VALUE = Math.log(10.0);",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Constant for log(10.0). "
    },
    {
        "class_name": "org.jfree.chart.axis.MarkerAxisBand",
        "src_path": "source/org/jfree/chart/axis/MarkerAxisBand.java",
        "signature": "org.jfree.chart.axis.MarkerAxisBand.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1729482413886398919L;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.MarkerAxisBand",
        "src_path": "source/org/jfree/chart/axis/MarkerAxisBand.java",
        "signature": "org.jfree.chart.axis.MarkerAxisBand.axis",
        "snippet": "    private NumberAxis axis;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The axis that the band belongs to. "
    },
    {
        "class_name": "org.jfree.chart.axis.MarkerAxisBand",
        "src_path": "source/org/jfree/chart/axis/MarkerAxisBand.java",
        "signature": "org.jfree.chart.axis.MarkerAxisBand.topOuterGap",
        "snippet": "    private double topOuterGap;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The top outer gap. "
    },
    {
        "class_name": "org.jfree.chart.axis.MarkerAxisBand",
        "src_path": "source/org/jfree/chart/axis/MarkerAxisBand.java",
        "signature": "org.jfree.chart.axis.MarkerAxisBand.topInnerGap",
        "snippet": "    private double topInnerGap;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " The top inner gap. "
    },
    {
        "class_name": "org.jfree.chart.axis.MarkerAxisBand",
        "src_path": "source/org/jfree/chart/axis/MarkerAxisBand.java",
        "signature": "org.jfree.chart.axis.MarkerAxisBand.bottomOuterGap",
        "snippet": "    private double bottomOuterGap;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " The bottom outer gap. "
    },
    {
        "class_name": "org.jfree.chart.axis.MarkerAxisBand",
        "src_path": "source/org/jfree/chart/axis/MarkerAxisBand.java",
        "signature": "org.jfree.chart.axis.MarkerAxisBand.bottomInnerGap",
        "snippet": "    private double bottomInnerGap;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " The bottom inner gap. "
    },
    {
        "class_name": "org.jfree.chart.axis.MarkerAxisBand",
        "src_path": "source/org/jfree/chart/axis/MarkerAxisBand.java",
        "signature": "org.jfree.chart.axis.MarkerAxisBand.font",
        "snippet": "    private Font font;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " The font. "
    },
    {
        "class_name": "org.jfree.chart.axis.MarkerAxisBand",
        "src_path": "source/org/jfree/chart/axis/MarkerAxisBand.java",
        "signature": "org.jfree.chart.axis.MarkerAxisBand.markers",
        "snippet": "    private List markers;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Storage for the markers. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7289292157229621901L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.YEAR",
        "snippet": "    public static final int YEAR = 0;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " A constant for years. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.MONTH",
        "snippet": "    public static final int MONTH = 1;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " A constant for months. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.DAY",
        "snippet": "    public static final int DAY = 2;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " A constant for days. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.HOUR",
        "snippet": "    public static final int HOUR = 3;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " A constant for hours. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.MINUTE",
        "snippet": "    public static final int MINUTE = 4;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " A constant for minutes. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.SECOND",
        "snippet": "    public static final int SECOND = 5;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " A constant for seconds. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.MILLISECOND",
        "snippet": "    public static final int MILLISECOND = 6;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " A constant for milliseconds. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.unit",
        "snippet": "    private int unit;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " The unit. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.count",
        "snippet": "    private int count;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " The unit count. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.rollUnit",
        "snippet": "    private int rollUnit;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " The roll unit. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.rollCount",
        "snippet": "    private int rollCount;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " The roll count. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.formatter",
        "snippet": "    private DateFormat formatter;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " The date formatter. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.units",
        "snippet": "    private static final String[] units = {\"YEAR\", \"MONTH\", \"DAY\", \"HOUR\", \n            \"MINUTE\", \"SECOND\", \"MILLISECOND\"};",
        "begin_line": 423,
        "end_line": 424,
        "comment": "\r\n     * Strings for use by the toString() method.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.MonthDateFormat",
        "src_path": "source/org/jfree/chart/axis/MonthDateFormat.java",
        "signature": "org.jfree.chart.axis.MonthDateFormat.months",
        "snippet": "    private String[] months;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The symbols used for the months. "
    },
    {
        "class_name": "org.jfree.chart.axis.MonthDateFormat",
        "src_path": "source/org/jfree/chart/axis/MonthDateFormat.java",
        "signature": "org.jfree.chart.axis.MonthDateFormat.showYear",
        "snippet": "    private boolean[] showYear;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Flags that control which months will have the year appended. "
    },
    {
        "class_name": "org.jfree.chart.axis.MonthDateFormat",
        "src_path": "source/org/jfree/chart/axis/MonthDateFormat.java",
        "signature": "org.jfree.chart.axis.MonthDateFormat.yearFormatter",
        "snippet": "    private DateFormat yearFormatter;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The year formatter. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueTick",
        "src_path": "source/org/jfree/chart/axis/ValueTick.java",
        "signature": "org.jfree.chart.axis.ValueTick.value",
        "snippet": "    private double value;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The value. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueTick",
        "src_path": "source/org/jfree/chart/axis/ValueTick.java",
        "signature": "org.jfree.chart.axis.ValueTick.tickType",
        "snippet": "    private TickType tickType;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " \r\n     * The tick type (major or minor). \r\n     *\r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberTickUnit",
        "src_path": "source/org/jfree/chart/axis/NumberTickUnit.java",
        "signature": "org.jfree.chart.axis.NumberTickUnit.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3849459506627654442L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberTickUnit",
        "src_path": "source/org/jfree/chart/axis/NumberTickUnit.java",
        "signature": "org.jfree.chart.axis.NumberTickUnit.formatter",
        "snippet": "    private NumberFormat formatter;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " A formatter for the tick unit. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTick",
        "src_path": "source/org/jfree/chart/axis/DateTick.java",
        "signature": "org.jfree.chart.axis.DateTick.date",
        "snippet": "    private Date date;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The date. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3698345477322391456L;",
        "begin_line": 144,
        "end_line": 144,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_RANGE",
        "snippet": "    public static final Range DEFAULT_RANGE = new Range(0.0, 1.0);",
        "begin_line": 147,
        "end_line": 147,
        "comment": " The default axis range. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_AUTO_RANGE",
        "snippet": "    public static final boolean DEFAULT_AUTO_RANGE = true;",
        "begin_line": 150,
        "end_line": 150,
        "comment": " The default auto-range value. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_INVERTED",
        "snippet": "    public static final boolean DEFAULT_INVERTED = false;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " The default inverted flag setting. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE",
        "snippet": "    public static final double DEFAULT_AUTO_RANGE_MINIMUM_SIZE = 0.00000001;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " The default minimum auto range. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_LOWER_MARGIN",
        "snippet": "    public static final double DEFAULT_LOWER_MARGIN = 0.05;",
        "begin_line": 159,
        "end_line": 159,
        "comment": " The default value for the lower margin (0.05 = 5%). "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_UPPER_MARGIN",
        "snippet": "    public static final double DEFAULT_UPPER_MARGIN = 0.05;",
        "begin_line": 162,
        "end_line": 162,
        "comment": " The default value for the upper margin (0.05 = 5%). "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION",
        "snippet": "    public static final boolean DEFAULT_AUTO_TICK_UNIT_SELECTION = true;",
        "begin_line": 165,
        "end_line": 165,
        "comment": " The default auto-tick-unit-selection value. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.MAXIMUM_TICK_COUNT",
        "snippet": "    public static final int MAXIMUM_TICK_COUNT = 500;",
        "begin_line": 168,
        "end_line": 168,
        "comment": " The maximum tick count. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.positiveArrowVisible",
        "snippet": "    private boolean positiveArrowVisible;",
        "begin_line": 174,
        "end_line": 174,
        "comment": " \r\n     * A flag that controls whether an arrow is drawn at the positive end of \r\n     * the axis line. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.negativeArrowVisible",
        "snippet": "    private boolean negativeArrowVisible;",
        "begin_line": 180,
        "end_line": 180,
        "comment": " \r\n     * A flag that controls whether an arrow is drawn at the negative end of \r\n     * the axis line. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.upArrow",
        "snippet": "    private transient Shape upArrow;",
        "begin_line": 183,
        "end_line": 183,
        "comment": " The shape used for an up arrow. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.downArrow",
        "snippet": "    private transient Shape downArrow;",
        "begin_line": 186,
        "end_line": 186,
        "comment": " The shape used for a down arrow. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.leftArrow",
        "snippet": "    private transient Shape leftArrow;",
        "begin_line": 189,
        "end_line": 189,
        "comment": " The shape used for a left arrow. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.rightArrow",
        "snippet": "    private transient Shape rightArrow;",
        "begin_line": 192,
        "end_line": 192,
        "comment": " The shape used for a right arrow. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.inverted",
        "snippet": "    private boolean inverted;",
        "begin_line": 195,
        "end_line": 195,
        "comment": " A flag that affects the orientation of the values on the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.range",
        "snippet": "    private Range range;",
        "begin_line": 198,
        "end_line": 198,
        "comment": " The axis range. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.autoRange",
        "snippet": "    private boolean autoRange;",
        "begin_line": 204,
        "end_line": 204,
        "comment": " \r\n     * Flag that indicates whether the axis automatically scales to fit the \r\n     * chart data. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.autoRangeMinimumSize",
        "snippet": "    private double autoRangeMinimumSize;",
        "begin_line": 207,
        "end_line": 207,
        "comment": " The minimum size for the 'auto' axis range (excluding margins). "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.defaultAutoRange",
        "snippet": "    private Range defaultAutoRange;",
        "begin_line": 215,
        "end_line": 215,
        "comment": "\r\n     * The default range is used when the dataset is empty and the axis needs\r\n     * to determine the auto range.\r\n     * \r\n     * @since 1.0.5\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.upperMargin",
        "snippet": "    private double upperMargin;",
        "begin_line": 222,
        "end_line": 222,
        "comment": "\r\n     * The upper margin percentage.  This indicates the amount by which the \r\n     * maximum axis value exceeds the maximum data value (as a percentage of \r\n     * the range on the axis) when the axis range is determined automatically.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.lowerMargin",
        "snippet": "    private double lowerMargin;",
        "begin_line": 229,
        "end_line": 229,
        "comment": "\r\n     * The lower margin.  This is a percentage that indicates the amount by\r\n     * which the minimum axis value is \"less than\" the minimum data value when\r\n     * the axis range is determined automatically.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.fixedAutoRange",
        "snippet": "    private double fixedAutoRange;",
        "begin_line": 236,
        "end_line": 236,
        "comment": "\r\n     * If this value is positive, the amount is subtracted from the maximum\r\n     * data value to determine the lower axis range.  This can be used to\r\n     * provide a fixed \"window\" on dynamic data.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.autoTickUnitSelection",
        "snippet": "    private boolean autoTickUnitSelection;",
        "begin_line": 242,
        "end_line": 242,
        "comment": " \r\n     * Flag that indicates whether or not the tick unit is selected \r\n     * automatically. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.standardTickUnits",
        "snippet": "    private TickUnitSource standardTickUnits;",
        "begin_line": 245,
        "end_line": 245,
        "comment": " The standard tick units for the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.autoTickIndex",
        "snippet": "    private int autoTickIndex;",
        "begin_line": 248,
        "end_line": 248,
        "comment": " An index into an array of standard tick values. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.verticalTickLabels",
        "snippet": "    private boolean verticalTickLabels;",
        "begin_line": 251,
        "end_line": 251,
        "comment": " A flag indicating whether or not tick labels are rotated to vertical. "
    },
    {
        "class_name": "org.jfree.chart.axis.CyclicNumberAxis",
        "src_path": "source/org/jfree/chart/axis/CyclicNumberAxis.java",
        "signature": "org.jfree.chart.axis.CyclicNumberAxis.DEFAULT_ADVANCE_LINE_STROKE",
        "snippet": "    public static Stroke DEFAULT_ADVANCE_LINE_STROKE = new BasicStroke(1.0f);",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The default axis line stroke. "
    },
    {
        "class_name": "org.jfree.chart.axis.CyclicNumberAxis",
        "src_path": "source/org/jfree/chart/axis/CyclicNumberAxis.java",
        "signature": "org.jfree.chart.axis.CyclicNumberAxis.DEFAULT_ADVANCE_LINE_PAINT",
        "snippet": "    public static final Paint DEFAULT_ADVANCE_LINE_PAINT = Color.gray;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " The default axis line paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.CyclicNumberAxis",
        "src_path": "source/org/jfree/chart/axis/CyclicNumberAxis.java",
        "signature": "org.jfree.chart.axis.CyclicNumberAxis.offset",
        "snippet": "    protected double offset;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " The offset. "
    },
    {
        "class_name": "org.jfree.chart.axis.CyclicNumberAxis",
        "src_path": "source/org/jfree/chart/axis/CyclicNumberAxis.java",
        "signature": "org.jfree.chart.axis.CyclicNumberAxis.period",
        "snippet": "    protected double period;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " The period."
    },
    {
        "class_name": "org.jfree.chart.axis.CyclicNumberAxis",
        "src_path": "source/org/jfree/chart/axis/CyclicNumberAxis.java",
        "signature": "org.jfree.chart.axis.CyclicNumberAxis.boundMappedToLastCycle",
        "snippet": "    protected boolean boundMappedToLastCycle;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " ??. "
    },
    {
        "class_name": "org.jfree.chart.axis.CyclicNumberAxis",
        "src_path": "source/org/jfree/chart/axis/CyclicNumberAxis.java",
        "signature": "org.jfree.chart.axis.CyclicNumberAxis.advanceLineVisible",
        "snippet": "    protected boolean advanceLineVisible;",
        "begin_line": 145,
        "end_line": 145,
        "comment": " A flag that controls whether or not the advance line is visible. "
    },
    {
        "class_name": "org.jfree.chart.axis.CyclicNumberAxis",
        "src_path": "source/org/jfree/chart/axis/CyclicNumberAxis.java",
        "signature": "org.jfree.chart.axis.CyclicNumberAxis.advanceLineStroke",
        "snippet": "    protected transient Stroke advanceLineStroke = DEFAULT_ADVANCE_LINE_STROKE;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " The advance line stroke. "
    },
    {
        "class_name": "org.jfree.chart.axis.CyclicNumberAxis",
        "src_path": "source/org/jfree/chart/axis/CyclicNumberAxis.java",
        "signature": "org.jfree.chart.axis.CyclicNumberAxis.advanceLinePaint",
        "snippet": "    protected transient Paint advanceLinePaint;",
        "begin_line": 151,
        "end_line": 151,
        "comment": " The advance line paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.CyclicNumberAxis",
        "src_path": "source/org/jfree/chart/axis/CyclicNumberAxis.java",
        "signature": "org.jfree.chart.axis.CyclicNumberAxis.internalMarkerWhenTicksOverlap",
        "snippet": "    private transient boolean internalMarkerWhenTicksOverlap;",
        "begin_line": 153,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.axis.CyclicNumberAxis",
        "src_path": "source/org/jfree/chart/axis/CyclicNumberAxis.java",
        "signature": "org.jfree.chart.axis.CyclicNumberAxis.internalMarkerCycleBoundTick",
        "snippet": "    private transient Tick internalMarkerCycleBoundTick;",
        "begin_line": 154,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.axis.CycleBoundTick",
        "src_path": "source/org/jfree/chart/axis/CyclicNumberAxis.java",
        "signature": "org.jfree.chart.axis.CycleBoundTick.mapToLastCycle",
        "snippet": "        public boolean mapToLastCycle;",
        "begin_line": 364,
        "end_line": 364,
        "comment": " Map to last cycle. "
    },
    {
        "class_name": "org.jfree.chart.axis.CompassFormat",
        "src_path": "source/org/jfree/chart/axis/CompassFormat.java",
        "signature": "org.jfree.chart.axis.CompassFormat.N",
        "snippet": "    private static final String N = \"N\";",
        "begin_line": 53,
        "end_line": 53,
        "comment": " North. "
    },
    {
        "class_name": "org.jfree.chart.axis.CompassFormat",
        "src_path": "source/org/jfree/chart/axis/CompassFormat.java",
        "signature": "org.jfree.chart.axis.CompassFormat.E",
        "snippet": "    private static final String E = \"E\";",
        "begin_line": 56,
        "end_line": 56,
        "comment": " East. "
    },
    {
        "class_name": "org.jfree.chart.axis.CompassFormat",
        "src_path": "source/org/jfree/chart/axis/CompassFormat.java",
        "signature": "org.jfree.chart.axis.CompassFormat.S",
        "snippet": "    private static final String S = \"S\";",
        "begin_line": 59,
        "end_line": 59,
        "comment": " South. "
    },
    {
        "class_name": "org.jfree.chart.axis.CompassFormat",
        "src_path": "source/org/jfree/chart/axis/CompassFormat.java",
        "signature": "org.jfree.chart.axis.CompassFormat.W",
        "snippet": "    private static final String W = \"W\";",
        "begin_line": 62,
        "end_line": 62,
        "comment": " West. "
    },
    {
        "class_name": "org.jfree.chart.axis.CompassFormat",
        "src_path": "source/org/jfree/chart/axis/CompassFormat.java",
        "signature": "org.jfree.chart.axis.CompassFormat.DIRECTIONS",
        "snippet": "    public static final String[] DIRECTIONS = {\n        N, N + N + E, N + E, E + N + E, E, E + S + E, S + E, S + S + E, S,\n        S + S + W, S + W, W + S + W, W, W + N + W, N + W, N + N + W, N\n    };",
        "begin_line": 65,
        "end_line": 68,
        "comment": " The directions. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "signature": "org.jfree.chart.axis.CategoryAnchor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2604142742210173810L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "signature": "org.jfree.chart.axis.CategoryAnchor.START",
        "snippet": "    public static final CategoryAnchor START \n        = new CategoryAnchor(\"CategoryAnchor.START\");",
        "begin_line": 56,
        "end_line": 57,
        "comment": " Start of period. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "signature": "org.jfree.chart.axis.CategoryAnchor.MIDDLE",
        "snippet": "    public static final CategoryAnchor MIDDLE \n        = new CategoryAnchor(\"CategoryAnchor.MIDDLE\");",
        "begin_line": 60,
        "end_line": 61,
        "comment": " Middle of period. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "signature": "org.jfree.chart.axis.CategoryAnchor.END",
        "snippet": "    public static final CategoryAnchor END \n        = new CategoryAnchor(\"CategoryAnchor.END\");",
        "begin_line": 64,
        "end_line": 65,
        "comment": " End of period. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "signature": "org.jfree.chart.axis.CategoryAnchor.name",
        "snippet": "    private String name;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.axis.Tick",
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "signature": "org.jfree.chart.axis.Tick.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6668230383875149773L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.Tick",
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "signature": "org.jfree.chart.axis.Tick.text",
        "snippet": "    private String text;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " A text version of the tick value. "
    },
    {
        "class_name": "org.jfree.chart.axis.Tick",
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "signature": "org.jfree.chart.axis.Tick.textAnchor",
        "snippet": "    private TextAnchor textAnchor;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The text anchor for the tick label. "
    },
    {
        "class_name": "org.jfree.chart.axis.Tick",
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "signature": "org.jfree.chart.axis.Tick.rotationAnchor",
        "snippet": "    private TextAnchor rotationAnchor;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The rotation anchor for the tick label. "
    },
    {
        "class_name": "org.jfree.chart.axis.Tick",
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "signature": "org.jfree.chart.axis.Tick.angle",
        "snippet": "    private double angle;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The rotation angle. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2805933088476185789L;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO",
        "snippet": "    public static final boolean DEFAULT_AUTO_RANGE_INCLUDES_ZERO = true;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " The default value for the autoRangeIncludesZero flag. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO",
        "snippet": "    public static final boolean DEFAULT_AUTO_RANGE_STICKY_ZERO = true;",
        "begin_line": 145,
        "end_line": 145,
        "comment": " The default value for the autoRangeStickyZero flag. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.DEFAULT_TICK_UNIT",
        "snippet": "    public static final NumberTickUnit DEFAULT_TICK_UNIT = new NumberTickUnit(\n            1.0, new DecimalFormat(\"0\"));",
        "begin_line": 148,
        "end_line": 149,
        "comment": " The default tick unit. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.DEFAULT_VERTICAL_TICK_LABELS",
        "snippet": "    public static final boolean DEFAULT_VERTICAL_TICK_LABELS = false;",
        "begin_line": 152,
        "end_line": 152,
        "comment": " The default setting for the vertical tick labels flag. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.rangeType",
        "snippet": "    private RangeType rangeType;",
        "begin_line": 158,
        "end_line": 158,
        "comment": " \r\n     * The range type (can be used to force the axis to display only positive\r\n     * values or only negative values).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.autoRangeIncludesZero",
        "snippet": "    private boolean autoRangeIncludesZero;",
        "begin_line": 165,
        "end_line": 165,
        "comment": "\r\n     * A flag that affects the axis range when the range is determined\r\n     * automatically.  If the auto range does NOT include zero and this flag\r\n     * is TRUE, then the range is changed to include zero.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.autoRangeStickyZero",
        "snippet": "    private boolean autoRangeStickyZero;",
        "begin_line": 172,
        "end_line": 172,
        "comment": "\r\n     * A flag that affects the size of the margins added to the axis range when\r\n     * the range is determined automatically.  If the value 0 falls within the\r\n     * margin and this flag is TRUE, then the margin is truncated at zero.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.tickUnit",
        "snippet": "    private NumberTickUnit tickUnit;",
        "begin_line": 175,
        "end_line": 175,
        "comment": " The tick unit for the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.numberFormatOverride",
        "snippet": "    private NumberFormat numberFormatOverride;",
        "begin_line": 178,
        "end_line": 178,
        "comment": " The override number format. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.markerBand",
        "snippet": "    private MarkerAxisBand markerBand;",
        "begin_line": 181,
        "end_line": 181,
        "comment": " An optional band for marking regions on the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8999557901920364580L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.STANDARD",
        "snippet": "    public static final CategoryLabelPositions \n        STANDARD = new CategoryLabelPositions(\n            new CategoryLabelPosition(\n                RectangleAnchor.BOTTOM, TextBlockAnchor.BOTTOM_CENTER\n            ), // TOP\n            new CategoryLabelPosition(\n                RectangleAnchor.TOP, TextBlockAnchor.TOP_CENTER\n            ), // BOTTOM\n            new CategoryLabelPosition(\n                RectangleAnchor.RIGHT, TextBlockAnchor.CENTER_RIGHT, \n                CategoryLabelWidthType.RANGE, 0.30f\n            ), // LEFT\n            new CategoryLabelPosition(\n                RectangleAnchor.LEFT, TextBlockAnchor.CENTER_LEFT, \n                CategoryLabelWidthType.RANGE, 0.30f\n            ) // RIGHT\n        );",
        "begin_line": 63,
        "end_line": 79,
        "comment": " STANDARD category label positions. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.UP_90",
        "snippet": "    public static final CategoryLabelPositions \n        UP_90 = new CategoryLabelPositions(\n            new CategoryLabelPosition(\n                RectangleAnchor.BOTTOM, TextBlockAnchor.CENTER_LEFT, \n                TextAnchor.CENTER_LEFT, -Math.PI / 2.0,\n                CategoryLabelWidthType.RANGE, 0.30f\n            ), // TOP\n            new CategoryLabelPosition(\n                RectangleAnchor.TOP, TextBlockAnchor.CENTER_RIGHT, \n                TextAnchor.CENTER_RIGHT, -Math.PI / 2.0,\n                CategoryLabelWidthType.RANGE, 0.30f\n            ), // BOTTOM\n            new CategoryLabelPosition(\n                RectangleAnchor.RIGHT, TextBlockAnchor.BOTTOM_CENTER, \n                TextAnchor.BOTTOM_CENTER, -Math.PI / 2.0,\n                CategoryLabelWidthType.CATEGORY, 0.9f\n            ), // LEFT\n            new CategoryLabelPosition(\n                RectangleAnchor.LEFT, TextBlockAnchor.TOP_CENTER, \n                TextAnchor.TOP_CENTER, -Math.PI / 2.0,\n                CategoryLabelWidthType.CATEGORY, 0.90f\n            ) // RIGHT\n        );",
        "begin_line": 82,
        "end_line": 104,
        "comment": " UP_90 category label positions. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.DOWN_90",
        "snippet": "    public static final CategoryLabelPositions \n        DOWN_90 = new CategoryLabelPositions(\n            new CategoryLabelPosition(\n                RectangleAnchor.BOTTOM, TextBlockAnchor.CENTER_RIGHT, \n                TextAnchor.CENTER_RIGHT, Math.PI / 2.0,\n                CategoryLabelWidthType.RANGE, 0.30f\n            ), // TOP\n            new CategoryLabelPosition(\n                RectangleAnchor.TOP, TextBlockAnchor.CENTER_LEFT, \n                TextAnchor.CENTER_LEFT, Math.PI / 2.0,\n                CategoryLabelWidthType.RANGE, 0.30f\n            ), // BOTTOM\n            new CategoryLabelPosition(\n                RectangleAnchor.RIGHT, TextBlockAnchor.TOP_CENTER, \n                TextAnchor.TOP_CENTER, Math.PI / 2.0,\n                CategoryLabelWidthType.CATEGORY, 0.90f\n            ), // LEFT\n            new CategoryLabelPosition(\n                RectangleAnchor.LEFT, TextBlockAnchor.BOTTOM_CENTER, \n                TextAnchor.BOTTOM_CENTER, Math.PI / 2.0,\n                CategoryLabelWidthType.CATEGORY, 0.90f\n            ) // RIGHT\n        );",
        "begin_line": 107,
        "end_line": 129,
        "comment": " DOWN_90 category label positions. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.UP_45",
        "snippet": "    public static final CategoryLabelPositions UP_45 \n        = createUpRotationLabelPositions(Math.PI / 4.0);",
        "begin_line": 132,
        "end_line": 133,
        "comment": " UP_45 category label positions. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.DOWN_45",
        "snippet": "    public static final CategoryLabelPositions DOWN_45 \n        = createDownRotationLabelPositions(Math.PI / 4.0);",
        "begin_line": 136,
        "end_line": 137,
        "comment": " DOWN_45 category label positions. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.positionForAxisAtTop",
        "snippet": "    private CategoryLabelPosition positionForAxisAtTop;",
        "begin_line": 211,
        "end_line": 211,
        "comment": " \r\n     * The label positioning details used when an axis is at the top of a \r\n     * chart. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.positionForAxisAtBottom",
        "snippet": "    private CategoryLabelPosition positionForAxisAtBottom;",
        "begin_line": 217,
        "end_line": 217,
        "comment": " \r\n     * The label positioning details used when an axis is at the bottom of a \r\n     * chart. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.positionForAxisAtLeft",
        "snippet": "    private CategoryLabelPosition positionForAxisAtLeft;",
        "begin_line": 223,
        "end_line": 223,
        "comment": " \r\n     * The label positioning details used when an axis is at the left of a \r\n     * chart. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.positionForAxisAtRight",
        "snippet": "    private CategoryLabelPosition positionForAxisAtRight;",
        "begin_line": 229,
        "end_line": 229,
        "comment": " \r\n     * The label positioning details used when an axis is at the right of a \r\n     * chart. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.entity.TickLabelEntity",
        "src_path": "source/org/jfree/chart/entity/TickLabelEntity.java",
        "signature": "org.jfree.chart.entity.TickLabelEntity.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 681583956588092095L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.entity.StandardEntityCollection",
        "src_path": "source/org/jfree/chart/entity/StandardEntityCollection.java",
        "signature": "org.jfree.chart.entity.StandardEntityCollection.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5384773031184897047L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.entity.StandardEntityCollection",
        "src_path": "source/org/jfree/chart/entity/StandardEntityCollection.java",
        "signature": "org.jfree.chart.entity.StandardEntityCollection.entities",
        "snippet": "    private List entities;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Storage for the entities. "
    },
    {
        "class_name": "org.jfree.chart.entity.CategoryLabelEntity",
        "src_path": "source/org/jfree/chart/entity/CategoryLabelEntity.java",
        "signature": "org.jfree.chart.entity.CategoryLabelEntity.key",
        "snippet": "    private Comparable key;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The category key. "
    },
    {
        "class_name": "org.jfree.chart.entity.XYAnnotationEntity",
        "src_path": "source/org/jfree/chart/entity/XYAnnotationEntity.java",
        "signature": "org.jfree.chart.entity.XYAnnotationEntity.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2340334068383660799L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.entity.XYAnnotationEntity",
        "src_path": "source/org/jfree/chart/entity/XYAnnotationEntity.java",
        "signature": "org.jfree.chart.entity.XYAnnotationEntity.rendererIndex",
        "snippet": "    private int rendererIndex;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The renderer index. "
    },
    {
        "class_name": "org.jfree.chart.entity.AxisLabelEntity",
        "src_path": "source/org/jfree/chart/entity/AxisLabelEntity.java",
        "signature": "org.jfree.chart.entity.AxisLabelEntity.axis",
        "snippet": "    private Axis axis;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The axis. "
    },
    {
        "class_name": "org.jfree.chart.entity.CategoryItemEntity",
        "src_path": "source/org/jfree/chart/entity/CategoryItemEntity.java",
        "signature": "org.jfree.chart.entity.CategoryItemEntity.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8657249457902337349L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.entity.CategoryItemEntity",
        "src_path": "source/org/jfree/chart/entity/CategoryItemEntity.java",
        "signature": "org.jfree.chart.entity.CategoryItemEntity.dataset",
        "snippet": "    private CategoryDataset dataset;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The dataset. "
    },
    {
        "class_name": "org.jfree.chart.entity.CategoryItemEntity",
        "src_path": "source/org/jfree/chart/entity/CategoryItemEntity.java",
        "signature": "org.jfree.chart.entity.CategoryItemEntity.rowKey",
        "snippet": "    private Comparable rowKey;",
        "begin_line": 79,
        "end_line": 79,
        "comment": "\r\n     * The row key.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.entity.CategoryItemEntity",
        "src_path": "source/org/jfree/chart/entity/CategoryItemEntity.java",
        "signature": "org.jfree.chart.entity.CategoryItemEntity.columnKey",
        "snippet": "    private Comparable columnKey;",
        "begin_line": 86,
        "end_line": 86,
        "comment": "\r\n     * The column key.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.entity.XYItemEntity",
        "src_path": "source/org/jfree/chart/entity/XYItemEntity.java",
        "signature": "org.jfree.chart.entity.XYItemEntity.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3870862224880283771L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.entity.XYItemEntity",
        "src_path": "source/org/jfree/chart/entity/XYItemEntity.java",
        "signature": "org.jfree.chart.entity.XYItemEntity.dataset",
        "snippet": "    private transient XYDataset dataset;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The dataset. "
    },
    {
        "class_name": "org.jfree.chart.entity.XYItemEntity",
        "src_path": "source/org/jfree/chart/entity/XYItemEntity.java",
        "signature": "org.jfree.chart.entity.XYItemEntity.series",
        "snippet": "    private int series;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The series. "
    },
    {
        "class_name": "org.jfree.chart.entity.XYItemEntity",
        "src_path": "source/org/jfree/chart/entity/XYItemEntity.java",
        "signature": "org.jfree.chart.entity.XYItemEntity.item",
        "snippet": "    private int item;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The item. "
    },
    {
        "class_name": "org.jfree.chart.entity.LegendItemEntity",
        "src_path": "source/org/jfree/chart/entity/LegendItemEntity.java",
        "signature": "org.jfree.chart.entity.LegendItemEntity.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7435683933545666702L;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.entity.LegendItemEntity",
        "src_path": "source/org/jfree/chart/entity/LegendItemEntity.java",
        "signature": "org.jfree.chart.entity.LegendItemEntity.dataset",
        "snippet": "    private Dataset dataset;",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\r\n     * The dataset.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.entity.LegendItemEntity",
        "src_path": "source/org/jfree/chart/entity/LegendItemEntity.java",
        "signature": "org.jfree.chart.entity.LegendItemEntity.seriesKey",
        "snippet": "    private Comparable seriesKey;",
        "begin_line": 75,
        "end_line": 75,
        "comment": "\r\n     * The series key.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.entity.PieSectionEntity",
        "src_path": "source/org/jfree/chart/entity/PieSectionEntity.java",
        "signature": "org.jfree.chart.entity.PieSectionEntity.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 9199892576531984162L;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.entity.PieSectionEntity",
        "src_path": "source/org/jfree/chart/entity/PieSectionEntity.java",
        "signature": "org.jfree.chart.entity.PieSectionEntity.dataset",
        "snippet": "    private PieDataset dataset;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The dataset. "
    },
    {
        "class_name": "org.jfree.chart.entity.PieSectionEntity",
        "src_path": "source/org/jfree/chart/entity/PieSectionEntity.java",
        "signature": "org.jfree.chart.entity.PieSectionEntity.pieIndex",
        "snippet": "    private int pieIndex;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The pie index. "
    },
    {
        "class_name": "org.jfree.chart.entity.PieSectionEntity",
        "src_path": "source/org/jfree/chart/entity/PieSectionEntity.java",
        "signature": "org.jfree.chart.entity.PieSectionEntity.sectionIndex",
        "snippet": "    private int sectionIndex;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The section index. "
    },
    {
        "class_name": "org.jfree.chart.entity.PieSectionEntity",
        "src_path": "source/org/jfree/chart/entity/PieSectionEntity.java",
        "signature": "org.jfree.chart.entity.PieSectionEntity.sectionKey",
        "snippet": "    private Comparable sectionKey;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The section key. "
    },
    {
        "class_name": "org.jfree.chart.entity.ChartEntity",
        "src_path": "source/org/jfree/chart/entity/ChartEntity.java",
        "signature": "org.jfree.chart.entity.ChartEntity.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4445994133561919083L;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.entity.ChartEntity",
        "src_path": "source/org/jfree/chart/entity/ChartEntity.java",
        "signature": "org.jfree.chart.entity.ChartEntity.area",
        "snippet": "    private transient Shape area;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " The area occupied by the entity (in Java 2D space). "
    },
    {
        "class_name": "org.jfree.chart.entity.ChartEntity",
        "src_path": "source/org/jfree/chart/entity/ChartEntity.java",
        "signature": "org.jfree.chart.entity.ChartEntity.toolTipText",
        "snippet": "    private String toolTipText;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " The tool tip text for the entity. "
    },
    {
        "class_name": "org.jfree.chart.entity.ChartEntity",
        "src_path": "source/org/jfree/chart/entity/ChartEntity.java",
        "signature": "org.jfree.chart.entity.ChartEntity.urlText",
        "snippet": "    private String urlText;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " The URL text for the entity. "
    },
    {
        "class_name": "org.jfree.chart.encoders.ImageEncoderFactory",
        "src_path": "source/org/jfree/chart/encoders/ImageEncoderFactory.java",
        "signature": "org.jfree.chart.encoders.ImageEncoderFactory.encoders",
        "snippet": "    private static Hashtable encoders = null;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.encoders.SunJPEGEncoderAdapter",
        "src_path": "source/org/jfree/chart/encoders/SunJPEGEncoderAdapter.java",
        "signature": "org.jfree.chart.encoders.SunJPEGEncoderAdapter.quality",
        "snippet": "    private float quality = 0.95f;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The quality setting (in the range 0.0f to 1.0f). "
    },
    {
        "class_name": "org.jfree.chart.encoders.ImageFormat",
        "src_path": "source/org/jfree/chart/encoders/ImageFormat.java",
        "signature": "org.jfree.chart.encoders.ImageFormat.PNG",
        "snippet": "    public static String PNG = \"png\";",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Portable Network Graphics - lossless "
    },
    {
        "class_name": "org.jfree.chart.encoders.ImageFormat",
        "src_path": "source/org/jfree/chart/encoders/ImageFormat.java",
        "signature": "org.jfree.chart.encoders.ImageFormat.JPEG",
        "snippet": "    public static String JPEG = \"jpeg\";",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Joint Photographic Experts Group format - lossy "
    },
    {
        "class_name": "org.jfree.chart.encoders.ImageFormat",
        "src_path": "source/org/jfree/chart/encoders/ImageFormat.java",
        "signature": "org.jfree.chart.encoders.ImageFormat.GIF",
        "snippet": "    public static String GIF = \"gif\";",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Graphics Interchange Format - lossless, but 256 colour restriction "
    },
    {
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "signature": "org.jfree.chart.ui.ProjectInfo.logo",
        "snippet": "    private Image logo;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " An optional project logo. "
    },
    {
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "signature": "org.jfree.chart.ui.ProjectInfo.licenceText",
        "snippet": "    private String licenceText;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The licence text. "
    },
    {
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "signature": "org.jfree.chart.ui.ProjectInfo.contributors",
        "snippet": "    private List contributors;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " A list of contributors. "
    },
    {
        "class_name": "org.jfree.chart.ui.FontDisplayField",
        "src_path": "source/org/jfree/chart/ui/FontDisplayField.java",
        "signature": "org.jfree.chart.ui.FontDisplayField.displayFont",
        "snippet": "    private Font displayFont;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The current font. "
    },
    {
        "class_name": "org.jfree.chart.ui.FontDisplayField",
        "src_path": "source/org/jfree/chart/ui/FontDisplayField.java",
        "signature": "org.jfree.chart.ui.FontDisplayField.localizationResources",
        "snippet": "    protected static final ResourceBundle localizationResources = \n            ResourceBundle.getBundle(\"org.jfree.chart.ui.LocalizationBundle\");",
        "begin_line": 62,
        "end_line": 63,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.ui.StrokeSample",
        "src_path": "source/org/jfree/chart/ui/StrokeSample.java",
        "signature": "org.jfree.chart.ui.StrokeSample.stroke",
        "snippet": "    private Stroke stroke;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The stroke being displayed. "
    },
    {
        "class_name": "org.jfree.chart.ui.StrokeSample",
        "src_path": "source/org/jfree/chart/ui/StrokeSample.java",
        "signature": "org.jfree.chart.ui.StrokeSample.preferredSize",
        "snippet": "    private Dimension preferredSize;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The preferred size of the component. "
    },
    {
        "class_name": "org.jfree.chart.ui.OptionalLibraryHolder",
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "signature": "org.jfree.chart.ui.OptionalLibraryHolder.libraryClass",
        "snippet": "        private String libraryClass;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.ui.OptionalLibraryHolder",
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "signature": "org.jfree.chart.ui.OptionalLibraryHolder.library",
        "snippet": "        private transient Library library;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.copyright",
        "snippet": "    private String copyright;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " The project copyright statement. "
    },
    {
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.libraries",
        "snippet": "    private List libraries;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " A list of libraries used by the project. "
    },
    {
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.optionalLibraries",
        "snippet": "    private List optionalLibraries;",
        "begin_line": 140,
        "end_line": 140,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.ui.LCBLayout",
        "src_path": "source/org/jfree/chart/ui/LCBLayout.java",
        "signature": "org.jfree.chart.ui.LCBLayout.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2531780832406163833L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.ui.LCBLayout",
        "src_path": "source/org/jfree/chart/ui/LCBLayout.java",
        "signature": "org.jfree.chart.ui.LCBLayout.COLUMNS",
        "snippet": "    private static final int COLUMNS = 3;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " A constant for the number of columns in the layout. "
    },
    {
        "class_name": "org.jfree.chart.ui.LCBLayout",
        "src_path": "source/org/jfree/chart/ui/LCBLayout.java",
        "signature": "org.jfree.chart.ui.LCBLayout.colWidth",
        "snippet": "    private int[] colWidth;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Tracks the column widths. "
    },
    {
        "class_name": "org.jfree.chart.ui.LCBLayout",
        "src_path": "source/org/jfree/chart/ui/LCBLayout.java",
        "signature": "org.jfree.chart.ui.LCBLayout.rowHeight",
        "snippet": "    private int[] rowHeight;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Tracks the row heights. "
    },
    {
        "class_name": "org.jfree.chart.ui.LCBLayout",
        "src_path": "source/org/jfree/chart/ui/LCBLayout.java",
        "signature": "org.jfree.chart.ui.LCBLayout.labelGap",
        "snippet": "    private int labelGap;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The gap between each label and component. "
    },
    {
        "class_name": "org.jfree.chart.ui.LCBLayout",
        "src_path": "source/org/jfree/chart/ui/LCBLayout.java",
        "signature": "org.jfree.chart.ui.LCBLayout.buttonGap",
        "snippet": "    private int buttonGap;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The gap between each component and button. "
    },
    {
        "class_name": "org.jfree.chart.ui.LCBLayout",
        "src_path": "source/org/jfree/chart/ui/LCBLayout.java",
        "signature": "org.jfree.chart.ui.LCBLayout.vGap",
        "snippet": "    private int vGap;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The gap between rows. "
    },
    {
        "class_name": "org.jfree.chart.ui.StrokeChooserPanel",
        "src_path": "source/org/jfree/chart/ui/StrokeChooserPanel.java",
        "signature": "org.jfree.chart.ui.StrokeChooserPanel.selector",
        "snippet": "    private JComboBox selector;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " A combo for selecting the stroke. "
    },
    {
        "class_name": "org.jfree.chart.ui.Licences",
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "signature": "org.jfree.chart.ui.Licences.GPL",
        "snippet": "    public static final String GPL = \"GNU GENERAL PUBLIC LICENSE\\n\"\n        + \"\\n\"\n        + \"Version 2, June 1991\\n\"\n        + \"\\n\"\n        + \"Copyright (C) 1989, 1991 Free Software Foundation, Inc. 675 Mass Ave, Cambridge, \"\n        + \"MA 02139, USA. Everyone is permitted to copy and distribute verbatim copies of this \"\n        + \"license document, but changing it is not allowed.\\n\"\n        + \"\\n\"\n        + \"Preamble\\n\"\n        + \"The licenses for most software are designed to take away your freedom to share and \"\n        + \"change it. By contrast, the GNU General Public License is intended to guarantee your \"\n        + \"freedom to share and change free software--to make sure the software is free for all \"\n        + \"its users. This General Public License applies to most of the Free Software \"\n        + \"Foundation's software and to any other program whose authors commit to using it. (Some \"\n        + \"other Free Software Foundation software is covered by the GNU Library General Public \"\n        + \"License instead.) You can apply it to your programs, too.\\n\"\n        + \"\\n\"\n        + \"When we speak of free software, we are referring to freedom, not price. Our General \"\n        + \"Public Licenses are designed to make sure that you have the freedom to distribute \"\n        + \"copies of free software (and charge for this service if you wish), that you receive \"\n        + \"source code or can get it if you want it, that you can change the software or use \"\n        + \"pieces of it in new free programs; and that you know you can do these things.\"\n        + \"\\n\"\n        + \"To protect your rights, we need to make restrictions that forbid anyone to deny you \"\n        + \"these rights or to ask you to surrender the rights. These restrictions translate to \"\n        + \"certain responsibilities for you if you distribute copies of the software, or if you \"\n        + \"modify it.\\n\"\n        + \"\\n\"\n        + \"For example, if you distribute copies of such a program, whether gratis or for a fee, \"\n        + \"you must give the recipients all the rights that you have. You must make sure that \"\n        + \"they, too, receive or can get the source code. And you must show them these terms so \"\n        + \"they know their rights.\\n\"\n        + \"\\n\"\n        + \"We protect your rights with two steps: (1) copyright the software, and (2) offer you \"\n        + \"this license which gives you legal permission to copy, distribute and/or modify the \"\n        + \"software.\\n\"\n        + \"\\n\"\n        + \"Also, for each author's protection and ours, we want to make certain that everyone \"\n        + \"understands that there is no warranty for this free software. If the software is \"\n        + \"modified by someone else and passed on, we want its recipients to know that what they \"\n        + \"have is not the original, so that any problems introduced by others will not reflect \"\n        + \"on the original authors' reputations.\\n\"\n        + \"\\n\"\n        + \"Finally, any free program is threatened constantly by software patents. We wish to \"\n        + \"avoid the danger that redistributors of a free program will individually obtain patent \"\n        + \"licenses, in effect making the program proprietary. To prevent this, we have made it \"\n        + \"clear that any patent must be licensed for everyone's free use or not licensed at \"\n        + \"all.\\n\"\n        + \"\\n\"\n        + \"The precise terms and conditions for copying, distribution and modification follow.\\n\"\n        + \"\\n\"\n        + \"GNU GENERAL PUBLIC LICENSE\\n\"\n        + \"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\\n\"\n        + \"\\n\"\n        + \"0. This License applies to any program or other work which contains a notice placed by \"\n        + \"the copyright holder saying it may be distributed under the terms of this General \"\n        + \"Public License. The \\\"Program\\\", below, refers to any such program or work, and a \"\n        + \"\\\"work based on the Program\\\" means either the Program or any derivative work under \"\n        + \"copyright law: that is to say, a work containing the Program or a portion of it, \"\n        + \"either verbatim or with modifications and/or translated into another language. \"\n        + \"(Hereinafter, translation is included without limitation in the term \"\n        + \"\\\"modification\\\".) Each licensee is addressed as \\\"you\\\".\\n\"\n        + \"\\n\"\n        + \"Activities other than copying, distribution and modification are not covered by this \"\n        + \"License; they are outside its scope. The act of running the Program is not restricted, \"\n        + \"and the output from the Program is covered only if its contents constitute a work \"\n        + \"based on the Program (independent of having been made by running the Program). Whether \"\n        + \"that is true depends on what the Program does.\\n\"\n        + \"\\n\"\n        + \"1. You may copy and distribute verbatim copies of the Program's source code as you \"\n        + \"receive it, in any medium, provided that you conspicuously and appropriately publish \"\n        + \"on each copy an appropriate copyright notice and disclaimer of warranty; keep intact \"\n        + \"all the notices that refer to this License and to the absence of any warranty; and \"\n        + \"give any other recipients of the Program a copy of this License along with the \"\n        + \"Program.\\n\"\n        + \"\\n\"\n        + \"You may charge a fee for the physical act of transferring a copy, and you may at your \"\n        + \"option offer warranty protection in exchange for a fee.\\n\"\n        + \"\\n\"\n        + \"2. You may modify your copy or copies of the Program or any portion of it, thus \"\n        + \"forming a work based on the Program, and copy and distribute such modifications or \"\n        + \"work under the terms of Section 1 above, provided that you also meet all of these \"\n        + \"conditions:\\n\"\n        + \"\\n\"\n        + \"a) You must cause the modified files to carry prominent notices stating that you \"\n        + \"changed the files and the date of any change.\\n\"\n        + \"\\n\"\n        + \"b) You must cause any work that you distribute or publish, that in whole or in part \"\n        + \"contains or is derived from the Program or any part thereof, to be licensed as a whole \"\n        + \"at no charge to all third parties under the terms of this License.\\n\"\n        + \"\\n\"\n        + \"c) If the modified program normally reads commands interactively when run, you must \"\n        + \"cause it, when started running for such interactive use in the most ordinary way, to \"\n        + \"print or display an announcement including an appropriate copyright notice and a \"\n        + \"notice that there is no warranty (or else, saying that you provide a warranty) and \"\n        + \"that users may redistribute the program under these conditions, and telling the user \"\n        + \"how to view a copy of this License. (Exception: if the Program itself is interactive \"\n        + \"but does not normally print such an announcement, your work based on the Program is \"\n        + \"not required to print an announcement.)\\n\"\n        + \"\\n\"\n        + \"These requirements apply to the modified work as a whole. If identifiable sections of \"\n        + \"that work are not derived from the Program, and can be reasonably considered \"\n        + \"independent and separate works in themselves, then this License, and its terms, do not \"\n        + \"apply to those sections when you distribute them as separate works. But when you \"\n        + \"distribute the same sections as part of a whole which is a work based on the Program, \"\n        + \"the distribution of the whole must be on the terms of this License, whose permissions \"\n        + \"for other licensees extend to the entire whole, and thus to each and every part \"\n        + \"regardless of who wrote it.\\n\"\n        + \"\\n\"\n        + \"Thus, it is not the intent of this section to claim rights or contest your rights to \"\n        + \"work written entirely by you; rather, the intent is to exercise the right to control \"\n        + \"the distribution of derivative or collective works based on the Program.\\n\"\n        + \"\\n\"\n        + \"In addition, mere aggregation of another work not based on the Program with the \"\n        + \"Program (or with a work based on the Program) on a volume of a storage or distribution \"\n        + \"medium does not bring the other work under the scope of this License.\\n\"\n        + \"\\n\"\n        + \"3. You may copy and distribute the Program (or a work based on it, under Section 2) in \"\n        + \"object code or executable form under the terms of Sections 1 and 2 above provided that \"\n        + \"you also do one of the following:\\n\"\n        + \"\\n\"\n        + \"a) Accompany it with the complete corresponding machine-readable source code, which \"\n        + \"must be distributed under the terms of Sections 1 and 2 above on a medium customarily \"\n        + \"used for software interchange; or,\\n\"\n        + \"b) Accompany it with a written offer, valid for at least three years, to give any \"\n        + \"third party, for a charge no more than your cost of physically performing source \"\n        + \"distribution, a complete machine-readable copy of the corresponding source code, to be \"\n        + \"distributed under the terms of Sections 1 and 2 above on a medium customarily used for \"\n        + \"software interchange; or,\\n\"\n        + \"c) Accompany it with the information you received as to the offer to distribute \"\n        + \"corresponding source code. (This alternative is allowed only for noncommercial \"\n        + \"distribution and only if you received the program in object code or executable form \"\n        + \"with such an offer, in accord with Subsection b above.)\\n\"\n        + \"\\n\"\n        + \"The source code for a work means the preferred form of the work for making \"\n        + \"modifications to it. For an executable work, complete source code means all the source \"\n        + \"code for all modules it contains, plus any associated interface definition files, plus \"\n        + \"the scripts used to control compilation and installation of the executable. However, \"\n        + \"as a special exception, the source code distributed need not include anything that is \"\n        + \"normally distributed (in either source or binary form) with the major components \"\n        + \"(compiler, kernel, and so on) of the operating system on which the executable runs, \"\n        + \"unless that component itself accompanies the executable.\\n\"\n        + \"\\n\"\n        + \"If distribution of executable or object code is made by offering access to copy from a \"\n        + \"designated place, then offering equivalent access to copy the source code from the \"\n        + \"same place counts as distribution of the source code, even though third parties are \"\n        + \"not compelled to copy the source along with the object code.\\n\"\n        + \"\\n\"\n        + \"4. You may not copy, modify, sublicense, or distribute the Program except as expressly \"\n        + \"provided under this License. Any attempt otherwise to copy, modify, sublicense or \"\n        + \"distribute the Program is void, and will automatically terminate your rights under \"\n        + \"this License. However, parties who have received copies, or rights, from you under \"\n        + \"this License will not have their licenses terminated so long as such parties remain in \"\n        + \"full compliance.\"\n        + \"\\n\"\n        + \"5. You are not required to accept this License, since you have not signed it. However, \"\n        + \"nothing else grants you permission to modify or distribute the Program or its \"\n        + \"derivative works. These actions are prohibited by law if you do not accept this \"\n        + \"License. Therefore, by modifying or distributing the Program (or any work based on the \"\n        + \"Program), you indicate your acceptance of this License to do so, and all its terms and \"\n        + \"conditions for copying, distributing or modifying the Program or works based on it.\\n\"\n        + \"\\n\"\n        + \"6. Each time you redistribute the Program (or any work based on the Program), the \"\n        + \"recipient automatically receives a license from the original licensor to copy, \"\n        + \"distribute or modify the Program subject to these terms and conditions. You may not \"\n        + \"impose any further restrictions on the recipients' exercise of the rights granted \"\n        + \"herein. You are not responsible for enforcing compliance by third parties to this \"\n        + \"License.\"\n        + \"\\n\"\n        + \"7. If, as a consequence of a court judgment or allegation of patent infringement or \"\n        + \"for any other reason (not limited to patent issues), conditions are imposed on you \"\n        + \"(whether by court order, agreement or otherwise) that contradict the conditions of \"\n        + \"this License, they do not excuse you from the conditions of this License. If you \"\n        + \"cannot distribute so as to satisfy simultaneously your obligations under this License \"\n        + \"and any other pertinent obligations, then as a consequence you may not distribute the \"\n        + \"Program at all. For example, if a patent license would not permit royalty-free \"\n        + \"redistribution of the Program by all those who receive copies directly or indirectly \"\n        + \"through you, then the only way you could satisfy both it and this License would be to \"\n        + \"refrain entirely from distribution of the Program.\\n\"\n        + \"\\n\"\n        + \"If any portion of this section is held invalid or unenforceable under any particular \"\n        + \"circumstance, the balance of the section is intended to apply and the section as a \"\n        + \"whole is intended to apply in other circumstances.\\n\"\n        + \"\\n\"\n        + \"It is not the purpose of this section to induce you to infringe any patents or other \"\n        + \"property right claims or to contest validity of any such claims; this section has the \"\n        + \"sole purpose of protecting the integrity of the free software distribution system, \"\n        + \"which is implemented by public license practices. Many people have made generous \"\n        + \"contributions to the wide range of software distributed through that system in \"\n        + \"reliance on consistent application of that system; it is up to the author/donor to \"\n        + \"decide if he or she is willing to distribute software through any other system and a \"\n        + \"licensee cannot impose that choice.\\n\"\n        + \"\\n\"\n        + \"This section is intended to make thoroughly clear what is believed to be a consequence \"\n        + \"of the rest of this License.\\n\"\n        + \"\\n\"\n        + \"8. If the distribution and/or use of the Program is restricted in certain countries \"\n        + \"either by patents or by copyrighted interfaces, the original copyright holder who \"\n        + \"places the Program under this License may add an explicit geographical distribution \"\n        + \"limitation excluding those countries, so that distribution is permitted only in or \"\n        + \"among countries not thus excluded. In such case, this License incorporates the \"\n        + \"limitation as if written in the body of this License.\\n\"\n        + \"\\n\"\n        + \"9. The Free Software Foundation may publish revised and/or new versions of the General \"\n        + \"Public License from time to time. Such new versions will be similar in spirit to the \"\n        + \"present version, but may differ in detail to address new problems or concerns.\\n\"\n        + \"\\n\"\n        + \"Each version is given a distinguishing version number. If the Program specifies a \"\n        + \"version number of this License which applies to it and \\\"any later version\\\", you have \"\n        + \"the option of following the terms and conditions either of that version or of any \"\n        + \"later version published by the Free Software Foundation. If the Program does not \"\n        + \"specify a version number of this License, you may choose any version ever published by \"\n        + \"the Free Software Foundation.\\n\"\n        + \"\\n\"\n        + \"10. If you wish to incorporate parts of the Program into other free programs whose \"\n        + \"distribution conditions are different, write to the author to ask for permission. For \"\n        + \"software which is copyrighted by the Free Software Foundation, write to the Free \"\n        + \"Software Foundation; we sometimes make exceptions for this. Our decision will be \"\n        + \"guided by the two goals of preserving the free status of all derivatives of our free \"\n        + \"software and of promoting the sharing and reuse of software generally.\\n\"\n        + \"\\n\"\n        + \"NO WARRANTY\\n\"\n        + \"\\n\"\n        + \"11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE \"\n        + \"PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN \"\n        + \"WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \\\"AS IS\\\" \"\n        + \"WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED \"\n        + \"TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. \"\n        + \"THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD \"\n        + \"THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR \"\n        + \"CORRECTION.\\n\"\n        + \"\\n\"\n        + \"12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY \"\n        + \"COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS \"\n        + \"PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, \"\n        + \"INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE \"\n        + \"PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE \"\n        + \"OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE \"\n        + \"WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE \"\n        + \"POSSIBILITY OF SUCH DAMAGES.\\n\"\n        + \"\\n\"\n        + \"END OF TERMS AND CONDITIONS\\n\"\n        + \"\\n\"\n        + \"\\n\"\n        + \"How to Apply These Terms to Your New Programs\\n\"\n        + \"\\n\"\n        + \"If you develop a new program, and you want it to be of the greatest possible use to \"\n        + \"the public, the best way to achieve this is to make it free software which everyone \"\n        + \"can redistribute and change under these terms.\\n\"\n        + \"\\n\"\n        + \"To do so, attach the following notices to the program.  It is safest to attach them to \"\n        + \"the start of each source file to most effectively convey the exclusion of warranty; \"\n        + \"and each file should have at least the \\\"copyright\\\" line and a pointer to where the \"\n        + \"full notice is found.\\n\"\n        + \"\\n\"\n        + \"<one line to give the program's name and a brief idea of what it does.>\\n\"\n        + \"Copyright (C) <year>  <name of author>\\n\"\n        + \"\\n\"\n        + \"This program is free software; you can redistribute it and/or modify it under the \"\n        + \"terms of the GNU General Public License as published by the Free Software Foundation; \"\n        + \"either version 2 of the License, or (at your option) any later version.\\n\"\n        + \"\\n\"\n        + \"This program is distributed in the hope that it will be useful, but WITHOUT ANY \"\n        + \"WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \"\n        + \"PARTICULAR PURPOSE.  See the GNU General Public License for more details.\\n\"\n        + \"\\n\"\n        + \"You should have received a copy of the GNU General Public License along with this \"\n        + \"program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite \"\n        + \"330, Boston, MA  02111-1307  USA\\n\"\n        + \"\\n\"\n        + \"Also add information on how to contact you by electronic and paper mail.\\n\"\n        + \"\\n\"\n        + \"If the program is interactive, make it output a short notice like this when it starts \"\n        + \"in an interactive mode:\\n\"\n        + \"\\n\"\n        + \"Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with \"\n        + \"ABSOLUTELY NO WARRANTY; for details type `show w'.\\n\"\n        + \"This is free software, and you are welcome to redistribute it under certain \"\n        + \"conditions; type `show c' for details.\\n\"\n        + \"\\n\"\n        + \"The hypothetical commands `show w' and `show c' should show the appropriate parts of \"\n        + \"the General Public License.  Of course, the commands you use may be called something \"\n        + \"other than `show w' and `show c'; they could even be mouse-clicks or menu items\"\n        + \"--whatever suits your program.\\n\"\n        + \"\\n\"\n        + \"You should also get your employer (if you work as a programmer) or your school, if \"\n        + \"any, to sign a \\\"copyright disclaimer\\\" for the program, if necessary.  Here is a \"\n        + \"sample; alter the names:\\n\"\n        + \"\\n\"\n        + \"Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' \"\n        + \"(which makes passes at compilers) written by James Hacker.\\n\"\n        + \"\\n\"\n        + \"<signature of Ty Coon>, 1 April 1989\\n\"\n        + \"Ty Coon, President of Vice\\n\"\n        + \"\\n\"\n        + \"This General Public License does not permit incorporating your program into \"\n        + \"proprietary programs.  If your program is a subroutine library, you may consider it \"\n        + \"more useful to permit linking proprietary applications with the library.  If this is \"\n        + \"what you want to do, use the GNU Library General Public License instead of this \"\n        + \"License.\\n\";",
        "begin_line": 55,
        "end_line": 354,
        "comment": " The GNU General Public Licence. "
    },
    {
        "class_name": "org.jfree.chart.ui.Licences",
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "signature": "org.jfree.chart.ui.Licences.LGPL",
        "snippet": "    public static final String LGPL = \"GNU LESSER GENERAL PUBLIC LICENSE\\n\"\n        + \"\\n\"\n        + \"Version 2.1, February 1999\\n\"\n        + \"\\n\"\n        + \"Copyright (C) 1991, 1999 Free Software Foundation, Inc.\\n\"\n        + \"59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\\n\"\n        + \"Everyone is permitted to copy and distribute verbatim copies of this license document, \"\n        + \"but changing it is not allowed.\\n\"\n        + \"\\n\"\n        + \"[This is the first released version of the Lesser GPL.  It also counts as the \"\n        + \"successor of the GNU Library Public License, version 2, hence the version number \"\n        + \"2.1.]\\n\"\n        + \"\\n\"\n        + \"Preamble\\n\"\n        + \"\\n\"\n        + \"The licenses for most software are designed to take away your freedom to share and \"\n        + \"change it. By contrast, the GNU General Public Licenses are intended to guarantee your \"\n        + \"freedom to share and change free software--to make sure the software is free for all \"\n        + \"its users.\\n\"\n        + \"\\n\"\n        + \"This license, the Lesser General Public License, applies to some specially designated \"\n        + \"software packages--typically libraries--of the Free Software Foundation and other \"\n        + \"authors who decide to use it. You can use it too, but we suggest you first think \"\n        + \"carefully about whether this license or the ordinary General Public License is the \"\n        + \"better strategy to use in any particular case, based on the explanations below.\\n\"\n        + \"\\n\"\n        + \"When we speak of free software, we are referring to freedom of use, not price. Our \"\n        + \"General Public Licenses are designed to make sure that you have the freedom to \"\n        + \"distribute copies of free software (and charge for this service if you wish); that you \"\n        + \"receive source code or can get it if you want it; that you can change the software and \"\n        + \"use pieces of it in new free programs; and that you are informed that you can do these \"\n        + \"things.\\n\"\n        + \"\\n\"\n        + \"To protect your rights, we need to make restrictions that forbid distributors to deny \"\n        + \"you these rights or to ask you to surrender these rights. These restrictions translate \"\n        + \"to certain responsibilities for you if you distribute copies of the library or if you \"\n        + \"modify it.\\n\"\n        + \"\\n\"\n        + \"For example, if you distribute copies of the library, whether gratis or for a fee, you \"\n        + \"must give the recipients all the rights that we gave you. You must make sure that \"\n        + \"they, too, receive or can get the source code. If you link other code with the \"\n        + \"library, you must provide complete object files to the recipients, so that they can \"\n        + \"relink them with the library after making changes to the library and recompiling it. \"\n        + \"And you must show them these terms so they know their rights.\\n\"\n        + \"\\n\"\n        + \"We protect your rights with a two-step method: (1) we copyright the library, and (2) \"\n        + \"we offer you this license, which gives you legal permission to copy, distribute and/or \"\n        + \"modify the library.\\n\"\n        + \"\\n\"\n        + \"To protect each distributor, we want to make it very clear that there is no warranty \"\n        + \"for the free library. Also, if the library is modified by someone else and passed on, \"\n        + \"the recipients should know that what they have is not the original version, so that \"\n        + \"the original author's reputation will not be affected by problems that might be \"\n        + \"introduced by others.\\n\"\n        + \"\\n\"\n        + \"Finally, software patents pose a constant threat to the existence of any free program. \"\n        + \"We wish to make sure that a company cannot effectively restrict the users of a free \"\n        + \"program by obtaining a restrictive license from a patent holder. Therefore, we insist \"\n        + \"that any patent license obtained for a version of the library must be consistent with \"\n        + \"the full freedom of use specified in this license.\\n\"\n        + \"\\n\"\n        + \"Most GNU software, including some libraries, is covered by the ordinary GNU General \"\n        + \"Public License. This license, the GNU Lesser General Public License, applies to \"\n        + \"certain designated libraries, and is quite different from the ordinary General Public \"\n        + \"License. We use this license for certain libraries in order to permit linking those \"\n        + \"libraries into non-free programs.\\n\"\n        + \"\\n\"\n        + \"When a program is linked with a library, whether statically or using a shared library, \"\n        + \"the combination of the two is legally speaking a combined work, a derivative of the \"\n        + \"original library. The ordinary General Public License therefore permits such linking \"\n        + \"only if the entire combination fits its criteria of freedom. The Lesser General Public \"\n        + \"License permits more lax criteria for linking other code with the library.\\n\"\n        + \"\\n\"\n        + \"We call this license the \\\"Lesser\\\" General Public License because it does Less to \"\n        + \"protect the user's freedom than the ordinary General Public License. It also provides \"\n        + \"other free software developers Less of an advantage over competing non-free programs. \"\n        + \"These disadvantages are the reason we use the ordinary General Public License for many \"\n        + \"libraries. However, the Lesser license provides advantages in certain special \"\n        + \"circumstances.\\n\"\n        + \"\\n\"\n        + \"For example, on rare occasions, there may be a special need to encourage the widest \"\n        + \"possible use of a certain library, so that it becomes a de-facto standard. To achieve \"\n        + \"this, non-free programs must be allowed to use the library. A more frequent case is \"\n        + \"that a free library does the same job as widely used non-free libraries. In this case, \"\n        + \"there is little to gain by limiting the free library to free software only, so we use \"\n        + \"the Lesser General Public License.\\n\"\n        + \"\\n\"\n        + \"In other cases, permission to use a particular library in non-free programs enables a \"\n        + \"greater number of people to use a large body of free software. For example, permission \"\n        + \"to use the GNU C Library in non-free programs enables many more people to use the \"\n        + \"whole GNU operating system, as well as its variant, the GNU/Linux operating system.\\n\"\n        + \"\\n\"\n        + \"Although the Lesser General Public License is Less protective of the users' freedom, \"\n        + \"it does ensure that the user of a program that is linked with the Library has the \"\n        + \"freedom and the wherewithal to run that program using a modified version of the \"\n        + \"Library.\\n\"\n        + \"\\n\"\n        + \"The precise terms and conditions for copying, distribution and modification follow. \"\n        + \"Pay close attention to the difference between a \\\"work based on the library\\\" and a \"\n        + \"\\\"work that uses the library\\\". The former contains code derived from the library, \"\n        + \"whereas the latter must be combined with the library in order to run.\\n\"\n        + \"\\n\"\n        + \"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\\n\"\n        + \"\\n\"\n        + \"0. This License Agreement applies to any software library or other program which \"\n        + \"contains a notice placed by the copyright holder or other authorized party saying it \"\n        + \"may be distributed under the terms of this Lesser General Public License (also called \"\n        + \"\\\"this License\\\"). Each licensee is addressed as \\\"you\\\".\"\n        + \"\\n\"\n        + \"A \\\"library\\\" means a collection of software functions and/or data prepared so as to \"\n        + \"be conveniently linked with application programs (which use some of those functions \"\n        + \"and data) to form executables.\\n\"\n        + \"\\n\"\n        + \"The \\\"Library\\\", below, refers to any such software library or work which has been \"\n        + \"distributed under these terms. A \\\"work based on the Library\\\" means either the \"\n        + \"Library or any derivative work under copyright law: that is to say, a work containing \"\n        + \"the Library or a portion of it, either verbatim or with modifications and/or \"\n        + \"translated straightforwardly into another language. (Hereinafter, translation is \"\n        + \"included without limitation in the term \\\"modification\\\".)\\n\"\n        + \"\\n\"\n        + \"\\\"Source code\\\" for a work means the preferred form of the work for making \"\n        + \"modifications to it. For a library, complete source code means all the source code for \"\n        + \"all modules it contains, plus any associated interface definition files, plus the \"\n        + \"scripts used to control compilation and installation of the library.\\n\"\n        + \"\\n\"\n        + \"Activities other than copying, distribution and modification are not covered by this \"\n        + \"License; they are outside its scope. The act of running a program using the Library is \"\n        + \"not restricted, and output from such a program is covered only if its contents \"\n        + \"constitute a work based on the Library (independent of the use of the Library in a \"\n        + \"tool for writing it). Whether that is true depends on what the Library does and what \"\n        + \"the program that uses the Library does.\"\n        + \"\\n\"\n        + \"1. You may copy and distribute verbatim copies of the Library's complete source code \"\n        + \"as you receive it, in any medium, provided that you conspicuously and appropriately \"\n        + \"publish on each copy an appropriate copyright notice and disclaimer of warranty; keep \"\n        + \"intact all the notices that refer to this License and to the absence of any warranty; \"\n        + \"and distribute a copy of this License along with the Library.\\n\"\n        + \"\\n\"\n        + \"You may charge a fee for the physical act of transferring a copy, and you may at your \"\n        + \"option offer warranty protection in exchange for a fee.\\n\"\n        + \"\\n\"\n        + \"2. You may modify your copy or copies of the Library or any portion of it, thus \"\n        + \"forming a work based on the Library, and copy and distribute such modifications or \"\n        + \"work under the terms of Section 1 above, provided that you also meet all of these \"\n        + \"conditions:\\n\"\n        + \"\\n\"\n        + \"*    a) The modified work must itself be a software library.\\n\"\n        + \"*    b) You must cause the files modified to carry prominent notices stating that you \"\n        + \"changed the files and the date of any change.\\n\"\n        + \"*    c) You must cause the whole of the work to be licensed at no charge to all third \"\n        + \"parties under the terms of this License.\\n\"\n        + \"*    d) If a facility in the modified Library refers to a function or a table of data \"\n        + \"to be supplied by an application program that uses the facility, other than as an \"\n        + \"argument passed when the facility is invoked, then you must make a good faith effort \"\n        + \"to ensure that, in the event an application does not supply such function or table, \"\n        + \"the facility still operates, and performs whatever part of its purpose remains \"\n        + \"meaningful.\\n\"\n        + \"\\n\"\n        + \"(For example, a function in a library to compute square roots has a purpose that is \"\n        + \"entirely well-defined independent of the application. Therefore, Subsection 2d \"\n        + \"requires that any application-supplied function or table used by this function must be \"\n        + \"optional: if the application does not supply it, the square root function must still \"\n        + \"compute square roots.)\\n\"\n        + \"\\n\"\n        + \"These requirements apply to the modified work as a whole. If identifiable sections of \"\n        + \"that work are not derived from the Library, and can be reasonably considered \"\n        + \"independent and separate works in themselves, then this License, and its terms, do not \"\n        + \"apply to those sections when you distribute them as separate works. But when you \"\n        + \"distribute the same sections as part of a whole which is a work based on the Library, \"\n        + \"the distribution of the whole must be on the terms of this License, whose permissions \"\n        + \"for other licensees extend to the entire whole, and thus to each and every part \"\n        + \"regardless of who wrote it.\\n\"\n        + \"\\n\"\n        + \"Thus, it is not the intent of this section to claim rights or contest your rights to \"\n        + \"work written entirely by you; rather, the intent is to exercise the right to control \"\n        + \"the distribution of derivative or collective works based on the Library.\\n\"\n        + \"\\n\"\n        + \"In addition, mere aggregation of another work not based on the Library with the \"\n        + \"Library (or with a work based on the Library) on a volume of a storage or distribution \"\n        + \"medium does not bring the other work under the scope of this License.\\n\"\n        + \"\\n\"\n        + \"3. You may opt to apply the terms of the ordinary GNU General Public License instead \"\n        + \"of this License to a given copy of the Library. To do this, you must alter all the \"\n        + \"notices that refer to this License, so that they refer to the ordinary GNU General \"\n        + \"Public License, version 2, instead of to this License. (If a newer version than \"\n        + \"version 2 of the ordinary GNU General Public License has appeared, then you can \"\n        + \"specify that version instead if you wish.) Do not make any other change in these \"\n        + \"notices.\\n\"\n        + \"\\n\"\n        + \"Once this change is made in a given copy, it is irreversible for that copy, so the \"\n        + \"ordinary GNU General Public License applies to all subsequent copies and derivative \"\n        + \"works made from that copy.\\n\"\n        + \"\\n\"\n        + \"This option is useful when you wish to copy part of the code of the Library into a \"\n        + \"program that is not a library.\\n\"\n        + \"\\n\"\n        + \"4. You may copy and distribute the Library (or a portion or derivative of it, under \"\n        + \"Section 2) in object code or executable form under the terms of Sections 1 and 2 above \"\n        + \"provided that you accompany it with the complete corresponding machine-readable source \"\n        + \"code, which must be distributed under the terms of Sections 1 and 2 above on a medium \"\n        + \"customarily used for software interchange.\\n\"\n        + \"\\n\"\n        + \"If distribution of object code is made by offering access to copy from a designated \"\n        + \"place, then offering equivalent access to copy the source code from the same place \"\n        + \"satisfies the requirement to distribute the source code, even though third parties are \"\n        + \"not compelled to copy the source along with the object code.\\n\"\n        + \"\\n\"\n        + \"5. A program that contains no derivative of any portion of the Library, but is \"\n        + \"designed to work with the Library by being compiled or linked with it, is called a \"\n        + \"\\\"work that uses the Library\\\". Such a work, in isolation, is not a derivative work of \"\n        + \"the Library, and therefore falls outside the scope of this License.\\n\"\n        + \"\\n\"\n        + \"However, linking a \\\"work that uses the Library\\\" with the Library creates an \"\n        + \"executable that is a derivative of the Library (because it contains portions of the \"\n        + \"Library), rather than a \\\"work that uses the library\\\". The executable is therefore \"\n        + \"covered by this License. Section 6 states terms for distribution of such executables.\\n\"\n        + \"\\n\"\n        + \"When a \\\"work that uses the Library\\\" uses material from a header file that is part of \"\n        + \"the Library, the object code for the work may be a derivative work of the Library even \"\n        + \"though the source code is not. Whether this is true is especially significant if the \"\n        + \"work can be linked without the Library, or if the work is itself a library. The \"\n        + \"threshold for this to be true is not precisely defined by law.\\n\"\n        + \"\\n\"\n        + \"If such an object file uses only numerical parameters, data structure layouts and \"\n        + \"accessors, and small macros and small inline functions (ten lines or less in length), \"\n        + \"then the use of the object file is unrestricted, regardless of whether it is legally a \"\n        + \"derivative work. (Executables containing this object code plus portions of the Library \"\n        + \"will still fall under Section 6.)\\n\"\n        + \"\\n\"\n        + \"Otherwise, if the work is a derivative of the Library, you may distribute the object \"\n        + \"code for the work under the terms of Section 6. Any executables containing that work \"\n        + \"also fall under Section 6, whether or not they are linked directly with the Library \"\n        + \"itself.\\n\"\n        + \"\\n\"\n        + \"6. As an exception to the Sections above, you may also combine or link a \\\"work that \"\n        + \"uses the Library\\\" with the Library to produce a work containing portions of the \"\n        + \"Library, and distribute that work under terms of your choice, provided that the terms \"\n        + \"permit modification of the work for the customer's own use and reverse engineering for \"\n        + \"debugging such modifications.\\n\"\n        + \"\\n\"\n        + \"You must give prominent notice with each copy of the work that the Library is used in \"\n        + \"it and that the Library and its use are covered by this License. You must supply a \"\n        + \"copy of this License. If the work during execution displays copyright notices, you \"\n        + \"must include the copyright notice for the Library among them, as well as a reference \"\n        + \"directing the user to the copy of this License. Also, you must do one of these \"\n        + \"things:\\n\"\n        + \"\\n\"\n        + \"*    a) Accompany the work with the complete corresponding machine-readable source \"\n        + \"code for the Library including whatever changes were used in the work (which must be \"\n        + \"distributed under Sections 1 and 2 above); and, if the work is an executable linked \"\n        + \"with the Library, with the complete machine-readable \\\"work that uses the Library\\\", \"\n        + \"as object code and/or source code, so that the user can modify the Library and then \"\n        + \"relink to produce a modified executable containing the modified Library. (It is \"\n        + \"understood that the user who changes the contents of definitions files in the Library \"\n        + \"will not necessarily be able to recompile the application to use the modified \"\n        + \"definitions.)\\n\"\n        + \"*    b) Use a suitable shared library mechanism for linking with the Library. A \"\n        + \"suitable mechanism is one that (1) uses at run time a copy of the library already \"\n        + \"present on the user's computer system, rather than copying library functions into the \"\n        + \"executable, and (2) will operate properly with a modified version of the library, if \"\n        + \"the user installs one, as long as the modified version is interface-compatible with \"\n        + \"the version that the work was made with.\\n\"\n        + \"*    c) Accompany the work with a written offer, valid for at least three years, to \"\n        + \"give the same user the materials specified in Subsection 6a, above, for a charge no \"\n        + \"more than the cost of performing this distribution.\\n\"\n        + \"*    d) If distribution of the work is made by offering access to copy from a \"\n        + \"designated place, offer equivalent access to copy the above specified materials from \"\n        + \"the same place.\\n\"\n        + \"*    e) Verify that the user has already received a copy of these materials or that \"\n        + \"you have already sent this user a copy.\\n\"\n        + \"\\n\"\n        + \"For an executable, the required form of the \\\"work that uses the Library\\\" must \"\n        + \"include any data and utility programs needed for reproducing the executable from it. \"\n        + \"However, as a special exception, the materials to be distributed need not include \"\n        + \"anything that is normally distributed (in either source or binary form) with the major \"\n        + \"components (compiler, kernel, and so on) of the operating system on which the \"\n        + \"executable runs, unless that component itself accompanies the executable.\\n\"\n        + \"\\n\"\n        + \"It may happen that this requirement contradicts the license restrictions of other \"\n        + \"proprietary libraries that do not normally accompany the operating system. Such a \"\n        + \"contradiction means you cannot use both them and the Library together in an executable \"\n        + \"that you distribute.\\n\"\n        + \"\\n\"\n        + \"7. You may place library facilities that are a work based on the Library side-by-side \"\n        + \"in a single library together with other library facilities not covered by this \"\n        + \"License, and distribute such a combined library, provided that the separate \"\n        + \"distribution of the work based on the Library and of the other library facilities is \"\n        + \"otherwise permitted, and provided that you do these two things:\\n\"\n        + \"\\n\"\n        + \"*    a) Accompany the combined library with a copy of the same work based on the \"\n        + \"Library, uncombined with any other library facilities. This must be distributed under \"\n        + \"the terms of the Sections above.\\n\"\n        + \"*    b) Give prominent notice with the combined library of the fact that part of it is \"\n        + \"a work based on the Library, and explaining where to find the accompanying uncombined \"\n        + \"form of the same work.\\n\"\n        + \"\\n\"\n        + \"8. You may not copy, modify, sublicense, link with, or distribute the Library except \"\n        + \"as expressly provided under this License. Any attempt otherwise to copy, modify, \"\n        + \"sublicense, link with, or distribute the Library is void, and will automatically \"\n        + \"terminate your rights under this License. However, parties who have received copies, \"\n        + \"or rights, from you under this License will not have their licenses terminated so \"\n        + \"long as such parties remain in full compliance.\\n\"\n        + \"\\n\"\n        + \"9. You are not required to accept this License, since you have not signed it. However, \"\n        + \"nothing else grants you permission to modify or distribute the Library or its \"\n        + \"derivative works. These actions are prohibited by law if you do not accept this \"\n        + \"License. Therefore, by modifying or distributing the Library (or any work based on the \"\n        + \"Library), you indicate your acceptance of this License to do so, and all its terms and \"\n        + \"conditions for copying, distributing or modifying the Library or works based on it.\\n\"\n        + \"\\n\"\n        + \"10. Each time you redistribute the Library (or any work based on the Library), the \"\n        + \"recipient automatically receives a license from the original licensor to copy, \"\n        + \"distribute, link with or modify the Library subject to these terms and conditions. You \"\n        + \"may not impose any further restrictions on the recipients' exercise of the rights \"\n        + \"granted herein. You are not responsible for enforcing compliance by third parties with \"\n        + \"this License.\\n\"\n        + \"\\n\"\n        + \"11. If, as a consequence of a court judgment or allegation of patent infringement or \"\n        + \"for any other reason (not limited to patent issues), conditions are imposed on you \"\n        + \"(whether by court order, agreement or otherwise) that contradict the conditions of \"\n        + \"this License, they do not excuse you from the conditions of this License. If you \"\n        + \"cannot distribute so as to satisfy simultaneously your obligations under this License \"\n        + \"and any other pertinent obligations, then as a consequence you may not distribute the \"\n        + \"Library at all. For example, if a patent license would not permit royalty-free \"\n        + \"redistribution of the Library by all those who receive copies directly or indirectly \"\n        + \"through you, then the only way you could satisfy both it and this License would be to \"\n        + \"refrain entirely from distribution of the Library.\\n\"\n        + \"\\n\"\n        + \"If any portion of this section is held invalid or unenforceable under any particular \"\n        + \"circumstance, the balance of the section is intended to apply, and the section as a \"\n        + \"whole is intended to apply in other circumstances.\\n\"\n        + \"\\n\"\n        + \"It is not the purpose of this section to induce you to infringe any patents or other \"\n        + \"property right claims or to contest validity of any such claims; this section has the \"\n        + \"sole purpose of protecting the integrity of the free software distribution system \"\n        + \"which is implemented by public license practices. Many people have made generous \"\n        + \"contributions to the wide range of software distributed through that system in \"\n        + \"reliance on consistent application of that system; it is up to the author/donor to \"\n        + \"decide if he or she is willing to distribute software through any other system and a \"\n        + \"licensee cannot impose that choice.\\n\"\n        + \"\\n\"\n        + \"This section is intended to make thoroughly clear what is believed to be a consequence \"\n        + \"of the rest of this License.\\n\"\n        + \"\\n\"\n        + \"12. If the distribution and/or use of the Library is restricted in certain countries \"\n        + \"either by patents or by copyrighted interfaces, the original copyright holder who \"\n        + \"places the Library under this License may add an explicit geographical distribution \"\n        + \"limitation excluding those countries, so that distribution is permitted only in or \"\n        + \"among countries not thus excluded. In such case, this License incorporates the \"\n        + \"limitation as if written in the body of this License.\\n\"\n        + \"\\n\"\n        + \"13. The Free Software Foundation may publish revised and/or new versions of the Lesser \"\n        + \"General Public License from time to time. Such new versions will be similar in spirit \"\n        + \"to the present version, but may differ in detail to address new problems or concerns.\\n\"\n        + \"\\n\"\n        + \"Each version is given a distinguishing version number. If the Library specifies a \"\n        + \"version number of this License which applies to it and \\\"any later version\\\", you have \"\n        + \"the option of following the terms and conditions either of that version or of any \"\n        + \"later version published by the Free Software Foundation. If the Library does not \"\n        + \"specify a license version number, you may choose any version ever published by the \"\n        + \"Free Software Foundation.\\n\"\n        + \"\\n\"\n        + \"14. If you wish to incorporate parts of the Library into other free programs whose \"\n        + \"distribution conditions are incompatible with these, write to the author to ask for \"\n        + \"permission. For software which is copyrighted by the Free Software Foundation, write \"\n        + \"to the Free Software Foundation; we sometimes make exceptions for this. Our decision \"\n        + \"will be guided by the two goals of preserving the free status of all derivatives of \"\n        + \"our free software and of promoting the sharing and reuse of software generally.\\n\"\n        + \"\\n\"\n        + \"NO WARRANTY\\n\"\n        + \"\\n\"\n        + \"15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE \"\n        + \"LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN \"\n        + \"WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \\\"AS IS\\\" \"\n        + \"WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED \"\n        + \"TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. \"\n        + \"THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD \"\n        + \"THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR \"\n        + \"CORRECTION.\\n\"\n        + \"\\n\"\n        + \"16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY \"\n        + \"COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS \"\n        + \"PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, \"\n        + \"INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE \"\n        + \"LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE \"\n        + \"OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE \"\n        + \"WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE \"\n        + \"POSSIBILITY OF SUCH DAMAGES.\\n\"\n        + \"\\n\"\n        + \"END OF TERMS AND CONDITIONS\\n\"\n        + \"\\n\"\n        + \"\\n\"\n        + \"How to Apply These Terms to Your New Libraries\\n\"\n        + \"\\n\"\n        + \"If you develop a new library, and you want it to be of the greatest possible use to \"\n        + \"the public, we recommend making it free software that everyone can redistribute and \"\n        + \"change. You can do so by permitting redistribution under these terms (or, \"\n        + \"alternatively, under the terms of the ordinary General Public License).\\n\"\n        + \"\\n\"\n        + \"To apply these terms, attach the following notices to the library.  It is safest to \"\n        + \"attach them to the start of each source file to most effectively convey the exclusion \"\n        + \"of warranty; and each file should have at least the \\\"copyright\\\" line and a pointer \"\n        + \"to where the full notice is found.\\n\"\n        + \"\\n\"\n        + \"<one line to give the library's name and a brief idea of what it does.>\\n\"\n        + \"Copyright (C) <year>  <name of author>\\n\"\n        + \"\\n\"\n        + \"This library is free software; you can redistribute it and/or modify it under the \"\n        + \"terms of the GNU Lesser General Public License as published by the Free Software \"\n        + \"Foundation; either version 2.1 of the License, or (at your option) any later version.\\n\"\n        + \"\\n\"\n        + \"This library is distributed in the hope that it will be useful, but WITHOUT ANY \"\n        + \"WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \"\n        + \"PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\\n\"\n        + \"\\n\"\n        + \"You should have received a copy of the GNU Lesser General Public License along with \"\n        + \"this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, \"\n        + \"Suite 330, Boston, MA  02111-1307  USA\\n\"\n        + \"\\n\"\n        + \"Also add information on how to contact you by electronic and paper mail.\\n\"\n        + \"\\n\"\n        + \"You should also get your employer (if you work as a programmer) or your school, if \"\n        + \"any, to sign a \\\"copyright disclaimer\\\" for the library, if necessary.  Here is a \"\n        + \"sample; alter the names:\\n\"\n        + \"\\n\"\n        + \"Yoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a \"\n        + \"library for tweaking knobs) written by James Random Hacker.\\n\"\n        + \"\\n\"\n        + \"<signature of Ty Coon>, 1 April 1990\\n\"\n        + \"Ty Coon, President of Vice\\n\"\n        + \"\\n\"\n        + \"That's all there is to it!\\n\";",
        "begin_line": 357,
        "end_line": 788,
        "comment": " The GNU Lesser General Public Licence. "
    },
    {
        "class_name": "org.jfree.chart.ui.Licences",
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "signature": "org.jfree.chart.ui.Licences.singleton",
        "snippet": "    private static Licences singleton;",
        "begin_line": 791,
        "end_line": 791,
        "comment": " The singleton instance of this class. "
    },
    {
        "class_name": "org.jfree.chart.ui.Library",
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "signature": "org.jfree.chart.ui.Library.name",
        "snippet": "    private String name;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.ui.Library",
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "signature": "org.jfree.chart.ui.Library.version",
        "snippet": "    private String version;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The version. "
    },
    {
        "class_name": "org.jfree.chart.ui.Library",
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "signature": "org.jfree.chart.ui.Library.licenceName",
        "snippet": "    private String licenceName;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The licenceName. "
    },
    {
        "class_name": "org.jfree.chart.ui.Library",
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "signature": "org.jfree.chart.ui.Library.info",
        "snippet": "    private String info;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The version. "
    },
    {
        "class_name": "org.jfree.chart.ui.Contributor",
        "src_path": "source/org/jfree/chart/ui/Contributor.java",
        "signature": "org.jfree.chart.ui.Contributor.name",
        "snippet": "    private String name;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.ui.Contributor",
        "src_path": "source/org/jfree/chart/ui/Contributor.java",
        "signature": "org.jfree.chart.ui.Contributor.email",
        "snippet": "    private String email;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The e-mail address. "
    },
    {
        "class_name": "org.jfree.chart.ui.FontChooserPanel",
        "src_path": "source/org/jfree/chart/ui/FontChooserPanel.java",
        "signature": "org.jfree.chart.ui.FontChooserPanel.SIZES",
        "snippet": "    public static final String[] SIZES = {\"9\", \"10\", \"11\", \"12\", \"14\", \"16\", \n            \"18\", \"20\", \"22\", \"24\", \"28\", \"36\", \"48\", \"72\"};",
        "begin_line": 68,
        "end_line": 69,
        "comment": " The font sizes that can be selected. "
    },
    {
        "class_name": "org.jfree.chart.ui.FontChooserPanel",
        "src_path": "source/org/jfree/chart/ui/FontChooserPanel.java",
        "signature": "org.jfree.chart.ui.FontChooserPanel.fontlist",
        "snippet": "    private JList fontlist;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The list of fonts. "
    },
    {
        "class_name": "org.jfree.chart.ui.FontChooserPanel",
        "src_path": "source/org/jfree/chart/ui/FontChooserPanel.java",
        "signature": "org.jfree.chart.ui.FontChooserPanel.sizelist",
        "snippet": "    private JList sizelist;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The list of sizes. "
    },
    {
        "class_name": "org.jfree.chart.ui.FontChooserPanel",
        "src_path": "source/org/jfree/chart/ui/FontChooserPanel.java",
        "signature": "org.jfree.chart.ui.FontChooserPanel.bold",
        "snippet": "    private JCheckBox bold;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The checkbox that indicates whether the font is bold. "
    },
    {
        "class_name": "org.jfree.chart.ui.FontChooserPanel",
        "src_path": "source/org/jfree/chart/ui/FontChooserPanel.java",
        "signature": "org.jfree.chart.ui.FontChooserPanel.italic",
        "snippet": "    private JCheckBox italic;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The checkbox that indicates whether or not the font is italic. "
    },
    {
        "class_name": "org.jfree.chart.ui.FontChooserPanel",
        "src_path": "source/org/jfree/chart/ui/FontChooserPanel.java",
        "signature": "org.jfree.chart.ui.FontChooserPanel.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources = \n            ResourceBundle.getBundle(\"org.jfree.chart.ui.LocalizationBundle\");",
        "begin_line": 84,
        "end_line": 85,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.ui.PaintSample",
        "src_path": "source/org/jfree/chart/ui/PaintSample.java",
        "signature": "org.jfree.chart.ui.PaintSample.paint",
        "snippet": "    private Paint paint;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The paint. "
    },
    {
        "class_name": "org.jfree.chart.ui.PaintSample",
        "src_path": "source/org/jfree/chart/ui/PaintSample.java",
        "signature": "org.jfree.chart.ui.PaintSample.preferredSize",
        "snippet": "    private Dimension preferredSize;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The preferred size of the component. "
    },
    {
        "class_name": "org.jfree.chart.ui.ExtensionFileFilter",
        "src_path": "source/org/jfree/chart/ui/ExtensionFileFilter.java",
        "signature": "org.jfree.chart.ui.ExtensionFileFilter.description",
        "snippet": "    private String description;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " A description for the file type. "
    },
    {
        "class_name": "org.jfree.chart.ui.ExtensionFileFilter",
        "src_path": "source/org/jfree/chart/ui/ExtensionFileFilter.java",
        "signature": "org.jfree.chart.ui.ExtensionFileFilter.extension",
        "snippet": "    private String extension;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The extension (for example, \"png\" for *.png files). "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8831571430103671324L;",
        "begin_line": 188,
        "end_line": 188,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.ZERO",
        "snippet": "    public static final Number ZERO = new Integer(0);",
        "begin_line": 191,
        "end_line": 191,
        "comment": " Useful constant representing zero. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_INSETS",
        "snippet": "    public static final RectangleInsets DEFAULT_INSETS \n            = new RectangleInsets(4.0, 8.0, 4.0, 8.0);",
        "begin_line": 194,
        "end_line": 195,
        "comment": " The default insets. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE",
        "snippet": "    public static final Stroke DEFAULT_OUTLINE_STROKE = new BasicStroke(0.5f);",
        "begin_line": 198,
        "end_line": 198,
        "comment": " The default outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT",
        "snippet": "    public static final Paint DEFAULT_OUTLINE_PAINT = Color.gray;",
        "begin_line": 201,
        "end_line": 201,
        "comment": " The default outline color. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_FOREGROUND_ALPHA",
        "snippet": "    public static final float DEFAULT_FOREGROUND_ALPHA = 1.0f;",
        "begin_line": 204,
        "end_line": 204,
        "comment": " The default foreground alpha transparency. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_ALPHA",
        "snippet": "    public static final float DEFAULT_BACKGROUND_ALPHA = 1.0f;",
        "begin_line": 207,
        "end_line": 207,
        "comment": " The default background alpha transparency. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT",
        "snippet": "    public static final Paint DEFAULT_BACKGROUND_PAINT = Color.LIGHT_GRAY;",
        "begin_line": 210,
        "end_line": 210,
        "comment": " The default background color. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.MINIMUM_WIDTH_TO_DRAW",
        "snippet": "    public static final int MINIMUM_WIDTH_TO_DRAW = 10;",
        "begin_line": 213,
        "end_line": 213,
        "comment": " The minimum width at which the plot should be drawn. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.MINIMUM_HEIGHT_TO_DRAW",
        "snippet": "    public static final int MINIMUM_HEIGHT_TO_DRAW = 10;",
        "begin_line": 216,
        "end_line": 216,
        "comment": " The minimum height at which the plot should be drawn. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX",
        "snippet": "    public static final Shape DEFAULT_LEGEND_ITEM_BOX \n            = new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0);",
        "begin_line": 219,
        "end_line": 220,
        "comment": " A default box shape for legend items. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE",
        "snippet": "    public static final Shape DEFAULT_LEGEND_ITEM_CIRCLE \n            = new Ellipse2D.Double(-4.0, -4.0, 8.0, 8.0);",
        "begin_line": 223,
        "end_line": 224,
        "comment": " A default circle shape for legend items. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.parent",
        "snippet": "    private Plot parent;",
        "begin_line": 227,
        "end_line": 227,
        "comment": " The parent plot (<code>null</code> if this is the root plot). "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.datasetGroup",
        "snippet": "    private DatasetGroup datasetGroup;",
        "begin_line": 230,
        "end_line": 230,
        "comment": " The dataset group (to be used for thread synchronisation). "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.noDataMessage",
        "snippet": "    private String noDataMessage;",
        "begin_line": 233,
        "end_line": 233,
        "comment": " The message to display if no data is available. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.noDataMessageFont",
        "snippet": "    private Font noDataMessageFont;",
        "begin_line": 236,
        "end_line": 236,
        "comment": " The font used to display the 'no data' message. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.noDataMessagePaint",
        "snippet": "    private transient Paint noDataMessagePaint;",
        "begin_line": 239,
        "end_line": 239,
        "comment": " The paint used to draw the 'no data' message. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.insets",
        "snippet": "    private RectangleInsets insets;",
        "begin_line": 242,
        "end_line": 242,
        "comment": " Amount of blank space around the plot area. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.outlineVisible",
        "snippet": "    private boolean outlineVisible;",
        "begin_line": 249,
        "end_line": 249,
        "comment": " \r\n     * A flag that controls whether or not the plot outline is drawn. \r\n     *\r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.outlineStroke",
        "snippet": "    private transient Stroke outlineStroke;",
        "begin_line": 252,
        "end_line": 252,
        "comment": " The Stroke used to draw an outline around the plot. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 255,
        "end_line": 255,
        "comment": " The Paint used to draw an outline around the plot. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.backgroundPaint",
        "snippet": "    private transient Paint backgroundPaint;",
        "begin_line": 258,
        "end_line": 258,
        "comment": " An optional color used to fill the plot background. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.backgroundImage",
        "snippet": "    private transient Image backgroundImage;  // not currently serialized",
        "begin_line": 261,
        "end_line": 261,
        "comment": " not currently serialized"
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.backgroundImageAlignment",
        "snippet": "    private int backgroundImageAlignment = Align.FIT;",
        "begin_line": 264,
        "end_line": 264,
        "comment": " The alignment for the background image. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.backgroundImageAlpha",
        "snippet": "    private float backgroundImageAlpha = 0.5f;",
        "begin_line": 267,
        "end_line": 267,
        "comment": " The alpha value used to draw the background image. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.foregroundAlpha",
        "snippet": "    private float foregroundAlpha;",
        "begin_line": 270,
        "end_line": 270,
        "comment": " The alpha-transparency for the plot. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.backgroundAlpha",
        "snippet": "    private float backgroundAlpha;",
        "begin_line": 273,
        "end_line": 273,
        "comment": " The alpha transparency for the background paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.drawingSupplier",
        "snippet": "    private DrawingSupplier drawingSupplier;",
        "begin_line": 276,
        "end_line": 276,
        "comment": " The drawing supplier. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.listenerList",
        "snippet": "    private transient EventListenerList listenerList;",
        "begin_line": 279,
        "end_line": 279,
        "comment": " Storage for registered change listeners. "
    },
    {
        "class_name": "org.jfree.chart.plot.PieLabelRecord",
        "src_path": "source/org/jfree/chart/plot/PieLabelRecord.java",
        "signature": "org.jfree.chart.plot.PieLabelRecord.key",
        "snippet": "    private Comparable key;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The section key. "
    },
    {
        "class_name": "org.jfree.chart.plot.PieLabelRecord",
        "src_path": "source/org/jfree/chart/plot/PieLabelRecord.java",
        "signature": "org.jfree.chart.plot.PieLabelRecord.angle",
        "snippet": "    private double angle;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The angle of the centre of the section (in radians). "
    },
    {
        "class_name": "org.jfree.chart.plot.PieLabelRecord",
        "src_path": "source/org/jfree/chart/plot/PieLabelRecord.java",
        "signature": "org.jfree.chart.plot.PieLabelRecord.baseY",
        "snippet": "    private double baseY;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The base y-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.plot.PieLabelRecord",
        "src_path": "source/org/jfree/chart/plot/PieLabelRecord.java",
        "signature": "org.jfree.chart.plot.PieLabelRecord.allocatedY",
        "snippet": "    private double allocatedY;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The allocated y-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.plot.PieLabelRecord",
        "src_path": "source/org/jfree/chart/plot/PieLabelRecord.java",
        "signature": "org.jfree.chart.plot.PieLabelRecord.label",
        "snippet": "    private TextBox label;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The label. "
    },
    {
        "class_name": "org.jfree.chart.plot.PieLabelRecord",
        "src_path": "source/org/jfree/chart/plot/PieLabelRecord.java",
        "signature": "org.jfree.chart.plot.PieLabelRecord.labelHeight",
        "snippet": "    private double labelHeight;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The label height. "
    },
    {
        "class_name": "org.jfree.chart.plot.PieLabelRecord",
        "src_path": "source/org/jfree/chart/plot/PieLabelRecord.java",
        "signature": "org.jfree.chart.plot.PieLabelRecord.gap",
        "snippet": "    private double gap;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The gap. "
    },
    {
        "class_name": "org.jfree.chart.plot.PieLabelRecord",
        "src_path": "source/org/jfree/chart/plot/PieLabelRecord.java",
        "signature": "org.jfree.chart.plot.PieLabelRecord.linkPercent",
        "snippet": "    private double linkPercent;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The link percent. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedRangeXYPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedRangeXYPlot.java",
        "signature": "org.jfree.chart.plot.CombinedRangeXYPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5177814085082031168L;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedRangeXYPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedRangeXYPlot.java",
        "signature": "org.jfree.chart.plot.CombinedRangeXYPlot.subplots",
        "snippet": "    private List subplots;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " Storage for the subplot references. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedRangeXYPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedRangeXYPlot.java",
        "signature": "org.jfree.chart.plot.CombinedRangeXYPlot.totalWeight",
        "snippet": "    private int totalWeight = 0;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " Total weight of all charts. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedRangeXYPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedRangeXYPlot.java",
        "signature": "org.jfree.chart.plot.CombinedRangeXYPlot.gap",
        "snippet": "    private double gap = 5.0;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " The gap between subplots. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedRangeXYPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedRangeXYPlot.java",
        "signature": "org.jfree.chart.plot.CombinedRangeXYPlot.subplotAreas",
        "snippet": "    private transient Rectangle2D[] subplotAreas;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " Temporary storage for the subplot areas. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot3D",
        "src_path": "source/org/jfree/chart/plot/PiePlot3D.java",
        "signature": "org.jfree.chart.plot.PiePlot3D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3408984188945161432L;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot3D",
        "src_path": "source/org/jfree/chart/plot/PiePlot3D.java",
        "signature": "org.jfree.chart.plot.PiePlot3D.depthFactor",
        "snippet": "    private double depthFactor = 0.12;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " The factor of the depth of the pie from the plot height "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot3D",
        "src_path": "source/org/jfree/chart/plot/PiePlot3D.java",
        "signature": "org.jfree.chart.plot.PiePlot3D.darkerSides",
        "snippet": "    private boolean darkerSides = false;  // default preserves previous ",
        "begin_line": 136,
        "end_line": 136,
        "comment": " default preserves previous "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3537691700434728188L;",
        "begin_line": 236,
        "end_line": 236,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE",
        "snippet": "    public static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE = false;",
        "begin_line": 242,
        "end_line": 242,
        "comment": " \r\n     * The default visibility of the grid lines plotted against the domain \r\n     * axis. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE",
        "snippet": "    public static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE = true;",
        "begin_line": 248,
        "end_line": 248,
        "comment": " \r\n     * The default visibility of the grid lines plotted against the range \r\n     * axis. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE",
        "snippet": "    public static final Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke(0.5f,\n            BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f, new float[] \n            {2.0f, 2.0f}, 0.0f);",
        "begin_line": 251,
        "end_line": 253,
        "comment": " The default grid line stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT",
        "snippet": "    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE;",
        "begin_line": 256,
        "end_line": 256,
        "comment": " The default grid line paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT",
        "snippet": "    public static final Font DEFAULT_VALUE_LABEL_FONT = new Font(\"SansSerif\", \n            Font.PLAIN, 10);",
        "begin_line": 259,
        "end_line": 260,
        "comment": " The default value label font. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE",
        "snippet": "    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;",
        "begin_line": 267,
        "end_line": 267,
        "comment": " \r\n     * The default crosshair visibility. \r\n     * \r\n     * @since 1.0.5\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE",
        "snippet": "    public static final Stroke DEFAULT_CROSSHAIR_STROKE\n            = DEFAULT_GRIDLINE_STROKE;",
        "begin_line": 274,
        "end_line": 275,
        "comment": " \r\n     * The default crosshair stroke. \r\n     * \r\n     * @since 1.0.5\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT",
        "snippet": "    public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;",
        "begin_line": 282,
        "end_line": 282,
        "comment": " \r\n     * The default crosshair paint. \r\n     * \r\n     * @since 1.0.5\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources \n            = ResourceBundle.getBundle(\n            \"org.jfree.chart.plot.LocalizationBundle\");",
        "begin_line": 285,
        "end_line": 287,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.orientation",
        "snippet": "    private PlotOrientation orientation;",
        "begin_line": 290,
        "end_line": 290,
        "comment": " The plot orientation. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.axisOffset",
        "snippet": "    private RectangleInsets axisOffset;",
        "begin_line": 293,
        "end_line": 293,
        "comment": " The offset between the data area and the axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.domainAxes",
        "snippet": "    private ObjectList domainAxes;",
        "begin_line": 296,
        "end_line": 296,
        "comment": " Storage for the domain axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.domainAxisLocations",
        "snippet": "    private ObjectList domainAxisLocations;",
        "begin_line": 299,
        "end_line": 299,
        "comment": " Storage for the domain axis locations. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.drawSharedDomainAxis",
        "snippet": "    private boolean drawSharedDomainAxis;",
        "begin_line": 305,
        "end_line": 305,
        "comment": "\r\n     * A flag that controls whether or not the shared domain axis is drawn \r\n     * (only relevant when the plot is being used as a subplot).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeAxes",
        "snippet": "    private ObjectList rangeAxes;",
        "begin_line": 308,
        "end_line": 308,
        "comment": " Storage for the range axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeAxisLocations",
        "snippet": "    private ObjectList rangeAxisLocations;",
        "begin_line": 311,
        "end_line": 311,
        "comment": " Storage for the range axis locations. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasets",
        "snippet": "    private ObjectList datasets;",
        "begin_line": 314,
        "end_line": 314,
        "comment": " Storage for the datasets. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasetToDomainAxisMap",
        "snippet": "    private ObjectList datasetToDomainAxisMap;",
        "begin_line": 317,
        "end_line": 317,
        "comment": " Storage for keys that map datasets to domain axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasetToRangeAxisMap",
        "snippet": "    private ObjectList datasetToRangeAxisMap;",
        "begin_line": 320,
        "end_line": 320,
        "comment": " Storage for keys that map datasets to range axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.renderers",
        "snippet": "    private ObjectList renderers;",
        "begin_line": 323,
        "end_line": 323,
        "comment": " Storage for the renderers. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.renderingOrder",
        "snippet": "    private DatasetRenderingOrder renderingOrder \n            = DatasetRenderingOrder.REVERSE;",
        "begin_line": 326,
        "end_line": 327,
        "comment": " The dataset rendering order. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.columnRenderingOrder",
        "snippet": "    private SortOrder columnRenderingOrder = SortOrder.ASCENDING;",
        "begin_line": 333,
        "end_line": 333,
        "comment": " \r\n     * Controls the order in which the columns are traversed when rendering the \r\n     * data items. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rowRenderingOrder",
        "snippet": "    private SortOrder rowRenderingOrder = SortOrder.ASCENDING;",
        "begin_line": 339,
        "end_line": 339,
        "comment": " \r\n     * Controls the order in which the rows are traversed when rendering the \r\n     * data items. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.domainGridlinesVisible",
        "snippet": "    private boolean domainGridlinesVisible;",
        "begin_line": 345,
        "end_line": 345,
        "comment": " \r\n     * A flag that controls whether the grid-lines for the domain axis are \r\n     * visible. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.domainGridlinePosition",
        "snippet": "    private CategoryAnchor domainGridlinePosition;",
        "begin_line": 348,
        "end_line": 348,
        "comment": " The position of the domain gridlines relative to the category. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.domainGridlineStroke",
        "snippet": "    private transient Stroke domainGridlineStroke;",
        "begin_line": 351,
        "end_line": 351,
        "comment": " The stroke used to draw the domain grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.domainGridlinePaint",
        "snippet": "    private transient Paint domainGridlinePaint;",
        "begin_line": 354,
        "end_line": 354,
        "comment": " The paint used to draw the domain  grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeGridlinesVisible",
        "snippet": "    private boolean rangeGridlinesVisible;",
        "begin_line": 360,
        "end_line": 360,
        "comment": " \r\n     * A flag that controls whether the grid-lines for the range axis are \r\n     * visible. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeGridlineStroke",
        "snippet": "    private transient Stroke rangeGridlineStroke;",
        "begin_line": 363,
        "end_line": 363,
        "comment": " The stroke used to draw the range axis grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeGridlinePaint",
        "snippet": "    private transient Paint rangeGridlinePaint;",
        "begin_line": 366,
        "end_line": 366,
        "comment": " The paint used to draw the range axis grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.anchorValue",
        "snippet": "    private double anchorValue;",
        "begin_line": 369,
        "end_line": 369,
        "comment": " The anchor value. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeCrosshairVisible",
        "snippet": "    private boolean rangeCrosshairVisible;",
        "begin_line": 372,
        "end_line": 372,
        "comment": " A flag that controls whether or not a range crosshair is drawn. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeCrosshairValue",
        "snippet": "    private double rangeCrosshairValue;",
        "begin_line": 375,
        "end_line": 375,
        "comment": " The range crosshair value. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeCrosshairStroke",
        "snippet": "    private transient Stroke rangeCrosshairStroke;",
        "begin_line": 378,
        "end_line": 378,
        "comment": " The pen/brush used to draw the crosshair (if any). "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeCrosshairPaint",
        "snippet": "    private transient Paint rangeCrosshairPaint;",
        "begin_line": 381,
        "end_line": 381,
        "comment": " The color used to draw the crosshair (if any). "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeCrosshairLockedOnData",
        "snippet": "    private boolean rangeCrosshairLockedOnData = true;",
        "begin_line": 387,
        "end_line": 387,
        "comment": " \r\n     * A flag that controls whether or not the crosshair locks onto actual \r\n     * data points. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.foregroundDomainMarkers",
        "snippet": "    private Map foregroundDomainMarkers;",
        "begin_line": 390,
        "end_line": 390,
        "comment": " A map containing lists of markers for the domain axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.backgroundDomainMarkers",
        "snippet": "    private Map backgroundDomainMarkers;",
        "begin_line": 393,
        "end_line": 393,
        "comment": " A map containing lists of markers for the domain axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.foregroundRangeMarkers",
        "snippet": "    private Map foregroundRangeMarkers;",
        "begin_line": 396,
        "end_line": 396,
        "comment": " A map containing lists of markers for the range axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.backgroundRangeMarkers",
        "snippet": "    private Map backgroundRangeMarkers;",
        "begin_line": 399,
        "end_line": 399,
        "comment": " A map containing lists of markers for the range axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.annotations",
        "snippet": "    private List annotations;",
        "begin_line": 406,
        "end_line": 406,
        "comment": " \r\n     * A (possibly empty) list of annotations for the plot.  The list should\r\n     * be initialised in the constructor and never allowed to be \r\n     * <code>null</code>.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.weight",
        "snippet": "    private int weight;",
        "begin_line": 412,
        "end_line": 412,
        "comment": "\r\n     * The weight for the plot (only relevant when the plot is used as a subplot\r\n     * within a combined plot).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.fixedDomainAxisSpace",
        "snippet": "    private AxisSpace fixedDomainAxisSpace;",
        "begin_line": 415,
        "end_line": 415,
        "comment": " The fixed space for the domain axis. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.fixedRangeAxisSpace",
        "snippet": "    private AxisSpace fixedRangeAxisSpace;",
        "begin_line": 418,
        "end_line": 418,
        "comment": " The fixed space for the range axis. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.fixedLegendItems",
        "snippet": "    private LegendItemCollection fixedLegendItems;",
        "begin_line": 424,
        "end_line": 424,
        "comment": " \r\n     * An optional collection of legend items that can be returned by the \r\n     * getLegendItems() method. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3794383185924179525L;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.MARGIN",
        "snippet": "    private static final int MARGIN = 20;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " The default margin. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.ANNOTATION_MARGIN",
        "snippet": "    private static final double ANNOTATION_MARGIN = 7.0;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " The annotation margin. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE",
        "snippet": "    public static final double DEFAULT_ANGLE_TICK_UNIT_SIZE = 45.0;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " \r\n     * The default angle tick unit size.\r\n     * \r\n     * @since 1.0.10\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.DEFAULT_GRIDLINE_STROKE",
        "snippet": "    public static final Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke(\n            0.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, \n            0.0f, new float[]{2.0f, 2.0f}, 0.0f);",
        "begin_line": 124,
        "end_line": 126,
        "comment": " The default grid line stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.DEFAULT_GRIDLINE_PAINT",
        "snippet": "    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.gray;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " The default grid line paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources \n        = ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");",
        "begin_line": 132,
        "end_line": 133,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.angleTicks",
        "snippet": "    private List angleTicks;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " The angles that are marked with gridlines. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.axis",
        "snippet": "    private ValueAxis axis;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " The axis (used for the y-values). "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.dataset",
        "snippet": "    private XYDataset dataset;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " The dataset. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.renderer",
        "snippet": "    private PolarItemRenderer renderer;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " \r\n     * Object responsible for drawing the visual representation of each point \r\n     * on the plot. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.angleTickUnit",
        "snippet": "    private TickUnit angleTickUnit;",
        "begin_line": 155,
        "end_line": 155,
        "comment": " \r\n     * The tick unit that controls the spacing between the angular grid lines.\r\n     * \r\n     * @since 1.0.10\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.angleLabelsVisible",
        "snippet": "    private boolean angleLabelsVisible = true;",
        "begin_line": 158,
        "end_line": 158,
        "comment": " A flag that controls whether or not the angle labels are visible. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.angleLabelFont",
        "snippet": "    private Font angleLabelFont = new Font(\"SansSerif\", Font.PLAIN, 12);",
        "begin_line": 161,
        "end_line": 161,
        "comment": " The font used to display the angle labels - never null. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.angleLabelPaint",
        "snippet": "    private transient Paint angleLabelPaint = Color.black;",
        "begin_line": 164,
        "end_line": 164,
        "comment": " The paint used to display the angle labels. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.angleGridlinesVisible",
        "snippet": "    private boolean angleGridlinesVisible;",
        "begin_line": 167,
        "end_line": 167,
        "comment": " A flag that controls whether the angular grid-lines are visible. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.angleGridlineStroke",
        "snippet": "    private transient Stroke angleGridlineStroke;",
        "begin_line": 170,
        "end_line": 170,
        "comment": " The stroke used to draw the angular grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.angleGridlinePaint",
        "snippet": "    private transient Paint angleGridlinePaint;",
        "begin_line": 173,
        "end_line": 173,
        "comment": " The paint used to draw the angular grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.radiusGridlinesVisible",
        "snippet": "    private boolean radiusGridlinesVisible;",
        "begin_line": 176,
        "end_line": 176,
        "comment": " A flag that controls whether the radius grid-lines are visible. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.radiusGridlineStroke",
        "snippet": "    private transient Stroke radiusGridlineStroke;",
        "begin_line": 179,
        "end_line": 179,
        "comment": " The stroke used to draw the radius grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.radiusGridlinePaint",
        "snippet": "    private transient Paint radiusGridlinePaint;",
        "begin_line": 182,
        "end_line": 182,
        "comment": " The paint used to draw the radius grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.PolarPlot",
        "src_path": "source/org/jfree/chart/plot/PolarPlot.java",
        "signature": "org.jfree.chart.plot.PolarPlot.cornerTextItems",
        "snippet": "    private List cornerTextItems = new ArrayList();",
        "begin_line": 185,
        "end_line": 185,
        "comment": " The annotations for the plot. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "signature": "org.jfree.chart.plot.PlotOrientation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2508771828190337782L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "signature": "org.jfree.chart.plot.PlotOrientation.HORIZONTAL",
        "snippet": "    public static final PlotOrientation HORIZONTAL\n            = new PlotOrientation(\"PlotOrientation.HORIZONTAL\");",
        "begin_line": 57,
        "end_line": 58,
        "comment": " For a plot where the range axis is horizontal. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "signature": "org.jfree.chart.plot.PlotOrientation.VERTICAL",
        "snippet": "    public static final PlotOrientation VERTICAL\n            = new PlotOrientation(\"PlotOrientation.VERTICAL\");",
        "begin_line": 61,
        "end_line": 62,
        "comment": " For a plot where the range axis is vertical. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "signature": "org.jfree.chart.plot.PlotOrientation.name",
        "snippet": "    private String name;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.plot.WaferMapPlot",
        "src_path": "source/org/jfree/chart/plot/WaferMapPlot.java",
        "signature": "org.jfree.chart.plot.WaferMapPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4668320403707308155L;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.WaferMapPlot",
        "src_path": "source/org/jfree/chart/plot/WaferMapPlot.java",
        "signature": "org.jfree.chart.plot.WaferMapPlot.DEFAULT_GRIDLINE_STROKE",
        "snippet": "    public static final Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke(0.5f,\n        BasicStroke.CAP_BUTT,\n        BasicStroke.JOIN_BEVEL,\n        0.0f,\n        new float[] {2.0f, 2.0f},\n        0.0f);",
        "begin_line": 82,
        "end_line": 87,
        "comment": " The default grid line stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.WaferMapPlot",
        "src_path": "source/org/jfree/chart/plot/WaferMapPlot.java",
        "signature": "org.jfree.chart.plot.WaferMapPlot.DEFAULT_GRIDLINE_PAINT",
        "snippet": "    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.lightGray;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The default grid line paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.WaferMapPlot",
        "src_path": "source/org/jfree/chart/plot/WaferMapPlot.java",
        "signature": "org.jfree.chart.plot.WaferMapPlot.DEFAULT_CROSSHAIR_VISIBLE",
        "snippet": "    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " The default crosshair visibility. "
    },
    {
        "class_name": "org.jfree.chart.plot.WaferMapPlot",
        "src_path": "source/org/jfree/chart/plot/WaferMapPlot.java",
        "signature": "org.jfree.chart.plot.WaferMapPlot.DEFAULT_CROSSHAIR_STROKE",
        "snippet": "    public static final Stroke DEFAULT_CROSSHAIR_STROKE \n        = DEFAULT_GRIDLINE_STROKE;",
        "begin_line": 96,
        "end_line": 97,
        "comment": " The default crosshair stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.WaferMapPlot",
        "src_path": "source/org/jfree/chart/plot/WaferMapPlot.java",
        "signature": "org.jfree.chart.plot.WaferMapPlot.DEFAULT_CROSSHAIR_PAINT",
        "snippet": "    public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " The default crosshair paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.WaferMapPlot",
        "src_path": "source/org/jfree/chart/plot/WaferMapPlot.java",
        "signature": "org.jfree.chart.plot.WaferMapPlot.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources = \n        ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");",
        "begin_line": 103,
        "end_line": 104,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.plot.WaferMapPlot",
        "src_path": "source/org/jfree/chart/plot/WaferMapPlot.java",
        "signature": "org.jfree.chart.plot.WaferMapPlot.orientation",
        "snippet": "    private PlotOrientation orientation;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " The plot orientation. \r\n     *  vertical = notch down\r\n     *  horizontal = notch right\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.WaferMapPlot",
        "src_path": "source/org/jfree/chart/plot/WaferMapPlot.java",
        "signature": "org.jfree.chart.plot.WaferMapPlot.dataset",
        "snippet": "    private WaferMapDataset dataset;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " The dataset. "
    },
    {
        "class_name": "org.jfree.chart.plot.WaferMapPlot",
        "src_path": "source/org/jfree/chart/plot/WaferMapPlot.java",
        "signature": "org.jfree.chart.plot.WaferMapPlot.renderer",
        "snippet": "    private WaferMapRenderer renderer;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " \r\n     * Object responsible for drawing the visual representation of each point \r\n     * on the plot. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -600593412366385072L;    ",
        "begin_line": 56,
        "end_line": 56,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.FORWARD",
        "snippet": "    public static final DatasetRenderingOrder FORWARD\n            = new DatasetRenderingOrder(\"DatasetRenderingOrder.FORWARD\");",
        "begin_line": 62,
        "end_line": 63,
        "comment": " \r\n     * Render datasets in the order 0, 1, 2, ..., N-1, where N is the number \r\n     * of datasets. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.REVERSE",
        "snippet": "    public static final DatasetRenderingOrder REVERSE\n            = new DatasetRenderingOrder(\"DatasetRenderingOrder.REVERSE\");",
        "begin_line": 69,
        "end_line": 70,
        "comment": " \r\n     * Render datasets in the order N-1, N-2, ..., 2, 1, 0, where N is the \r\n     * number of datasets. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.name",
        "snippet": "    private String name;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.plot.JThermometer",
        "src_path": "source/org/jfree/chart/plot/JThermometer.java",
        "signature": "org.jfree.chart.plot.JThermometer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1079905665515589820L;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.JThermometer",
        "src_path": "source/org/jfree/chart/plot/JThermometer.java",
        "signature": "org.jfree.chart.plot.JThermometer.data",
        "snippet": "    private DefaultValueDataset data;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The dataset. "
    },
    {
        "class_name": "org.jfree.chart.plot.JThermometer",
        "src_path": "source/org/jfree/chart/plot/JThermometer.java",
        "signature": "org.jfree.chart.plot.JThermometer.chart",
        "snippet": "    private JFreeChart chart;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The chart. "
    },
    {
        "class_name": "org.jfree.chart.plot.JThermometer",
        "src_path": "source/org/jfree/chart/plot/JThermometer.java",
        "signature": "org.jfree.chart.plot.JThermometer.panel",
        "snippet": "    private ChartPanel panel;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " The chart panel. "
    },
    {
        "class_name": "org.jfree.chart.plot.JThermometer",
        "src_path": "source/org/jfree/chart/plot/JThermometer.java",
        "signature": "org.jfree.chart.plot.JThermometer.plot",
        "snippet": "    private ThermometerPlot plot = new ThermometerPlot();",
        "begin_line": 86,
        "end_line": 86,
        "comment": " The thermometer plot. "
    },
    {
        "class_name": "org.jfree.chart.plot.MultiplePiePlot",
        "src_path": "source/org/jfree/chart/plot/MultiplePiePlot.java",
        "signature": "org.jfree.chart.plot.MultiplePiePlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -355377800470807389L;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.MultiplePiePlot",
        "src_path": "source/org/jfree/chart/plot/MultiplePiePlot.java",
        "signature": "org.jfree.chart.plot.MultiplePiePlot.pieChart",
        "snippet": "    private JFreeChart pieChart;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " The chart object that draws the individual pie charts. "
    },
    {
        "class_name": "org.jfree.chart.plot.MultiplePiePlot",
        "src_path": "source/org/jfree/chart/plot/MultiplePiePlot.java",
        "signature": "org.jfree.chart.plot.MultiplePiePlot.dataset",
        "snippet": "    private CategoryDataset dataset;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " The dataset. "
    },
    {
        "class_name": "org.jfree.chart.plot.MultiplePiePlot",
        "src_path": "source/org/jfree/chart/plot/MultiplePiePlot.java",
        "signature": "org.jfree.chart.plot.MultiplePiePlot.dataExtractOrder",
        "snippet": "    private TableOrder dataExtractOrder;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " The data extract order (by row or by column). "
    },
    {
        "class_name": "org.jfree.chart.plot.MultiplePiePlot",
        "src_path": "source/org/jfree/chart/plot/MultiplePiePlot.java",
        "signature": "org.jfree.chart.plot.MultiplePiePlot.limit",
        "snippet": "    private double limit = 0.0;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " The pie section limit percentage. "
    },
    {
        "class_name": "org.jfree.chart.plot.MultiplePiePlot",
        "src_path": "source/org/jfree/chart/plot/MultiplePiePlot.java",
        "signature": "org.jfree.chart.plot.MultiplePiePlot.aggregatedItemsKey",
        "snippet": "    private Comparable aggregatedItemsKey;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " \r\n     * The key for the aggregated items. \r\n     * @since 1.0.2\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.MultiplePiePlot",
        "src_path": "source/org/jfree/chart/plot/MultiplePiePlot.java",
        "signature": "org.jfree.chart.plot.MultiplePiePlot.aggregatedItemsPaint",
        "snippet": "    private transient Paint aggregatedItemsPaint;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " \r\n     * The paint for the aggregated items. \r\n     * @since 1.0.2\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.MultiplePiePlot",
        "src_path": "source/org/jfree/chart/plot/MultiplePiePlot.java",
        "signature": "org.jfree.chart.plot.MultiplePiePlot.sectionPaints",
        "snippet": "    private transient Map sectionPaints;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " \r\n     * The colors to use for each section. \r\n     * @since 1.0.2\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7339847061039422538L;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE",
        "snippet": "    public static final Paint[] DEFAULT_PAINT_SEQUENCE \n            = ChartColor.createDefaultPaintArray();",
        "begin_line": 83,
        "end_line": 84,
        "comment": " The default fill paint sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE",
        "snippet": "    public static final Paint[] DEFAULT_OUTLINE_PAINT_SEQUENCE = new Paint[] {\n            Color.lightGray};",
        "begin_line": 87,
        "end_line": 88,
        "comment": " The default outline paint sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE",
        "snippet": "    public static final Paint[] DEFAULT_FILL_PAINT_SEQUENCE = new Paint[] {\n            Color.white};",
        "begin_line": 91,
        "end_line": 92,
        "comment": " The default fill paint sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE",
        "snippet": "    public static final Stroke[] DEFAULT_STROKE_SEQUENCE = new Stroke[] {\n            new BasicStroke(1.0f, BasicStroke.CAP_SQUARE, \n                    BasicStroke.JOIN_BEVEL)};",
        "begin_line": 95,
        "end_line": 97,
        "comment": " The default stroke sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE",
        "snippet": "    public static final Stroke[] DEFAULT_OUTLINE_STROKE_SEQUENCE \n            = new Stroke[] {new BasicStroke(1.0f, BasicStroke.CAP_SQUARE, \n                    BasicStroke.JOIN_BEVEL)};",
        "begin_line": 100,
        "end_line": 102,
        "comment": " The default outline stroke sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE",
        "snippet": "    public static final Shape[] DEFAULT_SHAPE_SEQUENCE \n            = createStandardSeriesShapes();",
        "begin_line": 105,
        "end_line": 106,
        "comment": " The default shape sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.paintSequence",
        "snippet": "    private transient Paint[] paintSequence;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " The paint sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.paintIndex",
        "snippet": "    private int paintIndex;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " The current paint index. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.outlinePaintSequence",
        "snippet": "    private transient Paint[] outlinePaintSequence;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " The outline paint sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.outlinePaintIndex",
        "snippet": "    private int outlinePaintIndex;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " The current outline paint index. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.fillPaintSequence",
        "snippet": "    private transient Paint[] fillPaintSequence;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " The fill paint sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.fillPaintIndex",
        "snippet": "    private int fillPaintIndex;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " The current fill paint index. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.strokeSequence",
        "snippet": "    private transient Stroke[] strokeSequence;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " The stroke sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.strokeIndex",
        "snippet": "    private int strokeIndex;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The current stroke index. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.outlineStrokeSequence",
        "snippet": "    private transient Stroke[] outlineStrokeSequence;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " The outline stroke sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.outlineStrokeIndex",
        "snippet": "    private int outlineStrokeIndex;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " The current outline stroke index. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.shapeSequence",
        "snippet": "    private transient Shape[] shapeSequence;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " The shape sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.shapeIndex",
        "snippet": "    private int shapeIndex;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " The current shape index. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2987472457734470962L;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.DEFAULT_DIAL_BACKGROUND_PAINT",
        "snippet": "    static final Paint DEFAULT_DIAL_BACKGROUND_PAINT = Color.black;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " The default background paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.DEFAULT_NEEDLE_PAINT",
        "snippet": "    static final Paint DEFAULT_NEEDLE_PAINT = Color.green;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " The default needle paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.DEFAULT_VALUE_FONT",
        "snippet": "    static final Font DEFAULT_VALUE_FONT = new Font(\"SansSerif\", Font.BOLD, 12);",
        "begin_line": 144,
        "end_line": 144,
        "comment": " The default value font. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.DEFAULT_VALUE_PAINT",
        "snippet": "    static final Paint DEFAULT_VALUE_PAINT = Color.yellow;",
        "begin_line": 147,
        "end_line": 147,
        "comment": " The default value paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.DEFAULT_METER_ANGLE",
        "snippet": "    public static final int DEFAULT_METER_ANGLE = 270;",
        "begin_line": 150,
        "end_line": 150,
        "comment": " The default meter angle. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.DEFAULT_BORDER_SIZE",
        "snippet": "    public static final float DEFAULT_BORDER_SIZE = 3f;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " The default border size. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.DEFAULT_CIRCLE_SIZE",
        "snippet": "    public static final float DEFAULT_CIRCLE_SIZE = 10f;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " The default circle size. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.DEFAULT_LABEL_FONT",
        "snippet": "    public static final Font DEFAULT_LABEL_FONT = new Font(\"SansSerif\", \n            Font.BOLD, 10);",
        "begin_line": 159,
        "end_line": 160,
        "comment": " The default label font. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.dataset",
        "snippet": "    private ValueDataset dataset;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " The dataset (contains a single value). "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.shape",
        "snippet": "    private DialShape shape;",
        "begin_line": 166,
        "end_line": 166,
        "comment": " The dial shape (background shape). "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.meterAngle",
        "snippet": "    private int meterAngle;",
        "begin_line": 169,
        "end_line": 169,
        "comment": " The dial extent (measured in degrees). "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.range",
        "snippet": "    private Range range;",
        "begin_line": 172,
        "end_line": 172,
        "comment": " The overall range of data values on the dial. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.tickSize",
        "snippet": "    private double tickSize;",
        "begin_line": 175,
        "end_line": 175,
        "comment": " The tick size. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.tickPaint",
        "snippet": "    private transient Paint tickPaint;",
        "begin_line": 178,
        "end_line": 178,
        "comment": " The paint used to draw the ticks. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.units",
        "snippet": "    private String units;",
        "begin_line": 181,
        "end_line": 181,
        "comment": " The units displayed on the dial. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.valueFont",
        "snippet": "    private Font valueFont;",
        "begin_line": 184,
        "end_line": 184,
        "comment": " The font for the value displayed in the center of the dial. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.valuePaint",
        "snippet": "    private transient Paint valuePaint;",
        "begin_line": 187,
        "end_line": 187,
        "comment": " The paint for the value displayed in the center of the dial. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.drawBorder",
        "snippet": "    private boolean drawBorder;",
        "begin_line": 190,
        "end_line": 190,
        "comment": " A flag that controls whether or not the border is drawn. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.dialOutlinePaint",
        "snippet": "    private transient Paint dialOutlinePaint;",
        "begin_line": 193,
        "end_line": 193,
        "comment": " The outline paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.dialBackgroundPaint",
        "snippet": "    private transient Paint dialBackgroundPaint;",
        "begin_line": 196,
        "end_line": 196,
        "comment": " The paint for the dial background. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.needlePaint",
        "snippet": "    private transient Paint needlePaint;",
        "begin_line": 199,
        "end_line": 199,
        "comment": " The paint for the needle. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.tickLabelsVisible",
        "snippet": "    private boolean tickLabelsVisible;",
        "begin_line": 202,
        "end_line": 202,
        "comment": " A flag that controls whether or not the tick labels are visible. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.tickLabelFont",
        "snippet": "    private Font tickLabelFont;",
        "begin_line": 205,
        "end_line": 205,
        "comment": " The tick label font. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.tickLabelPaint",
        "snippet": "    private transient Paint tickLabelPaint;",
        "begin_line": 208,
        "end_line": 208,
        "comment": " The tick label paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.tickLabelFormat",
        "snippet": "    private NumberFormat tickLabelFormat;",
        "begin_line": 211,
        "end_line": 211,
        "comment": " The tick label format. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources = \n        ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");",
        "begin_line": 214,
        "end_line": 215,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterPlot",
        "src_path": "source/org/jfree/chart/plot/MeterPlot.java",
        "signature": "org.jfree.chart.plot.MeterPlot.intervals",
        "snippet": "    private List intervals;",
        "begin_line": 221,
        "end_line": 221,
        "comment": " \r\n     * A (possibly empty) list of the {@link MeterInterval}s to be highlighted \r\n     * on the dial. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.RingPlot",
        "src_path": "source/org/jfree/chart/plot/RingPlot.java",
        "signature": "org.jfree.chart.plot.RingPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1556064784129676620L;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.RingPlot",
        "src_path": "source/org/jfree/chart/plot/RingPlot.java",
        "signature": "org.jfree.chart.plot.RingPlot.separatorsVisible",
        "snippet": "    private boolean separatorsVisible;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " \r\n     * A flag that controls whether or not separators are drawn between the\r\n     * sections of the chart.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.RingPlot",
        "src_path": "source/org/jfree/chart/plot/RingPlot.java",
        "signature": "org.jfree.chart.plot.RingPlot.separatorStroke",
        "snippet": "    private transient Stroke separatorStroke;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " The stroke used to draw separators. "
    },
    {
        "class_name": "org.jfree.chart.plot.RingPlot",
        "src_path": "source/org/jfree/chart/plot/RingPlot.java",
        "signature": "org.jfree.chart.plot.RingPlot.separatorPaint",
        "snippet": "    private transient Paint separatorPaint;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The paint used to draw separators. "
    },
    {
        "class_name": "org.jfree.chart.plot.RingPlot",
        "src_path": "source/org/jfree/chart/plot/RingPlot.java",
        "signature": "org.jfree.chart.plot.RingPlot.innerSeparatorExtension",
        "snippet": "    private double innerSeparatorExtension;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " \r\n     * The length of the inner separator extension (as a percentage of the\r\n     * depth of the sections). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.RingPlot",
        "src_path": "source/org/jfree/chart/plot/RingPlot.java",
        "signature": "org.jfree.chart.plot.RingPlot.outerSeparatorExtension",
        "snippet": "    private double outerSeparatorExtension;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " \r\n     * The length of the outer separator extension (as a percentage of the\r\n     * depth of the sections). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.RingPlot",
        "src_path": "source/org/jfree/chart/plot/RingPlot.java",
        "signature": "org.jfree.chart.plot.RingPlot.sectionDepth",
        "snippet": "    private double sectionDepth;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " \r\n     * The depth of the section as a percentage of the diameter.  \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5376340422031599463L;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.DEFAULT_HEAD",
        "snippet": "    public static final double DEFAULT_HEAD = 0.01;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " The default head radius percent (currently 1%). "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP",
        "snippet": "    public static final double DEFAULT_AXIS_LABEL_GAP = 0.10;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " The default axis label gap (currently 10%). "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.DEFAULT_INTERIOR_GAP",
        "snippet": "    public static final double DEFAULT_INTERIOR_GAP = 0.25;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " The default interior gap. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.MAX_INTERIOR_GAP",
        "snippet": "    public static final double MAX_INTERIOR_GAP = 0.40;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " The maximum interior gap (currently 40%). "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.DEFAULT_START_ANGLE",
        "snippet": "    public static final double DEFAULT_START_ANGLE = 90.0;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " The default starting angle for the radar chart axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.DEFAULT_LABEL_FONT",
        "snippet": "    public static final Font DEFAULT_LABEL_FONT = new Font(\"SansSerif\", \n            Font.PLAIN, 10);",
        "begin_line": 144,
        "end_line": 145,
        "comment": " The default series label font. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.DEFAULT_LABEL_PAINT",
        "snippet": "    public static final Paint  DEFAULT_LABEL_PAINT = Color.black;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " The default series label paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.DEFAULT_LABEL_BACKGROUND_PAINT",
        "snippet": "    public static final Paint  DEFAULT_LABEL_BACKGROUND_PAINT \n            = new Color(255, 255, 192);",
        "begin_line": 151,
        "end_line": 152,
        "comment": " The default series label background paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.DEFAULT_LABEL_OUTLINE_PAINT",
        "snippet": "    public static final Paint  DEFAULT_LABEL_OUTLINE_PAINT = Color.black;",
        "begin_line": 155,
        "end_line": 155,
        "comment": " The default series label outline paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE",
        "snippet": "    public static final Stroke DEFAULT_LABEL_OUTLINE_STROKE \n            = new BasicStroke(0.5f);",
        "begin_line": 158,
        "end_line": 159,
        "comment": " The default series label outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.DEFAULT_LABEL_SHADOW_PAINT",
        "snippet": "    public static final Paint  DEFAULT_LABEL_SHADOW_PAINT = Color.lightGray;",
        "begin_line": 162,
        "end_line": 162,
        "comment": " The default series label shadow paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.DEFAULT_MAX_VALUE",
        "snippet": "    public static final double DEFAULT_MAX_VALUE = -1.0;",
        "begin_line": 168,
        "end_line": 168,
        "comment": " \r\n     * The default maximum value plotted - forces the plot to evaluate\r\n     *  the maximum from the data passed in\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.headPercent",
        "snippet": "    protected double headPercent;",
        "begin_line": 171,
        "end_line": 171,
        "comment": " The head radius as a percentage of the available drawing area. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.interiorGap",
        "snippet": "    private double interiorGap;",
        "begin_line": 174,
        "end_line": 174,
        "comment": " The space left around the outside of the plot as a percentage. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.axisLabelGap",
        "snippet": "    private double axisLabelGap;",
        "begin_line": 177,
        "end_line": 177,
        "comment": " The gap between the labels and the axes as a %age of the radius. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.axisLinePaint",
        "snippet": "    private transient Paint axisLinePaint;",
        "begin_line": 184,
        "end_line": 184,
        "comment": "\r\n     * The paint used to draw the axis lines.\r\n     * \r\n     * @since 1.0.4\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.axisLineStroke",
        "snippet": "    private transient Stroke axisLineStroke;",
        "begin_line": 191,
        "end_line": 191,
        "comment": "\r\n     * The stroke used to draw the axis lines.\r\n     * \r\n     * @since 1.0.4\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.dataset",
        "snippet": "    private CategoryDataset dataset;",
        "begin_line": 194,
        "end_line": 194,
        "comment": " The dataset. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.maxValue",
        "snippet": "    private double maxValue;",
        "begin_line": 197,
        "end_line": 197,
        "comment": " The maximum value we are plotting against on each category axis "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.dataExtractOrder",
        "snippet": "    private TableOrder dataExtractOrder;",
        "begin_line": 205,
        "end_line": 205,
        "comment": " \r\n     * The data extract order (BY_ROW or BY_COLUMN). This denotes whether\r\n     * the data series are stored in rows (in which case the category names are\r\n     * derived from the column keys) or in columns (in which case the category\r\n     * names are derived from the row keys).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.startAngle",
        "snippet": "    private double startAngle;",
        "begin_line": 208,
        "end_line": 208,
        "comment": " The starting angle. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.direction",
        "snippet": "    private Rotation direction;",
        "begin_line": 211,
        "end_line": 211,
        "comment": " The direction for drawing the radar axis & plots. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.legendItemShape",
        "snippet": "    private transient Shape legendItemShape;",
        "begin_line": 214,
        "end_line": 214,
        "comment": " The legend item shape. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.seriesPaint",
        "snippet": "    private transient Paint seriesPaint;",
        "begin_line": 217,
        "end_line": 217,
        "comment": " The paint for ALL series (overrides list). "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.seriesPaintList",
        "snippet": "    private PaintList seriesPaintList;",
        "begin_line": 220,
        "end_line": 220,
        "comment": " The series paint list. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.baseSeriesPaint",
        "snippet": "    private transient Paint baseSeriesPaint;",
        "begin_line": 223,
        "end_line": 223,
        "comment": " The base series paint (fallback). "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.seriesOutlinePaint",
        "snippet": "    private transient Paint seriesOutlinePaint;",
        "begin_line": 226,
        "end_line": 226,
        "comment": " The outline paint for ALL series (overrides list). "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.seriesOutlinePaintList",
        "snippet": "    private PaintList seriesOutlinePaintList;",
        "begin_line": 229,
        "end_line": 229,
        "comment": " The series outline paint list. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.baseSeriesOutlinePaint",
        "snippet": "    private transient Paint baseSeriesOutlinePaint;",
        "begin_line": 232,
        "end_line": 232,
        "comment": " The base series outline paint (fallback). "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.seriesOutlineStroke",
        "snippet": "    private transient Stroke seriesOutlineStroke;",
        "begin_line": 235,
        "end_line": 235,
        "comment": " The outline stroke for ALL series (overrides list). "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.seriesOutlineStrokeList",
        "snippet": "    private StrokeList seriesOutlineStrokeList;",
        "begin_line": 238,
        "end_line": 238,
        "comment": " The series outline stroke list. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.baseSeriesOutlineStroke",
        "snippet": "    private transient Stroke baseSeriesOutlineStroke;",
        "begin_line": 241,
        "end_line": 241,
        "comment": " The base series outline stroke (fallback). "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.labelFont",
        "snippet": "    private Font labelFont;",
        "begin_line": 244,
        "end_line": 244,
        "comment": " The font used to display the category labels. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.labelPaint",
        "snippet": "    private transient Paint labelPaint;",
        "begin_line": 247,
        "end_line": 247,
        "comment": " The color used to draw the category labels. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.labelGenerator",
        "snippet": "    private CategoryItemLabelGenerator labelGenerator;",
        "begin_line": 250,
        "end_line": 250,
        "comment": " The label generator. "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.webFilled",
        "snippet": "    private boolean webFilled = true;",
        "begin_line": 253,
        "end_line": 253,
        "comment": " controls if the web polygons are filled or not "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.toolTipGenerator",
        "snippet": "    private CategoryToolTipGenerator toolTipGenerator;",
        "begin_line": 256,
        "end_line": 256,
        "comment": " A tooltip generator for the plot (<code>null</code> permitted). "
    },
    {
        "class_name": "org.jfree.chart.plot.SpiderWebPlot",
        "src_path": "source/org/jfree/chart/plot/SpiderWebPlot.java",
        "signature": "org.jfree.chart.plot.SpiderWebPlot.urlGenerator",
        "snippet": "    private CategoryURLGenerator urlGenerator;",
        "begin_line": 259,
        "end_line": 259,
        "comment": " A URL generator for the plot (<code>null</code> permitted). "
    },
    {
        "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
        "src_path": "source/org/jfree/chart/plot/PieLabelLinkStyle.java",
        "signature": "org.jfree.chart.plot.PieLabelLinkStyle.STANDARD",
        "snippet": "    public static final PieLabelLinkStyle STANDARD\n            = new PieLabelLinkStyle(\"PieLabelLinkStyle.STANDARD\");",
        "begin_line": 55,
        "end_line": 56,
        "comment": " STANDARD. "
    },
    {
        "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
        "src_path": "source/org/jfree/chart/plot/PieLabelLinkStyle.java",
        "signature": "org.jfree.chart.plot.PieLabelLinkStyle.QUAD_CURVE",
        "snippet": "    public static final PieLabelLinkStyle QUAD_CURVE\n            = new PieLabelLinkStyle(\"PieLabelLinkStyle.QUAD_CURVE\");",
        "begin_line": 59,
        "end_line": 60,
        "comment": " QUAD_CURVE. "
    },
    {
        "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
        "src_path": "source/org/jfree/chart/plot/PieLabelLinkStyle.java",
        "signature": "org.jfree.chart.plot.PieLabelLinkStyle.CUBIC_CURVE",
        "snippet": "    public static final PieLabelLinkStyle CUBIC_CURVE\n            = new PieLabelLinkStyle(\"PieLabelLinkStyle.CUBIC_CURVE\");",
        "begin_line": 63,
        "end_line": 64,
        "comment": " CUBIC_CURVE. "
    },
    {
        "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
        "src_path": "source/org/jfree/chart/plot/PieLabelLinkStyle.java",
        "signature": "org.jfree.chart.plot.PieLabelLinkStyle.name",
        "snippet": "    private String name;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7871545897358563521L;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.DEFAULT_GRIDLINE_STROKE",
        "snippet": "    public static final Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke(0.5f,\n            BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f, new float[] \n            {2.0f, 2.0f}, 0.0f);",
        "begin_line": 107,
        "end_line": 109,
        "comment": " The default grid line stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.DEFAULT_GRIDLINE_PAINT",
        "snippet": "    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.lightGray;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " The default grid line paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.data",
        "snippet": "    private float[][] data;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " The data. "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.xDataRange",
        "snippet": "    private Range xDataRange;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " The x data range. "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.yDataRange",
        "snippet": "    private Range yDataRange;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " The y data range. "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.domainAxis",
        "snippet": "    private ValueAxis domainAxis;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " The domain axis (used for the x-values). "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.rangeAxis",
        "snippet": "    private ValueAxis rangeAxis;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " The range axis (used for the y-values). "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The paint used to plot data points. "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.domainGridlinesVisible",
        "snippet": "    private boolean domainGridlinesVisible;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " A flag that controls whether the domain grid-lines are visible. "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.domainGridlineStroke",
        "snippet": "    private transient Stroke domainGridlineStroke;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " The stroke used to draw the domain grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.domainGridlinePaint",
        "snippet": "    private transient Paint domainGridlinePaint;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " The paint used to draw the domain grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.rangeGridlinesVisible",
        "snippet": "    private boolean rangeGridlinesVisible;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " A flag that controls whether the range grid-lines are visible. "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.rangeGridlineStroke",
        "snippet": "    private transient Stroke rangeGridlineStroke;",
        "begin_line": 145,
        "end_line": 145,
        "comment": " The stroke used to draw the range grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.rangeGridlinePaint",
        "snippet": "    private transient Paint rangeGridlinePaint;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " The paint used to draw the range grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.FastScatterPlot",
        "src_path": "source/org/jfree/chart/plot/FastScatterPlot.java",
        "signature": "org.jfree.chart.plot.FastScatterPlot.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources = \n            ResourceBundle.getBundle(\n            \"org.jfree.chart.plot.LocalizationBundle\");",
        "begin_line": 151,
        "end_line": 153,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedDomainCategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedDomainCategoryPlot.java",
        "signature": "org.jfree.chart.plot.CombinedDomainCategoryPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8207194522653701572L;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedDomainCategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedDomainCategoryPlot.java",
        "signature": "org.jfree.chart.plot.CombinedDomainCategoryPlot.subplots",
        "snippet": "    private List subplots;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " Storage for the subplot references. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedDomainCategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedDomainCategoryPlot.java",
        "signature": "org.jfree.chart.plot.CombinedDomainCategoryPlot.totalWeight",
        "snippet": "    private int totalWeight;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Total weight of all charts. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedDomainCategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedDomainCategoryPlot.java",
        "signature": "org.jfree.chart.plot.CombinedDomainCategoryPlot.gap",
        "snippet": "    private double gap;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " The gap between subplots. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedDomainCategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedDomainCategoryPlot.java",
        "signature": "org.jfree.chart.plot.CombinedDomainCategoryPlot.subplotAreas",
        "snippet": "    private transient Rectangle2D[] subplotAreas;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " Temporary storage for the subplot areas. "
    },
    {
        "class_name": "org.jfree.chart.plot.ValueMarker",
        "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
        "signature": "org.jfree.chart.plot.ValueMarker.value",
        "snippet": "    private double value;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The value. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryMarker",
        "src_path": "source/org/jfree/chart/plot/CategoryMarker.java",
        "signature": "org.jfree.chart.plot.CategoryMarker.key",
        "snippet": "    private Comparable key;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The category key. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryMarker",
        "src_path": "source/org/jfree/chart/plot/CategoryMarker.java",
        "signature": "org.jfree.chart.plot.CategoryMarker.drawAsLine",
        "snippet": "    private boolean drawAsLine = false;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " \r\n     * A hint that the marker should be drawn as a line rather than a region. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.IntervalMarker",
        "src_path": "source/org/jfree/chart/plot/IntervalMarker.java",
        "signature": "org.jfree.chart.plot.IntervalMarker.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1762344775267627916L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.IntervalMarker",
        "src_path": "source/org/jfree/chart/plot/IntervalMarker.java",
        "signature": "org.jfree.chart.plot.IntervalMarker.startValue",
        "snippet": "    private double startValue;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The start value. "
    },
    {
        "class_name": "org.jfree.chart.plot.IntervalMarker",
        "src_path": "source/org/jfree/chart/plot/IntervalMarker.java",
        "signature": "org.jfree.chart.plot.IntervalMarker.endValue",
        "snippet": "    private double endValue;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The end value. "
    },
    {
        "class_name": "org.jfree.chart.plot.IntervalMarker",
        "src_path": "source/org/jfree/chart/plot/IntervalMarker.java",
        "signature": "org.jfree.chart.plot.IntervalMarker.gradientPaintTransformer",
        "snippet": "    private GradientPaintTransformer gradientPaintTransformer;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The gradient paint transformer (optional). "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedRangeCategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedRangeCategoryPlot.java",
        "signature": "org.jfree.chart.plot.CombinedRangeCategoryPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7260210007554504515L;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedRangeCategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedRangeCategoryPlot.java",
        "signature": "org.jfree.chart.plot.CombinedRangeCategoryPlot.subplots",
        "snippet": "    private List subplots;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Storage for the subplot references. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedRangeCategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedRangeCategoryPlot.java",
        "signature": "org.jfree.chart.plot.CombinedRangeCategoryPlot.totalWeight",
        "snippet": "    private int totalWeight;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Total weight of all charts. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedRangeCategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedRangeCategoryPlot.java",
        "signature": "org.jfree.chart.plot.CombinedRangeCategoryPlot.gap",
        "snippet": "    private double gap;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The gap between subplots. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedRangeCategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedRangeCategoryPlot.java",
        "signature": "org.jfree.chart.plot.CombinedRangeCategoryPlot.subplotArea",
        "snippet": "    private transient Rectangle2D[] subplotArea;  // TODO: move to plot state",
        "begin_line": 102,
        "end_line": 102,
        "comment": " TODO: move to plot state"
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -795612466005590431L;",
        "begin_line": 239,
        "end_line": 239,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_INTERIOR_GAP",
        "snippet": "    public static final double DEFAULT_INTERIOR_GAP = 0.08;",
        "begin_line": 242,
        "end_line": 242,
        "comment": " The default interior gap. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.MAX_INTERIOR_GAP",
        "snippet": "    public static final double MAX_INTERIOR_GAP = 0.40;",
        "begin_line": 245,
        "end_line": 245,
        "comment": " The maximum interior gap (currently 40%). "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_START_ANGLE",
        "snippet": "    public static final double DEFAULT_START_ANGLE = 90.0;",
        "begin_line": 248,
        "end_line": 248,
        "comment": " The default starting angle for the pie chart. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT",
        "snippet": "    public static final Font DEFAULT_LABEL_FONT = new Font(\"SansSerif\", \n            Font.PLAIN, 10);",
        "begin_line": 251,
        "end_line": 252,
        "comment": " The default section label font. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT",
        "snippet": "    public static final Paint DEFAULT_LABEL_PAINT = Color.black;",
        "begin_line": 255,
        "end_line": 255,
        "comment": " The default section label paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT",
        "snippet": "    public static final Paint DEFAULT_LABEL_BACKGROUND_PAINT = new Color(255, \n            255, 192);",
        "begin_line": 258,
        "end_line": 259,
        "comment": " The default section label background paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT",
        "snippet": "    public static final Paint DEFAULT_LABEL_OUTLINE_PAINT = Color.black;",
        "begin_line": 262,
        "end_line": 262,
        "comment": " The default section label outline paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE",
        "snippet": "    public static final Stroke DEFAULT_LABEL_OUTLINE_STROKE = new BasicStroke(\n            0.5f);",
        "begin_line": 265,
        "end_line": 266,
        "comment": " The default section label outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT",
        "snippet": "    public static final Paint DEFAULT_LABEL_SHADOW_PAINT = new Color(151, 151, \n            151, 128);",
        "begin_line": 269,
        "end_line": 270,
        "comment": " The default section label shadow paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW",
        "snippet": "    public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 0.00001;",
        "begin_line": 273,
        "end_line": 273,
        "comment": " The default minimum arc angle to draw. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.dataset",
        "snippet": "    private PieDataset dataset;",
        "begin_line": 276,
        "end_line": 276,
        "comment": " The dataset for the pie chart. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.pieIndex",
        "snippet": "    private int pieIndex;",
        "begin_line": 279,
        "end_line": 279,
        "comment": " The pie index (used by the {@link MultiplePiePlot} class). "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.interiorGap",
        "snippet": "    private double interiorGap;",
        "begin_line": 285,
        "end_line": 285,
        "comment": " \r\n     * The amount of space left around the outside of the pie plot, expressed \r\n     * as a percentage of the plot area width and height. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.circular",
        "snippet": "    private boolean circular;",
        "begin_line": 288,
        "end_line": 288,
        "comment": " Flag determining whether to draw an ellipse or a perfect circle. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.startAngle",
        "snippet": "    private double startAngle;",
        "begin_line": 291,
        "end_line": 291,
        "comment": " The starting angle. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.direction",
        "snippet": "    private Rotation direction;",
        "begin_line": 294,
        "end_line": 294,
        "comment": " The direction for the pie segments. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.sectionPaintMap",
        "snippet": "    private PaintMap sectionPaintMap;",
        "begin_line": 297,
        "end_line": 297,
        "comment": " The section paint map. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.baseSectionPaint",
        "snippet": "    private transient Paint baseSectionPaint;",
        "begin_line": 300,
        "end_line": 300,
        "comment": " The base section paint (fallback). "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.sectionOutlinesVisible",
        "snippet": "    private boolean sectionOutlinesVisible;",
        "begin_line": 306,
        "end_line": 306,
        "comment": " \r\n     * A flag that controls whether or not an outline is drawn for each\r\n     * section in the plot.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.sectionOutlinePaintMap",
        "snippet": "    private PaintMap sectionOutlinePaintMap;",
        "begin_line": 309,
        "end_line": 309,
        "comment": " The section outline paint map. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.baseSectionOutlinePaint",
        "snippet": "    private transient Paint baseSectionOutlinePaint;",
        "begin_line": 312,
        "end_line": 312,
        "comment": " The base section outline paint (fallback). "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.sectionOutlineStrokeMap",
        "snippet": "    private StrokeMap sectionOutlineStrokeMap;",
        "begin_line": 315,
        "end_line": 315,
        "comment": " The section outline stroke map. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.baseSectionOutlineStroke",
        "snippet": "    private transient Stroke baseSectionOutlineStroke;",
        "begin_line": 318,
        "end_line": 318,
        "comment": " The base section outline stroke (fallback). "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.shadowPaint",
        "snippet": "    private transient Paint shadowPaint = Color.gray;",
        "begin_line": 321,
        "end_line": 321,
        "comment": " The shadow paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.shadowXOffset",
        "snippet": "    private double shadowXOffset = 4.0f;",
        "begin_line": 324,
        "end_line": 324,
        "comment": " The x-offset for the shadow effect. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.shadowYOffset",
        "snippet": "    private double shadowYOffset = 4.0f;",
        "begin_line": 327,
        "end_line": 327,
        "comment": " The y-offset for the shadow effect. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.explodePercentages",
        "snippet": "    private Map explodePercentages;",
        "begin_line": 330,
        "end_line": 330,
        "comment": " The percentage amount to explode each pie section. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelGenerator",
        "snippet": "    private PieSectionLabelGenerator labelGenerator;",
        "begin_line": 333,
        "end_line": 333,
        "comment": " The section label generator. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelFont",
        "snippet": "    private Font labelFont;",
        "begin_line": 336,
        "end_line": 336,
        "comment": " The font used to display the section labels. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelPaint",
        "snippet": "    private transient Paint labelPaint;",
        "begin_line": 339,
        "end_line": 339,
        "comment": " The color used to draw the section labels. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelBackgroundPaint",
        "snippet": "    private transient Paint labelBackgroundPaint;",
        "begin_line": 345,
        "end_line": 345,
        "comment": " \r\n     * The color used to draw the background of the section labels.  If this\r\n     * is <code>null</code>, the background is not filled.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelOutlinePaint",
        "snippet": "    private transient Paint labelOutlinePaint;",
        "begin_line": 351,
        "end_line": 351,
        "comment": " \r\n     * The paint used to draw the outline of the section labels \r\n     * (<code>null</code> permitted). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelOutlineStroke",
        "snippet": "    private transient Stroke labelOutlineStroke;",
        "begin_line": 357,
        "end_line": 357,
        "comment": " \r\n     * The stroke used to draw the outline of the section labels \r\n     * (<code>null</code> permitted). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelShadowPaint",
        "snippet": "    private transient Paint labelShadowPaint;",
        "begin_line": 363,
        "end_line": 363,
        "comment": " \r\n     * The paint used to draw the shadow for the section labels \r\n     * (<code>null</code> permitted). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.simpleLabels",
        "snippet": "    private boolean simpleLabels = true;",
        "begin_line": 370,
        "end_line": 370,
        "comment": "\r\n     * A flag that controls whether simple or extended labels are used.\r\n     * \r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelPadding",
        "snippet": "    private RectangleInsets labelPadding;",
        "begin_line": 378,
        "end_line": 378,
        "comment": "\r\n     * The padding between the labels and the label outlines.  This is not\r\n     * allowed to be <code>null</code>.\r\n     * \r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.simpleLabelOffset",
        "snippet": "    private RectangleInsets simpleLabelOffset;",
        "begin_line": 385,
        "end_line": 385,
        "comment": "\r\n     * The simple label offset.\r\n     * \r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.maximumLabelWidth",
        "snippet": "    private double maximumLabelWidth = 0.14;",
        "begin_line": 388,
        "end_line": 388,
        "comment": " The maximum label width as a percentage of the plot width. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelGap",
        "snippet": "    private double labelGap = 0.025;",
        "begin_line": 394,
        "end_line": 394,
        "comment": " \r\n     * The gap between the labels and the link corner, as a percentage of the \r\n     * plot width. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelLinksVisible",
        "snippet": "    private boolean labelLinksVisible;",
        "begin_line": 397,
        "end_line": 397,
        "comment": " A flag that controls whether or not the label links are drawn. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelLinkStyle",
        "snippet": "    private PieLabelLinkStyle labelLinkStyle = PieLabelLinkStyle.STANDARD;",
        "begin_line": 404,
        "end_line": 404,
        "comment": " \r\n     * The label link style.\r\n     * \r\n     * @since 1.0.10\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelLinkMargin",
        "snippet": "    private double labelLinkMargin = 0.025;",
        "begin_line": 407,
        "end_line": 407,
        "comment": " The link margin. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelLinkPaint",
        "snippet": "    private transient Paint labelLinkPaint = Color.black;",
        "begin_line": 410,
        "end_line": 410,
        "comment": " The paint used for the label linking lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelLinkStroke",
        "snippet": "    private transient Stroke labelLinkStroke = new BasicStroke(0.5f);",
        "begin_line": 413,
        "end_line": 413,
        "comment": " The stroke used for the label linking lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.labelDistributor",
        "snippet": "    private AbstractPieLabelDistributor labelDistributor;",
        "begin_line": 420,
        "end_line": 420,
        "comment": " \r\n     * The pie section label distributor.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.toolTipGenerator",
        "snippet": "    private PieToolTipGenerator toolTipGenerator;",
        "begin_line": 423,
        "end_line": 423,
        "comment": " The tooltip generator. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.urlGenerator",
        "snippet": "    private PieURLGenerator urlGenerator;",
        "begin_line": 426,
        "end_line": 426,
        "comment": " The URL generator. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.legendLabelGenerator",
        "snippet": "    private PieSectionLabelGenerator legendLabelGenerator;",
        "begin_line": 429,
        "end_line": 429,
        "comment": " The legend label generator. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.legendLabelToolTipGenerator",
        "snippet": "    private PieSectionLabelGenerator legendLabelToolTipGenerator;",
        "begin_line": 432,
        "end_line": 432,
        "comment": " A tool tip generator for the legend. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.legendLabelURLGenerator",
        "snippet": "    private PieURLGenerator legendLabelURLGenerator;",
        "begin_line": 439,
        "end_line": 439,
        "comment": " \r\n     * A URL generator for the legend items (optional).  \r\n     *\r\n     * @since 1.0.4. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.ignoreNullValues",
        "snippet": "    private boolean ignoreNullValues;",
        "begin_line": 444,
        "end_line": 444,
        "comment": " \r\n     * A flag that controls whether <code>null</code> values are ignored.  \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.ignoreZeroValues",
        "snippet": "    private boolean ignoreZeroValues;",
        "begin_line": 449,
        "end_line": 449,
        "comment": "\r\n     * A flag that controls whether zero values are ignored.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.legendItemShape",
        "snippet": "    private transient Shape legendItemShape;",
        "begin_line": 452,
        "end_line": 452,
        "comment": " The legend item shape. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.minimumArcAngleToDraw",
        "snippet": "    private double minimumArcAngleToDraw;",
        "begin_line": 465,
        "end_line": 465,
        "comment": "\r\n     * The smallest arc angle that will get drawn (this is to avoid a bug in \r\n     * various Java implementations that causes the JVM to crash).  See this \r\n     * link for details:\r\n     *\r\n     * http://www.jfree.org/phpBB2/viewtopic.php?t=2707\r\n     *\r\n     * ...and this bug report in the Java Bug Parade:\r\n     *\r\n     * http://developer.java.sun.com/developer/bugParade/bugs/4836495.html\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources =\n            ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");",
        "begin_line": 468,
        "end_line": 469,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.DEBUG_DRAW_INTERIOR",
        "snippet": "    static final boolean DEBUG_DRAW_INTERIOR = false;",
        "begin_line": 476,
        "end_line": 476,
        "comment": " \r\n     * This debug flag controls whether or not an outline is drawn showing the \r\n     * interior of the plot region.  This is drawn as a lightGray rectangle \r\n     * showing the padding provided by the 'interiorGap' setting.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.DEBUG_DRAW_LINK_AREA",
        "snippet": "    static final boolean DEBUG_DRAW_LINK_AREA = false;",
        "begin_line": 483,
        "end_line": 483,
        "comment": " \r\n     * This debug flag controls whether or not an outline is drawn showing the \r\n     * link area (in blue) and link ellipse (in yellow).  This controls where \r\n     * the label links have 'elbow' points.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlot",
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "signature": "org.jfree.chart.plot.PiePlot.DEBUG_DRAW_PIE_AREA",
        "snippet": "    static final boolean DEBUG_DRAW_PIE_AREA = false;",
        "begin_line": 489,
        "end_line": 489,
        "comment": "\r\n     * This debug flag controls whether or not an outline is drawn showing\r\n     * the pie area (in green).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotState",
        "src_path": "source/org/jfree/chart/plot/PlotState.java",
        "signature": "org.jfree.chart.plot.PlotState.sharedAxisStates",
        "snippet": "    private Map sharedAxisStates;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " The shared axis states. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6924382802125527395L;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.DEFAULT_LABEL_FONT",
        "snippet": "    public static final Font DEFAULT_LABEL_FONT = new Font(\"SansSerif\", \n            Font.BOLD, 10);",
        "begin_line": 113,
        "end_line": 114,
        "comment": " The default label font. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.NO_LABELS",
        "snippet": "    public static final int NO_LABELS = 0;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " A constant for the label type. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.VALUE_LABELS",
        "snippet": "    public static final int VALUE_LABELS = 1;",
        "begin_line": 120,
        "end_line": 120,
        "comment": " A constant for the label type. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.labelType",
        "snippet": "    private int labelType;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " The label type (NO_LABELS, VALUE_LABELS). "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.labelFont",
        "snippet": "    private Font labelFont;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " The label font. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.drawBorder",
        "snippet": "    private boolean drawBorder = false;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " A flag that controls whether or not a border is drawn. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.roseHighlightPaint",
        "snippet": "    private transient Paint roseHighlightPaint = Color.black;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " The rose highlight paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.rosePaint",
        "snippet": "    private transient Paint rosePaint = Color.yellow;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " The rose paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.roseCenterPaint",
        "snippet": "    private transient Paint roseCenterPaint = Color.white;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " The rose center paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.compassFont",
        "snippet": "    private Font compassFont = new Font(\"Arial\", Font.PLAIN, 10);",
        "begin_line": 141,
        "end_line": 141,
        "comment": " The compass font. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.circle1",
        "snippet": "    private transient Ellipse2D circle1;",
        "begin_line": 144,
        "end_line": 144,
        "comment": " A working shape. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.circle2",
        "snippet": "    private transient Ellipse2D circle2;",
        "begin_line": 147,
        "end_line": 147,
        "comment": " A working shape. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.a1",
        "snippet": "    private transient Area a1;",
        "begin_line": 150,
        "end_line": 150,
        "comment": " A working area. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.a2",
        "snippet": "    private transient Area a2;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " A working area. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.rect1",
        "snippet": "    private transient Rectangle2D rect1;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " A working shape. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.datasets",
        "snippet": "    private ValueDataset[] datasets = new ValueDataset[1];",
        "begin_line": 159,
        "end_line": 159,
        "comment": " An array of value datasets. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.seriesNeedle",
        "snippet": "    private MeterNeedle[] seriesNeedle = new MeterNeedle[1];",
        "begin_line": 162,
        "end_line": 162,
        "comment": " An array of needles. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources \n            = ResourceBundle.getBundle(\n                    \"org.jfree.chart.plot.LocalizationBundle\");",
        "begin_line": 165,
        "end_line": 167,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.plot.CompassPlot",
        "src_path": "source/org/jfree/chart/plot/CompassPlot.java",
        "signature": "org.jfree.chart.plot.CompassPlot.revolutionDistance",
        "snippet": "    protected double revolutionDistance = 360;",
        "begin_line": 173,
        "end_line": 173,
        "comment": " \r\n     * The count to complete one revolution.  Can be arbitrarily set\r\n     * For degrees (the default) it is 360, for radians this is 2*Pi, etc\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -734389651405327166L;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " The paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.stroke",
        "snippet": "    private transient Stroke stroke;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " The stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " The outline paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.outlineStroke",
        "snippet": "    private transient Stroke outlineStroke;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " The outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.alpha",
        "snippet": "    private float alpha;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " The alpha transparency. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.label",
        "snippet": "    private String label = null;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " The label. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.labelFont",
        "snippet": "    private Font labelFont;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " The label font. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.labelPaint",
        "snippet": "    private transient Paint labelPaint;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " The label paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.labelAnchor",
        "snippet": "    private RectangleAnchor labelAnchor;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " The label position. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.labelTextAnchor",
        "snippet": "    private TextAnchor labelTextAnchor;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " The text anchor for the label. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.labelOffset",
        "snippet": "    private RectangleInsets labelOffset;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The label offset from the marker rectangle. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.labelOffsetType",
        "snippet": "    private LengthAdjustmentType labelOffsetType;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " \r\n     * The offset type for the domain or range axis (never <code>null</code>). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.listenerList",
        "snippet": "    private transient EventListenerList listenerList;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " Storage for registered change listeners. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlotState",
        "src_path": "source/org/jfree/chart/plot/PiePlotState.java",
        "signature": "org.jfree.chart.plot.PiePlotState.passesRequired",
        "snippet": "    private int passesRequired;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The number of passes required by the renderer. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlotState",
        "src_path": "source/org/jfree/chart/plot/PiePlotState.java",
        "signature": "org.jfree.chart.plot.PiePlotState.total",
        "snippet": "    private double total;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The total of the values in the dataset. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlotState",
        "src_path": "source/org/jfree/chart/plot/PiePlotState.java",
        "signature": "org.jfree.chart.plot.PiePlotState.latestAngle",
        "snippet": "    private double latestAngle;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The latest angle. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlotState",
        "src_path": "source/org/jfree/chart/plot/PiePlotState.java",
        "signature": "org.jfree.chart.plot.PiePlotState.explodedPieArea",
        "snippet": "    private Rectangle2D explodedPieArea;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The exploded pie area. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlotState",
        "src_path": "source/org/jfree/chart/plot/PiePlotState.java",
        "signature": "org.jfree.chart.plot.PiePlotState.pieArea",
        "snippet": "    private Rectangle2D pieArea;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The pie area. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlotState",
        "src_path": "source/org/jfree/chart/plot/PiePlotState.java",
        "signature": "org.jfree.chart.plot.PiePlotState.pieCenterX",
        "snippet": "    private double pieCenterX;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The center of the pie in Java 2D coordinates. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlotState",
        "src_path": "source/org/jfree/chart/plot/PiePlotState.java",
        "signature": "org.jfree.chart.plot.PiePlotState.pieCenterY",
        "snippet": "    private double pieCenterY;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The center of the pie in Java 2D coordinates. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlotState",
        "src_path": "source/org/jfree/chart/plot/PiePlotState.java",
        "signature": "org.jfree.chart.plot.PiePlotState.pieHRadius",
        "snippet": "    private double pieHRadius;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The vertical pie radius. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlotState",
        "src_path": "source/org/jfree/chart/plot/PiePlotState.java",
        "signature": "org.jfree.chart.plot.PiePlotState.pieWRadius",
        "snippet": "    private double pieWRadius;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The horizontal pie radius. "
    },
    {
        "class_name": "org.jfree.chart.plot.PiePlotState",
        "src_path": "source/org/jfree/chart/plot/PiePlotState.java",
        "signature": "org.jfree.chart.plot.PiePlotState.linkArea",
        "snippet": "    private Rectangle2D linkArea;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The link area. "
    },
    {
        "class_name": "org.jfree.chart.plot.AbstractPieLabelDistributor",
        "src_path": "source/org/jfree/chart/plot/AbstractPieLabelDistributor.java",
        "signature": "org.jfree.chart.plot.AbstractPieLabelDistributor.labels",
        "snippet": "    protected List labels;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The label records. "
    },
    {
        "class_name": "org.jfree.chart.plot.CrosshairState",
        "src_path": "source/org/jfree/chart/plot/CrosshairState.java",
        "signature": "org.jfree.chart.plot.CrosshairState.calculateDistanceInDataSpace",
        "snippet": "    private boolean calculateDistanceInDataSpace = false;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " \r\n     * A flag that controls whether the distance is calculated in data space \r\n     * or Java2D space.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CrosshairState",
        "src_path": "source/org/jfree/chart/plot/CrosshairState.java",
        "signature": "org.jfree.chart.plot.CrosshairState.anchorX",
        "snippet": "    private double anchorX;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The x-value (in data space) for the anchor point. "
    },
    {
        "class_name": "org.jfree.chart.plot.CrosshairState",
        "src_path": "source/org/jfree/chart/plot/CrosshairState.java",
        "signature": "org.jfree.chart.plot.CrosshairState.anchorY",
        "snippet": "    private double anchorY;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The y-value (in data space) for the anchor point. "
    },
    {
        "class_name": "org.jfree.chart.plot.CrosshairState",
        "src_path": "source/org/jfree/chart/plot/CrosshairState.java",
        "signature": "org.jfree.chart.plot.CrosshairState.anchor",
        "snippet": "    private Point2D anchor;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The anchor point in Java2D space - if null, don't update crosshair. "
    },
    {
        "class_name": "org.jfree.chart.plot.CrosshairState",
        "src_path": "source/org/jfree/chart/plot/CrosshairState.java",
        "signature": "org.jfree.chart.plot.CrosshairState.crosshairX",
        "snippet": "    private double crosshairX;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The x-value for the current crosshair point. "
    },
    {
        "class_name": "org.jfree.chart.plot.CrosshairState",
        "src_path": "source/org/jfree/chart/plot/CrosshairState.java",
        "signature": "org.jfree.chart.plot.CrosshairState.crosshairY",
        "snippet": "    private double crosshairY;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The y-value for the current crosshair point. "
    },
    {
        "class_name": "org.jfree.chart.plot.CrosshairState",
        "src_path": "source/org/jfree/chart/plot/CrosshairState.java",
        "signature": "org.jfree.chart.plot.CrosshairState.domainAxisIndex",
        "snippet": "    private int domainAxisIndex;",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\r\n     * The index of the domain axis that the crosshair x-value is measured\r\n     * against.\r\n     * \r\n     * @since 1.0.4\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CrosshairState",
        "src_path": "source/org/jfree/chart/plot/CrosshairState.java",
        "signature": "org.jfree.chart.plot.CrosshairState.rangeAxisIndex",
        "snippet": "    private int rangeAxisIndex;",
        "begin_line": 98,
        "end_line": 98,
        "comment": "\r\n     * The index of the range axis that the crosshair y-value is measured\r\n     * against.\r\n     * \r\n     * @since 1.0.4\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CrosshairState",
        "src_path": "source/org/jfree/chart/plot/CrosshairState.java",
        "signature": "org.jfree.chart.plot.CrosshairState.distance",
        "snippet": "    private double distance;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " \r\n     * The smallest distance (so far) between the anchor point and a data point. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.PieLabelDistributor",
        "src_path": "source/org/jfree/chart/plot/PieLabelDistributor.java",
        "signature": "org.jfree.chart.plot.PieLabelDistributor.minGap",
        "snippet": "    private double minGap = 4.0;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The minimum gap. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedDomainXYPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedDomainXYPlot.java",
        "signature": "org.jfree.chart.plot.CombinedDomainXYPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7765545541261907383L;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedDomainXYPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedDomainXYPlot.java",
        "signature": "org.jfree.chart.plot.CombinedDomainXYPlot.subplots",
        "snippet": "    private List subplots;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " Storage for the subplot references. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedDomainXYPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedDomainXYPlot.java",
        "signature": "org.jfree.chart.plot.CombinedDomainXYPlot.totalWeight",
        "snippet": "    private int totalWeight = 0;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " Total weight of all charts. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedDomainXYPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedDomainXYPlot.java",
        "signature": "org.jfree.chart.plot.CombinedDomainXYPlot.gap",
        "snippet": "    private double gap = 5.0;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " The gap between subplots. "
    },
    {
        "class_name": "org.jfree.chart.plot.CombinedDomainXYPlot",
        "src_path": "source/org/jfree/chart/plot/CombinedDomainXYPlot.java",
        "signature": "org.jfree.chart.plot.CombinedDomainXYPlot.subplotAreas",
        "snippet": "    private transient Rectangle2D[] subplotAreas;",
        "begin_line": 137,
        "end_line": 137,
        "comment": " Temporary storage for the subplot areas. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4087093313147984390L;",
        "begin_line": 154,
        "end_line": 154,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.UNITS_NONE",
        "snippet": "    public static final int UNITS_NONE = 0;",
        "begin_line": 157,
        "end_line": 157,
        "comment": " A constant for unit type 'None'. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.UNITS_FAHRENHEIT",
        "snippet": "    public static final int UNITS_FAHRENHEIT = 1;",
        "begin_line": 160,
        "end_line": 160,
        "comment": " A constant for unit type 'Fahrenheit'. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.UNITS_CELCIUS",
        "snippet": "    public static final int UNITS_CELCIUS = 2;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " A constant for unit type 'Celcius'. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.UNITS_KELVIN",
        "snippet": "    public static final int UNITS_KELVIN = 3;",
        "begin_line": 166,
        "end_line": 166,
        "comment": " A constant for unit type 'Kelvin'. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.NONE",
        "snippet": "    public static final int NONE = 0;",
        "begin_line": 169,
        "end_line": 169,
        "comment": " A constant for the value label position (no label). "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.RIGHT",
        "snippet": "    public static final int RIGHT = 1;",
        "begin_line": 172,
        "end_line": 172,
        "comment": " A constant for the value label position (right of the thermometer). "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.LEFT",
        "snippet": "    public static final int LEFT = 2;",
        "begin_line": 175,
        "end_line": 175,
        "comment": " A constant for the value label position (left of the thermometer). "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.BULB",
        "snippet": "    public static final int BULB = 3;",
        "begin_line": 178,
        "end_line": 178,
        "comment": " A constant for the value label position (in the thermometer bulb). "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.NORMAL",
        "snippet": "    public static final int NORMAL = 0;",
        "begin_line": 181,
        "end_line": 181,
        "comment": " A constant for the 'normal' range. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.WARNING",
        "snippet": "    public static final int WARNING = 1;",
        "begin_line": 184,
        "end_line": 184,
        "comment": " A constant for the 'warning' range. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.CRITICAL",
        "snippet": "    public static final int CRITICAL = 2;",
        "begin_line": 187,
        "end_line": 187,
        "comment": " A constant for the 'critical' range. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.BULB_RADIUS",
        "snippet": "    protected static final int BULB_RADIUS = 40;",
        "begin_line": 194,
        "end_line": 194,
        "comment": " \r\n     * The bulb radius. \r\n     * \r\n     * @deprecated As of 1.0.7, use {@link #getBulbRadius()}.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.BULB_DIAMETER",
        "snippet": "    protected static final int BULB_DIAMETER = BULB_RADIUS * 2;",
        "begin_line": 201,
        "end_line": 201,
        "comment": " \r\n     * The bulb diameter. \r\n     * \r\n     * @deprecated As of 1.0.7, use {@link #getBulbDiameter()}.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.COLUMN_RADIUS",
        "snippet": "    protected static final int COLUMN_RADIUS = 20;",
        "begin_line": 208,
        "end_line": 208,
        "comment": " \r\n     * The column radius. \r\n     * \r\n     * @deprecated As of 1.0.7, use {@link #getColumnRadius()}.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.COLUMN_DIAMETER",
        "snippet": "    protected static final int COLUMN_DIAMETER = COLUMN_RADIUS * 2;",
        "begin_line": 215,
        "end_line": 215,
        "comment": " \r\n     * The column diameter.\r\n     * \r\n     * @deprecated As of 1.0.7, use {@link #getColumnDiameter()}.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.GAP_RADIUS",
        "snippet": "    protected static final int GAP_RADIUS = 5;",
        "begin_line": 222,
        "end_line": 222,
        "comment": " \r\n     * The gap radius. \r\n     *\r\n     * @deprecated As of 1.0.7, use {@link #getGap()}.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.GAP_DIAMETER",
        "snippet": "    protected static final int GAP_DIAMETER = GAP_RADIUS * 2;",
        "begin_line": 229,
        "end_line": 229,
        "comment": " \r\n     * The gap diameter. \r\n     *\r\n     * @deprecated As of 1.0.7, use {@link #getGap()} times two.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.AXIS_GAP",
        "snippet": "    protected static final int AXIS_GAP = 10;",
        "begin_line": 232,
        "end_line": 232,
        "comment": " The axis gap. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.UNITS",
        "snippet": "    protected static final String[] UNITS = {\"\", \"\\u00B0F\", \"\\u00B0C\", \n            \"\\u00B0K\"};",
        "begin_line": 235,
        "end_line": 236,
        "comment": " The unit strings. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.RANGE_LOW",
        "snippet": "    protected static final int RANGE_LOW = 0;",
        "begin_line": 239,
        "end_line": 239,
        "comment": " Index for low value in subrangeInfo matrix. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.RANGE_HIGH",
        "snippet": "    protected static final int RANGE_HIGH = 1;",
        "begin_line": 242,
        "end_line": 242,
        "comment": " Index for high value in subrangeInfo matrix. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.DISPLAY_LOW",
        "snippet": "    protected static final int DISPLAY_LOW = 2;",
        "begin_line": 245,
        "end_line": 245,
        "comment": " Index for display low value in subrangeInfo matrix. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.DISPLAY_HIGH",
        "snippet": "    protected static final int DISPLAY_HIGH = 3;",
        "begin_line": 248,
        "end_line": 248,
        "comment": " Index for display high value in subrangeInfo matrix. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.DEFAULT_LOWER_BOUND",
        "snippet": "    protected static final double DEFAULT_LOWER_BOUND = 0.0;",
        "begin_line": 251,
        "end_line": 251,
        "comment": " The default lower bound. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.DEFAULT_UPPER_BOUND",
        "snippet": "    protected static final double DEFAULT_UPPER_BOUND = 100.0;",
        "begin_line": 254,
        "end_line": 254,
        "comment": " The default upper bound. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.DEFAULT_BULB_RADIUS",
        "snippet": "    protected static final int DEFAULT_BULB_RADIUS = 40;",
        "begin_line": 261,
        "end_line": 261,
        "comment": " \r\n     * The default bulb radius.\r\n     *\r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.DEFAULT_COLUMN_RADIUS",
        "snippet": "    protected static final int DEFAULT_COLUMN_RADIUS = 20;",
        "begin_line": 268,
        "end_line": 268,
        "comment": " \r\n     * The default column radius.\r\n     *\r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.DEFAULT_GAP",
        "snippet": "    protected static final int DEFAULT_GAP = 5;",
        "begin_line": 275,
        "end_line": 275,
        "comment": " \r\n     * The default gap between the outlines representing the thermometer.\r\n     *\r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.dataset",
        "snippet": "    private ValueDataset dataset;",
        "begin_line": 278,
        "end_line": 278,
        "comment": " The dataset for the plot. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.rangeAxis",
        "snippet": "    private ValueAxis rangeAxis;",
        "begin_line": 281,
        "end_line": 281,
        "comment": " The range axis. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.lowerBound",
        "snippet": "    private double lowerBound = DEFAULT_LOWER_BOUND;",
        "begin_line": 284,
        "end_line": 284,
        "comment": " The lower bound for the thermometer. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.upperBound",
        "snippet": "    private double upperBound = DEFAULT_UPPER_BOUND;",
        "begin_line": 287,
        "end_line": 287,
        "comment": " The upper bound for the thermometer. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.bulbRadius",
        "snippet": "    private int bulbRadius = DEFAULT_BULB_RADIUS;",
        "begin_line": 294,
        "end_line": 294,
        "comment": " \r\n     * The value label position.\r\n     *\r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.columnRadius",
        "snippet": "    private int columnRadius = DEFAULT_COLUMN_RADIUS;",
        "begin_line": 301,
        "end_line": 301,
        "comment": " \r\n     * The column radius.\r\n     *\r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.gap",
        "snippet": "    private int gap = DEFAULT_GAP;",
        "begin_line": 308,
        "end_line": 308,
        "comment": " \r\n     * The gap between the two outlines the represent the thermometer.\r\n     *\r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.padding",
        "snippet": "    private RectangleInsets padding;",
        "begin_line": 313,
        "end_line": 313,
        "comment": " \r\n     * Blank space inside the plot area around the outside of the thermometer. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.thermometerStroke",
        "snippet": "    private transient Stroke thermometerStroke = new BasicStroke(1.0f);",
        "begin_line": 316,
        "end_line": 316,
        "comment": " Stroke for drawing the thermometer "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.thermometerPaint",
        "snippet": "    private transient Paint thermometerPaint = Color.black;",
        "begin_line": 319,
        "end_line": 319,
        "comment": " Paint for drawing the thermometer "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.units",
        "snippet": "    private int units = UNITS_CELCIUS;",
        "begin_line": 322,
        "end_line": 322,
        "comment": " The display units "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.valueLocation",
        "snippet": "    private int valueLocation = BULB;",
        "begin_line": 325,
        "end_line": 325,
        "comment": " The value label position. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.axisLocation",
        "snippet": "    private int axisLocation = LEFT;",
        "begin_line": 328,
        "end_line": 328,
        "comment": " The position of the axis *"
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.valueFont",
        "snippet": "    private Font valueFont = new Font(\"SansSerif\", Font.BOLD, 16);",
        "begin_line": 331,
        "end_line": 331,
        "comment": " The font to write the value in "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.valuePaint",
        "snippet": "    private transient Paint valuePaint = Color.white;",
        "begin_line": 334,
        "end_line": 334,
        "comment": " Colour that the value is written in "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.valueFormat",
        "snippet": "    private NumberFormat valueFormat = new DecimalFormat();",
        "begin_line": 337,
        "end_line": 337,
        "comment": " Number format for the value "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.mercuryPaint",
        "snippet": "    private transient Paint mercuryPaint = Color.lightGray;",
        "begin_line": 340,
        "end_line": 340,
        "comment": " The default paint for the mercury in the thermometer. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.subrange",
        "snippet": "    private int subrange = -1;",
        "begin_line": 343,
        "end_line": 343,
        "comment": " The display sub-range. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.subrangeInfo",
        "snippet": "    private double[][] subrangeInfo = {\n        {0.0, 50.0, 0.0, 50.0}, \n        {50.0, 75.0, 50.0, 75.0}, \n        {75.0, 100.0, 75.0, 100.0}\n    };",
        "begin_line": 346,
        "end_line": 350,
        "comment": " The start and end values for the subranges. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.followDataInSubranges",
        "snippet": "    private boolean followDataInSubranges = false;",
        "begin_line": 356,
        "end_line": 356,
        "comment": " \r\n     * A flag that controls whether or not the axis range adjusts to the \r\n     * sub-ranges. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.useSubrangePaint",
        "snippet": "    private boolean useSubrangePaint = true;",
        "begin_line": 362,
        "end_line": 362,
        "comment": " \r\n     * A flag that controls whether or not the mercury paint changes with \r\n     * the subranges. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.subrangePaint",
        "snippet": "    private transient Paint[] subrangePaint = {Color.green, Color.orange, \n            Color.red};",
        "begin_line": 365,
        "end_line": 366,
        "comment": " Paint for each range "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.subrangeIndicatorsVisible",
        "snippet": "    private boolean subrangeIndicatorsVisible = true;",
        "begin_line": 369,
        "end_line": 369,
        "comment": " A flag that controls whether the sub-range indicators are visible. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.subrangeIndicatorStroke",
        "snippet": "    private transient Stroke subrangeIndicatorStroke = new BasicStroke(2.0f);",
        "begin_line": 372,
        "end_line": 372,
        "comment": " The stroke for the sub-range indicators. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.rangeIndicatorStroke",
        "snippet": "    private transient Stroke rangeIndicatorStroke = new BasicStroke(3.0f);",
        "begin_line": 375,
        "end_line": 375,
        "comment": " The range indicator stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.ThermometerPlot",
        "src_path": "source/org/jfree/chart/plot/ThermometerPlot.java",
        "signature": "org.jfree.chart.plot.ThermometerPlot.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources =\n        ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");",
        "begin_line": 378,
        "end_line": 379,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.plot.DialShape",
        "src_path": "source/org/jfree/chart/plot/DialShape.java",
        "signature": "org.jfree.chart.plot.DialShape.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3471933055190251131L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.DialShape",
        "src_path": "source/org/jfree/chart/plot/DialShape.java",
        "signature": "org.jfree.chart.plot.DialShape.CIRCLE",
        "snippet": "    public static final DialShape CIRCLE = new DialShape(\"DialShape.CIRCLE\");",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Circle. "
    },
    {
        "class_name": "org.jfree.chart.plot.DialShape",
        "src_path": "source/org/jfree/chart/plot/DialShape.java",
        "signature": "org.jfree.chart.plot.DialShape.CHORD",
        "snippet": "    public static final DialShape CHORD = new DialShape(\"DialShape.CHORD\");",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Chord. "
    },
    {
        "class_name": "org.jfree.chart.plot.DialShape",
        "src_path": "source/org/jfree/chart/plot/DialShape.java",
        "signature": "org.jfree.chart.plot.DialShape.PIE",
        "snippet": "    public static final DialShape PIE = new DialShape(\"DialShape.PIE\");",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Pie. "
    },
    {
        "class_name": "org.jfree.chart.plot.DialShape",
        "src_path": "source/org/jfree/chart/plot/DialShape.java",
        "signature": "org.jfree.chart.plot.DialShape.name",
        "snippet": "    private String name;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8446720134379617220L;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.owner",
        "snippet": "    private ChartRenderingInfo owner;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The owner of this info. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.plotArea",
        "snippet": "    private transient Rectangle2D plotArea;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The plot area. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.dataArea",
        "snippet": "    private transient Rectangle2D dataArea;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The data area. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.subplotInfo",
        "snippet": "    private List subplotInfo;",
        "begin_line": 82,
        "end_line": 82,
        "comment": "\r\n     * Storage for the plot rendering info objects belonging to the subplots. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7044148245716569264L;",
        "begin_line": 281,
        "end_line": 281,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE",
        "snippet": "    public static final Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke(0.5f,\n            BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f, \n            new float[] {2.0f, 2.0f}, 0.0f);",
        "begin_line": 284,
        "end_line": 286,
        "comment": " The default grid line stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT",
        "snippet": "    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE;",
        "begin_line": 289,
        "end_line": 289,
        "comment": " The default grid line paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_VISIBLE",
        "snippet": "    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;",
        "begin_line": 292,
        "end_line": 292,
        "comment": " The default crosshair visibility. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE",
        "snippet": "    public static final Stroke DEFAULT_CROSSHAIR_STROKE\n            = DEFAULT_GRIDLINE_STROKE;",
        "begin_line": 295,
        "end_line": 296,
        "comment": " The default crosshair stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT",
        "snippet": "    public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;",
        "begin_line": 299,
        "end_line": 299,
        "comment": " The default crosshair paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources \n            = ResourceBundle.getBundle(\n                    \"org.jfree.chart.plot.LocalizationBundle\");",
        "begin_line": 302,
        "end_line": 304,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.orientation",
        "snippet": "    private PlotOrientation orientation;",
        "begin_line": 307,
        "end_line": 307,
        "comment": " The plot orientation. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.axisOffset",
        "snippet": "    private RectangleInsets axisOffset;",
        "begin_line": 310,
        "end_line": 310,
        "comment": " The offset between the data area and the axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.domainAxes",
        "snippet": "    private ObjectList domainAxes;",
        "begin_line": 313,
        "end_line": 313,
        "comment": " The domain axis / axes (used for the x-values). "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.domainAxisLocations",
        "snippet": "    private ObjectList domainAxisLocations;",
        "begin_line": 316,
        "end_line": 316,
        "comment": " The domain axis locations. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.rangeAxes",
        "snippet": "    private ObjectList rangeAxes;",
        "begin_line": 319,
        "end_line": 319,
        "comment": " The range axis (used for the y-values). "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.rangeAxisLocations",
        "snippet": "    private ObjectList rangeAxisLocations;",
        "begin_line": 322,
        "end_line": 322,
        "comment": " The range axis location. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.datasets",
        "snippet": "    private ObjectList datasets;",
        "begin_line": 325,
        "end_line": 325,
        "comment": " Storage for the datasets. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.renderers",
        "snippet": "    private ObjectList renderers;",
        "begin_line": 328,
        "end_line": 328,
        "comment": " Storage for the renderers. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.datasetToDomainAxisMap",
        "snippet": "    private Map datasetToDomainAxisMap;",
        "begin_line": 335,
        "end_line": 335,
        "comment": "\r\n     * Storage for keys that map datasets/renderers to domain axes.  If the\r\n     * map contains no entry for a dataset, it is assumed to map to the\r\n     * primary domain axis (index = 0).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.datasetToRangeAxisMap",
        "snippet": "    private Map datasetToRangeAxisMap;",
        "begin_line": 342,
        "end_line": 342,
        "comment": "\r\n     * Storage for keys that map datasets/renderers to range axes. If the\r\n     * map contains no entry for a dataset, it is assumed to map to the\r\n     * primary domain axis (index = 0).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.quadrantOrigin",
        "snippet": "    private transient Point2D quadrantOrigin = new Point2D.Double(0.0, 0.0);",
        "begin_line": 345,
        "end_line": 345,
        "comment": " The origin point for the quadrants (if drawn). "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.quadrantPaint",
        "snippet": "    private transient Paint[] quadrantPaint\n            = new Paint[] {null, null, null, null};",
        "begin_line": 348,
        "end_line": 349,
        "comment": " The paint used for each quadrant. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.domainGridlinesVisible",
        "snippet": "    private boolean domainGridlinesVisible;",
        "begin_line": 352,
        "end_line": 352,
        "comment": " A flag that controls whether the domain grid-lines are visible. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.domainGridlineStroke",
        "snippet": "    private transient Stroke domainGridlineStroke;",
        "begin_line": 355,
        "end_line": 355,
        "comment": " The stroke used to draw the domain grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.domainGridlinePaint",
        "snippet": "    private transient Paint domainGridlinePaint;",
        "begin_line": 358,
        "end_line": 358,
        "comment": " The paint used to draw the domain grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.rangeGridlinesVisible",
        "snippet": "    private boolean rangeGridlinesVisible;",
        "begin_line": 361,
        "end_line": 361,
        "comment": " A flag that controls whether the range grid-lines are visible. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.rangeGridlineStroke",
        "snippet": "    private transient Stroke rangeGridlineStroke;",
        "begin_line": 364,
        "end_line": 364,
        "comment": " The stroke used to draw the range grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.rangeGridlinePaint",
        "snippet": "    private transient Paint rangeGridlinePaint;",
        "begin_line": 367,
        "end_line": 367,
        "comment": " The paint used to draw the range grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.domainZeroBaselineVisible",
        "snippet": "    private boolean domainZeroBaselineVisible;",
        "begin_line": 375,
        "end_line": 375,
        "comment": " \r\n     * A flag that controls whether or not the zero baseline against the domain\r\n     * axis is visible.\r\n     * \r\n     * @since 1.0.5\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.domainZeroBaselineStroke",
        "snippet": "    private transient Stroke domainZeroBaselineStroke;",
        "begin_line": 382,
        "end_line": 382,
        "comment": " \r\n     * The stroke used for the zero baseline against the domain axis. \r\n     * \r\n     * @since 1.0.5\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.domainZeroBaselinePaint",
        "snippet": "    private transient Paint domainZeroBaselinePaint;",
        "begin_line": 389,
        "end_line": 389,
        "comment": " \r\n     * The paint used for the zero baseline against the domain axis. \r\n     * \r\n     * @since 1.0.5\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.rangeZeroBaselineVisible",
        "snippet": "    private boolean rangeZeroBaselineVisible;",
        "begin_line": 395,
        "end_line": 395,
        "comment": " \r\n     * A flag that controls whether or not the zero baseline against the range\r\n     * axis is visible.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.rangeZeroBaselineStroke",
        "snippet": "    private transient Stroke rangeZeroBaselineStroke;",
        "begin_line": 398,
        "end_line": 398,
        "comment": " The stroke used for the zero baseline against the range axis. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.rangeZeroBaselinePaint",
        "snippet": "    private transient Paint rangeZeroBaselinePaint;",
        "begin_line": 401,
        "end_line": 401,
        "comment": " The paint used for the zero baseline against the range axis. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.domainCrosshairVisible",
        "snippet": "    private boolean domainCrosshairVisible;",
        "begin_line": 404,
        "end_line": 404,
        "comment": " A flag that controls whether or not a domain crosshair is drawn.."
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.domainCrosshairValue",
        "snippet": "    private double domainCrosshairValue;",
        "begin_line": 407,
        "end_line": 407,
        "comment": " The domain crosshair value. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.domainCrosshairStroke",
        "snippet": "    private transient Stroke domainCrosshairStroke;",
        "begin_line": 410,
        "end_line": 410,
        "comment": " The pen/brush used to draw the crosshair (if any). "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.domainCrosshairPaint",
        "snippet": "    private transient Paint domainCrosshairPaint;",
        "begin_line": 413,
        "end_line": 413,
        "comment": " The color used to draw the crosshair (if any). "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.domainCrosshairLockedOnData",
        "snippet": "    private boolean domainCrosshairLockedOnData = true;",
        "begin_line": 419,
        "end_line": 419,
        "comment": "\r\n     * A flag that controls whether or not the crosshair locks onto actual\r\n     * data points.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.rangeCrosshairVisible",
        "snippet": "    private boolean rangeCrosshairVisible;",
        "begin_line": 422,
        "end_line": 422,
        "comment": " A flag that controls whether or not a range crosshair is drawn.."
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.rangeCrosshairValue",
        "snippet": "    private double rangeCrosshairValue;",
        "begin_line": 425,
        "end_line": 425,
        "comment": " The range crosshair value. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.rangeCrosshairStroke",
        "snippet": "    private transient Stroke rangeCrosshairStroke;",
        "begin_line": 428,
        "end_line": 428,
        "comment": " The pen/brush used to draw the crosshair (if any). "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.rangeCrosshairPaint",
        "snippet": "    private transient Paint rangeCrosshairPaint;",
        "begin_line": 431,
        "end_line": 431,
        "comment": " The color used to draw the crosshair (if any). "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.rangeCrosshairLockedOnData",
        "snippet": "    private boolean rangeCrosshairLockedOnData = true;",
        "begin_line": 437,
        "end_line": 437,
        "comment": "\r\n     * A flag that controls whether or not the crosshair locks onto actual\r\n     * data points.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.foregroundDomainMarkers",
        "snippet": "    private Map foregroundDomainMarkers;",
        "begin_line": 440,
        "end_line": 440,
        "comment": " A map of lists of foreground markers (optional) for the domain axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.backgroundDomainMarkers",
        "snippet": "    private Map backgroundDomainMarkers;",
        "begin_line": 443,
        "end_line": 443,
        "comment": " A map of lists of background markers (optional) for the domain axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.foregroundRangeMarkers",
        "snippet": "    private Map foregroundRangeMarkers;",
        "begin_line": 446,
        "end_line": 446,
        "comment": " A map of lists of foreground markers (optional) for the range axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.backgroundRangeMarkers",
        "snippet": "    private Map backgroundRangeMarkers;",
        "begin_line": 449,
        "end_line": 449,
        "comment": " A map of lists of background markers (optional) for the range axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.annotations",
        "snippet": "    private List annotations;",
        "begin_line": 456,
        "end_line": 456,
        "comment": " \r\n     * A (possibly empty) list of annotations for the plot.  The list should\r\n     * be initialised in the constructor and never allowed to be \r\n     * <code>null</code>.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.domainTickBandPaint",
        "snippet": "    private transient Paint domainTickBandPaint;",
        "begin_line": 459,
        "end_line": 459,
        "comment": " The paint used for the domain tick bands (if any). "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.rangeTickBandPaint",
        "snippet": "    private transient Paint rangeTickBandPaint;",
        "begin_line": 462,
        "end_line": 462,
        "comment": " The paint used for the range tick bands (if any). "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.fixedDomainAxisSpace",
        "snippet": "    private AxisSpace fixedDomainAxisSpace;",
        "begin_line": 465,
        "end_line": 465,
        "comment": " The fixed domain axis space. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.fixedRangeAxisSpace",
        "snippet": "    private AxisSpace fixedRangeAxisSpace;",
        "begin_line": 468,
        "end_line": 468,
        "comment": " The fixed range axis space. "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.datasetRenderingOrder",
        "snippet": "    private DatasetRenderingOrder datasetRenderingOrder\n            = DatasetRenderingOrder.REVERSE;",
        "begin_line": 474,
        "end_line": 475,
        "comment": "\r\n     * The order of the dataset rendering (REVERSE draws the primary dataset\r\n     * last so that it appears to be on top).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.seriesRenderingOrder",
        "snippet": "    private SeriesRenderingOrder seriesRenderingOrder\n            = SeriesRenderingOrder.REVERSE;",
        "begin_line": 481,
        "end_line": 482,
        "comment": "\r\n     * The order of the series rendering (REVERSE draws the primary series\r\n     * last so that it appears to be on top).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.weight",
        "snippet": "    private int weight;",
        "begin_line": 488,
        "end_line": 488,
        "comment": "\r\n     * The weight for this plot (only relevant if this is a subplot in a\r\n     * combined plot).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.XYPlot",
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "signature": "org.jfree.chart.plot.XYPlot.fixedLegendItems",
        "snippet": "    private LegendItemCollection fixedLegendItems;",
        "begin_line": 494,
        "end_line": 494,
        "comment": "\r\n     * An optional collection of legend items that can be returned by the\r\n     * getLegendItems() method.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
        "src_path": "source/org/jfree/chart/plot/SeriesRenderingOrder.java",
        "signature": "org.jfree.chart.plot.SeriesRenderingOrder.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 209336477448807735L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
        "src_path": "source/org/jfree/chart/plot/SeriesRenderingOrder.java",
        "signature": "org.jfree.chart.plot.SeriesRenderingOrder.FORWARD",
        "snippet": "    public static final SeriesRenderingOrder FORWARD\n            = new SeriesRenderingOrder(\"SeriesRenderingOrder.FORWARD\");",
        "begin_line": 60,
        "end_line": 61,
        "comment": "\r\n     * Render series in the order 0, 1, 2, ..., N-1, where N is the number\r\n     * of series.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
        "src_path": "source/org/jfree/chart/plot/SeriesRenderingOrder.java",
        "signature": "org.jfree.chart.plot.SeriesRenderingOrder.REVERSE",
        "snippet": "    public static final SeriesRenderingOrder REVERSE\n            = new SeriesRenderingOrder(\"SeriesRenderingOrder.REVERSE\");",
        "begin_line": 67,
        "end_line": 68,
        "comment": "\r\n     * Render series in the order N-1, N-2, ..., 2, 1, 0, where N is the\r\n     * number of series.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
        "src_path": "source/org/jfree/chart/plot/SeriesRenderingOrder.java",
        "signature": "org.jfree.chart.plot.SeriesRenderingOrder.name",
        "snippet": "    private String name;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterInterval",
        "src_path": "source/org/jfree/chart/plot/MeterInterval.java",
        "signature": "org.jfree.chart.plot.MeterInterval.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1530982090622488257L;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterInterval",
        "src_path": "source/org/jfree/chart/plot/MeterInterval.java",
        "signature": "org.jfree.chart.plot.MeterInterval.label",
        "snippet": "    private String label;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The interval label. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterInterval",
        "src_path": "source/org/jfree/chart/plot/MeterInterval.java",
        "signature": "org.jfree.chart.plot.MeterInterval.range",
        "snippet": "    private Range range;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The interval range. "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterInterval",
        "src_path": "source/org/jfree/chart/plot/MeterInterval.java",
        "signature": "org.jfree.chart.plot.MeterInterval.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The outline paint (used for the arc marking the interval). "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterInterval",
        "src_path": "source/org/jfree/chart/plot/MeterInterval.java",
        "signature": "org.jfree.chart.plot.MeterInterval.outlineStroke",
        "snippet": "    private transient Stroke outlineStroke;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The outline stroke (used for the arc marking the interval). "
    },
    {
        "class_name": "org.jfree.chart.plot.MeterInterval",
        "src_path": "source/org/jfree/chart/plot/MeterInterval.java",
        "signature": "org.jfree.chart.plot.MeterInterval.backgroundPaint",
        "snippet": "    private transient Paint backgroundPaint;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The background paint for the interval. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialValueIndicator",
        "src_path": "source/org/jfree/chart/plot/dial/DialValueIndicator.java",
        "signature": "org.jfree.chart.plot.dial.DialValueIndicator.datasetIndex",
        "snippet": "    private int datasetIndex;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The dataset index. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialValueIndicator",
        "src_path": "source/org/jfree/chart/plot/dial/DialValueIndicator.java",
        "signature": "org.jfree.chart.plot.dial.DialValueIndicator.angle",
        "snippet": "    private double angle;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The angle that defines the anchor point. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialValueIndicator",
        "src_path": "source/org/jfree/chart/plot/dial/DialValueIndicator.java",
        "signature": "org.jfree.chart.plot.dial.DialValueIndicator.radius",
        "snippet": "    private double radius;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " The radius that defines the anchor point. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialValueIndicator",
        "src_path": "source/org/jfree/chart/plot/dial/DialValueIndicator.java",
        "signature": "org.jfree.chart.plot.dial.DialValueIndicator.frameAnchor",
        "snippet": "    private RectangleAnchor frameAnchor;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " The frame anchor. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialValueIndicator",
        "src_path": "source/org/jfree/chart/plot/dial/DialValueIndicator.java",
        "signature": "org.jfree.chart.plot.dial.DialValueIndicator.templateValue",
        "snippet": "    private Number templateValue;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " The template value. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialValueIndicator",
        "src_path": "source/org/jfree/chart/plot/dial/DialValueIndicator.java",
        "signature": "org.jfree.chart.plot.dial.DialValueIndicator.formatter",
        "snippet": "    private NumberFormat formatter;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " The formatter. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialValueIndicator",
        "src_path": "source/org/jfree/chart/plot/dial/DialValueIndicator.java",
        "signature": "org.jfree.chart.plot.dial.DialValueIndicator.font",
        "snippet": "    private Font font;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " The font. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialValueIndicator",
        "src_path": "source/org/jfree/chart/plot/dial/DialValueIndicator.java",
        "signature": "org.jfree.chart.plot.dial.DialValueIndicator.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " The paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialValueIndicator",
        "src_path": "source/org/jfree/chart/plot/dial/DialValueIndicator.java",
        "signature": "org.jfree.chart.plot.dial.DialValueIndicator.backgroundPaint",
        "snippet": "    private transient Paint backgroundPaint;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " The background paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialValueIndicator",
        "src_path": "source/org/jfree/chart/plot/dial/DialValueIndicator.java",
        "signature": "org.jfree.chart.plot.dial.DialValueIndicator.outlineStroke",
        "snippet": "    private transient Stroke outlineStroke;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " The outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialValueIndicator",
        "src_path": "source/org/jfree/chart/plot/dial/DialValueIndicator.java",
        "signature": "org.jfree.chart.plot.dial.DialValueIndicator.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " The outline paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialValueIndicator",
        "src_path": "source/org/jfree/chart/plot/dial/DialValueIndicator.java",
        "signature": "org.jfree.chart.plot.dial.DialValueIndicator.insets",
        "snippet": "    private RectangleInsets insets;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " The insets. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialValueIndicator",
        "src_path": "source/org/jfree/chart/plot/dial/DialValueIndicator.java",
        "signature": "org.jfree.chart.plot.dial.DialValueIndicator.valueAnchor",
        "snippet": "    private RectangleAnchor valueAnchor;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " The value anchor. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialValueIndicator",
        "src_path": "source/org/jfree/chart/plot/dial/DialValueIndicator.java",
        "signature": "org.jfree.chart.plot.dial.DialValueIndicator.textAnchor",
        "snippet": "    private TextAnchor textAnchor;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " The text anchor for displaying the value. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.serialVersionUID",
        "snippet": "    static final long serialVersionUID = 3715644629665918516L;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.lowerBound",
        "snippet": "    private double lowerBound;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The minimum data value for the scale. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.upperBound",
        "snippet": "    private double upperBound;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The maximum data value for the scale. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.startAngle",
        "snippet": "    private double startAngle;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " \n     * The start angle for the scale display, in degrees (using the same\n     * encoding as Arc2D). \n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.extent",
        "snippet": "    private double extent;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " The extent of the scale display. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.tickRadius",
        "snippet": "    private double tickRadius;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " \n     * The factor (in the range 0.0 to 1.0) that determines the outside limit\n     * of the tick marks.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.majorTickIncrement",
        "snippet": "    private double majorTickIncrement;",
        "begin_line": 105,
        "end_line": 105,
        "comment": "\n     * The increment (in data units) between major tick marks. \n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.majorTickLength",
        "snippet": "    private double majorTickLength;    ",
        "begin_line": 111,
        "end_line": 111,
        "comment": "\n     * The factor that is subtracted from the tickRadius to determine the\n     * inner point of the major ticks.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.majorTickPaint",
        "snippet": "    private transient Paint majorTickPaint;",
        "begin_line": 117,
        "end_line": 117,
        "comment": "\n     * The paint to use for major tick marks.  This field is transient because\n     * it requires special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.majorTickStroke",
        "snippet": "    private transient Stroke majorTickStroke;",
        "begin_line": 123,
        "end_line": 123,
        "comment": "\n     * The stroke to use for major tick marks.  This field is transient because\n     * it requires special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.minorTickCount",
        "snippet": "    private int minorTickCount;",
        "begin_line": 128,
        "end_line": 128,
        "comment": "\n     * The number of minor ticks between each major tick.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.minorTickLength",
        "snippet": "    private double minorTickLength;",
        "begin_line": 134,
        "end_line": 134,
        "comment": "\n     * The factor that is subtracted from the tickRadius to determine the\n     * inner point of the minor ticks.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.minorTickPaint",
        "snippet": "    private transient Paint minorTickPaint;",
        "begin_line": 140,
        "end_line": 140,
        "comment": "\n     * The paint to use for minor tick marks.  This field is transient because\n     * it requires special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.minorTickStroke",
        "snippet": "    private transient Stroke minorTickStroke;",
        "begin_line": 146,
        "end_line": 146,
        "comment": "\n     * The stroke to use for minor tick marks.  This field is transient because\n     * it requires special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.tickLabelOffset",
        "snippet": "    private double tickLabelOffset;",
        "begin_line": 151,
        "end_line": 151,
        "comment": "\n     * The tick label offset.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.tickLabelFont",
        "snippet": "    private Font tickLabelFont;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " \n     * The tick label font.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.tickLabelsVisible",
        "snippet": "    private boolean tickLabelsVisible;",
        "begin_line": 162,
        "end_line": 162,
        "comment": " \n     * A flag that controls whether or not the tick labels are \n     * displayed. \n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.tickLabelFormatter",
        "snippet": "    private NumberFormat tickLabelFormatter;",
        "begin_line": 167,
        "end_line": 167,
        "comment": "\n     * The number formatter for the tick labels.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.firstTickLabelVisible",
        "snippet": "    private boolean firstTickLabelVisible;",
        "begin_line": 173,
        "end_line": 173,
        "comment": "\n     * A flag that controls whether or not the first tick label is\n     * displayed.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialScale",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialScale.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialScale.tickLabelPaint",
        "snippet": "    private transient Paint tickLabelPaint;",
        "begin_line": 179,
        "end_line": 179,
        "comment": "\n     * The tick label paint.  This field is transient because it requires \n     * special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialFrame",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialFrame.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialFrame.radius",
        "snippet": "    private double radius;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The outer radius, relative to the framing rectangle. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialFrame",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialFrame.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialFrame.backgroundPaint",
        "snippet": "    private transient Paint backgroundPaint;",
        "begin_line": 79,
        "end_line": 79,
        "comment": "\n     * The color used for the front of the panel.  This field is transient\n     * because it requires special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialFrame",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialFrame.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialFrame.foregroundPaint",
        "snippet": "    private transient Paint foregroundPaint;",
        "begin_line": 85,
        "end_line": 85,
        "comment": "\n     * The color used for the border around the window. This field is transient\n     * because it requires special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialFrame",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialFrame.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialFrame.stroke",
        "snippet": "    private transient Stroke stroke;",
        "begin_line": 91,
        "end_line": 91,
        "comment": "\n     * The stroke for drawing the frame outline.  This field is transient\n     * because it requires special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialPointer",
        "src_path": "source/org/jfree/chart/plot/dial/DialPointer.java",
        "signature": "org.jfree.chart.plot.dial.DialPointer.radius",
        "snippet": "    double radius;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The needle radius. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialPointer",
        "src_path": "source/org/jfree/chart/plot/dial/DialPointer.java",
        "signature": "org.jfree.chart.plot.dial.DialPointer.datasetIndex",
        "snippet": "    int datasetIndex;",
        "begin_line": 82,
        "end_line": 82,
        "comment": "\n     * The dataset index for the needle.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.Pin",
        "src_path": "source/org/jfree/chart/plot/dial/DialPointer.java",
        "signature": "org.jfree.chart.plot.dial.Pin.serialVersionUID",
        "snippet": "        static final long serialVersionUID = -8445860485367689750L;",
        "begin_line": 213,
        "end_line": 213,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.Pin",
        "src_path": "source/org/jfree/chart/plot/dial/DialPointer.java",
        "signature": "org.jfree.chart.plot.dial.Pin.paint",
        "snippet": "        private transient Paint paint;",
        "begin_line": 216,
        "end_line": 216,
        "comment": " The paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.Pin",
        "src_path": "source/org/jfree/chart/plot/dial/DialPointer.java",
        "signature": "org.jfree.chart.plot.dial.Pin.stroke",
        "snippet": "        private transient Stroke stroke;",
        "begin_line": 219,
        "end_line": 219,
        "comment": " The stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.Pointer",
        "src_path": "source/org/jfree/chart/plot/dial/DialPointer.java",
        "signature": "org.jfree.chart.plot.dial.Pointer.serialVersionUID",
        "snippet": "        static final long serialVersionUID = -4180500011963176960L;",
        "begin_line": 394,
        "end_line": 394,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.Pointer",
        "src_path": "source/org/jfree/chart/plot/dial/DialPointer.java",
        "signature": "org.jfree.chart.plot.dial.Pointer.widthRadius",
        "snippet": "        private double widthRadius;",
        "begin_line": 399,
        "end_line": 399,
        "comment": "\n         * The radius that defines the width of the pointer at the base.\n         "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.Pointer",
        "src_path": "source/org/jfree/chart/plot/dial/DialPointer.java",
        "signature": "org.jfree.chart.plot.dial.Pointer.fillPaint",
        "snippet": "        private transient Paint fillPaint;",
        "begin_line": 406,
        "end_line": 406,
        "comment": " \n         * The fill paint.\n         * \n         * @since 1.0.8\n         "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.Pointer",
        "src_path": "source/org/jfree/chart/plot/dial/DialPointer.java",
        "signature": "org.jfree.chart.plot.dial.Pointer.outlinePaint",
        "snippet": "        private transient Paint outlinePaint;",
        "begin_line": 413,
        "end_line": 413,
        "comment": " \n         * The outline paint.\n         * \n         * @since 1.0.8\n         "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialLayerChangeEvent",
        "src_path": "source/org/jfree/chart/plot/dial/DialLayerChangeEvent.java",
        "signature": "org.jfree.chart.plot.dial.DialLayerChangeEvent.layer",
        "snippet": "    private DialLayer layer;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The dial layer that generated the event. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialPlot",
        "src_path": "source/org/jfree/chart/plot/dial/DialPlot.java",
        "signature": "org.jfree.chart.plot.dial.DialPlot.background",
        "snippet": "    private DialLayer background;",
        "begin_line": 79,
        "end_line": 79,
        "comment": "\n     * The background layer (optional).\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialPlot",
        "src_path": "source/org/jfree/chart/plot/dial/DialPlot.java",
        "signature": "org.jfree.chart.plot.dial.DialPlot.cap",
        "snippet": "    private DialLayer cap;",
        "begin_line": 84,
        "end_line": 84,
        "comment": "\n     * The needle cap (optional).\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialPlot",
        "src_path": "source/org/jfree/chart/plot/dial/DialPlot.java",
        "signature": "org.jfree.chart.plot.dial.DialPlot.dialFrame",
        "snippet": "    private DialFrame dialFrame;",
        "begin_line": 89,
        "end_line": 89,
        "comment": "\n     * The dial frame.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialPlot",
        "src_path": "source/org/jfree/chart/plot/dial/DialPlot.java",
        "signature": "org.jfree.chart.plot.dial.DialPlot.datasets",
        "snippet": "    private ObjectList datasets;",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\n     * The dataset(s) for the dial plot.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialPlot",
        "src_path": "source/org/jfree/chart/plot/dial/DialPlot.java",
        "signature": "org.jfree.chart.plot.dial.DialPlot.scales",
        "snippet": "    private ObjectList scales;",
        "begin_line": 99,
        "end_line": 99,
        "comment": "\n     * The scale(s) for the dial plot. \n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialPlot",
        "src_path": "source/org/jfree/chart/plot/dial/DialPlot.java",
        "signature": "org.jfree.chart.plot.dial.DialPlot.datasetToScaleMap",
        "snippet": "    private ObjectList datasetToScaleMap;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " Storage for keys that map datasets to scales. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialPlot",
        "src_path": "source/org/jfree/chart/plot/dial/DialPlot.java",
        "signature": "org.jfree.chart.plot.dial.DialPlot.layers",
        "snippet": "    private List layers;",
        "begin_line": 107,
        "end_line": 107,
        "comment": "\n     * The drawing layers for the dial plot.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialPlot",
        "src_path": "source/org/jfree/chart/plot/dial/DialPlot.java",
        "signature": "org.jfree.chart.plot.dial.DialPlot.pointers",
        "snippet": "    private List pointers;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " \n     * The pointer(s) for the dial.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialPlot",
        "src_path": "source/org/jfree/chart/plot/dial/DialPlot.java",
        "signature": "org.jfree.chart.plot.dial.DialPlot.viewX",
        "snippet": "    private double viewX;",
        "begin_line": 117,
        "end_line": 117,
        "comment": "\n     * The x-coordinate for the view window.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialPlot",
        "src_path": "source/org/jfree/chart/plot/dial/DialPlot.java",
        "signature": "org.jfree.chart.plot.dial.DialPlot.viewY",
        "snippet": "    private double viewY;",
        "begin_line": 122,
        "end_line": 122,
        "comment": "\n     * The y-coordinate for the view window.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialPlot",
        "src_path": "source/org/jfree/chart/plot/dial/DialPlot.java",
        "signature": "org.jfree.chart.plot.dial.DialPlot.viewW",
        "snippet": "    private double viewW;",
        "begin_line": 127,
        "end_line": 127,
        "comment": "\n     * The width of the view window, expressed as a percentage.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialPlot",
        "src_path": "source/org/jfree/chart/plot/dial/DialPlot.java",
        "signature": "org.jfree.chart.plot.dial.DialPlot.viewH",
        "snippet": "    private double viewH;",
        "begin_line": 132,
        "end_line": 132,
        "comment": "\n     * The height of the view window, expressed as a percentage.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialTextAnnotation",
        "src_path": "source/org/jfree/chart/plot/dial/DialTextAnnotation.java",
        "signature": "org.jfree.chart.plot.dial.DialTextAnnotation.label",
        "snippet": "    private String label;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The label text. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialTextAnnotation",
        "src_path": "source/org/jfree/chart/plot/dial/DialTextAnnotation.java",
        "signature": "org.jfree.chart.plot.dial.DialTextAnnotation.font",
        "snippet": "    private Font font;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The font. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialTextAnnotation",
        "src_path": "source/org/jfree/chart/plot/dial/DialTextAnnotation.java",
        "signature": "org.jfree.chart.plot.dial.DialTextAnnotation.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " \n     * The paint for the label.  This field is transient because it requires\n     * special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialTextAnnotation",
        "src_path": "source/org/jfree/chart/plot/dial/DialTextAnnotation.java",
        "signature": "org.jfree.chart.plot.dial.DialTextAnnotation.angle",
        "snippet": "    private double angle;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The angle that defines the anchor point for the annotation. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialTextAnnotation",
        "src_path": "source/org/jfree/chart/plot/dial/DialTextAnnotation.java",
        "signature": "org.jfree.chart.plot.dial.DialTextAnnotation.radius",
        "snippet": "    private double radius;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The radius that defines the anchor point for the annotation. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialTextAnnotation",
        "src_path": "source/org/jfree/chart/plot/dial/DialTextAnnotation.java",
        "signature": "org.jfree.chart.plot.dial.DialTextAnnotation.anchor",
        "snippet": "    private TextAnchor anchor;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " The text anchor to be aligned to the annotation's anchor point. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.AbstractDialLayer",
        "src_path": "source/org/jfree/chart/plot/dial/AbstractDialLayer.java",
        "signature": "org.jfree.chart.plot.dial.AbstractDialLayer.visible",
        "snippet": "    private boolean visible;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " A flag that controls whether or not the layer is visible. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.AbstractDialLayer",
        "src_path": "source/org/jfree/chart/plot/dial/AbstractDialLayer.java",
        "signature": "org.jfree.chart.plot.dial.AbstractDialLayer.listenerList",
        "snippet": "    private transient EventListenerList listenerList;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Storage for registered listeners. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialCap",
        "src_path": "source/org/jfree/chart/plot/dial/DialCap.java",
        "signature": "org.jfree.chart.plot.dial.DialCap.radius",
        "snippet": "    private double radius;",
        "begin_line": 74,
        "end_line": 74,
        "comment": "\n     * The radius of the cap, as a percentage of the framing rectangle.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialCap",
        "src_path": "source/org/jfree/chart/plot/dial/DialCap.java",
        "signature": "org.jfree.chart.plot.dial.DialCap.fillPaint",
        "snippet": "    private transient Paint fillPaint;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " \n     * The fill paint.  This field is transient because it requires special\n     * handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialCap",
        "src_path": "source/org/jfree/chart/plot/dial/DialCap.java",
        "signature": "org.jfree.chart.plot.dial.DialCap.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " \n     * The paint used to draw the cap outline (this should never be \n     * <code>null</code>).  This field is transient because it requires\n     * special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialCap",
        "src_path": "source/org/jfree/chart/plot/dial/DialCap.java",
        "signature": "org.jfree.chart.plot.dial.DialCap.outlineStroke",
        "snippet": "    private transient Stroke outlineStroke;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " \n     * The stroke used to draw the cap outline (this should never be \n     * <code>null</code>).   This field is transient because it requires\n     * special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialRange",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialRange.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialRange.scaleIndex",
        "snippet": "    private int scaleIndex;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The scale index. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialRange",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialRange.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialRange.lowerBound",
        "snippet": "    private double lowerBound;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The minimum data value for the scale. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialRange",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialRange.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialRange.upperBound",
        "snippet": "    private double upperBound;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The maximum data value for the scale. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialRange",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialRange.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialRange.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 84,
        "end_line": 84,
        "comment": "\n     * The paint used to draw the range highlight.  This field is transient\n     * because it requires special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialRange",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialRange.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialRange.innerRadius",
        "snippet": "    private double innerRadius;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " \n     * The factor (in the range 0.0 to 1.0) that determines the inside limit\n     * of the range highlight.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.StandardDialRange",
        "src_path": "source/org/jfree/chart/plot/dial/StandardDialRange.java",
        "signature": "org.jfree.chart.plot.dial.StandardDialRange.outerRadius",
        "snippet": "    private double outerRadius;",
        "begin_line": 96,
        "end_line": 96,
        "comment": "\n     * The factor (in the range 0.0 to 1.0) that determines the outside limit \n     * of the range highlight.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialBackground",
        "src_path": "source/org/jfree/chart/plot/dial/DialBackground.java",
        "signature": "org.jfree.chart.plot.dial.DialBackground.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " \n     * The background paint.  This field is transient because serialization\n     * requires special handling.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.DialBackground",
        "src_path": "source/org/jfree/chart/plot/dial/DialBackground.java",
        "signature": "org.jfree.chart.plot.dial.DialBackground.gradientPaintTransformer",
        "snippet": "    private GradientPaintTransformer gradientPaintTransformer;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " \n     * The transformer used when the background paint is an instance of\n     * <code>GradientPaint</code>. \n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.ArcDialFrame",
        "src_path": "source/org/jfree/chart/plot/dial/ArcDialFrame.java",
        "signature": "org.jfree.chart.plot.dial.ArcDialFrame.backgroundPaint",
        "snippet": "    private transient Paint backgroundPaint;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\n     * The color used for the front of the panel.  This field is transient\n     * because it requires special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.ArcDialFrame",
        "src_path": "source/org/jfree/chart/plot/dial/ArcDialFrame.java",
        "signature": "org.jfree.chart.plot.dial.ArcDialFrame.foregroundPaint",
        "snippet": "    private transient Paint foregroundPaint;",
        "begin_line": 86,
        "end_line": 86,
        "comment": "\n     * The color used for the border around the window. This field is transient\n     * because it requires special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.ArcDialFrame",
        "src_path": "source/org/jfree/chart/plot/dial/ArcDialFrame.java",
        "signature": "org.jfree.chart.plot.dial.ArcDialFrame.stroke",
        "snippet": "    private transient Stroke stroke;",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n     * The stroke for drawing the frame outline.  This field is transient\n     * because it requires special handling for serialization.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.ArcDialFrame",
        "src_path": "source/org/jfree/chart/plot/dial/ArcDialFrame.java",
        "signature": "org.jfree.chart.plot.dial.ArcDialFrame.startAngle",
        "snippet": "    private double startAngle;",
        "begin_line": 97,
        "end_line": 97,
        "comment": "\n     * The start angle.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.ArcDialFrame",
        "src_path": "source/org/jfree/chart/plot/dial/ArcDialFrame.java",
        "signature": "org.jfree.chart.plot.dial.ArcDialFrame.extent",
        "snippet": "    private double extent;",
        "begin_line": 102,
        "end_line": 102,
        "comment": "\n     * The end angle.\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.ArcDialFrame",
        "src_path": "source/org/jfree/chart/plot/dial/ArcDialFrame.java",
        "signature": "org.jfree.chart.plot.dial.ArcDialFrame.innerRadius",
        "snippet": "    private double innerRadius;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " The inner radius, relative to the framing rectangle. "
    },
    {
        "class_name": "org.jfree.chart.plot.dial.ArcDialFrame",
        "src_path": "source/org/jfree/chart/plot/dial/ArcDialFrame.java",
        "signature": "org.jfree.chart.plot.dial.ArcDialFrame.outerRadius",
        "snippet": "    private double outerRadius;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " The outer radius, relative to the framing rectangle. "
    },
    {
        "class_name": "org.jfree.chart.util.Layer",
        "src_path": "source/org/jfree/chart/util/Layer.java",
        "signature": "org.jfree.chart.util.Layer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1470104570733183430L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.Layer",
        "src_path": "source/org/jfree/chart/util/Layer.java",
        "signature": "org.jfree.chart.util.Layer.FOREGROUND",
        "snippet": "    public static final Layer FOREGROUND = new Layer(\"Layer.FOREGROUND\");",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Foreground. "
    },
    {
        "class_name": "org.jfree.chart.util.Layer",
        "src_path": "source/org/jfree/chart/util/Layer.java",
        "signature": "org.jfree.chart.util.Layer.BACKGROUND",
        "snippet": "    public static final Layer BACKGROUND = new Layer(\"Layer.BACKGROUND\");",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Background. "
    },
    {
        "class_name": "org.jfree.chart.util.Layer",
        "src_path": "source/org/jfree/chart/util/Layer.java",
        "signature": "org.jfree.chart.util.Layer.name",
        "snippet": "    private String name;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "signature": "org.jfree.chart.util.AbstractObjectList.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7789833772597351595L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "signature": "org.jfree.chart.util.AbstractObjectList.DEFAULT_INITIAL_CAPACITY",
        "snippet": "    public static final int DEFAULT_INITIAL_CAPACITY = 8;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The default initial capacity of the list. "
    },
    {
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "signature": "org.jfree.chart.util.AbstractObjectList.objects",
        "snippet": "    private transient Object[] objects;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Storage for the objects. "
    },
    {
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "signature": "org.jfree.chart.util.AbstractObjectList.size",
        "snippet": "    private int size = 0;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The current list size. "
    },
    {
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "signature": "org.jfree.chart.util.AbstractObjectList.increment",
        "snippet": "    private int increment = DEFAULT_INITIAL_CAPACITY;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The default increment. "
    },
    {
        "class_name": "org.jfree.chart.util.StandardGradientPaintTransformer",
        "src_path": "source/org/jfree/chart/util/StandardGradientPaintTransformer.java",
        "signature": "org.jfree.chart.util.StandardGradientPaintTransformer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8155025776964678320L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.StandardGradientPaintTransformer",
        "src_path": "source/org/jfree/chart/util/StandardGradientPaintTransformer.java",
        "signature": "org.jfree.chart.util.StandardGradientPaintTransformer.type",
        "snippet": "    private GradientPaintTransformType type;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The transform type. "
    },
    {
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6097408511380545010L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.NO_CHANGE",
        "snippet": "    public static final LengthAdjustmentType NO_CHANGE \n            = new LengthAdjustmentType(\"NO_CHANGE\");",
        "begin_line": 57,
        "end_line": 58,
        "comment": " NO_CHANGE. "
    },
    {
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.EXPAND",
        "snippet": "    public static final LengthAdjustmentType EXPAND \n            = new LengthAdjustmentType(\"EXPAND\");",
        "begin_line": 61,
        "end_line": 62,
        "comment": " EXPAND. "
    },
    {
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.CONTRACT",
        "snippet": "    public static final LengthAdjustmentType CONTRACT \n            = new LengthAdjustmentType(\"CONTRACT\");",
        "begin_line": 65,
        "end_line": 66,
        "comment": " CONTRACT. "
    },
    {
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.name",
        "snippet": "    private String name;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.util.BooleanList",
        "src_path": "source/org/jfree/chart/util/BooleanList.java",
        "signature": "org.jfree.chart.util.BooleanList.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8543170333219422042L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.ShapeUtilities",
        "src_path": "source/org/jfree/chart/util/ShapeUtilities.java",
        "signature": "org.jfree.chart.util.ShapeUtilities.SQRT2",
        "snippet": "    private static final float SQRT2 = (float) Math.pow(2.0, 0.5);",
        "begin_line": 389,
        "end_line": 389,
        "comment": " A useful constant used internally. "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.CENTER",
        "snippet": "    public static final int CENTER = 0x00;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Center alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.TOP",
        "snippet": "    public static final int TOP = 0x01;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Top alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.BOTTOM",
        "snippet": "    public static final int BOTTOM = 0x02;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Bottom alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.LEFT",
        "snippet": "    public static final int LEFT = 0x04;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Left alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.RIGHT",
        "snippet": "    public static final int RIGHT = 0x08;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Right alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.TOP_LEFT",
        "snippet": "    public static final int TOP_LEFT = TOP | LEFT;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Top/Left alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.TOP_RIGHT",
        "snippet": "    public static final int TOP_RIGHT = TOP | RIGHT;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " Top/Right alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.BOTTOM_LEFT",
        "snippet": "    public static final int BOTTOM_LEFT = BOTTOM | LEFT;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " Bottom/Left alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.BOTTOM_RIGHT",
        "snippet": "    public static final int BOTTOM_RIGHT = BOTTOM | RIGHT;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Bottom/Right alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.FIT_HORIZONTAL",
        "snippet": "    public static final int FIT_HORIZONTAL = LEFT | RIGHT;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Horizontal fit. "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.FIT_VERTICAL",
        "snippet": "    public static final int FIT_VERTICAL = TOP | BOTTOM;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Vertical fit. "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.FIT",
        "snippet": "    public static final int FIT = FIT_HORIZONTAL | FIT_VERTICAL;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Complete fit. "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.NORTH",
        "snippet": "    public static final int NORTH = TOP;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " North alignment (same as TOP). "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.SOUTH",
        "snippet": "    public static final int SOUTH = BOTTOM;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " South alignment (same as BOTTOM). "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.WEST",
        "snippet": "    public static final int WEST = LEFT;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " West alignment (same as LEFT). "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.EAST",
        "snippet": "    public static final int EAST = RIGHT;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " East alignment (same as RIGHT). "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.NORTH_WEST",
        "snippet": "    public static final int NORTH_WEST = NORTH | WEST;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " North/West alignment (same as TOP_LEFT). "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.NORTH_EAST",
        "snippet": "    public static final int NORTH_EAST = NORTH | EAST;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " North/East alignment (same as TOP_RIGHT). "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.SOUTH_WEST",
        "snippet": "    public static final int SOUTH_WEST = SOUTH | WEST;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " South/West alignment (same as BOTTOM_LEFT). "
    },
    {
        "class_name": "org.jfree.chart.util.Align",
        "src_path": "source/org/jfree/chart/util/Align.java",
        "signature": "org.jfree.chart.util.Align.SOUTH_EAST",
        "snippet": "    public static final int SOUTH_EAST = SOUTH | EAST;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " South/East alignment (same as BOTTOM_RIGHT). "
    },
    {
        "class_name": "org.jfree.chart.util.TableOrder",
        "src_path": "source/org/jfree/chart/util/TableOrder.java",
        "signature": "org.jfree.chart.util.TableOrder.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 525193294068177057L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.TableOrder",
        "src_path": "source/org/jfree/chart/util/TableOrder.java",
        "signature": "org.jfree.chart.util.TableOrder.BY_ROW",
        "snippet": "    public static final TableOrder BY_ROW = new TableOrder(\"TableOrder.BY_ROW\");",
        "begin_line": 55,
        "end_line": 55,
        "comment": " By row. "
    },
    {
        "class_name": "org.jfree.chart.util.TableOrder",
        "src_path": "source/org/jfree/chart/util/TableOrder.java",
        "signature": "org.jfree.chart.util.TableOrder.BY_COLUMN",
        "snippet": "    public static final TableOrder BY_COLUMN \n            = new TableOrder(\"TableOrder.BY_COLUMN\");",
        "begin_line": 58,
        "end_line": 59,
        "comment": " By column. "
    },
    {
        "class_name": "org.jfree.chart.util.TableOrder",
        "src_path": "source/org/jfree/chart/util/TableOrder.java",
        "signature": "org.jfree.chart.util.TableOrder.name",
        "snippet": "    private String name;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "signature": "org.jfree.chart.util.HorizontalAlignment.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8249740987565309567L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "signature": "org.jfree.chart.util.HorizontalAlignment.LEFT",
        "snippet": "    public static final HorizontalAlignment LEFT \n            = new HorizontalAlignment(\"HorizontalAlignment.LEFT\");",
        "begin_line": 57,
        "end_line": 58,
        "comment": " Left alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "signature": "org.jfree.chart.util.HorizontalAlignment.RIGHT",
        "snippet": "    public static final HorizontalAlignment RIGHT \n            = new HorizontalAlignment(\"HorizontalAlignment.RIGHT\");",
        "begin_line": 61,
        "end_line": 62,
        "comment": " Right alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "signature": "org.jfree.chart.util.HorizontalAlignment.CENTER",
        "snippet": "    public static final HorizontalAlignment CENTER \n            = new HorizontalAlignment(\"HorizontalAlignment.CENTER\");",
        "begin_line": 65,
        "end_line": 66,
        "comment": " Center alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "signature": "org.jfree.chart.util.HorizontalAlignment.name",
        "snippet": "    private String name;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "signature": "org.jfree.chart.util.RectangleInsets.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1902273207559319996L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "signature": "org.jfree.chart.util.RectangleInsets.ZERO_INSETS",
        "snippet": "    public static final RectangleInsets ZERO_INSETS = new RectangleInsets(\n            UnitType.ABSOLUTE, 0.0, 0.0, 0.0, 0.0);",
        "begin_line": 65,
        "end_line": 66,
        "comment": "\n     * A useful constant representing zero insets.\n     "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "signature": "org.jfree.chart.util.RectangleInsets.unitType",
        "snippet": "    private UnitType unitType;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Absolute or relative units. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "signature": "org.jfree.chart.util.RectangleInsets.top",
        "snippet": "    private double top;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The top insets. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "signature": "org.jfree.chart.util.RectangleInsets.left",
        "snippet": "    private double left;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The left insets. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "signature": "org.jfree.chart.util.RectangleInsets.bottom",
        "snippet": "    private double bottom;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The bottom insets. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "signature": "org.jfree.chart.util.RectangleInsets.right",
        "snippet": "    private double right;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The right insets. "
    },
    {
        "class_name": "org.jfree.chart.util.HexNumberFormat",
        "src_path": "source/org/jfree/chart/util/HexNumberFormat.java",
        "signature": "org.jfree.chart.util.HexNumberFormat.BYTE",
        "snippet": "    public static final int BYTE = 2;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Number of hexadecimal digits for a byte. "
    },
    {
        "class_name": "org.jfree.chart.util.HexNumberFormat",
        "src_path": "source/org/jfree/chart/util/HexNumberFormat.java",
        "signature": "org.jfree.chart.util.HexNumberFormat.WORD",
        "snippet": "    public static final int WORD = 4;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Number of hexadecimal digits for a word. "
    },
    {
        "class_name": "org.jfree.chart.util.HexNumberFormat",
        "src_path": "source/org/jfree/chart/util/HexNumberFormat.java",
        "signature": "org.jfree.chart.util.HexNumberFormat.DWORD",
        "snippet": "    public static final int DWORD = 8;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Number of hexadecimal digits for a double word. "
    },
    {
        "class_name": "org.jfree.chart.util.HexNumberFormat",
        "src_path": "source/org/jfree/chart/util/HexNumberFormat.java",
        "signature": "org.jfree.chart.util.HexNumberFormat.QWORD",
        "snippet": "    public static final int QWORD = 16;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Number of hexadecimal digits for a quad word. "
    },
    {
        "class_name": "org.jfree.chart.util.HexNumberFormat",
        "src_path": "source/org/jfree/chart/util/HexNumberFormat.java",
        "signature": "org.jfree.chart.util.HexNumberFormat.m_numDigits",
        "snippet": "    private int m_numDigits = DWORD;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The number of digits (shorter strings will be left padded). "
    },
    {
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8331561784933982450L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.VERTICAL",
        "snippet": "    public static final GradientPaintTransformType VERTICAL \n        = new GradientPaintTransformType(\"GradientPaintTransformType.VERTICAL\");",
        "begin_line": 56,
        "end_line": 57,
        "comment": " Vertical. "
    },
    {
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL",
        "snippet": "    public static final GradientPaintTransformType HORIZONTAL \n        = new GradientPaintTransformType(\n                \"GradientPaintTransformType.HORIZONTAL\");",
        "begin_line": 60,
        "end_line": 62,
        "comment": " Horizontal. "
    },
    {
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL",
        "snippet": "    public static final GradientPaintTransformType CENTER_VERTICAL \n        = new GradientPaintTransformType(\n                \"GradientPaintTransformType.CENTER_VERTICAL\");",
        "begin_line": 65,
        "end_line": 67,
        "comment": " Center/vertical. "
    },
    {
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL",
        "snippet": "    public static final GradientPaintTransformType CENTER_HORIZONTAL \n        = new GradientPaintTransformType(\n                \"GradientPaintTransformType.CENTER_HORIZONTAL\");",
        "begin_line": 70,
        "end_line": 72,
        "comment": " Center/horizontal. "
    },
    {
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.name",
        "snippet": "    private String name;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "signature": "org.jfree.chart.util.VerticalAlignment.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7272397034325429853L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "signature": "org.jfree.chart.util.VerticalAlignment.TOP",
        "snippet": "    public static final VerticalAlignment TOP \n            = new VerticalAlignment(\"VerticalAlignment.TOP\");",
        "begin_line": 57,
        "end_line": 58,
        "comment": " Top alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "signature": "org.jfree.chart.util.VerticalAlignment.BOTTOM",
        "snippet": "    public static final VerticalAlignment BOTTOM \n            = new VerticalAlignment(\"VerticalAlignment.BOTTOM\");",
        "begin_line": 61,
        "end_line": 62,
        "comment": " Bottom alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "signature": "org.jfree.chart.util.VerticalAlignment.CENTER",
        "snippet": "    public static final VerticalAlignment CENTER \n            = new VerticalAlignment(\"VerticalAlignment.CENTER\");",
        "begin_line": 65,
        "end_line": 66,
        "comment": " Center alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "signature": "org.jfree.chart.util.VerticalAlignment.name",
        "snippet": "    private String name;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "signature": "org.jfree.chart.util.RectangleEdge.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7400988293691093548L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "signature": "org.jfree.chart.util.RectangleEdge.TOP",
        "snippet": "    public static final RectangleEdge TOP = new RectangleEdge(\n            \"RectangleEdge.TOP\");",
        "begin_line": 57,
        "end_line": 58,
        "comment": " Top. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "signature": "org.jfree.chart.util.RectangleEdge.BOTTOM",
        "snippet": "    public static final RectangleEdge BOTTOM = new RectangleEdge(\n            \"RectangleEdge.BOTTOM\");",
        "begin_line": 61,
        "end_line": 62,
        "comment": " Bottom. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "signature": "org.jfree.chart.util.RectangleEdge.LEFT",
        "snippet": "    public static final RectangleEdge LEFT = new RectangleEdge(\n            \"RectangleEdge.LEFT\");",
        "begin_line": 65,
        "end_line": 66,
        "comment": " Left. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "signature": "org.jfree.chart.util.RectangleEdge.RIGHT",
        "snippet": "    public static final RectangleEdge RIGHT = new RectangleEdge(\n            \"RectangleEdge.RIGHT\");",
        "begin_line": 69,
        "end_line": 70,
        "comment": " Right. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "signature": "org.jfree.chart.util.RectangleEdge.name",
        "snippet": "    private String name;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.util.UnitType",
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "signature": "org.jfree.chart.util.UnitType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6531925392288519884L;    ",
        "begin_line": 53,
        "end_line": 53,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.UnitType",
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "signature": "org.jfree.chart.util.UnitType.ABSOLUTE",
        "snippet": "    public static final UnitType ABSOLUTE = new UnitType(\"UnitType.ABSOLUTE\");",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Absolute. "
    },
    {
        "class_name": "org.jfree.chart.util.UnitType",
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "signature": "org.jfree.chart.util.UnitType.RELATIVE",
        "snippet": "    public static final UnitType RELATIVE = new UnitType(\"UnitType.RELATIVE\");",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Relative. "
    },
    {
        "class_name": "org.jfree.chart.util.UnitType",
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "signature": "org.jfree.chart.util.UnitType.name",
        "snippet": "    private String name;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.util.Rotation",
        "src_path": "source/org/jfree/chart/util/Rotation.java",
        "signature": "org.jfree.chart.util.Rotation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4662815260201591676L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.Rotation",
        "src_path": "source/org/jfree/chart/util/Rotation.java",
        "signature": "org.jfree.chart.util.Rotation.CLOCKWISE",
        "snippet": "    public static final Rotation CLOCKWISE \n        = new Rotation(\"Rotation.CLOCKWISE\", -1.0);",
        "begin_line": 59,
        "end_line": 60,
        "comment": " Clockwise. "
    },
    {
        "class_name": "org.jfree.chart.util.Rotation",
        "src_path": "source/org/jfree/chart/util/Rotation.java",
        "signature": "org.jfree.chart.util.Rotation.ANTICLOCKWISE",
        "snippet": "    public static final Rotation ANTICLOCKWISE \n        = new Rotation(\"Rotation.ANTICLOCKWISE\", 1.0);",
        "begin_line": 63,
        "end_line": 64,
        "comment": " The reverse order renders the primary dataset first. "
    },
    {
        "class_name": "org.jfree.chart.util.Rotation",
        "src_path": "source/org/jfree/chart/util/Rotation.java",
        "signature": "org.jfree.chart.util.Rotation.name",
        "snippet": "    private String name;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.util.Rotation",
        "src_path": "source/org/jfree/chart/util/Rotation.java",
        "signature": "org.jfree.chart.util.Rotation.factor",
        "snippet": "    private double factor;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " \n     * The factor (-1.0 for <code>CLOCKWISE</code> and 1.0 for \n     * <code>ANTICLOCKWISE</code>). \n     "
    },
    {
        "class_name": "org.jfree.chart.util.LogFormat",
        "src_path": "source/org/jfree/chart/util/LogFormat.java",
        "signature": "org.jfree.chart.util.LogFormat.base",
        "snippet": "    private double base;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The log base value. "
    },
    {
        "class_name": "org.jfree.chart.util.LogFormat",
        "src_path": "source/org/jfree/chart/util/LogFormat.java",
        "signature": "org.jfree.chart.util.LogFormat.baseLog",
        "snippet": "    private double baseLog;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The natural logarithm of the base value. "
    },
    {
        "class_name": "org.jfree.chart.util.LogFormat",
        "src_path": "source/org/jfree/chart/util/LogFormat.java",
        "signature": "org.jfree.chart.util.LogFormat.baseLabel",
        "snippet": "    private String baseLabel;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The label for the log base (for example, \"e\"). "
    },
    {
        "class_name": "org.jfree.chart.util.LogFormat",
        "src_path": "source/org/jfree/chart/util/LogFormat.java",
        "signature": "org.jfree.chart.util.LogFormat.powerLabel",
        "snippet": "    private String powerLabel;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " \n     * The label for the power symbol.\n     * \n     * @since 1.0.10\n     "
    },
    {
        "class_name": "org.jfree.chart.util.LogFormat",
        "src_path": "source/org/jfree/chart/util/LogFormat.java",
        "signature": "org.jfree.chart.util.LogFormat.showBase",
        "snippet": "    private boolean showBase;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " A flag that controls whether or not the base is shown. "
    },
    {
        "class_name": "org.jfree.chart.util.LogFormat",
        "src_path": "source/org/jfree/chart/util/LogFormat.java",
        "signature": "org.jfree.chart.util.LogFormat.formatter",
        "snippet": "    private NumberFormat formatter = new DecimalFormat(\"0.0\");",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The number formatter for the exponent. "
    },
    {
        "class_name": "org.jfree.chart.util.RelativeDateFormat",
        "src_path": "source/org/jfree/chart/util/RelativeDateFormat.java",
        "signature": "org.jfree.chart.util.RelativeDateFormat.baseMillis",
        "snippet": "    private long baseMillis;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The base milliseconds for the elapsed time calculation. "
    },
    {
        "class_name": "org.jfree.chart.util.RelativeDateFormat",
        "src_path": "source/org/jfree/chart/util/RelativeDateFormat.java",
        "signature": "org.jfree.chart.util.RelativeDateFormat.showZeroDays",
        "snippet": "    private boolean showZeroDays;",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\r\n     * A flag that controls whether or not a zero day count is displayed.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.util.RelativeDateFormat",
        "src_path": "source/org/jfree/chart/util/RelativeDateFormat.java",
        "signature": "org.jfree.chart.util.RelativeDateFormat.showZeroHours",
        "snippet": "    private boolean showZeroHours;",
        "begin_line": 77,
        "end_line": 77,
        "comment": "\r\n     * A flag that controls whether or not a zero hour count is displayed.\r\n     * \r\n     * @since 1.0.10\r\n     "
    },
    {
        "class_name": "org.jfree.chart.util.RelativeDateFormat",
        "src_path": "source/org/jfree/chart/util/RelativeDateFormat.java",
        "signature": "org.jfree.chart.util.RelativeDateFormat.dayFormatter",
        "snippet": "    private NumberFormat dayFormatter;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " \r\n     * A formatter for the day count (most likely not critical until the\r\n     * day count exceeds 999). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.util.RelativeDateFormat",
        "src_path": "source/org/jfree/chart/util/RelativeDateFormat.java",
        "signature": "org.jfree.chart.util.RelativeDateFormat.positivePrefix",
        "snippet": "    private String positivePrefix;",
        "begin_line": 91,
        "end_line": 91,
        "comment": "\r\n     * A prefix prepended to the start of the format if the relative date is \r\n     * positive.\r\n     *\r\n     * @since 1.0.10\r\n     "
    },
    {
        "class_name": "org.jfree.chart.util.RelativeDateFormat",
        "src_path": "source/org/jfree/chart/util/RelativeDateFormat.java",
        "signature": "org.jfree.chart.util.RelativeDateFormat.daySuffix",
        "snippet": "    private String daySuffix;",
        "begin_line": 96,
        "end_line": 96,
        "comment": "\r\n     * A string appended after the day count.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.util.RelativeDateFormat",
        "src_path": "source/org/jfree/chart/util/RelativeDateFormat.java",
        "signature": "org.jfree.chart.util.RelativeDateFormat.hourSuffix",
        "snippet": "    private String hourSuffix;",
        "begin_line": 101,
        "end_line": 101,
        "comment": "\r\n     * A string appended after the hours.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.util.RelativeDateFormat",
        "src_path": "source/org/jfree/chart/util/RelativeDateFormat.java",
        "signature": "org.jfree.chart.util.RelativeDateFormat.minuteSuffix",
        "snippet": "    private String minuteSuffix;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\r\n     * A string appended after the minutes.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.util.RelativeDateFormat",
        "src_path": "source/org/jfree/chart/util/RelativeDateFormat.java",
        "signature": "org.jfree.chart.util.RelativeDateFormat.secondFormatter",
        "snippet": "    private NumberFormat secondFormatter;",
        "begin_line": 111,
        "end_line": 111,
        "comment": "\r\n     * A formatter for the seconds (and milliseconds).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.util.RelativeDateFormat",
        "src_path": "source/org/jfree/chart/util/RelativeDateFormat.java",
        "signature": "org.jfree.chart.util.RelativeDateFormat.secondSuffix",
        "snippet": "    private String secondSuffix;",
        "begin_line": 116,
        "end_line": 116,
        "comment": "\r\n     * A string appended after the seconds.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.util.RelativeDateFormat",
        "src_path": "source/org/jfree/chart/util/RelativeDateFormat.java",
        "signature": "org.jfree.chart.util.RelativeDateFormat.MILLISECONDS_IN_ONE_HOUR",
        "snippet": "    private static long MILLISECONDS_IN_ONE_HOUR = 60 * 60 * 1000L;",
        "begin_line": 121,
        "end_line": 121,
        "comment": "\r\n     * A constant for the number of milliseconds in one hour.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.util.RelativeDateFormat",
        "src_path": "source/org/jfree/chart/util/RelativeDateFormat.java",
        "signature": "org.jfree.chart.util.RelativeDateFormat.MILLISECONDS_IN_ONE_DAY",
        "snippet": "    private static long MILLISECONDS_IN_ONE_DAY = 24 * MILLISECONDS_IN_ONE_HOUR;",
        "begin_line": 126,
        "end_line": 126,
        "comment": "\r\n     * A constant for the number of milliseconds in one day.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2457494205644416327L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.CENTER",
        "snippet": "    public static final RectangleAnchor CENTER \n        = new RectangleAnchor(\"RectangleAnchor.CENTER\");",
        "begin_line": 63,
        "end_line": 64,
        "comment": " Center. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.TOP",
        "snippet": "    public static final RectangleAnchor TOP \n        = new RectangleAnchor(\"RectangleAnchor.TOP\");",
        "begin_line": 67,
        "end_line": 68,
        "comment": " Top. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.TOP_LEFT",
        "snippet": "    public static final RectangleAnchor TOP_LEFT \n        = new RectangleAnchor(\"RectangleAnchor.TOP_LEFT\");",
        "begin_line": 71,
        "end_line": 72,
        "comment": " Top-Left. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.TOP_RIGHT",
        "snippet": "    public static final RectangleAnchor TOP_RIGHT \n        = new RectangleAnchor(\"RectangleAnchor.TOP_RIGHT\");",
        "begin_line": 75,
        "end_line": 76,
        "comment": " Top-Right. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.BOTTOM",
        "snippet": "    public static final RectangleAnchor BOTTOM \n        = new RectangleAnchor(\"RectangleAnchor.BOTTOM\");",
        "begin_line": 79,
        "end_line": 80,
        "comment": " Bottom. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT",
        "snippet": "    public static final RectangleAnchor BOTTOM_LEFT \n        = new RectangleAnchor(\"RectangleAnchor.BOTTOM_LEFT\");",
        "begin_line": 83,
        "end_line": 84,
        "comment": " Bottom-Left. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT",
        "snippet": "    public static final RectangleAnchor BOTTOM_RIGHT \n        = new RectangleAnchor(\"RectangleAnchor.BOTTOM_RIGHT\");",
        "begin_line": 87,
        "end_line": 88,
        "comment": " Bottom-Right. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.LEFT",
        "snippet": "    public static final RectangleAnchor LEFT \n        = new RectangleAnchor(\"RectangleAnchor.LEFT\");",
        "begin_line": 91,
        "end_line": 92,
        "comment": " Left. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.RIGHT",
        "snippet": "    public static final RectangleAnchor RIGHT \n        = new RectangleAnchor(\"RectangleAnchor.RIGHT\");",
        "begin_line": 95,
        "end_line": 96,
        "comment": " Right. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.name",
        "snippet": "    private String name;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.util.SortOrder",
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "signature": "org.jfree.chart.util.SortOrder.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2124469847758108312L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.SortOrder",
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "signature": "org.jfree.chart.util.SortOrder.ASCENDING",
        "snippet": "    public static final SortOrder ASCENDING = new SortOrder(\n            \"SortOrder.ASCENDING\");",
        "begin_line": 59,
        "end_line": 60,
        "comment": " Ascending order. "
    },
    {
        "class_name": "org.jfree.chart.util.SortOrder",
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "signature": "org.jfree.chart.util.SortOrder.DESCENDING",
        "snippet": "    public static final SortOrder DESCENDING = new SortOrder(\n            \"SortOrder.DESCENDING\");",
        "begin_line": 63,
        "end_line": 64,
        "comment": " Descending order. "
    },
    {
        "class_name": "org.jfree.chart.util.SortOrder",
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "signature": "org.jfree.chart.util.SortOrder.name",
        "snippet": "    private String name;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.util.Size2D",
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "signature": "org.jfree.chart.util.Size2D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2558191683786418168L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.Size2D",
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "signature": "org.jfree.chart.util.Size2D.width",
        "snippet": "    public double width;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The width. "
    },
    {
        "class_name": "org.jfree.chart.util.Size2D",
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "signature": "org.jfree.chart.util.Size2D.height",
        "snippet": "    public double height;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The height. "
    },
    {
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "signature": "org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT",
        "snippet": "    public static final String THREAD_CONTEXT = \"ThreadContext\";",
        "begin_line": 71,
        "end_line": 71,
        "comment": "\n     * A constant for using the TheadContext as source for the classloader.\n     "
    },
    {
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "signature": "org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT",
        "snippet": "    public static final String CLASS_CONTEXT = \"ClassContext\";",
        "begin_line": 75,
        "end_line": 75,
        "comment": "\n     * A constant for using the ClassContext as source for the classloader.\n     "
    },
    {
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "signature": "org.jfree.chart.util.ObjectUtilities.classLoaderSource",
        "snippet": "    private static String classLoaderSource = THREAD_CONTEXT;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\n     * By default use the thread context.\n     "
    },
    {
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "signature": "org.jfree.chart.util.ObjectUtilities.classLoader",
        "snippet": "    private static ClassLoader classLoader;",
        "begin_line": 84,
        "end_line": 84,
        "comment": "\n     * The custom classloader to be used (if not null).\n     "
    },
    {
        "class_name": "org.jfree.chart.urls.TimeSeriesURLGenerator",
        "src_path": "source/org/jfree/chart/urls/TimeSeriesURLGenerator.java",
        "signature": "org.jfree.chart.urls.TimeSeriesURLGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -9122773175671182445L;    ",
        "begin_line": 68,
        "end_line": 68,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.urls.TimeSeriesURLGenerator",
        "src_path": "source/org/jfree/chart/urls/TimeSeriesURLGenerator.java",
        "signature": "org.jfree.chart.urls.TimeSeriesURLGenerator.dateFormat",
        "snippet": "    private DateFormat dateFormat = DateFormat.getInstance();",
        "begin_line": 71,
        "end_line": 71,
        "comment": " A formatter for the date. "
    },
    {
        "class_name": "org.jfree.chart.urls.TimeSeriesURLGenerator",
        "src_path": "source/org/jfree/chart/urls/TimeSeriesURLGenerator.java",
        "signature": "org.jfree.chart.urls.TimeSeriesURLGenerator.prefix",
        "snippet": "    private String prefix = \"index.html\";",
        "begin_line": 74,
        "end_line": 74,
        "comment": " Prefix to the URL "
    },
    {
        "class_name": "org.jfree.chart.urls.TimeSeriesURLGenerator",
        "src_path": "source/org/jfree/chart/urls/TimeSeriesURLGenerator.java",
        "signature": "org.jfree.chart.urls.TimeSeriesURLGenerator.seriesParameterName",
        "snippet": "    private String seriesParameterName = \"series\";",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Name to use to identify the series "
    },
    {
        "class_name": "org.jfree.chart.urls.TimeSeriesURLGenerator",
        "src_path": "source/org/jfree/chart/urls/TimeSeriesURLGenerator.java",
        "signature": "org.jfree.chart.urls.TimeSeriesURLGenerator.itemParameterName",
        "snippet": "    private String itemParameterName = \"item\";",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Name to use to identify the item "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardCategoryURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardCategoryURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardCategoryURLGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2276668053074881909L;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardCategoryURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardCategoryURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardCategoryURLGenerator.prefix",
        "snippet": "    private String prefix = \"index.html\";",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Prefix to the URL "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardCategoryURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardCategoryURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardCategoryURLGenerator.seriesParameterName",
        "snippet": "    private String seriesParameterName = \"series\";",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Series parameter name to go in each URL "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardCategoryURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardCategoryURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardCategoryURLGenerator.categoryParameterName",
        "snippet": "    private String categoryParameterName = \"category\";",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Category parameter name to go in each URL "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardXYURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardXYURLGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1771624523496595382L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardXYURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardXYURLGenerator.DEFAULT_PREFIX",
        "snippet": "    public static final String DEFAULT_PREFIX = \"index.html\";",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The default prefix. "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardXYURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardXYURLGenerator.DEFAULT_SERIES_PARAMETER",
        "snippet": "    public static final String DEFAULT_SERIES_PARAMETER = \"series\";",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The default series parameter. "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardXYURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardXYURLGenerator.DEFAULT_ITEM_PARAMETER",
        "snippet": "    public static final String DEFAULT_ITEM_PARAMETER = \"item\";",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The default item parameter. "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardXYURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardXYURLGenerator.prefix",
        "snippet": "    private String prefix;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Prefix to the URL "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardXYURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardXYURLGenerator.seriesParameterName",
        "snippet": "    private String seriesParameterName;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Series parameter name to go in each URL "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardXYURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardXYURLGenerator.itemParameterName",
        "snippet": "    private String itemParameterName;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Item parameter name to go in each URL "
    },
    {
        "class_name": "org.jfree.chart.urls.CustomXYURLGenerator",
        "src_path": "source/org/jfree/chart/urls/CustomXYURLGenerator.java",
        "signature": "org.jfree.chart.urls.CustomXYURLGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8565933356596551832L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.urls.CustomXYURLGenerator",
        "src_path": "source/org/jfree/chart/urls/CustomXYURLGenerator.java",
        "signature": "org.jfree.chart.urls.CustomXYURLGenerator.urlSeries",
        "snippet": "    private ArrayList urlSeries = new ArrayList();",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Storage for the URLs. "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardPieURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardPieURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardPieURLGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1626966402065883419L;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardPieURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardPieURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardPieURLGenerator.prefix",
        "snippet": "    private String prefix = \"index.html\";",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The prefix. "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardPieURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardPieURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardPieURLGenerator.categoryParameterName",
        "snippet": "    private String categoryParameterName = \"category\";",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The category parameter name. "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardPieURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardPieURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardPieURLGenerator.indexParameterName",
        "snippet": "    private String indexParameterName = \"pieIndex\";",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The pie index parameter name. "
    },
    {
        "class_name": "org.jfree.chart.urls.CustomPieURLGenerator",
        "src_path": "source/org/jfree/chart/urls/CustomPieURLGenerator.java",
        "signature": "org.jfree.chart.urls.CustomPieURLGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7100607670144900503L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.urls.CustomPieURLGenerator",
        "src_path": "source/org/jfree/chart/urls/CustomPieURLGenerator.java",
        "signature": "org.jfree.chart.urls.CustomPieURLGenerator.urls",
        "snippet": "    private ArrayList urls;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Storage for the URLs. "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryLineAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryLineAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryLineAnnotation.category1",
        "snippet": "    private Comparable category1;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The category for the start of the line. "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryLineAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryLineAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryLineAnnotation.value1",
        "snippet": "    private double value1;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The value for the start of the line. "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryLineAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryLineAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryLineAnnotation.category2",
        "snippet": "    private Comparable category2;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The category for the end of the line. "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryLineAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryLineAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryLineAnnotation.value2",
        "snippet": "    private double value2;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " The value for the end of the line. "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryLineAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryLineAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryLineAnnotation.paint",
        "snippet": "    private transient Paint paint = Color.black;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " The line color. "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryLineAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryLineAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryLineAnnotation.stroke",
        "snippet": "    private transient Stroke stroke = new BasicStroke(1.0f);",
        "begin_line": 94,
        "end_line": 94,
        "comment": " The line stroke. "
    },
    {
        "class_name": "org.jfree.chart.annotations.AbstractXYAnnotation",
        "src_path": "source/org/jfree/chart/annotations/AbstractXYAnnotation.java",
        "signature": "org.jfree.chart.annotations.AbstractXYAnnotation.toolTipText",
        "snippet": "    private String toolTipText;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The tool tip text. "
    },
    {
        "class_name": "org.jfree.chart.annotations.AbstractXYAnnotation",
        "src_path": "source/org/jfree/chart/annotations/AbstractXYAnnotation.java",
        "signature": "org.jfree.chart.annotations.AbstractXYAnnotation.url",
        "snippet": "    private String url;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The URL. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYDrawableAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYDrawableAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYDrawableAnnotation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6540812859722691020L;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYDrawableAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYDrawableAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYDrawableAnnotation.x",
        "snippet": "    private double x;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The x-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYDrawableAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYDrawableAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYDrawableAnnotation.y",
        "snippet": "    private double y;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The y-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYDrawableAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYDrawableAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYDrawableAnnotation.width",
        "snippet": "    private double width;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The width. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYDrawableAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYDrawableAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYDrawableAnnotation.height",
        "snippet": "    private double height;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The height. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYDrawableAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYDrawableAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYDrawableAnnotation.drawable",
        "snippet": "    private Drawable drawable;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " The drawable object. "
    },
    {
        "class_name": "org.jfree.chart.annotations.TextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/TextAnnotation.java",
        "signature": "org.jfree.chart.annotations.TextAnnotation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7008912287533127432L;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.annotations.TextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/TextAnnotation.java",
        "signature": "org.jfree.chart.annotations.TextAnnotation.DEFAULT_FONT",
        "snippet": "    public static final Font DEFAULT_FONT \n        = new Font(\"SansSerif\", Font.PLAIN, 10);",
        "begin_line": 79,
        "end_line": 80,
        "comment": " The default font. "
    },
    {
        "class_name": "org.jfree.chart.annotations.TextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/TextAnnotation.java",
        "signature": "org.jfree.chart.annotations.TextAnnotation.DEFAULT_PAINT",
        "snippet": "    public static final Paint DEFAULT_PAINT = Color.black;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " The default paint. "
    },
    {
        "class_name": "org.jfree.chart.annotations.TextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/TextAnnotation.java",
        "signature": "org.jfree.chart.annotations.TextAnnotation.DEFAULT_TEXT_ANCHOR",
        "snippet": "    public static final TextAnchor DEFAULT_TEXT_ANCHOR = TextAnchor.CENTER;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " The default text anchor. "
    },
    {
        "class_name": "org.jfree.chart.annotations.TextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/TextAnnotation.java",
        "signature": "org.jfree.chart.annotations.TextAnnotation.DEFAULT_ROTATION_ANCHOR",
        "snippet": "    public static final TextAnchor DEFAULT_ROTATION_ANCHOR = TextAnchor.CENTER;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " The default rotation anchor. "
    },
    {
        "class_name": "org.jfree.chart.annotations.TextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/TextAnnotation.java",
        "signature": "org.jfree.chart.annotations.TextAnnotation.DEFAULT_ROTATION_ANGLE",
        "snippet": "    public static final double DEFAULT_ROTATION_ANGLE = 0.0;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " The default rotation angle. "
    },
    {
        "class_name": "org.jfree.chart.annotations.TextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/TextAnnotation.java",
        "signature": "org.jfree.chart.annotations.TextAnnotation.text",
        "snippet": "    private String text;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " The text. "
    },
    {
        "class_name": "org.jfree.chart.annotations.TextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/TextAnnotation.java",
        "signature": "org.jfree.chart.annotations.TextAnnotation.font",
        "snippet": "    private Font font;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " The font. "
    },
    {
        "class_name": "org.jfree.chart.annotations.TextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/TextAnnotation.java",
        "signature": "org.jfree.chart.annotations.TextAnnotation.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " The paint. "
    },
    {
        "class_name": "org.jfree.chart.annotations.TextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/TextAnnotation.java",
        "signature": "org.jfree.chart.annotations.TextAnnotation.textAnchor",
        "snippet": "    private TextAnchor textAnchor;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " The text anchor. "
    },
    {
        "class_name": "org.jfree.chart.annotations.TextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/TextAnnotation.java",
        "signature": "org.jfree.chart.annotations.TextAnnotation.rotationAnchor",
        "snippet": "    private TextAnchor rotationAnchor;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " The rotation anchor. "
    },
    {
        "class_name": "org.jfree.chart.annotations.TextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/TextAnnotation.java",
        "signature": "org.jfree.chart.annotations.TextAnnotation.rotationAngle",
        "snippet": "    private double rotationAngle;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " The rotation angle. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYImageAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYImageAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYImageAnnotation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4364694501921559958L;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYImageAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYImageAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYImageAnnotation.x",
        "snippet": "    private double x;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The x-coordinate (in data space). "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYImageAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYImageAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYImageAnnotation.y",
        "snippet": "    private double y;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " The y-coordinate (in data space). "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYImageAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYImageAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYImageAnnotation.image",
        "snippet": "    private transient Image image;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " The image. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYImageAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYImageAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYImageAnnotation.anchor",
        "snippet": "    private RectangleAnchor anchor;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " \r\n     * The image anchor point. \r\n     * \r\n     * @since 1.0.4\r\n     "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPolygonAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPolygonAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPolygonAnnotation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6984203651995900036L;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPolygonAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPolygonAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPolygonAnnotation.polygon",
        "snippet": "    private double[] polygon;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The polygon. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPolygonAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPolygonAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPolygonAnnotation.stroke",
        "snippet": "    private transient Stroke stroke;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The stroke used to draw the box outline. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPolygonAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPolygonAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPolygonAnnotation.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " The paint used to draw the box outline. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPolygonAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPolygonAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPolygonAnnotation.fillPaint",
        "snippet": "    private transient Paint fillPaint;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " The paint used to fill the box. "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryTextAnnotation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3333360090781320147L;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryTextAnnotation.category",
        "snippet": "    private Comparable category;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The category. "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryTextAnnotation.categoryAnchor",
        "snippet": "    private CategoryAnchor categoryAnchor;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The category anchor (START, MIDDLE, or END). "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryTextAnnotation.value",
        "snippet": "    private double value;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The value. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPointerAnnotation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4031161445009858551L;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPointerAnnotation.DEFAULT_TIP_RADIUS",
        "snippet": "    public static final double DEFAULT_TIP_RADIUS = 10.0;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " The default tip radius (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPointerAnnotation.DEFAULT_BASE_RADIUS",
        "snippet": "    public static final double DEFAULT_BASE_RADIUS = 30.0;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " The default base radius (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPointerAnnotation.DEFAULT_LABEL_OFFSET",
        "snippet": "    public static final double DEFAULT_LABEL_OFFSET = 3.0;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " The default label offset (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPointerAnnotation.DEFAULT_ARROW_LENGTH",
        "snippet": "    public static final double DEFAULT_ARROW_LENGTH = 5.0;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " The default arrow length (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPointerAnnotation.DEFAULT_ARROW_WIDTH",
        "snippet": "    public static final double DEFAULT_ARROW_WIDTH = 3.0;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " The default arrow width (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPointerAnnotation.angle",
        "snippet": "    private double angle;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " The angle of the arrow's line (in radians). "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPointerAnnotation.tipRadius",
        "snippet": "    private double tipRadius;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " \r\n     * The radius from the (x, y) point to the tip of the arrow (in Java2D \r\n     * units). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPointerAnnotation.baseRadius",
        "snippet": "    private double baseRadius;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " \r\n     * The radius from the (x, y) point to the start of the arrow line (in \r\n     * Java2D units). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPointerAnnotation.arrowLength",
        "snippet": "    private double arrowLength;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The length of the arrow head (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPointerAnnotation.arrowWidth",
        "snippet": "    private double arrowWidth;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " The arrow width (in Java2D units, per side). "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPointerAnnotation.arrowStroke",
        "snippet": "    private transient Stroke arrowStroke;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " The arrow stroke. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPointerAnnotation.arrowPaint",
        "snippet": "    private transient Paint arrowPaint;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " The arrow paint. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYPointerAnnotation.labelOffset",
        "snippet": "    private double labelOffset;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " The radius from the base point to the anchor point for the label. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYShapeAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYShapeAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYShapeAnnotation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8553218317600684041L;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYShapeAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYShapeAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYShapeAnnotation.shape",
        "snippet": "    private transient Shape shape;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " The shape. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYShapeAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYShapeAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYShapeAnnotation.stroke",
        "snippet": "    private transient Stroke stroke;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " The stroke used to draw the shape's outline. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYShapeAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYShapeAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYShapeAnnotation.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " The paint used to draw the shape's outline. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYShapeAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYShapeAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYShapeAnnotation.fillPaint",
        "snippet": "    private transient Paint fillPaint;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " The paint used to fill the shape. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYTextAnnotation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2946063342782506328L;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYTextAnnotation.DEFAULT_FONT",
        "snippet": "    public static final Font DEFAULT_FONT = new Font(\"SansSerif\", Font.PLAIN, \n            10);",
        "begin_line": 92,
        "end_line": 93,
        "comment": " The default font. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYTextAnnotation.DEFAULT_PAINT",
        "snippet": "    public static final Paint DEFAULT_PAINT = Color.black;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " The default paint. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYTextAnnotation.DEFAULT_TEXT_ANCHOR",
        "snippet": "    public static final TextAnchor DEFAULT_TEXT_ANCHOR = TextAnchor.CENTER;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The default text anchor. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYTextAnnotation.DEFAULT_ROTATION_ANCHOR",
        "snippet": "    public static final TextAnchor DEFAULT_ROTATION_ANCHOR = TextAnchor.CENTER;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " The default rotation anchor. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYTextAnnotation.DEFAULT_ROTATION_ANGLE",
        "snippet": "    public static final double DEFAULT_ROTATION_ANGLE = 0.0;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " The default rotation angle. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYTextAnnotation.text",
        "snippet": "    private String text;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " The text. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYTextAnnotation.font",
        "snippet": "    private Font font;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " The font. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYTextAnnotation.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " The paint. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYTextAnnotation.x",
        "snippet": "    private double x;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " The x-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYTextAnnotation.y",
        "snippet": "    private double y;",
        "begin_line": 120,
        "end_line": 120,
        "comment": " The y-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYTextAnnotation.textAnchor",
        "snippet": "    private TextAnchor textAnchor;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " The text anchor (to be aligned with (x, y)). "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYTextAnnotation.rotationAnchor",
        "snippet": "    private TextAnchor rotationAnchor;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " The rotation anchor. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYTextAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYTextAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYTextAnnotation.rotationAngle",
        "snippet": "    private double rotationAngle;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " The rotation angle. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYBoxAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYBoxAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYBoxAnnotation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6764703772526757457L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYBoxAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYBoxAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYBoxAnnotation.x0",
        "snippet": "    private double x0;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The lower x-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYBoxAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYBoxAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYBoxAnnotation.y0",
        "snippet": "    private double y0;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " The lower y-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYBoxAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYBoxAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYBoxAnnotation.x1",
        "snippet": "    private double x1;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " The upper x-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYBoxAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYBoxAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYBoxAnnotation.y1",
        "snippet": "    private double y1;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " The upper y-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYBoxAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYBoxAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYBoxAnnotation.stroke",
        "snippet": "    private transient Stroke stroke;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " The stroke used to draw the box outline. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYBoxAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYBoxAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYBoxAnnotation.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " The paint used to draw the box outline. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYBoxAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYBoxAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYBoxAnnotation.fillPaint",
        "snippet": "    private transient Paint fillPaint;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " The paint used to fill the box. "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryPointerAnnotation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4031161445009858551L;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryPointerAnnotation.DEFAULT_TIP_RADIUS",
        "snippet": "    public static final double DEFAULT_TIP_RADIUS = 10.0;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " The default tip radius (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryPointerAnnotation.DEFAULT_BASE_RADIUS",
        "snippet": "    public static final double DEFAULT_BASE_RADIUS = 30.0;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " The default base radius (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryPointerAnnotation.DEFAULT_LABEL_OFFSET",
        "snippet": "    public static final double DEFAULT_LABEL_OFFSET = 3.0;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " The default label offset (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryPointerAnnotation.DEFAULT_ARROW_LENGTH",
        "snippet": "    public static final double DEFAULT_ARROW_LENGTH = 5.0;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " The default arrow length (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryPointerAnnotation.DEFAULT_ARROW_WIDTH",
        "snippet": "    public static final double DEFAULT_ARROW_WIDTH = 3.0;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " The default arrow width (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryPointerAnnotation.angle",
        "snippet": "    private double angle;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " The angle of the arrow's line (in radians). "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryPointerAnnotation.tipRadius",
        "snippet": "    private double tipRadius;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " \r\n     * The radius from the (x, y) point to the tip of the arrow (in Java2D \r\n     * units). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryPointerAnnotation.baseRadius",
        "snippet": "    private double baseRadius;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " \r\n     * The radius from the (x, y) point to the start of the arrow line (in \r\n     * Java2D units). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryPointerAnnotation.arrowLength",
        "snippet": "    private double arrowLength;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " The length of the arrow head (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryPointerAnnotation.arrowWidth",
        "snippet": "    private double arrowWidth;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " The arrow width (in Java2D units, per side). "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryPointerAnnotation.arrowStroke",
        "snippet": "    private transient Stroke arrowStroke;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The arrow stroke. "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryPointerAnnotation.arrowPaint",
        "snippet": "    private transient Paint arrowPaint;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " The arrow paint. "
    },
    {
        "class_name": "org.jfree.chart.annotations.CategoryPointerAnnotation",
        "src_path": "source/org/jfree/chart/annotations/CategoryPointerAnnotation.java",
        "signature": "org.jfree.chart.annotations.CategoryPointerAnnotation.labelOffset",
        "snippet": "    private double labelOffset;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " The radius from the base point to the anchor point for the label. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYLineAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYLineAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYLineAnnotation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -80535465244091334L;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYLineAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYLineAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYLineAnnotation.x1",
        "snippet": "    private double x1;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The x-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYLineAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYLineAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYLineAnnotation.y1",
        "snippet": "    private double y1;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The y-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYLineAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYLineAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYLineAnnotation.x2",
        "snippet": "    private double x2;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " The x-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYLineAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYLineAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYLineAnnotation.y2",
        "snippet": "    private double y2;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " The y-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYLineAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYLineAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYLineAnnotation.stroke",
        "snippet": "    private transient Stroke stroke;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The line stroke. "
    },
    {
        "class_name": "org.jfree.chart.annotations.XYLineAnnotation",
        "src_path": "source/org/jfree/chart/annotations/XYLineAnnotation.java",
        "signature": "org.jfree.chart.annotations.XYLineAnnotation.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " The line color. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7108591260223293197L;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.labelFormat",
        "snippet": "    private String labelFormat;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " \r\n     * The label format string used by a <code>MessageFormat</code> object to \r\n     * combine the standard items:  {0} = series name, {1} = category, \r\n     * {2} = value, {3} = value as a percentage of the column total.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.nullValueString",
        "snippet": "    private String nullValueString;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The string used to represent a null value. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.numberFormat",
        "snippet": "    private NumberFormat numberFormat;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " \r\n     * A number formatter used to preformat the value before it is passed to \r\n     * the MessageFormat object. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.dateFormat",
        "snippet": "    private DateFormat dateFormat;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\r\n     * A date formatter used to preformat the value before it is passed to the\r\n     * MessageFormat object.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.percentFormat",
        "snippet": "    private NumberFormat percentFormat;",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\r\n     * A number formatter used to preformat the percentage value before it is \r\n     * passed to the MessageFormat object.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5869744396278660636L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.formatString",
        "snippet": "    private String formatString;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The item label format string. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.xFormat",
        "snippet": "    private NumberFormat xFormat;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " A number formatter for the x value. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.xDateFormat",
        "snippet": "    private DateFormat xDateFormat;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " A date formatter for the x value. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.yFormat",
        "snippet": "    private NumberFormat yFormat;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " A formatter for the y value. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.yDateFormat",
        "snippet": "    private DateFormat yDateFormat;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " A date formatter for the y value. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.nullXString",
        "snippet": "    private String nullXString = \"null\";",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The string used to represent 'null' for the x-value. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.nullYString",
        "snippet": "    private String nullYString = \"null\";",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The string used to represent 'null' for the y-value. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3064190563760203668L;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.DEFAULT_SECTION_LABEL_FORMAT",
        "snippet": "    public static final String DEFAULT_SECTION_LABEL_FORMAT = \"{0}\";",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The default section label format. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.attributedLabels",
        "snippet": "    private ObjectList attributedLabels;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " \r\n     * An optional list of attributed labels (instances of AttributedString). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardXYToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3564164459039540784L;    ",
        "begin_line": 64,
        "end_line": 64,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardXYToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT",
        "snippet": "    public static final String DEFAULT_TOOL_TIP_FORMAT = \"{0}: ({1}, {2})\";",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The default tooltip format. "
    },
    {
        "class_name": "org.jfree.chart.labels.IntervalCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/IntervalCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.IntervalCategoryItemLabelGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5056909225610630529L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.IntervalCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/IntervalCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.IntervalCategoryItemLabelGenerator.DEFAULT_LABEL_FORMAT_STRING",
        "snippet": "    public static final String DEFAULT_LABEL_FORMAT_STRING \n        = \"({0}, {1}) = {3} - {4}\";",
        "begin_line": 65,
        "end_line": 66,
        "comment": " The default format string. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardXYItemLabelGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7807668053171837925L;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardXYItemLabelGenerator.DEFAULT_ITEM_LABEL_FORMAT",
        "snippet": "    public static final String DEFAULT_ITEM_LABEL_FORMAT = \"{2}\";",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The default item label format. "
    },
    {
        "class_name": "org.jfree.chart.labels.IntervalCategoryToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/IntervalCategoryToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.IntervalCategoryToolTipGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3853824986520333437L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.IntervalCategoryToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/IntervalCategoryToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.IntervalCategoryToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT_STRING",
        "snippet": "    public static final String DEFAULT_TOOL_TIP_FORMAT_STRING \n        = \"({0}, {1}) = {3} - {4}\";",
        "begin_line": 65,
        "end_line": 66,
        "comment": " The default format string. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5845390630157034499L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.itemLabelAnchor",
        "snippet": "    private ItemLabelAnchor itemLabelAnchor;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The item label anchor point. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.textAnchor",
        "snippet": "    private TextAnchor textAnchor;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The text anchor. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.rotationAnchor",
        "snippet": "    private TextAnchor rotationAnchor;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The rotation anchor. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.angle",
        "snippet": "    private double angle;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The rotation angle. "
    },
    {
        "class_name": "org.jfree.chart.labels.SymbolicXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/SymbolicXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.SymbolicXYItemLabelGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3963400354475494395L;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1233101616128695658L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.CENTER",
        "snippet": "    public static final ItemLabelAnchor CENTER \n        = new ItemLabelAnchor(\"ItemLabelAnchor.CENTER\");",
        "begin_line": 60,
        "end_line": 61,
        "comment": " CENTER. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE1",
        "snippet": "    public static final ItemLabelAnchor INSIDE1 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE1\");",
        "begin_line": 64,
        "end_line": 65,
        "comment": " INSIDE1. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE2",
        "snippet": "    public static final ItemLabelAnchor INSIDE2 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE2\");",
        "begin_line": 68,
        "end_line": 69,
        "comment": " INSIDE2. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE3",
        "snippet": "    public static final ItemLabelAnchor INSIDE3 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE3\");",
        "begin_line": 72,
        "end_line": 73,
        "comment": " INSIDE3. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE4",
        "snippet": "    public static final ItemLabelAnchor INSIDE4 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE4\");",
        "begin_line": 76,
        "end_line": 77,
        "comment": " INSIDE4. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE5",
        "snippet": "    public static final ItemLabelAnchor INSIDE5 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE5\");",
        "begin_line": 80,
        "end_line": 81,
        "comment": " INSIDE5. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE6",
        "snippet": "    public static final ItemLabelAnchor INSIDE6 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE6\");",
        "begin_line": 84,
        "end_line": 85,
        "comment": " INSIDE6. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE7",
        "snippet": "    public static final ItemLabelAnchor INSIDE7 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE7\");",
        "begin_line": 88,
        "end_line": 89,
        "comment": " INSIDE7. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE8",
        "snippet": "    public static final ItemLabelAnchor INSIDE8 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE8\");",
        "begin_line": 92,
        "end_line": 93,
        "comment": " INSIDE8. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE9",
        "snippet": "    public static final ItemLabelAnchor INSIDE9 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE9\");",
        "begin_line": 96,
        "end_line": 97,
        "comment": " INSIDE9. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE10",
        "snippet": "    public static final ItemLabelAnchor INSIDE10 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE10\");",
        "begin_line": 100,
        "end_line": 101,
        "comment": " INSIDE10. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE11",
        "snippet": "    public static final ItemLabelAnchor INSIDE11 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE11\");",
        "begin_line": 104,
        "end_line": 105,
        "comment": " INSIDE11. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE12",
        "snippet": "    public static final ItemLabelAnchor INSIDE12 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE12\");",
        "begin_line": 108,
        "end_line": 109,
        "comment": " INSIDE12. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE1",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE1 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE1\");",
        "begin_line": 112,
        "end_line": 113,
        "comment": " OUTSIDE1. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE2",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE2 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE2\");",
        "begin_line": 116,
        "end_line": 117,
        "comment": " OUTSIDE2. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE3",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE3 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE3\");",
        "begin_line": 120,
        "end_line": 121,
        "comment": " OUTSIDE3. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE4",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE4 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE4\");",
        "begin_line": 124,
        "end_line": 125,
        "comment": " OUTSIDE4. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE5",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE5 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE5\");",
        "begin_line": 128,
        "end_line": 129,
        "comment": " OUTSIDE5. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE6",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE6 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE6\");",
        "begin_line": 132,
        "end_line": 133,
        "comment": " OUTSIDE6. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE7",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE7 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE7\");",
        "begin_line": 136,
        "end_line": 137,
        "comment": " OUTSIDE7. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE8",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE8 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE8\");",
        "begin_line": 140,
        "end_line": 141,
        "comment": " OUTSIDE8. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE9",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE9 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE9\");",
        "begin_line": 144,
        "end_line": 145,
        "comment": " OUTSIDE9. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE10",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE10 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE10\");",
        "begin_line": 148,
        "end_line": 149,
        "comment": " OUTSIDE10. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE11",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE11 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE11\");",
        "begin_line": 152,
        "end_line": 153,
        "comment": " OUTSIDE11. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE12",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE12 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE12\");",
        "begin_line": 156,
        "end_line": 157,
        "comment": " OUTSIDE12. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.name",
        "snippet": "    private String name;",
        "begin_line": 160,
        "end_line": 160,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/BoxAndWhiskerXYToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2648775791161459710L;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/BoxAndWhiskerXYToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT",
        "snippet": "    public static final String DEFAULT_TOOL_TIP_FORMAT \n        = \"X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} \";",
        "begin_line": 88,
        "end_line": 89,
        "comment": " The default tooltip format string. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardXYSeriesLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1916017081848400024L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardXYSeriesLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator.DEFAULT_LABEL_FORMAT",
        "snippet": "    public static final String DEFAULT_LABEL_FORMAT = \"{0}\";",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The default item label format. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardXYSeriesLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator.formatPattern",
        "snippet": "    private String formatPattern;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The format pattern. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardCategoryItemLabelGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3499701401211412882L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardCategoryItemLabelGenerator.DEFAULT_LABEL_FORMAT_STRING",
        "snippet": "    public static final String DEFAULT_LABEL_FORMAT_STRING = \"{2}\";",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The default format string. "
    },
    {
        "class_name": "org.jfree.chart.labels.HighLowItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/HighLowItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.HighLowItemLabelGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5617111754832211830L;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.HighLowItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/HighLowItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.HighLowItemLabelGenerator.dateFormatter",
        "snippet": "    private DateFormat dateFormatter;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The date formatter. "
    },
    {
        "class_name": "org.jfree.chart.labels.HighLowItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/HighLowItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.HighLowItemLabelGenerator.numberFormatter",
        "snippet": "    private NumberFormat numberFormatter;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The number formatter. "
    },
    {
        "class_name": "org.jfree.chart.labels.CustomXYToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/CustomXYToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.CustomXYToolTipGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8636030004670141362L; ",
        "begin_line": 66,
        "end_line": 66,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.CustomXYToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/CustomXYToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.CustomXYToolTipGenerator.toolTipSeries",
        "snippet": "    private List toolTipSeries = new java.util.ArrayList();",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Storage for the tooltip lists. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardCategoryToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardCategoryToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.StandardCategoryToolTipGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6768806592218710764L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardCategoryToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardCategoryToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.StandardCategoryToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT_STRING",
        "snippet": "    public static final String DEFAULT_TOOL_TIP_FORMAT_STRING \n        = \"({0}, {1}) = {2}\";",
        "begin_line": 63,
        "end_line": 64,
        "comment": " The default format string. "
    },
    {
        "class_name": "org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/BoxAndWhiskerToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6076837753823076334L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/BoxAndWhiskerToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT",
        "snippet": "    public static final String DEFAULT_TOOL_TIP_FORMAT \n        = \"X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} \";",
        "begin_line": 80,
        "end_line": 81,
        "comment": " The default tooltip format string. "
    },
    {
        "class_name": "org.jfree.chart.labels.BubbleXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/BubbleXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.BubbleXYItemLabelGenerator.serialVersionUID",
        "snippet": "    static final long serialVersionUID = -8458568928021240922L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.labels.BubbleXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/BubbleXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.BubbleXYItemLabelGenerator.DEFAULT_FORMAT_STRING",
        "snippet": "    public static final String DEFAULT_FORMAT_STRING = \"{3}\";",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The default item label format. "
    },
    {
        "class_name": "org.jfree.chart.labels.BubbleXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/BubbleXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.BubbleXYItemLabelGenerator.zFormat",
        "snippet": "    private NumberFormat zFormat;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " \r\n     * A number formatter for the z value - if this is <code>null</code>, then \r\n     * zDateFormat must be non-null. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.labels.BubbleXYItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/BubbleXYItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.BubbleXYItemLabelGenerator.zDateFormat",
        "snippet": "    private DateFormat zDateFormat;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " \r\n     * A date formatter for the z-value - if this is null, then zFormat must be \r\n     * non-null. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardPieToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2995304200445733779L;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardPieToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.DEFAULT_TOOLTIP_FORMAT",
        "snippet": "    public static final String DEFAULT_TOOLTIP_FORMAT = \"{0}: ({1}, {2})\";",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The default tooltip format. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7347703325267846275L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.labelFormat",
        "snippet": "    private String labelFormat;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The label format string. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.numberFormat",
        "snippet": "    private NumberFormat numberFormat;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " A number formatter for the value. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.percentFormat",
        "snippet": "    private NumberFormat percentFormat;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " A number formatter for the percentage. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4630760091523940820L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.DEFAULT_LABEL_FORMAT",
        "snippet": "    public static final String DEFAULT_LABEL_FORMAT = \"{0}\";",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The default item label format. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.formatPattern",
        "snippet": "    private String formatPattern;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The format pattern. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardXYZToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardXYZToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.StandardXYZToolTipGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2961577421889473503L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardXYZToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardXYZToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.StandardXYZToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT",
        "snippet": "    public static final String DEFAULT_TOOL_TIP_FORMAT = \"{0}: ({1}, {2}, {3})\";",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The default tooltip format. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardXYZToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardXYZToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.StandardXYZToolTipGenerator.zFormat",
        "snippet": "    private NumberFormat zFormat;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " \r\n     * A number formatter for the z value - if this is null, then zDateFormat \r\n     * must be non-null. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardXYZToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardXYZToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.StandardXYZToolTipGenerator.zDateFormat",
        "snippet": "    private DateFormat zDateFormat;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " \r\n     * A date formatter for the z-value - if this is null, then zFormat must be \r\n     * non-null. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.labels.MultipleXYSeriesLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/MultipleXYSeriesLabelGenerator.java",
        "signature": "org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 138976236941898560L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.MultipleXYSeriesLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/MultipleXYSeriesLabelGenerator.java",
        "signature": "org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.DEFAULT_LABEL_FORMAT",
        "snippet": "    public static final String DEFAULT_LABEL_FORMAT = \"{0}\";",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The default item label format. "
    },
    {
        "class_name": "org.jfree.chart.labels.MultipleXYSeriesLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/MultipleXYSeriesLabelGenerator.java",
        "signature": "org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.formatPattern",
        "snippet": "    private String formatPattern;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The format pattern for the initial part of the label. "
    },
    {
        "class_name": "org.jfree.chart.labels.MultipleXYSeriesLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/MultipleXYSeriesLabelGenerator.java",
        "signature": "org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.additionalFormatPattern",
        "snippet": "    private String additionalFormatPattern;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The format pattern for additional labels. "
    },
    {
        "class_name": "org.jfree.chart.labels.MultipleXYSeriesLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/MultipleXYSeriesLabelGenerator.java",
        "signature": "org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.seriesLabelLists",
        "snippet": "    private Map seriesLabelLists;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Storage for the additional series labels. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlock",
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "signature": "org.jfree.chart.text.TextBlock.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4333175719424385526L;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlock",
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "signature": "org.jfree.chart.text.TextBlock.lines",
        "snippet": "    private List lines;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Storage for the lines of text. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlock",
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "signature": "org.jfree.chart.text.TextBlock.lineAlignment",
        "snippet": "    private HorizontalAlignment lineAlignment;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The alignment of the lines. "
    },
    {
        "class_name": "org.jfree.chart.text.TextUtilities",
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "signature": "org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround",
        "snippet": "    private static boolean useDrawRotatedStringWorkaround;",
        "begin_line": 82,
        "end_line": 82,
        "comment": "\n     * A flag that controls whether or not the rotated string workaround is\n     * used.\n     "
    },
    {
        "class_name": "org.jfree.chart.text.TextUtilities",
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "signature": "org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds",
        "snippet": "    private static boolean useFontMetricsGetStringBounds;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n     * A flag that controls whether the FontMetrics.getStringBounds() method\n     * is used or a workaround is applied.\n     "
    },
    {
        "class_name": "org.jfree.chart.text.TextFragment",
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "signature": "org.jfree.chart.text.TextFragment.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4465945952903143262L;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.text.TextFragment",
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "signature": "org.jfree.chart.text.TextFragment.DEFAULT_FONT",
        "snippet": "    public static final Font DEFAULT_FONT = new Font(\"Serif\", Font.PLAIN, 12);",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The default font. "
    },
    {
        "class_name": "org.jfree.chart.text.TextFragment",
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "signature": "org.jfree.chart.text.TextFragment.DEFAULT_PAINT",
        "snippet": "    public static final Paint DEFAULT_PAINT = Color.black;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The default text color. "
    },
    {
        "class_name": "org.jfree.chart.text.TextFragment",
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "signature": "org.jfree.chart.text.TextFragment.text",
        "snippet": "    private String text;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The text. "
    },
    {
        "class_name": "org.jfree.chart.text.TextFragment",
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "signature": "org.jfree.chart.text.TextFragment.font",
        "snippet": "    private Font font;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The font. "
    },
    {
        "class_name": "org.jfree.chart.text.TextFragment",
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "signature": "org.jfree.chart.text.TextFragment.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The text color. "
    },
    {
        "class_name": "org.jfree.chart.text.TextFragment",
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "signature": "org.jfree.chart.text.TextFragment.baselineOffset",
        "snippet": "    private float baselineOffset;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " \n     * The baseline offset (can be used to simulate subscripts and \n     * superscripts). \n     "
    },
    {
        "class_name": "org.jfree.chart.text.G2TextMeasurer",
        "src_path": "source/org/jfree/chart/text/G2TextMeasurer.java",
        "signature": "org.jfree.chart.text.G2TextMeasurer.g2",
        "snippet": "    private Graphics2D g2;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The graphics device. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8219158940496719660L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.TOP_LEFT",
        "snippet": "    public static final TextAnchor TOP_LEFT = new TextAnchor(\n            \"TextAnchor.TOP_LEFT\");",
        "begin_line": 58,
        "end_line": 59,
        "comment": " Top/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.TOP_CENTER",
        "snippet": "    public static final TextAnchor TOP_CENTER = new TextAnchor(\n            \"TextAnchor.TOP_CENTER\");",
        "begin_line": 62,
        "end_line": 63,
        "comment": " Top/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.TOP_RIGHT",
        "snippet": "    public static final TextAnchor TOP_RIGHT = new TextAnchor(\n            \"TextAnchor.TOP_RIGHT\");",
        "begin_line": 66,
        "end_line": 67,
        "comment": " Top/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT",
        "snippet": "    public static final TextAnchor HALF_ASCENT_LEFT = new TextAnchor(\n            \"TextAnchor.HALF_ASCENT_LEFT\");",
        "begin_line": 70,
        "end_line": 71,
        "comment": " Half-ascent/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER",
        "snippet": "    public static final TextAnchor HALF_ASCENT_CENTER = new TextAnchor(\n            \"TextAnchor.HALF_ASCENT_CENTER\");",
        "begin_line": 74,
        "end_line": 75,
        "comment": " Half-ascent/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT",
        "snippet": "    public static final TextAnchor HALF_ASCENT_RIGHT = new TextAnchor(\n            \"TextAnchor.HALF_ASCENT_RIGHT\");",
        "begin_line": 78,
        "end_line": 79,
        "comment": " Half-ascent/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.CENTER_LEFT",
        "snippet": "    public static final TextAnchor CENTER_LEFT = new TextAnchor(\n            \"TextAnchor.CENTER_LEFT\");",
        "begin_line": 82,
        "end_line": 83,
        "comment": " Middle/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.CENTER",
        "snippet": "    public static final TextAnchor CENTER = new TextAnchor(\"TextAnchor.CENTER\");",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Middle/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.CENTER_RIGHT",
        "snippet": "    public static final TextAnchor CENTER_RIGHT = new TextAnchor(\n            \"TextAnchor.CENTER_RIGHT\");",
        "begin_line": 89,
        "end_line": 90,
        "comment": " Middle/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.BASELINE_LEFT",
        "snippet": "    public static final TextAnchor BASELINE_LEFT = new TextAnchor(\n            \"TextAnchor.BASELINE_LEFT\");",
        "begin_line": 93,
        "end_line": 94,
        "comment": " Baseline/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.BASELINE_CENTER",
        "snippet": "    public static final TextAnchor BASELINE_CENTER = new TextAnchor(\n            \"TextAnchor.BASELINE_CENTER\");",
        "begin_line": 97,
        "end_line": 98,
        "comment": " Baseline/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.BASELINE_RIGHT",
        "snippet": "    public static final TextAnchor BASELINE_RIGHT = new TextAnchor(\n            \"TextAnchor.BASELINE_RIGHT\");",
        "begin_line": 101,
        "end_line": 102,
        "comment": " Baseline/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.BOTTOM_LEFT",
        "snippet": "    public static final TextAnchor BOTTOM_LEFT = new TextAnchor(\n            \"TextAnchor.BOTTOM_LEFT\");",
        "begin_line": 105,
        "end_line": 106,
        "comment": " Bottom/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.BOTTOM_CENTER",
        "snippet": "    public static final TextAnchor BOTTOM_CENTER = new TextAnchor(\n            \"TextAnchor.BOTTOM_CENTER\");",
        "begin_line": 109,
        "end_line": 110,
        "comment": " Bottom/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT",
        "snippet": "    public static final TextAnchor BOTTOM_RIGHT = new TextAnchor(\n            \"TextAnchor.BOTTOM_RIGHT\");",
        "begin_line": 113,
        "end_line": 114,
        "comment": " Bottom/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.name",
        "snippet": "    private String name;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBox",
        "src_path": "source/org/jfree/chart/text/TextBox.java",
        "signature": "org.jfree.chart.text.TextBox.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3360220213180203706L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBox",
        "src_path": "source/org/jfree/chart/text/TextBox.java",
        "signature": "org.jfree.chart.text.TextBox.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " The outline paint. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBox",
        "src_path": "source/org/jfree/chart/text/TextBox.java",
        "signature": "org.jfree.chart.text.TextBox.outlineStroke",
        "snippet": "    private transient Stroke outlineStroke;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBox",
        "src_path": "source/org/jfree/chart/text/TextBox.java",
        "signature": "org.jfree.chart.text.TextBox.interiorGap",
        "snippet": "    private RectangleInsets interiorGap;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The interior space. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBox",
        "src_path": "source/org/jfree/chart/text/TextBox.java",
        "signature": "org.jfree.chart.text.TextBox.backgroundPaint",
        "snippet": "    private transient Paint backgroundPaint;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The background paint. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBox",
        "src_path": "source/org/jfree/chart/text/TextBox.java",
        "signature": "org.jfree.chart.text.TextBox.shadowPaint",
        "snippet": "    private transient Paint shadowPaint;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The shadow paint. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBox",
        "src_path": "source/org/jfree/chart/text/TextBox.java",
        "signature": "org.jfree.chart.text.TextBox.shadowXOffset",
        "snippet": "    private double shadowXOffset = 2.0;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The shadow x-offset. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBox",
        "src_path": "source/org/jfree/chart/text/TextBox.java",
        "signature": "org.jfree.chart.text.TextBox.shadowYOffset",
        "snippet": "    private double shadowYOffset = 2.0;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The shadow y-offset. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBox",
        "src_path": "source/org/jfree/chart/text/TextBox.java",
        "signature": "org.jfree.chart.text.TextBox.textBlock",
        "snippet": "    private TextBlock textBlock;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The text block. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3045058380983401544L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.TOP_LEFT",
        "snippet": "    public static final TextBlockAnchor TOP_LEFT \n            = new TextBlockAnchor(\"TextBlockAnchor.TOP_LEFT\");",
        "begin_line": 57,
        "end_line": 58,
        "comment": " Top/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.TOP_CENTER",
        "snippet": "    public static final TextBlockAnchor TOP_CENTER = new TextBlockAnchor(\n            \"TextBlockAnchor.TOP_CENTER\");",
        "begin_line": 61,
        "end_line": 62,
        "comment": " Top/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT",
        "snippet": "    public static final TextBlockAnchor TOP_RIGHT = new TextBlockAnchor(\n           \"TextBlockAnchor.TOP_RIGHT\");",
        "begin_line": 65,
        "end_line": 66,
        "comment": " Top/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT",
        "snippet": "    public static final TextBlockAnchor CENTER_LEFT = new TextBlockAnchor(\n            \"TextBlockAnchor.CENTER_LEFT\");",
        "begin_line": 69,
        "end_line": 70,
        "comment": " Middle/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.CENTER",
        "snippet": "    public static final TextBlockAnchor CENTER = new TextBlockAnchor(\n            \"TextBlockAnchor.CENTER\");",
        "begin_line": 73,
        "end_line": 74,
        "comment": " Middle/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT",
        "snippet": "    public static final TextBlockAnchor CENTER_RIGHT = new TextBlockAnchor(\n            \"TextBlockAnchor.CENTER_RIGHT\");",
        "begin_line": 77,
        "end_line": 78,
        "comment": " Middle/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT",
        "snippet": "    public static final TextBlockAnchor BOTTOM_LEFT \n        = new TextBlockAnchor(\"TextBlockAnchor.BOTTOM_LEFT\");",
        "begin_line": 81,
        "end_line": 82,
        "comment": " Bottom/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER",
        "snippet": "    public static final TextBlockAnchor BOTTOM_CENTER \n            = new TextBlockAnchor(\"TextBlockAnchor.BOTTOM_CENTER\");",
        "begin_line": 85,
        "end_line": 86,
        "comment": " Bottom/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT",
        "snippet": "    public static final TextBlockAnchor BOTTOM_RIGHT \n            = new TextBlockAnchor(\"TextBlockAnchor.BOTTOM_RIGHT\");",
        "begin_line": 89,
        "end_line": 90,
        "comment": " Bottom/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.name",
        "snippet": "    private String name;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.text.TextLine",
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "signature": "org.jfree.chart.text.TextLine.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7100085690160465444L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.text.TextLine",
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "signature": "org.jfree.chart.text.TextLine.fragments",
        "snippet": "    private List fragments;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Storage for the text fragments that make up the line. "
    },
    {
        "class_name": "org.jfree.chart.block.LengthConstraintType",
        "src_path": "source/org/jfree/chart/block/LengthConstraintType.java",
        "signature": "org.jfree.chart.block.LengthConstraintType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1156658804028142978L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.LengthConstraintType",
        "src_path": "source/org/jfree/chart/block/LengthConstraintType.java",
        "signature": "org.jfree.chart.block.LengthConstraintType.NONE",
        "snippet": "    public static final LengthConstraintType NONE \n        = new LengthConstraintType(\"LengthConstraintType.NONE\");",
        "begin_line": 55,
        "end_line": 56,
        "comment": " NONE. "
    },
    {
        "class_name": "org.jfree.chart.block.LengthConstraintType",
        "src_path": "source/org/jfree/chart/block/LengthConstraintType.java",
        "signature": "org.jfree.chart.block.LengthConstraintType.RANGE",
        "snippet": "    public static final LengthConstraintType RANGE \n        = new LengthConstraintType(\"RectangleConstraintType.RANGE\");",
        "begin_line": 59,
        "end_line": 60,
        "comment": " Range. "
    },
    {
        "class_name": "org.jfree.chart.block.LengthConstraintType",
        "src_path": "source/org/jfree/chart/block/LengthConstraintType.java",
        "signature": "org.jfree.chart.block.LengthConstraintType.FIXED",
        "snippet": "    public static final LengthConstraintType FIXED \n        = new LengthConstraintType(\"LengthConstraintType.FIXED\");",
        "begin_line": 63,
        "end_line": 64,
        "comment": " FIXED. "
    },
    {
        "class_name": "org.jfree.chart.block.LengthConstraintType",
        "src_path": "source/org/jfree/chart/block/LengthConstraintType.java",
        "signature": "org.jfree.chart.block.LengthConstraintType.name",
        "snippet": "    private String name;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "signature": "org.jfree.chart.block.RectangleConstraint.NONE",
        "snippet": "    public static final RectangleConstraint NONE = new RectangleConstraint(\n        0.0, null, LengthConstraintType.NONE, \n        0.0, null, LengthConstraintType.NONE\n    );",
        "begin_line": 60,
        "end_line": 63,
        "comment": "\r\n     * An instance representing no constraint. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "signature": "org.jfree.chart.block.RectangleConstraint.width",
        "snippet": "    private double width;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The width. "
    },
    {
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "signature": "org.jfree.chart.block.RectangleConstraint.widthRange",
        "snippet": "    private Range widthRange;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The width range. "
    },
    {
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "signature": "org.jfree.chart.block.RectangleConstraint.widthConstraintType",
        "snippet": "    private LengthConstraintType widthConstraintType;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The width constraint type. "
    },
    {
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "signature": "org.jfree.chart.block.RectangleConstraint.height",
        "snippet": "    private double height;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The fixed or maximum height. "
    },
    {
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "signature": "org.jfree.chart.block.RectangleConstraint.heightRange",
        "snippet": "    private Range heightRange;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "signature": "org.jfree.chart.block.RectangleConstraint.heightConstraintType",
        "snippet": "    private LengthConstraintType heightConstraintType;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The constraint type. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockParams",
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "signature": "org.jfree.chart.block.BlockParams.generateEntities",
        "snippet": "    private boolean generateEntities;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " \r\n     * A flag that controls whether or not the block should generate and \r\n     * return chart entities for the items it draws.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.BlockParams",
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "signature": "org.jfree.chart.block.BlockParams.translateX",
        "snippet": "    private double translateX;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " \r\n     * The x-translation (used to enable chart entities to use global \r\n     * coordinates rather than coordinates that are local to the container\r\n     * they are within).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.BlockParams",
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "signature": "org.jfree.chart.block.BlockParams.translateY",
        "snippet": "    private double translateY;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " \r\n     * The y-translation (used to enable chart entities to use global \r\n     * coordinates rather than coordinates that are local to the container\r\n     * they are within).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.BlockResult",
        "src_path": "source/org/jfree/chart/block/BlockResult.java",
        "signature": "org.jfree.chart.block.BlockResult.entities",
        "snippet": "    private EntityCollection entities;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " The entities from the block. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockContainer",
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "signature": "org.jfree.chart.block.BlockContainer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8199508075695195293L;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockContainer",
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "signature": "org.jfree.chart.block.BlockContainer.blocks",
        "snippet": "    private List blocks;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The blocks within the container. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockContainer",
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "signature": "org.jfree.chart.block.BlockContainer.arrangement",
        "snippet": "    private Arrangement arrangement;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The object responsible for laying out the blocks. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockBorder",
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "signature": "org.jfree.chart.block.BlockBorder.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4961579220410228283L;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockBorder",
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "signature": "org.jfree.chart.block.BlockBorder.NONE",
        "snippet": "    public static final BlockBorder NONE = new BlockBorder(\n            RectangleInsets.ZERO_INSETS, Color.white);",
        "begin_line": 71,
        "end_line": 72,
        "comment": " An empty border. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockBorder",
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "signature": "org.jfree.chart.block.BlockBorder.insets",
        "snippet": "    private RectangleInsets insets;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The space reserved for the border. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockBorder",
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "signature": "org.jfree.chart.block.BlockBorder.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The border color. "
    },
    {
        "class_name": "org.jfree.chart.block.LineBorder",
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "signature": "org.jfree.chart.block.LineBorder.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The line color. "
    },
    {
        "class_name": "org.jfree.chart.block.LineBorder",
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "signature": "org.jfree.chart.block.LineBorder.stroke",
        "snippet": "    private transient Stroke stroke;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The line stroke. "
    },
    {
        "class_name": "org.jfree.chart.block.LineBorder",
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "signature": "org.jfree.chart.block.LineBorder.insets",
        "snippet": "    private RectangleInsets insets;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The insets. "
    },
    {
        "class_name": "org.jfree.chart.block.LabelBlock",
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "signature": "org.jfree.chart.block.LabelBlock.text",
        "snippet": "    private String text;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " \r\n     * The text for the label - retained in case the label needs \r\n     * regenerating (for example, to change the font). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.LabelBlock",
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "signature": "org.jfree.chart.block.LabelBlock.label",
        "snippet": "    private TextBlock label;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The label. "
    },
    {
        "class_name": "org.jfree.chart.block.LabelBlock",
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "signature": "org.jfree.chart.block.LabelBlock.font",
        "snippet": "    private Font font;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The font. "
    },
    {
        "class_name": "org.jfree.chart.block.LabelBlock",
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "signature": "org.jfree.chart.block.LabelBlock.toolTipText",
        "snippet": "    private String toolTipText;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " The tool tip text (can be <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.block.LabelBlock",
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "signature": "org.jfree.chart.block.LabelBlock.urlText",
        "snippet": "    private String urlText;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " The URL text (can be <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.block.LabelBlock",
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "signature": "org.jfree.chart.block.LabelBlock.DEFAULT_PAINT",
        "snippet": "    public static final Paint DEFAULT_PAINT = Color.black;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The default color. "
    },
    {
        "class_name": "org.jfree.chart.block.LabelBlock",
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "signature": "org.jfree.chart.block.LabelBlock.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " The paint. "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7689852412141274563L;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.id",
        "snippet": "    private String id;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The id for the block. "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.margin",
        "snippet": "    private RectangleInsets margin;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The margin around the outside of the block. "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.frame",
        "snippet": "    private BlockFrame frame;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The frame (or border) for the block. "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.padding",
        "snippet": "    private RectangleInsets padding;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The padding between the block content and the border. "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.width",
        "snippet": "    private double width;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " \r\n     * The natural width of the block (may be overridden if there are \r\n     * constraints in sizing).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.height",
        "snippet": "    private double height;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " \r\n     * The natural height of the block (may be overridden if there are \r\n     * constraints in sizing).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.bounds",
        "snippet": "    private transient Rectangle2D bounds;",
        "begin_line": 104,
        "end_line": 104,
        "comment": "\r\n     * The current bounds for the block (position of the block in Java2D space).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "signature": "org.jfree.chart.block.ColumnArrangement.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5315388482898581555L;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "signature": "org.jfree.chart.block.ColumnArrangement.horizontalAlignment",
        "snippet": "    private HorizontalAlignment horizontalAlignment;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The horizontal alignment of blocks. "
    },
    {
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "signature": "org.jfree.chart.block.ColumnArrangement.verticalAlignment",
        "snippet": "    private VerticalAlignment verticalAlignment;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The vertical alignment of blocks within each row. "
    },
    {
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "signature": "org.jfree.chart.block.ColumnArrangement.horizontalGap",
        "snippet": "    private double horizontalGap;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The horizontal gap between columns. "
    },
    {
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "signature": "org.jfree.chart.block.ColumnArrangement.verticalGap",
        "snippet": "    private double verticalGap;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The vertical gap between items in a column. "
    },
    {
        "class_name": "org.jfree.chart.block.ColorBlock",
        "src_path": "source/org/jfree/chart/block/ColorBlock.java",
        "signature": "org.jfree.chart.block.ColorBlock.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The paint. "
    },
    {
        "class_name": "org.jfree.chart.block.EmptyBlock",
        "src_path": "source/org/jfree/chart/block/EmptyBlock.java",
        "signature": "org.jfree.chart.block.EmptyBlock.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4083197869412648579L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.GridArrangement",
        "src_path": "source/org/jfree/chart/block/GridArrangement.java",
        "signature": "org.jfree.chart.block.GridArrangement.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2563758090144655938L;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.GridArrangement",
        "src_path": "source/org/jfree/chart/block/GridArrangement.java",
        "signature": "org.jfree.chart.block.GridArrangement.rows",
        "snippet": "    private int rows;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The rows. "
    },
    {
        "class_name": "org.jfree.chart.block.GridArrangement",
        "src_path": "source/org/jfree/chart/block/GridArrangement.java",
        "signature": "org.jfree.chart.block.GridArrangement.columns",
        "snippet": "    private int columns;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The columns. "
    },
    {
        "class_name": "org.jfree.chart.block.CenterArrangement",
        "src_path": "source/org/jfree/chart/block/CenterArrangement.java",
        "signature": "org.jfree.chart.block.CenterArrangement.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -353308149220382047L; ",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "signature": "org.jfree.chart.block.BorderArrangement.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 506071142274883745L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "signature": "org.jfree.chart.block.BorderArrangement.centerBlock",
        "snippet": "    private Block centerBlock;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The block (if any) at the center of the layout. "
    },
    {
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "signature": "org.jfree.chart.block.BorderArrangement.topBlock",
        "snippet": "    private Block topBlock;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The block (if any) at the top of the layout. "
    },
    {
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "signature": "org.jfree.chart.block.BorderArrangement.bottomBlock",
        "snippet": "    private Block bottomBlock;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The block (if any) at the bottom of the layout. "
    },
    {
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "signature": "org.jfree.chart.block.BorderArrangement.leftBlock",
        "snippet": "    private Block leftBlock;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The block (if any) at the left of the layout. "
    },
    {
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "signature": "org.jfree.chart.block.BorderArrangement.rightBlock",
        "snippet": "    private Block rightBlock;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The block (if any) at the right of the layout. "
    },
    {
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "signature": "org.jfree.chart.block.FlowArrangement.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4543632485478613800L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "signature": "org.jfree.chart.block.FlowArrangement.horizontalAlignment",
        "snippet": "    private HorizontalAlignment horizontalAlignment;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The horizontal alignment of blocks. "
    },
    {
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "signature": "org.jfree.chart.block.FlowArrangement.verticalAlignment",
        "snippet": "    private VerticalAlignment verticalAlignment;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The vertical alignment of blocks within each row. "
    },
    {
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "signature": "org.jfree.chart.block.FlowArrangement.horizontalGap",
        "snippet": "    private double horizontalGap;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The horizontal gap between items within rows. "
    },
    {
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "signature": "org.jfree.chart.block.FlowArrangement.verticalGap",
        "snippet": "    private double verticalGap;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The vertical gap between rows. "
    },
    {
        "class_name": "org.jfree.chart.imagemap.DynamicDriveToolTipTagFragmentGenerator",
        "src_path": "source/org/jfree/chart/imagemap/DynamicDriveToolTipTagFragmentGenerator.java",
        "signature": "org.jfree.chart.imagemap.DynamicDriveToolTipTagFragmentGenerator.title",
        "snippet": "    protected String title = \"\";",
        "begin_line": 50,
        "end_line": 50,
        "comment": " The title, empty string not to display "
    },
    {
        "class_name": "org.jfree.chart.imagemap.DynamicDriveToolTipTagFragmentGenerator",
        "src_path": "source/org/jfree/chart/imagemap/DynamicDriveToolTipTagFragmentGenerator.java",
        "signature": "org.jfree.chart.imagemap.DynamicDriveToolTipTagFragmentGenerator.style",
        "snippet": "    protected int style = 1;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The style number "
    },
    {
        "class_name": "org.jfree.chart.servlet.ServletUtilities",
        "src_path": "source/org/jfree/chart/servlet/ServletUtilities.java",
        "signature": "org.jfree.chart.servlet.ServletUtilities.tempFilePrefix",
        "snippet": "    private static String tempFilePrefix = \"jfreechart-\";",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The filename prefix. "
    },
    {
        "class_name": "org.jfree.chart.servlet.ServletUtilities",
        "src_path": "source/org/jfree/chart/servlet/ServletUtilities.java",
        "signature": "org.jfree.chart.servlet.ServletUtilities.tempOneTimeFilePrefix",
        "snippet": "    private static String tempOneTimeFilePrefix = \"jfreechart-onetime-\";",
        "begin_line": 87,
        "end_line": 87,
        "comment": " A prefix for \"one time\" charts. "
    },
    {
        "class_name": "org.jfree.chart.servlet.ChartDeleter",
        "src_path": "source/org/jfree/chart/servlet/ChartDeleter.java",
        "signature": "org.jfree.chart.servlet.ChartDeleter.chartNames",
        "snippet": "    private List chartNames = new java.util.ArrayList();",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The chart names. "
    },
    {
        "class_name": "org.jfree.chart.resources.JFreeChartResources",
        "src_path": "source/org/jfree/chart/resources/JFreeChartResources.java",
        "signature": "org.jfree.chart.resources.JFreeChartResources.CONTENTS",
        "snippet": "    private static final Object[][] CONTENTS = {\n        {\"project.name\",      \"JFreeChart\"},\n        {\"project.version\",   \"1.2.0-pre\"},\n        {\"project.info\",      \"http://www.jfree.org/jfreechart/index.html\"},\n        {\"project.copyright\", \n         \"(C)opyright 2000-2007, by Object Refinery Limited and Contributors\"}\n    };",
        "begin_line": 56,
        "end_line": 62,
        "comment": " The resources to be localised. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "signature": "org.jfree.chart.event.ChartChangeEventType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5481917022435735602L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "signature": "org.jfree.chart.event.ChartChangeEventType.GENERAL",
        "snippet": "    public static final ChartChangeEventType GENERAL \n        = new ChartChangeEventType(\"ChartChangeEventType.GENERAL\");",
        "begin_line": 55,
        "end_line": 56,
        "comment": " GENERAL. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "signature": "org.jfree.chart.event.ChartChangeEventType.NEW_DATASET",
        "snippet": "    public static final ChartChangeEventType NEW_DATASET \n        = new ChartChangeEventType(\"ChartChangeEventType.NEW_DATASET\");",
        "begin_line": 59,
        "end_line": 60,
        "comment": " NEW_DATASET. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "signature": "org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED",
        "snippet": "    public static final ChartChangeEventType DATASET_UPDATED\n        = new ChartChangeEventType(\"ChartChangeEventType.DATASET_UPDATED\");",
        "begin_line": 63,
        "end_line": 64,
        "comment": " DATASET_UPDATED. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "signature": "org.jfree.chart.event.ChartChangeEventType.name",
        "snippet": "    private String name;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.event.AxisChangeEvent",
        "src_path": "source/org/jfree/chart/event/AxisChangeEvent.java",
        "signature": "org.jfree.chart.event.AxisChangeEvent.axis",
        "snippet": "    private Axis axis;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The axis that generated the change event. "
    },
    {
        "class_name": "org.jfree.chart.event.TitleChangeEvent",
        "src_path": "source/org/jfree/chart/event/TitleChangeEvent.java",
        "signature": "org.jfree.chart.event.TitleChangeEvent.title",
        "snippet": "    private Title title;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The chart title that generated the event. "
    },
    {
        "class_name": "org.jfree.chart.event.RendererChangeEvent",
        "src_path": "source/org/jfree/chart/event/RendererChangeEvent.java",
        "signature": "org.jfree.chart.event.RendererChangeEvent.renderer",
        "snippet": "    private Object renderer;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The renderer that generated the event. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "signature": "org.jfree.chart.event.ChartChangeEvent.type",
        "snippet": "    private ChartChangeEventType type;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The type of event. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "signature": "org.jfree.chart.event.ChartChangeEvent.chart",
        "snippet": "    private JFreeChart chart;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The chart that generated the event. "
    },
    {
        "class_name": "org.jfree.chart.event.MarkerChangeEvent",
        "src_path": "source/org/jfree/chart/event/MarkerChangeEvent.java",
        "signature": "org.jfree.chart.event.MarkerChangeEvent.marker",
        "snippet": "    private Marker marker;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The plot that generated the event. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartProgressEvent",
        "src_path": "source/org/jfree/chart/event/ChartProgressEvent.java",
        "signature": "org.jfree.chart.event.ChartProgressEvent.DRAWING_STARTED",
        "snippet": "    public static final int DRAWING_STARTED = 1;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Indicates drawing has started. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartProgressEvent",
        "src_path": "source/org/jfree/chart/event/ChartProgressEvent.java",
        "signature": "org.jfree.chart.event.ChartProgressEvent.DRAWING_FINISHED",
        "snippet": "    public static final int DRAWING_FINISHED = 2;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Indicates drawing has finished. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartProgressEvent",
        "src_path": "source/org/jfree/chart/event/ChartProgressEvent.java",
        "signature": "org.jfree.chart.event.ChartProgressEvent.type",
        "snippet": "    private int type;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The type of event. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartProgressEvent",
        "src_path": "source/org/jfree/chart/event/ChartProgressEvent.java",
        "signature": "org.jfree.chart.event.ChartProgressEvent.percent",
        "snippet": "    private int percent;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The percentage of completion. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartProgressEvent",
        "src_path": "source/org/jfree/chart/event/ChartProgressEvent.java",
        "signature": "org.jfree.chart.event.ChartProgressEvent.chart",
        "snippet": "    private JFreeChart chart;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The chart that generated the event. "
    },
    {
        "class_name": "org.jfree.chart.event.PlotChangeEvent",
        "src_path": "source/org/jfree/chart/event/PlotChangeEvent.java",
        "signature": "org.jfree.chart.event.PlotChangeEvent.plot",
        "snippet": "    private Plot plot;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The plot that generated the event. "
    },
    {
        "class_name": "org.jfree.chart.renderer.GrayPaintScale",
        "src_path": "source/org/jfree/chart/renderer/GrayPaintScale.java",
        "signature": "org.jfree.chart.renderer.GrayPaintScale.lowerBound",
        "snippet": "    private double lowerBound;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The lower bound. "
    },
    {
        "class_name": "org.jfree.chart.renderer.GrayPaintScale",
        "src_path": "source/org/jfree/chart/renderer/GrayPaintScale.java",
        "signature": "org.jfree.chart.renderer.GrayPaintScale.upperBound",
        "snippet": "    private double upperBound;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The upper bound. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -828267569428206075L;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.ZERO",
        "snippet": "    public static final Double ZERO = new Double(0.0);",
        "begin_line": 137,
        "end_line": 137,
        "comment": " Zero represented as a <code>Double</code>. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_PAINT",
        "snippet": "    public static final Paint DEFAULT_PAINT = Color.blue;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " The default paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT",
        "snippet": "    public static final Paint DEFAULT_OUTLINE_PAINT = Color.gray;",
        "begin_line": 143,
        "end_line": 143,
        "comment": " The default outline paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_STROKE",
        "snippet": "    public static final Stroke DEFAULT_STROKE = new BasicStroke(1.0f);",
        "begin_line": 146,
        "end_line": 146,
        "comment": " The default stroke. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE",
        "snippet": "    public static final Stroke DEFAULT_OUTLINE_STROKE = new BasicStroke(1.0f);",
        "begin_line": 149,
        "end_line": 149,
        "comment": " The default outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_SHAPE",
        "snippet": "    public static final Shape DEFAULT_SHAPE \n            = new Rectangle2D.Double(-3.0, -3.0, 6.0, 6.0);",
        "begin_line": 152,
        "end_line": 153,
        "comment": " The default shape. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_FONT",
        "snippet": "    public static final Font DEFAULT_VALUE_LABEL_FONT \n            = new Font(\"SansSerif\", Font.PLAIN, 10);",
        "begin_line": 156,
        "end_line": 157,
        "comment": " The default value label font. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT",
        "snippet": "    public static final Paint DEFAULT_VALUE_LABEL_PAINT = Color.black;",
        "begin_line": 160,
        "end_line": 160,
        "comment": " The default value label paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.seriesVisibleList",
        "snippet": "    private BooleanList seriesVisibleList;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " A list of flags that controls whether or not each series is visible. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseSeriesVisible",
        "snippet": "    private boolean baseSeriesVisible;",
        "begin_line": 166,
        "end_line": 166,
        "comment": " The default visibility for each series. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.seriesVisibleInLegendList",
        "snippet": "    private BooleanList seriesVisibleInLegendList;",
        "begin_line": 172,
        "end_line": 172,
        "comment": " \r\n     * A list of flags that controls whether or not each series is visible in \r\n     * the legend. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseSeriesVisibleInLegend",
        "snippet": "    private boolean baseSeriesVisibleInLegend;",
        "begin_line": 175,
        "end_line": 175,
        "comment": " The default visibility for each series in the legend. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.paintList",
        "snippet": "    private PaintList paintList;",
        "begin_line": 178,
        "end_line": 178,
        "comment": " The paint list. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesPaint",
        "snippet": "    private boolean autoPopulateSeriesPaint;",
        "begin_line": 186,
        "end_line": 186,
        "comment": "\r\n     * A flag that controls whether or not the paintList is auto-populated\r\n     * in the {@link #lookupSeriesPaint(int)} method.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.basePaint",
        "snippet": "    private transient Paint basePaint;",
        "begin_line": 189,
        "end_line": 189,
        "comment": " The base paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.fillPaintList",
        "snippet": "    private PaintList fillPaintList;",
        "begin_line": 192,
        "end_line": 192,
        "comment": " The fill paint list. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesFillPaint",
        "snippet": "    private boolean autoPopulateSeriesFillPaint;",
        "begin_line": 200,
        "end_line": 200,
        "comment": "\r\n     * A flag that controls whether or not the fillPaintList is auto-populated\r\n     * in the {@link #lookupSeriesFillPaint(int)} method.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseFillPaint",
        "snippet": "    private transient Paint baseFillPaint;",
        "begin_line": 203,
        "end_line": 203,
        "comment": " The base fill paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.outlinePaintList",
        "snippet": "    private PaintList outlinePaintList;",
        "begin_line": 206,
        "end_line": 206,
        "comment": " The outline paint list. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesOutlinePaint",
        "snippet": "    private boolean autoPopulateSeriesOutlinePaint;",
        "begin_line": 214,
        "end_line": 214,
        "comment": "\r\n     * A flag that controls whether or not the outlinePaintList is auto-populated\r\n     * in the {@link #lookupSeriesOutlinePaint(int)} method.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseOutlinePaint",
        "snippet": "    private transient Paint baseOutlinePaint;",
        "begin_line": 217,
        "end_line": 217,
        "comment": " The base outline paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.strokeList",
        "snippet": "    private StrokeList strokeList;",
        "begin_line": 220,
        "end_line": 220,
        "comment": " The stroke list. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesStroke",
        "snippet": "    private boolean autoPopulateSeriesStroke;",
        "begin_line": 228,
        "end_line": 228,
        "comment": "\r\n     * A flag that controls whether or not the strokeList is auto-populated\r\n     * in the {@link #lookupSeriesStroke(int)} method.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseStroke",
        "snippet": "    private transient Stroke baseStroke;",
        "begin_line": 231,
        "end_line": 231,
        "comment": " The base stroke. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.outlineStrokeList",
        "snippet": "    private StrokeList outlineStrokeList;",
        "begin_line": 234,
        "end_line": 234,
        "comment": " The outline stroke list. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseOutlineStroke",
        "snippet": "    private transient Stroke baseOutlineStroke;",
        "begin_line": 237,
        "end_line": 237,
        "comment": " The base outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesOutlineStroke",
        "snippet": "    private boolean autoPopulateSeriesOutlineStroke;",
        "begin_line": 245,
        "end_line": 245,
        "comment": "\r\n     * A flag that controls whether or not the outlineStrokeList is \r\n     * auto-populated in the {@link #lookupSeriesOutlineStroke(int)} method.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.shapeList",
        "snippet": "    private ShapeList shapeList;",
        "begin_line": 248,
        "end_line": 248,
        "comment": " A shape list. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesShape",
        "snippet": "    private boolean autoPopulateSeriesShape;",
        "begin_line": 256,
        "end_line": 256,
        "comment": "\r\n     * A flag that controls whether or not the shapeList is auto-populated\r\n     * in the {@link #lookupSeriesShape(int)} method.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseShape",
        "snippet": "    private transient Shape baseShape;",
        "begin_line": 259,
        "end_line": 259,
        "comment": " The base shape. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.itemLabelsVisibleList",
        "snippet": "    private BooleanList itemLabelsVisibleList;",
        "begin_line": 262,
        "end_line": 262,
        "comment": " Visibility of the item labels PER series. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseItemLabelsVisible",
        "snippet": "    private boolean baseItemLabelsVisible;",
        "begin_line": 265,
        "end_line": 265,
        "comment": " The base item labels visible. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.itemLabelFontList",
        "snippet": "    private ObjectList itemLabelFontList;",
        "begin_line": 268,
        "end_line": 268,
        "comment": " The item label font list (one font per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseItemLabelFont",
        "snippet": "    private Font baseItemLabelFont;",
        "begin_line": 271,
        "end_line": 271,
        "comment": " The base item label font. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.itemLabelPaintList",
        "snippet": "    private PaintList itemLabelPaintList;",
        "begin_line": 274,
        "end_line": 274,
        "comment": " The item label paint list (one paint per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseItemLabelPaint",
        "snippet": "    private transient Paint baseItemLabelPaint;",
        "begin_line": 277,
        "end_line": 277,
        "comment": " The base item label paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.positiveItemLabelPositionList",
        "snippet": "    private ObjectList positiveItemLabelPositionList;",
        "begin_line": 280,
        "end_line": 280,
        "comment": " The positive item label position (per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.basePositiveItemLabelPosition",
        "snippet": "    private ItemLabelPosition basePositiveItemLabelPosition;",
        "begin_line": 283,
        "end_line": 283,
        "comment": " The fallback positive item label position. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.negativeItemLabelPositionList",
        "snippet": "    private ObjectList negativeItemLabelPositionList;",
        "begin_line": 286,
        "end_line": 286,
        "comment": " The negative item label position (per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseNegativeItemLabelPosition",
        "snippet": "    private ItemLabelPosition baseNegativeItemLabelPosition;",
        "begin_line": 289,
        "end_line": 289,
        "comment": " The fallback negative item label position. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.itemLabelAnchorOffset",
        "snippet": "    private double itemLabelAnchorOffset = 2.0;",
        "begin_line": 292,
        "end_line": 292,
        "comment": " The item label anchor offset. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.createEntitiesList",
        "snippet": "    private BooleanList createEntitiesList;",
        "begin_line": 298,
        "end_line": 298,
        "comment": " \r\n     * Flags that control whether or not entities are generated for each \r\n     * series.  This will be overridden by 'createEntities'. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseCreateEntities",
        "snippet": "    private boolean baseCreateEntities;",
        "begin_line": 304,
        "end_line": 304,
        "comment": "\r\n     * The default flag that controls whether or not entities are generated.\r\n     * This flag is used when both the above flags return null. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.listenerList",
        "snippet": "    private transient EventListenerList listenerList;",
        "begin_line": 307,
        "end_line": 307,
        "comment": " Storage for registered change listeners. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.event",
        "snippet": "    private transient RendererChangeEvent event;",
        "begin_line": 310,
        "end_line": 310,
        "comment": " An event for re-use. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.ADJ",
        "snippet": "    private static final double ADJ = Math.cos(Math.PI / 6.0);",
        "begin_line": 2252,
        "end_line": 2252,
        "comment": " The adjacent offset. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.OPP",
        "snippet": "    private static final double OPP = Math.sin(Math.PI / 6.0);",
        "begin_line": 2255,
        "end_line": 2255,
        "comment": " The opposite offset. "
    },
    {
        "class_name": "org.jfree.chart.renderer.PaintItem",
        "src_path": "source/org/jfree/chart/renderer/LookupPaintScale.java",
        "signature": "org.jfree.chart.renderer.PaintItem.value",
        "snippet": "        double value;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The value. "
    },
    {
        "class_name": "org.jfree.chart.renderer.PaintItem",
        "src_path": "source/org/jfree/chart/renderer/LookupPaintScale.java",
        "signature": "org.jfree.chart.renderer.PaintItem.paint",
        "snippet": "        transient Paint paint;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.LookupPaintScale",
        "src_path": "source/org/jfree/chart/renderer/LookupPaintScale.java",
        "signature": "org.jfree.chart.renderer.LookupPaintScale.lowerBound",
        "snippet": "    private double lowerBound;",
        "begin_line": 160,
        "end_line": 160,
        "comment": " The lower bound. "
    },
    {
        "class_name": "org.jfree.chart.renderer.LookupPaintScale",
        "src_path": "source/org/jfree/chart/renderer/LookupPaintScale.java",
        "signature": "org.jfree.chart.renderer.LookupPaintScale.upperBound",
        "snippet": "    private double upperBound;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " The upper bound. "
    },
    {
        "class_name": "org.jfree.chart.renderer.LookupPaintScale",
        "src_path": "source/org/jfree/chart/renderer/LookupPaintScale.java",
        "signature": "org.jfree.chart.renderer.LookupPaintScale.defaultPaint",
        "snippet": "    private transient Paint defaultPaint; ",
        "begin_line": 166,
        "end_line": 166,
        "comment": " The default paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.LookupPaintScale",
        "src_path": "source/org/jfree/chart/renderer/LookupPaintScale.java",
        "signature": "org.jfree.chart.renderer.LookupPaintScale.lookupTable",
        "snippet": "    private List lookupTable;",
        "begin_line": 169,
        "end_line": 169,
        "comment": " The lookup table. "
    },
    {
        "class_name": "org.jfree.chart.renderer.WaferMapRenderer",
        "src_path": "source/org/jfree/chart/renderer/WaferMapRenderer.java",
        "signature": "org.jfree.chart.renderer.WaferMapRenderer.paintIndex",
        "snippet": "    private Map paintIndex;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " paint index "
    },
    {
        "class_name": "org.jfree.chart.renderer.WaferMapRenderer",
        "src_path": "source/org/jfree/chart/renderer/WaferMapRenderer.java",
        "signature": "org.jfree.chart.renderer.WaferMapRenderer.plot",
        "snippet": "    private WaferMapPlot plot;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " plot "
    },
    {
        "class_name": "org.jfree.chart.renderer.WaferMapRenderer",
        "src_path": "source/org/jfree/chart/renderer/WaferMapRenderer.java",
        "signature": "org.jfree.chart.renderer.WaferMapRenderer.paintLimit",
        "snippet": "    private int paintLimit;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " paint limit "
    },
    {
        "class_name": "org.jfree.chart.renderer.WaferMapRenderer",
        "src_path": "source/org/jfree/chart/renderer/WaferMapRenderer.java",
        "signature": "org.jfree.chart.renderer.WaferMapRenderer.DEFAULT_PAINT_LIMIT",
        "snippet": "    private static final int DEFAULT_PAINT_LIMIT = 35;  ",
        "begin_line": 79,
        "end_line": 79,
        "comment": " default paint limit "
    },
    {
        "class_name": "org.jfree.chart.renderer.WaferMapRenderer",
        "src_path": "source/org/jfree/chart/renderer/WaferMapRenderer.java",
        "signature": "org.jfree.chart.renderer.WaferMapRenderer.POSITION_INDEX",
        "snippet": "    public static final int POSITION_INDEX = 0;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " default multivalue paint calculation "
    },
    {
        "class_name": "org.jfree.chart.renderer.WaferMapRenderer",
        "src_path": "source/org/jfree/chart/renderer/WaferMapRenderer.java",
        "signature": "org.jfree.chart.renderer.WaferMapRenderer.VALUE_INDEX",
        "snippet": "    public static final int VALUE_INDEX = 1;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The default value index. "
    },
    {
        "class_name": "org.jfree.chart.renderer.WaferMapRenderer",
        "src_path": "source/org/jfree/chart/renderer/WaferMapRenderer.java",
        "signature": "org.jfree.chart.renderer.WaferMapRenderer.paintIndexMethod",
        "snippet": "    private int paintIndexMethod;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " paint index method "
    },
    {
        "class_name": "org.jfree.chart.renderer.Outlier",
        "src_path": "source/org/jfree/chart/renderer/Outlier.java",
        "signature": "org.jfree.chart.renderer.Outlier.point",
        "snippet": "    private Point2D point;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " \r\n     * The xy coordinates of the bounding box containing the outlier ellipse. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.Outlier",
        "src_path": "source/org/jfree/chart/renderer/Outlier.java",
        "signature": "org.jfree.chart.renderer.Outlier.radius",
        "snippet": "    private double radius;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The radius of the ellipse "
    },
    {
        "class_name": "org.jfree.chart.renderer.RendererState",
        "src_path": "source/org/jfree/chart/renderer/RendererState.java",
        "signature": "org.jfree.chart.renderer.RendererState.info",
        "snippet": "    private PlotRenderingInfo info;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The plot rendering info. "
    },
    {
        "class_name": "org.jfree.chart.renderer.OutlierList",
        "src_path": "source/org/jfree/chart/renderer/OutlierList.java",
        "signature": "org.jfree.chart.renderer.OutlierList.outliers",
        "snippet": "    private List outliers;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Storage for the outliers. "
    },
    {
        "class_name": "org.jfree.chart.renderer.OutlierList",
        "src_path": "source/org/jfree/chart/renderer/OutlierList.java",
        "signature": "org.jfree.chart.renderer.OutlierList.averagedOutlier",
        "snippet": "    private Outlier averagedOutlier;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The averaged outlier. "
    },
    {
        "class_name": "org.jfree.chart.renderer.OutlierList",
        "src_path": "source/org/jfree/chart/renderer/OutlierList.java",
        "signature": "org.jfree.chart.renderer.OutlierList.multiple",
        "snippet": "    private boolean multiple = false;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " \r\n     * A flag that indicates whether or not there are multiple outliers in the \r\n     * list. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.OutlierListCollection",
        "src_path": "source/org/jfree/chart/renderer/OutlierListCollection.java",
        "signature": "org.jfree.chart.renderer.OutlierListCollection.outlierLists",
        "snippet": "    private List outlierLists;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Storage for the outlier lists. "
    },
    {
        "class_name": "org.jfree.chart.renderer.OutlierListCollection",
        "src_path": "source/org/jfree/chart/renderer/OutlierListCollection.java",
        "signature": "org.jfree.chart.renderer.OutlierListCollection.highFarOut",
        "snippet": "    private boolean highFarOut = false;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " \r\n     * Unbelievably, outliers which are more than 2 * interquartile range are\r\n     * called far outs...  See Tukey EDA  (a classic one of a kind...)\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.OutlierListCollection",
        "src_path": "source/org/jfree/chart/renderer/OutlierListCollection.java",
        "signature": "org.jfree.chart.renderer.OutlierListCollection.lowFarOut",
        "snippet": "    private boolean lowFarOut = false;",
        "begin_line": 76,
        "end_line": 76,
        "comment": "\r\n     * A flag that indicates whether or not the collection contains low far \r\n     * out values.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AreaRendererEndType",
        "src_path": "source/org/jfree/chart/renderer/AreaRendererEndType.java",
        "signature": "org.jfree.chart.renderer.AreaRendererEndType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1774146392916359839L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AreaRendererEndType",
        "src_path": "source/org/jfree/chart/renderer/AreaRendererEndType.java",
        "signature": "org.jfree.chart.renderer.AreaRendererEndType.TAPER",
        "snippet": "    public static final AreaRendererEndType TAPER = new AreaRendererEndType(\n        \"AreaRendererEndType.TAPER\"\n    );",
        "begin_line": 57,
        "end_line": 59,
        "comment": " \r\n     * The area tapers from the first or last value down to zero. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AreaRendererEndType",
        "src_path": "source/org/jfree/chart/renderer/AreaRendererEndType.java",
        "signature": "org.jfree.chart.renderer.AreaRendererEndType.TRUNCATE",
        "snippet": "    public static final AreaRendererEndType TRUNCATE = new AreaRendererEndType(\n        \"AreaRendererEndType.TRUNCATE\"\n    );",
        "begin_line": 64,
        "end_line": 66,
        "comment": " \r\n     * The area is truncated at the first or last value. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AreaRendererEndType",
        "src_path": "source/org/jfree/chart/renderer/AreaRendererEndType.java",
        "signature": "org.jfree.chart.renderer.AreaRendererEndType.LEVEL",
        "snippet": "    public static final AreaRendererEndType LEVEL = new AreaRendererEndType(\n        \"AreaRendererEndType.LEVEL\"\n    );",
        "begin_line": 71,
        "end_line": 73,
        "comment": " \r\n     * The area is levelled at the first or last value. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AreaRendererEndType",
        "src_path": "source/org/jfree/chart/renderer/AreaRendererEndType.java",
        "signature": "org.jfree.chart.renderer.AreaRendererEndType.name",
        "snippet": "    private String name;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.renderer.DefaultPolarItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/DefaultPolarItemRenderer.java",
        "signature": "org.jfree.chart.renderer.DefaultPolarItemRenderer.plot",
        "snippet": "    private PolarPlot plot;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " The plot that the renderer is assigned to. "
    },
    {
        "class_name": "org.jfree.chart.renderer.DefaultPolarItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/DefaultPolarItemRenderer.java",
        "signature": "org.jfree.chart.renderer.DefaultPolarItemRenderer.seriesFilled",
        "snippet": "    private BooleanList seriesFilled;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Flags that control whether the renderer fills each series or not. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StatisticalBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StatisticalBarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4986038395414039117L;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StatisticalBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StatisticalBarRenderer.errorIndicatorPaint",
        "snippet": "    private transient Paint errorIndicatorPaint;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " The paint used to show the error indicator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StatisticalBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StatisticalBarRenderer.errorIndicatorStroke",
        "snippet": "    private transient Stroke errorIndicatorStroke;",
        "begin_line": 107,
        "end_line": 107,
        "comment": "\r\n     * The stroke used to draw the error indicator. \r\n     * \r\n     * @since 1.2.0\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer.serialVersionUID",
        "snippet": "    static final long serialVersionUID = 6402943811500067531L;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer.renderAsPercentages",
        "snippet": "    private boolean renderAsPercentages;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " A flag that controls whether the bars display values or percentages. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.CategoryItemRendererState",
        "src_path": "source/org/jfree/chart/renderer/category/CategoryItemRendererState.java",
        "signature": "org.jfree.chart.renderer.category.CategoryItemRendererState.barWidth",
        "snippet": "    private double barWidth;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The bar width. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.CategoryItemRendererState",
        "src_path": "source/org/jfree/chart/renderer/category/CategoryItemRendererState.java",
        "signature": "org.jfree.chart.renderer.category.CategoryItemRendererState.seriesRunningTotal",
        "snippet": "    private double seriesRunningTotal;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The series running total. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer3D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5832945916493247123L;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer3D.renderAsPercentages",
        "snippet": "    private boolean renderAsPercentages;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " A flag that controls whether the bars display values or percentages. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer3D.ignoreZeroValues",
        "snippet": "    private boolean ignoreZeroValues;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " \r\n     * A flag that controls whether or not zero values are drawn by the\r\n     * renderer.\r\n     * \r\n     * @since 1.2.0\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LevelRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LevelRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LevelRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8204856624355025117L;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LevelRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LevelRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LevelRenderer.DEFAULT_ITEM_MARGIN",
        "snippet": "    public static final double DEFAULT_ITEM_MARGIN = 0.20;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The default item margin percentage. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LevelRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LevelRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LevelRenderer.itemMargin",
        "snippet": "    private double itemMargin;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The margin between items within a category. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LevelRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LevelRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LevelRenderer.maxItemWidth",
        "snippet": "    private double maxItemWidth;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The maximum item width as a percentage of the available space. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AreaRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AreaRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4231878281385812757L;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AreaRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AreaRenderer.endType",
        "snippet": "    private AreaRendererEndType endType;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " A flag that controls how the ends of the areas are drawn. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5467931468380928736L;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.DEFAULT_X_OFFSET",
        "snippet": "    public static final double DEFAULT_X_OFFSET = 12.0;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " The default x-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.DEFAULT_Y_OFFSET",
        "snippet": "    public static final double DEFAULT_Y_OFFSET = 8.0;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " The default y-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.DEFAULT_WALL_PAINT",
        "snippet": "    public static final Paint DEFAULT_WALL_PAINT = new Color(0xDD, 0xDD, 0xDD);",
        "begin_line": 103,
        "end_line": 103,
        "comment": " The default wall paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.xOffset",
        "snippet": "    private double xOffset;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " The size of x-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.yOffset",
        "snippet": "    private double yOffset;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " The size of y-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.wallPaint",
        "snippet": "    private transient Paint wallPaint;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " The paint used to shade the left and lower 3D wall. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1247553218442497391L;",
        "begin_line": 167,
        "end_line": 167,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.plot",
        "snippet": "    private CategoryPlot plot;",
        "begin_line": 170,
        "end_line": 170,
        "comment": " The plot that the renderer is assigned to. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.itemLabelGeneratorList",
        "snippet": "    private ObjectList itemLabelGeneratorList;",
        "begin_line": 173,
        "end_line": 173,
        "comment": " A list of item label generators (one per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.baseItemLabelGenerator",
        "snippet": "    private CategoryItemLabelGenerator baseItemLabelGenerator;",
        "begin_line": 176,
        "end_line": 176,
        "comment": " The base item label generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.toolTipGeneratorList",
        "snippet": "    private ObjectList toolTipGeneratorList;",
        "begin_line": 179,
        "end_line": 179,
        "comment": " A list of tool tip generators (one per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.baseToolTipGenerator",
        "snippet": "    private CategoryToolTipGenerator baseToolTipGenerator;",
        "begin_line": 182,
        "end_line": 182,
        "comment": " The base tool tip generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.urlGeneratorList",
        "snippet": "    private ObjectList urlGeneratorList;",
        "begin_line": 185,
        "end_line": 185,
        "comment": " A list of label generators (one per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.baseURLGenerator",
        "snippet": "    private CategoryURLGenerator baseURLGenerator;",
        "begin_line": 188,
        "end_line": 188,
        "comment": " The base label generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.legendItemLabelGenerator",
        "snippet": "    private CategorySeriesLabelGenerator legendItemLabelGenerator;",
        "begin_line": 191,
        "end_line": 191,
        "comment": " The legend item label generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.legendItemToolTipGenerator",
        "snippet": "    private CategorySeriesLabelGenerator legendItemToolTipGenerator;",
        "begin_line": 194,
        "end_line": 194,
        "comment": " The legend item tool tip generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.legendItemURLGenerator",
        "snippet": "    private CategorySeriesLabelGenerator legendItemURLGenerator;",
        "begin_line": 197,
        "end_line": 197,
        "comment": " The legend item URL generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.backgroundAnnotations",
        "snippet": "    private List backgroundAnnotations;",
        "begin_line": 205,
        "end_line": 205,
        "comment": "\r\n     * Annotations to be drawn in the background layer ('underneath' the data\r\n     * items).\r\n     * \r\n     * @since 1.2.0\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.foregroundAnnotations",
        "snippet": "    private List foregroundAnnotations;",
        "begin_line": 213,
        "end_line": 213,
        "comment": "\r\n     * Annotations to be drawn in the foreground layer ('on top' of the data\r\n     * items).\r\n     * \r\n     * @since 1.2.0\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.rowCount",
        "snippet": "    private transient int rowCount;",
        "begin_line": 216,
        "end_line": 216,
        "comment": " The number of rows in the dataset (temporary record). "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.columnCount",
        "snippet": "    private transient int columnCount;",
        "begin_line": 219,
        "end_line": 219,
        "comment": " The number of columns in the dataset (temporary record). "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7686976503536003636L;",
        "begin_line": 151,
        "end_line": 151,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.DEFAULT_X_OFFSET",
        "snippet": "    public static final double DEFAULT_X_OFFSET = 12.0;",
        "begin_line": 154,
        "end_line": 154,
        "comment": " The default x-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.DEFAULT_Y_OFFSET",
        "snippet": "    public static final double DEFAULT_Y_OFFSET = 8.0;",
        "begin_line": 157,
        "end_line": 157,
        "comment": " The default y-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.DEFAULT_WALL_PAINT",
        "snippet": "    public static final Paint DEFAULT_WALL_PAINT = new Color(0xDD, 0xDD, 0xDD);",
        "begin_line": 160,
        "end_line": 160,
        "comment": " The default wall paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.xOffset",
        "snippet": "    private double xOffset;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " The size of x-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.yOffset",
        "snippet": "    private double yOffset;",
        "begin_line": 166,
        "end_line": 166,
        "comment": " The size of y-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.wallPaint",
        "snippet": "    private transient Paint wallPaint;",
        "begin_line": 169,
        "end_line": 169,
        "comment": " The paint used to shade the left and lower 3D wall. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -197749519869226398L;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.seriesLinesVisible",
        "snippet": "    private BooleanList seriesLinesVisible;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " \r\n     * A table of flags that control (per series) whether or not lines are \r\n     * visible. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.baseLinesVisible",
        "snippet": "    private boolean baseLinesVisible;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " \r\n     * A flag indicating whether or not lines are drawn between non-null \r\n     * points. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.seriesShapesVisible",
        "snippet": "    private BooleanList seriesShapesVisible;",
        "begin_line": 144,
        "end_line": 144,
        "comment": " \r\n     * A table of flags that control (per series) whether or not shapes are \r\n     * visible. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.baseShapesVisible",
        "snippet": "    private boolean baseShapesVisible;",
        "begin_line": 147,
        "end_line": 147,
        "comment": " The default value returned by the getShapeVisible() method. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.seriesShapesFilled",
        "snippet": "    private BooleanList seriesShapesFilled;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " \r\n     * A table of flags that control (per series) whether or not shapes are \r\n     * filled. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.baseShapesFilled",
        "snippet": "    private boolean baseShapesFilled;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " The default value returned by the getShapeFilled() method. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.useFillPaint",
        "snippet": "    private boolean useFillPaint;",
        "begin_line": 162,
        "end_line": 162,
        "comment": " \r\n     * A flag that controls whether the fill paint is used for filling \r\n     * shapes. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.drawOutlines",
        "snippet": "    private boolean drawOutlines;",
        "begin_line": 165,
        "end_line": 165,
        "comment": " A flag that controls whether outlines are drawn for shapes. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.useOutlinePaint",
        "snippet": "    private boolean useOutlinePaint;",
        "begin_line": 171,
        "end_line": 171,
        "comment": " \r\n     * A flag that controls whether the outline paint is used for drawing shape \r\n     * outlines - if not, the regular series paint is used. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.useSeriesOffset",
        "snippet": "    private boolean useSeriesOffset;",
        "begin_line": 179,
        "end_line": 179,
        "comment": "\r\n     * A flag that controls whether or not the x-position for each item is\r\n     * offset within the category according to the series.\r\n     * \r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.itemMargin",
        "snippet": "    private double itemMargin;",
        "begin_line": 187,
        "end_line": 187,
        "comment": "\r\n     * The item margin used for series offsetting - this allows the positioning\r\n     * to match the bar positions of the {@link BarRenderer} class.\r\n     * \r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.IntervalBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/IntervalBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.IntervalBarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5068857361615528725L;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LayeredBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LayeredBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LayeredBarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8716572894780469487L;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LayeredBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LayeredBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LayeredBarRenderer.seriesBarWidthList",
        "snippet": "    protected ObjectList seriesBarWidthList;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " A list of the width of each series bar. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 632027470694481177L;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.artifactPaint",
        "snippet": "    private transient Paint artifactPaint;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " The color used to paint the median line and average marker. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.fillBox",
        "snippet": "    private boolean fillBox;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " A flag that controls whether or not the box is filled. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.itemMargin",
        "snippet": "    private double itemMargin;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " The margin between items (boxes) within a category. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.maximumBarWidth",
        "snippet": "    private double maximumBarWidth;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " \r\n     * The maximum bar width as percentage of the available space in the plot,\r\n     * where 0.05 is five percent.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.ScatterRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/ScatterRenderer.java",
        "signature": "org.jfree.chart.renderer.category.ScatterRenderer.seriesShapesFilled",
        "snippet": "    private BooleanList seriesShapesFilled;",
        "begin_line": 83,
        "end_line": 83,
        "comment": "\n     * A table of flags that control (per series) whether or not shapes are\n     * filled.\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.ScatterRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/ScatterRenderer.java",
        "signature": "org.jfree.chart.renderer.category.ScatterRenderer.baseShapesFilled",
        "snippet": "    private boolean baseShapesFilled;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n     * The default value returned by the getShapeFilled() method.\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.ScatterRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/ScatterRenderer.java",
        "signature": "org.jfree.chart.renderer.category.ScatterRenderer.useFillPaint",
        "snippet": "    private boolean useFillPaint;",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\n     * A flag that controls whether the fill paint is used for filling\n     * shapes.\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.ScatterRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/ScatterRenderer.java",
        "signature": "org.jfree.chart.renderer.category.ScatterRenderer.drawOutlines",
        "snippet": "    private boolean drawOutlines;",
        "begin_line": 99,
        "end_line": 99,
        "comment": "\n     * A flag that controls whether outlines are drawn for shapes.\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.ScatterRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/ScatterRenderer.java",
        "signature": "org.jfree.chart.renderer.category.ScatterRenderer.useOutlinePaint",
        "snippet": "    private boolean useOutlinePaint;",
        "begin_line": 105,
        "end_line": 105,
        "comment": "\n     * A flag that controls whether the outline paint is used for drawing shape\n     * outlines - if not, the regular series paint is used.\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.ScatterRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/ScatterRenderer.java",
        "signature": "org.jfree.chart.renderer.category.ScatterRenderer.useSeriesOffset",
        "snippet": "    private boolean useSeriesOffset;",
        "begin_line": 111,
        "end_line": 111,
        "comment": "\n     * A flag that controls whether or not the x-position for each item is\n     * offset within the category according to the series.\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.ScatterRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/ScatterRenderer.java",
        "signature": "org.jfree.chart.renderer.category.ScatterRenderer.itemMargin",
        "snippet": "    private double itemMargin;",
        "begin_line": 117,
        "end_line": 117,
        "comment": "\n     * The item margin used for series offsetting - this allows the positioning\n     * to match the bar positions of the {@link BarRenderer} class.\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StackedAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StackedAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3595635038460823663L;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StackedAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StackedAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.renderAsPercentages",
        "snippet": "    private boolean renderAsPercentages;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " A flag that controls whether the areas display values or percentages. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3557517173697777579L;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.errorIndicatorPaint",
        "snippet": "    private transient Paint errorIndicatorPaint;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " The paint used to show the error indicator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.WaterfallBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/WaterfallBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.WaterfallBarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2482910643727230911L;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.WaterfallBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/WaterfallBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.WaterfallBarRenderer.firstBarPaint",
        "snippet": "    private transient Paint firstBarPaint;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " The paint used to draw the first bar. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.WaterfallBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/WaterfallBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.WaterfallBarRenderer.lastBarPaint",
        "snippet": "    private transient Paint lastBarPaint;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " The paint used to draw the last bar. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.WaterfallBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/WaterfallBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.WaterfallBarRenderer.positiveBarPaint",
        "snippet": "    private transient Paint positiveBarPaint;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " The paint used to draw bars having positive values. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.WaterfallBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/WaterfallBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.WaterfallBarRenderer.negativeBarPaint",
        "snippet": "    private transient Paint negativeBarPaint;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " The paint used to draw bars having negative values. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.DefaultCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/DefaultCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.DefaultCategoryItemRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7793786349384231896L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6000649414965887481L;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.DEFAULT_ITEM_MARGIN",
        "snippet": "    public static final double DEFAULT_ITEM_MARGIN = 0.20;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " The default item margin percentage. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD",
        "snippet": "    public static final double BAR_OUTLINE_WIDTH_THRESHOLD = 3.0;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " \r\n     * Constant that controls the minimum width before a bar has an outline \r\n     * drawn. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.itemMargin",
        "snippet": "    private double itemMargin;",
        "begin_line": 143,
        "end_line": 143,
        "comment": " The margin between items (bars) within a category. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.drawBarOutline",
        "snippet": "    private boolean drawBarOutline;",
        "begin_line": 146,
        "end_line": 146,
        "comment": " A flag that controls whether or not bar outlines are drawn. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.maximumBarWidth",
        "snippet": "    private double maximumBarWidth;",
        "begin_line": 149,
        "end_line": 149,
        "comment": " The maximum bar width as a percentage of the available space. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.minimumBarLength",
        "snippet": "    private double minimumBarLength;",
        "begin_line": 152,
        "end_line": 152,
        "comment": " The minimum bar length (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.gradientPaintTransformer",
        "snippet": "    private GradientPaintTransformer gradientPaintTransformer;",
        "begin_line": 158,
        "end_line": 158,
        "comment": " \r\n     * An optional class used to transform gradient paint objects to fit each \r\n     * bar. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.positiveItemLabelPositionFallback",
        "snippet": "    private ItemLabelPosition positiveItemLabelPositionFallback;",
        "begin_line": 164,
        "end_line": 164,
        "comment": " \r\n     * The fallback position if a positive item label doesn't fit inside the \r\n     * bar. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.negativeItemLabelPositionFallback",
        "snippet": "    private ItemLabelPosition negativeItemLabelPositionFallback;",
        "begin_line": 170,
        "end_line": 170,
        "comment": " \r\n     * The fallback position if a negative item label doesn't fit inside the \r\n     * bar. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.upperClip",
        "snippet": "    private double upperClip;  ",
        "begin_line": 173,
        "end_line": 173,
        "comment": " The upper clip (axis) value for the axis. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.lowerClip",
        "snippet": "    private double lowerClip;  ",
        "begin_line": 177,
        "end_line": 177,
        "comment": " The lower clip (axis) value for the axis. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.base",
        "snippet": "    private double base;",
        "begin_line": 181,
        "end_line": 181,
        "comment": " The base value for the bars (defaults to 0.0). "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.includeBaseInRange",
        "snippet": "    private boolean includeBaseInRange;",
        "begin_line": 187,
        "end_line": 187,
        "comment": " \r\n     * A flag that controls whether the base value is included in the range\r\n     * returned by the findRangeBounds() method.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.State",
        "src_path": "source/org/jfree/chart/renderer/category/CategoryStepRenderer.java",
        "signature": "org.jfree.chart.renderer.category.State.line",
        "snippet": "        public Line2D line;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " \r\n         * A working line for re-use to avoid creating large numbers of\r\n         * objects.\r\n         "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.CategoryStepRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/CategoryStepRenderer.java",
        "signature": "org.jfree.chart.renderer.category.CategoryStepRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5121079703118261470L;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.CategoryStepRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/CategoryStepRenderer.java",
        "signature": "org.jfree.chart.renderer.category.CategoryStepRenderer.STAGGER_WIDTH",
        "snippet": "    public static final int STAGGER_WIDTH = 5; // could make this configurable",
        "begin_line": 109,
        "end_line": 109,
        "comment": " could make this configurable"
    },
    {
        "class_name": "org.jfree.chart.renderer.category.CategoryStepRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/CategoryStepRenderer.java",
        "signature": "org.jfree.chart.renderer.category.CategoryStepRenderer.stagger",
        "snippet": "    private boolean stagger = false;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " \r\n     * A flag that controls whether or not the steps for multiple series are \r\n     * staggered. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.GanttRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/GanttRenderer.java",
        "signature": "org.jfree.chart.renderer.category.GanttRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4010349116350119512L;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.GanttRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/GanttRenderer.java",
        "signature": "org.jfree.chart.renderer.category.GanttRenderer.completePaint",
        "snippet": "    private transient Paint completePaint;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " The paint for displaying the percentage complete. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.GanttRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/GanttRenderer.java",
        "signature": "org.jfree.chart.renderer.category.GanttRenderer.incompletePaint",
        "snippet": "    private transient Paint incompletePaint;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " The paint for displaying the incomplete part of a task. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.GanttRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/GanttRenderer.java",
        "signature": "org.jfree.chart.renderer.category.GanttRenderer.startPercent",
        "snippet": "    private double startPercent;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " \r\n     * Controls the starting edge of the progress indicator (expressed as a \r\n     * percentage of the overall bar width).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.GanttRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/GanttRenderer.java",
        "signature": "org.jfree.chart.renderer.category.GanttRenderer.endPercent",
        "snippet": "    private double endPercent;",
        "begin_line": 104,
        "end_line": 104,
        "comment": "\r\n     * Controls the ending edge of the progress indicator (expressed as a \r\n     * percentage of the overall bar width). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2935615937671064911L;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.plotLines",
        "snippet": "    private boolean plotLines = false;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " A flag indicating whether or not lines are drawn between XY points. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.groupPaint",
        "snippet": "    private transient Paint groupPaint = Color.black;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " \r\n     * The paint of the line between the minimum value and the maximum value.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.groupStroke",
        "snippet": "    private transient Stroke groupStroke = new BasicStroke(1.0f);",
        "begin_line": 115,
        "end_line": 115,
        "comment": " \r\n     * The stroke of the line between the minimum value and the maximum value.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.minIcon",
        "snippet": "    private transient Icon minIcon = getIcon(new Arc2D.Double(-4, -4, 8, 8, 0,\n            360, Arc2D.OPEN), null, Color.black);",
        "begin_line": 118,
        "end_line": 119,
        "comment": " The icon used to indicate the minimum value."
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.maxIcon",
        "snippet": "    private transient Icon maxIcon = getIcon(new Arc2D.Double(-4, -4, 8, 8, 0,\n            360, Arc2D.OPEN), null, Color.black);",
        "begin_line": 122,
        "end_line": 123,
        "comment": " The icon used to indicate the maximum value."
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.objectIcon",
        "snippet": "    private transient Icon objectIcon = getIcon(new Line2D.Double(-4, 0, 4, 0),\n            false, true);",
        "begin_line": 126,
        "end_line": 127,
        "comment": " The icon used to indicate the values."
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.lastCategory",
        "snippet": "    private int lastCategory = -1;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The last category. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.min",
        "snippet": "    private double min;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " The minimum. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.max",
        "snippet": "    private double max;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " The maximum. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/GroupedStackedBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2725921399005922939L;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/GroupedStackedBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer.seriesToGroupMap",
        "snippet": "    private KeyToGroupMap seriesToGroupMap;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " A map used to assign each series to a group. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.HighLowRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/HighLowRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.HighLowRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8135673815876552516L;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.HighLowRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/HighLowRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.HighLowRenderer.drawOpenTicks",
        "snippet": "    private boolean drawOpenTicks;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " A flag that controls whether the open ticks are drawn. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.HighLowRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/HighLowRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.HighLowRenderer.drawCloseTicks",
        "snippet": "    private boolean drawCloseTicks;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " A flag that controls whether the close ticks are drawn. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.HighLowRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/HighLowRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.HighLowRenderer.openTickPaint",
        "snippet": "    private transient Paint openTickPaint;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " \r\n     * The paint used for the open ticks (if <code>null</code>, the series\r\n     * paint is used instead).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.HighLowRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/HighLowRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.HighLowRenderer.closeTickPaint",
        "snippet": "    private transient Paint closeTickPaint;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " \r\n     * The paint used for the close ticks (if <code>null</code>, the series\r\n     * paint is used instead).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.WindItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/WindItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.WindItemRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8078914101916976844L;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7435246895986425885L;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.seriesLinesVisible",
        "snippet": "    private BooleanList seriesLinesVisible;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " \r\n     * A table of flags that control (per series) whether or not lines are \r\n     * visible. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.baseLinesVisible",
        "snippet": "    private boolean baseLinesVisible;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " The default value returned by the getLinesVisible() method. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.legendLine",
        "snippet": "    private transient Shape legendLine;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " The shape that is used to represent a line in the legend. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.seriesShapesVisible",
        "snippet": "    private BooleanList seriesShapesVisible;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " \r\n     * A table of flags that control (per series) whether or not shapes are \r\n     * visible. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.baseShapesVisible",
        "snippet": "    private boolean baseShapesVisible;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " The default value returned by the getShapeVisible() method. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.seriesShapesFilled",
        "snippet": "    private BooleanList seriesShapesFilled;",
        "begin_line": 137,
        "end_line": 137,
        "comment": " \r\n     * A table of flags that control (per series) whether or not shapes are \r\n     * filled. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.baseShapesFilled",
        "snippet": "    private boolean baseShapesFilled;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " The default value returned by the getShapeFilled() method. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawOutlines",
        "snippet": "    private boolean drawOutlines;",
        "begin_line": 143,
        "end_line": 143,
        "comment": " A flag that controls whether outlines are drawn for shapes. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.useFillPaint",
        "snippet": "    private boolean useFillPaint;",
        "begin_line": 149,
        "end_line": 149,
        "comment": " \r\n     * A flag that controls whether the fill paint is used for filling \r\n     * shapes. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.useOutlinePaint",
        "snippet": "    private boolean useOutlinePaint;",
        "begin_line": 155,
        "end_line": 155,
        "comment": " \r\n     * A flag that controls whether the outline paint is used for drawing shape \r\n     * outlines. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawSeriesLineAsPath",
        "snippet": "    private boolean drawSeriesLineAsPath;",
        "begin_line": 161,
        "end_line": 161,
        "comment": " \r\n     * A flag that controls whether or not each series is drawn as a single \r\n     * path. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.State",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.State.seriesPath",
        "snippet": "        public GeneralPath seriesPath;",
        "begin_line": 619,
        "end_line": 619,
        "comment": " The path for the current series. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.State",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.State.lastPointGood",
        "snippet": "        private boolean lastPointGood;",
        "begin_line": 625,
        "end_line": 625,
        "comment": " \r\n         * A flag that indicates if the last (x, y) point was 'good' \r\n         * (non-null). \r\n         "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.State",
        "src_path": "source/org/jfree/chart/renderer/xy/DeviationRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.State.upperCoordinates",
        "snippet": "        public List upperCoordinates;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " \r\n         * A list of coordinates for the upper y-values in the current series \r\n         * (after translation into Java2D space).\r\n         "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.State",
        "src_path": "source/org/jfree/chart/renderer/xy/DeviationRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.State.lowerCoordinates",
        "snippet": "        public List lowerCoordinates;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " \r\n         * A list of coordinates for the lower y-values in the current series \r\n         * (after translation into Java2D space).\r\n         "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.DeviationRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/DeviationRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.DeviationRenderer.alpha",
        "snippet": "    private float alpha;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " The alpha transparency for the interval shading. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBubbleRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBubbleRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBubbleRenderer.serialVersionUID",
        "snippet": "    public static final long serialVersionUID = -5221991598674249125L;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBubbleRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBubbleRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBubbleRenderer.SCALE_ON_BOTH_AXES",
        "snippet": "    public static final int SCALE_ON_BOTH_AXES = 0;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " \r\n     * A constant to specify that the bubbles drawn by this renderer should be \r\n     * scaled on both axes (see {@link #XYBubbleRenderer(int)}). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBubbleRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBubbleRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS",
        "snippet": "    public static final int SCALE_ON_DOMAIN_AXIS = 1;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " \r\n     * A constant to specify that the bubbles drawn by this renderer should be \r\n     * scaled on the domain axis (see {@link #XYBubbleRenderer(int)}). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBubbleRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBubbleRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBubbleRenderer.SCALE_ON_RANGE_AXIS",
        "snippet": "    public static final int SCALE_ON_RANGE_AXIS = 2;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " \r\n     * A constant to specify that the bubbles drawn by this renderer should be \r\n     * scaled on the range axis (see {@link #XYBubbleRenderer(int)}). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBubbleRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBubbleRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBubbleRenderer.scaleType",
        "snippet": "    private int scaleType;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " Controls how the width and height of the bubble are scaled. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3271351259436865995L;",
        "begin_line": 157,
        "end_line": 157,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.SHAPES",
        "snippet": "    public static final int SHAPES = 1;",
        "begin_line": 160,
        "end_line": 160,
        "comment": " Constant for the type of rendering (shapes only). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.LINES",
        "snippet": "    public static final int LINES = 2;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " Constant for the type of rendering (lines only). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.SHAPES_AND_LINES",
        "snippet": "    public static final int SHAPES_AND_LINES = SHAPES | LINES;",
        "begin_line": 166,
        "end_line": 166,
        "comment": " Constant for the type of rendering (shapes and lines). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.IMAGES",
        "snippet": "    public static final int IMAGES = 4;",
        "begin_line": 169,
        "end_line": 169,
        "comment": " Constant for the type of rendering (images only). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.DISCONTINUOUS",
        "snippet": "    public static final int DISCONTINUOUS = 8;",
        "begin_line": 172,
        "end_line": 172,
        "comment": " Constant for the type of rendering (discontinuous lines). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.DISCONTINUOUS_LINES",
        "snippet": "    public static final int DISCONTINUOUS_LINES = LINES | DISCONTINUOUS;",
        "begin_line": 175,
        "end_line": 175,
        "comment": " Constant for the type of rendering (discontinuous lines). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.baseShapesVisible",
        "snippet": "    private boolean baseShapesVisible;",
        "begin_line": 178,
        "end_line": 178,
        "comment": " A flag indicating whether or not shapes are drawn at each XY point. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.plotLines",
        "snippet": "    private boolean plotLines;",
        "begin_line": 181,
        "end_line": 181,
        "comment": " A flag indicating whether or not lines are drawn between XY points. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.plotImages",
        "snippet": "    private boolean plotImages;",
        "begin_line": 184,
        "end_line": 184,
        "comment": " A flag indicating whether or not images are drawn between XY points. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.plotDiscontinuous",
        "snippet": "    private boolean plotDiscontinuous;",
        "begin_line": 187,
        "end_line": 187,
        "comment": " A flag controlling whether or not discontinuous lines are used. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.gapThresholdType",
        "snippet": "    private UnitType gapThresholdType = UnitType.RELATIVE;",
        "begin_line": 190,
        "end_line": 190,
        "comment": " Specifies how the gap threshold value is interpreted. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.gapThreshold",
        "snippet": "    private double gapThreshold = 1.0;",
        "begin_line": 193,
        "end_line": 193,
        "comment": " Threshold for deciding when to discontinue a line. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.seriesShapesFilled",
        "snippet": "    private BooleanList seriesShapesFilled;",
        "begin_line": 199,
        "end_line": 199,
        "comment": " \r\n     * A table of flags that control (per series) whether or not shapes are \r\n     * filled. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.baseShapesFilled",
        "snippet": "    private boolean baseShapesFilled;",
        "begin_line": 202,
        "end_line": 202,
        "comment": " The default value returned by the getShapeFilled() method. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.drawSeriesLineAsPath",
        "snippet": "    private boolean drawSeriesLineAsPath;",
        "begin_line": 208,
        "end_line": 208,
        "comment": " \r\n     * A flag that controls whether or not each series is drawn as a single \r\n     * path. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StandardXYItemRenderer.legendLine",
        "snippet": "    private transient Shape legendLine;",
        "begin_line": 214,
        "end_line": 214,
        "comment": " \r\n     * The shape that is used to represent a line in the legend. \r\n     * This should never be set to <code>null</code>. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.State",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.State.seriesPath",
        "snippet": "        public GeneralPath seriesPath;",
        "begin_line": 625,
        "end_line": 625,
        "comment": " The path for the current series. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.State",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.State.seriesIndex",
        "snippet": "        private int seriesIndex;",
        "begin_line": 628,
        "end_line": 628,
        "comment": " The series index. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.State",
        "src_path": "source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.State.lastPointGood",
        "snippet": "        private boolean lastPointGood;",
        "begin_line": 634,
        "end_line": 634,
        "comment": " \r\n         * A flag that indicates if the last (x, y) point was 'good' \r\n         * (non-null). \r\n         "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8020170108532232324L;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.boxWidth",
        "snippet": "    private double boxWidth;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " The box width. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.boxPaint",
        "snippet": "    private transient Paint boxPaint;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " The paint used to fill the box. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.fillBox",
        "snippet": "    private boolean fillBox;",
        "begin_line": 137,
        "end_line": 137,
        "comment": " A flag that controls whether or not the box is filled. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.artifactPaint",
        "snippet": "    private transient Paint artifactPaint = Color.black;",
        "begin_line": 143,
        "end_line": 143,
        "comment": " \r\n     * The paint used to draw various artifacts such as outliers, farout \r\n     * symbol, average ellipse and median line. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 50390395841817121L;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.WIDTHMETHOD_AVERAGE",
        "snippet": "    public static final int WIDTHMETHOD_AVERAGE = 0;",
        "begin_line": 137,
        "end_line": 137,
        "comment": " The average width method. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.WIDTHMETHOD_SMALLEST",
        "snippet": "    public static final int WIDTHMETHOD_SMALLEST = 1;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " The smallest width method. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.WIDTHMETHOD_INTERVALDATA",
        "snippet": "    public static final int WIDTHMETHOD_INTERVALDATA = 2;",
        "begin_line": 143,
        "end_line": 143,
        "comment": " The interval data method. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.autoWidthMethod",
        "snippet": "    private int autoWidthMethod = WIDTHMETHOD_AVERAGE;",
        "begin_line": 146,
        "end_line": 146,
        "comment": " The method of automatically calculating the candle width. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.autoWidthFactor",
        "snippet": "    private double autoWidthFactor = 4.5 / 7;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " \r\n     * The number (generally between 0.0 and 1.0) by which the available space \r\n     * automatically calculated for the candles will be multiplied to determine\r\n     * the actual width to use. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.autoWidthGap",
        "snippet": "    private double autoWidthGap = 0.0;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " The minimum gap between one candle and the next "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.candleWidth",
        "snippet": "    private double candleWidth;",
        "begin_line": 159,
        "end_line": 159,
        "comment": " The candle width. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.maxCandleWidthInMilliseconds",
        "snippet": "    private double maxCandleWidthInMilliseconds = 1000.0 * 60.0 * 60.0 * 20.0;",
        "begin_line": 162,
        "end_line": 162,
        "comment": " The maximum candlewidth in milliseconds. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.maxCandleWidth",
        "snippet": "    private double maxCandleWidth;",
        "begin_line": 165,
        "end_line": 165,
        "comment": " Temporary storage for the maximum candle width. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.upPaint",
        "snippet": "    private transient Paint upPaint;",
        "begin_line": 171,
        "end_line": 171,
        "comment": " \r\n     * The paint used to fill the candle when the price moved up from open to \r\n     * close. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.downPaint",
        "snippet": "    private transient Paint downPaint;",
        "begin_line": 177,
        "end_line": 177,
        "comment": " \r\n     * The paint used to fill the candle when the price moved down from open \r\n     * to close. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.drawVolume",
        "snippet": "    private boolean drawVolume;",
        "begin_line": 180,
        "end_line": 180,
        "comment": " A flag controlling whether or not volume bars are drawn on the chart. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.volumePaint",
        "snippet": "    private transient Paint volumePaint;",
        "begin_line": 188,
        "end_line": 188,
        "comment": " \r\n     * The paint used to fill the volume bars (if they are visible).  Once \r\n     * initialised, this field should never be set to <code>null</code>.\r\n     *\r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.maxVolume",
        "snippet": "    private transient double maxVolume;",
        "begin_line": 191,
        "end_line": 191,
        "comment": " Temporary storage for the maximum volume. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CandlestickRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CandlestickRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CandlestickRenderer.useOutlinePaint",
        "snippet": "    private boolean useOutlinePaint;",
        "begin_line": 200,
        "end_line": 200,
        "comment": " \r\n     * A flag that controls whether or not the renderer's outline paint is\r\n     * used to draw the outline of the candlestick.  The default value is\r\n     * <code>false</code> to avoid a change of behaviour for existing code.\r\n     * \r\n     * @since 1.0.5\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.VectorRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/VectorRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.VectorRenderer.baseLength",
        "snippet": "    private double baseLength = 0.10;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The length of the base. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.VectorRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/VectorRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.VectorRenderer.headLength",
        "snippet": "    private double headLength = 0.14;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The length of the head. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.CyclicXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/CyclicXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.CyclicXYItemRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4035912243303764892L;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.OverwriteDataSet",
        "src_path": "source/org/jfree/chart/renderer/xy/CyclicXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.OverwriteDataSet.delegateSet",
        "snippet": "        protected XYDataset delegateSet;",
        "begin_line": 333,
        "end_line": 333,
        "comment": " The delegate dataset. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.OverwriteDataSet",
        "src_path": "source/org/jfree/chart/renderer/xy/CyclicXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.OverwriteDataSet.x",
        "snippet": "        Double[] x, y;",
        "begin_line": 336,
        "end_line": 336,
        "comment": " Storage for the x and y values. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.OverwriteDataSet",
        "src_path": "source/org/jfree/chart/renderer/xy/CyclicXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.OverwriteDataSet.y",
        "snippet": "        Double[] x, y;",
        "begin_line": 336,
        "end_line": 336,
        "comment": " Storage for the x and y values. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBarRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 770559577251370036L;",
        "begin_line": 146,
        "end_line": 146,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBarRendererState",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBarRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBarRendererState.g2Base",
        "snippet": "        private double g2Base;",
        "begin_line": 154,
        "end_line": 154,
        "comment": " Base for bars against the range axis, in Java 2D space. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBarRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.base",
        "snippet": "    private double base;",
        "begin_line": 185,
        "end_line": 185,
        "comment": " The default base value for the bars. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBarRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.useYInterval",
        "snippet": "    private boolean useYInterval;",
        "begin_line": 191,
        "end_line": 191,
        "comment": " \r\n     * A flag that controls whether the bars use the y-interval supplied by the \r\n     * dataset. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBarRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.margin",
        "snippet": "    private double margin;",
        "begin_line": 194,
        "end_line": 194,
        "comment": " Percentage margin (to reduce the width of bars). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBarRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.drawBarOutline",
        "snippet": "    private boolean drawBarOutline;",
        "begin_line": 197,
        "end_line": 197,
        "comment": " A flag that controls whether or not bar outlines are drawn. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBarRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.gradientPaintTransformer",
        "snippet": "    private GradientPaintTransformer gradientPaintTransformer; ",
        "begin_line": 203,
        "end_line": 203,
        "comment": " \r\n     * An optional class used to transform gradient paint objects to fit each \r\n     * bar. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBarRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.legendBar",
        "snippet": "    private transient Shape legendBar;",
        "begin_line": 209,
        "end_line": 209,
        "comment": " \r\n     * The shape used to represent a bar in each legend item (this should never\r\n     * be <code>null</code>). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBarRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.positiveItemLabelPositionFallback",
        "snippet": "    private ItemLabelPosition positiveItemLabelPositionFallback;",
        "begin_line": 215,
        "end_line": 215,
        "comment": " \r\n     * The fallback position if a positive item label doesn't fit inside the \r\n     * bar. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBarRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.negativeItemLabelPositionFallback",
        "snippet": "    private ItemLabelPosition negativeItemLabelPositionFallback;",
        "begin_line": 221,
        "end_line": 221,
        "comment": " \r\n     * The fallback position if a negative item label doesn't fit inside the \r\n     * bar. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYStepRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYStepRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYStepRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8918141928884796108L;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYStepRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYStepRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYStepRenderer.stepPoint",
        "snippet": "    private double stepPoint = 1.0d;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " \r\n     * The factor (from 0.0 to 1.0) that determines the position of the \r\n     * step.  \r\n     *\r\n     * @since 1.0.10. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYItemRendererState",
        "src_path": "source/org/jfree/chart/renderer/xy/XYItemRendererState.java",
        "signature": "org.jfree.chart.renderer.xy.XYItemRendererState.workingLine",
        "snippet": "    public Line2D workingLine;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " \r\n     * A line object that the renderer can reuse to save instantiating a lot \r\n     * of objects. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYItemRendererState",
        "src_path": "source/org/jfree/chart/renderer/xy/XYItemRendererState.java",
        "signature": "org.jfree.chart.renderer.xy.XYItemRendererState.processVisibleItemsOnly",
        "snippet": "    private boolean processVisibleItemsOnly;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " \r\n     * A flag that controls whether the plot should pass ALL data items to the\r\n     * renderer, or just the items that will be visible.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYSplineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer.points",
        "snippet": "    private Vector points;",
        "begin_line": 73,
        "end_line": 73,
        "comment": "\n     * To collect data points for later splining.\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYSplineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer.precision",
        "snippet": "    private int precision;",
        "begin_line": 78,
        "end_line": 78,
        "comment": "\n     * Resolution of splines (number of line segments between points)\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.ControlPoint",
        "src_path": "source/org/jfree/chart/renderer/xy/XYSplineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.ControlPoint.x",
        "snippet": "        public float x;",
        "begin_line": 325,
        "end_line": 325,
        "comment": " The x-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.ControlPoint",
        "src_path": "source/org/jfree/chart/renderer/xy/XYSplineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.ControlPoint.y",
        "snippet": "        public float y;",
        "begin_line": 328,
        "end_line": 328,
        "comment": " The y-coordinate. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.ClusteredXYBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/ClusteredXYBarRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5864462149177133147L;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.ClusteredXYBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/ClusteredXYBarRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.centerBarAtStartValue",
        "snippet": "    private boolean centerBarAtStartValue;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " Determines whether bar center should be interval start. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2",
        "src_path": "source/org/jfree/chart/renderer/xy/StackedXYAreaRenderer2.java",
        "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7752676509764539182L;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2",
        "src_path": "source/org/jfree/chart/renderer/xy/StackedXYAreaRenderer2.java",
        "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.roundXCoordinates",
        "snippet": "    private boolean roundXCoordinates;",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\r\n     * This flag controls whether or not the x-coordinates (in Java2D space) \r\n     * are rounded to integers.  When set to true, this can avoid the vertical\r\n     * striping that anti-aliasing can generate.  However, the rounding may not\r\n     * be appropriate for output in high resolution formats (for example, \r\n     * vector graphics formats such as SVG and PDF).\r\n     * \r\n     * @since 1.0.3\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.YIntervalRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/YIntervalRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.YIntervalRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2951586537224143260L;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYDifferenceRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYDifferenceRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8447915602375584857L;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYDifferenceRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYDifferenceRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.positivePaint",
        "snippet": "    private transient Paint positivePaint;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " The paint used to highlight positive differences (y(0) > y(1)). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYDifferenceRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYDifferenceRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.negativePaint",
        "snippet": "    private transient Paint negativePaint;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The paint used to highlight negative differences (y(0) < y(1)). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYDifferenceRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYDifferenceRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.shapesVisible",
        "snippet": "    private boolean shapesVisible;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " Display shapes at each point? "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYDifferenceRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYDifferenceRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.legendLine",
        "snippet": "    private transient Shape legendLine;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " The shape to display in the legend item. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYDifferenceRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYDifferenceRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYDifferenceRenderer.roundXCoordinates",
        "snippet": "    private boolean roundXCoordinates;",
        "begin_line": 147,
        "end_line": 147,
        "comment": "\r\n     * This flag controls whether or not the x-coordinates (in Java2D space) \r\n     * are rounded to integers.  When set to true, this can avoid the vertical\r\n     * striping that anti-aliasing can generate.  However, the rounding may not\r\n     * be appropriate for output in high resolution formats (for example, \r\n     * vector graphics formats such as SVG and PDF).\r\n     * \r\n     * @since 1.0.4\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StackedXYBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StackedXYBarRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StackedXYBarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7049101055533436444L;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StackedXYBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StackedXYBarRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StackedXYBarRenderer.renderAsPercentages",
        "snippet": "    private boolean renderAsPercentages;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " A flag that controls whether the bars display values or percentages. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLine3DRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLine3DRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLine3DRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 588933208243446087L;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLine3DRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLine3DRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLine3DRenderer.DEFAULT_X_OFFSET",
        "snippet": "    public static final double DEFAULT_X_OFFSET = 12.0;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The default x-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLine3DRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLine3DRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLine3DRenderer.DEFAULT_Y_OFFSET",
        "snippet": "    public static final double DEFAULT_Y_OFFSET = 8.0;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The default y-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLine3DRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLine3DRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLine3DRenderer.DEFAULT_WALL_PAINT",
        "snippet": "    public static final Paint DEFAULT_WALL_PAINT = new Color(0xDD, 0xDD, 0xDD);",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The default wall paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLine3DRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLine3DRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLine3DRenderer.xOffset",
        "snippet": "    private double xOffset;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The size of x-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLine3DRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLine3DRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLine3DRenderer.yOffset",
        "snippet": "    private double yOffset;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The size of y-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYLine3DRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYLine3DRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYLine3DRenderer.wallPaint",
        "snippet": "    private transient Paint wallPaint;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The paint used to shade the left and lower 3D wall. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4481971353973876747L;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRendererState",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRendererState.area",
        "snippet": "        public Polygon area;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " Working storage for the area under one series. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRendererState",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRendererState.line",
        "snippet": "        public Line2D line;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " Working line that can be recycled. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.SHAPES",
        "snippet": "    public static final int SHAPES = 1;",
        "begin_line": 151,
        "end_line": 151,
        "comment": " Useful constant for specifying the type of rendering (shapes only). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.LINES",
        "snippet": "    public static final int LINES = 2;",
        "begin_line": 154,
        "end_line": 154,
        "comment": " Useful constant for specifying the type of rendering (lines only). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.SHAPES_AND_LINES",
        "snippet": "    public static final int SHAPES_AND_LINES = 3;",
        "begin_line": 159,
        "end_line": 159,
        "comment": " \r\n     * Useful constant for specifying the type of rendering (shapes and lines).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.AREA",
        "snippet": "    public static final int AREA = 4;",
        "begin_line": 162,
        "end_line": 162,
        "comment": " Useful constant for specifying the type of rendering (area only). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.AREA_AND_SHAPES",
        "snippet": "    public static final int AREA_AND_SHAPES = 5;",
        "begin_line": 167,
        "end_line": 167,
        "comment": " \r\n     * Useful constant for specifying the type of rendering (area and shapes). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.plotShapes",
        "snippet": "    private boolean plotShapes;",
        "begin_line": 170,
        "end_line": 170,
        "comment": " A flag indicating whether or not shapes are drawn at each XY point. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.plotLines",
        "snippet": "    private boolean plotLines;",
        "begin_line": 173,
        "end_line": 173,
        "comment": " A flag indicating whether or not lines are drawn between XY points. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.plotArea",
        "snippet": "    private boolean plotArea;",
        "begin_line": 176,
        "end_line": 176,
        "comment": " A flag indicating whether or not Area are drawn at each XY point. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.showOutline",
        "snippet": "    private boolean showOutline;",
        "begin_line": 179,
        "end_line": 179,
        "comment": " A flag that controls whether or not the outline is shown. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.legendArea",
        "snippet": "    private transient Shape legendArea;",
        "begin_line": 185,
        "end_line": 185,
        "comment": " \r\n     * The shape used to represent an area in each legend item (this should \r\n     * never be <code>null</code>). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8019124836026607990L;",
        "begin_line": 174,
        "end_line": 174,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.plot",
        "snippet": "    private XYPlot plot;",
        "begin_line": 177,
        "end_line": 177,
        "comment": " The plot. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.itemLabelGeneratorList",
        "snippet": "    private ObjectList itemLabelGeneratorList;",
        "begin_line": 180,
        "end_line": 180,
        "comment": " A list of item label generators (one per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.baseItemLabelGenerator",
        "snippet": "    private XYItemLabelGenerator baseItemLabelGenerator;",
        "begin_line": 183,
        "end_line": 183,
        "comment": " The base item label generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.toolTipGeneratorList",
        "snippet": "    private ObjectList toolTipGeneratorList;",
        "begin_line": 186,
        "end_line": 186,
        "comment": " A list of tool tip generators (one per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.baseToolTipGenerator",
        "snippet": "    private XYToolTipGenerator baseToolTipGenerator;",
        "begin_line": 189,
        "end_line": 189,
        "comment": " The base tool tip generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.urlGeneratorList",
        "snippet": "    private ObjectList urlGeneratorList;",
        "begin_line": 192,
        "end_line": 192,
        "comment": " A list of URL generators (one per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.baseURLGenerator",
        "snippet": "    private XYURLGenerator baseURLGenerator;",
        "begin_line": 195,
        "end_line": 195,
        "comment": " The URL text generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.backgroundAnnotations",
        "snippet": "    private List backgroundAnnotations;",
        "begin_line": 201,
        "end_line": 201,
        "comment": "\r\n     * Annotations to be drawn in the background layer ('underneath' the data\r\n     * items).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.foregroundAnnotations",
        "snippet": "    private List foregroundAnnotations;",
        "begin_line": 207,
        "end_line": 207,
        "comment": "\r\n     * Annotations to be drawn in the foreground layer ('on top' of the data\r\n     * items).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.defaultEntityRadius",
        "snippet": "    private int defaultEntityRadius;",
        "begin_line": 210,
        "end_line": 210,
        "comment": " The default radius for the entity 'hotspot' "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.legendItemLabelGenerator",
        "snippet": "    private XYSeriesLabelGenerator legendItemLabelGenerator;",
        "begin_line": 213,
        "end_line": 213,
        "comment": " The legend item label generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.legendItemToolTipGenerator",
        "snippet": "    private XYSeriesLabelGenerator legendItemToolTipGenerator;",
        "begin_line": 216,
        "end_line": 216,
        "comment": " The legend item tool tip generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.legendItemURLGenerator",
        "snippet": "    private XYSeriesLabelGenerator legendItemURLGenerator;",
        "begin_line": 219,
        "end_line": 219,
        "comment": " The legend item URL generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBlockRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBlockRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBlockRenderer.blockWidth",
        "snippet": "    private double blockWidth = 1.0;",
        "begin_line": 83,
        "end_line": 83,
        "comment": "\r\n     * The block width (defaults to 1.0).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBlockRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBlockRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBlockRenderer.blockHeight",
        "snippet": "    private double blockHeight = 1.0;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\r\n     * The block height (defaults to 1.0).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBlockRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBlockRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBlockRenderer.blockAnchor",
        "snippet": "    private RectangleAnchor blockAnchor = RectangleAnchor.CENTER;",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\r\n     * The anchor point used to align each block to its (x, y) location.  The\r\n     * default value is <code>RectangleAnchor.CENTER</code>.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBlockRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBlockRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBlockRenderer.xOffset",
        "snippet": "    private double xOffset;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Temporary storage for the x-offset used to align the block anchor. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBlockRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBlockRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBlockRenderer.yOffset",
        "snippet": "    private double yOffset;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " Temporary storage for the y-offset used to align the block anchor. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYBlockRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYBlockRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYBlockRenderer.paintScale",
        "snippet": "    private PaintScale paintScale;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " The paint scale. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYErrorRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYErrorRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.drawXError",
        "snippet": "    private boolean drawXError;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " A flag that controls whether or not the x-error bars are drawn. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYErrorRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYErrorRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.drawYError",
        "snippet": "    private boolean drawYError;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " A flag that controls whether or not the y-error bars are drawn. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYErrorRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYErrorRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.capLength",
        "snippet": "    private double capLength;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The length of the cap at the end of the error bars. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYErrorRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYErrorRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.errorPaint",
        "snippet": "    private transient Paint errorPaint;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " \r\n     * The paint used to draw the error bars (if <code>null</code> we use the\r\n     * series paint).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYDotRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYDotRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYDotRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2764344339073566425L;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYDotRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYDotRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYDotRenderer.dotWidth",
        "snippet": "    private int dotWidth;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " The dot width. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYDotRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYDotRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYDotRenderer.dotHeight",
        "snippet": "    private int dotHeight;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " The dot height. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYDotRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYDotRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYDotRenderer.legendShape",
        "snippet": "    private transient Shape legendShape;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " \r\n     * The shape that is used to represent an item in the legend. \r\n     * \r\n     * @since 1.0.7\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.DefaultXYItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/DefaultXYItemRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.DefaultXYItemRenderer.serialVersionUID",
        "snippet": "    static final long serialVersionUID = 3450423530996888074L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StackedXYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5217394318178570889L;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StackedXYAreaRendererState",
        "src_path": "source/org/jfree/chart/renderer/xy/StackedXYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRendererState.seriesArea",
        "snippet": "        private Polygon seriesArea;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " The area for the current series. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StackedXYAreaRendererState",
        "src_path": "source/org/jfree/chart/renderer/xy/StackedXYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRendererState.line",
        "snippet": "        private Line2D line;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The line. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StackedXYAreaRendererState",
        "src_path": "source/org/jfree/chart/renderer/xy/StackedXYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRendererState.lastSeriesPoints",
        "snippet": "        private Stack lastSeriesPoints;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " The points from the last series. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StackedXYAreaRendererState",
        "src_path": "source/org/jfree/chart/renderer/xy/StackedXYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRendererState.currentSeriesPoints",
        "snippet": "        private Stack currentSeriesPoints;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " The points for the current series. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StackedXYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.shapePaint",
        "snippet": "    private transient Paint shapePaint = null;",
        "begin_line": 219,
        "end_line": 219,
        "comment": " \r\n     * Custom Paint for drawing all shapes, if null defaults to series shapes \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/StackedXYAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.StackedXYAreaRenderer.shapeStroke",
        "snippet": "    private transient Stroke shapeStroke = null;",
        "begin_line": 225,
        "end_line": 225,
        "comment": " \r\n     * Custom Stroke for drawing all shapes, if null defaults to series \r\n     * strokes.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7311560779702649635L;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.SHAPES",
        "snippet": "    public static final int SHAPES = 1;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " Useful constant for specifying the type of rendering (shapes only). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.AREA",
        "snippet": "    public static final int AREA = 2;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Useful constant for specifying the type of rendering (area only). "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.AREA_AND_SHAPES",
        "snippet": "    public static final int AREA_AND_SHAPES = 3;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " \r\n     * Useful constant for specifying the type of rendering (area and shapes). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.shapesVisible",
        "snippet": "    private boolean shapesVisible;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " A flag indicating whether or not shapes are drawn at each XY point. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.shapesFilled",
        "snippet": "    private boolean shapesFilled;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " A flag that controls whether or not shapes are filled for ALL series. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.plotArea",
        "snippet": "    private boolean plotArea;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " A flag indicating whether or not Area are drawn at each XY point. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.showOutline",
        "snippet": "    private boolean showOutline;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " A flag that controls whether or not the outline is shown. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.pArea",
        "snippet": "    protected transient Polygon pArea = null;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " Area of the complete series "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.rangeBase",
        "snippet": "    private double rangeBase;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " \r\n     * The value on the range axis which defines the 'lower' border of the \r\n     * area. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRenderer2",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer2.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer2.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7378069681579984133L;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRenderer2",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer2.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer2.showOutline",
        "snippet": "    private boolean showOutline;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " A flag that controls whether or not the outline is shown. "
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.XYAreaRenderer2",
        "src_path": "source/org/jfree/chart/renderer/xy/XYAreaRenderer2.java",
        "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer2.legendArea",
        "snippet": "    private transient Shape legendArea;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " \r\n     * The shape used to represent an area in each legend item (this should \r\n     * never be <code>null</code>). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.label",
        "snippet": "    private JTextField label;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The axis label. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.labelFont",
        "snippet": "    private Font labelFont;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The label font. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.labelPaintSample",
        "snippet": "    private PaintSample labelPaintSample;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The label paint. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.labelFontField",
        "snippet": "    private JTextField labelFontField;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " A field showing a description of the label font. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.tickLabelFont",
        "snippet": "    private Font tickLabelFont;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The font for displaying tick labels on the axis. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.tickLabelFontField",
        "snippet": "    private JTextField tickLabelFontField;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " \r\n     * A field containing a description of the font for displaying tick labels \r\n     * on the axis. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.tickLabelPaintSample",
        "snippet": "    private PaintSample tickLabelPaintSample;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The paint (color) for the tick labels. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.slot1",
        "snippet": "    private JPanel slot1;",
        "begin_line": 105,
        "end_line": 105,
        "comment": "\r\n     * An empty sub-panel for extending the user interface to handle more \r\n     * complex axes. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.slot2",
        "snippet": "    private JPanel slot2;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " \r\n     * An empty sub-panel for extending the user interface to handle more \r\n     * complex axes. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.showTickLabelsCheckBox",
        "snippet": "    private JCheckBox showTickLabelsCheckBox;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " A flag that indicates whether or not the tick labels are visible. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.showTickMarksCheckBox",
        "snippet": "    private JCheckBox showTickMarksCheckBox;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " A flag that indicates whether or not the tick marks are visible. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.tickLabelInsets",
        "snippet": "    private RectangleInsets tickLabelInsets;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " The tick label insets. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.labelInsets",
        "snippet": "    private RectangleInsets labelInsets;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " The label insets. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.otherTabs",
        "snippet": "    private JTabbedPane otherTabs;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " A tabbed pane for... "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultAxisEditor.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources = \n        ResourceBundle.getBundle(\"org.jfree.chart.editor.LocalizationBundle\");",
        "begin_line": 135,
        "end_line": 136,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.editor.ChartEditorManager",
        "src_path": "source/org/jfree/chart/editor/ChartEditorManager.java",
        "signature": "org.jfree.chart.editor.ChartEditorManager.factory",
        "snippet": "    static ChartEditorFactory factory = new DefaultChartEditorFactory();",
        "begin_line": 54,
        "end_line": 54,
        "comment": " This factory creates new {@link ChartEditor} instances as required. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultNumberAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultNumberAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultNumberAxisEditor.autoRange",
        "snippet": "    private boolean autoRange;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " A flag that indicates whether or not the axis range is determined\r\n     *  automatically.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultNumberAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultNumberAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultNumberAxisEditor.minimumValue",
        "snippet": "    private double minimumValue;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The lowest value in the axis range. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultNumberAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultNumberAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultNumberAxisEditor.maximumValue",
        "snippet": "    private double maximumValue;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The highest value in the axis range. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultNumberAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultNumberAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultNumberAxisEditor.autoRangeCheckBox",
        "snippet": "    private JCheckBox autoRangeCheckBox;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " A checkbox that indicates whether or not the axis range is determined\r\n     *  automatically.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultNumberAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultNumberAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultNumberAxisEditor.minimumRangeValue",
        "snippet": "    private JTextField minimumRangeValue;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " A text field for entering the minimum value in the axis range. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultNumberAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultNumberAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultNumberAxisEditor.maximumRangeValue",
        "snippet": "    private JTextField maximumRangeValue;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " A text field for entering the maximum value in the axis range. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultNumberAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultNumberAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultNumberAxisEditor.gridPaintSample",
        "snippet": "    private PaintSample gridPaintSample;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " The paint selected for drawing the gridlines. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultNumberAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultNumberAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultNumberAxisEditor.gridStrokeSample",
        "snippet": "    private StrokeSample gridStrokeSample;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The stroke selected for drawing the gridlines. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultNumberAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultNumberAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultNumberAxisEditor.availableStrokeSamples",
        "snippet": "    private StrokeSample[] availableStrokeSamples;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " An array of stroke samples to choose from (since I haven't written a\r\n     *  decent StrokeChooser component yet).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultNumberAxisEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultNumberAxisEditor.java",
        "signature": "org.jfree.chart.editor.DefaultNumberAxisEditor.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources = \n        ResourceBundle.getBundle(\"org.jfree.chart.editor.LocalizationBundle\");",
        "begin_line": 107,
        "end_line": 108,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.orientationNames",
        "snippet": "    private final static String[] orientationNames = {\"Vertical\", \"Horizontal\"};",
        "begin_line": 88,
        "end_line": 88,
        "comment": " Orientation constants. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.ORIENTATION_VERTICAL",
        "snippet": "    private final static int ORIENTATION_VERTICAL = 0;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.ORIENTATION_HORIZONTAL",
        "snippet": "    private final static int ORIENTATION_HORIZONTAL = 1;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.backgroundPaintSample",
        "snippet": "    private PaintSample backgroundPaintSample;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " The paint (color) used to fill the background of the plot. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.outlineStrokeSample",
        "snippet": "    private StrokeSample outlineStrokeSample;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " The stroke (pen) used to draw the outline of the plot. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.outlinePaintSample",
        "snippet": "    private PaintSample outlinePaintSample;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The paint (color) used to draw the outline of the plot. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.domainAxisPropertyPanel",
        "snippet": "    private DefaultAxisEditor domainAxisPropertyPanel;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " \r\n     * A panel used to display/edit the properties of the domain axis (if any). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.rangeAxisPropertyPanel",
        "snippet": "    private DefaultAxisEditor rangeAxisPropertyPanel;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " \r\n     * A panel used to display/edit the properties of the range axis (if any).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.availableStrokeSamples",
        "snippet": "    private StrokeSample[] availableStrokeSamples;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " An array of stroke samples to choose from. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.plotInsets",
        "snippet": "    private RectangleInsets plotInsets;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " The insets for the plot. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.plotOrientation",
        "snippet": "    private PlotOrientation plotOrientation;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " \r\n     * The orientation for the plot (for <tt>CategoryPlot</tt>s and \r\n     * <tt>XYPlot</tt>s). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.orientationCombo",
        "snippet": "    private JComboBox orientationCombo;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " \r\n     * The orientation combo box (for <tt>CategoryPlot</tt>s and \r\n     * <tt>XYPlot</tt>s). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.drawLines",
        "snippet": "    private Boolean drawLines;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " Whether or not to draw lines between each data point (for\r\n     * <tt>LineAndShapeRenderer</tt>s and <tt>StandardXYItemRenderer</tt>s).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.drawLinesCheckBox",
        "snippet": "    private JCheckBox drawLinesCheckBox;",
        "begin_line": 137,
        "end_line": 137,
        "comment": "\r\n     * The checkbox for whether or not to draw lines between each data point.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.drawShapes",
        "snippet": "    private Boolean drawShapes;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " Whether or not to draw shapes at each data point (for\r\n     * <tt>LineAndShapeRenderer</tt>s and <tt>StandardXYItemRenderer</tt>s).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.drawShapesCheckBox",
        "snippet": "    private JCheckBox drawShapesCheckBox;",
        "begin_line": 147,
        "end_line": 147,
        "comment": "\r\n     * The checkbox for whether or not to draw shapes at each data point.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultPlotEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultPlotEditor.java",
        "signature": "org.jfree.chart.editor.DefaultPlotEditor.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources \n        = ResourceBundle.getBundle(\"org.jfree.chart.editor.LocalizationBundle\");",
        "begin_line": 150,
        "end_line": 151,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultTitleEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultTitleEditor.java",
        "signature": "org.jfree.chart.editor.DefaultTitleEditor.showTitle",
        "snippet": "    private boolean showTitle;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Whether or not to display the title on the chart. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultTitleEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultTitleEditor.java",
        "signature": "org.jfree.chart.editor.DefaultTitleEditor.showTitleCheckBox",
        "snippet": "    private JCheckBox showTitleCheckBox;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The checkbox to indicate whether or not to display the title. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultTitleEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultTitleEditor.java",
        "signature": "org.jfree.chart.editor.DefaultTitleEditor.titleField",
        "snippet": "    private JTextField titleField;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " A field for displaying/editing the title text. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultTitleEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultTitleEditor.java",
        "signature": "org.jfree.chart.editor.DefaultTitleEditor.titleFont",
        "snippet": "    private Font titleFont;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The font used to draw the title. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultTitleEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultTitleEditor.java",
        "signature": "org.jfree.chart.editor.DefaultTitleEditor.fontfield",
        "snippet": "    private JTextField fontfield;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " A field for displaying a description of the title font. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultTitleEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultTitleEditor.java",
        "signature": "org.jfree.chart.editor.DefaultTitleEditor.selectFontButton",
        "snippet": "    private JButton selectFontButton;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " The button to use to select a new title font. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultTitleEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultTitleEditor.java",
        "signature": "org.jfree.chart.editor.DefaultTitleEditor.titlePaint",
        "snippet": "    private PaintSample titlePaint;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " The paint (color) used to draw the title. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultTitleEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultTitleEditor.java",
        "signature": "org.jfree.chart.editor.DefaultTitleEditor.selectPaintButton",
        "snippet": "    private JButton selectPaintButton;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " The button to use to select a new paint (color) to draw the title. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultTitleEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultTitleEditor.java",
        "signature": "org.jfree.chart.editor.DefaultTitleEditor.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources \n        = ResourceBundle.getBundle(\"org.jfree.chart.editor.LocalizationBundle\");",
        "begin_line": 100,
        "end_line": 101,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultChartEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultChartEditor.java",
        "signature": "org.jfree.chart.editor.DefaultChartEditor.titleEditor",
        "snippet": "    private DefaultTitleEditor titleEditor;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " A panel for displaying/editing the properties of the title. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultChartEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultChartEditor.java",
        "signature": "org.jfree.chart.editor.DefaultChartEditor.plotEditor",
        "snippet": "    private DefaultPlotEditor plotEditor;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " A panel for displaying/editing the properties of the plot. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultChartEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultChartEditor.java",
        "signature": "org.jfree.chart.editor.DefaultChartEditor.antialias",
        "snippet": "    private JCheckBox antialias;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " \r\n     * A checkbox indicating whether or not the chart is drawn with\r\n     * anti-aliasing.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultChartEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultChartEditor.java",
        "signature": "org.jfree.chart.editor.DefaultChartEditor.background",
        "snippet": "    private PaintSample background;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The chart background color. "
    },
    {
        "class_name": "org.jfree.chart.editor.DefaultChartEditor",
        "src_path": "source/org/jfree/chart/editor/DefaultChartEditor.java",
        "signature": "org.jfree.chart.editor.DefaultChartEditor.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources \n        = ResourceBundle.getBundle(\"org.jfree.chart.editor.LocalizationBundle\");",
        "begin_line": 88,
        "end_line": 89,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.needle.WindNeedle",
        "src_path": "source/org/jfree/chart/needle/WindNeedle.java",
        "signature": "org.jfree.chart.needle.WindNeedle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2861061368907167834L;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.needle.MiddlePinNeedle",
        "src_path": "source/org/jfree/chart/needle/MiddlePinNeedle.java",
        "signature": "org.jfree.chart.needle.MiddlePinNeedle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6237073996403125310L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.needle.PlumNeedle",
        "src_path": "source/org/jfree/chart/needle/PlumNeedle.java",
        "signature": "org.jfree.chart.needle.PlumNeedle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3082660488660600718L;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.needle.MeterNeedle",
        "src_path": "source/org/jfree/chart/needle/MeterNeedle.java",
        "signature": "org.jfree.chart.needle.MeterNeedle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5203064851510951052L;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.needle.MeterNeedle",
        "src_path": "source/org/jfree/chart/needle/MeterNeedle.java",
        "signature": "org.jfree.chart.needle.MeterNeedle.outlinePaint",
        "snippet": "    private transient Paint outlinePaint = Color.black;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The outline paint. "
    },
    {
        "class_name": "org.jfree.chart.needle.MeterNeedle",
        "src_path": "source/org/jfree/chart/needle/MeterNeedle.java",
        "signature": "org.jfree.chart.needle.MeterNeedle.outlineStroke",
        "snippet": "    private transient Stroke outlineStroke = new BasicStroke(2);",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.needle.MeterNeedle",
        "src_path": "source/org/jfree/chart/needle/MeterNeedle.java",
        "signature": "org.jfree.chart.needle.MeterNeedle.fillPaint",
        "snippet": "    private transient Paint fillPaint = null;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The fill paint. "
    },
    {
        "class_name": "org.jfree.chart.needle.MeterNeedle",
        "src_path": "source/org/jfree/chart/needle/MeterNeedle.java",
        "signature": "org.jfree.chart.needle.MeterNeedle.highlightPaint",
        "snippet": "    private transient Paint highlightPaint = null;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " The highlight paint. "
    },
    {
        "class_name": "org.jfree.chart.needle.MeterNeedle",
        "src_path": "source/org/jfree/chart/needle/MeterNeedle.java",
        "signature": "org.jfree.chart.needle.MeterNeedle.size",
        "snippet": "    private int size = 5;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " The size. "
    },
    {
        "class_name": "org.jfree.chart.needle.MeterNeedle",
        "src_path": "source/org/jfree/chart/needle/MeterNeedle.java",
        "signature": "org.jfree.chart.needle.MeterNeedle.rotateX",
        "snippet": "    private double rotateX = 0.5;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " Scalar to aply to locate the rotation x point. "
    },
    {
        "class_name": "org.jfree.chart.needle.MeterNeedle",
        "src_path": "source/org/jfree/chart/needle/MeterNeedle.java",
        "signature": "org.jfree.chart.needle.MeterNeedle.rotateY",
        "snippet": "    private double rotateY = 0.5;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Scalar to aply to locate the rotation y point. "
    },
    {
        "class_name": "org.jfree.chart.needle.MeterNeedle",
        "src_path": "source/org/jfree/chart/needle/MeterNeedle.java",
        "signature": "org.jfree.chart.needle.MeterNeedle.transform",
        "snippet": "    protected static AffineTransform transform = new AffineTransform();",
        "begin_line": 100,
        "end_line": 100,
        "comment": " A transform. "
    },
    {
        "class_name": "org.jfree.chart.needle.PointerNeedle",
        "src_path": "source/org/jfree/chart/needle/PointerNeedle.java",
        "signature": "org.jfree.chart.needle.PointerNeedle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4744677345334729606L;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.needle.ArrowNeedle",
        "src_path": "source/org/jfree/chart/needle/ArrowNeedle.java",
        "signature": "org.jfree.chart.needle.ArrowNeedle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5334056511213782357L;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.needle.ArrowNeedle",
        "src_path": "source/org/jfree/chart/needle/ArrowNeedle.java",
        "signature": "org.jfree.chart.needle.ArrowNeedle.isArrowAtTop",
        "snippet": "    private boolean isArrowAtTop = true;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " \r\n     * A flag controlling whether or not there is an arrow at the top of the \r\n     * needle. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.needle.LongNeedle",
        "src_path": "source/org/jfree/chart/needle/LongNeedle.java",
        "signature": "org.jfree.chart.needle.LongNeedle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4319985779783688159L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.needle.LineNeedle",
        "src_path": "source/org/jfree/chart/needle/LineNeedle.java",
        "signature": "org.jfree.chart.needle.LineNeedle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6215321387896748945L;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.needle.PinNeedle",
        "src_path": "source/org/jfree/chart/needle/PinNeedle.java",
        "signature": "org.jfree.chart.needle.PinNeedle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3787089953079863373L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.needle.ShipNeedle",
        "src_path": "source/org/jfree/chart/needle/ShipNeedle.java",
        "signature": "org.jfree.chart.needle.ShipNeedle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 149554868169435612L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.title.PaintScaleLegend",
        "src_path": "source/org/jfree/chart/title/PaintScaleLegend.java",
        "signature": "org.jfree.chart.title.PaintScaleLegend.scale",
        "snippet": "    private PaintScale scale;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The paint scale (never <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.title.PaintScaleLegend",
        "src_path": "source/org/jfree/chart/title/PaintScaleLegend.java",
        "signature": "org.jfree.chart.title.PaintScaleLegend.axis",
        "snippet": "    private ValueAxis axis;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " The value axis (never <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.title.PaintScaleLegend",
        "src_path": "source/org/jfree/chart/title/PaintScaleLegend.java",
        "signature": "org.jfree.chart.title.PaintScaleLegend.axisLocation",
        "snippet": "    private AxisLocation axisLocation;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " \r\n     * The axis location (handles both orientations, never \r\n     * <code>null</code>). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.PaintScaleLegend",
        "src_path": "source/org/jfree/chart/title/PaintScaleLegend.java",
        "signature": "org.jfree.chart.title.PaintScaleLegend.axisOffset",
        "snippet": "    private double axisOffset;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " The offset between the axis and the paint strip (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.title.PaintScaleLegend",
        "src_path": "source/org/jfree/chart/title/PaintScaleLegend.java",
        "signature": "org.jfree.chart.title.PaintScaleLegend.stripWidth",
        "snippet": "    private double stripWidth;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " The thickness of the paint strip (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.title.PaintScaleLegend",
        "src_path": "source/org/jfree/chart/title/PaintScaleLegend.java",
        "signature": "org.jfree.chart.title.PaintScaleLegend.stripOutlineVisible",
        "snippet": "    private boolean stripOutlineVisible;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " \r\n     * A flag that controls whether or not an outline is drawn around the\r\n     * paint strip.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.PaintScaleLegend",
        "src_path": "source/org/jfree/chart/title/PaintScaleLegend.java",
        "signature": "org.jfree.chart.title.PaintScaleLegend.stripOutlinePaint",
        "snippet": "    private transient Paint stripOutlinePaint;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " The paint used to draw an outline around the paint strip. "
    },
    {
        "class_name": "org.jfree.chart.title.PaintScaleLegend",
        "src_path": "source/org/jfree/chart/title/PaintScaleLegend.java",
        "signature": "org.jfree.chart.title.PaintScaleLegend.stripOutlineStroke",
        "snippet": "    private transient Stroke stripOutlineStroke;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " The stroke used to draw an outline around the paint strip. "
    },
    {
        "class_name": "org.jfree.chart.title.PaintScaleLegend",
        "src_path": "source/org/jfree/chart/title/PaintScaleLegend.java",
        "signature": "org.jfree.chart.title.PaintScaleLegend.backgroundPaint",
        "snippet": "    private transient Paint backgroundPaint;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " The background paint (never <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.title.PaintScaleLegend",
        "src_path": "source/org/jfree/chart/title/PaintScaleLegend.java",
        "signature": "org.jfree.chart.title.PaintScaleLegend.SUBDIVISIONS",
        "snippet": "    private static final int SUBDIVISIONS = 200;",
        "begin_line": 468,
        "end_line": 468,
        "comment": " \r\n     * The number of subdivisions to use when drawing the paint strip.  Maybe\r\n     * this need to be user controllable? \r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2644010518533854633L;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT",
        "snippet": "    public static final Font DEFAULT_ITEM_FONT \n        = new Font(\"SansSerif\", Font.PLAIN, 12);",
        "begin_line": 108,
        "end_line": 109,
        "comment": " The default item font. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT",
        "snippet": "    public static final Paint DEFAULT_ITEM_PAINT = Color.black;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " The default item paint. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.sources",
        "snippet": "    private LegendItemSource[] sources;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " The sources for legend items. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.backgroundPaint",
        "snippet": "    private transient Paint backgroundPaint;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " The background paint (possibly <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.legendItemGraphicEdge",
        "snippet": "    private RectangleEdge legendItemGraphicEdge;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " The edge for the legend item graphic relative to the text. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.legendItemGraphicAnchor",
        "snippet": "    private RectangleAnchor legendItemGraphicAnchor;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " The anchor point for the legend item graphic. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.legendItemGraphicLocation",
        "snippet": "    private RectangleAnchor legendItemGraphicLocation;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " The legend item graphic location. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.legendItemGraphicPadding",
        "snippet": "    private RectangleInsets legendItemGraphicPadding;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The padding for the legend item graphic. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.itemFont",
        "snippet": "    private Font itemFont;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " The item font. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.itemPaint",
        "snippet": "    private transient Paint itemPaint;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " The item paint. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.itemLabelPadding",
        "snippet": "    private RectangleInsets itemLabelPadding;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " The padding for the item labels. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.items",
        "snippet": "    private BlockContainer items;",
        "begin_line": 144,
        "end_line": 144,
        "comment": "\r\n     * A container that holds and displays the legend items.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.hLayout",
        "snippet": "    private Arrangement hLayout;",
        "begin_line": 146,
        "end_line": 146,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.vLayout",
        "snippet": "    private Arrangement vLayout;",
        "begin_line": 148,
        "end_line": 148,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.wrapper",
        "snippet": "    private BlockContainer wrapper;",
        "begin_line": 154,
        "end_line": 154,
        "comment": " \r\n     * An optional container for wrapping the legend items (allows for adding\r\n     * a title or other text to the legend). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6675162505277817221L;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.DEFAULT_POSITION",
        "snippet": "    public static final RectangleEdge DEFAULT_POSITION = RectangleEdge.TOP;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " The default title position. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT",
        "snippet": "    public static final HorizontalAlignment \n            DEFAULT_HORIZONTAL_ALIGNMENT = HorizontalAlignment.CENTER;",
        "begin_line": 99,
        "end_line": 100,
        "comment": " The default horizontal alignment. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT",
        "snippet": "    public static final VerticalAlignment \n            DEFAULT_VERTICAL_ALIGNMENT = VerticalAlignment.CENTER;",
        "begin_line": 103,
        "end_line": 104,
        "comment": " The default vertical alignment. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.DEFAULT_PADDING",
        "snippet": "    public static final RectangleInsets DEFAULT_PADDING = new RectangleInsets(\n            1, 1, 1, 1);",
        "begin_line": 107,
        "end_line": 108,
        "comment": " Default title padding. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.position",
        "snippet": "    private RectangleEdge position;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " The title position. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.horizontalAlignment",
        "snippet": "    private HorizontalAlignment horizontalAlignment;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " The horizontal alignment of the title content. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.verticalAlignment",
        "snippet": "    private VerticalAlignment verticalAlignment;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " The vertical alignment of the title content. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.listenerList",
        "snippet": "    private transient EventListenerList listenerList;",
        "begin_line": 120,
        "end_line": 120,
        "comment": " Storage for registered change listeners. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.notify",
        "snippet": "    private boolean notify;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " \r\n     * A flag that can be used to temporarily disable the listener mechanism. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.CompositeTitle",
        "src_path": "source/org/jfree/chart/title/CompositeTitle.java",
        "signature": "org.jfree.chart.title.CompositeTitle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6770854036232562290L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.title.CompositeTitle",
        "src_path": "source/org/jfree/chart/title/CompositeTitle.java",
        "signature": "org.jfree.chart.title.CompositeTitle.container",
        "snippet": "    private BlockContainer container;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " A container for the individual titles. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.dataset",
        "snippet": "    private Dataset dataset;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " \r\n     * The dataset. \r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.seriesKey",
        "snippet": "    private Comparable seriesKey;",
        "begin_line": 79,
        "end_line": 79,
        "comment": "\r\n     * The series key.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.toolTipText",
        "snippet": "    private String toolTipText;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The tool tip text (can be <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.urlText",
        "snippet": "    private String urlText;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The URL text (can be <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8372008692127477443L;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.DEFAULT_FONT",
        "snippet": "    public static final Font DEFAULT_FONT = new Font(\"SansSerif\", Font.BOLD, \n            12);",
        "begin_line": 126,
        "end_line": 127,
        "comment": " The default font. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT",
        "snippet": "    public static final Paint DEFAULT_TEXT_PAINT = Color.black;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The default text color. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.text",
        "snippet": "    private String text;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " The title text. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.font",
        "snippet": "    private Font font;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " The font used to display the title. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.textAlignment",
        "snippet": "    private HorizontalAlignment textAlignment;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " The text alignment. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " The paint used to display the title text. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.backgroundPaint",
        "snippet": "    private transient Paint backgroundPaint;",
        "begin_line": 145,
        "end_line": 145,
        "comment": " The background paint. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.toolTipText",
        "snippet": "    private String toolTipText;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " The tool tip text (can be <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.urlText",
        "snippet": "    private String urlText;",
        "begin_line": 151,
        "end_line": 151,
        "comment": " The URL text (can be <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.content",
        "snippet": "    private TextBlock content;",
        "begin_line": 154,
        "end_line": 154,
        "comment": " The content. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.expandToFitSpace",
        "snippet": "    private boolean expandToFitSpace = false;",
        "begin_line": 160,
        "end_line": 160,
        "comment": " \r\n     * A flag that controls whether the title expands to fit the available\r\n     * space..\r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.shapeVisible",
        "snippet": "    private boolean shapeVisible;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " \r\n     * A flag that controls whether or not the shape is visible - see also \r\n     * lineVisible. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.shape",
        "snippet": "    private transient Shape shape;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " \r\n     * The shape to display.  To allow for accurate positioning, the center\r\n     * of the shape should be at (0, 0). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.shapeLocation",
        "snippet": "    private RectangleAnchor shapeLocation;",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\r\n     * Defines the location within the block to which the shape will be aligned.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.shapeAnchor",
        "snippet": "    private RectangleAnchor shapeAnchor;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " \r\n     * Defines the point on the shape's bounding rectangle that will be \r\n     * aligned to the drawing location when the shape is rendered.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.shapeFilled",
        "snippet": "    private boolean shapeFilled;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " A flag that controls whether or not the shape is filled. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.fillPaint",
        "snippet": "    private transient Paint fillPaint;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " The fill paint for the shape. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.fillPaintTransformer",
        "snippet": "    private GradientPaintTransformer fillPaintTransformer;",
        "begin_line": 120,
        "end_line": 120,
        "comment": "\r\n     * The fill paint transformer (used if the fillPaint is an instance of\r\n     * GradientPaint).\r\n     * \r\n     * @since 1.0.4\r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.shapeOutlineVisible",
        "snippet": "    private boolean shapeOutlineVisible;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " A flag that controls whether or not the shape outline is visible. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " The outline paint for the shape. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.outlineStroke",
        "snippet": "    private transient Stroke outlineStroke;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " The outline stroke for the shape. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.lineVisible",
        "snippet": "    private boolean lineVisible;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " \r\n     * A flag that controls whether or not the line is visible - see also \r\n     * shapeVisible. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.line",
        "snippet": "    private transient Shape line;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " The line. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.lineStroke",
        "snippet": "    private transient Stroke lineStroke;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " The line stroke. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.linePaint",
        "snippet": "    private transient Paint linePaint;",
        "begin_line": 144,
        "end_line": 144,
        "comment": " The line paint. "
    },
    {
        "class_name": "org.jfree.chart.title.ImageTitle",
        "src_path": "source/org/jfree/chart/title/ImageTitle.java",
        "signature": "org.jfree.chart.title.ImageTitle.image",
        "snippet": "    private Image image;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The title image. "
    },
    {
        "class_name": "org.jfree.chart.title.DateTitle",
        "src_path": "source/org/jfree/chart/title/DateTitle.java",
        "signature": "org.jfree.chart.title.DateTitle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -465434812763159881L;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.KeyedValueComparator",
        "src_path": "source/org/jfree/data/KeyedValueComparator.java",
        "signature": "org.jfree.data.KeyedValueComparator.type",
        "snippet": "    private KeyedValueComparatorType type;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The comparator type. "
    },
    {
        "class_name": "org.jfree.data.KeyedValueComparator",
        "src_path": "source/org/jfree/data/KeyedValueComparator.java",
        "signature": "org.jfree.data.KeyedValueComparator.order",
        "snippet": "    private SortOrder order;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The sort order. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValue",
        "src_path": "source/org/jfree/data/DefaultKeyedValue.java",
        "signature": "org.jfree.data.DefaultKeyedValue.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7388924517460437712L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValue",
        "src_path": "source/org/jfree/data/DefaultKeyedValue.java",
        "signature": "org.jfree.data.DefaultKeyedValue.key",
        "snippet": "    private Comparable key;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The key. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValue",
        "src_path": "source/org/jfree/data/DefaultKeyedValue.java",
        "signature": "org.jfree.data.DefaultKeyedValue.value",
        "snippet": "    private Number value;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The value. "
    },
    {
        "class_name": "org.jfree.data.KeyedObject",
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "signature": "org.jfree.data.KeyedObject.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2677930479256885863L;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.KeyedObject",
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "signature": "org.jfree.data.KeyedObject.key",
        "snippet": "    private Comparable key;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The key. "
    },
    {
        "class_name": "org.jfree.data.KeyedObject",
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "signature": "org.jfree.data.KeyedObject.object",
        "snippet": "    private Object object;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The object. "
    },
    {
        "class_name": "org.jfree.data.ComparableObjectItem",
        "src_path": "source/org/jfree/data/ComparableObjectItem.java",
        "signature": "org.jfree.data.ComparableObjectItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2751513470325494890L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "org.jfree.data.ComparableObjectItem",
        "src_path": "source/org/jfree/data/ComparableObjectItem.java",
        "signature": "org.jfree.data.ComparableObjectItem.x",
        "snippet": "    private Comparable x;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The x-value. "
    },
    {
        "class_name": "org.jfree.data.ComparableObjectItem",
        "src_path": "source/org/jfree/data/ComparableObjectItem.java",
        "signature": "org.jfree.data.ComparableObjectItem.obj",
        "snippet": "    private Object obj;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The y-value. "
    },
    {
        "class_name": "org.jfree.data.KeyedObjects",
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "signature": "org.jfree.data.KeyedObjects.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1321582394193530984L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.KeyedObjects",
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "signature": "org.jfree.data.KeyedObjects.data",
        "snippet": "    private List data;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Storage for the data. "
    },
    {
        "class_name": "org.jfree.data.KeyedValueComparatorType",
        "src_path": "source/org/jfree/data/KeyedValueComparatorType.java",
        "signature": "org.jfree.data.KeyedValueComparatorType.BY_KEY",
        "snippet": "    public static final KeyedValueComparatorType BY_KEY\n        = new KeyedValueComparatorType(\"KeyedValueComparatorType.BY_KEY\");",
        "begin_line": 51,
        "end_line": 52,
        "comment": " An object representing 'by key' sorting. "
    },
    {
        "class_name": "org.jfree.data.KeyedValueComparatorType",
        "src_path": "source/org/jfree/data/KeyedValueComparatorType.java",
        "signature": "org.jfree.data.KeyedValueComparatorType.BY_VALUE",
        "snippet": "    public static final KeyedValueComparatorType BY_VALUE\n        = new KeyedValueComparatorType(\"KeyedValueComparatorType.BY_VALUE\");",
        "begin_line": 55,
        "end_line": 56,
        "comment": " An object representing 'by value' sorting. "
    },
    {
        "class_name": "org.jfree.data.KeyedValueComparatorType",
        "src_path": "source/org/jfree/data/KeyedValueComparatorType.java",
        "signature": "org.jfree.data.KeyedValueComparatorType.name",
        "snippet": "    private String name;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.data.DomainOrder",
        "src_path": "source/org/jfree/data/DomainOrder.java",
        "signature": "org.jfree.data.DomainOrder.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4902774943512072627L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.DomainOrder",
        "src_path": "source/org/jfree/data/DomainOrder.java",
        "signature": "org.jfree.data.DomainOrder.NONE",
        "snippet": "    public static final DomainOrder NONE = new DomainOrder(\"DomainOrder.NONE\");",
        "begin_line": 55,
        "end_line": 55,
        "comment": " No order. "
    },
    {
        "class_name": "org.jfree.data.DomainOrder",
        "src_path": "source/org/jfree/data/DomainOrder.java",
        "signature": "org.jfree.data.DomainOrder.ASCENDING",
        "snippet": "    public static final DomainOrder ASCENDING \n        = new DomainOrder(\"DomainOrder.ASCENDING\");",
        "begin_line": 58,
        "end_line": 59,
        "comment": " Ascending order. "
    },
    {
        "class_name": "org.jfree.data.DomainOrder",
        "src_path": "source/org/jfree/data/DomainOrder.java",
        "signature": "org.jfree.data.DomainOrder.DESCENDING",
        "snippet": "    public static final DomainOrder DESCENDING \n        = new DomainOrder(\"DomainOrder.DESCENDING\");",
        "begin_line": 62,
        "end_line": 63,
        "comment": " Descending order. "
    },
    {
        "class_name": "org.jfree.data.DomainOrder",
        "src_path": "source/org/jfree/data/DomainOrder.java",
        "signature": "org.jfree.data.DomainOrder.name",
        "snippet": "    private String name;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "signature": "org.jfree.data.DefaultKeyedValues.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8468154364608194797L;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "signature": "org.jfree.data.DefaultKeyedValues.keys",
        "snippet": "    private ArrayList keys;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Storage for the keys. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "signature": "org.jfree.data.DefaultKeyedValues.values",
        "snippet": "    private ArrayList values;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " Storage for the values. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "signature": "org.jfree.data.DefaultKeyedValues.indexMap",
        "snippet": "    private HashMap indexMap; ",
        "begin_line": 93,
        "end_line": 93,
        "comment": " \n     * Contains (key, Integer) mappings, where the Integer is the index for\n     * the key in the list. \n     "
    },
    {
        "class_name": "org.jfree.data.KeyToGroupMap",
        "src_path": "source/org/jfree/data/KeyToGroupMap.java",
        "signature": "org.jfree.data.KeyToGroupMap.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2228169345475318082L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.KeyToGroupMap",
        "src_path": "source/org/jfree/data/KeyToGroupMap.java",
        "signature": "org.jfree.data.KeyToGroupMap.defaultGroup",
        "snippet": "    private Comparable defaultGroup;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The default group. "
    },
    {
        "class_name": "org.jfree.data.KeyToGroupMap",
        "src_path": "source/org/jfree/data/KeyToGroupMap.java",
        "signature": "org.jfree.data.KeyToGroupMap.groups",
        "snippet": "    private List groups;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The groups. "
    },
    {
        "class_name": "org.jfree.data.KeyToGroupMap",
        "src_path": "source/org/jfree/data/KeyToGroupMap.java",
        "signature": "org.jfree.data.KeyToGroupMap.keyToGroupMap",
        "snippet": "    private Map keyToGroupMap;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " A mapping between keys and groups. "
    },
    {
        "class_name": "org.jfree.data.ComparableObjectSeries",
        "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
        "signature": "org.jfree.data.ComparableObjectSeries.data",
        "snippet": "    protected List data;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Storage for the data items in the series. "
    },
    {
        "class_name": "org.jfree.data.ComparableObjectSeries",
        "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
        "signature": "org.jfree.data.ComparableObjectSeries.maximumItemCount",
        "snippet": "    private int maximumItemCount = Integer.MAX_VALUE;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The maximum number of items for the series. "
    },
    {
        "class_name": "org.jfree.data.ComparableObjectSeries",
        "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
        "signature": "org.jfree.data.ComparableObjectSeries.autoSort",
        "snippet": "    private boolean autoSort;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " A flag that controls whether the items are automatically sorted. "
    },
    {
        "class_name": "org.jfree.data.ComparableObjectSeries",
        "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
        "signature": "org.jfree.data.ComparableObjectSeries.allowDuplicateXValues",
        "snippet": "    private boolean allowDuplicateXValues;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " A flag that controls whether or not duplicate x-values are allowed. "
    },
    {
        "class_name": "org.jfree.data.RangeType",
        "src_path": "source/org/jfree/data/RangeType.java",
        "signature": "org.jfree.data.RangeType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -9073319010650549239L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.RangeType",
        "src_path": "source/org/jfree/data/RangeType.java",
        "signature": "org.jfree.data.RangeType.FULL",
        "snippet": "    public static final RangeType FULL = new RangeType(\"RangeType.FULL\");",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Full range (positive and negative). "
    },
    {
        "class_name": "org.jfree.data.RangeType",
        "src_path": "source/org/jfree/data/RangeType.java",
        "signature": "org.jfree.data.RangeType.POSITIVE",
        "snippet": "    public static final RangeType POSITIVE \n        = new RangeType(\"RangeType.POSITIVE\");",
        "begin_line": 59,
        "end_line": 60,
        "comment": " Positive range. "
    },
    {
        "class_name": "org.jfree.data.RangeType",
        "src_path": "source/org/jfree/data/RangeType.java",
        "signature": "org.jfree.data.RangeType.NEGATIVE",
        "snippet": "    public static final RangeType NEGATIVE \n        = new RangeType(\"RangeType.NEGATIVE\");",
        "begin_line": 63,
        "end_line": 64,
        "comment": " Negative range. "
    },
    {
        "class_name": "org.jfree.data.RangeType",
        "src_path": "source/org/jfree/data/RangeType.java",
        "signature": "org.jfree.data.RangeType.name",
        "snippet": "    private String name;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.data.Range",
        "src_path": "source/org/jfree/data/Range.java",
        "signature": "org.jfree.data.Range.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -906333695431863380L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.Range",
        "src_path": "source/org/jfree/data/Range.java",
        "signature": "org.jfree.data.Range.lower",
        "snippet": "    private double lower;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The lower bound of the range. "
    },
    {
        "class_name": "org.jfree.data.Range",
        "src_path": "source/org/jfree/data/Range.java",
        "signature": "org.jfree.data.Range.upper",
        "snippet": "    private double upper;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The upper bound of the range. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "signature": "org.jfree.data.DefaultKeyedValues2D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5514169970951994748L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "signature": "org.jfree.data.DefaultKeyedValues2D.rowKeys",
        "snippet": "    private List rowKeys;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The row keys. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "signature": "org.jfree.data.DefaultKeyedValues2D.columnKeys",
        "snippet": "    private List columnKeys;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " The column keys. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "signature": "org.jfree.data.DefaultKeyedValues2D.rows",
        "snippet": "    private List rows;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " The row data. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "signature": "org.jfree.data.DefaultKeyedValues2D.sortRowKeys",
        "snippet": "    private boolean sortRowKeys;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " If the row keys should be sorted by their comparable order. "
    },
    {
        "class_name": "org.jfree.data.KeyedObjects2D",
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "signature": "org.jfree.data.KeyedObjects2D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1015873563138522374L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.KeyedObjects2D",
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "signature": "org.jfree.data.KeyedObjects2D.rowKeys",
        "snippet": "    private List rowKeys;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The row keys. "
    },
    {
        "class_name": "org.jfree.data.KeyedObjects2D",
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "signature": "org.jfree.data.KeyedObjects2D.columnKeys",
        "snippet": "    private List columnKeys;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The column keys. "
    },
    {
        "class_name": "org.jfree.data.KeyedObjects2D",
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "signature": "org.jfree.data.KeyedObjects2D.rows",
        "snippet": "    private List rows;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The row data. "
    },
    {
        "class_name": "org.jfree.data.jdbc.JDBCCategoryDataset",
        "src_path": "source/org/jfree/data/jdbc/JDBCCategoryDataset.java",
        "signature": "org.jfree.data.jdbc.JDBCCategoryDataset.connection",
        "snippet": "    private transient Connection connection;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " The database connection. "
    },
    {
        "class_name": "org.jfree.data.jdbc.JDBCCategoryDataset",
        "src_path": "source/org/jfree/data/jdbc/JDBCCategoryDataset.java",
        "signature": "org.jfree.data.jdbc.JDBCCategoryDataset.transpose",
        "snippet": "    private boolean transpose = true;",
        "begin_line": 103,
        "end_line": 103,
        "comment": "\r\n     * A flag the controls whether or not the table is transposed.  The default \r\n     * is 'true' because this provides the behaviour described in the \r\n     * documentation.\r\n     "
    },
    {
        "class_name": "org.jfree.data.jdbc.JDBCPieDataset",
        "src_path": "source/org/jfree/data/jdbc/JDBCPieDataset.java",
        "signature": "org.jfree.data.jdbc.JDBCPieDataset.connection",
        "snippet": "    private transient Connection connection;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The database connection. "
    },
    {
        "class_name": "org.jfree.data.jdbc.JDBCXYDataset",
        "src_path": "source/org/jfree/data/jdbc/JDBCXYDataset.java",
        "signature": "org.jfree.data.jdbc.JDBCXYDataset.connection",
        "snippet": "    private transient Connection connection;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " The database connection. "
    },
    {
        "class_name": "org.jfree.data.jdbc.JDBCXYDataset",
        "src_path": "source/org/jfree/data/jdbc/JDBCXYDataset.java",
        "signature": "org.jfree.data.jdbc.JDBCXYDataset.columnNames",
        "snippet": "    private String[] columnNames = {};",
        "begin_line": 110,
        "end_line": 110,
        "comment": " Column names. "
    },
    {
        "class_name": "org.jfree.data.jdbc.JDBCXYDataset",
        "src_path": "source/org/jfree/data/jdbc/JDBCXYDataset.java",
        "signature": "org.jfree.data.jdbc.JDBCXYDataset.rows",
        "snippet": "    private ArrayList rows;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " Rows. "
    },
    {
        "class_name": "org.jfree.data.jdbc.JDBCXYDataset",
        "src_path": "source/org/jfree/data/jdbc/JDBCXYDataset.java",
        "signature": "org.jfree.data.jdbc.JDBCXYDataset.maxValue",
        "snippet": "    private double maxValue = 0.0;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " The maximum y value of the returned result set "
    },
    {
        "class_name": "org.jfree.data.jdbc.JDBCXYDataset",
        "src_path": "source/org/jfree/data/jdbc/JDBCXYDataset.java",
        "signature": "org.jfree.data.jdbc.JDBCXYDataset.minValue",
        "snippet": "    private double minValue = 0.0;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " The minimum y value of the returned result set "
    },
    {
        "class_name": "org.jfree.data.jdbc.JDBCXYDataset",
        "src_path": "source/org/jfree/data/jdbc/JDBCXYDataset.java",
        "signature": "org.jfree.data.jdbc.JDBCXYDataset.isTimeSeries",
        "snippet": "    private boolean isTimeSeries = false;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Is this dataset a timeseries ? "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.data",
        "snippet": "    protected KeyedObjects2D data;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Storage for the data. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.minimumRangeValue",
        "snippet": "    private double minimumRangeValue;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The minimum range value. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.minimumRangeValueRow",
        "snippet": "    private int minimumRangeValueRow;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The row index for the cell that the minimum range value comes from. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.minimumRangeValueColumn",
        "snippet": "    private int minimumRangeValueColumn;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " \r\n     * The column index for the cell that the minimum range value comes from. \r\n     "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.maximumRangeValue",
        "snippet": "    private double maximumRangeValue;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " The maximum range value. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.maximumRangeValueRow",
        "snippet": "    private int maximumRangeValueRow;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " The row index for the cell that the maximum range value comes from. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.maximumRangeValueColumn",
        "snippet": "    private int maximumRangeValueColumn;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " \r\n     * The column index for the cell that the maximum range value comes from. \r\n     "
    },
    {
        "class_name": "org.jfree.data.statistics.SimpleHistogramDataset",
        "src_path": "source/org/jfree/data/statistics/SimpleHistogramDataset.java",
        "signature": "org.jfree.data.statistics.SimpleHistogramDataset.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7997996479768018443L;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.statistics.SimpleHistogramDataset",
        "src_path": "source/org/jfree/data/statistics/SimpleHistogramDataset.java",
        "signature": "org.jfree.data.statistics.SimpleHistogramDataset.key",
        "snippet": "    private Comparable key;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The series key. "
    },
    {
        "class_name": "org.jfree.data.statistics.SimpleHistogramDataset",
        "src_path": "source/org/jfree/data/statistics/SimpleHistogramDataset.java",
        "signature": "org.jfree.data.statistics.SimpleHistogramDataset.bins",
        "snippet": "    private List bins;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The bins. "
    },
    {
        "class_name": "org.jfree.data.statistics.SimpleHistogramDataset",
        "src_path": "source/org/jfree/data/statistics/SimpleHistogramDataset.java",
        "signature": "org.jfree.data.statistics.SimpleHistogramDataset.adjustForBinSize",
        "snippet": "    private boolean adjustForBinSize;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " \r\n     * A flag that controls whether or not the bin count is divided by the \r\n     * bin size. \r\n     "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultMultiValueCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultMultiValueCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultMultiValueCategoryDataset.data",
        "snippet": "    protected KeyedObjects2D data;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n     * Storage for the data.\n     "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultMultiValueCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultMultiValueCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultMultiValueCategoryDataset.minimumRangeValue",
        "snippet": "    private Number minimumRangeValue;",
        "begin_line": 72,
        "end_line": 72,
        "comment": "\n     * The minimum range value.\n     "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultMultiValueCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultMultiValueCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultMultiValueCategoryDataset.maximumRangeValue",
        "snippet": "    private Number maximumRangeValue;",
        "begin_line": 77,
        "end_line": 77,
        "comment": "\n     * The maximum range value.\n     "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultMultiValueCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultMultiValueCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultMultiValueCategoryDataset.rangeBounds",
        "snippet": "    private Range rangeBounds;",
        "begin_line": 82,
        "end_line": 82,
        "comment": "\n     * The range of values.\n     "
    },
    {
        "class_name": "org.jfree.data.statistics.HistogramType",
        "src_path": "source/org/jfree/data/statistics/HistogramType.java",
        "signature": "org.jfree.data.statistics.HistogramType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2618927186251997727L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.statistics.HistogramType",
        "src_path": "source/org/jfree/data/statistics/HistogramType.java",
        "signature": "org.jfree.data.statistics.HistogramType.FREQUENCY",
        "snippet": "    public static final HistogramType FREQUENCY \n        = new HistogramType(\"FREQUENCY\");",
        "begin_line": 56,
        "end_line": 57,
        "comment": " Frequency histogram. "
    },
    {
        "class_name": "org.jfree.data.statistics.HistogramType",
        "src_path": "source/org/jfree/data/statistics/HistogramType.java",
        "signature": "org.jfree.data.statistics.HistogramType.RELATIVE_FREQUENCY",
        "snippet": "    public static final HistogramType RELATIVE_FREQUENCY \n        = new HistogramType(\"RELATIVE_FREQUENCY\");",
        "begin_line": 60,
        "end_line": 61,
        "comment": " Relative frequency. "
    },
    {
        "class_name": "org.jfree.data.statistics.HistogramType",
        "src_path": "source/org/jfree/data/statistics/HistogramType.java",
        "signature": "org.jfree.data.statistics.HistogramType.SCALE_AREA_TO_1",
        "snippet": "    public static final HistogramType SCALE_AREA_TO_1 \n        = new HistogramType(\"SCALE_AREA_TO_1\");",
        "begin_line": 64,
        "end_line": 65,
        "comment": " Scale area to one. "
    },
    {
        "class_name": "org.jfree.data.statistics.HistogramType",
        "src_path": "source/org/jfree/data/statistics/HistogramType.java",
        "signature": "org.jfree.data.statistics.HistogramType.name",
        "snippet": "    private String name;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The type name. "
    },
    {
        "class_name": "org.jfree.data.statistics.HistogramDataset",
        "src_path": "source/org/jfree/data/statistics/HistogramDataset.java",
        "signature": "org.jfree.data.statistics.HistogramDataset.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6341668077370231153L;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.statistics.HistogramDataset",
        "src_path": "source/org/jfree/data/statistics/HistogramDataset.java",
        "signature": "org.jfree.data.statistics.HistogramDataset.list",
        "snippet": "    private List list;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " A list of maps. "
    },
    {
        "class_name": "org.jfree.data.statistics.HistogramDataset",
        "src_path": "source/org/jfree/data/statistics/HistogramDataset.java",
        "signature": "org.jfree.data.statistics.HistogramDataset.type",
        "snippet": "    private HistogramType type;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The histogram type. "
    },
    {
        "class_name": "org.jfree.data.statistics.MeanAndStandardDeviation",
        "src_path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java",
        "signature": "org.jfree.data.statistics.MeanAndStandardDeviation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7413468697315721515L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.statistics.MeanAndStandardDeviation",
        "src_path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java",
        "signature": "org.jfree.data.statistics.MeanAndStandardDeviation.mean",
        "snippet": "    private Number mean;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The mean. "
    },
    {
        "class_name": "org.jfree.data.statistics.MeanAndStandardDeviation",
        "src_path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java",
        "signature": "org.jfree.data.statistics.MeanAndStandardDeviation.standardDeviation",
        "snippet": "    private Number standardDeviation;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The standard deviation. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7329649623148167423L;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.mean",
        "snippet": "    private Number mean;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The mean. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.median",
        "snippet": "    private Number median;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The median. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.q1",
        "snippet": "    private Number q1;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The first quarter. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.q3",
        "snippet": "    private Number q3;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The third quarter. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.minRegularValue",
        "snippet": "    private Number minRegularValue;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The minimum regular value. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.maxRegularValue",
        "snippet": "    private Number maxRegularValue;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The maximum regular value. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.minOutlier",
        "snippet": "    private Number minOutlier;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The minimum outlier. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.maxOutlier",
        "snippet": "    private Number maxOutlier;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The maximum outlier. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.outliers",
        "snippet": "    private List outliers;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " The outliers. "
    },
    {
        "class_name": "org.jfree.data.statistics.HistogramBin",
        "src_path": "source/org/jfree/data/statistics/HistogramBin.java",
        "signature": "org.jfree.data.statistics.HistogramBin.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7614685080015589931L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.statistics.HistogramBin",
        "src_path": "source/org/jfree/data/statistics/HistogramBin.java",
        "signature": "org.jfree.data.statistics.HistogramBin.count",
        "snippet": "    private int count;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The number of items in the bin. "
    },
    {
        "class_name": "org.jfree.data.statistics.HistogramBin",
        "src_path": "source/org/jfree/data/statistics/HistogramBin.java",
        "signature": "org.jfree.data.statistics.HistogramBin.startBoundary",
        "snippet": "    private double startBoundary;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The start boundary. "
    },
    {
        "class_name": "org.jfree.data.statistics.HistogramBin",
        "src_path": "source/org/jfree/data/statistics/HistogramBin.java",
        "signature": "org.jfree.data.statistics.HistogramBin.endBoundary",
        "snippet": "    private double endBoundary;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The end boundary. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.data",
        "snippet": "    private KeyedObjects2D data;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Storage for the data. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.minimumRangeValue",
        "snippet": "    private double minimumRangeValue;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The minimum range value. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.minimumRangeValueRow",
        "snippet": "    private int minimumRangeValueRow;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The row index for the minimum range value. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.minimumRangeValueColumn",
        "snippet": "    private int minimumRangeValueColumn;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The column index for the minimum range value. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.minimumRangeValueIncStdDev",
        "snippet": "    private double minimumRangeValueIncStdDev;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The minimum range value including the standard deviation. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.minimumRangeValueIncStdDevRow",
        "snippet": "    private int minimumRangeValueIncStdDevRow;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " \r\n     * The row index for the minimum range value (including the standard \r\n     * deviation). \r\n     "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.minimumRangeValueIncStdDevColumn",
        "snippet": "    private int minimumRangeValueIncStdDevColumn;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " \r\n     * The column index for the minimum range value (including the standard \r\n     * deviation). \r\n     "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.maximumRangeValue",
        "snippet": "    private double maximumRangeValue;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " The maximum range value. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.maximumRangeValueRow",
        "snippet": "    private int maximumRangeValueRow;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " The row index for the maximum range value. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.maximumRangeValueColumn",
        "snippet": "    private int maximumRangeValueColumn;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " The column index for the maximum range value. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.maximumRangeValueIncStdDev",
        "snippet": "    private double maximumRangeValueIncStdDev;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " The maximum range value including the standard deviation. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.maximumRangeValueIncStdDevRow",
        "snippet": "    private int maximumRangeValueIncStdDevRow;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " \r\n     * The row index for the maximum range value (including the standard \r\n     * deviation). \r\n     "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.maximumRangeValueIncStdDevColumn",
        "snippet": "    private int maximumRangeValueIncStdDevColumn;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " \r\n     * The column index for the maximum range value (including the standard \r\n     * deviation). \r\n     "
    },
    {
        "class_name": "org.jfree.data.statistics.SimpleHistogramBin",
        "src_path": "source/org/jfree/data/statistics/SimpleHistogramBin.java",
        "signature": "org.jfree.data.statistics.SimpleHistogramBin.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3480862537505941742L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.statistics.SimpleHistogramBin",
        "src_path": "source/org/jfree/data/statistics/SimpleHistogramBin.java",
        "signature": "org.jfree.data.statistics.SimpleHistogramBin.lowerBound",
        "snippet": "    private double lowerBound;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The lower bound for the bin. "
    },
    {
        "class_name": "org.jfree.data.statistics.SimpleHistogramBin",
        "src_path": "source/org/jfree/data/statistics/SimpleHistogramBin.java",
        "signature": "org.jfree.data.statistics.SimpleHistogramBin.upperBound",
        "snippet": "    private double upperBound;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The upper bound for the bin. "
    },
    {
        "class_name": "org.jfree.data.statistics.SimpleHistogramBin",
        "src_path": "source/org/jfree/data/statistics/SimpleHistogramBin.java",
        "signature": "org.jfree.data.statistics.SimpleHistogramBin.includeLowerBound",
        "snippet": "    private boolean includeLowerBound;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " \r\n     * A flag that controls whether the lower bound is included in the bin \r\n     * range. \r\n     "
    },
    {
        "class_name": "org.jfree.data.statistics.SimpleHistogramBin",
        "src_path": "source/org/jfree/data/statistics/SimpleHistogramBin.java",
        "signature": "org.jfree.data.statistics.SimpleHistogramBin.includeUpperBound",
        "snippet": "    private boolean includeUpperBound;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " \r\n     * A flag that controls whether the upper bound is included in the bin \r\n     * range. \r\n     "
    },
    {
        "class_name": "org.jfree.data.statistics.SimpleHistogramBin",
        "src_path": "source/org/jfree/data/statistics/SimpleHistogramBin.java",
        "signature": "org.jfree.data.statistics.SimpleHistogramBin.itemCount",
        "snippet": "    private int itemCount;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The item count. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.seriesKey",
        "snippet": "    private Comparable seriesKey;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The series key. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.dates",
        "snippet": "    private List dates;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Storage for the dates. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.items",
        "snippet": "    private List items;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " Storage for the box and whisker statistics. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.minimumRangeValue",
        "snippet": "    private Number minimumRangeValue;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " The minimum range value. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.maximumRangeValue",
        "snippet": "    private Number maximumRangeValue;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " The maximum range value. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.rangeBounds",
        "snippet": "    private Range rangeBounds;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " The range of values. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.outlierCoefficient",
        "snippet": "    private double outlierCoefficient = 1.5;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " \r\n     * The coefficient used to calculate outliers. Tukey's default value is \r\n     * 1.5 (see EDA) Any value which is greater than Q3 + (interquartile range \r\n     * * outlier coefficient) is considered to be an outlier.  Can be altered \r\n     * if the data is particularly skewed.\r\n     "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.faroutCoefficient",
        "snippet": "    private double faroutCoefficient = 2.0;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " \r\n     * The coefficient used to calculate farouts. Tukey's default value is 2 \r\n     * (see EDA) Any value which is greater than Q3 + (interquartile range * \r\n     * farout coefficient) is considered to be a farout.  Can be altered if the \r\n     * data is particularly skewed.\r\n     "
    },
    {
        "class_name": "org.jfree.data.function.NormalDistributionFunction2D",
        "src_path": "source/org/jfree/data/function/NormalDistributionFunction2D.java",
        "signature": "org.jfree.data.function.NormalDistributionFunction2D.mean",
        "snippet": "    private double mean;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " The mean. "
    },
    {
        "class_name": "org.jfree.data.function.NormalDistributionFunction2D",
        "src_path": "source/org/jfree/data/function/NormalDistributionFunction2D.java",
        "signature": "org.jfree.data.function.NormalDistributionFunction2D.std",
        "snippet": "    private double std;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The standard deviation. "
    },
    {
        "class_name": "org.jfree.data.function.PowerFunction2D",
        "src_path": "source/org/jfree/data/function/PowerFunction2D.java",
        "signature": "org.jfree.data.function.PowerFunction2D.a",
        "snippet": "    private double a;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " The 'a' coefficient. "
    },
    {
        "class_name": "org.jfree.data.function.PowerFunction2D",
        "src_path": "source/org/jfree/data/function/PowerFunction2D.java",
        "signature": "org.jfree.data.function.PowerFunction2D.b",
        "snippet": "    private double b;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The 'b' coefficient. "
    },
    {
        "class_name": "org.jfree.data.function.LineFunction2D",
        "src_path": "source/org/jfree/data/function/LineFunction2D.java",
        "signature": "org.jfree.data.function.LineFunction2D.a",
        "snippet": "    private double a;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " The intercept. "
    },
    {
        "class_name": "org.jfree.data.function.LineFunction2D",
        "src_path": "source/org/jfree/data/function/LineFunction2D.java",
        "signature": "org.jfree.data.function.LineFunction2D.b",
        "snippet": "    private double b;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The slope of the line. "
    },
    {
        "class_name": "org.jfree.data.xml.PieDatasetHandler",
        "src_path": "source/org/jfree/data/xml/PieDatasetHandler.java",
        "signature": "org.jfree.data.xml.PieDatasetHandler.dataset",
        "snippet": "    private DefaultPieDataset dataset;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The pie dataset under construction. "
    },
    {
        "class_name": "org.jfree.data.xml.DatasetTags",
        "src_path": "source/org/jfree/data/xml/DatasetTags.java",
        "signature": "org.jfree.data.xml.DatasetTags.PIEDATASET_TAG",
        "snippet": "    public static final String PIEDATASET_TAG = \"PieDataset\";",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The 'PieDataset' element name. "
    },
    {
        "class_name": "org.jfree.data.xml.DatasetTags",
        "src_path": "source/org/jfree/data/xml/DatasetTags.java",
        "signature": "org.jfree.data.xml.DatasetTags.CATEGORYDATASET_TAG",
        "snippet": "    public static final String CATEGORYDATASET_TAG = \"CategoryDataset\";",
        "begin_line": 52,
        "end_line": 52,
        "comment": " The 'CategoryDataset' element name. "
    },
    {
        "class_name": "org.jfree.data.xml.DatasetTags",
        "src_path": "source/org/jfree/data/xml/DatasetTags.java",
        "signature": "org.jfree.data.xml.DatasetTags.SERIES_TAG",
        "snippet": "    public static final String SERIES_TAG = \"Series\";",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The 'Series' element name. "
    },
    {
        "class_name": "org.jfree.data.xml.DatasetTags",
        "src_path": "source/org/jfree/data/xml/DatasetTags.java",
        "signature": "org.jfree.data.xml.DatasetTags.ITEM_TAG",
        "snippet": "    public static final String ITEM_TAG = \"Item\";",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The 'Item' element name. "
    },
    {
        "class_name": "org.jfree.data.xml.DatasetTags",
        "src_path": "source/org/jfree/data/xml/DatasetTags.java",
        "signature": "org.jfree.data.xml.DatasetTags.KEY_TAG",
        "snippet": "    public static final String KEY_TAG = \"Key\";",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The 'Key' element name. "
    },
    {
        "class_name": "org.jfree.data.xml.DatasetTags",
        "src_path": "source/org/jfree/data/xml/DatasetTags.java",
        "signature": "org.jfree.data.xml.DatasetTags.VALUE_TAG",
        "snippet": "    public static final String VALUE_TAG = \"Value\";",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The 'Value' element name. "
    },
    {
        "class_name": "org.jfree.data.xml.CategoryDatasetHandler",
        "src_path": "source/org/jfree/data/xml/CategoryDatasetHandler.java",
        "signature": "org.jfree.data.xml.CategoryDatasetHandler.dataset",
        "snippet": "    private DefaultCategoryDataset dataset;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The dataset under construction. "
    },
    {
        "class_name": "org.jfree.data.xml.ValueHandler",
        "src_path": "source/org/jfree/data/xml/ValueHandler.java",
        "signature": "org.jfree.data.xml.ValueHandler.rootHandler",
        "snippet": "    private RootHandler rootHandler;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The root handler. "
    },
    {
        "class_name": "org.jfree.data.xml.ValueHandler",
        "src_path": "source/org/jfree/data/xml/ValueHandler.java",
        "signature": "org.jfree.data.xml.ValueHandler.itemHandler",
        "snippet": "    private ItemHandler itemHandler;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The item handler. "
    },
    {
        "class_name": "org.jfree.data.xml.ValueHandler",
        "src_path": "source/org/jfree/data/xml/ValueHandler.java",
        "signature": "org.jfree.data.xml.ValueHandler.currentText",
        "snippet": "    private StringBuffer currentText;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Storage for the current CDATA "
    },
    {
        "class_name": "org.jfree.data.xml.RootHandler",
        "src_path": "source/org/jfree/data/xml/RootHandler.java",
        "signature": "org.jfree.data.xml.RootHandler.subHandlers",
        "snippet": "    private Stack subHandlers;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The sub-handlers. "
    },
    {
        "class_name": "org.jfree.data.xml.KeyHandler",
        "src_path": "source/org/jfree/data/xml/KeyHandler.java",
        "signature": "org.jfree.data.xml.KeyHandler.rootHandler",
        "snippet": "    private RootHandler rootHandler;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The root handler. "
    },
    {
        "class_name": "org.jfree.data.xml.KeyHandler",
        "src_path": "source/org/jfree/data/xml/KeyHandler.java",
        "signature": "org.jfree.data.xml.KeyHandler.itemHandler",
        "snippet": "    private ItemHandler itemHandler;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The item handler. "
    },
    {
        "class_name": "org.jfree.data.xml.KeyHandler",
        "src_path": "source/org/jfree/data/xml/KeyHandler.java",
        "signature": "org.jfree.data.xml.KeyHandler.currentText",
        "snippet": "    private StringBuffer currentText;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Storage for the current CDATA "
    },
    {
        "class_name": "org.jfree.data.xml.CategorySeriesHandler",
        "src_path": "source/org/jfree/data/xml/CategorySeriesHandler.java",
        "signature": "org.jfree.data.xml.CategorySeriesHandler.root",
        "snippet": "    private RootHandler root;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The root handler. "
    },
    {
        "class_name": "org.jfree.data.xml.CategorySeriesHandler",
        "src_path": "source/org/jfree/data/xml/CategorySeriesHandler.java",
        "signature": "org.jfree.data.xml.CategorySeriesHandler.seriesKey",
        "snippet": "    private Comparable seriesKey;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The series key. "
    },
    {
        "class_name": "org.jfree.data.xml.CategorySeriesHandler",
        "src_path": "source/org/jfree/data/xml/CategorySeriesHandler.java",
        "signature": "org.jfree.data.xml.CategorySeriesHandler.values",
        "snippet": "    private DefaultKeyedValues values;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The values. "
    },
    {
        "class_name": "org.jfree.data.xml.ItemHandler",
        "src_path": "source/org/jfree/data/xml/ItemHandler.java",
        "signature": "org.jfree.data.xml.ItemHandler.root",
        "snippet": "    private RootHandler root;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The root handler. "
    },
    {
        "class_name": "org.jfree.data.xml.ItemHandler",
        "src_path": "source/org/jfree/data/xml/ItemHandler.java",
        "signature": "org.jfree.data.xml.ItemHandler.parent",
        "snippet": "    private DefaultHandler parent;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The parent handler (can be the same as root, but not always). "
    },
    {
        "class_name": "org.jfree.data.xml.ItemHandler",
        "src_path": "source/org/jfree/data/xml/ItemHandler.java",
        "signature": "org.jfree.data.xml.ItemHandler.key",
        "snippet": "    private Comparable key;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The key. "
    },
    {
        "class_name": "org.jfree.data.xml.ItemHandler",
        "src_path": "source/org/jfree/data/xml/ItemHandler.java",
        "signature": "org.jfree.data.xml.ItemHandler.value",
        "snippet": "    private Number value;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The value. "
    },
    {
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8168173757291644622L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.data",
        "snippet": "    private DefaultKeyedValues2D data;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " A storage structure for the data. "
    },
    {
        "class_name": "org.jfree.data.category.CategoryToPieDataset",
        "src_path": "source/org/jfree/data/category/CategoryToPieDataset.java",
        "signature": "org.jfree.data.category.CategoryToPieDataset.serialVersionUID",
        "snippet": "    static final long serialVersionUID = 5516396319762189617L;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "org.jfree.data.category.CategoryToPieDataset",
        "src_path": "source/org/jfree/data/category/CategoryToPieDataset.java",
        "signature": "org.jfree.data.category.CategoryToPieDataset.source",
        "snippet": "    private CategoryDataset source;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The source. "
    },
    {
        "class_name": "org.jfree.data.category.CategoryToPieDataset",
        "src_path": "source/org/jfree/data/category/CategoryToPieDataset.java",
        "signature": "org.jfree.data.category.CategoryToPieDataset.extract",
        "snippet": "    private TableOrder extract;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The extract type. "
    },
    {
        "class_name": "org.jfree.data.category.CategoryToPieDataset",
        "src_path": "source/org/jfree/data/category/CategoryToPieDataset.java",
        "signature": "org.jfree.data.category.CategoryToPieDataset.index",
        "snippet": "    private int index;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The row or column index. "
    },
    {
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.seriesKeys",
        "snippet": "    private Comparable[] seriesKeys;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The series keys. "
    },
    {
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.categoryKeys",
        "snippet": "    private Comparable[] categoryKeys;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The category keys. "
    },
    {
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.startData",
        "snippet": "    private Number[][] startData;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Storage for the start value data. "
    },
    {
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.endData",
        "snippet": "    private Number[][] endData;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Storage for the end value data. "
    },
    {
        "class_name": "org.jfree.data.io.CSV",
        "src_path": "source/org/jfree/data/io/CSV.java",
        "signature": "org.jfree.data.io.CSV.fieldDelimiter",
        "snippet": "    private char fieldDelimiter;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The field delimiter. "
    },
    {
        "class_name": "org.jfree.data.io.CSV",
        "src_path": "source/org/jfree/data/io/CSV.java",
        "signature": "org.jfree.data.io.CSV.textDelimiter",
        "snippet": "    private char textDelimiter;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The text delimiter. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2235346966016401302L;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.period",
        "snippet": "    private RegularTimePeriod period;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The time period. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.value",
        "snippet": "    private Number value;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The value associated with the time period. "
    },
    {
        "class_name": "org.jfree.data.time.Month",
        "src_path": "source/org/jfree/data/time/Month.java",
        "signature": "org.jfree.data.time.Month.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5090216912548722570L;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.Month",
        "src_path": "source/org/jfree/data/time/Month.java",
        "signature": "org.jfree.data.time.Month.month",
        "snippet": "    private int month;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The month (1-12). "
    },
    {
        "class_name": "org.jfree.data.time.Month",
        "src_path": "source/org/jfree/data/time/Month.java",
        "signature": "org.jfree.data.time.Month.year",
        "snippet": "    private int year;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The year in which the month falls. "
    },
    {
        "class_name": "org.jfree.data.time.Month",
        "src_path": "source/org/jfree/data/time/Month.java",
        "signature": "org.jfree.data.time.Month.firstMillisecond",
        "snippet": "    private long firstMillisecond;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The first millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.Month",
        "src_path": "source/org/jfree/data/time/Month.java",
        "signature": "org.jfree.data.time.Month.lastMillisecond",
        "snippet": "    private long lastMillisecond;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " The last millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -293716040467423637L;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS",
        "snippet": "    public static final DateFormatSymbols\n        DATE_FORMAT_SYMBOLS = new SimpleDateFormat().getDateFormatSymbols();",
        "begin_line": 91,
        "end_line": 92,
        "comment": " Date format symbols. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND",
        "snippet": "    public static final int SERIAL_LOWER_BOUND = 2;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " The serial number for 1 January 1900. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND",
        "snippet": "    public static final int SERIAL_UPPER_BOUND = 2958465;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " The serial number for 31 December 9999. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED",
        "snippet": "    public static final int MINIMUM_YEAR_SUPPORTED = 1900;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " The lowest year value supported by this date format. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED",
        "snippet": "    public static final int MAXIMUM_YEAR_SUPPORTED = 9999;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " The highest year value supported by this date format. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.MONDAY",
        "snippet": "    public static final int MONDAY = Calendar.MONDAY;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " Useful constant for Monday. Equivalent to java.util.Calendar.MONDAY. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.TUESDAY",
        "snippet": "    public static final int TUESDAY = Calendar.TUESDAY;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " \n     * Useful constant for Tuesday. Equivalent to java.util.Calendar.TUESDAY. \n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.WEDNESDAY",
        "snippet": "    public static final int WEDNESDAY = Calendar.WEDNESDAY;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " \n     * Useful constant for Wednesday. Equivalent to \n     * java.util.Calendar.WEDNESDAY. \n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.THURSDAY",
        "snippet": "    public static final int THURSDAY = Calendar.THURSDAY;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " \n     * Useful constant for Thrusday. Equivalent to java.util.Calendar.THURSDAY. \n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.FRIDAY",
        "snippet": "    public static final int FRIDAY = Calendar.FRIDAY;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " Useful constant for Friday. Equivalent to java.util.Calendar.FRIDAY. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.SATURDAY",
        "snippet": "    public static final int SATURDAY = Calendar.SATURDAY;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " \n     * Useful constant for Saturday. Equivalent to java.util.Calendar.SATURDAY.\n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.SUNDAY",
        "snippet": "    public static final int SUNDAY = Calendar.SUNDAY;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " Useful constant for Sunday. Equivalent to java.util.Calendar.SUNDAY. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH",
        "snippet": "    static final int[] LAST_DAY_OF_MONTH =\n        {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};",
        "begin_line": 137,
        "end_line": 138,
        "comment": " The number of days in each month in non leap years. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_MONTH",
        "snippet": "    static final int[] AGGREGATE_DAYS_TO_END_OF_MONTH =\n        {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};",
        "begin_line": 141,
        "end_line": 142,
        "comment": " The number of days in a (non-leap) year up to the end of each month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH",
        "snippet": "    static final int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH =\n        {0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};",
        "begin_line": 145,
        "end_line": 146,
        "comment": " The number of days in a year up to the end of the preceding month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH",
        "snippet": "    static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH =\n        {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};",
        "begin_line": 149,
        "end_line": 150,
        "comment": " The number of days in a leap year up to the end of each month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH",
        "snippet": "    static final int[] \n        LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH =\n            {0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};",
        "begin_line": 155,
        "end_line": 157,
        "comment": " \n     * The number of days in a leap year up to the end of the preceding month. \n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH",
        "snippet": "    public static final int FIRST_WEEK_IN_MONTH = 1;",
        "begin_line": 160,
        "end_line": 160,
        "comment": " A useful constant for referring to the first week in a month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH",
        "snippet": "    public static final int SECOND_WEEK_IN_MONTH = 2;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " A useful constant for referring to the second week in a month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH",
        "snippet": "    public static final int THIRD_WEEK_IN_MONTH = 3;",
        "begin_line": 166,
        "end_line": 166,
        "comment": " A useful constant for referring to the third week in a month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH",
        "snippet": "    public static final int FOURTH_WEEK_IN_MONTH = 4;",
        "begin_line": 169,
        "end_line": 169,
        "comment": " A useful constant for referring to the fourth week in a month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH",
        "snippet": "    public static final int LAST_WEEK_IN_MONTH = 0;",
        "begin_line": 172,
        "end_line": 172,
        "comment": " A useful constant for referring to the last week in a month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.INCLUDE_NONE",
        "snippet": "    public static final int INCLUDE_NONE = 0;",
        "begin_line": 175,
        "end_line": 175,
        "comment": " Useful range constant. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.INCLUDE_FIRST",
        "snippet": "    public static final int INCLUDE_FIRST = 1;",
        "begin_line": 178,
        "end_line": 178,
        "comment": " Useful range constant. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.INCLUDE_SECOND",
        "snippet": "    public static final int INCLUDE_SECOND = 2;",
        "begin_line": 181,
        "end_line": 181,
        "comment": " Useful range constant. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.INCLUDE_BOTH",
        "snippet": "    public static final int INCLUDE_BOTH = 3;",
        "begin_line": 184,
        "end_line": 184,
        "comment": " Useful range constant. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.PRECEDING",
        "snippet": "    public static final int PRECEDING = -1;",
        "begin_line": 190,
        "end_line": 190,
        "comment": " \n     * Useful constant for specifying a day of the week relative to a fixed \n     * date. \n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.NEAREST",
        "snippet": "    public static final int NEAREST = 0;",
        "begin_line": 196,
        "end_line": 196,
        "comment": " \n     * Useful constant for specifying a day of the week relative to a fixed \n     * date. \n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.FOLLOWING",
        "snippet": "    public static final int FOLLOWING = 1;",
        "begin_line": 202,
        "end_line": 202,
        "comment": " \n     * Useful constant for specifying a day of the week relative to a fixed \n     * date. \n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.description",
        "snippet": "    private String description;",
        "begin_line": 205,
        "end_line": 205,
        "comment": " A description for the date. "
    },
    {
        "class_name": "org.jfree.data.time.Millisecond",
        "src_path": "source/org/jfree/data/time/Millisecond.java",
        "signature": "org.jfree.data.time.Millisecond.serialVersionUID",
        "snippet": "    static final long serialVersionUID = -5316836467277638485L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.Millisecond",
        "src_path": "source/org/jfree/data/time/Millisecond.java",
        "signature": "org.jfree.data.time.Millisecond.FIRST_MILLISECOND_IN_SECOND",
        "snippet": "    public static final int FIRST_MILLISECOND_IN_SECOND = 0;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " A constant for the first millisecond in a second. "
    },
    {
        "class_name": "org.jfree.data.time.Millisecond",
        "src_path": "source/org/jfree/data/time/Millisecond.java",
        "signature": "org.jfree.data.time.Millisecond.LAST_MILLISECOND_IN_SECOND",
        "snippet": "    public static final int LAST_MILLISECOND_IN_SECOND = 999;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " A constant for the last millisecond in a second. "
    },
    {
        "class_name": "org.jfree.data.time.Millisecond",
        "src_path": "source/org/jfree/data/time/Millisecond.java",
        "signature": "org.jfree.data.time.Millisecond.day",
        "snippet": "    private Day day;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The day. "
    },
    {
        "class_name": "org.jfree.data.time.Millisecond",
        "src_path": "source/org/jfree/data/time/Millisecond.java",
        "signature": "org.jfree.data.time.Millisecond.hour",
        "snippet": "    private byte hour;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The hour in the day. "
    },
    {
        "class_name": "org.jfree.data.time.Millisecond",
        "src_path": "source/org/jfree/data/time/Millisecond.java",
        "signature": "org.jfree.data.time.Millisecond.minute",
        "snippet": "    private byte minute;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The minute. "
    },
    {
        "class_name": "org.jfree.data.time.Millisecond",
        "src_path": "source/org/jfree/data/time/Millisecond.java",
        "signature": "org.jfree.data.time.Millisecond.second",
        "snippet": "    private byte second;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The second. "
    },
    {
        "class_name": "org.jfree.data.time.Millisecond",
        "src_path": "source/org/jfree/data/time/Millisecond.java",
        "signature": "org.jfree.data.time.Millisecond.millisecond",
        "snippet": "    private int millisecond;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.Millisecond",
        "src_path": "source/org/jfree/data/time/Millisecond.java",
        "signature": "org.jfree.data.time.Millisecond.firstMillisecond",
        "snippet": "    private long firstMillisecond;",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\r\n     * The pegged millisecond. \r\n     "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValuesCollection",
        "src_path": "source/org/jfree/data/time/TimePeriodValuesCollection.java",
        "signature": "org.jfree.data.time.TimePeriodValuesCollection.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3077934065236454199L;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValuesCollection",
        "src_path": "source/org/jfree/data/time/TimePeriodValuesCollection.java",
        "signature": "org.jfree.data.time.TimePeriodValuesCollection.data",
        "snippet": "    private List data;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Storage for the time series. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValuesCollection",
        "src_path": "source/org/jfree/data/time/TimePeriodValuesCollection.java",
        "signature": "org.jfree.data.time.TimePeriodValuesCollection.xPosition",
        "snippet": "    private TimePeriodAnchor xPosition;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " \r\n     * The position within a time period to return as the x-value (START, \r\n     * MIDDLE or END). \r\n     "
    },
    {
        "class_name": "org.jfree.data.time.Minute",
        "src_path": "source/org/jfree/data/time/Minute.java",
        "signature": "org.jfree.data.time.Minute.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2144572840034842871L;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.Minute",
        "src_path": "source/org/jfree/data/time/Minute.java",
        "signature": "org.jfree.data.time.Minute.FIRST_MINUTE_IN_HOUR",
        "snippet": "    public static final int FIRST_MINUTE_IN_HOUR = 0;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Useful constant for the first minute in a day. "
    },
    {
        "class_name": "org.jfree.data.time.Minute",
        "src_path": "source/org/jfree/data/time/Minute.java",
        "signature": "org.jfree.data.time.Minute.LAST_MINUTE_IN_HOUR",
        "snippet": "    public static final int LAST_MINUTE_IN_HOUR = 59;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Useful constant for the last minute in a day. "
    },
    {
        "class_name": "org.jfree.data.time.Minute",
        "src_path": "source/org/jfree/data/time/Minute.java",
        "signature": "org.jfree.data.time.Minute.day",
        "snippet": "    private Day day;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The day. "
    },
    {
        "class_name": "org.jfree.data.time.Minute",
        "src_path": "source/org/jfree/data/time/Minute.java",
        "signature": "org.jfree.data.time.Minute.hour",
        "snippet": "    private byte hour;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The hour in which the minute falls. "
    },
    {
        "class_name": "org.jfree.data.time.Minute",
        "src_path": "source/org/jfree/data/time/Minute.java",
        "signature": "org.jfree.data.time.Minute.minute",
        "snippet": "    private byte minute;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " The minute. "
    },
    {
        "class_name": "org.jfree.data.time.Minute",
        "src_path": "source/org/jfree/data/time/Minute.java",
        "signature": "org.jfree.data.time.Minute.firstMillisecond",
        "snippet": "    private long firstMillisecond;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " The first millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.Minute",
        "src_path": "source/org/jfree/data/time/Minute.java",
        "signature": "org.jfree.data.time.Minute.lastMillisecond",
        "snippet": "    private long lastMillisecond;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The last millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "signature": "org.jfree.data.time.TimePeriodValues.serialVersionUID",
        "snippet": "    static final long serialVersionUID = -2210593619794989709L;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "signature": "org.jfree.data.time.TimePeriodValues.DEFAULT_DOMAIN_DESCRIPTION",
        "snippet": "    protected static final String DEFAULT_DOMAIN_DESCRIPTION = \"Time\";",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Default value for the domain description. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "signature": "org.jfree.data.time.TimePeriodValues.DEFAULT_RANGE_DESCRIPTION",
        "snippet": "    protected static final String DEFAULT_RANGE_DESCRIPTION = \"Value\";",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Default value for the range description. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "signature": "org.jfree.data.time.TimePeriodValues.domain",
        "snippet": "    private String domain;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " A description of the domain. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "signature": "org.jfree.data.time.TimePeriodValues.range",
        "snippet": "    private String range;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " A description of the range. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "signature": "org.jfree.data.time.TimePeriodValues.data",
        "snippet": "    private List data;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The list of data pairs in the series. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "signature": "org.jfree.data.time.TimePeriodValues.minStartIndex",
        "snippet": "    private int minStartIndex = -1;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Index of the time period with the minimum start milliseconds. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "signature": "org.jfree.data.time.TimePeriodValues.maxStartIndex",
        "snippet": "    private int maxStartIndex = -1;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Index of the time period with the maximum start milliseconds. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "signature": "org.jfree.data.time.TimePeriodValues.minMiddleIndex",
        "snippet": "    private int minMiddleIndex = -1;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Index of the time period with the minimum middle milliseconds. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "signature": "org.jfree.data.time.TimePeriodValues.maxMiddleIndex",
        "snippet": "    private int maxMiddleIndex = -1;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Index of the time period with the maximum middle milliseconds. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "signature": "org.jfree.data.time.TimePeriodValues.minEndIndex",
        "snippet": "    private int minEndIndex = -1;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " Index of the time period with the minimum end milliseconds. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "signature": "org.jfree.data.time.TimePeriodValues.maxEndIndex",
        "snippet": "    private int maxEndIndex = -1;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " Index of the time period with the maximum end milliseconds. "
    },
    {
        "class_name": "org.jfree.data.time.SimpleTimePeriod",
        "src_path": "source/org/jfree/data/time/SimpleTimePeriod.java",
        "signature": "org.jfree.data.time.SimpleTimePeriod.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8684672361131829554L;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.SimpleTimePeriod",
        "src_path": "source/org/jfree/data/time/SimpleTimePeriod.java",
        "signature": "org.jfree.data.time.SimpleTimePeriod.start",
        "snippet": "    private Date start;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The start date/time. "
    },
    {
        "class_name": "org.jfree.data.time.SimpleTimePeriod",
        "src_path": "source/org/jfree/data/time/SimpleTimePeriod.java",
        "signature": "org.jfree.data.time.SimpleTimePeriod.end",
        "snippet": "    private Date end;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The end date/time. "
    },
    {
        "class_name": "org.jfree.data.time.FixedMillisecond",
        "src_path": "source/org/jfree/data/time/FixedMillisecond.java",
        "signature": "org.jfree.data.time.FixedMillisecond.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7867521484545646931L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.FixedMillisecond",
        "src_path": "source/org/jfree/data/time/FixedMillisecond.java",
        "signature": "org.jfree.data.time.FixedMillisecond.time",
        "snippet": "    private Date time;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "signature": "org.jfree.data.time.SpreadsheetDate.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2039586705374454461L;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "signature": "org.jfree.data.time.SpreadsheetDate.serial",
        "snippet": "    private final int serial;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " \n     * The day number (1-Jan-1900 = 2, 2-Jan-1900 = 3, ..., 31-Dec-9999 = \n     * 2958465). \n     "
    },
    {
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "signature": "org.jfree.data.time.SpreadsheetDate.day",
        "snippet": "    private final int day;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " The day of the month (1 to 28, 29, 30 or 31 depending on the month). "
    },
    {
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "signature": "org.jfree.data.time.SpreadsheetDate.month",
        "snippet": "    private final int month;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " The month of the year (1 to 12). "
    },
    {
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "signature": "org.jfree.data.time.SpreadsheetDate.year",
        "snippet": "    private final int year;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " The year (1900 to 9999). "
    },
    {
        "class_name": "org.jfree.data.time.Second",
        "src_path": "source/org/jfree/data/time/Second.java",
        "signature": "org.jfree.data.time.Second.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6536564190712383466L;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.Second",
        "src_path": "source/org/jfree/data/time/Second.java",
        "signature": "org.jfree.data.time.Second.FIRST_SECOND_IN_MINUTE",
        "snippet": "    public static final int FIRST_SECOND_IN_MINUTE = 0;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Useful constant for the first second in a minute. "
    },
    {
        "class_name": "org.jfree.data.time.Second",
        "src_path": "source/org/jfree/data/time/Second.java",
        "signature": "org.jfree.data.time.Second.LAST_SECOND_IN_MINUTE",
        "snippet": "    public static final int LAST_SECOND_IN_MINUTE = 59;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Useful constant for the last second in a minute. "
    },
    {
        "class_name": "org.jfree.data.time.Second",
        "src_path": "source/org/jfree/data/time/Second.java",
        "signature": "org.jfree.data.time.Second.day",
        "snippet": "    private Day day;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The day. "
    },
    {
        "class_name": "org.jfree.data.time.Second",
        "src_path": "source/org/jfree/data/time/Second.java",
        "signature": "org.jfree.data.time.Second.hour",
        "snippet": "    private byte hour;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The hour of the day. "
    },
    {
        "class_name": "org.jfree.data.time.Second",
        "src_path": "source/org/jfree/data/time/Second.java",
        "signature": "org.jfree.data.time.Second.minute",
        "snippet": "    private byte minute;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " The minute. "
    },
    {
        "class_name": "org.jfree.data.time.Second",
        "src_path": "source/org/jfree/data/time/Second.java",
        "signature": "org.jfree.data.time.Second.second",
        "snippet": "    private byte second;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " The second. "
    },
    {
        "class_name": "org.jfree.data.time.Second",
        "src_path": "source/org/jfree/data/time/Second.java",
        "signature": "org.jfree.data.time.Second.firstMillisecond",
        "snippet": "    private long firstMillisecond;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " \r\n     * The first millisecond.  We don't store the last millisecond, because it\r\n     * is always firstMillisecond + 999L.\r\n     "
    },
    {
        "class_name": "org.jfree.data.time.Hour",
        "src_path": "source/org/jfree/data/time/Hour.java",
        "signature": "org.jfree.data.time.Hour.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -835471579831937652L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.Hour",
        "src_path": "source/org/jfree/data/time/Hour.java",
        "signature": "org.jfree.data.time.Hour.FIRST_HOUR_IN_DAY",
        "snippet": "    public static final int FIRST_HOUR_IN_DAY = 0;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Useful constant for the first hour in the day. "
    },
    {
        "class_name": "org.jfree.data.time.Hour",
        "src_path": "source/org/jfree/data/time/Hour.java",
        "signature": "org.jfree.data.time.Hour.LAST_HOUR_IN_DAY",
        "snippet": "    public static final int LAST_HOUR_IN_DAY = 23;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Useful constant for the last hour in the day. "
    },
    {
        "class_name": "org.jfree.data.time.Hour",
        "src_path": "source/org/jfree/data/time/Hour.java",
        "signature": "org.jfree.data.time.Hour.day",
        "snippet": "    private Day day;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " The day. "
    },
    {
        "class_name": "org.jfree.data.time.Hour",
        "src_path": "source/org/jfree/data/time/Hour.java",
        "signature": "org.jfree.data.time.Hour.hour",
        "snippet": "    private byte hour;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " The hour. "
    },
    {
        "class_name": "org.jfree.data.time.Hour",
        "src_path": "source/org/jfree/data/time/Hour.java",
        "signature": "org.jfree.data.time.Hour.firstMillisecond",
        "snippet": "    private long firstMillisecond;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " The first millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.Hour",
        "src_path": "source/org/jfree/data/time/Hour.java",
        "signature": "org.jfree.data.time.Hour.lastMillisecond",
        "snippet": "    private long lastMillisecond;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " The last millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/TimeSeriesCollection.java",
        "signature": "org.jfree.data.time.TimeSeriesCollection.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 834149929022371137L;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/TimeSeriesCollection.java",
        "signature": "org.jfree.data.time.TimeSeriesCollection.data",
        "snippet": "    private List data;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " Storage for the time series. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/TimeSeriesCollection.java",
        "signature": "org.jfree.data.time.TimeSeriesCollection.workingCalendar",
        "snippet": "    private Calendar workingCalendar;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " A working calendar (to recycle) "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/TimeSeriesCollection.java",
        "signature": "org.jfree.data.time.TimeSeriesCollection.xPosition",
        "snippet": "    private TimePeriodAnchor xPosition;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " \r\n     * The point within each time period that is used for the X value when this\r\n     * collection is used as an {@link org.jfree.data.xy.XYDataset}.  This can \r\n     * be the start, middle or end of the time period.   \r\n     "
    },
    {
        "class_name": "org.jfree.data.time.TimeTableXYDataset",
        "src_path": "source/org/jfree/data/time/TimeTableXYDataset.java",
        "signature": "org.jfree.data.time.TimeTableXYDataset.values",
        "snippet": "    private DefaultKeyedValues2D values;",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\r\n     * The data structure to store the values.  Each column represents\r\n     * a series (elsewhere in JFreeChart rows are typically used for series,\r\n     * but it doesn't matter that much since this data structure is private \r\n     * and symmetrical anyway), each row contains values for the same \r\n     * {@link RegularTimePeriod} (the rows are sorted into ascending order).\r\n     "
    },
    {
        "class_name": "org.jfree.data.time.TimeTableXYDataset",
        "src_path": "source/org/jfree/data/time/TimeTableXYDataset.java",
        "signature": "org.jfree.data.time.TimeTableXYDataset.domainIsPointsInTime",
        "snippet": "    private boolean domainIsPointsInTime;",
        "begin_line": 97,
        "end_line": 97,
        "comment": "\r\n     * A flag that indicates that the domain is 'points in time'.  If this flag\r\n     * is true, only the x-value (and not the x-interval) is used to determine \r\n     * the range of values in the domain.\r\n     "
    },
    {
        "class_name": "org.jfree.data.time.TimeTableXYDataset",
        "src_path": "source/org/jfree/data/time/TimeTableXYDataset.java",
        "signature": "org.jfree.data.time.TimeTableXYDataset.xPosition",
        "snippet": "    private TimePeriodAnchor xPosition;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " \r\n     * The point within each time period that is used for the X value when this\r\n     * collection is used as an {@link org.jfree.data.xy.XYDataset}.  This can \r\n     * be the start, middle or end of the time period.   \r\n     "
    },
    {
        "class_name": "org.jfree.data.time.TimeTableXYDataset",
        "src_path": "source/org/jfree/data/time/TimeTableXYDataset.java",
        "signature": "org.jfree.data.time.TimeTableXYDataset.workingCalendar",
        "snippet": "    private Calendar workingCalendar;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " A working calendar (to recycle) "
    },
    {
        "class_name": "org.jfree.data.time.RegularTimePeriod",
        "src_path": "source/org/jfree/data/time/RegularTimePeriod.java",
        "signature": "org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE",
        "snippet": "    public static final TimeZone DEFAULT_TIME_ZONE = TimeZone.getDefault();",
        "begin_line": 161,
        "end_line": 161,
        "comment": " \r\n     * The default time zone. \r\n     "
    },
    {
        "class_name": "org.jfree.data.time.Quarter",
        "src_path": "source/org/jfree/data/time/Quarter.java",
        "signature": "org.jfree.data.time.Quarter.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3810061714380888671L;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.Quarter",
        "src_path": "source/org/jfree/data/time/Quarter.java",
        "signature": "org.jfree.data.time.Quarter.FIRST_QUARTER",
        "snippet": "    public static final int FIRST_QUARTER = 1;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Constant for quarter 1. "
    },
    {
        "class_name": "org.jfree.data.time.Quarter",
        "src_path": "source/org/jfree/data/time/Quarter.java",
        "signature": "org.jfree.data.time.Quarter.LAST_QUARTER",
        "snippet": "    public static final int LAST_QUARTER = 4;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Constant for quarter 4. "
    },
    {
        "class_name": "org.jfree.data.time.Quarter",
        "src_path": "source/org/jfree/data/time/Quarter.java",
        "signature": "org.jfree.data.time.Quarter.FIRST_MONTH_IN_QUARTER",
        "snippet": "    public static final int[] FIRST_MONTH_IN_QUARTER = {\n        0, MonthConstants.JANUARY, MonthConstants.APRIL, MonthConstants.JULY, \n        MonthConstants.OCTOBER\n    };",
        "begin_line": 84,
        "end_line": 87,
        "comment": " The first month in each quarter. "
    },
    {
        "class_name": "org.jfree.data.time.Quarter",
        "src_path": "source/org/jfree/data/time/Quarter.java",
        "signature": "org.jfree.data.time.Quarter.LAST_MONTH_IN_QUARTER",
        "snippet": "    public static final int[] LAST_MONTH_IN_QUARTER = {\n        0, MonthConstants.MARCH, MonthConstants.JUNE, MonthConstants.SEPTEMBER, \n        MonthConstants.DECEMBER\n    };",
        "begin_line": 90,
        "end_line": 93,
        "comment": " The last month in each quarter. "
    },
    {
        "class_name": "org.jfree.data.time.Quarter",
        "src_path": "source/org/jfree/data/time/Quarter.java",
        "signature": "org.jfree.data.time.Quarter.year",
        "snippet": "    private short year;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " The year in which the quarter falls. "
    },
    {
        "class_name": "org.jfree.data.time.Quarter",
        "src_path": "source/org/jfree/data/time/Quarter.java",
        "signature": "org.jfree.data.time.Quarter.quarter",
        "snippet": "    private byte quarter;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The quarter (1-4). "
    },
    {
        "class_name": "org.jfree.data.time.Quarter",
        "src_path": "source/org/jfree/data/time/Quarter.java",
        "signature": "org.jfree.data.time.Quarter.firstMillisecond",
        "snippet": "    private long firstMillisecond;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " The first millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.Quarter",
        "src_path": "source/org/jfree/data/time/Quarter.java",
        "signature": "org.jfree.data.time.Quarter.lastMillisecond",
        "snippet": "    private long lastMillisecond;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " The last millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeriesTableModel",
        "src_path": "source/org/jfree/data/time/TimeSeriesTableModel.java",
        "signature": "org.jfree.data.time.TimeSeriesTableModel.series",
        "snippet": "    private TimeSeries series;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The series. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeriesTableModel",
        "src_path": "source/org/jfree/data/time/TimeSeriesTableModel.java",
        "signature": "org.jfree.data.time.TimeSeriesTableModel.editable",
        "snippet": "    private boolean editable;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " A flag that controls whether the series is editable. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeriesTableModel",
        "src_path": "source/org/jfree/data/time/TimeSeriesTableModel.java",
        "signature": "org.jfree.data.time.TimeSeriesTableModel.newTimePeriod",
        "snippet": "    private RegularTimePeriod newTimePeriod;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The new time period. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeriesTableModel",
        "src_path": "source/org/jfree/data/time/TimeSeriesTableModel.java",
        "signature": "org.jfree.data.time.TimeSeriesTableModel.newValue",
        "snippet": "    private Number newValue;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The new value. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeries",
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "signature": "org.jfree.data.time.TimeSeries.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5032960206869675528L;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeries",
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "signature": "org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION",
        "snippet": "    protected static final String DEFAULT_DOMAIN_DESCRIPTION = \"Time\";",
        "begin_line": 106,
        "end_line": 106,
        "comment": " Default value for the domain description. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeries",
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "signature": "org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION",
        "snippet": "    protected static final String DEFAULT_RANGE_DESCRIPTION = \"Value\";",
        "begin_line": 109,
        "end_line": 109,
        "comment": " Default value for the range description. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeries",
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "signature": "org.jfree.data.time.TimeSeries.domain",
        "snippet": "    private String domain;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " A description of the domain. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeries",
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "signature": "org.jfree.data.time.TimeSeries.range",
        "snippet": "    private String range;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " A description of the range. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeries",
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "signature": "org.jfree.data.time.TimeSeries.timePeriodClass",
        "snippet": "    protected Class timePeriodClass;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " The type of period for the data. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeries",
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "signature": "org.jfree.data.time.TimeSeries.data",
        "snippet": "    protected List data;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " The list of data items in the series. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeries",
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "signature": "org.jfree.data.time.TimeSeries.maximumItemCount",
        "snippet": "    private int maximumItemCount;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " The maximum number of items for the series. "
    },
    {
        "class_name": "org.jfree.data.time.TimeSeries",
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "signature": "org.jfree.data.time.TimeSeries.maximumItemAge",
        "snippet": "    private long maximumItemAge;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " \r\n     * The maximum age of items for the series, specified as a number of\r\n     * time periods. \r\n     "
    },
    {
        "class_name": "org.jfree.data.time.Day",
        "src_path": "source/org/jfree/data/time/Day.java",
        "signature": "org.jfree.data.time.Day.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7082667380758962755L;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.Day",
        "src_path": "source/org/jfree/data/time/Day.java",
        "signature": "org.jfree.data.time.Day.DATE_FORMAT",
        "snippet": "    protected static final DateFormat DATE_FORMAT \n        = new SimpleDateFormat(\"yyyy-MM-dd\");",
        "begin_line": 83,
        "end_line": 84,
        "comment": " A standard date formatter. "
    },
    {
        "class_name": "org.jfree.data.time.Day",
        "src_path": "source/org/jfree/data/time/Day.java",
        "signature": "org.jfree.data.time.Day.DATE_FORMAT_SHORT",
        "snippet": "    protected static final DateFormat\n        DATE_FORMAT_SHORT = DateFormat.getDateInstance(DateFormat.SHORT);",
        "begin_line": 87,
        "end_line": 88,
        "comment": " A date formatter for the default locale. "
    },
    {
        "class_name": "org.jfree.data.time.Day",
        "src_path": "source/org/jfree/data/time/Day.java",
        "signature": "org.jfree.data.time.Day.DATE_FORMAT_MEDIUM",
        "snippet": "    protected static final DateFormat\n        DATE_FORMAT_MEDIUM = DateFormat.getDateInstance(DateFormat.MEDIUM);",
        "begin_line": 91,
        "end_line": 92,
        "comment": " A date formatter for the default locale. "
    },
    {
        "class_name": "org.jfree.data.time.Day",
        "src_path": "source/org/jfree/data/time/Day.java",
        "signature": "org.jfree.data.time.Day.DATE_FORMAT_LONG",
        "snippet": "    protected static final DateFormat\n        DATE_FORMAT_LONG = DateFormat.getDateInstance(DateFormat.LONG);",
        "begin_line": 95,
        "end_line": 96,
        "comment": " A date formatter for the default locale. "
    },
    {
        "class_name": "org.jfree.data.time.Day",
        "src_path": "source/org/jfree/data/time/Day.java",
        "signature": "org.jfree.data.time.Day.serialDate",
        "snippet": "    private SerialDate serialDate;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The day (uses SerialDate for convenience). "
    },
    {
        "class_name": "org.jfree.data.time.Day",
        "src_path": "source/org/jfree/data/time/Day.java",
        "signature": "org.jfree.data.time.Day.firstMillisecond",
        "snippet": "    private long firstMillisecond;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " The first millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.Day",
        "src_path": "source/org/jfree/data/time/Day.java",
        "signature": "org.jfree.data.time.Day.lastMillisecond",
        "snippet": "    private long lastMillisecond;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " The last millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValue",
        "src_path": "source/org/jfree/data/time/TimePeriodValue.java",
        "signature": "org.jfree.data.time.TimePeriodValue.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3390443360845711275L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValue",
        "src_path": "source/org/jfree/data/time/TimePeriodValue.java",
        "signature": "org.jfree.data.time.TimePeriodValue.period",
        "snippet": "    private TimePeriod period;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The time period. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodValue",
        "src_path": "source/org/jfree/data/time/TimePeriodValue.java",
        "signature": "org.jfree.data.time.TimePeriodValue.value",
        "snippet": "    private Number value;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The value associated with the time period. "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.START",
        "snippet": "    public static final int START = 0;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " \r\n     * Useful constant for controlling the x-value returned for a time \r\n     * period. \r\n     "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.MIDDLE",
        "snippet": "    public static final int MIDDLE = 1;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " \r\n     * Useful constant for controlling the x-value returned for a time period. \r\n     "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.END",
        "snippet": "    public static final int END = 2;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " \r\n     * Useful constant for controlling the x-value returned for a time period. \r\n     "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.maximumItemCount",
        "snippet": "    private int maximumItemCount = 2000;  // an arbitrary safe default value",
        "begin_line": 106,
        "end_line": 106,
        "comment": " an arbitrary safe default value"
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.historyCount",
        "snippet": "    protected int historyCount;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " The history count. "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.seriesKeys",
        "snippet": "    private Comparable[] seriesKeys;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " Storage for the series keys. "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.timePeriodClass",
        "snippet": "    private Class timePeriodClass = Minute.class;   // default value;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " default value;"
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.pointsInTime",
        "snippet": "    protected RegularTimePeriod[] pointsInTime;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " Storage for the x-values. "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.seriesCount",
        "snippet": "    private int seriesCount;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " The number of series. "
    },
    {
        "class_name": "org.jfree.data.time.ValueSequence",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.ValueSequence.dataPoints",
        "snippet": "        float[] dataPoints;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " Storage for the float values. "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.valueHistory",
        "snippet": "    protected ValueSequence[] valueHistory;",
        "begin_line": 173,
        "end_line": 173,
        "comment": " An array for storing the objects that represent each series. "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.workingCalendar",
        "snippet": "    protected Calendar workingCalendar;",
        "begin_line": 176,
        "end_line": 176,
        "comment": " A working calendar (to recycle) "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.position",
        "snippet": "    private int position;",
        "begin_line": 182,
        "end_line": 182,
        "comment": " \r\n     * The position within a time period to return as the x-value (START, \r\n     * MIDDLE or END). \r\n     "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.domainIsPointsInTime",
        "snippet": "    private boolean domainIsPointsInTime;",
        "begin_line": 189,
        "end_line": 189,
        "comment": "\r\n     * A flag that indicates that the domain is 'points in time'.  If this flag \r\n     * is true, only the x-value is used to determine the range of values in \r\n     * the domain, the start and end x-values are ignored.\r\n     "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.oldestAt",
        "snippet": "    private int oldestAt;  // as a class variable, initializes == 0",
        "begin_line": 192,
        "end_line": 192,
        "comment": " as a class variable, initializes == 0"
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.newestAt",
        "snippet": "    private int newestAt;",
        "begin_line": 195,
        "end_line": 195,
        "comment": " Index of the newest data item. "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.deltaTime",
        "snippet": "    private long deltaTime;",
        "begin_line": 200,
        "end_line": 200,
        "comment": " the # of msec by which time advances. "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.domainStart",
        "snippet": "    private Long domainStart;",
        "begin_line": 203,
        "end_line": 203,
        "comment": " Cached domain start (for use by DomainInfo). "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.domainEnd",
        "snippet": "    private Long domainEnd;",
        "begin_line": 206,
        "end_line": 206,
        "comment": " Cached domain end (for use by DomainInfo). "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.domainRange",
        "snippet": "    private Range domainRange;",
        "begin_line": 209,
        "end_line": 209,
        "comment": " Cached domain range (for use by DomainInfo). "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.minValue",
        "snippet": "    private Float minValue = new Float(0.0f);",
        "begin_line": 215,
        "end_line": 215,
        "comment": " The minimum value. "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.maxValue",
        "snippet": "    private Float maxValue = null;",
        "begin_line": 218,
        "end_line": 218,
        "comment": " The maximum value. "
    },
    {
        "class_name": "org.jfree.data.time.DynamicTimeSeriesCollection",
        "src_path": "source/org/jfree/data/time/DynamicTimeSeriesCollection.java",
        "signature": "org.jfree.data.time.DynamicTimeSeriesCollection.valueRange",
        "snippet": "    private Range valueRange;  // autoinit's to null.",
        "begin_line": 221,
        "end_line": 221,
        "comment": " autoinit's to null."
    },
    {
        "class_name": "org.jfree.data.time.Year",
        "src_path": "source/org/jfree/data/time/Year.java",
        "signature": "org.jfree.data.time.Year.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7659990929736074836L;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.Year",
        "src_path": "source/org/jfree/data/time/Year.java",
        "signature": "org.jfree.data.time.Year.year",
        "snippet": "    private short year;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The year. "
    },
    {
        "class_name": "org.jfree.data.time.Year",
        "src_path": "source/org/jfree/data/time/Year.java",
        "signature": "org.jfree.data.time.Year.firstMillisecond",
        "snippet": "    private long firstMillisecond;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The first millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.Year",
        "src_path": "source/org/jfree/data/time/Year.java",
        "signature": "org.jfree.data.time.Year.lastMillisecond",
        "snippet": "    private long lastMillisecond;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The last millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.DateRange",
        "src_path": "source/org/jfree/data/time/DateRange.java",
        "signature": "org.jfree.data.time.DateRange.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4705682568375418157L;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.DateRange",
        "src_path": "source/org/jfree/data/time/DateRange.java",
        "signature": "org.jfree.data.time.DateRange.lowerDate",
        "snippet": "    private Date lowerDate;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The lower bound for the range. "
    },
    {
        "class_name": "org.jfree.data.time.DateRange",
        "src_path": "source/org/jfree/data/time/DateRange.java",
        "signature": "org.jfree.data.time.DateRange.upperDate",
        "snippet": "    private Date upperDate;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The upper bound for the range. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodAnchor",
        "src_path": "source/org/jfree/data/time/TimePeriodAnchor.java",
        "signature": "org.jfree.data.time.TimePeriodAnchor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2011955697457548862L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodAnchor",
        "src_path": "source/org/jfree/data/time/TimePeriodAnchor.java",
        "signature": "org.jfree.data.time.TimePeriodAnchor.START",
        "snippet": "    public static final TimePeriodAnchor START \n        = new TimePeriodAnchor(\"TimePeriodAnchor.START\");",
        "begin_line": 57,
        "end_line": 58,
        "comment": " Start of period. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodAnchor",
        "src_path": "source/org/jfree/data/time/TimePeriodAnchor.java",
        "signature": "org.jfree.data.time.TimePeriodAnchor.MIDDLE",
        "snippet": "    public static final TimePeriodAnchor MIDDLE \n        = new TimePeriodAnchor(\"TimePeriodAnchor.MIDDLE\");",
        "begin_line": 61,
        "end_line": 62,
        "comment": " Middle of period. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodAnchor",
        "src_path": "source/org/jfree/data/time/TimePeriodAnchor.java",
        "signature": "org.jfree.data.time.TimePeriodAnchor.END",
        "snippet": "    public static final TimePeriodAnchor END \n        = new TimePeriodAnchor(\"TimePeriodAnchor.END\");",
        "begin_line": 65,
        "end_line": 66,
        "comment": " End of period. "
    },
    {
        "class_name": "org.jfree.data.time.TimePeriodAnchor",
        "src_path": "source/org/jfree/data/time/TimePeriodAnchor.java",
        "signature": "org.jfree.data.time.TimePeriodAnchor.name",
        "snippet": "    private String name;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.data.time.Week",
        "src_path": "source/org/jfree/data/time/Week.java",
        "signature": "org.jfree.data.time.Week.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1856387786939865061L;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.Week",
        "src_path": "source/org/jfree/data/time/Week.java",
        "signature": "org.jfree.data.time.Week.FIRST_WEEK_IN_YEAR",
        "snippet": "    public static final int FIRST_WEEK_IN_YEAR = 1;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Constant for the first week in the year. "
    },
    {
        "class_name": "org.jfree.data.time.Week",
        "src_path": "source/org/jfree/data/time/Week.java",
        "signature": "org.jfree.data.time.Week.LAST_WEEK_IN_YEAR",
        "snippet": "    public static final int LAST_WEEK_IN_YEAR = 53;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " Constant for the last week in the year. "
    },
    {
        "class_name": "org.jfree.data.time.Week",
        "src_path": "source/org/jfree/data/time/Week.java",
        "signature": "org.jfree.data.time.Week.year",
        "snippet": "    private short year;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " The year in which the week falls. "
    },
    {
        "class_name": "org.jfree.data.time.Week",
        "src_path": "source/org/jfree/data/time/Week.java",
        "signature": "org.jfree.data.time.Week.week",
        "snippet": "    private byte week;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " The week (1-53). "
    },
    {
        "class_name": "org.jfree.data.time.Week",
        "src_path": "source/org/jfree/data/time/Week.java",
        "signature": "org.jfree.data.time.Week.firstMillisecond",
        "snippet": "    private long firstMillisecond;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " The first millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.Week",
        "src_path": "source/org/jfree/data/time/Week.java",
        "signature": "org.jfree.data.time.Week.lastMillisecond",
        "snippet": "    private long lastMillisecond;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " The last millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.MonthConstants",
        "src_path": "source/org/jfree/data/time/MonthConstants.java",
        "signature": "org.jfree.data.time.MonthConstants.JANUARY",
        "snippet": "    public static final int JANUARY = 1;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Constant for January. "
    },
    {
        "class_name": "org.jfree.data.time.MonthConstants",
        "src_path": "source/org/jfree/data/time/MonthConstants.java",
        "signature": "org.jfree.data.time.MonthConstants.FEBRUARY",
        "snippet": "    public static final int FEBRUARY = 2;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Constant for February. "
    },
    {
        "class_name": "org.jfree.data.time.MonthConstants",
        "src_path": "source/org/jfree/data/time/MonthConstants.java",
        "signature": "org.jfree.data.time.MonthConstants.MARCH",
        "snippet": "    public static final int MARCH = 3;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Constant for March. "
    },
    {
        "class_name": "org.jfree.data.time.MonthConstants",
        "src_path": "source/org/jfree/data/time/MonthConstants.java",
        "signature": "org.jfree.data.time.MonthConstants.APRIL",
        "snippet": "    public static final int APRIL = 4;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Constant for April. "
    },
    {
        "class_name": "org.jfree.data.time.MonthConstants",
        "src_path": "source/org/jfree/data/time/MonthConstants.java",
        "signature": "org.jfree.data.time.MonthConstants.MAY",
        "snippet": "    public static final int MAY = 5;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Constant for May. "
    },
    {
        "class_name": "org.jfree.data.time.MonthConstants",
        "src_path": "source/org/jfree/data/time/MonthConstants.java",
        "signature": "org.jfree.data.time.MonthConstants.JUNE",
        "snippet": "    public static final int JUNE = 6;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Constant for June. "
    },
    {
        "class_name": "org.jfree.data.time.MonthConstants",
        "src_path": "source/org/jfree/data/time/MonthConstants.java",
        "signature": "org.jfree.data.time.MonthConstants.JULY",
        "snippet": "    public static final int JULY = 7;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " Constant for July. "
    },
    {
        "class_name": "org.jfree.data.time.MonthConstants",
        "src_path": "source/org/jfree/data/time/MonthConstants.java",
        "signature": "org.jfree.data.time.MonthConstants.AUGUST",
        "snippet": "    public static final int AUGUST = 8;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " Constant for August. "
    },
    {
        "class_name": "org.jfree.data.time.MonthConstants",
        "src_path": "source/org/jfree/data/time/MonthConstants.java",
        "signature": "org.jfree.data.time.MonthConstants.SEPTEMBER",
        "snippet": "    public static final int SEPTEMBER = 9;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Constant for September. "
    },
    {
        "class_name": "org.jfree.data.time.MonthConstants",
        "src_path": "source/org/jfree/data/time/MonthConstants.java",
        "signature": "org.jfree.data.time.MonthConstants.OCTOBER",
        "snippet": "    public static final int OCTOBER = 10;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Constant for October. "
    },
    {
        "class_name": "org.jfree.data.time.MonthConstants",
        "src_path": "source/org/jfree/data/time/MonthConstants.java",
        "signature": "org.jfree.data.time.MonthConstants.NOVEMBER",
        "snippet": "    public static final int NOVEMBER = 11;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Constant for November. "
    },
    {
        "class_name": "org.jfree.data.time.MonthConstants",
        "src_path": "source/org/jfree/data/time/MonthConstants.java",
        "signature": "org.jfree.data.time.MonthConstants.DECEMBER",
        "snippet": "    public static final int DECEMBER = 12;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Constant for December. "
    },
    {
        "class_name": "org.jfree.data.time.ohlc.OHLC",
        "src_path": "source/org/jfree/data/time/ohlc/OHLC.java",
        "signature": "org.jfree.data.time.ohlc.OHLC.open",
        "snippet": "    private double open;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The open value. "
    },
    {
        "class_name": "org.jfree.data.time.ohlc.OHLC",
        "src_path": "source/org/jfree/data/time/ohlc/OHLC.java",
        "signature": "org.jfree.data.time.ohlc.OHLC.close",
        "snippet": "    private double close;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The close value. "
    },
    {
        "class_name": "org.jfree.data.time.ohlc.OHLC",
        "src_path": "source/org/jfree/data/time/ohlc/OHLC.java",
        "signature": "org.jfree.data.time.ohlc.OHLC.high",
        "snippet": "    private double high;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The high value. "
    },
    {
        "class_name": "org.jfree.data.time.ohlc.OHLC",
        "src_path": "source/org/jfree/data/time/ohlc/OHLC.java",
        "signature": "org.jfree.data.time.ohlc.OHLC.low",
        "snippet": "    private double low;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The low value. "
    },
    {
        "class_name": "org.jfree.data.time.ohlc.OHLCSeriesCollection",
        "src_path": "source/org/jfree/data/time/ohlc/OHLCSeriesCollection.java",
        "signature": "org.jfree.data.time.ohlc.OHLCSeriesCollection.data",
        "snippet": "    private List data;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Storage for the data series. "
    },
    {
        "class_name": "org.jfree.data.time.ohlc.OHLCSeriesCollection",
        "src_path": "source/org/jfree/data/time/ohlc/OHLCSeriesCollection.java",
        "signature": "org.jfree.data.time.ohlc.OHLCSeriesCollection.xPosition",
        "snippet": "    private TimePeriodAnchor xPosition = TimePeriodAnchor.MIDDLE;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "org.jfree.data.xy.CategoryTableXYDataset",
        "src_path": "source/org/jfree/data/xy/CategoryTableXYDataset.java",
        "signature": "org.jfree.data.xy.CategoryTableXYDataset.values",
        "snippet": "    private DefaultKeyedValues2D values;",
        "begin_line": 77,
        "end_line": 77,
        "comment": "\r\n     * The backing data structure.\r\n     "
    },
    {
        "class_name": "org.jfree.data.xy.CategoryTableXYDataset",
        "src_path": "source/org/jfree/data/xy/CategoryTableXYDataset.java",
        "signature": "org.jfree.data.xy.CategoryTableXYDataset.intervalDelegate",
        "snippet": "    private IntervalXYDelegate intervalDelegate;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " A delegate for controlling the interval width. "
    },
    {
        "class_name": "org.jfree.data.xy.YWithXInterval",
        "src_path": "source/org/jfree/data/xy/YWithXInterval.java",
        "signature": "org.jfree.data.xy.YWithXInterval.y",
        "snippet": "    private double y;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The y-value. "
    },
    {
        "class_name": "org.jfree.data.xy.YWithXInterval",
        "src_path": "source/org/jfree/data/xy/YWithXInterval.java",
        "signature": "org.jfree.data.xy.YWithXInterval.xLow",
        "snippet": "    private double xLow;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The lower bound of the x-interval. "
    },
    {
        "class_name": "org.jfree.data.xy.YWithXInterval",
        "src_path": "source/org/jfree/data/xy/YWithXInterval.java",
        "signature": "org.jfree.data.xy.YWithXInterval.xHigh",
        "snippet": "    private double xHigh;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The upper bound of the x-interval. "
    },
    {
        "class_name": "org.jfree.data.xy.IntervalXYDelegate",
        "src_path": "source/org/jfree/data/xy/IntervalXYDelegate.java",
        "signature": "org.jfree.data.xy.IntervalXYDelegate.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -685166711639592857L;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.xy.IntervalXYDelegate",
        "src_path": "source/org/jfree/data/xy/IntervalXYDelegate.java",
        "signature": "org.jfree.data.xy.IntervalXYDelegate.dataset",
        "snippet": "    private XYDataset dataset;",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\r\n     * The dataset to enhance. \r\n     "
    },
    {
        "class_name": "org.jfree.data.xy.IntervalXYDelegate",
        "src_path": "source/org/jfree/data/xy/IntervalXYDelegate.java",
        "signature": "org.jfree.data.xy.IntervalXYDelegate.autoWidth",
        "snippet": "    private boolean autoWidth;",
        "begin_line": 97,
        "end_line": 97,
        "comment": "\r\n     * A flag to indicate whether the width should be calculated automatically.\r\n     "
    },
    {
        "class_name": "org.jfree.data.xy.IntervalXYDelegate",
        "src_path": "source/org/jfree/data/xy/IntervalXYDelegate.java",
        "signature": "org.jfree.data.xy.IntervalXYDelegate.intervalPositionFactor",
        "snippet": "    private double intervalPositionFactor; ",
        "begin_line": 103,
        "end_line": 103,
        "comment": "\r\n     * A value between 0.0 and 1.0 that indicates the position of the x-value\r\n     * within the interval.\r\n     "
    },
    {
        "class_name": "org.jfree.data.xy.IntervalXYDelegate",
        "src_path": "source/org/jfree/data/xy/IntervalXYDelegate.java",
        "signature": "org.jfree.data.xy.IntervalXYDelegate.fixedIntervalWidth",
        "snippet": "    private double fixedIntervalWidth;",
        "begin_line": 108,
        "end_line": 108,
        "comment": "\r\n     * The fixed interval width (defaults to 1.0).\r\n     "
    },
    {
        "class_name": "org.jfree.data.xy.IntervalXYDelegate",
        "src_path": "source/org/jfree/data/xy/IntervalXYDelegate.java",
        "signature": "org.jfree.data.xy.IntervalXYDelegate.autoIntervalWidth",
        "snippet": "    private double autoIntervalWidth;",
        "begin_line": 113,
        "end_line": 113,
        "comment": "\r\n     * The automatically calculated interval width.\r\n     "
    },
    {
        "class_name": "org.jfree.data.xy.XIntervalSeriesCollection",
        "src_path": "source/org/jfree/data/xy/XIntervalSeriesCollection.java",
        "signature": "org.jfree.data.xy.XIntervalSeriesCollection.data",
        "snippet": "    private List data;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Storage for the data series. "
    },
    {
        "class_name": "org.jfree.data.xy.XYInterval",
        "src_path": "source/org/jfree/data/xy/XYInterval.java",
        "signature": "org.jfree.data.xy.XYInterval.xLow",
        "snippet": "    private double xLow;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The lower bound of the x-interval. "
    },
    {
        "class_name": "org.jfree.data.xy.XYInterval",
        "src_path": "source/org/jfree/data/xy/XYInterval.java",
        "signature": "org.jfree.data.xy.XYInterval.xHigh",
        "snippet": "    private double xHigh;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The upper bound of the y-interval. "
    },
    {
        "class_name": "org.jfree.data.xy.XYInterval",
        "src_path": "source/org/jfree/data/xy/XYInterval.java",
        "signature": "org.jfree.data.xy.XYInterval.y",
        "snippet": "    private double y;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The y-value. "
    },
    {
        "class_name": "org.jfree.data.xy.XYInterval",
        "src_path": "source/org/jfree/data/xy/XYInterval.java",
        "signature": "org.jfree.data.xy.XYInterval.yLow",
        "snippet": "    private double yLow;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The lower bound of the y-interval. "
    },
    {
        "class_name": "org.jfree.data.xy.XYInterval",
        "src_path": "source/org/jfree/data/xy/XYInterval.java",
        "signature": "org.jfree.data.xy.XYInterval.yHigh",
        "snippet": "    private double yHigh;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The upper bound of the y-interval. "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultXYZDataset",
        "src_path": "source/org/jfree/data/xy/DefaultXYZDataset.java",
        "signature": "org.jfree.data.xy.DefaultXYZDataset.seriesKeys",
        "snippet": "    private List seriesKeys;",
        "begin_line": 66,
        "end_line": 66,
        "comment": "\r\n     * Storage for the series keys.  This list must be kept in sync with the\r\n     * seriesList.\r\n     "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultXYZDataset",
        "src_path": "source/org/jfree/data/xy/DefaultXYZDataset.java",
        "signature": "org.jfree.data.xy.DefaultXYZDataset.seriesList",
        "snippet": "    private List seriesList;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " \r\n     * Storage for the series in the dataset.  We use a list because the\r\n     * order of the series is significant.  This list must be kept in sync \r\n     * with the seriesKeys list.\r\n     "
    },
    {
        "class_name": "org.jfree.data.xy.XYDatasetTableModel",
        "src_path": "source/org/jfree/data/xy/XYDatasetTableModel.java",
        "signature": "org.jfree.data.xy.XYDatasetTableModel.model",
        "snippet": "    TableXYDataset model = null;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The dataset. "
    },
    {
        "class_name": "org.jfree.data.xy.XYBarDataset",
        "src_path": "source/org/jfree/data/xy/XYBarDataset.java",
        "signature": "org.jfree.data.xy.XYBarDataset.underlying",
        "snippet": "    private XYDataset underlying;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The underlying dataset. "
    },
    {
        "class_name": "org.jfree.data.xy.XYBarDataset",
        "src_path": "source/org/jfree/data/xy/XYBarDataset.java",
        "signature": "org.jfree.data.xy.XYBarDataset.barWidth",
        "snippet": "    private double barWidth;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The bar width. "
    },
    {
        "class_name": "org.jfree.data.xy.XYSeriesCollection",
        "src_path": "source/org/jfree/data/xy/XYSeriesCollection.java",
        "signature": "org.jfree.data.xy.XYSeriesCollection.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7590013825931496766L;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.xy.XYSeriesCollection",
        "src_path": "source/org/jfree/data/xy/XYSeriesCollection.java",
        "signature": "org.jfree.data.xy.XYSeriesCollection.data",
        "snippet": "    private List data;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The series that are included in the collection. "
    },
    {
        "class_name": "org.jfree.data.xy.XYSeriesCollection",
        "src_path": "source/org/jfree/data/xy/XYSeriesCollection.java",
        "signature": "org.jfree.data.xy.XYSeriesCollection.intervalDelegate",
        "snippet": "    private IntervalXYDelegate intervalDelegate;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The interval delegate (used to calculate the start and end x-values). "
    },
    {
        "class_name": "org.jfree.data.xy.XYSeries",
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "signature": "org.jfree.data.xy.XYSeries.serialVersionUID",
        "snippet": "    static final long serialVersionUID = -5908509288197150436L;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.xy.XYSeries",
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "signature": "org.jfree.data.xy.XYSeries.data",
        "snippet": "    protected List data;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " Storage for the data items in the series. "
    },
    {
        "class_name": "org.jfree.data.xy.XYSeries",
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "signature": "org.jfree.data.xy.XYSeries.maximumItemCount",
        "snippet": "    private int maximumItemCount = Integer.MAX_VALUE;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " The maximum number of items for the series. "
    },
    {
        "class_name": "org.jfree.data.xy.XYSeries",
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "signature": "org.jfree.data.xy.XYSeries.autoSort",
        "snippet": "    private boolean autoSort;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " A flag that controls whether the items are automatically sorted. "
    },
    {
        "class_name": "org.jfree.data.xy.XYSeries",
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "signature": "org.jfree.data.xy.XYSeries.allowDuplicateXValues",
        "snippet": "    private boolean allowDuplicateXValues;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " A flag that controls whether or not duplicate x-values are allowed. "
    },
    {
        "class_name": "org.jfree.data.xy.Vector",
        "src_path": "source/org/jfree/data/xy/Vector.java",
        "signature": "org.jfree.data.xy.Vector.x",
        "snippet": "    private double x;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The vector x. "
    },
    {
        "class_name": "org.jfree.data.xy.Vector",
        "src_path": "source/org/jfree/data/xy/Vector.java",
        "signature": "org.jfree.data.xy.Vector.y",
        "snippet": "    private double y;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The vector y. "
    },
    {
        "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
        "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
        "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.data",
        "snippet": "    private List data;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Storage for the data series. "
    },
    {
        "class_name": "org.jfree.data.xy.VectorSeriesCollection",
        "src_path": "source/org/jfree/data/xy/VectorSeriesCollection.java",
        "signature": "org.jfree.data.xy.VectorSeriesCollection.data",
        "snippet": "    private List data;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Storage for the data series. "
    },
    {
        "class_name": "org.jfree.data.xy.XYCoordinate",
        "src_path": "source/org/jfree/data/xy/XYCoordinate.java",
        "signature": "org.jfree.data.xy.XYCoordinate.x",
        "snippet": "    private double x;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The x-coordinate. "
    },
    {
        "class_name": "org.jfree.data.xy.XYCoordinate",
        "src_path": "source/org/jfree/data/xy/XYCoordinate.java",
        "signature": "org.jfree.data.xy.XYCoordinate.y",
        "snippet": "    private double y;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The y-coordinate. "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultIntervalXYDataset",
        "src_path": "source/org/jfree/data/xy/DefaultIntervalXYDataset.java",
        "signature": "org.jfree.data.xy.DefaultIntervalXYDataset.seriesKeys",
        "snippet": "    private List seriesKeys;",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\r\n     * Storage for the series keys.  This list must be kept in sync with the\r\n     * seriesList.\r\n     "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultIntervalXYDataset",
        "src_path": "source/org/jfree/data/xy/DefaultIntervalXYDataset.java",
        "signature": "org.jfree.data.xy.DefaultIntervalXYDataset.seriesList",
        "snippet": "    private List seriesList;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " \r\n     * Storage for the series in the dataset.  We use a list because the\r\n     * order of the series is significant.  This list must be kept in sync \r\n     * with the seriesKeys list.\r\n     "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultTableXYDataset",
        "src_path": "source/org/jfree/data/xy/DefaultTableXYDataset.java",
        "signature": "org.jfree.data.xy.DefaultTableXYDataset.data",
        "snippet": "    private List data = null;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " \r\n     * Storage for the data - this list will contain zero, one or many \r\n     * XYSeries objects. \r\n     "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultTableXYDataset",
        "src_path": "source/org/jfree/data/xy/DefaultTableXYDataset.java",
        "signature": "org.jfree.data.xy.DefaultTableXYDataset.xPoints",
        "snippet": "    private HashSet xPoints = null;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Storage for the x values. "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultTableXYDataset",
        "src_path": "source/org/jfree/data/xy/DefaultTableXYDataset.java",
        "signature": "org.jfree.data.xy.DefaultTableXYDataset.propagateEvents",
        "snippet": "    private boolean propagateEvents = true;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " A flag that controls whether or not events are propogated. "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultTableXYDataset",
        "src_path": "source/org/jfree/data/xy/DefaultTableXYDataset.java",
        "signature": "org.jfree.data.xy.DefaultTableXYDataset.autoPrune",
        "snippet": "    private boolean autoPrune = false;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " A flag that controls auto pruning. "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultTableXYDataset",
        "src_path": "source/org/jfree/data/xy/DefaultTableXYDataset.java",
        "signature": "org.jfree.data.xy.DefaultTableXYDataset.intervalDelegate",
        "snippet": "    private IntervalXYDelegate intervalDelegate;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " The delegate used to control the interval width. "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultXYDataset",
        "src_path": "source/org/jfree/data/xy/DefaultXYDataset.java",
        "signature": "org.jfree.data.xy.DefaultXYDataset.seriesKeys",
        "snippet": "    private List seriesKeys;",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\r\n     * Storage for the series keys.  This list must be kept in sync with the\r\n     * seriesList.\r\n     "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultXYDataset",
        "src_path": "source/org/jfree/data/xy/DefaultXYDataset.java",
        "signature": "org.jfree.data.xy.DefaultXYDataset.seriesList",
        "snippet": "    private List seriesList;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " \r\n     * Storage for the series in the dataset.  We use a list because the\r\n     * order of the series is significant.  This list must be kept in sync \r\n     * with the seriesKeys list.\r\n     "
    },
    {
        "class_name": "org.jfree.data.xy.YIntervalSeriesCollection",
        "src_path": "source/org/jfree/data/xy/YIntervalSeriesCollection.java",
        "signature": "org.jfree.data.xy.YIntervalSeriesCollection.data",
        "snippet": "    private List data;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Storage for the data series. "
    },
    {
        "class_name": "org.jfree.data.xy.NormalizedMatrixSeries",
        "src_path": "source/org/jfree/data/xy/NormalizedMatrixSeries.java",
        "signature": "org.jfree.data.xy.NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR",
        "snippet": "    public static final double DEFAULT_SCALE_FACTOR = 1.0;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The default scale factor. "
    },
    {
        "class_name": "org.jfree.data.xy.NormalizedMatrixSeries",
        "src_path": "source/org/jfree/data/xy/NormalizedMatrixSeries.java",
        "signature": "org.jfree.data.xy.NormalizedMatrixSeries.m_scaleFactor",
        "snippet": "    private double m_scaleFactor = DEFAULT_SCALE_FACTOR;",
        "begin_line": 60,
        "end_line": 60,
        "comment": "\r\n     * A factor that multiplies each item in this series when observed using \r\n     * getItem method.\r\n     "
    },
    {
        "class_name": "org.jfree.data.xy.NormalizedMatrixSeries",
        "src_path": "source/org/jfree/data/xy/NormalizedMatrixSeries.java",
        "signature": "org.jfree.data.xy.NormalizedMatrixSeries.m_totalSum",
        "snippet": "    private double m_totalSum;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The sum of all items in this matrix "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultOHLCDataset",
        "src_path": "source/org/jfree/data/xy/DefaultOHLCDataset.java",
        "signature": "org.jfree.data.xy.DefaultOHLCDataset.key",
        "snippet": "    private Comparable key;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The series key. "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultOHLCDataset",
        "src_path": "source/org/jfree/data/xy/DefaultOHLCDataset.java",
        "signature": "org.jfree.data.xy.DefaultOHLCDataset.data",
        "snippet": "    private OHLCDataItem[] data;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Storage for the data items. "
    },
    {
        "class_name": "org.jfree.data.xy.MatrixSeriesCollection",
        "src_path": "source/org/jfree/data/xy/MatrixSeriesCollection.java",
        "signature": "org.jfree.data.xy.MatrixSeriesCollection.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3197705779242543945L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.xy.MatrixSeriesCollection",
        "src_path": "source/org/jfree/data/xy/MatrixSeriesCollection.java",
        "signature": "org.jfree.data.xy.MatrixSeriesCollection.seriesList",
        "snippet": "    private List seriesList;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The series that are included in the collection. "
    },
    {
        "class_name": "org.jfree.data.xy.YInterval",
        "src_path": "source/org/jfree/data/xy/YInterval.java",
        "signature": "org.jfree.data.xy.YInterval.y",
        "snippet": "    private double y;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The y-value. "
    },
    {
        "class_name": "org.jfree.data.xy.YInterval",
        "src_path": "source/org/jfree/data/xy/YInterval.java",
        "signature": "org.jfree.data.xy.YInterval.yLow",
        "snippet": "    private double yLow;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The lower bound of the y-interval. "
    },
    {
        "class_name": "org.jfree.data.xy.YInterval",
        "src_path": "source/org/jfree/data/xy/YInterval.java",
        "signature": "org.jfree.data.xy.YInterval.yHigh",
        "snippet": "    private double yHigh;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The upper bound of the y-interval. "
    },
    {
        "class_name": "org.jfree.data.xy.MatrixSeries",
        "src_path": "source/org/jfree/data/xy/MatrixSeries.java",
        "signature": "org.jfree.data.xy.MatrixSeries.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7934188527308315704L;    ",
        "begin_line": 61,
        "end_line": 61,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.xy.MatrixSeries",
        "src_path": "source/org/jfree/data/xy/MatrixSeries.java",
        "signature": "org.jfree.data.xy.MatrixSeries.data",
        "snippet": "    protected double[][] data;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Series matrix values "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultWindDataset",
        "src_path": "source/org/jfree/data/xy/DefaultWindDataset.java",
        "signature": "org.jfree.data.xy.DefaultWindDataset.seriesKeys",
        "snippet": "    private List seriesKeys;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The keys for the series. "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultWindDataset",
        "src_path": "source/org/jfree/data/xy/DefaultWindDataset.java",
        "signature": "org.jfree.data.xy.DefaultWindDataset.allSeriesData",
        "snippet": "    private List allSeriesData;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Storage for the series data. "
    },
    {
        "class_name": "org.jfree.data.xy.WindDataItem",
        "src_path": "source/org/jfree/data/xy/DefaultWindDataset.java",
        "signature": "org.jfree.data.xy.WindDataItem.x",
        "snippet": "    private Number x;",
        "begin_line": 328,
        "end_line": 328,
        "comment": " The x-value. "
    },
    {
        "class_name": "org.jfree.data.xy.WindDataItem",
        "src_path": "source/org/jfree/data/xy/DefaultWindDataset.java",
        "signature": "org.jfree.data.xy.WindDataItem.windDir",
        "snippet": "    private Number windDir;",
        "begin_line": 331,
        "end_line": 331,
        "comment": " The wind direction. "
    },
    {
        "class_name": "org.jfree.data.xy.WindDataItem",
        "src_path": "source/org/jfree/data/xy/DefaultWindDataset.java",
        "signature": "org.jfree.data.xy.WindDataItem.windForce",
        "snippet": "    private Number windForce;",
        "begin_line": 334,
        "end_line": 334,
        "comment": " The wind force. "
    },
    {
        "class_name": "org.jfree.data.xy.OHLCDataItem",
        "src_path": "source/org/jfree/data/xy/OHLCDataItem.java",
        "signature": "org.jfree.data.xy.OHLCDataItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7753817154401169901L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.xy.OHLCDataItem",
        "src_path": "source/org/jfree/data/xy/OHLCDataItem.java",
        "signature": "org.jfree.data.xy.OHLCDataItem.date",
        "snippet": "    private Date date;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The date. "
    },
    {
        "class_name": "org.jfree.data.xy.OHLCDataItem",
        "src_path": "source/org/jfree/data/xy/OHLCDataItem.java",
        "signature": "org.jfree.data.xy.OHLCDataItem.open",
        "snippet": "    private Number open;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The open value. "
    },
    {
        "class_name": "org.jfree.data.xy.OHLCDataItem",
        "src_path": "source/org/jfree/data/xy/OHLCDataItem.java",
        "signature": "org.jfree.data.xy.OHLCDataItem.high",
        "snippet": "    private Number high;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The high value. "
    },
    {
        "class_name": "org.jfree.data.xy.OHLCDataItem",
        "src_path": "source/org/jfree/data/xy/OHLCDataItem.java",
        "signature": "org.jfree.data.xy.OHLCDataItem.low",
        "snippet": "    private Number low;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The low value. "
    },
    {
        "class_name": "org.jfree.data.xy.OHLCDataItem",
        "src_path": "source/org/jfree/data/xy/OHLCDataItem.java",
        "signature": "org.jfree.data.xy.OHLCDataItem.close",
        "snippet": "    private Number close;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The close value. "
    },
    {
        "class_name": "org.jfree.data.xy.OHLCDataItem",
        "src_path": "source/org/jfree/data/xy/OHLCDataItem.java",
        "signature": "org.jfree.data.xy.OHLCDataItem.volume",
        "snippet": "    private Number volume;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The trading volume (number of shares, contracts or whatever). "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultHighLowDataset",
        "src_path": "source/org/jfree/data/xy/DefaultHighLowDataset.java",
        "signature": "org.jfree.data.xy.DefaultHighLowDataset.seriesKey",
        "snippet": "    private Comparable seriesKey;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The series key. "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultHighLowDataset",
        "src_path": "source/org/jfree/data/xy/DefaultHighLowDataset.java",
        "signature": "org.jfree.data.xy.DefaultHighLowDataset.date",
        "snippet": "    private Date[] date;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Storage for the dates. "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultHighLowDataset",
        "src_path": "source/org/jfree/data/xy/DefaultHighLowDataset.java",
        "signature": "org.jfree.data.xy.DefaultHighLowDataset.high",
        "snippet": "    private Number[] high;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Storage for the high values. "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultHighLowDataset",
        "src_path": "source/org/jfree/data/xy/DefaultHighLowDataset.java",
        "signature": "org.jfree.data.xy.DefaultHighLowDataset.low",
        "snippet": "    private Number[] low;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " Storage for the low values. "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultHighLowDataset",
        "src_path": "source/org/jfree/data/xy/DefaultHighLowDataset.java",
        "signature": "org.jfree.data.xy.DefaultHighLowDataset.open",
        "snippet": "    private Number[] open;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " Storage for the open values. "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultHighLowDataset",
        "src_path": "source/org/jfree/data/xy/DefaultHighLowDataset.java",
        "signature": "org.jfree.data.xy.DefaultHighLowDataset.close",
        "snippet": "    private Number[] close;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Storage for the close values. "
    },
    {
        "class_name": "org.jfree.data.xy.DefaultHighLowDataset",
        "src_path": "source/org/jfree/data/xy/DefaultHighLowDataset.java",
        "signature": "org.jfree.data.xy.DefaultHighLowDataset.volume",
        "snippet": "    private Number[] volume;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Storage for the volume values. "
    },
    {
        "class_name": "org.jfree.data.xy.XYDataItem",
        "src_path": "source/org/jfree/data/xy/XYDataItem.java",
        "signature": "org.jfree.data.xy.XYDataItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2751513470325494890L;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.xy.XYDataItem",
        "src_path": "source/org/jfree/data/xy/XYDataItem.java",
        "signature": "org.jfree.data.xy.XYDataItem.x",
        "snippet": "    private Number x;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The x-value (<code>null</code> not permitted). "
    },
    {
        "class_name": "org.jfree.data.xy.XYDataItem",
        "src_path": "source/org/jfree/data/xy/XYDataItem.java",
        "signature": "org.jfree.data.xy.XYDataItem.y",
        "snippet": "    private Number y;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The y-value. "
    },
    {
        "class_name": "org.jfree.data.resources.DataPackageResources_pl",
        "src_path": "source/org/jfree/data/resources/DataPackageResources_pl.java",
        "signature": "org.jfree.data.resources.DataPackageResources_pl.CONTENTS",
        "snippet": "    private static final Object[][] CONTENTS = {\n\n        {\"series.default-prefix\",     \"Serie\"},\n        {\"categories.default-prefix\", \"Kategorie\"},\n\n    };",
        "begin_line": 63,
        "end_line": 68,
        "comment": " The resources to be localised. "
    },
    {
        "class_name": "org.jfree.data.resources.DataPackageResources_de",
        "src_path": "source/org/jfree/data/resources/DataPackageResources_de.java",
        "signature": "org.jfree.data.resources.DataPackageResources_de.CONTENTS",
        "snippet": "    private static final Object[][] CONTENTS = {\n\n        {\"series.default-prefix\",     \"Reihen\"},\n        {\"categories.default-prefix\", \"Kategorien\"},\n\n    };",
        "begin_line": 62,
        "end_line": 67,
        "comment": " The resources to be localised. "
    },
    {
        "class_name": "org.jfree.data.resources.DataPackageResources_es",
        "src_path": "source/org/jfree/data/resources/DataPackageResources_es.java",
        "signature": "org.jfree.data.resources.DataPackageResources_es.CONTENTS",
        "snippet": "    private static final Object[][] CONTENTS = {\n\n        {\"series.default-prefix\",     \"Series\"},\n        {\"categories.default-prefix\", \"Categor?a\"},\n\n    };",
        "begin_line": 62,
        "end_line": 67,
        "comment": " The resources to be localised. "
    },
    {
        "class_name": "org.jfree.data.resources.DataPackageResources",
        "src_path": "source/org/jfree/data/resources/DataPackageResources.java",
        "signature": "org.jfree.data.resources.DataPackageResources.CONTENTS",
        "snippet": "    private static final Object[][] CONTENTS = {\n\n        {\"series.default-prefix\",     \"Series\"},\n        {\"categories.default-prefix\", \"Category\"},\n\n    };",
        "begin_line": 62,
        "end_line": 67,
        "comment": " The resources to be localised. "
    },
    {
        "class_name": "org.jfree.data.resources.DataPackageResources_fr",
        "src_path": "source/org/jfree/data/resources/DataPackageResources_fr.java",
        "signature": "org.jfree.data.resources.DataPackageResources_fr.CONTENTS",
        "snippet": "    private static final Object[][] CONTENTS = {\n\n        {\"series.default-prefix\", \"S?ries\"},\n        {\"categories.default-prefix\", \"Cat?gorie\"},\n\n    };",
        "begin_line": 61,
        "end_line": 66,
        "comment": " The resources to be localised. "
    },
    {
        "class_name": "org.jfree.data.resources.DataPackageResources_ru",
        "src_path": "source/org/jfree/data/resources/DataPackageResources_ru.java",
        "signature": "org.jfree.data.resources.DataPackageResources_ru.CONTENTS",
        "snippet": "    private static final Object[][] CONTENTS = {\n\n        {\"series.default-prefix\", \"?????\"},\n        {\"categories.default-prefix\", \"?????????\"},\n\n    };",
        "begin_line": 59,
        "end_line": 64,
        "comment": " The resources to be localised. "
    },
    {
        "class_name": "org.jfree.data.general.DefaultKeyedValueDataset",
        "src_path": "source/org/jfree/data/general/DefaultKeyedValueDataset.java",
        "signature": "org.jfree.data.general.DefaultKeyedValueDataset.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8149484339560406750L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.general.DefaultKeyedValueDataset",
        "src_path": "source/org/jfree/data/general/DefaultKeyedValueDataset.java",
        "signature": "org.jfree.data.general.DefaultKeyedValueDataset.data",
        "snippet": "    private KeyedValue data;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Storage for the data. "
    },
    {
        "class_name": "org.jfree.data.general.CombinedDataset",
        "src_path": "source/org/jfree/data/general/CombinedDataset.java",
        "signature": "org.jfree.data.general.CombinedDataset.datasetInfo",
        "snippet": "    private List datasetInfo = new java.util.ArrayList();",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Storage for the datasets we combine. "
    },
    {
        "class_name": "org.jfree.data.general.DatasetInfo",
        "src_path": "source/org/jfree/data/general/CombinedDataset.java",
        "signature": "org.jfree.data.general.DatasetInfo.data",
        "snippet": "        private SeriesDataset data;",
        "begin_line": 612,
        "end_line": 612,
        "comment": " The dataset. "
    },
    {
        "class_name": "org.jfree.data.general.DatasetInfo",
        "src_path": "source/org/jfree/data/general/CombinedDataset.java",
        "signature": "org.jfree.data.general.DatasetInfo.series",
        "snippet": "        private int series;",
        "begin_line": 615,
        "end_line": 615,
        "comment": " The series. "
    },
    {
        "class_name": "org.jfree.data.general.SeriesException",
        "src_path": "source/org/jfree/data/general/SeriesException.java",
        "signature": "org.jfree.data.general.SeriesException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3667048387550852940L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.general.DatasetChangeEvent",
        "src_path": "source/org/jfree/data/general/DatasetChangeEvent.java",
        "signature": "org.jfree.data.general.DatasetChangeEvent.dataset",
        "snippet": "    private Dataset dataset;",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\r\n     * The dataset that generated the change event.\r\n     "
    },
    {
        "class_name": "org.jfree.data.general.DefaultPieDataset",
        "src_path": "source/org/jfree/data/general/DefaultPieDataset.java",
        "signature": "org.jfree.data.general.DefaultPieDataset.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2904745139106540618L;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.general.DefaultPieDataset",
        "src_path": "source/org/jfree/data/general/DefaultPieDataset.java",
        "signature": "org.jfree.data.general.DefaultPieDataset.data",
        "snippet": "    private DefaultKeyedValues data;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Storage for the data. "
    },
    {
        "class_name": "org.jfree.data.general.SubSeriesDataset",
        "src_path": "source/org/jfree/data/general/SubSeriesDataset.java",
        "signature": "org.jfree.data.general.SubSeriesDataset.parent",
        "snippet": "    private SeriesDataset parent = null;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The parent dataset. "
    },
    {
        "class_name": "org.jfree.data.general.SubSeriesDataset",
        "src_path": "source/org/jfree/data/general/SubSeriesDataset.java",
        "signature": "org.jfree.data.general.SubSeriesDataset.map",
        "snippet": "    private int[] map;  // maps our series into our parent's",
        "begin_line": 73,
        "end_line": 73,
        "comment": " maps our series into our parent's"
    },
    {
        "class_name": "org.jfree.data.general.AbstractSeriesDataset",
        "src_path": "source/org/jfree/data/general/AbstractSeriesDataset.java",
        "signature": "org.jfree.data.general.AbstractSeriesDataset.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6074996219705033171L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.general.SeriesChangeEvent",
        "src_path": "source/org/jfree/data/general/SeriesChangeEvent.java",
        "signature": "org.jfree.data.general.SeriesChangeEvent.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1593866085210089052L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.general.DatasetGroup",
        "src_path": "source/org/jfree/data/general/DatasetGroup.java",
        "signature": "org.jfree.data.general.DatasetGroup.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3640642179674185688L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.general.DatasetGroup",
        "src_path": "source/org/jfree/data/general/DatasetGroup.java",
        "signature": "org.jfree.data.general.DatasetGroup.id",
        "snippet": "    private String id;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The group id. "
    },
    {
        "class_name": "org.jfree.data.general.DefaultKeyedValuesDataset",
        "src_path": "source/org/jfree/data/general/DefaultKeyedValuesDataset.java",
        "signature": "org.jfree.data.general.DefaultKeyedValuesDataset.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 306264413152815781L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.general.DefaultValueDataset",
        "src_path": "source/org/jfree/data/general/DefaultValueDataset.java",
        "signature": "org.jfree.data.general.DefaultValueDataset.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8137521217249294891L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.general.DefaultValueDataset",
        "src_path": "source/org/jfree/data/general/DefaultValueDataset.java",
        "signature": "org.jfree.data.general.DefaultValueDataset.value",
        "snippet": "    private Number value;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The value. "
    },
    {
        "class_name": "org.jfree.data.general.DefaultKeyedValues2DDataset",
        "src_path": "source/org/jfree/data/general/DefaultKeyedValues2DDataset.java",
        "signature": "org.jfree.data.general.DefaultKeyedValues2DDataset.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4288210771905990424L;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.general.Series",
        "src_path": "source/org/jfree/data/general/Series.java",
        "signature": "org.jfree.data.general.Series.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6906561437538683581L;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.general.Series",
        "src_path": "source/org/jfree/data/general/Series.java",
        "signature": "org.jfree.data.general.Series.key",
        "snippet": "    private Comparable key;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The key for the series. "
    },
    {
        "class_name": "org.jfree.data.general.Series",
        "src_path": "source/org/jfree/data/general/Series.java",
        "signature": "org.jfree.data.general.Series.description",
        "snippet": "    private String description;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " A description of the series. "
    },
    {
        "class_name": "org.jfree.data.general.Series",
        "src_path": "source/org/jfree/data/general/Series.java",
        "signature": "org.jfree.data.general.Series.listeners",
        "snippet": "    private EventListenerList listeners;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " Storage for registered change listeners. "
    },
    {
        "class_name": "org.jfree.data.general.Series",
        "src_path": "source/org/jfree/data/general/Series.java",
        "signature": "org.jfree.data.general.Series.propertyChangeSupport",
        "snippet": "    private PropertyChangeSupport propertyChangeSupport;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Object to support property change notification. "
    },
    {
        "class_name": "org.jfree.data.general.Series",
        "src_path": "source/org/jfree/data/general/Series.java",
        "signature": "org.jfree.data.general.Series.notify",
        "snippet": "    private boolean notify;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " A flag that controls whether or not changes are notified. "
    },
    {
        "class_name": "org.jfree.data.general.WaferMapDataset",
        "src_path": "source/org/jfree/data/general/WaferMapDataset.java",
        "signature": "org.jfree.data.general.WaferMapDataset.data",
        "snippet": "    private DefaultKeyedValues2D data;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " \r\n     * Storage structure for the data values (row key is chipx, column is \r\n     * chipy)\r\n     "
    },
    {
        "class_name": "org.jfree.data.general.WaferMapDataset",
        "src_path": "source/org/jfree/data/general/WaferMapDataset.java",
        "signature": "org.jfree.data.general.WaferMapDataset.maxChipX",
        "snippet": "    private int maxChipX;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " wafer x dimension "
    },
    {
        "class_name": "org.jfree.data.general.WaferMapDataset",
        "src_path": "source/org/jfree/data/general/WaferMapDataset.java",
        "signature": "org.jfree.data.general.WaferMapDataset.maxChipY",
        "snippet": "    private int maxChipY;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " wafer y dimension "
    },
    {
        "class_name": "org.jfree.data.general.WaferMapDataset",
        "src_path": "source/org/jfree/data/general/WaferMapDataset.java",
        "signature": "org.jfree.data.general.WaferMapDataset.chipSpace",
        "snippet": "    private double chipSpace;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " space to draw between chips "
    },
    {
        "class_name": "org.jfree.data.general.WaferMapDataset",
        "src_path": "source/org/jfree/data/general/WaferMapDataset.java",
        "signature": "org.jfree.data.general.WaferMapDataset.maxValue",
        "snippet": "    private Double maxValue;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " maximum value in this dataset "
    },
    {
        "class_name": "org.jfree.data.general.WaferMapDataset",
        "src_path": "source/org/jfree/data/general/WaferMapDataset.java",
        "signature": "org.jfree.data.general.WaferMapDataset.minValue",
        "snippet": "    private Double minValue;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " minimum value in this dataset "
    },
    {
        "class_name": "org.jfree.data.general.WaferMapDataset",
        "src_path": "source/org/jfree/data/general/WaferMapDataset.java",
        "signature": "org.jfree.data.general.WaferMapDataset.DEFAULT_CHIP_SPACE",
        "snippet": "    private static final double DEFAULT_CHIP_SPACE = 1d;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " default chip spacing "
    },
    {
        "class_name": "org.jfree.data.general.AbstractDataset",
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "signature": "org.jfree.data.general.AbstractDataset.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1918768939869230744L;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.general.AbstractDataset",
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "signature": "org.jfree.data.general.AbstractDataset.group",
        "snippet": "    private DatasetGroup group;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The group that the dataset belongs to. "
    },
    {
        "class_name": "org.jfree.data.general.AbstractDataset",
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "signature": "org.jfree.data.general.AbstractDataset.listenerList",
        "snippet": "    private transient EventListenerList listenerList;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " Storage for registered change listeners. "
    },
    {
        "class_name": "org.jfree.data.gantt.TaskSeries",
        "src_path": "source/org/jfree/data/gantt/TaskSeries.java",
        "signature": "org.jfree.data.gantt.TaskSeries.tasks",
        "snippet": "    private List tasks;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Storage for the tasks in the series. "
    },
    {
        "class_name": "org.jfree.data.gantt.Task",
        "src_path": "source/org/jfree/data/gantt/Task.java",
        "signature": "org.jfree.data.gantt.Task.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1094303785346988894L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.gantt.Task",
        "src_path": "source/org/jfree/data/gantt/Task.java",
        "signature": "org.jfree.data.gantt.Task.description",
        "snippet": "    private String description;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The task description. "
    },
    {
        "class_name": "org.jfree.data.gantt.Task",
        "src_path": "source/org/jfree/data/gantt/Task.java",
        "signature": "org.jfree.data.gantt.Task.duration",
        "snippet": "    private TimePeriod duration;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The time period for the task (estimated or actual). "
    },
    {
        "class_name": "org.jfree.data.gantt.Task",
        "src_path": "source/org/jfree/data/gantt/Task.java",
        "signature": "org.jfree.data.gantt.Task.percentComplete",
        "snippet": "    private Double percentComplete;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The percent complete (<code>null</code> is permitted). "
    },
    {
        "class_name": "org.jfree.data.gantt.Task",
        "src_path": "source/org/jfree/data/gantt/Task.java",
        "signature": "org.jfree.data.gantt.Task.subtasks",
        "snippet": "    private List subtasks;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Storage for the sub-tasks (if any). "
    },
    {
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2065799050738449903L;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.keys",
        "snippet": "    private List keys;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " \r\n     * Storage for aggregate task keys (the task description is used as the \r\n     * key). \r\n     "
    },
    {
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.data",
        "snippet": "    private List data;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Storage for the series. "
    }
]