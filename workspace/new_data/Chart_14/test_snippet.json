[
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests2",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests2.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests2.SegmentedTimelineTests2()",
        "snippet": "    public SegmentedTimelineTests2() {\n        super();\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\n     * Constructor\n     ",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 16)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests2",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests2.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests2.test1()",
        "snippet": "    public void test1() {\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Locale savedLocale = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        Calendar cal = Calendar.getInstance(Locale.UK);\n        cal.set(Calendar.YEAR, 2004);\n        cal.set(Calendar.MONTH, Calendar.MARCH);\n        cal.set(Calendar.DAY_OF_MONTH, 26);\n        cal.set(Calendar.HOUR_OF_DAY, 9);\n        cal.set(Calendar.MINUTE, 0);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Date date = cal.getTime();\n                  \n        SegmentedTimeline timeline = getTimeline();      \n        long value = timeline.toTimelineValue(date);   \n        long ms = timeline.toMillisecond(value);\n        Calendar cal2 = Calendar.getInstance(Locale.UK);\n        cal2.setTime(new Date(ms));\n        Date reverted = cal2.getTime();\n        assertTrue(\"test1\", value == (900000 * 34) \n                && date.getTime() == reverted.getTime());\n        TimeZone.setDefault(savedZone);\n        Locale.setDefault(savedLocale);\n    }",
        "begin_line": 69,
        "end_line": 94,
        "comment": "\n     * Test 1 checks 9am Friday 26 March 2004 converts to a timeline value and \n     * back again correctly.  This is prior to Daylight Saving.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 51)",
            "(line 71,col 9)-(line 71,col 67)",
            "(line 72,col 9)-(line 72,col 49)",
            "(line 73,col 9)-(line 73,col 37)",
            "(line 74,col 9)-(line 74,col 55)",
            "(line 75,col 9)-(line 75,col 37)",
            "(line 76,col 9)-(line 76,col 48)",
            "(line 77,col 9)-(line 77,col 43)",
            "(line 78,col 9)-(line 78,col 41)",
            "(line 79,col 9)-(line 79,col 36)",
            "(line 80,col 9)-(line 80,col 36)",
            "(line 81,col 9)-(line 81,col 41)",
            "(line 82,col 9)-(line 82,col 34)",
            "(line 84,col 9)-(line 84,col 51)",
            "(line 85,col 9)-(line 85,col 52)",
            "(line 86,col 9)-(line 86,col 48)",
            "(line 87,col 9)-(line 87,col 56)",
            "(line 88,col 9)-(line 88,col 35)",
            "(line 89,col 9)-(line 89,col 39)",
            "(line 90,col 9)-(line 91,col 57)",
            "(line 92,col 9)-(line 92,col 39)",
            "(line 93,col 9)-(line 93,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests2",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests2.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests2.test2()",
        "snippet": "    public void test2() {\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Calendar cal = Calendar.getInstance(Locale.UK);\n        cal.set(Calendar.YEAR, 2004);\n        cal.set(Calendar.MONTH, Calendar.MARCH);\n        cal.set(Calendar.DAY_OF_MONTH, 26);\n        cal.set(Calendar.HOUR_OF_DAY, 9);\n        cal.set(Calendar.MINUTE, 15);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Date date = cal.getTime();\n                  \n        SegmentedTimeline timeline = getTimeline();      \n\n        long value = timeline.toTimelineValue(date);   \n        long ms = timeline.toMillisecond(value);\n        Calendar cal2 = Calendar.getInstance(Locale.UK);\n        cal2.setTime(new Date(ms));\n        Date reverted = cal2.getTime();\n        assertTrue(\n            \"test2\", value == (900000 * 34 + 900000) \n            && date.getTime() == reverted.getTime()\n        );\n        TimeZone.setDefault(savedZone);\n     }",
        "begin_line": 100,
        "end_line": 125,
        "comment": "\n     * Test 2 checks 9.15am Friday 26 March 2004 converts to a timeline value \n     * and back again correctly.  This is prior to Daylight Saving.\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 51)",
            "(line 102,col 9)-(line 102,col 67)",
            "(line 103,col 9)-(line 103,col 55)",
            "(line 104,col 9)-(line 104,col 37)",
            "(line 105,col 9)-(line 105,col 48)",
            "(line 106,col 9)-(line 106,col 43)",
            "(line 107,col 9)-(line 107,col 41)",
            "(line 108,col 9)-(line 108,col 37)",
            "(line 109,col 9)-(line 109,col 36)",
            "(line 110,col 9)-(line 110,col 41)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 113,col 9)-(line 113,col 51)",
            "(line 115,col 9)-(line 115,col 52)",
            "(line 116,col 9)-(line 116,col 48)",
            "(line 117,col 9)-(line 117,col 56)",
            "(line 118,col 9)-(line 118,col 35)",
            "(line 119,col 9)-(line 119,col 39)",
            "(line 120,col 9)-(line 123,col 10)",
            "(line 124,col 9)-(line 124,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests2",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests2.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests2.test3()",
        "snippet": "    public void test3() {\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Calendar cal = Calendar.getInstance(Locale.UK);\n        cal.set(Calendar.YEAR, 2004);\n        cal.set(Calendar.MONTH, Calendar.MARCH);\n        cal.set(Calendar.DAY_OF_MONTH, 26);\n        cal.set(Calendar.HOUR_OF_DAY, 9);\n        cal.set(Calendar.MINUTE, 30);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Date date = cal.getTime();                 \n        SegmentedTimeline timeline = getTimeline();      \n\n        long value = timeline.toTimelineValue(date);   \n        long ms = timeline.toMillisecond(value);\n      \n        Calendar cal2 = Calendar.getInstance(Locale.UK);\n        cal2.setTime(new Date(ms));\n        Date reverted = cal2.getTime();\n        assertTrue(\n            \"test2\", value == (900000 * 34 + 900000 * 2) \n            && date.getTime() == reverted.getTime()\n        );\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 131,
        "end_line": 156,
        "comment": "\n     * Test 3 checks 9.30am Friday 26 March 2004 converts to a timeline value \n     * and back again correctly.  This is prior to Daylight Saving.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 51)",
            "(line 133,col 9)-(line 133,col 67)",
            "(line 134,col 9)-(line 134,col 55)",
            "(line 135,col 9)-(line 135,col 37)",
            "(line 136,col 9)-(line 136,col 48)",
            "(line 137,col 9)-(line 137,col 43)",
            "(line 138,col 9)-(line 138,col 41)",
            "(line 139,col 9)-(line 139,col 37)",
            "(line 140,col 9)-(line 140,col 36)",
            "(line 141,col 9)-(line 141,col 41)",
            "(line 142,col 9)-(line 142,col 34)",
            "(line 143,col 9)-(line 143,col 51)",
            "(line 145,col 9)-(line 145,col 52)",
            "(line 146,col 9)-(line 146,col 48)",
            "(line 148,col 9)-(line 148,col 56)",
            "(line 149,col 9)-(line 149,col 35)",
            "(line 150,col 9)-(line 150,col 39)",
            "(line 151,col 9)-(line 154,col 10)",
            "(line 155,col 9)-(line 155,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests2",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests2.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests2.test4()",
        "snippet": "    public void test4() {\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Calendar cal = Calendar.getInstance(Locale.UK);\n        cal.set(Calendar.YEAR, 2004);\n        cal.set(Calendar.MONTH, Calendar.MARCH);\n        cal.set(Calendar.DAY_OF_MONTH, 26);\n        cal.set(Calendar.HOUR_OF_DAY, 9);\n        cal.set(Calendar.MINUTE, 30);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 1);\n        Date date = cal.getTime();\n        SegmentedTimeline timeline = getTimeline();      \n\n        long value = timeline.toTimelineValue(date);   \n        long ms = timeline.toMillisecond(value);\n        Calendar cal2 = Calendar.getInstance(Locale.UK);\n        cal2.setTime(new Date(ms));\n        Date reverted = cal2.getTime();\n        assertTrue(\n            \"test4\", value == (900000 * 34 + 900000 * 2 + 1) \n            && date.getTime() == reverted.getTime()\n        );\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 163,
        "end_line": 187,
        "comment": "\n     * Test 4 checks 9.30am Friday 26 March 2004 (+ 1 millisecond) converts to \n     * a timeline value and back again correctly.  This is prior to Daylight \n     * Saving.\n     ",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 51)",
            "(line 165,col 9)-(line 165,col 67)",
            "(line 166,col 9)-(line 166,col 55)",
            "(line 167,col 9)-(line 167,col 37)",
            "(line 168,col 9)-(line 168,col 48)",
            "(line 169,col 9)-(line 169,col 43)",
            "(line 170,col 9)-(line 170,col 41)",
            "(line 171,col 9)-(line 171,col 37)",
            "(line 172,col 9)-(line 172,col 36)",
            "(line 173,col 9)-(line 173,col 41)",
            "(line 174,col 9)-(line 174,col 34)",
            "(line 175,col 9)-(line 175,col 51)",
            "(line 177,col 9)-(line 177,col 52)",
            "(line 178,col 9)-(line 178,col 48)",
            "(line 179,col 9)-(line 179,col 56)",
            "(line 180,col 9)-(line 180,col 35)",
            "(line 181,col 9)-(line 181,col 39)",
            "(line 182,col 9)-(line 185,col 10)",
            "(line 186,col 9)-(line 186,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests2",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests2.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests2.test5()",
        "snippet": "    public void test5() {\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Calendar cal = Calendar.getInstance(Locale.UK);\n        cal.set(Calendar.YEAR, 2004);\n        cal.set(Calendar.MONTH, Calendar.MARCH);\n        cal.set(Calendar.DAY_OF_MONTH, 25);\n        cal.set(Calendar.HOUR_OF_DAY, 17);\n        cal.set(Calendar.MINUTE, 30);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Date date = cal.getTime();\n        SegmentedTimeline timeline = getTimeline();      \n\n        long value = timeline.toTimelineValue(date);   \n        long ms = timeline.toMillisecond(value);\n        Calendar cal2 = Calendar.getInstance(Locale.UK);\n        cal2.setTime(new Date(ms));\n        Date reverted = cal2.getTime();\n        Calendar expectedReverted = Calendar.getInstance(Locale.UK);\n        expectedReverted.set(Calendar.YEAR, 2004);\n        expectedReverted.set(Calendar.MONTH, Calendar.MARCH);\n        expectedReverted.set(Calendar.DAY_OF_MONTH, 26);\n        expectedReverted.set(Calendar.HOUR_OF_DAY, 9);\n        expectedReverted.set(Calendar.MINUTE, 0);\n        expectedReverted.set(Calendar.SECOND, 0);\n        expectedReverted.set(Calendar.MILLISECOND, 0);\n      \n        assertTrue(\n            \"test5\", value == (900000 * 34) \n            && expectedReverted.getTime().getTime() == reverted.getTime()\n        );\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 195,
        "end_line": 228,
        "comment": "\n     * Test 5 checks 5.30pm Thursday 25 March 2004 converts to a timeline \n     * value and back again correctly.  As it is in the excluded segment, we \n     * expect it to map to 9am, Friday 26 March 2004.  This is prior to \n     * Daylight Saving.\n     ",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 51)",
            "(line 197,col 9)-(line 197,col 67)",
            "(line 198,col 9)-(line 198,col 55)",
            "(line 199,col 9)-(line 199,col 37)",
            "(line 200,col 9)-(line 200,col 48)",
            "(line 201,col 9)-(line 201,col 43)",
            "(line 202,col 9)-(line 202,col 42)",
            "(line 203,col 9)-(line 203,col 37)",
            "(line 204,col 9)-(line 204,col 36)",
            "(line 205,col 9)-(line 205,col 41)",
            "(line 206,col 9)-(line 206,col 34)",
            "(line 207,col 9)-(line 207,col 51)",
            "(line 209,col 9)-(line 209,col 52)",
            "(line 210,col 9)-(line 210,col 48)",
            "(line 211,col 9)-(line 211,col 56)",
            "(line 212,col 9)-(line 212,col 35)",
            "(line 213,col 9)-(line 213,col 39)",
            "(line 214,col 9)-(line 214,col 68)",
            "(line 215,col 9)-(line 215,col 50)",
            "(line 216,col 9)-(line 216,col 61)",
            "(line 217,col 9)-(line 217,col 56)",
            "(line 218,col 9)-(line 218,col 54)",
            "(line 219,col 9)-(line 219,col 49)",
            "(line 220,col 9)-(line 220,col 49)",
            "(line 221,col 9)-(line 221,col 54)",
            "(line 223,col 9)-(line 226,col 10)",
            "(line 227,col 9)-(line 227,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests2",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests2.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests2.test6()",
        "snippet": "    public void test6() {\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Calendar cal = Calendar.getInstance(Locale.UK);\n        cal.set(Calendar.YEAR, 2004);\n        cal.set(Calendar.MONTH, Calendar.MARCH);\n        cal.set(Calendar.DAY_OF_MONTH, 28);\n        cal.set(Calendar.HOUR_OF_DAY, 9);\n        cal.set(Calendar.MINUTE, 0);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Date date = cal.getTime();\n        SegmentedTimeline timeline = getTimeline();      \n\n        long value = timeline.toTimelineValue(date);   \n        long ms = timeline.toMillisecond(value);\n        Calendar cal2 = Calendar.getInstance(Locale.UK);\n        cal2.setTime(new Date(ms));\n        Date reverted = cal2.getTime();\n      \n        Calendar expectedReverted = Calendar.getInstance(Locale.UK);\n        expectedReverted.set(Calendar.YEAR, 2004);\n        expectedReverted.set(Calendar.MONTH, Calendar.MARCH);\n        expectedReverted.set(Calendar.DAY_OF_MONTH, 29);\n        expectedReverted.set(Calendar.HOUR_OF_DAY, 9);\n        expectedReverted.set(Calendar.MINUTE, 0);\n        expectedReverted.set(Calendar.SECOND, 0);\n        expectedReverted.set(Calendar.MILLISECOND, 0);\n      \n        assertTrue(\n            \"test6\", value == (900000 * 34 * 2) \n            && expectedReverted.getTime().getTime() == reverted.getTime()\n        );\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 236,
        "end_line": 270,
        "comment": "\n     * Test 6 checks that 9am on Sunday 28 March 2004 converts to the timeline \n     * value and back again correctly.  Note that Saturday and Sunday are \n     * excluded from the timeline, so we expect the value to map to 9am on \n     * Monday 29 March 2004. This is during daylight saving.\n     ",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 51)",
            "(line 238,col 9)-(line 238,col 67)",
            "(line 239,col 9)-(line 239,col 55)",
            "(line 240,col 9)-(line 240,col 37)",
            "(line 241,col 9)-(line 241,col 48)",
            "(line 242,col 9)-(line 242,col 43)",
            "(line 243,col 9)-(line 243,col 41)",
            "(line 244,col 9)-(line 244,col 36)",
            "(line 245,col 9)-(line 245,col 36)",
            "(line 246,col 9)-(line 246,col 41)",
            "(line 247,col 9)-(line 247,col 34)",
            "(line 248,col 9)-(line 248,col 51)",
            "(line 250,col 9)-(line 250,col 52)",
            "(line 251,col 9)-(line 251,col 48)",
            "(line 252,col 9)-(line 252,col 56)",
            "(line 253,col 9)-(line 253,col 35)",
            "(line 254,col 9)-(line 254,col 39)",
            "(line 256,col 9)-(line 256,col 68)",
            "(line 257,col 9)-(line 257,col 50)",
            "(line 258,col 9)-(line 258,col 61)",
            "(line 259,col 9)-(line 259,col 56)",
            "(line 260,col 9)-(line 260,col 54)",
            "(line 261,col 9)-(line 261,col 49)",
            "(line 262,col 9)-(line 262,col 49)",
            "(line 263,col 9)-(line 263,col 54)",
            "(line 265,col 9)-(line 268,col 10)",
            "(line 269,col 9)-(line 269,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests2",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests2.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests2.test7()",
        "snippet": "    public void test7() {\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Calendar cal = Calendar.getInstance(Locale.UK);\n        cal.set(Calendar.YEAR, 2004);\n        cal.set(Calendar.MONTH, Calendar.MARCH);\n        cal.set(Calendar.DAY_OF_MONTH, 29);\n        cal.set(Calendar.HOUR_OF_DAY, 9);\n        cal.set(Calendar.MINUTE, 0);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Date date = cal.getTime();\n                  \n        SegmentedTimeline timeline = getTimeline();\n        long value = timeline.toTimelineValue(date);   \n        long ms = timeline.toMillisecond(value);\n      \n        Calendar cal2 = Calendar.getInstance(Locale.UK);\n        cal2.setTime(new Date(ms));\n        Date reverted = cal2.getTime();\n      \n        Calendar expectedReverted = Calendar.getInstance();\n        expectedReverted.set(Calendar.YEAR, 2004);\n        expectedReverted.set(Calendar.MONTH, Calendar.MARCH);\n        expectedReverted.set(Calendar.DAY_OF_MONTH, 29);\n        expectedReverted.set(Calendar.HOUR_OF_DAY, 9);\n        expectedReverted.set(Calendar.MINUTE, 0);\n        expectedReverted.set(Calendar.SECOND, 0);\n        expectedReverted.set(Calendar.MILLISECOND, 0);\n      \n        assertTrue(\n            \"test7\", value == (900000 * 34 * 2) \n            && expectedReverted.getTime().getTime() == reverted.getTime()\n        );\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 276,
        "end_line": 311,
        "comment": "\n     * Test 7 checks 9am Monday 29 March 2004 converts to a timeline value and \n     * back again correctly.  This is during Daylight Saving.\n     ",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 51)",
            "(line 278,col 9)-(line 278,col 67)",
            "(line 279,col 9)-(line 279,col 55)",
            "(line 280,col 9)-(line 280,col 37)",
            "(line 281,col 9)-(line 281,col 48)",
            "(line 282,col 9)-(line 282,col 43)",
            "(line 283,col 9)-(line 283,col 41)",
            "(line 284,col 9)-(line 284,col 36)",
            "(line 285,col 9)-(line 285,col 36)",
            "(line 286,col 9)-(line 286,col 41)",
            "(line 287,col 9)-(line 287,col 34)",
            "(line 289,col 9)-(line 289,col 51)",
            "(line 290,col 9)-(line 290,col 52)",
            "(line 291,col 9)-(line 291,col 48)",
            "(line 293,col 9)-(line 293,col 56)",
            "(line 294,col 9)-(line 294,col 35)",
            "(line 295,col 9)-(line 295,col 39)",
            "(line 297,col 9)-(line 297,col 59)",
            "(line 298,col 9)-(line 298,col 50)",
            "(line 299,col 9)-(line 299,col 61)",
            "(line 300,col 9)-(line 300,col 56)",
            "(line 301,col 9)-(line 301,col 54)",
            "(line 302,col 9)-(line 302,col 49)",
            "(line 303,col 9)-(line 303,col 49)",
            "(line 304,col 9)-(line 304,col 54)",
            "(line 306,col 9)-(line 309,col 10)",
            "(line 310,col 9)-(line 310,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests2",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests2.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests2.test8()",
        "snippet": "    public void test8() {\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Calendar cal = Calendar.getInstance(Locale.UK);\n        cal.set(Calendar.YEAR, 2004);\n        cal.set(Calendar.MONTH, Calendar.MARCH);\n        cal.set(Calendar.DAY_OF_MONTH, 29);\n        cal.set(Calendar.HOUR_OF_DAY, 10);\n        cal.set(Calendar.MINUTE, 0);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Date date = cal.getTime();\n                  \n        SegmentedTimeline timeline = getTimeline();      \n      \n        // Add exception in included segments\n        cal.set(Calendar.YEAR, 2004);\n        cal.set(Calendar.MONTH, Calendar.MARCH);\n        cal.set(Calendar.DAY_OF_MONTH, 29);\n        cal.set(Calendar.HOUR_OF_DAY, 9);\n        cal.set(Calendar.MINUTE, 15);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        timeline.addException(cal.getTime());\n            \n        long value = timeline.toTimelineValue(date);   \n        long ms = timeline.toMillisecond(value);\n      \n        Calendar cal2 = Calendar.getInstance(Locale.UK);\n        cal2.setTime(new Date(ms));\n        Date reverted = cal2.getTime();\n      \n        Calendar expectedReverted = Calendar.getInstance();\n        expectedReverted.set(Calendar.YEAR, 2004);\n        expectedReverted.set(Calendar.MONTH, Calendar.MARCH);\n        expectedReverted.set(Calendar.DAY_OF_MONTH, 29);\n        expectedReverted.set(Calendar.HOUR_OF_DAY, 10);\n        expectedReverted.set(Calendar.MINUTE, 0);\n        expectedReverted.set(Calendar.SECOND, 0);\n        expectedReverted.set(Calendar.MILLISECOND, 0);\n      \n        assertTrue(\n            \"test8\", value == (900000 * 34 * 2 + 900000 * (4 - 1)) \n            && expectedReverted.getTime().getTime() == reverted.getTime()\n        );\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 316,
        "end_line": 362,
        "comment": "\n     * Test 8.\n     ",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 51)",
            "(line 318,col 9)-(line 318,col 67)",
            "(line 319,col 9)-(line 319,col 55)",
            "(line 320,col 9)-(line 320,col 37)",
            "(line 321,col 9)-(line 321,col 48)",
            "(line 322,col 9)-(line 322,col 43)",
            "(line 323,col 9)-(line 323,col 42)",
            "(line 324,col 9)-(line 324,col 36)",
            "(line 325,col 9)-(line 325,col 36)",
            "(line 326,col 9)-(line 326,col 41)",
            "(line 327,col 9)-(line 327,col 34)",
            "(line 329,col 9)-(line 329,col 51)",
            "(line 332,col 9)-(line 332,col 37)",
            "(line 333,col 9)-(line 333,col 48)",
            "(line 334,col 9)-(line 334,col 43)",
            "(line 335,col 9)-(line 335,col 41)",
            "(line 336,col 9)-(line 336,col 37)",
            "(line 337,col 9)-(line 337,col 36)",
            "(line 338,col 9)-(line 338,col 41)",
            "(line 339,col 9)-(line 339,col 45)",
            "(line 341,col 9)-(line 341,col 52)",
            "(line 342,col 9)-(line 342,col 48)",
            "(line 344,col 9)-(line 344,col 56)",
            "(line 345,col 9)-(line 345,col 35)",
            "(line 346,col 9)-(line 346,col 39)",
            "(line 348,col 9)-(line 348,col 59)",
            "(line 349,col 9)-(line 349,col 50)",
            "(line 350,col 9)-(line 350,col 61)",
            "(line 351,col 9)-(line 351,col 56)",
            "(line 352,col 9)-(line 352,col 55)",
            "(line 353,col 9)-(line 353,col 49)",
            "(line 354,col 9)-(line 354,col 49)",
            "(line 355,col 9)-(line 355,col 54)",
            "(line 357,col 9)-(line 360,col 10)",
            "(line 361,col 9)-(line 361,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests2",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests2.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests2.getTimeline()",
        "snippet": "    private SegmentedTimeline getTimeline() {\n        Calendar cal = Calendar.getInstance(Locale.UK);\n        cal.set(Calendar.YEAR, 2004);\n        cal.set(Calendar.MONTH, Calendar.MARCH);\n        cal.set(Calendar.DAY_OF_MONTH, 25);\n        cal.set(Calendar.HOUR_OF_DAY, 9);\n        cal.set(Calendar.MINUTE, 0);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Date from = cal.getTime();\n\n        cal = Calendar.getInstance(Locale.UK);\n        cal.set(Calendar.YEAR, 2004);\n        cal.set(Calendar.MONTH, Calendar.MARCH);\n        cal.set(Calendar.DAY_OF_MONTH, 30);\n        cal.set(Calendar.HOUR_OF_DAY, 17);\n        cal.set(Calendar.MINUTE, 30);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Date to = cal.getTime();\n\n        return getTimeline(from, to);\n    }",
        "begin_line": 370,
        "end_line": 392,
        "comment": "\n     * Creates a timeline from 9am on Thursday 25 March 2004 to 5pm on \n     * Tuesday 30 March 2004, for the UK locale.\n     * \n     * @return A timeline.\n     ",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 55)",
            "(line 372,col 9)-(line 372,col 37)",
            "(line 373,col 9)-(line 373,col 48)",
            "(line 374,col 9)-(line 374,col 43)",
            "(line 375,col 9)-(line 375,col 41)",
            "(line 376,col 9)-(line 376,col 36)",
            "(line 377,col 9)-(line 377,col 36)",
            "(line 378,col 9)-(line 378,col 41)",
            "(line 379,col 9)-(line 379,col 34)",
            "(line 381,col 9)-(line 381,col 46)",
            "(line 382,col 9)-(line 382,col 37)",
            "(line 383,col 9)-(line 383,col 48)",
            "(line 384,col 9)-(line 384,col 43)",
            "(line 385,col 9)-(line 385,col 42)",
            "(line 386,col 9)-(line 386,col 37)",
            "(line 387,col 9)-(line 387,col 36)",
            "(line 388,col 9)-(line 388,col 41)",
            "(line 389,col 9)-(line 389,col 32)",
            "(line 391,col 9)-(line 391,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests2",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests2.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests2.getTimeline(java.util.Date, java.util.Date)",
        "snippet": "    private SegmentedTimeline getTimeline(Date start, Date end) {\n      \n        Calendar cal = Calendar.getInstance(Locale.UK);\n        cal.set(Calendar.YEAR, 1970);\n        cal.set(Calendar.MONTH, Calendar.JANUARY);\n        cal.set(Calendar.DAY_OF_MONTH, 1);\n        cal.set(Calendar.HOUR_OF_DAY, 9);\n        cal.set(Calendar.MINUTE, 0);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Date open = cal.getTime();\n\n        cal = Calendar.getInstance(Locale.UK);\n        cal.set(Calendar.YEAR, 1970);\n        cal.set(Calendar.MONTH, Calendar.JANUARY);\n        cal.set(Calendar.DAY_OF_MONTH, 1);\n        cal.set(Calendar.HOUR_OF_DAY, 17);\n        cal.set(Calendar.MINUTE, 30);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Date close = cal.getTime();\n                        \n        SegmentedTimeline result = null;      \n        // Create a segmented time line (segment size : 15 minutes)\n        long quarterHourCount = (close.getTime() - open.getTime())\n            / SegmentedTimeline.FIFTEEN_MINUTE_SEGMENT_SIZE;\n        long totalQuarterHourCount = SegmentedTimeline.DAY_SEGMENT_SIZE \n            / SegmentedTimeline.FIFTEEN_MINUTE_SEGMENT_SIZE;\n        result = new SegmentedTimeline(\n            SegmentedTimeline.FIFTEEN_MINUTE_SEGMENT_SIZE,\n            (int) quarterHourCount, \n            (int) (totalQuarterHourCount - quarterHourCount)  \n        );\n        result.setAdjustForDaylightSaving(true);\n        // Set start time\n        result.setStartTime(start.getTime());\n        // Saturday and Sundays are non business hours\n        result.setBaseTimeline(\n            SegmentedTimeline.newMondayThroughFridayTimeline()\n        );\n        /* PUT exclusions in test */\n        if (start != null && end != null) {\n            result.addBaseTimelineExclusions(start.getTime(), end.getTime());\n        }\n          \n        return result;   \n    }",
        "begin_line": 403,
        "end_line": 449,
        "comment": "\n     * Returns a segmented timeline for 15 minute segments, Monday to Friday \n     * only, between 9am and 5pm.  The UK locale is used.\n     * \n     * @param start  the start date.\n     * @param end  the end date.\n     * \n     * @return The timeline.\n     ",
        "child_ranges": [
            "(line 405,col 9)-(line 405,col 55)",
            "(line 406,col 9)-(line 406,col 37)",
            "(line 407,col 9)-(line 407,col 50)",
            "(line 408,col 9)-(line 408,col 42)",
            "(line 409,col 9)-(line 409,col 41)",
            "(line 410,col 9)-(line 410,col 36)",
            "(line 411,col 9)-(line 411,col 36)",
            "(line 412,col 9)-(line 412,col 41)",
            "(line 413,col 9)-(line 413,col 34)",
            "(line 415,col 9)-(line 415,col 46)",
            "(line 416,col 9)-(line 416,col 37)",
            "(line 417,col 9)-(line 417,col 50)",
            "(line 418,col 9)-(line 418,col 42)",
            "(line 419,col 9)-(line 419,col 42)",
            "(line 420,col 9)-(line 420,col 37)",
            "(line 421,col 9)-(line 421,col 36)",
            "(line 422,col 9)-(line 422,col 41)",
            "(line 423,col 9)-(line 423,col 35)",
            "(line 425,col 9)-(line 425,col 40)",
            "(line 427,col 9)-(line 428,col 60)",
            "(line 429,col 9)-(line 430,col 60)",
            "(line 431,col 9)-(line 435,col 10)",
            "(line 436,col 9)-(line 436,col 48)",
            "(line 438,col 9)-(line 438,col 45)",
            "(line 440,col 9)-(line 442,col 10)",
            "(line 444,col 9)-(line 446,col 9)",
            "(line 448,col 9)-(line 448,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberTickUnitTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberTickUnitTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberTickUnitTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(NumberTickUnitTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberTickUnitTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberTickUnitTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberTickUnitTests.NumberTickUnitTests(java.lang.String)",
        "snippet": "    public NumberTickUnitTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberTickUnitTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberTickUnitTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberTickUnitTests.testEquals()",
        "snippet": "    public void testEquals() {\n        NumberTickUnit t1 = new NumberTickUnit(1.23, new DecimalFormat(\"0.00\"));\n        NumberTickUnit t2 = new NumberTickUnit(1.23, new DecimalFormat(\"0.00\"));\n        assertTrue(t1.equals(t2));\n        assertTrue(t2.equals(t1));\n        \n        t1 = new NumberTickUnit(3.21, new DecimalFormat(\"0.00\"));\n        assertFalse(t1.equals(t2));\n        t2 = new NumberTickUnit(3.21, new DecimalFormat(\"0.00\"));\n        assertTrue(t1.equals(t2));\n        \n        t1 = new NumberTickUnit(3.21, new DecimalFormat(\"0.000\"));\n        assertFalse(t1.equals(t2));\n        t2 = new NumberTickUnit(3.21, new DecimalFormat(\"0.000\"));\n        assertTrue(t1.equals(t2));\n    }",
        "begin_line": 83,
        "end_line": 98,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 80)",
            "(line 85,col 9)-(line 85,col 80)",
            "(line 86,col 9)-(line 86,col 34)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 89,col 9)-(line 89,col 65)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 65)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 94,col 66)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 66)",
            "(line 97,col 9)-(line 97,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberTickUnitTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberTickUnitTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberTickUnitTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        NumberTickUnit t1 = new NumberTickUnit(1.23, new DecimalFormat(\"0.00\"));\n        NumberTickUnit t2 = new NumberTickUnit(1.23, new DecimalFormat(\"0.00\"));\n        int h1 = t1.hashCode();\n        int h2 = t2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 103,
        "end_line": 109,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 80)",
            "(line 105,col 9)-(line 105,col 80)",
            "(line 106,col 9)-(line 106,col 31)",
            "(line 107,col 9)-(line 107,col 31)",
            "(line 108,col 9)-(line 108,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberTickUnitTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberTickUnitTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberTickUnitTests.testCloning()",
        "snippet": "    public void testCloning() {\n        NumberTickUnit t1 = new NumberTickUnit(1.23, new DecimalFormat(\"0.00\"));\n        assertFalse(t1 instanceof Cloneable);\n    }",
        "begin_line": 114,
        "end_line": 117,
        "comment": "\n     * This is an immutable class so it doesn't need to be cloneable.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 80)",
            "(line 116,col 9)-(line 116,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberTickUnitTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberTickUnitTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberTickUnitTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        NumberTickUnit t1 = new NumberTickUnit(1.23, new DecimalFormat(\"0.00\"));\n        NumberTickUnit t2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(t1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            t2 = (NumberTickUnit) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(t1, t2);\n    }",
        "begin_line": 122,
        "end_line": 141,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 80)",
            "(line 124,col 9)-(line 124,col 33)",
            "(line 125,col 9)-(line 139,col 9)",
            "(line 140,col 9)-(line 140,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.MonthDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/MonthDateFormatTests.java",
        "signature": "org.jfree.chart.axis.junit.MonthDateFormatTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MonthDateFormatTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.MonthDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/MonthDateFormatTests.java",
        "signature": "org.jfree.chart.axis.junit.MonthDateFormatTests.MonthDateFormatTests(java.lang.String)",
        "snippet": "    public MonthDateFormatTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.MonthDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/MonthDateFormatTests.java",
        "signature": "org.jfree.chart.axis.junit.MonthDateFormatTests.testEquals()",
        "snippet": "    public void testEquals() {\n        MonthDateFormat mf1 = new MonthDateFormat();\n        MonthDateFormat mf2 = new MonthDateFormat();\n        assertTrue(mf1.equals(mf2));\n        assertTrue(mf2.equals(mf1));\n        \n        boolean[] showYear1 = new boolean [12];\n        showYear1[0] = true;\n        boolean[] showYear2 = new boolean [12];\n        showYear1[1] = true;\n        \n        // time zone\n        mf1 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.US, 1, \n            showYear1, new SimpleDateFormat(\"yy\"));\n        assertFalse(mf1.equals(mf2));\n        mf2 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.US, 1, \n            showYear1, new SimpleDateFormat(\"yy\"));\n        assertTrue(mf1.equals(mf2));\n        \n        // locale\n        mf1 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 1, \n            showYear1, new SimpleDateFormat(\"yy\"));\n        assertFalse(mf1.equals(mf2));\n        mf2 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 1, \n            showYear1, new SimpleDateFormat(\"yy\"));\n        assertTrue(mf1.equals(mf2));\n        \n        // chars\n        mf1 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 2, \n            showYear1, new SimpleDateFormat(\"yy\"));\n        assertFalse(mf1.equals(mf2));\n        mf2 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 2, \n            showYear1, new SimpleDateFormat(\"yy\"));\n        assertTrue(mf1.equals(mf2));\n        \n        // showYear[]\n        mf1 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 2, \n            showYear2, new SimpleDateFormat(\"yy\"));\n        assertFalse(mf1.equals(mf2));\n        mf2 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 2, \n            showYear2, new SimpleDateFormat(\"yy\"));\n        assertTrue(mf1.equals(mf2));\n        \n        // yearFormatter\n        mf1 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 2, \n            showYear2, new SimpleDateFormat(\"yyyy\"));\n        assertFalse(mf1.equals(mf2));\n        mf2 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 2, \n            showYear2, new SimpleDateFormat(\"yyyy\"));\n        assertTrue(mf1.equals(mf2));\n\n    }",
        "begin_line": 85,
        "end_line": 136,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 52)",
            "(line 87,col 9)-(line 87,col 52)",
            "(line 88,col 9)-(line 88,col 36)",
            "(line 89,col 9)-(line 89,col 36)",
            "(line 91,col 9)-(line 91,col 47)",
            "(line 92,col 9)-(line 92,col 28)",
            "(line 93,col 9)-(line 93,col 47)",
            "(line 94,col 9)-(line 94,col 28)",
            "(line 97,col 9)-(line 98,col 51)",
            "(line 99,col 9)-(line 99,col 37)",
            "(line 100,col 9)-(line 101,col 51)",
            "(line 102,col 9)-(line 102,col 36)",
            "(line 105,col 9)-(line 106,col 51)",
            "(line 107,col 9)-(line 107,col 37)",
            "(line 108,col 9)-(line 109,col 51)",
            "(line 110,col 9)-(line 110,col 36)",
            "(line 113,col 9)-(line 114,col 51)",
            "(line 115,col 9)-(line 115,col 37)",
            "(line 116,col 9)-(line 117,col 51)",
            "(line 118,col 9)-(line 118,col 36)",
            "(line 121,col 9)-(line 122,col 51)",
            "(line 123,col 9)-(line 123,col 37)",
            "(line 124,col 9)-(line 125,col 51)",
            "(line 126,col 9)-(line 126,col 36)",
            "(line 129,col 9)-(line 130,col 53)",
            "(line 131,col 9)-(line 131,col 37)",
            "(line 132,col 9)-(line 133,col 53)",
            "(line 134,col 9)-(line 134,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.MonthDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/MonthDateFormatTests.java",
        "signature": "org.jfree.chart.axis.junit.MonthDateFormatTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        MonthDateFormat mf1 = new MonthDateFormat();\n        MonthDateFormat mf2 = new MonthDateFormat();\n        assertTrue(mf1.equals(mf2));\n        int h1 = mf1.hashCode();\n        int h2 = mf2.hashCode();\n        assertEquals(h1, h2);\n    }    ",
        "begin_line": 141,
        "end_line": 148,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 52)",
            "(line 143,col 9)-(line 143,col 52)",
            "(line 144,col 9)-(line 144,col 36)",
            "(line 145,col 9)-(line 145,col 32)",
            "(line 146,col 9)-(line 146,col 32)",
            "(line 147,col 9)-(line 147,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.MonthDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/MonthDateFormatTests.java",
        "signature": "org.jfree.chart.axis.junit.MonthDateFormatTests.testCloning()",
        "snippet": "    public void testCloning() {\n        MonthDateFormat mf1 = new MonthDateFormat();\n        MonthDateFormat mf2 = null;\n        mf2 = (MonthDateFormat) mf1.clone();\n        assertTrue(mf1 != mf2);\n        assertTrue(mf1.getClass() == mf2.getClass());\n        assertTrue(mf1.equals(mf2));\n    }",
        "begin_line": 153,
        "end_line": 160,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 52)",
            "(line 155,col 9)-(line 155,col 35)",
            "(line 156,col 9)-(line 156,col 44)",
            "(line 157,col 9)-(line 157,col 31)",
            "(line 158,col 9)-(line 158,col 53)",
            "(line 159,col 9)-(line 159,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.MonthDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/MonthDateFormatTests.java",
        "signature": "org.jfree.chart.axis.junit.MonthDateFormatTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        MonthDateFormat mf1 = new MonthDateFormat();\n        MonthDateFormat mf2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(mf1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            mf2 = (MonthDateFormat) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertTrue(mf1.equals(mf2));\n    }",
        "begin_line": 165,
        "end_line": 184,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 52)",
            "(line 167,col 9)-(line 167,col 35)",
            "(line 168,col 9)-(line 182,col 9)",
            "(line 183,col 9)-(line 183,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SubCategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SubCategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.SubCategoryAxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryAxisTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SubCategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SubCategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.SubCategoryAxisTests.SubCategoryAxisTests(java.lang.String)",
        "snippet": "    public SubCategoryAxisTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SubCategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SubCategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.SubCategoryAxisTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        SubCategoryAxis a1 = new SubCategoryAxis(\"Test\");\n        SubCategoryAxis a2 = new SubCategoryAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        assertTrue(a2.equals(a1));\n        \n        // subcategories\n        a1.addSubCategory(\"Sub 1\");\n        assertFalse(a1.equals(a2));\n        a2.addSubCategory(\"Sub 1\");\n        assertTrue(a1.equals(a2));\n\n        // subLabelFont \n        a1.setSubLabelFont(new Font(\"Serif\", Font.BOLD, 15));\n        assertFalse(a1.equals(a2));\n        a2.setSubLabelFont(new Font(\"Serif\", Font.BOLD, 15));\n        assertTrue(a1.equals(a2));\n      \n        // subLabelPaint \n        a1.setSubLabelPaint(Color.red);\n        assertFalse(a1.equals(a2));\n        a2.setSubLabelPaint(Color.red);\n        assertTrue(a1.equals(a2));\n                \n    }",
        "begin_line": 85,
        "end_line": 110,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 57)",
            "(line 88,col 9)-(line 88,col 57)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 99,col 9)-(line 99,col 61)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 61)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 105,col 9)-(line 105,col 39)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 107,col 39)",
            "(line 108,col 9)-(line 108,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SubCategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SubCategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.SubCategoryAxisTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        SubCategoryAxis a1 = new SubCategoryAxis(\"Test\");\n        SubCategoryAxis a2 = new SubCategoryAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }    ",
        "begin_line": 115,
        "end_line": 122,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 57)",
            "(line 117,col 9)-(line 117,col 57)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 119,col 9)-(line 119,col 31)",
            "(line 120,col 9)-(line 120,col 31)",
            "(line 121,col 9)-(line 121,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SubCategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SubCategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.SubCategoryAxisTests.testCloning()",
        "snippet": "    public void testCloning() {\n        SubCategoryAxis a1 = new SubCategoryAxis(\"Test\");\n        SubCategoryAxis a2 = null;\n        try {\n            a2 = (SubCategoryAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 127,
        "end_line": 139,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 57)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 130,col 9)-(line 135,col 9)",
            "(line 136,col 9)-(line 136,col 29)",
            "(line 137,col 9)-(line 137,col 51)",
            "(line 138,col 9)-(line 138,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SubCategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SubCategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.SubCategoryAxisTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        SubCategoryAxis a1 = new SubCategoryAxis(\"Test Axis\");\n        SubCategoryAxis a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (SubCategoryAxis) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 144,
        "end_line": 166,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 62)",
            "(line 147,col 9)-(line 147,col 34)",
            "(line 149,col 9)-(line 163,col 9)",
            "(line 164,col 9)-(line 164,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.MyLogarithmicAxis.MyLogarithmicAxis(java.lang.String)",
        "snippet": "        public MyLogarithmicAxis(String label) {\n            super(label);\n        }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n         * Creates an instance.\n         * \n         * @param label  the label.\n         ",
        "child_ranges": [
            "(line 73,col 13)-(line 73,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.MyLogarithmicAxis.switchedLog10(double)",
        "snippet": "        protected double switchedLog10(double val) {\n            return super.switchedLog10(val);\n        }",
        "begin_line": 79,
        "end_line": 81,
        "comment": " (non-Javadoc)\n         * @see org.jfree.chart.axis.LogarithmicAxis#switchedLog10(double)\n         ",
        "child_ranges": [
            "(line 80,col 13)-(line 80,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LogarithmicAxisTests.class);\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.LogarithmicAxisTests(java.lang.String)",
        "snippet": "    public LogarithmicAxisTests(String name) {\n        super(name);\n    }",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        this.axis = new MyLogarithmicAxis(\"Value (log)\");\n        this.axis.setAllowNegativesFlag(false);\n        this.axis.setLog10TickLabelsFlag(false);\n        this.axis.setLowerMargin(0.0);\n        this.axis.setUpperMargin(0.0);\n\n        this.axis.setLowerBound(0.2);\n        this.axis.setUpperBound(100.0);\n    }",
        "begin_line": 113,
        "end_line": 122,
        "comment": "\n     * Sets up a new axis.\n     * \n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 57)",
            "(line 115,col 9)-(line 115,col 47)",
            "(line 116,col 9)-(line 116,col 48)",
            "(line 117,col 9)-(line 117,col 38)",
            "(line 118,col 9)-(line 118,col 38)",
            "(line 120,col 9)-(line 120,col 37)",
            "(line 121,col 9)-(line 121,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        LogarithmicAxis a1 = new LogarithmicAxis(\"Test Axis\");\n        LogarithmicAxis a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            a2 = (LogarithmicAxis) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 127,
        "end_line": 148,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 62)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 132,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 146,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.testAdjustedLog10()",
        "snippet": "     public void testAdjustedLog10() {\n         checkLogPowRoundTrip(20);\n         checkLogPowRoundTrip(10);\n         checkLogPowRoundTrip(5);\n         checkLogPowRoundTrip(2);\n         checkLogPowRoundTrip(1);\n         checkLogPowRoundTrip(0.5);\n         checkLogPowRoundTrip(0.2);\n         checkLogPowRoundTrip(0.0001);\n     }",
        "begin_line": 153,
        "end_line": 162,
        "comment": " \n     * Test if adjustedLog10 and adjustedPow10 are inverses of each other \n     ",
        "child_ranges": [
            "(line 154,col 10)-(line 154,col 34)",
            "(line 155,col 10)-(line 155,col 34)",
            "(line 156,col 10)-(line 156,col 33)",
            "(line 157,col 10)-(line 157,col 33)",
            "(line 158,col 10)-(line 158,col 33)",
            "(line 159,col 10)-(line 159,col 35)",
            "(line 160,col 10)-(line 160,col 35)",
            "(line 161,col 10)-(line 161,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.checkLogPowRoundTrip(double)",
        "snippet": "     private void checkLogPowRoundTrip(double value) {\n         assertEquals(\"log(pow(x)) = x\", value, this.axis.adjustedLog10(\n                 this.axis.adjustedPow10(value)), EPSILON);\n         assertEquals(\"pow(log(x)) = x\", value, this.axis.adjustedPow10(\n                 this.axis.adjustedLog10(value)), EPSILON);\n     }",
        "begin_line": 164,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 165,col 10)-(line 166,col 59)",
            "(line 167,col 10)-(line 168,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.testSwitchedLog10()",
        "snippet": "      public void testSwitchedLog10() {\n          assertFalse(\"Axis should not allow negative values\",\n                  this.axis.getAllowNegativesFlag());\n                \n          assertEquals(Math.log(0.5) / LogarithmicAxis.LOG10_VALUE,\n                  this.axis.switchedLog10(0.5), EPSILON);\n\n          checkSwitchedLogPowRoundTrip(20);\n          checkSwitchedLogPowRoundTrip(10);\n          checkSwitchedLogPowRoundTrip(5);\n          checkSwitchedLogPowRoundTrip(2);\n          checkSwitchedLogPowRoundTrip(1);\n          checkSwitchedLogPowRoundTrip(0.5);\n          checkSwitchedLogPowRoundTrip(0.2);\n          checkSwitchedLogPowRoundTrip(0.0001);\n      }",
        "begin_line": 174,
        "end_line": 189,
        "comment": " \n      * Test if switchedLog10 and switchedPow10 are inverses of each other \n      ",
        "child_ranges": [
            "(line 175,col 11)-(line 176,col 53)",
            "(line 178,col 11)-(line 179,col 57)",
            "(line 181,col 11)-(line 181,col 43)",
            "(line 182,col 11)-(line 182,col 43)",
            "(line 183,col 11)-(line 183,col 42)",
            "(line 184,col 11)-(line 184,col 42)",
            "(line 185,col 11)-(line 185,col 42)",
            "(line 186,col 11)-(line 186,col 44)",
            "(line 187,col 11)-(line 187,col 44)",
            "(line 188,col 11)-(line 188,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.checkSwitchedLogPowRoundTrip(double)",
        "snippet": "      private void checkSwitchedLogPowRoundTrip(double value) {\n          assertEquals(\"log(pow(x)) = x\", value, this.axis.switchedLog10(\n                  this.axis.switchedPow10(value)), EPSILON);\n          assertEquals(\"pow(log(x)) = x\", value, this.axis.switchedPow10(\n                  this.axis.switchedLog10(value)), EPSILON);\n      }",
        "begin_line": 191,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 192,col 11)-(line 193,col 60)",
            "(line 194,col 11)-(line 195,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.testJava2DToValue()",
        "snippet": "      public void testJava2DToValue() {\n          Rectangle2D plotArea = new Rectangle2D.Double(22, 33, 500, 500);\n          RectangleEdge edge = RectangleEdge.BOTTOM;\n\n          // set axis bounds to be both greater than 1\n          this.axis.setRange(10, 20);\n          checkPointsToValue(edge, plotArea);\n\n          // check for bounds interval that includes 1\n          this.axis.setRange(0.5, 10);\n          checkPointsToValue(edge, plotArea);\n\n          // check for bounds interval that includes 1\n          this.axis.setRange(0.2, 20);\n          checkPointsToValue(edge, plotArea);\n\n          // check for both bounds smaller than 1\n          this.axis.setRange(0.2, 0.7);\n          checkPointsToValue(edge, plotArea);\n      }",
        "begin_line": 201,
        "end_line": 220,
        "comment": "\n       * Test of java2DToValue method.\n       ",
        "child_ranges": [
            "(line 202,col 11)-(line 202,col 74)",
            "(line 203,col 11)-(line 203,col 52)",
            "(line 206,col 11)-(line 206,col 37)",
            "(line 207,col 11)-(line 207,col 45)",
            "(line 210,col 11)-(line 210,col 38)",
            "(line 211,col 11)-(line 211,col 45)",
            "(line 214,col 11)-(line 214,col 38)",
            "(line 215,col 11)-(line 215,col 45)",
            "(line 218,col 11)-(line 218,col 39)",
            "(line 219,col 11)-(line 219,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.testValueToJava2D()",
        "snippet": "      public void testValueToJava2D() {\n          Rectangle2D plotArea = new Rectangle2D.Double(22, 33, 500, 500);\n          RectangleEdge edge = RectangleEdge.BOTTOM;\n\n          // set axis bounds to be both greater than 1\n          this.axis.setRange(10, 20);\n          checkPointsToJava2D(edge, plotArea);\n\n          // check for bounds interval that includes 1\n          this.axis.setRange(0.5, 10);\n          checkPointsToJava2D(edge, plotArea);\n\n          // check for bounds interval that includes 1\n          this.axis.setRange(0.2, 20);\n          checkPointsToJava2D(edge, plotArea);\n\n          // check for both bounds smaller than 1\n          this.axis.setRange(0.2, 0.7);\n          checkPointsToJava2D(edge, plotArea);\n      }",
        "begin_line": 225,
        "end_line": 244,
        "comment": "\n       * Test of valueToJava2D method.\n       ",
        "child_ranges": [
            "(line 226,col 11)-(line 226,col 74)",
            "(line 227,col 11)-(line 227,col 52)",
            "(line 230,col 11)-(line 230,col 37)",
            "(line 231,col 11)-(line 231,col 46)",
            "(line 234,col 11)-(line 234,col 38)",
            "(line 235,col 11)-(line 235,col 46)",
            "(line 238,col 11)-(line 238,col 38)",
            "(line 239,col 11)-(line 239,col 46)",
            "(line 242,col 11)-(line 242,col 39)",
            "(line 243,col 11)-(line 243,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.checkPointsToJava2D(org.jfree.chart.util.RectangleEdge, java.awt.geom.Rectangle2D)",
        "snippet": "      private void checkPointsToJava2D(RectangleEdge edge, \n              Rectangle2D plotArea) {\n          assertEquals(\"Left most point on the axis should be beginning of \"\n                  + \"range.\", plotArea.getX(), this.axis.valueToJava2D(\n                  this.axis.getLowerBound(), plotArea, edge), EPSILON);\n          assertEquals(\"Right most point on the axis should be end of range.\", \n                  plotArea.getX() + plotArea.getWidth(), \n                  this.axis.valueToJava2D(this.axis.getUpperBound(), \n                  plotArea, edge), EPSILON);\n          assertEquals(\"Center point on the axis should geometric mean of the bounds.\", \n                  plotArea.getX() + (plotArea.getWidth() / 2), \n                  this.axis.valueToJava2D(Math.sqrt(this.axis.getLowerBound() \n                  * this.axis.getUpperBound()), plotArea, edge), EPSILON);\n        }",
        "begin_line": 246,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 248,col 11)-(line 250,col 71)",
            "(line 251,col 11)-(line 254,col 44)",
            "(line 255,col 11)-(line 258,col 74)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.checkPointsToValue(org.jfree.chart.util.RectangleEdge, java.awt.geom.Rectangle2D)",
        "snippet": "     private void checkPointsToValue(RectangleEdge edge, Rectangle2D plotArea) {\n         assertEquals(\"Right most point on the axis should be end of range.\",\n                 this.axis.getUpperBound(), this.axis.java2DToValue(\n                 plotArea.getX() + plotArea.getWidth(), plotArea, edge), \n                 EPSILON);\n\n         assertEquals(\"Left most point on the axis should be beginning of \"\n                 + \"range.\", this.axis.getLowerBound(), \n                 this.axis.java2DToValue(plotArea.getX(), plotArea, edge), \n                 EPSILON);\n\n         assertEquals(\"Center point on the axis should geometric mean of the \"\n                 + \"bounds.\", Math.sqrt(this.axis.getUpperBound() \n                 * this.axis.getLowerBound()), this.axis.java2DToValue(\n                 plotArea.getX() + (plotArea.getWidth() / 2), plotArea, edge), \n                 EPSILON);\n    }",
        "begin_line": 264,
        "end_line": 280,
        "comment": " \n     * Check the translation java2D to value for left, right, and center point.\n     ",
        "child_ranges": [
            "(line 265,col 10)-(line 268,col 26)",
            "(line 270,col 10)-(line 273,col 26)",
            "(line 275,col 10)-(line 279,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogarithmicAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogarithmicAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogarithmicAxisTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(LogarithmicAxisTests.class);\n    }",
        "begin_line": 287,
        "end_line": 289,
        "comment": "\n     * Runs all tests in this class.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 288,col 9)-(line 288,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelWidthTypeTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryLabelWidthTypeTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelWidthTypeTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests.CategoryLabelWidthTypeTests(java.lang.String)",
        "snippet": "    public CategoryLabelWidthTypeTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelWidthTypeTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests.testEquals()",
        "snippet": "    public void testEquals() {\n        assertEquals(\n            CategoryLabelWidthType.CATEGORY, CategoryLabelWidthType.CATEGORY\n        );\n        assertEquals(\n            CategoryLabelWidthType.RANGE, CategoryLabelWidthType.RANGE\n        );\n    }",
        "begin_line": 82,
        "end_line": 89,
        "comment": "\n     * Confirm that the equals() method distinguishes the known values.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 85,col 10)",
            "(line 86,col 9)-(line 88,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelWidthTypeTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        CategoryLabelWidthType a1 = CategoryLabelWidthType.CATEGORY;\n        CategoryLabelWidthType a2 = CategoryLabelWidthType.CATEGORY;\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 94,
        "end_line": 101,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 68)",
            "(line 96,col 9)-(line 96,col 68)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 98,col 9)-(line 98,col 31)",
            "(line 99,col 9)-(line 99,col 31)",
            "(line 100,col 9)-(line 100,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelWidthTypeTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        CategoryLabelWidthType w1 = CategoryLabelWidthType.RANGE;\n        CategoryLabelWidthType w2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(w1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            w2 = (CategoryLabelWidthType) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(w1, w2);\n        assertTrue(w1 == w2);        \n    }",
        "begin_line": 106,
        "end_line": 127,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 65)",
            "(line 108,col 9)-(line 108,col 41)",
            "(line 110,col 9)-(line 124,col 9)",
            "(line 125,col 9)-(line 125,col 29)",
            "(line 126,col 9)-(line 126,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ExtendedCategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ExtendedCategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ExtendedCategoryAxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ExtendedCategoryAxisTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ExtendedCategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ExtendedCategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ExtendedCategoryAxisTests.ExtendedCategoryAxisTests(java.lang.String)",
        "snippet": "    public ExtendedCategoryAxisTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ExtendedCategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ExtendedCategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ExtendedCategoryAxisTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        ExtendedCategoryAxis a1 = new ExtendedCategoryAxis(\"Test\");\n        ExtendedCategoryAxis a2 = new ExtendedCategoryAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        \n        a1.addSubLabel(\"C1\", \"C1-sublabel\");\n        assertFalse(a1.equals(a2));\n        a2.addSubLabel(\"C1\", \"C1-sublabel\");\n        assertTrue(a1.equals(a2));\n        \n        a1.setSubLabelFont(new Font(\"Dialog\", Font.BOLD, 8));\n        assertFalse(a1.equals(a2));\n        a2.setSubLabelFont(new Font(\"Dialog\", Font.BOLD, 8));\n        assertTrue(a1.equals(a2));\n        \n        a1.setSubLabelPaint(Color.red);\n        assertFalse(a1.equals(a2));\n        a2.setSubLabelPaint(Color.red);\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 85,
        "end_line": 105,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 67)",
            "(line 88,col 9)-(line 88,col 67)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 91,col 9)-(line 91,col 44)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 44)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 96,col 61)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 61)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 101,col 39)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 39)",
            "(line 104,col 9)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ExtendedCategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ExtendedCategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ExtendedCategoryAxisTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        ExtendedCategoryAxis a1 = new ExtendedCategoryAxis(\"Test\");\n        ExtendedCategoryAxis a2 = new ExtendedCategoryAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 110,
        "end_line": 117,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 67)",
            "(line 112,col 9)-(line 112,col 67)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 114,col 9)-(line 114,col 31)",
            "(line 115,col 9)-(line 115,col 31)",
            "(line 116,col 9)-(line 116,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ExtendedCategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ExtendedCategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ExtendedCategoryAxisTests.testCloning()",
        "snippet": "    public void testCloning() {\n        ExtendedCategoryAxis a1 = new ExtendedCategoryAxis(\"Test\");\n        ExtendedCategoryAxis a2 = null;\n        try {\n            a2 = (ExtendedCategoryAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n        \n        // check independence\n        a1.addSubLabel(\"C1\", \"ABC\");\n        assertFalse(a1.equals(a2));\n        a2.addSubLabel(\"C1\", \"ABC\");\n        assertTrue(a1.equals(a2));\n        \n    }",
        "begin_line": 122,
        "end_line": 141,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 67)",
            "(line 124,col 9)-(line 124,col 39)",
            "(line 125,col 9)-(line 130,col 9)",
            "(line 131,col 9)-(line 131,col 29)",
            "(line 132,col 9)-(line 132,col 51)",
            "(line 133,col 9)-(line 133,col 34)",
            "(line 136,col 9)-(line 136,col 36)",
            "(line 137,col 9)-(line 137,col 35)",
            "(line 138,col 9)-(line 138,col 36)",
            "(line 139,col 9)-(line 139,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ExtendedCategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ExtendedCategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ExtendedCategoryAxisTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n        ExtendedCategoryAxis a1 = new ExtendedCategoryAxis(\"Test\");\n        a1.setTickLabelFont(\"C1\", new Font(\"Dialog\", Font.PLAIN, 15));\n        a1.setTickLabelPaint(\"C1\", new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.white));\n        ExtendedCategoryAxis a2 = null;\n        try {\n            a2 = (ExtendedCategoryAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n        \n        // check that changing a tick label font in a1 doesn't change a2\n        a1.setTickLabelFont(\"C1\", null);\n        assertFalse(a1.equals(a2));\n        a2.setTickLabelFont(\"C1\", null);\n        assertTrue(a1.equals(a2));\n        \n        // check that changing a tick label paint in a1 doesn't change a2\n        a1.setTickLabelPaint(\"C1\", Color.yellow);\n        assertFalse(a1.equals(a2));\n        a2.setTickLabelPaint(\"C1\", Color.yellow);\n        assertTrue(a1.equals(a2));\n\n        // check that changing a category label tooltip in a1 doesn't change a2\n        a1.addCategoryLabelToolTip(\"C1\", \"XYZ\");\n        assertFalse(a1.equals(a2));\n        a2.addCategoryLabelToolTip(\"C1\", \"XYZ\");\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 147,
        "end_line": 180,
        "comment": "\n     * Confirm that cloning works.  This test customises the font and paint\n     * per category label.\n     ",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 67)",
            "(line 149,col 9)-(line 149,col 70)",
            "(line 150,col 9)-(line 151,col 42)",
            "(line 152,col 9)-(line 152,col 39)",
            "(line 153,col 9)-(line 158,col 9)",
            "(line 159,col 9)-(line 159,col 29)",
            "(line 160,col 9)-(line 160,col 51)",
            "(line 161,col 9)-(line 161,col 34)",
            "(line 164,col 9)-(line 164,col 40)",
            "(line 165,col 9)-(line 165,col 35)",
            "(line 166,col 9)-(line 166,col 40)",
            "(line 167,col 9)-(line 167,col 34)",
            "(line 170,col 9)-(line 170,col 49)",
            "(line 171,col 9)-(line 171,col 35)",
            "(line 172,col 9)-(line 172,col 49)",
            "(line 173,col 9)-(line 173,col 34)",
            "(line 176,col 9)-(line 176,col 48)",
            "(line 177,col 9)-(line 177,col 35)",
            "(line 178,col 9)-(line 178,col 48)",
            "(line 179,col 9)-(line 179,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ExtendedCategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ExtendedCategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ExtendedCategoryAxisTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        ExtendedCategoryAxis a1 = new ExtendedCategoryAxis(\"Test\");\n        a1.setSubLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.blue));\n        ExtendedCategoryAxis a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            a2 = (ExtendedCategoryAxis) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n    }",
        "begin_line": 185,
        "end_line": 206,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 67)",
            "(line 187,col 9)-(line 188,col 35)",
            "(line 189,col 9)-(line 189,col 39)",
            "(line 191,col 9)-(line 204,col 9)",
            "(line 205,col 9)-(line 205,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(AxisTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisTests.AxisTests(java.lang.String)",
        "snippet": "    public AxisTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CategoryAxis a1 = new CategoryAxis(\"Test\");\n        a1.setAxisLinePaint(Color.red);\n        CategoryAxis a2 = null;\n        try {\n            a2 = (CategoryAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 85,
        "end_line": 98,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 51)",
            "(line 87,col 9)-(line 87,col 39)",
            "(line 88,col 9)-(line 88,col 31)",
            "(line 89,col 9)-(line 94,col 9)",
            "(line 95,col 9)-(line 95,col 29)",
            "(line 96,col 9)-(line 96,col 51)",
            "(line 97,col 9)-(line 97,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        Axis a1 = new CategoryAxis(\"Test\");\n        Axis a2 = new CategoryAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        \n        // visible flag...\n        a1.setVisible(false);\n        assertFalse(a1.equals(a2));\n        a2.setVisible(false);\n        assertTrue(a1.equals(a2));\n                \n        // label...\n        a1.setLabel(\"New Label\");\n        assertFalse(a1.equals(a2));\n        a2.setLabel(\"New Label\");\n        assertTrue(a1.equals(a2));\n\n        // label font...\n        a1.setLabelFont(new Font(\"Dialog\", Font.PLAIN, 8));\n        assertFalse(a1.equals(a2));\n        a2.setLabelFont(new Font(\"Dialog\", Font.PLAIN, 8));\n        assertTrue(a1.equals(a2));\n\n        // label paint...\n        a1.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.black));\n        assertFalse(a1.equals(a2));\n        a2.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.black));\n        assertTrue(a1.equals(a2));\n       \n        // label insets...\n        a1.setLabelInsets(new RectangleInsets(10.0, 10.0, 10.0, 10.0));\n        assertFalse(a1.equals(a2));\n        a2.setLabelInsets(new RectangleInsets(10.0, 10.0, 10.0, 10.0));\n        assertTrue(a1.equals(a2));\n\n        // label angle...\n        a1.setLabelAngle(1.23);\n        assertFalse(a1.equals(a2));\n        a2.setLabelAngle(1.23);\n        assertTrue(a1.equals(a2));\n\n        a1.setLabelToolTip(\"123\");\n        assertFalse(a1.equals(a2));\n        a2.setLabelToolTip(\"123\");\n        assertTrue(a1.equals(a2));\n\n        a1.setLabelURL(\"ABC\");\n        assertFalse(a1.equals(a2));\n        a2.setLabelURL(\"ABC\");\n        assertTrue(a1.equals(a2));\n\n        // axis line visible...\n        a1.setAxisLineVisible(false);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLineVisible(false);\n        assertTrue(a1.equals(a2));\n        \n        // axis line stroke...\n        BasicStroke s = new BasicStroke(1.1f);\n        a1.setAxisLineStroke(s);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLineStroke(s);\n        assertTrue(a1.equals(a2));\n        \n        // axis line paint...\n        a1.setAxisLinePaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.black));\n        assertFalse(a1.equals(a2));\n        a2.setAxisLinePaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.black));\n        assertTrue(a1.equals(a2));\n        \n        // tick labels visible flag...\n        a1.setTickLabelsVisible(false);\n        assertFalse(a1.equals(a2));\n        a2.setTickLabelsVisible(false);\n        assertTrue(a1.equals(a2));\n                \n        // tick label font...\n        a1.setTickLabelFont(new Font(\"Dialog\", Font.PLAIN, 12));\n        assertFalse(a1.equals(a2));\n        a2.setTickLabelFont(new Font(\"Dialog\", Font.PLAIN, 12));\n        assertTrue(a1.equals(a2));\n\n        // tick label paint...\n        a1.setTickLabelPaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.black));\n        assertFalse(a1.equals(a2));\n        a2.setTickLabelPaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.black));\n        assertTrue(a1.equals(a2));\n\n        // tick label insets...\n        a1.setTickLabelInsets(new RectangleInsets(10.0, 10.0, 10.0, 10.0));\n        assertFalse(a1.equals(a2));\n        a2.setTickLabelInsets(new RectangleInsets(10.0, 10.0, 10.0, 10.0));\n        assertTrue(a1.equals(a2));\n\n        // tick marks visible flag...\n        a1.setTickMarksVisible(true);\n        assertFalse(a1.equals(a2));\n        a2.setTickMarksVisible(true);\n        assertTrue(a1.equals(a2));\n                \n        // tick mark inside length...\n        a1.setTickMarkInsideLength(1.23f);\n        assertFalse(a1.equals(a2));\n        a2.setTickMarkInsideLength(1.23f);\n        assertTrue(a1.equals(a2));\n\n        // tick mark outside length...\n        a1.setTickMarkOutsideLength(1.23f);\n        assertFalse(a1.equals(a2));\n        a2.setTickMarkOutsideLength(1.23f);\n        assertTrue(a1.equals(a2));\n\n        // tick mark stroke...\n        a1.setTickMarkStroke(new BasicStroke(2.0f));\n        assertFalse(a1.equals(a2));\n        a2.setTickMarkStroke(new BasicStroke(2.0f));\n        assertTrue(a1.equals(a2));\n\n        // tick mark paint...\n        a1.setTickMarkPaint(new GradientPaint(1.0f, 2.0f, Color.cyan, \n                3.0f, 4.0f, Color.black));\n        assertFalse(a1.equals(a2));\n        a2.setTickMarkPaint(new GradientPaint(1.0f, 2.0f, Color.cyan, \n                3.0f, 4.0f, Color.black));\n        assertTrue(a1.equals(a2));\n\n        // tick mark outside length...\n        a1.setFixedDimension(3.21f);\n        assertFalse(a1.equals(a2));\n        a2.setFixedDimension(3.21f);\n        assertTrue(a1.equals(a2));\n\n    }",
        "begin_line": 103,
        "end_line": 242,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 43)",
            "(line 106,col 9)-(line 106,col 43)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 110,col 9)-(line 110,col 29)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 29)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 116,col 9)-(line 116,col 33)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 118,col 33)",
            "(line 119,col 9)-(line 119,col 34)",
            "(line 122,col 9)-(line 122,col 59)",
            "(line 123,col 9)-(line 123,col 35)",
            "(line 124,col 9)-(line 124,col 59)",
            "(line 125,col 9)-(line 125,col 34)",
            "(line 128,col 9)-(line 129,col 42)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 132,col 42)",
            "(line 133,col 9)-(line 133,col 34)",
            "(line 136,col 9)-(line 136,col 71)",
            "(line 137,col 9)-(line 137,col 35)",
            "(line 138,col 9)-(line 138,col 71)",
            "(line 139,col 9)-(line 139,col 34)",
            "(line 142,col 9)-(line 142,col 31)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 144,col 31)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 147,col 9)-(line 147,col 34)",
            "(line 148,col 9)-(line 148,col 35)",
            "(line 149,col 9)-(line 149,col 34)",
            "(line 150,col 9)-(line 150,col 34)",
            "(line 152,col 9)-(line 152,col 30)",
            "(line 153,col 9)-(line 153,col 35)",
            "(line 154,col 9)-(line 154,col 30)",
            "(line 155,col 9)-(line 155,col 34)",
            "(line 158,col 9)-(line 158,col 37)",
            "(line 159,col 9)-(line 159,col 35)",
            "(line 160,col 9)-(line 160,col 37)",
            "(line 161,col 9)-(line 161,col 34)",
            "(line 164,col 9)-(line 164,col 46)",
            "(line 165,col 9)-(line 165,col 32)",
            "(line 166,col 9)-(line 166,col 35)",
            "(line 167,col 9)-(line 167,col 32)",
            "(line 168,col 9)-(line 168,col 34)",
            "(line 171,col 9)-(line 172,col 42)",
            "(line 173,col 9)-(line 173,col 35)",
            "(line 174,col 9)-(line 175,col 42)",
            "(line 176,col 9)-(line 176,col 34)",
            "(line 179,col 9)-(line 179,col 39)",
            "(line 180,col 9)-(line 180,col 35)",
            "(line 181,col 9)-(line 181,col 39)",
            "(line 182,col 9)-(line 182,col 34)",
            "(line 185,col 9)-(line 185,col 64)",
            "(line 186,col 9)-(line 186,col 35)",
            "(line 187,col 9)-(line 187,col 64)",
            "(line 188,col 9)-(line 188,col 34)",
            "(line 191,col 9)-(line 192,col 42)",
            "(line 193,col 9)-(line 193,col 35)",
            "(line 194,col 9)-(line 195,col 42)",
            "(line 196,col 9)-(line 196,col 34)",
            "(line 199,col 9)-(line 199,col 75)",
            "(line 200,col 9)-(line 200,col 35)",
            "(line 201,col 9)-(line 201,col 75)",
            "(line 202,col 9)-(line 202,col 34)",
            "(line 205,col 9)-(line 205,col 37)",
            "(line 206,col 9)-(line 206,col 35)",
            "(line 207,col 9)-(line 207,col 37)",
            "(line 208,col 9)-(line 208,col 34)",
            "(line 211,col 9)-(line 211,col 42)",
            "(line 212,col 9)-(line 212,col 35)",
            "(line 213,col 9)-(line 213,col 42)",
            "(line 214,col 9)-(line 214,col 34)",
            "(line 217,col 9)-(line 217,col 43)",
            "(line 218,col 9)-(line 218,col 35)",
            "(line 219,col 9)-(line 219,col 43)",
            "(line 220,col 9)-(line 220,col 34)",
            "(line 223,col 9)-(line 223,col 52)",
            "(line 224,col 9)-(line 224,col 35)",
            "(line 225,col 9)-(line 225,col 52)",
            "(line 226,col 9)-(line 226,col 34)",
            "(line 229,col 9)-(line 230,col 42)",
            "(line 231,col 9)-(line 231,col 35)",
            "(line 232,col 9)-(line 233,col 42)",
            "(line 234,col 9)-(line 234,col 34)",
            "(line 237,col 9)-(line 237,col 36)",
            "(line 238,col 9)-(line 238,col 35)",
            "(line 239,col 9)-(line 239,col 36)",
            "(line 240,col 9)-(line 240,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        Axis a1 = new CategoryAxis(\"Test\");\n        Axis a2 = new CategoryAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 247,
        "end_line": 254,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 248,col 9)-(line 248,col 43)",
            "(line 249,col 9)-(line 249,col 43)",
            "(line 250,col 9)-(line 250,col 34)",
            "(line 251,col 9)-(line 251,col 31)",
            "(line 252,col 9)-(line 252,col 31)",
            "(line 253,col 9)-(line 253,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.TickUnitsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/TickUnitsTests.java",
        "signature": "org.jfree.chart.axis.junit.TickUnitsTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TickUnitsTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.TickUnitsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/TickUnitsTests.java",
        "signature": "org.jfree.chart.axis.junit.TickUnitsTests.TickUnitsTests(java.lang.String)",
        "snippet": "    public TickUnitsTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.TickUnitsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/TickUnitsTests.java",
        "signature": "org.jfree.chart.axis.junit.TickUnitsTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        TickUnits t1 = (TickUnits) NumberAxis.createIntegerTickUnits();\n        TickUnits t2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(t1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            t2 = (TickUnits) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(t1, t2);\n\n    }",
        "begin_line": 83,
        "end_line": 104,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 71)",
            "(line 86,col 9)-(line 86,col 28)",
            "(line 88,col 9)-(line 101,col 9)",
            "(line 102,col 9)-(line 102,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.TickUnitsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/TickUnitsTests.java",
        "signature": "org.jfree.chart.axis.junit.TickUnitsTests.testCloning()",
        "snippet": "    public void testCloning() {\n        TickUnits t1 = (TickUnits) NumberAxis.createIntegerTickUnits();\n        TickUnits t2 = null;\n        try {\n            t2 = (TickUnits) t1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(t1 != t2);\n        assertTrue(t1.getClass() == t2.getClass());\n        assertTrue(t1.equals(t2));\n    }",
        "begin_line": 109,
        "end_line": 121,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 71)",
            "(line 111,col 9)-(line 111,col 28)",
            "(line 112,col 9)-(line 117,col 9)",
            "(line 118,col 9)-(line 118,col 29)",
            "(line 119,col 9)-(line 119,col 51)",
            "(line 120,col 9)-(line 120,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.TickUnitsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/TickUnitsTests.java",
        "signature": "org.jfree.chart.axis.junit.TickUnitsTests.testEquals()",
        "snippet": "    public void testEquals() {\n        TickUnits t1 = (TickUnits) NumberAxis.createIntegerTickUnits();\n        TickUnits t2 = (TickUnits) NumberAxis.createIntegerTickUnits();\n        assertTrue(t1.equals(t2));\n        assertTrue(t2.equals(t1));\n    }",
        "begin_line": 126,
        "end_line": 131,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 71)",
            "(line 128,col 9)-(line 128,col 71)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 130,col 9)-(line 130,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickMarkPositionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickMarkPositionTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickMarkPositionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DateTickMarkPositionTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickMarkPositionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickMarkPositionTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickMarkPositionTests.DateTickMarkPositionTests(java.lang.String)",
        "snippet": "    public DateTickMarkPositionTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickMarkPositionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickMarkPositionTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickMarkPositionTests.testEquals()",
        "snippet": "    public void testEquals() {\n        assertEquals(DateTickMarkPosition.START, DateTickMarkPosition.START);\n        assertEquals(DateTickMarkPosition.MIDDLE, DateTickMarkPosition.MIDDLE);\n        assertEquals(DateTickMarkPosition.END, DateTickMarkPosition.END);\n        assertFalse(DateTickMarkPosition.START.equals(null));\n        assertFalse(\n            DateTickMarkPosition.START.equals(DateTickMarkPosition.END)\n        );\n        assertFalse(\n            DateTickMarkPosition.MIDDLE.equals(DateTickMarkPosition.END)\n        );\n    }",
        "begin_line": 82,
        "end_line": 93,
        "comment": "\n     * Test equals() method.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 77)",
            "(line 84,col 9)-(line 84,col 79)",
            "(line 85,col 9)-(line 85,col 73)",
            "(line 86,col 9)-(line 86,col 61)",
            "(line 87,col 9)-(line 89,col 10)",
            "(line 90,col 9)-(line 92,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickMarkPositionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickMarkPositionTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickMarkPositionTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        DateTickMarkPosition a1 = DateTickMarkPosition.END;\n        DateTickMarkPosition a2 = DateTickMarkPosition.END;\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 98,
        "end_line": 105,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 59)",
            "(line 100,col 9)-(line 100,col 59)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 102,col 9)-(line 102,col 31)",
            "(line 103,col 9)-(line 103,col 31)",
            "(line 104,col 9)-(line 104,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickMarkPositionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickMarkPositionTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickMarkPositionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        DateTickMarkPosition p1 = DateTickMarkPosition.MIDDLE;\n        DateTickMarkPosition p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            p2 = (DateTickMarkPosition) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(p1, p2);\n        assertTrue(p1 == p2);        \n    }",
        "begin_line": 110,
        "end_line": 131,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 62)",
            "(line 112,col 9)-(line 112,col 39)",
            "(line 114,col 9)-(line 128,col 9)",
            "(line 129,col 9)-(line 129,col 29)",
            "(line 130,col 9)-(line 130,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.StandardTickUnitSourceTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/StandardTickUnitSourceTests.java",
        "signature": "org.jfree.chart.axis.junit.StandardTickUnitSourceTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardTickUnitSourceTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.StandardTickUnitSourceTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/StandardTickUnitSourceTests.java",
        "signature": "org.jfree.chart.axis.junit.StandardTickUnitSourceTests.StandardTickUnitSourceTests(java.lang.String)",
        "snippet": "    public StandardTickUnitSourceTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.StandardTickUnitSourceTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/StandardTickUnitSourceTests.java",
        "signature": "org.jfree.chart.axis.junit.StandardTickUnitSourceTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StandardTickUnitSource t1 = new StandardTickUnitSource();\n        StandardTickUnitSource t2 = new StandardTickUnitSource();\n        assertTrue(t1.equals(t2));\n    }",
        "begin_line": 82,
        "end_line": 86,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 65)",
            "(line 84,col 9)-(line 84,col 65)",
            "(line 85,col 9)-(line 85,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.StandardTickUnitSourceTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/StandardTickUnitSourceTests.java",
        "signature": "org.jfree.chart.axis.junit.StandardTickUnitSourceTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StandardTickUnitSource t1 = new StandardTickUnitSource();\n        StandardTickUnitSource t2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(t1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            t2 = (StandardTickUnitSource) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(t1, t2);\n\n    }",
        "begin_line": 91,
        "end_line": 112,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 65)",
            "(line 94,col 9)-(line 94,col 41)",
            "(line 96,col 9)-(line 109,col 9)",
            "(line 110,col 9)-(line 110,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/PeriodAxisLabelInfoTests.java",
        "signature": "org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PeriodAxisLabelInfoTests.class);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/PeriodAxisLabelInfoTests.java",
        "signature": "org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests.PeriodAxisLabelInfoTests(java.lang.String)",
        "snippet": "    public PeriodAxisLabelInfoTests(String name) {\n        super(name);\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/PeriodAxisLabelInfoTests.java",
        "signature": "org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests.testEquals()",
        "snippet": "    public void testEquals() {\n        PeriodAxisLabelInfo info1 = new PeriodAxisLabelInfo(Day.class, \n                new SimpleDateFormat(\"d\"));\n        PeriodAxisLabelInfo info2 = new PeriodAxisLabelInfo(Day.class, \n                new SimpleDateFormat(\"d\"));\n        assertTrue(info1.equals(info2));\n        assertTrue(info2.equals(info1));\n        \n        Class c1 = Day.class;\n        Class c2 = Month.class;\n        DateFormat df1 = new SimpleDateFormat(\"d\");\n        DateFormat df2 = new SimpleDateFormat(\"MMM\");\n        RectangleInsets sp1 = new RectangleInsets(1, 1, 1, 1);\n        RectangleInsets sp2 = new RectangleInsets(2, 2, 2, 2);\n        Font lf1 = new Font(\"SansSerif\", Font.PLAIN, 10);\n        Font lf2 = new Font(\"SansSerif\", Font.BOLD, 9);\n        Paint lp1 = Color.black;\n        Paint lp2 = Color.blue;\n        boolean b1 = true;\n        boolean b2 = false;\n        Stroke s1 = new BasicStroke(0.5f);\n        Stroke s2 = new BasicStroke(0.25f);\n        Paint dp1 = Color.red;\n        Paint dp2 = Color.green;\n        \n        info1 = new PeriodAxisLabelInfo(c2, df1, sp1, lf1, lp1, b1, s1, dp1);\n        info2 = new PeriodAxisLabelInfo(c1, df1, sp1, lf1, lp1, b1, s1, dp1);\n        assertFalse(info1.equals(info2));\n        info2 = new PeriodAxisLabelInfo(c2, df1, sp1, lf1, lp1, b1, s1, dp1);\n        assertTrue(info1.equals(info2));\n        \n        info1 = new PeriodAxisLabelInfo(c2, df2, sp1, lf1, lp1, b1, s1, dp1);\n        assertFalse(info1.equals(info2));\n        info2 = new PeriodAxisLabelInfo(c2, df2, sp1, lf1, lp1, b1, s1, dp1);\n        assertTrue(info1.equals(info2));\n\n        info1 = new PeriodAxisLabelInfo(c2, df2, sp2, lf1, lp1, b1, s1, dp1);\n        assertFalse(info1.equals(info2));\n        info2 = new PeriodAxisLabelInfo(c2, df2, sp2, lf1, lp1, b1, s1, dp1);\n        assertTrue(info1.equals(info2));\n\n        info1 = new PeriodAxisLabelInfo(c2, df2, sp2, lf2, lp1, b1, s1, dp1);\n        assertFalse(info1.equals(info2));\n        info2 = new PeriodAxisLabelInfo(c2, df2, sp2, lf2, lp1, b1, s1, dp1);\n        assertTrue(info1.equals(info2));\n\n        info1 = new PeriodAxisLabelInfo(c2, df2, sp2, lf2, lp2, b1, s1, dp1);\n        assertFalse(info1.equals(info2));\n        info2 = new PeriodAxisLabelInfo(c2, df2, sp2, lf2, lp2, b1, s1, dp1);\n        assertTrue(info1.equals(info2));\n\n        info1 = new PeriodAxisLabelInfo(c2, df2, sp2, lf2, lp2, b2, s1, dp1);\n        assertFalse(info1.equals(info2));\n        info2 = new PeriodAxisLabelInfo(c2, df2, sp2, lf2, lp2, b2, s1, dp1);\n        assertTrue(info1.equals(info2));\n\n        info1 = new PeriodAxisLabelInfo(c2, df2, sp2, lf2, lp2, b2, s2, dp1);\n        assertFalse(info1.equals(info2));\n        info2 = new PeriodAxisLabelInfo(c2, df2, sp2, lf2, lp2, b2, s2, dp1);\n        assertTrue(info1.equals(info2));\n\n        info1 = new PeriodAxisLabelInfo(c2, df2, sp2, lf2, lp2, b2, s2, dp2);\n        assertFalse(info1.equals(info2));\n        info2 = new PeriodAxisLabelInfo(c2, df2, sp2, lf2, lp2, b2, s2, dp2);\n        assertTrue(info1.equals(info2));\n\n    }",
        "begin_line": 94,
        "end_line": 160,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 96,col 43)",
            "(line 97,col 9)-(line 98,col 43)",
            "(line 99,col 9)-(line 99,col 40)",
            "(line 100,col 9)-(line 100,col 40)",
            "(line 102,col 9)-(line 102,col 29)",
            "(line 103,col 9)-(line 103,col 31)",
            "(line 104,col 9)-(line 104,col 51)",
            "(line 105,col 9)-(line 105,col 53)",
            "(line 106,col 9)-(line 106,col 62)",
            "(line 107,col 9)-(line 107,col 62)",
            "(line 108,col 9)-(line 108,col 57)",
            "(line 109,col 9)-(line 109,col 55)",
            "(line 110,col 9)-(line 110,col 32)",
            "(line 111,col 9)-(line 111,col 31)",
            "(line 112,col 9)-(line 112,col 26)",
            "(line 113,col 9)-(line 113,col 27)",
            "(line 114,col 9)-(line 114,col 42)",
            "(line 115,col 9)-(line 115,col 43)",
            "(line 116,col 9)-(line 116,col 30)",
            "(line 117,col 9)-(line 117,col 32)",
            "(line 119,col 9)-(line 119,col 77)",
            "(line 120,col 9)-(line 120,col 77)",
            "(line 121,col 9)-(line 121,col 41)",
            "(line 122,col 9)-(line 122,col 77)",
            "(line 123,col 9)-(line 123,col 40)",
            "(line 125,col 9)-(line 125,col 77)",
            "(line 126,col 9)-(line 126,col 41)",
            "(line 127,col 9)-(line 127,col 77)",
            "(line 128,col 9)-(line 128,col 40)",
            "(line 130,col 9)-(line 130,col 77)",
            "(line 131,col 9)-(line 131,col 41)",
            "(line 132,col 9)-(line 132,col 77)",
            "(line 133,col 9)-(line 133,col 40)",
            "(line 135,col 9)-(line 135,col 77)",
            "(line 136,col 9)-(line 136,col 41)",
            "(line 137,col 9)-(line 137,col 77)",
            "(line 138,col 9)-(line 138,col 40)",
            "(line 140,col 9)-(line 140,col 77)",
            "(line 141,col 9)-(line 141,col 41)",
            "(line 142,col 9)-(line 142,col 77)",
            "(line 143,col 9)-(line 143,col 40)",
            "(line 145,col 9)-(line 145,col 77)",
            "(line 146,col 9)-(line 146,col 41)",
            "(line 147,col 9)-(line 147,col 77)",
            "(line 148,col 9)-(line 148,col 40)",
            "(line 150,col 9)-(line 150,col 77)",
            "(line 151,col 9)-(line 151,col 41)",
            "(line 152,col 9)-(line 152,col 77)",
            "(line 153,col 9)-(line 153,col 40)",
            "(line 155,col 9)-(line 155,col 77)",
            "(line 156,col 9)-(line 156,col 41)",
            "(line 157,col 9)-(line 157,col 77)",
            "(line 158,col 9)-(line 158,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/PeriodAxisLabelInfoTests.java",
        "signature": "org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        PeriodAxisLabelInfo info1 = new PeriodAxisLabelInfo(Day.class, \n                new SimpleDateFormat(\"d\"));\n        PeriodAxisLabelInfo info2 = new PeriodAxisLabelInfo(Day.class, \n                new SimpleDateFormat(\"d\"));\n        assertTrue(info1.equals(info2));\n        int h1 = info1.hashCode();\n        int h2 = info2.hashCode();\n        assertEquals(h1, h2);\n    }    ",
        "begin_line": 165,
        "end_line": 174,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 166,col 9)-(line 167,col 43)",
            "(line 168,col 9)-(line 169,col 43)",
            "(line 170,col 9)-(line 170,col 40)",
            "(line 171,col 9)-(line 171,col 34)",
            "(line 172,col 9)-(line 172,col 34)",
            "(line 173,col 9)-(line 173,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/PeriodAxisLabelInfoTests.java",
        "signature": "org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests.testCloning()",
        "snippet": "    public void testCloning() {\n        PeriodAxisLabelInfo info1 = new PeriodAxisLabelInfo(Day.class, \n                new SimpleDateFormat(\"d\"));\n        PeriodAxisLabelInfo info2 = null;\n        try {\n            info2 = (PeriodAxisLabelInfo) info1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(info1 != info2);\n        assertTrue(info1.getClass() == info2.getClass());\n        assertTrue(info1.equals(info2));\n    }",
        "begin_line": 179,
        "end_line": 192,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 180,col 9)-(line 181,col 43)",
            "(line 182,col 9)-(line 182,col 41)",
            "(line 183,col 9)-(line 188,col 9)",
            "(line 189,col 9)-(line 189,col 35)",
            "(line 190,col 9)-(line 190,col 57)",
            "(line 191,col 9)-(line 191,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/PeriodAxisLabelInfoTests.java",
        "signature": "org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        PeriodAxisLabelInfo info1 = new PeriodAxisLabelInfo(Day.class, \n                new SimpleDateFormat(\"d\"));\n        PeriodAxisLabelInfo info2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(info1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            info2 = (PeriodAxisLabelInfo) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        boolean b = info1.equals(info2);\n        assertTrue(b);\n    }",
        "begin_line": 197,
        "end_line": 217,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 198,col 9)-(line 199,col 43)",
            "(line 200,col 9)-(line 200,col 41)",
            "(line 201,col 9)-(line 214,col 9)",
            "(line 215,col 9)-(line 215,col 40)",
            "(line 216,col 9)-(line 216,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CyclicNumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CyclicNumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.CyclicNumberAxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CyclicNumberAxisTests.class);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CyclicNumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CyclicNumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.CyclicNumberAxisTests.CyclicNumberAxisTests(java.lang.String)",
        "snippet": "    public CyclicNumberAxisTests(String name) {\n        super(name);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CyclicNumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CyclicNumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.CyclicNumberAxisTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CyclicNumberAxis a1 = new CyclicNumberAxis(10, 0, \"Test\");\n        CyclicNumberAxis a2 = null;\n        try {\n            a2 = (CyclicNumberAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 89,
        "end_line": 101,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 66)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 92,col 9)-(line 97,col 9)",
            "(line 98,col 9)-(line 98,col 29)",
            "(line 99,col 9)-(line 99,col 51)",
            "(line 100,col 9)-(line 100,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CyclicNumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CyclicNumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.CyclicNumberAxisTests.testEquals()",
        "snippet": "    public void testEquals() {\n       \n        CyclicNumberAxis a1 = new CyclicNumberAxis(10, 0, \"Test\");\n        CyclicNumberAxis a2 = new CyclicNumberAxis(10, 0, \"Test\");\n        assertTrue(a1.equals(a2));\n        \n        // period\n        a1.setPeriod(5);\n        assertFalse(a1.equals(a2));\n        a2.setPeriod(5);\n        assertTrue(a1.equals(a2));\n\n        // offset\n        a1.setOffset(2.0);\n        assertFalse(a1.equals(a2));\n        a2.setOffset(2.0);\n        assertTrue(a1.equals(a2));\n\n        // advance line Paint\n        a1.setAdvanceLinePaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.black));\n        assertFalse(a1.equals(a2));\n        a2.setAdvanceLinePaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.black));\n        assertTrue(a1.equals(a2));\n        \n        // advance line Stroke\n        Stroke stroke = new BasicStroke(0.2f);\n        a1.setAdvanceLineStroke(stroke);\n        assertFalse(a1.equals(a2));\n        a2.setAdvanceLineStroke(stroke);\n        assertTrue(a1.equals(a2));\n\n        // advance line Visible\n        a1.setAdvanceLineVisible(!a1.isAdvanceLineVisible());\n        assertFalse(a1.equals(a2));\n        a2.setAdvanceLineVisible(a1.isAdvanceLineVisible());\n        assertTrue(a1.equals(a2));\n\n        // cycle bound mapping\n        a1.setBoundMappedToLastCycle(!a1.isBoundMappedToLastCycle());\n        assertFalse(a1.equals(a2));\n        a2.setBoundMappedToLastCycle(a1.isBoundMappedToLastCycle());\n        assertTrue(a1.equals(a2));\n        \n    }",
        "begin_line": 106,
        "end_line": 151,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 66)",
            "(line 109,col 9)-(line 109,col 66)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 113,col 9)-(line 113,col 24)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 24)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 119,col 9)-(line 119,col 26)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 121,col 26)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 125,col 9)-(line 126,col 42)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 129,col 42)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 133,col 9)-(line 133,col 46)",
            "(line 134,col 9)-(line 134,col 40)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 136,col 40)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 140,col 9)-(line 140,col 61)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 60)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 146,col 9)-(line 146,col 69)",
            "(line 147,col 9)-(line 147,col 35)",
            "(line 148,col 9)-(line 148,col 68)",
            "(line 149,col 9)-(line 149,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CyclicNumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CyclicNumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.CyclicNumberAxisTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        CyclicNumberAxis a1 = new CyclicNumberAxis(10, 0, \"Test\");\n        CyclicNumberAxis a2 = new CyclicNumberAxis(10, 0, \"Test\");\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 156,
        "end_line": 163,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 66)",
            "(line 158,col 9)-(line 158,col 66)",
            "(line 159,col 9)-(line 159,col 34)",
            "(line 160,col 9)-(line 160,col 31)",
            "(line 161,col 9)-(line 161,col 31)",
            "(line 162,col 9)-(line 162,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CyclicNumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CyclicNumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.CyclicNumberAxisTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CyclicNumberAxis a1 = new CyclicNumberAxis(10, 0, \"Test Axis\");\n        CyclicNumberAxis a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (CyclicNumberAxis) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 168,
        "end_line": 190,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 71)",
            "(line 171,col 9)-(line 171,col 35)",
            "(line 173,col 9)-(line 187,col 9)",
            "(line 188,col 9)-(line 188,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SymbolAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SymbolAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.SymbolAxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(SymbolAxisTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SymbolAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SymbolAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.SymbolAxisTests.SymbolAxisTests(java.lang.String)",
        "snippet": "    public SymbolAxisTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SymbolAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SymbolAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.SymbolAxisTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        String[] tickLabels = new String[] {\"One\", \"Two\", \"Three\"};\n        SymbolAxis a1 = new SymbolAxis(\"Test Axis\", tickLabels);\n        SymbolAxis a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            a2 = (SymbolAxis) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 84,
        "end_line": 106,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 67)",
            "(line 87,col 9)-(line 87,col 64)",
            "(line 88,col 9)-(line 88,col 29)",
            "(line 90,col 9)-(line 103,col 9)",
            "(line 104,col 9)-(line 104,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SymbolAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SymbolAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.SymbolAxisTests.testCloning()",
        "snippet": "    public void testCloning() {\n        SymbolAxis a1 = new SymbolAxis(\"Axis\", new String[] {\"A\", \"B\"});\n        SymbolAxis a2 = null;\n        try {\n            a2 = (SymbolAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 111,
        "end_line": 123,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 72)",
            "(line 113,col 9)-(line 113,col 29)",
            "(line 114,col 9)-(line 119,col 9)",
            "(line 120,col 9)-(line 120,col 29)",
            "(line 121,col 9)-(line 121,col 51)",
            "(line 122,col 9)-(line 122,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SymbolAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SymbolAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.SymbolAxisTests.testEquals()",
        "snippet": "    public void testEquals() {\n        SymbolAxis a1 = new SymbolAxis(\"Axis\", new String[] {\"A\", \"B\"});\n        SymbolAxis a2 = new SymbolAxis(\"Axis\", new String[] {\"A\", \"B\"});\n        assertTrue(a1.equals(a2));\n        assertTrue(a2.equals(a1));\n        \n        a1 = new SymbolAxis(\"Axis 2\", new String[] {\"A\", \"B\"});\n        assertFalse(a1.equals(a2));\n        a2 = new SymbolAxis(\"Axis 2\", new String[] {\"A\", \"B\"});\n        assertTrue(a1.equals(a2));    \n\n        a1 = new SymbolAxis(\"Axis 2\", new String[] {\"C\", \"B\"});\n        assertFalse(a1.equals(a2));\n        a2 = new SymbolAxis(\"Axis 2\", new String[] {\"C\", \"B\"});\n        assertTrue(a1.equals(a2));    \n        \n        a1.setGridBandsVisible(false);\n        assertFalse(a1.equals(a2));\n        a2.setGridBandsVisible(false);\n        assertTrue(a1.equals(a2));\n\n        a1.setGridBandPaint(Color.black);\n        assertFalse(a1.equals(a2));\n        a2.setGridBandPaint(Color.black);\n        assertTrue(a1.equals(a2));\n        \n        a1.setGridBandAlternatePaint(Color.red);\n        assertFalse(a1.equals(a2));\n        a2.setGridBandAlternatePaint(Color.red);\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 128,
        "end_line": 158,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 72)",
            "(line 130,col 9)-(line 130,col 72)",
            "(line 131,col 9)-(line 131,col 34)",
            "(line 132,col 9)-(line 132,col 34)",
            "(line 134,col 9)-(line 134,col 63)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 136,col 63)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 139,col 9)-(line 139,col 63)",
            "(line 140,col 9)-(line 140,col 35)",
            "(line 141,col 9)-(line 141,col 63)",
            "(line 142,col 9)-(line 142,col 34)",
            "(line 144,col 9)-(line 144,col 38)",
            "(line 145,col 9)-(line 145,col 35)",
            "(line 146,col 9)-(line 146,col 38)",
            "(line 147,col 9)-(line 147,col 34)",
            "(line 149,col 9)-(line 149,col 41)",
            "(line 150,col 9)-(line 150,col 35)",
            "(line 151,col 9)-(line 151,col 41)",
            "(line 152,col 9)-(line 152,col 34)",
            "(line 154,col 9)-(line 154,col 48)",
            "(line 155,col 9)-(line 155,col 35)",
            "(line 156,col 9)-(line 156,col 48)",
            "(line 157,col 9)-(line 157,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAxis3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAxis3DTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAxis3DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryAxis3DTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAxis3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAxis3DTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAxis3DTests.CategoryAxis3DTests(java.lang.String)",
        "snippet": "    public CategoryAxis3DTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAxis3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAxis3DTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAxis3DTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CategoryAxis3D a1 = new CategoryAxis3D(\"Test\");\n        CategoryAxis3D a2 = null;\n        try {\n            a2 = (CategoryAxis3D) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 82,
        "end_line": 94,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 55)",
            "(line 84,col 9)-(line 84,col 33)",
            "(line 85,col 9)-(line 90,col 9)",
            "(line 91,col 9)-(line 91,col 29)",
            "(line 92,col 9)-(line 92,col 51)",
            "(line 93,col 9)-(line 93,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAxis3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAxis3DTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAxis3DTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CategoryAxis3D a1 = new CategoryAxis3D(\"Test Axis\");\n        CategoryAxis3D a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (CategoryAxis3D) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 99,
        "end_line": 121,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 60)",
            "(line 102,col 9)-(line 102,col 33)",
            "(line 104,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ValueAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ValueAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ValueAxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ValueAxisTests.class);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ValueAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ValueAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ValueAxisTests.ValueAxisTests(java.lang.String)",
        "snippet": "    public ValueAxisTests(String name) {\n        super(name);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ValueAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ValueAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ValueAxisTests.testCloning()",
        "snippet": "    public void testCloning() {\n        ValueAxis a1 = new NumberAxis(\"Test\");\n        ValueAxis a2 = null;\n        try {\n            a2 = (NumberAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 90,
        "end_line": 102,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 46)",
            "(line 92,col 9)-(line 92,col 28)",
            "(line 93,col 9)-(line 98,col 9)",
            "(line 99,col 9)-(line 99,col 29)",
            "(line 100,col 9)-(line 100,col 51)",
            "(line 101,col 9)-(line 101,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ValueAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ValueAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ValueAxisTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        NumberAxis a1 = new NumberAxis(\"Test\");\n        NumberAxis a2 = new NumberAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        \n        // axis line visible flag...\n        a1.setAxisLineVisible(false);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLineVisible(false);\n        assertTrue(a1.equals(a2));\n    \n        // positiveArrowVisible;\n        a1.setPositiveArrowVisible(true);\n        assertFalse(a1.equals(a2));\n        a2.setPositiveArrowVisible(true);\n        assertTrue(a1.equals(a2));\n    \n        // negativeArrowVisible;\n        a1.setNegativeArrowVisible(true);\n        assertFalse(a1.equals(a2));\n        a2.setNegativeArrowVisible(true);\n        assertTrue(a1.equals(a2));\n    \n        //private Shape upArrow;\n    \n        //private Shape downArrow;\n    \n        //private Shape leftArrow;\n    \n        //private Shape rightArrow;\n    \n        // axisLinePaint\n        a1.setAxisLinePaint(Color.blue);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLinePaint(Color.blue);\n        assertTrue(a1.equals(a2));\n        \n        // axisLineStroke \n        Stroke stroke = new BasicStroke(2.0f);\n        a1.setAxisLineStroke(stroke);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLineStroke(stroke);\n        assertTrue(a1.equals(a2));\n    \n        // inverted\n        a1.setInverted(true);\n        assertFalse(a1.equals(a2));\n        a2.setInverted(true);\n        assertTrue(a1.equals(a2));\n        \n        // range \n        a1.setRange(new Range(50.0, 75.0));\n        assertFalse(a1.equals(a2));\n        a2.setRange(new Range(50.0, 75.0));\n        assertTrue(a1.equals(a2));\n\n        // autoRange \n        a1.setAutoRange(true);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRange(true);\n        assertTrue(a1.equals(a2));\n\n        // autoRangeMinimumSize\n        a1.setAutoRangeMinimumSize(3.33);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRangeMinimumSize(3.33);\n        assertTrue(a1.equals(a2));\n\n        a1.setDefaultAutoRange(new Range(1.2, 3.4));\n        assertFalse(a1.equals(a2));\n        a2.setDefaultAutoRange(new Range(1.2, 3.4));\n        assertTrue(a1.equals(a2));\n        \n        // upperMargin\n        a1.setUpperMargin(0.09);\n        assertFalse(a1.equals(a2));\n        a2.setUpperMargin(0.09);\n        assertTrue(a1.equals(a2));\n\n        // lowerMargin\n        a1.setLowerMargin(0.09);\n        assertFalse(a1.equals(a2));\n        a2.setLowerMargin(0.09);\n        assertTrue(a1.equals(a2));\n\n        //private double fixedAutoRange;\n        a1.setFixedAutoRange(50.0);\n        assertFalse(a1.equals(a2));\n        a2.setFixedAutoRange(50.0);\n        assertTrue(a1.equals(a2));\n\n        //private boolean autoTickUnitSelection;\n        a1.setAutoTickUnitSelection(false);\n        assertFalse(a1.equals(a2));\n        a2.setAutoTickUnitSelection(false);\n        assertTrue(a1.equals(a2));\n\n        //private TickUnits standardTickUnits;\n        a1.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        assertFalse(a1.equals(a2));\n        a2.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        assertTrue(a1.equals(a2));\n\n        // verticalTickLabels\n        a1.setVerticalTickLabels(true);\n        assertFalse(a1.equals(a2));\n        a2.setVerticalTickLabels(true);\n        assertTrue(a1.equals(a2));\n\n\n        //private int autoTickIndex;\n        //protected double reservedForTickLabels;  \n        //protected double reservedForAxisLabel;\n    \n    }",
        "begin_line": 107,
        "end_line": 222,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 47)",
            "(line 110,col 9)-(line 110,col 47)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 114,col 9)-(line 114,col 37)",
            "(line 115,col 9)-(line 115,col 35)",
            "(line 116,col 9)-(line 116,col 37)",
            "(line 117,col 9)-(line 117,col 34)",
            "(line 120,col 9)-(line 120,col 41)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 41)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 126,col 9)-(line 126,col 41)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 128,col 41)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 140,col 9)-(line 140,col 40)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 40)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 146,col 9)-(line 146,col 46)",
            "(line 147,col 9)-(line 147,col 37)",
            "(line 148,col 9)-(line 148,col 35)",
            "(line 149,col 9)-(line 149,col 37)",
            "(line 150,col 9)-(line 150,col 34)",
            "(line 153,col 9)-(line 153,col 29)",
            "(line 154,col 9)-(line 154,col 35)",
            "(line 155,col 9)-(line 155,col 29)",
            "(line 156,col 9)-(line 156,col 34)",
            "(line 159,col 9)-(line 159,col 43)",
            "(line 160,col 9)-(line 160,col 35)",
            "(line 161,col 9)-(line 161,col 43)",
            "(line 162,col 9)-(line 162,col 34)",
            "(line 165,col 9)-(line 165,col 30)",
            "(line 166,col 9)-(line 166,col 35)",
            "(line 167,col 9)-(line 167,col 30)",
            "(line 168,col 9)-(line 168,col 34)",
            "(line 171,col 9)-(line 171,col 41)",
            "(line 172,col 9)-(line 172,col 35)",
            "(line 173,col 9)-(line 173,col 41)",
            "(line 174,col 9)-(line 174,col 34)",
            "(line 176,col 9)-(line 176,col 52)",
            "(line 177,col 9)-(line 177,col 35)",
            "(line 178,col 9)-(line 178,col 52)",
            "(line 179,col 9)-(line 179,col 34)",
            "(line 182,col 9)-(line 182,col 32)",
            "(line 183,col 9)-(line 183,col 35)",
            "(line 184,col 9)-(line 184,col 32)",
            "(line 185,col 9)-(line 185,col 34)",
            "(line 188,col 9)-(line 188,col 32)",
            "(line 189,col 9)-(line 189,col 35)",
            "(line 190,col 9)-(line 190,col 32)",
            "(line 191,col 9)-(line 191,col 34)",
            "(line 194,col 9)-(line 194,col 35)",
            "(line 195,col 9)-(line 195,col 35)",
            "(line 196,col 9)-(line 196,col 35)",
            "(line 197,col 9)-(line 197,col 34)",
            "(line 200,col 9)-(line 200,col 43)",
            "(line 201,col 9)-(line 201,col 35)",
            "(line 202,col 9)-(line 202,col 43)",
            "(line 203,col 9)-(line 203,col 34)",
            "(line 206,col 9)-(line 206,col 69)",
            "(line 207,col 9)-(line 207,col 35)",
            "(line 208,col 9)-(line 208,col 69)",
            "(line 209,col 9)-(line 209,col 34)",
            "(line 212,col 9)-(line 212,col 39)",
            "(line 213,col 9)-(line 213,col 35)",
            "(line 214,col 9)-(line 214,col 39)",
            "(line 215,col 9)-(line 215,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ValueAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ValueAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ValueAxisTests.testAxisMargins()",
        "snippet": "    public void testAxisMargins() {\n        XYSeries series = new XYSeries(\"S1\");\n        series.add(100.0, 1.1);\n        series.add(200.0, 2.2);\n        XYSeriesCollection dataset = new XYSeriesCollection(series);\n        dataset.setIntervalWidth(0.0);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Title\", \"X\", \"Y\", dataset, PlotOrientation.VERTICAL, \n            false, false, false\n        );\n        ValueAxis domainAxis = ((XYPlot) chart.getPlot()).getDomainAxis();\n        Range r = domainAxis.getRange();\n        assertEquals(110.0, r.getLength(), EPSILON);\n        domainAxis.setLowerMargin(0.10);\n        domainAxis.setUpperMargin(0.10);\n        r = domainAxis.getRange();\n        assertEquals(120.0, r.getLength(), EPSILON);\n    }",
        "begin_line": 228,
        "end_line": 245,
        "comment": "\n     * Tests the the lower and upper margin settings produce the expected \n     * results.\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 45)",
            "(line 230,col 9)-(line 230,col 31)",
            "(line 231,col 9)-(line 231,col 31)",
            "(line 232,col 9)-(line 232,col 68)",
            "(line 233,col 9)-(line 233,col 38)",
            "(line 234,col 9)-(line 237,col 10)",
            "(line 238,col 9)-(line 238,col 74)",
            "(line 239,col 9)-(line 239,col 40)",
            "(line 240,col 9)-(line 240,col 52)",
            "(line 241,col 9)-(line 241,col 40)",
            "(line 242,col 9)-(line 242,col 40)",
            "(line 243,col 9)-(line 243,col 34)",
            "(line 244,col 9)-(line 244,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisLocationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisLocationTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisLocationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(AxisLocationTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisLocationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisLocationTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisLocationTests.AxisLocationTests(java.lang.String)",
        "snippet": "    public AxisLocationTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisLocationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisLocationTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisLocationTests.testEquals()",
        "snippet": "    public void testEquals() {\n        assertEquals(AxisLocation.TOP_OR_RIGHT, AxisLocation.TOP_OR_RIGHT);\n        assertEquals(\n            AxisLocation.BOTTOM_OR_RIGHT, AxisLocation.BOTTOM_OR_RIGHT\n        );    \n        assertEquals(AxisLocation.TOP_OR_LEFT, AxisLocation.TOP_OR_LEFT);    \n        assertEquals(AxisLocation.BOTTOM_OR_LEFT, AxisLocation.BOTTOM_OR_LEFT);\n    }",
        "begin_line": 83,
        "end_line": 90,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 75)",
            "(line 85,col 9)-(line 87,col 10)",
            "(line 88,col 9)-(line 88,col 73)",
            "(line 89,col 9)-(line 89,col 79)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisLocationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisLocationTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisLocationTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        AxisLocation a1 = AxisLocation.TOP_OR_RIGHT;\n        AxisLocation a2 = AxisLocation.TOP_OR_RIGHT;\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 95,
        "end_line": 102,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 52)",
            "(line 97,col 9)-(line 97,col 52)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 99,col 9)-(line 99,col 31)",
            "(line 100,col 9)-(line 100,col 31)",
            "(line 101,col 9)-(line 101,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisLocationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisLocationTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisLocationTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        AxisLocation location1 = AxisLocation.BOTTOM_OR_RIGHT;\n        AxisLocation location2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(location1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            location2 = (AxisLocation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(location1, location2);\n        boolean same = location1 == location2;\n        assertEquals(true, same);        \n    }",
        "begin_line": 107,
        "end_line": 128,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 62)",
            "(line 109,col 9)-(line 109,col 38)",
            "(line 110,col 9)-(line 124,col 9)",
            "(line 125,col 9)-(line 125,col 43)",
            "(line 126,col 9)-(line 126,col 46)",
            "(line 127,col 9)-(line 127,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisSpaceTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisSpaceTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisSpaceTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(AxisSpaceTests.class);\n    }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisSpaceTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisSpaceTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisSpaceTests.AxisSpaceTests(java.lang.String)",
        "snippet": "    public AxisSpaceTests(String name) {\n        super(name);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisSpaceTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisSpaceTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisSpaceTests.testEquals()",
        "snippet": "    public void testEquals() {\n        AxisSpace a1 = new AxisSpace();\n        AxisSpace a2 = new AxisSpace();\n        assertEquals(a1, a2);\n        \n        a1.setTop(1.11);\n        assertFalse(a1.equals(a2));\n        a2.setTop(1.11);\n        assertTrue(a1.equals(a2));\n        \n        a1.setBottom(2.22);\n        assertFalse(a1.equals(a2));\n        a2.setBottom(2.22);\n        assertTrue(a1.equals(a2));\n\n        a1.setLeft(3.33);\n        assertFalse(a1.equals(a2));\n        a2.setLeft(3.33);\n        assertTrue(a1.equals(a2));\n\n        a1.setRight(4.44);\n        assertFalse(a1.equals(a2));\n        a2.setRight(4.44);\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 76,
        "end_line": 100,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 39)",
            "(line 78,col 9)-(line 78,col 39)",
            "(line 79,col 9)-(line 79,col 29)",
            "(line 81,col 9)-(line 81,col 24)",
            "(line 82,col 9)-(line 82,col 35)",
            "(line 83,col 9)-(line 83,col 24)",
            "(line 84,col 9)-(line 84,col 34)",
            "(line 86,col 9)-(line 86,col 27)",
            "(line 87,col 9)-(line 87,col 35)",
            "(line 88,col 9)-(line 88,col 27)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 91,col 9)-(line 91,col 25)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 25)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 96,col 26)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 26)",
            "(line 99,col 9)-(line 99,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisSpaceTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisSpaceTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisSpaceTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        AxisSpace s1 = new AxisSpace();\n        AxisSpace s2 = new AxisSpace();\n        assertTrue(s1.equals(s2));\n        int h1 = s1.hashCode();\n        int h2 = s2.hashCode();\n        assertEquals(h1, h2);\n    }    ",
        "begin_line": 105,
        "end_line": 112,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 39)",
            "(line 107,col 9)-(line 107,col 39)",
            "(line 108,col 9)-(line 108,col 34)",
            "(line 109,col 9)-(line 109,col 31)",
            "(line 110,col 9)-(line 110,col 31)",
            "(line 111,col 9)-(line 111,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisSpaceTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisSpaceTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisSpaceTests.testCloning()",
        "snippet": "    public void testCloning() {\n        AxisSpace s1 = new AxisSpace();\n        AxisSpace s2 = null;\n        try {\n            s2 = (AxisSpace) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n    }",
        "begin_line": 117,
        "end_line": 129,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 39)",
            "(line 119,col 9)-(line 119,col 28)",
            "(line 120,col 9)-(line 125,col 9)",
            "(line 126,col 9)-(line 126,col 29)",
            "(line 127,col 9)-(line 127,col 51)",
            "(line 128,col 9)-(line 128,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickUnitTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickUnitTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickUnitTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DateTickUnitTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickUnitTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickUnitTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickUnitTests.DateTickUnitTests(java.lang.String)",
        "snippet": "    public DateTickUnitTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickUnitTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickUnitTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickUnitTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DateTickUnit t1 = new DateTickUnit(DateTickUnit.DAY, 1);\n        DateTickUnit t2 = new DateTickUnit(DateTickUnit.DAY, 1);\n        assertTrue(t1.equals(t2));\n    }",
        "begin_line": 83,
        "end_line": 87,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 64)",
            "(line 85,col 9)-(line 85,col 64)",
            "(line 86,col 9)-(line 86,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickUnitTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickUnitTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickUnitTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        DateTickUnit t1 = new DateTickUnit(DateTickUnit.DAY, 1);\n        DateTickUnit t2 = new DateTickUnit(DateTickUnit.DAY, 1);\n        assertTrue(t1.equals(t2));\n        int h1 = t1.hashCode();\n        int h2 = t2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 92,
        "end_line": 99,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 64)",
            "(line 94,col 9)-(line 94,col 64)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 96,col 9)-(line 96,col 31)",
            "(line 97,col 9)-(line 97,col 31)",
            "(line 98,col 9)-(line 98,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickUnitTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickUnitTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickUnitTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DateTickUnit a1 = new DateTickUnit(DateTickUnit.DAY, 7);\n        DateTickUnit a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (DateTickUnit) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 104,
        "end_line": 126,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 64)",
            "(line 107,col 9)-(line 107,col 31)",
            "(line 109,col 9)-(line 123,col 9)",
            "(line 124,col 9)-(line 124,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.MarkerAxisBandTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/MarkerAxisBandTests.java",
        "signature": "org.jfree.chart.axis.junit.MarkerAxisBandTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MarkerAxisBandTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.MarkerAxisBandTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/MarkerAxisBandTests.java",
        "signature": "org.jfree.chart.axis.junit.MarkerAxisBandTests.MarkerAxisBandTests(java.lang.String)",
        "snippet": "    public MarkerAxisBandTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.MarkerAxisBandTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/MarkerAxisBandTests.java",
        "signature": "org.jfree.chart.axis.junit.MarkerAxisBandTests.testEquals()",
        "snippet": "    public void testEquals() {        \n        Font font1 = new Font(\"SansSerif\", Font.PLAIN, 12);\n        Font font2 = new Font(\"SansSerif\", Font.PLAIN, 14);\n        \n        MarkerAxisBand a1 = new MarkerAxisBand(null, 1.0, 1.0, 1.0, 1.0, font1);\n        MarkerAxisBand a2 = new MarkerAxisBand(null, 1.0, 1.0, 1.0, 1.0, font1);\n        assertEquals(a1, a2);\n        \n        a1 = new MarkerAxisBand(null, 2.0, 1.0, 1.0, 1.0, font1);\n        assertFalse(a1.equals(a2));\n        a2 = new MarkerAxisBand(null, 2.0, 1.0, 1.0, 1.0, font1);\n        assertTrue(a1.equals(a2));\n        \n        a1 = new MarkerAxisBand(null, 2.0, 3.0, 1.0, 1.0, font1);\n        assertFalse(a1.equals(a2));\n        a2 = new MarkerAxisBand(null, 2.0, 3.0, 1.0, 1.0, font1);\n        assertTrue(a1.equals(a2));\n        \n        a1 = new MarkerAxisBand(null, 2.0, 3.0, 4.0, 1.0, font1);\n        assertFalse(a1.equals(a2));\n        a2 = new MarkerAxisBand(null, 2.0, 3.0, 4.0, 1.0, font1);\n        assertTrue(a1.equals(a2));\n\n        a1 = new MarkerAxisBand(null, 2.0, 3.0, 4.0, 5.0, font1);\n        assertFalse(a1.equals(a2));\n        a2 = new MarkerAxisBand(null, 2.0, 3.0, 4.0, 5.0, font1);\n        assertTrue(a1.equals(a2));\n\n        a1 = new MarkerAxisBand(null, 2.0, 3.0, 4.0, 5.0, font2);\n        assertFalse(a1.equals(a2));\n        a2 = new MarkerAxisBand(null, 2.0, 3.0, 4.0, 5.0, font2);\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 84,
        "end_line": 116,
        "comment": "\n     * Test that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 59)",
            "(line 86,col 9)-(line 86,col 59)",
            "(line 88,col 9)-(line 88,col 80)",
            "(line 89,col 9)-(line 89,col 80)",
            "(line 90,col 9)-(line 90,col 29)",
            "(line 92,col 9)-(line 92,col 65)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 94,col 65)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 97,col 9)-(line 97,col 65)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 65)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 102,col 65)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 65)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 107,col 9)-(line 107,col 65)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 65)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 112,col 9)-(line 112,col 65)",
            "(line 113,col 9)-(line 113,col 35)",
            "(line 114,col 9)-(line 114,col 65)",
            "(line 115,col 9)-(line 115,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.MarkerAxisBandTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/MarkerAxisBandTests.java",
        "signature": "org.jfree.chart.axis.junit.MarkerAxisBandTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        Font font1 = new Font(\"SansSerif\", Font.PLAIN, 12);\n        \n        MarkerAxisBand a1 = new MarkerAxisBand(null, 1.0, 1.0, 1.0, 1.0, font1);\n        MarkerAxisBand a2 = new MarkerAxisBand(null, 1.0, 1.0, 1.0, 1.0, font1);\n         assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 121,
        "end_line": 130,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 59)",
            "(line 124,col 9)-(line 124,col 80)",
            "(line 125,col 9)-(line 125,col 80)",
            "(line 126,col 10)-(line 126,col 35)",
            "(line 127,col 9)-(line 127,col 31)",
            "(line 128,col 9)-(line 128,col 31)",
            "(line 129,col 9)-(line 129,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.MarkerAxisBandTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/MarkerAxisBandTests.java",
        "signature": "org.jfree.chart.axis.junit.MarkerAxisBandTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        MarkerAxisBand a1 = new MarkerAxisBand(null, 1.0, 1.0, 1.0, 1.0, null);\n        MarkerAxisBand a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (MarkerAxisBand) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 135,
        "end_line": 157,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 79)",
            "(line 138,col 9)-(line 138,col 33)",
            "(line 140,col 9)-(line 154,col 9)",
            "(line 155,col 9)-(line 155,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryAxisTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAxisTests.CategoryAxisTests(java.lang.String)",
        "snippet": "    public CategoryAxisTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAxisTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        CategoryAxis a1 = new CategoryAxis(\"Test\");\n        CategoryAxis a2 = new CategoryAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        \n        // lowerMargin \n        a1.setLowerMargin(0.15);\n        assertFalse(a1.equals(a2));\n        a2.setLowerMargin(0.15);\n        assertTrue(a1.equals(a2));\n\n        // upperMargin \n        a1.setUpperMargin(0.15);\n        assertFalse(a1.equals(a2));\n        a2.setUpperMargin(0.15);\n        assertTrue(a1.equals(a2));\n      \n        // categoryMargin \n        a1.setCategoryMargin(0.15);\n        assertFalse(a1.equals(a2));\n        a2.setCategoryMargin(0.15);\n        assertTrue(a1.equals(a2));\n        \n        // maxCategoryLabelWidthRatio\n        a1.setMaximumCategoryLabelWidthRatio(0.98f);\n        assertFalse(a1.equals(a2));\n        a2.setMaximumCategoryLabelWidthRatio(0.98f);\n        assertTrue(a1.equals(a2));\n        \n        // categoryLabelPositionOffset\n        a1.setCategoryLabelPositionOffset(11);\n        assertFalse(a1.equals(a2));\n        a2.setCategoryLabelPositionOffset(11);\n        assertTrue(a1.equals(a2));\n        \n        // categoryLabelPositions\n        a1.setCategoryLabelPositions(CategoryLabelPositions.DOWN_45);\n        assertFalse(a1.equals(a2));\n        a2.setCategoryLabelPositions(CategoryLabelPositions.DOWN_45);\n        assertTrue(a1.equals(a2));\n        \n        // categoryLabelToolTips\n        a1.addCategoryLabelToolTip(\"Test\", \"Check\");\n        assertFalse(a1.equals(a2));\n        a2.addCategoryLabelToolTip(\"Test\", \"Check\");\n        assertTrue(a1.equals(a2));\n        \n        // tickLabelFont\n        a1.setTickLabelFont(\"C1\", new Font(\"Dialog\", Font.PLAIN, 21));\n        assertFalse(a1.equals(a2));\n        a2.setTickLabelFont(\"C1\", new Font(\"Dialog\", Font.PLAIN, 21));\n        assertTrue(a1.equals(a2));\n        \n        // tickLabelPaint\n        a1.setTickLabelPaint(\"C1\", Color.red);\n        assertFalse(a1.equals(a2));\n        a2.setTickLabelPaint(\"C1\", Color.red);\n        assertTrue(a1.equals(a2));\n\n        // tickLabelPaint2\n        a1.setTickLabelPaint(\"C1\", new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(a1.equals(a2));\n        a2.setTickLabelPaint(\"C1\", new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(a1.equals(a2));\n    \n    }",
        "begin_line": 88,
        "end_line": 156,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 51)",
            "(line 91,col 9)-(line 91,col 51)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 95,col 9)-(line 95,col 32)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 32)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 101,col 9)-(line 101,col 32)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 32)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 113,col 9)-(line 113,col 52)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 52)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 119,col 9)-(line 119,col 46)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 121,col 46)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 125,col 9)-(line 125,col 69)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 127,col 69)",
            "(line 128,col 9)-(line 128,col 34)",
            "(line 131,col 9)-(line 131,col 52)",
            "(line 132,col 9)-(line 132,col 35)",
            "(line 133,col 9)-(line 133,col 52)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 137,col 9)-(line 137,col 70)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 70)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 143,col 9)-(line 143,col 46)",
            "(line 144,col 9)-(line 144,col 35)",
            "(line 145,col 9)-(line 145,col 46)",
            "(line 146,col 9)-(line 146,col 34)",
            "(line 149,col 9)-(line 150,col 43)",
            "(line 151,col 9)-(line 151,col 35)",
            "(line 152,col 9)-(line 153,col 43)",
            "(line 154,col 9)-(line 154,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAxisTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        CategoryAxis a1 = new CategoryAxis(\"Test\");\n        CategoryAxis a2 = new CategoryAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 161,
        "end_line": 168,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 51)",
            "(line 163,col 9)-(line 163,col 51)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 165,col 9)-(line 165,col 31)",
            "(line 166,col 9)-(line 166,col 31)",
            "(line 167,col 9)-(line 167,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAxisTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CategoryAxis a1 = new CategoryAxis(\"Test\");\n        CategoryAxis a2 = null;\n        try {\n            a2 = (CategoryAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 173,
        "end_line": 185,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 51)",
            "(line 175,col 9)-(line 175,col 31)",
            "(line 176,col 9)-(line 181,col 9)",
            "(line 182,col 9)-(line 182,col 29)",
            "(line 183,col 9)-(line 183,col 51)",
            "(line 184,col 9)-(line 184,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAxisTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n        CategoryAxis a1 = new CategoryAxis(\"Test\");\n        a1.setTickLabelFont(\"C1\", new Font(\"Dialog\", Font.PLAIN, 15));\n        a1.setTickLabelPaint(\"C1\", new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.white));\n        CategoryAxis a2 = null;\n        try {\n            a2 = (CategoryAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n        \n        // check that changing a tick label font in a1 doesn't change a2\n        a1.setTickLabelFont(\"C1\", null);\n        assertFalse(a1.equals(a2));\n        a2.setTickLabelFont(\"C1\", null);\n        assertTrue(a1.equals(a2));\n        \n        // check that changing a tick label paint in a1 doesn't change a2\n        a1.setTickLabelPaint(\"C1\", Color.yellow);\n        assertFalse(a1.equals(a2));\n        a2.setTickLabelPaint(\"C1\", Color.yellow);\n        assertTrue(a1.equals(a2));\n\n        // check that changing a category label tooltip in a1 doesn't change a2\n        a1.addCategoryLabelToolTip(\"C1\", \"XYZ\");\n        assertFalse(a1.equals(a2));\n        a2.addCategoryLabelToolTip(\"C1\", \"XYZ\");\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 191,
        "end_line": 224,
        "comment": "\n     * Confirm that cloning works.  This test customises the font and paint\n     * per category label.\n     ",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 51)",
            "(line 193,col 9)-(line 193,col 70)",
            "(line 194,col 9)-(line 195,col 42)",
            "(line 196,col 9)-(line 196,col 31)",
            "(line 197,col 9)-(line 202,col 9)",
            "(line 203,col 9)-(line 203,col 29)",
            "(line 204,col 9)-(line 204,col 51)",
            "(line 205,col 9)-(line 205,col 34)",
            "(line 208,col 9)-(line 208,col 40)",
            "(line 209,col 9)-(line 209,col 35)",
            "(line 210,col 9)-(line 210,col 40)",
            "(line 211,col 9)-(line 211,col 34)",
            "(line 214,col 9)-(line 214,col 49)",
            "(line 215,col 9)-(line 215,col 35)",
            "(line 216,col 9)-(line 216,col 49)",
            "(line 217,col 9)-(line 217,col 34)",
            "(line 220,col 9)-(line 220,col 48)",
            "(line 221,col 9)-(line 221,col 35)",
            "(line 222,col 9)-(line 222,col 48)",
            "(line 223,col 9)-(line 223,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAxisTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        CategoryAxis a1 = new CategoryAxis(\"Test Axis\");\n        a1.setTickLabelPaint(\"C1\", new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.white));\n        CategoryAxis a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (CategoryAxis) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(a1, a2);\n    }",
        "begin_line": 229,
        "end_line": 251,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 56)",
            "(line 231,col 9)-(line 232,col 42)",
            "(line 233,col 9)-(line 233,col 31)",
            "(line 235,col 9)-(line 249,col 9)",
            "(line 250,col 9)-(line 250,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelPositionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelPositionTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelPositionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryLabelPositionTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelPositionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelPositionTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelPositionTests.CategoryLabelPositionTests(java.lang.String)",
        "snippet": "    public CategoryLabelPositionTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelPositionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelPositionTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelPositionTests.testEquals()",
        "snippet": "    public void testEquals() {\n        CategoryLabelPosition p1 = new CategoryLabelPosition(\n                RectangleAnchor.BOTTOM_LEFT, TextBlockAnchor.CENTER_RIGHT, \n                TextAnchor.BASELINE_LEFT, Math.PI / 4.0, \n                CategoryLabelWidthType.RANGE, 0.44f);\n        CategoryLabelPosition p2 = new CategoryLabelPosition(\n                RectangleAnchor.BOTTOM_LEFT, TextBlockAnchor.CENTER_RIGHT, \n                TextAnchor.BASELINE_LEFT, Math.PI / 4.0, \n                CategoryLabelWidthType.RANGE, 0.44f);\n        assertTrue(p1.equals(p2));\n        assertTrue(p2.equals(p1));\n        \n        p1 = new CategoryLabelPosition(RectangleAnchor.TOP, \n                TextBlockAnchor.CENTER_RIGHT, TextAnchor.BASELINE_LEFT, \n                Math.PI / 4.0, CategoryLabelWidthType.RANGE, 0.44f);\n        assertFalse(p1.equals(p2));\n        p2 = new CategoryLabelPosition(RectangleAnchor.TOP, \n                TextBlockAnchor.CENTER_RIGHT, TextAnchor.BASELINE_LEFT, \n                Math.PI / 4.0, CategoryLabelWidthType.RANGE, 0.44f);\n        assertTrue(p1.equals(p2));\n\n        p1 = new CategoryLabelPosition(RectangleAnchor.TOP, \n                TextBlockAnchor.CENTER, TextAnchor.BASELINE_LEFT, Math.PI / 4.0, \n                CategoryLabelWidthType.RANGE, 0.44f);\n        assertFalse(p1.equals(p2));\n        p2 = new CategoryLabelPosition(RectangleAnchor.TOP, \n                TextBlockAnchor.CENTER, TextAnchor.BASELINE_LEFT, Math.PI / 4.0, \n                CategoryLabelWidthType.RANGE, 0.44f);\n        assertTrue(p1.equals(p2));\n    \n        p1 = new CategoryLabelPosition(RectangleAnchor.TOP, \n                TextBlockAnchor.CENTER, TextAnchor.CENTER, Math.PI / 4.0, \n                CategoryLabelWidthType.RANGE, 0.44f);\n        assertFalse(p1.equals(p2));\n        p2 = new CategoryLabelPosition(RectangleAnchor.TOP, \n                TextBlockAnchor.CENTER, TextAnchor.CENTER, Math.PI / 4.0, \n                CategoryLabelWidthType.RANGE, 0.44f);\n        assertTrue(p1.equals(p2));\n    \n        p1 = new CategoryLabelPosition(RectangleAnchor.TOP, \n                TextBlockAnchor.CENTER, TextAnchor.CENTER, Math.PI / 6.0, \n                CategoryLabelWidthType.RANGE, 0.44f);\n        assertFalse(p1.equals(p2));\n        p2 = new CategoryLabelPosition(RectangleAnchor.TOP, \n                TextBlockAnchor.CENTER, TextAnchor.CENTER, Math.PI / 6.0, \n                CategoryLabelWidthType.RANGE, 0.44f);\n        assertTrue(p1.equals(p2));\n    \n        p1 = new CategoryLabelPosition(RectangleAnchor.TOP, \n                TextBlockAnchor.CENTER, TextAnchor.CENTER, Math.PI / 6.0, \n                CategoryLabelWidthType.CATEGORY, 0.44f);\n        assertFalse(p1.equals(p2));\n        p2 = new CategoryLabelPosition(RectangleAnchor.TOP, \n                TextBlockAnchor.CENTER, TextAnchor.CENTER, Math.PI / 6.0, \n                CategoryLabelWidthType.CATEGORY, 0.44f);\n        assertTrue(p1.equals(p2));\n    \n        p1 = new CategoryLabelPosition(RectangleAnchor.TOP, \n                TextBlockAnchor.CENTER, TextAnchor.CENTER,  Math.PI / 6.0, \n                CategoryLabelWidthType.CATEGORY, 0.55f);\n        assertFalse(p1.equals(p2));\n        p2 = new CategoryLabelPosition(RectangleAnchor.TOP, \n                TextBlockAnchor.CENTER, TextAnchor.CENTER, Math.PI / 6.0, \n                CategoryLabelWidthType.CATEGORY, 0.55f);\n        assertTrue(p1.equals(p2));   \n    }",
        "begin_line": 88,
        "end_line": 153,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 92,col 53)",
            "(line 93,col 9)-(line 96,col 53)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 100,col 9)-(line 102,col 68)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 106,col 68)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 109,col 9)-(line 111,col 53)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 115,col 53)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 118,col 9)-(line 120,col 53)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 124,col 53)",
            "(line 125,col 9)-(line 125,col 34)",
            "(line 127,col 9)-(line 129,col 53)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 133,col 53)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 136,col 9)-(line 138,col 56)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 140,col 9)-(line 142,col 56)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 145,col 9)-(line 147,col 56)",
            "(line 148,col 9)-(line 148,col 35)",
            "(line 149,col 9)-(line 151,col 56)",
            "(line 152,col 9)-(line 152,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelPositionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelPositionTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelPositionTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        CategoryLabelPosition a1 = new CategoryLabelPosition();\n        CategoryLabelPosition a2 = new CategoryLabelPosition();\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 158,
        "end_line": 165,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 63)",
            "(line 160,col 9)-(line 160,col 63)",
            "(line 161,col 9)-(line 161,col 34)",
            "(line 162,col 9)-(line 162,col 31)",
            "(line 163,col 9)-(line 163,col 31)",
            "(line 164,col 9)-(line 164,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelPositionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelPositionTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelPositionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CategoryLabelPosition p1 = new CategoryLabelPosition();\n        CategoryLabelPosition p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CategoryLabelPosition) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(p1, p2);      \n    }",
        "begin_line": 170,
        "end_line": 190,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 63)",
            "(line 173,col 9)-(line 173,col 40)",
            "(line 175,col 9)-(line 188,col 9)",
            "(line 189,col 9)-(line 189,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.MyDateAxis.MyDateAxis(java.lang.String)",
        "snippet": "        public MyDateAxis(String label) {\n            super(label);\n        }",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n         * Creates a new instance.\n         * \n         * @param label  the label.\n         ",
        "child_ranges": [
            "(line 92,col 13)-(line 92,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.MyDateAxis.previousStandardDate(java.util.Date, org.jfree.chart.axis.DateTickUnit)",
        "snippet": "        public Date previousStandardDate(Date d, DateTickUnit unit) {\n            return super.previousStandardDate(d, unit);\n        }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 96,col 13)-(line 96,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DateAxisTests.class);\n    }",
        "begin_line": 105,
        "end_line": 107,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.DateAxisTests(java.lang.String)",
        "snippet": "    public DateAxisTests(String name) {\n        super(name);\n    }",
        "begin_line": 114,
        "end_line": 116,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        DateAxis a1 = new DateAxis(\"Test\");\n        DateAxis a2 = new DateAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        assertFalse(a1.equals(null));\n        assertFalse(a1.equals(\"Some non-DateAxis object\"));\n        \n        // tickUnit \n        a1.setTickUnit(new DateTickUnit(DateTickUnit.DAY, 7));\n        assertFalse(a1.equals(a2));\n        a2.setTickUnit(new DateTickUnit(DateTickUnit.DAY, 7));\n        assertTrue(a1.equals(a2));\n\n        // dateFormatOverride \n        a1.setDateFormatOverride(new SimpleDateFormat(\"yyyy\"));\n        assertFalse(a1.equals(a2));\n        a2.setDateFormatOverride(new SimpleDateFormat(\"yyyy\"));\n        assertTrue(a1.equals(a2));\n\n        // tickMarkPosition\n        a1.setTickMarkPosition(DateTickMarkPosition.END);\n        assertFalse(a1.equals(a2));\n        a2.setTickMarkPosition(DateTickMarkPosition.END);\n        assertTrue(a1.equals(a2));\n        \n        // timeline\n        a1.setTimeline(SegmentedTimeline.newMondayThroughFridayTimeline());\n        assertFalse(a1.equals(a2));\n        a2.setTimeline(SegmentedTimeline.newMondayThroughFridayTimeline());\n        assertTrue(a1.equals(a2));\n        \n    }",
        "begin_line": 121,
        "end_line": 153,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 43)",
            "(line 124,col 9)-(line 124,col 43)",
            "(line 125,col 9)-(line 125,col 34)",
            "(line 126,col 9)-(line 126,col 37)",
            "(line 127,col 9)-(line 127,col 59)",
            "(line 130,col 9)-(line 130,col 62)",
            "(line 131,col 9)-(line 131,col 35)",
            "(line 132,col 9)-(line 132,col 62)",
            "(line 133,col 9)-(line 133,col 34)",
            "(line 136,col 9)-(line 136,col 63)",
            "(line 137,col 9)-(line 137,col 35)",
            "(line 138,col 9)-(line 138,col 63)",
            "(line 139,col 9)-(line 139,col 34)",
            "(line 142,col 9)-(line 142,col 57)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 144,col 57)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 148,col 9)-(line 148,col 75)",
            "(line 149,col 9)-(line 149,col 35)",
            "(line 150,col 9)-(line 150,col 75)",
            "(line 151,col 9)-(line 151,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.test1472942()",
        "snippet": "    public void test1472942() {\n        DateAxis a1 = new DateAxis(\"Test\");\n        DateAxis a2 = new DateAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n\n        // range\n        a1.setRange(new Date(1L), new Date(2L));\n        assertFalse(a1.equals(a2));\n        a2.setRange(new Date(1L), new Date(2L));\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 159,
        "end_line": 169,
        "comment": "\n     * A test for bug report 1472942.  The DateFormat.equals() method is not\n     * checking the range attribute.\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 43)",
            "(line 161,col 9)-(line 161,col 43)",
            "(line 162,col 9)-(line 162,col 34)",
            "(line 165,col 9)-(line 165,col 48)",
            "(line 166,col 9)-(line 166,col 35)",
            "(line 167,col 9)-(line 167,col 48)",
            "(line 168,col 9)-(line 168,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        DateAxis a1 = new DateAxis(\"Test\");\n        DateAxis a2 = new DateAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 174,
        "end_line": 181,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 43)",
            "(line 176,col 9)-(line 176,col 43)",
            "(line 177,col 9)-(line 177,col 34)",
            "(line 178,col 9)-(line 178,col 31)",
            "(line 179,col 9)-(line 179,col 31)",
            "(line 180,col 9)-(line 180,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DateAxis a1 = new DateAxis(\"Test\");\n        DateAxis a2 = null;\n        try {\n            a2 = (DateAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 186,
        "end_line": 198,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 43)",
            "(line 188,col 9)-(line 188,col 27)",
            "(line 189,col 9)-(line 194,col 9)",
            "(line 195,col 9)-(line 195,col 29)",
            "(line 196,col 9)-(line 196,col 51)",
            "(line 197,col 9)-(line 197,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testSetRange()",
        "snippet": "    public void testSetRange() {\n\n        DateAxis axis = new DateAxis(\"Test Axis\");\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(1999, Calendar.JANUARY, 3);\n        Date d1 = calendar.getTime();\n        calendar.set(1999, Calendar.JANUARY, 31);\n        Date d2 = calendar.getTime();\n        axis.setRange(d1, d2);\n\n        DateRange range = (DateRange) axis.getRange();\n        assertEquals(d1, range.getLowerDate());\n        assertEquals(d2, range.getUpperDate());\n\n    }",
        "begin_line": 203,
        "end_line": 217,
        "comment": "\n     * Test that the setRange() method works.\n     ",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 50)",
            "(line 206,col 9)-(line 206,col 51)",
            "(line 207,col 9)-(line 207,col 48)",
            "(line 208,col 9)-(line 208,col 37)",
            "(line 209,col 9)-(line 209,col 49)",
            "(line 210,col 9)-(line 210,col 37)",
            "(line 211,col 9)-(line 211,col 30)",
            "(line 213,col 9)-(line 213,col 54)",
            "(line 214,col 9)-(line 214,col 47)",
            "(line 215,col 9)-(line 215,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testSetMaximumDate()",
        "snippet": "    public void testSetMaximumDate() {\n        DateAxis axis = new DateAxis(\"Test Axis\");\n        Date date = new Date();\n        axis.setMaximumDate(date);\n        assertEquals(date, axis.getMaximumDate());\n\n        // check that setting the max date to something on or before the \n        // current min date works...\n        Date d1 = new Date();\n        Date d2 = new Date(d1.getTime() + 1);\n        Date d0 = new Date(d1.getTime() - 1);\n        axis.setMaximumDate(d2);\n        axis.setMinimumDate(d1);\n        axis.setMaximumDate(d1);\n        assertEquals(d0, axis.getMinimumDate());\n    }",
        "begin_line": 222,
        "end_line": 237,
        "comment": "\n     * Test that the setMaximumDate() method works.\n     ",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 50)",
            "(line 224,col 9)-(line 224,col 31)",
            "(line 225,col 9)-(line 225,col 34)",
            "(line 226,col 9)-(line 226,col 50)",
            "(line 230,col 9)-(line 230,col 29)",
            "(line 231,col 9)-(line 231,col 45)",
            "(line 232,col 9)-(line 232,col 45)",
            "(line 233,col 9)-(line 233,col 32)",
            "(line 234,col 9)-(line 234,col 32)",
            "(line 235,col 9)-(line 235,col 32)",
            "(line 236,col 9)-(line 236,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testSetMinimumDate()",
        "snippet": "    public void testSetMinimumDate() {\n        DateAxis axis = new DateAxis(\"Test Axis\");\n        Date d1 = new Date();\n        Date d2 = new Date(d1.getTime() + 1);\n        axis.setMaximumDate(d2);\n        axis.setMinimumDate(d1);\n        assertEquals(d1, axis.getMinimumDate());\n        \n        // check that setting the min date to something on or after the \n        // current min date works...\n        Date d3 = new Date(d2.getTime() + 1);\n        axis.setMinimumDate(d2);\n        assertEquals(d3, axis.getMaximumDate());\n    }",
        "begin_line": 242,
        "end_line": 255,
        "comment": "\n     * Test that the setMinimumDate() method works.\n     ",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 50)",
            "(line 244,col 9)-(line 244,col 29)",
            "(line 245,col 9)-(line 245,col 45)",
            "(line 246,col 9)-(line 246,col 32)",
            "(line 247,col 9)-(line 247,col 32)",
            "(line 248,col 9)-(line 248,col 48)",
            "(line 252,col 9)-(line 252,col 45)",
            "(line 253,col 9)-(line 253,col 32)",
            "(line 254,col 9)-(line 254,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.same(double, double, double)",
        "snippet": "    private boolean same(double d1, double d2, double tolerance) {\n        return (Math.abs(d1 - d2) < tolerance);\n    }",
        "begin_line": 266,
        "end_line": 268,
        "comment": "\n     * Tests two doubles for 'near enough' equality.\n     * \n     * @param d1  number 1.\n     * @param d2  number 2.\n     * @param tolerance  maximum tolerance.\n     * \n     * @return A boolean.\n     ",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testJava2DToValue()",
        "snippet": "    public void testJava2DToValue() {\n        DateAxis axis = new DateAxis();\n        axis.setRange(50.0, 100.0); \n        Rectangle2D dataArea = new Rectangle2D.Double(10.0, 50.0, 400.0, 300.0);\n        double y1 = axis.java2DToValue(75.0, dataArea, RectangleEdge.LEFT);  \n        assertTrue(same(y1, 95.8333333, 1.0)); \n        double y2 = axis.java2DToValue(75.0, dataArea, RectangleEdge.RIGHT);   \n        assertTrue(same(y2, 95.8333333, 1.0)); \n        double x1 = axis.java2DToValue(75.0, dataArea, RectangleEdge.TOP);   \n        assertTrue(same(x1, 58.125, 1.0)); \n        double x2 = axis.java2DToValue(75.0, dataArea, RectangleEdge.BOTTOM);   \n        assertTrue(same(x2, 58.125, 1.0)); \n        axis.setInverted(true);\n        double y3 = axis.java2DToValue(75.0, dataArea, RectangleEdge.LEFT);  \n        assertTrue(same(y3, 54.1666667, 1.0)); \n        double y4 = axis.java2DToValue(75.0, dataArea, RectangleEdge.RIGHT);   \n        assertTrue(same(y4, 54.1666667, 1.0)); \n        double x3 = axis.java2DToValue(75.0, dataArea, RectangleEdge.TOP);   \n        assertTrue(same(x3, 91.875, 1.0)); \n        double x4 = axis.java2DToValue(75.0, dataArea, RectangleEdge.BOTTOM);   \n        assertTrue(same(x4, 91.875, 1.0));   \n    }",
        "begin_line": 273,
        "end_line": 294,
        "comment": "\n     * Test the translation of Java2D values to data values.\n     ",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 39)",
            "(line 275,col 9)-(line 275,col 35)",
            "(line 276,col 9)-(line 276,col 80)",
            "(line 277,col 9)-(line 277,col 75)",
            "(line 278,col 9)-(line 278,col 46)",
            "(line 279,col 9)-(line 279,col 76)",
            "(line 280,col 9)-(line 280,col 46)",
            "(line 281,col 9)-(line 281,col 74)",
            "(line 282,col 9)-(line 282,col 42)",
            "(line 283,col 9)-(line 283,col 77)",
            "(line 284,col 9)-(line 284,col 42)",
            "(line 285,col 9)-(line 285,col 31)",
            "(line 286,col 9)-(line 286,col 75)",
            "(line 287,col 9)-(line 287,col 46)",
            "(line 288,col 9)-(line 288,col 76)",
            "(line 289,col 9)-(line 289,col 46)",
            "(line 290,col 9)-(line 290,col 74)",
            "(line 291,col 9)-(line 291,col 42)",
            "(line 292,col 9)-(line 292,col 77)",
            "(line 293,col 9)-(line 293,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DateAxis a1 = new DateAxis(\"Test Axis\");\n        DateAxis a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            a2 = (DateAxis) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        boolean b = a1.equals(a2);\n        assertTrue(b);\n\n    }",
        "begin_line": 299,
        "end_line": 321,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 48)",
            "(line 302,col 9)-(line 302,col 27)",
            "(line 304,col 9)-(line 317,col 9)",
            "(line 318,col 9)-(line 318,col 34)",
            "(line 319,col 9)-(line 319,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateYearA()",
        "snippet": "    public void testPreviousStandardDateYearA() {\n        MyDateAxis axis = new MyDateAxis(\"Year\");\n        Year y2006 = new Year(2006);\n        Year y2007 = new Year(2007);\n        \n        // five dates to check...\n        Date d0 = new Date(y2006.getFirstMillisecond());\n        Date d1 = new Date(y2006.getFirstMillisecond() + 500L);\n        Date d2 = new Date(y2006.getMiddleMillisecond());\n        Date d3 = new Date(y2006.getMiddleMillisecond() + 500L);\n        Date d4 = new Date(y2006.getLastMillisecond());\n        \n        Date end = new Date(y2007.getLastMillisecond());\n        \n        DateTickUnit unit = new DateTickUnit(DateTickUnit.YEAR, 1);\n        axis.setTickUnit(unit);\n\n        // START: check d0 and d1\n        axis.setTickMarkPosition(DateTickMarkPosition.START);\n\n        axis.setRange(d0, end);\n        Date psd = axis.previousStandardDate(d0, unit);\n        Date nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n\n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n\n        // MIDDLE: check d1, d2 and d3\n        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);\n        \n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n        \n        axis.setRange(d2, end);\n        psd = axis.previousStandardDate(d2, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d2.getTime());\n        assertTrue(nsd.getTime() >= d2.getTime());\n\n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n\n        // END: check d3 and d4\n        axis.setTickMarkPosition(DateTickMarkPosition.END);\n        \n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n        \n        axis.setRange(d4, end);\n        psd = axis.previousStandardDate(d4, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d4.getTime());\n        assertTrue(nsd.getTime() >= d4.getTime());\n    }",
        "begin_line": 327,
        "end_line": 394,
        "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 1 year.\n     ",
        "child_ranges": [
            "(line 328,col 9)-(line 328,col 49)",
            "(line 329,col 9)-(line 329,col 36)",
            "(line 330,col 9)-(line 330,col 36)",
            "(line 333,col 9)-(line 333,col 56)",
            "(line 334,col 9)-(line 334,col 63)",
            "(line 335,col 9)-(line 335,col 57)",
            "(line 336,col 9)-(line 336,col 64)",
            "(line 337,col 9)-(line 337,col 55)",
            "(line 339,col 9)-(line 339,col 56)",
            "(line 341,col 9)-(line 341,col 67)",
            "(line 342,col 9)-(line 342,col 31)",
            "(line 345,col 9)-(line 345,col 61)",
            "(line 347,col 9)-(line 347,col 31)",
            "(line 348,col 9)-(line 348,col 55)",
            "(line 349,col 9)-(line 349,col 39)",
            "(line 350,col 9)-(line 350,col 49)",
            "(line 351,col 9)-(line 351,col 50)",
            "(line 353,col 9)-(line 353,col 31)",
            "(line 354,col 9)-(line 354,col 50)",
            "(line 355,col 9)-(line 355,col 34)",
            "(line 356,col 9)-(line 356,col 49)",
            "(line 357,col 9)-(line 357,col 50)",
            "(line 360,col 9)-(line 360,col 62)",
            "(line 362,col 9)-(line 362,col 31)",
            "(line 363,col 9)-(line 363,col 50)",
            "(line 364,col 9)-(line 364,col 34)",
            "(line 365,col 9)-(line 365,col 49)",
            "(line 366,col 9)-(line 366,col 50)",
            "(line 368,col 9)-(line 368,col 31)",
            "(line 369,col 9)-(line 369,col 50)",
            "(line 370,col 9)-(line 370,col 34)",
            "(line 371,col 9)-(line 371,col 49)",
            "(line 372,col 9)-(line 372,col 50)",
            "(line 374,col 9)-(line 374,col 31)",
            "(line 375,col 9)-(line 375,col 50)",
            "(line 376,col 9)-(line 376,col 34)",
            "(line 377,col 9)-(line 377,col 49)",
            "(line 378,col 9)-(line 378,col 50)",
            "(line 381,col 9)-(line 381,col 59)",
            "(line 383,col 9)-(line 383,col 31)",
            "(line 384,col 9)-(line 384,col 50)",
            "(line 385,col 9)-(line 385,col 34)",
            "(line 386,col 9)-(line 386,col 49)",
            "(line 387,col 9)-(line 387,col 50)",
            "(line 389,col 9)-(line 389,col 31)",
            "(line 390,col 9)-(line 390,col 50)",
            "(line 391,col 9)-(line 391,col 34)",
            "(line 392,col 9)-(line 392,col 49)",
            "(line 393,col 9)-(line 393,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateYearB()",
        "snippet": "    public void testPreviousStandardDateYearB() {\n        MyDateAxis axis = new MyDateAxis(\"Year\");\n        Year y2006 = new Year(2006);\n        Year y2007 = new Year(2007);\n        \n        // five dates to check...\n        Date d0 = new Date(y2006.getFirstMillisecond());\n        Date d1 = new Date(y2006.getFirstMillisecond() + 500L);\n        Date d2 = new Date(y2006.getMiddleMillisecond());\n        Date d3 = new Date(y2006.getMiddleMillisecond() + 500L);\n        Date d4 = new Date(y2006.getLastMillisecond());\n        \n        Date end = new Date(y2007.getLastMillisecond());\n        \n        DateTickUnit unit = new DateTickUnit(DateTickUnit.YEAR, 10);\n        axis.setTickUnit(unit);\n\n        // START: check d0 and d1\n        axis.setTickMarkPosition(DateTickMarkPosition.START);\n\n        axis.setRange(d0, end);\n        Date psd = axis.previousStandardDate(d0, unit);\n        Date nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n\n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n\n        // MIDDLE: check d1, d2 and d3\n        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);\n        \n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n        \n        axis.setRange(d2, end);\n        psd = axis.previousStandardDate(d2, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d2.getTime());\n        assertTrue(nsd.getTime() >= d2.getTime());\n\n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n\n        // END: check d3 and d4\n        axis.setTickMarkPosition(DateTickMarkPosition.END);\n        \n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n        \n        axis.setRange(d4, end);\n        psd = axis.previousStandardDate(d4, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d4.getTime());\n        assertTrue(nsd.getTime() >= d4.getTime());\n    }",
        "begin_line": 400,
        "end_line": 467,
        "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 10 years (just for the sake of having a multiple).\n     ",
        "child_ranges": [
            "(line 401,col 9)-(line 401,col 49)",
            "(line 402,col 9)-(line 402,col 36)",
            "(line 403,col 9)-(line 403,col 36)",
            "(line 406,col 9)-(line 406,col 56)",
            "(line 407,col 9)-(line 407,col 63)",
            "(line 408,col 9)-(line 408,col 57)",
            "(line 409,col 9)-(line 409,col 64)",
            "(line 410,col 9)-(line 410,col 55)",
            "(line 412,col 9)-(line 412,col 56)",
            "(line 414,col 9)-(line 414,col 68)",
            "(line 415,col 9)-(line 415,col 31)",
            "(line 418,col 9)-(line 418,col 61)",
            "(line 420,col 9)-(line 420,col 31)",
            "(line 421,col 9)-(line 421,col 55)",
            "(line 422,col 9)-(line 422,col 39)",
            "(line 423,col 9)-(line 423,col 49)",
            "(line 424,col 9)-(line 424,col 50)",
            "(line 426,col 9)-(line 426,col 31)",
            "(line 427,col 9)-(line 427,col 50)",
            "(line 428,col 9)-(line 428,col 34)",
            "(line 429,col 9)-(line 429,col 49)",
            "(line 430,col 9)-(line 430,col 50)",
            "(line 433,col 9)-(line 433,col 62)",
            "(line 435,col 9)-(line 435,col 31)",
            "(line 436,col 9)-(line 436,col 50)",
            "(line 437,col 9)-(line 437,col 34)",
            "(line 438,col 9)-(line 438,col 49)",
            "(line 439,col 9)-(line 439,col 50)",
            "(line 441,col 9)-(line 441,col 31)",
            "(line 442,col 9)-(line 442,col 50)",
            "(line 443,col 9)-(line 443,col 34)",
            "(line 444,col 9)-(line 444,col 49)",
            "(line 445,col 9)-(line 445,col 50)",
            "(line 447,col 9)-(line 447,col 31)",
            "(line 448,col 9)-(line 448,col 50)",
            "(line 449,col 9)-(line 449,col 34)",
            "(line 450,col 9)-(line 450,col 49)",
            "(line 451,col 9)-(line 451,col 50)",
            "(line 454,col 9)-(line 454,col 59)",
            "(line 456,col 9)-(line 456,col 31)",
            "(line 457,col 9)-(line 457,col 50)",
            "(line 458,col 9)-(line 458,col 34)",
            "(line 459,col 9)-(line 459,col 49)",
            "(line 460,col 9)-(line 460,col 50)",
            "(line 462,col 9)-(line 462,col 31)",
            "(line 463,col 9)-(line 463,col 50)",
            "(line 464,col 9)-(line 464,col 34)",
            "(line 465,col 9)-(line 465,col 49)",
            "(line 466,col 9)-(line 466,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateMonthA()",
        "snippet": "    public void testPreviousStandardDateMonthA() {\n        MyDateAxis axis = new MyDateAxis(\"Month\");\n        Month nov2006 = new Month(11, 2006);\n        Month dec2006 = new Month(12, 2006);\n        \n        // five dates to check...\n        Date d0 = new Date(nov2006.getFirstMillisecond());\n        Date d1 = new Date(nov2006.getFirstMillisecond() + 500L);\n        Date d2 = new Date(nov2006.getMiddleMillisecond());\n        Date d3 = new Date(nov2006.getMiddleMillisecond() + 500L);\n        Date d4 = new Date(nov2006.getLastMillisecond());\n        \n        Date end = new Date(dec2006.getLastMillisecond());\n        \n        DateTickUnit unit = new DateTickUnit(DateTickUnit.MONTH, 1);\n        axis.setTickUnit(unit);\n\n        // START: check d0 and d1\n        axis.setTickMarkPosition(DateTickMarkPosition.START);\n\n        axis.setRange(d0, end);\n        Date psd = axis.previousStandardDate(d0, unit);\n        Date nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n\n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n\n        // MIDDLE: check d1, d2 and d3\n        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);\n        \n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n        \n        axis.setRange(d2, end);\n        psd = axis.previousStandardDate(d2, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d2.getTime());\n        assertTrue(nsd.getTime() >= d2.getTime());\n\n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n\n        // END: check d3 and d4\n        axis.setTickMarkPosition(DateTickMarkPosition.END);\n        \n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n        \n        axis.setRange(d4, end);\n        psd = axis.previousStandardDate(d4, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d4.getTime());\n        assertTrue(nsd.getTime() >= d4.getTime());\n    }",
        "begin_line": 473,
        "end_line": 540,
        "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 1 month.\n     ",
        "child_ranges": [
            "(line 474,col 9)-(line 474,col 50)",
            "(line 475,col 9)-(line 475,col 44)",
            "(line 476,col 9)-(line 476,col 44)",
            "(line 479,col 9)-(line 479,col 58)",
            "(line 480,col 9)-(line 480,col 65)",
            "(line 481,col 9)-(line 481,col 59)",
            "(line 482,col 9)-(line 482,col 66)",
            "(line 483,col 9)-(line 483,col 57)",
            "(line 485,col 9)-(line 485,col 58)",
            "(line 487,col 9)-(line 487,col 68)",
            "(line 488,col 9)-(line 488,col 31)",
            "(line 491,col 9)-(line 491,col 61)",
            "(line 493,col 9)-(line 493,col 31)",
            "(line 494,col 9)-(line 494,col 55)",
            "(line 495,col 9)-(line 495,col 39)",
            "(line 496,col 9)-(line 496,col 49)",
            "(line 497,col 9)-(line 497,col 50)",
            "(line 499,col 9)-(line 499,col 31)",
            "(line 500,col 9)-(line 500,col 50)",
            "(line 501,col 9)-(line 501,col 34)",
            "(line 502,col 9)-(line 502,col 49)",
            "(line 503,col 9)-(line 503,col 50)",
            "(line 506,col 9)-(line 506,col 62)",
            "(line 508,col 9)-(line 508,col 31)",
            "(line 509,col 9)-(line 509,col 50)",
            "(line 510,col 9)-(line 510,col 34)",
            "(line 511,col 9)-(line 511,col 49)",
            "(line 512,col 9)-(line 512,col 50)",
            "(line 514,col 9)-(line 514,col 31)",
            "(line 515,col 9)-(line 515,col 50)",
            "(line 516,col 9)-(line 516,col 34)",
            "(line 517,col 9)-(line 517,col 49)",
            "(line 518,col 9)-(line 518,col 50)",
            "(line 520,col 9)-(line 520,col 31)",
            "(line 521,col 9)-(line 521,col 50)",
            "(line 522,col 9)-(line 522,col 34)",
            "(line 523,col 9)-(line 523,col 49)",
            "(line 524,col 9)-(line 524,col 50)",
            "(line 527,col 9)-(line 527,col 59)",
            "(line 529,col 9)-(line 529,col 31)",
            "(line 530,col 9)-(line 530,col 50)",
            "(line 531,col 9)-(line 531,col 34)",
            "(line 532,col 9)-(line 532,col 49)",
            "(line 533,col 9)-(line 533,col 50)",
            "(line 535,col 9)-(line 535,col 31)",
            "(line 536,col 9)-(line 536,col 50)",
            "(line 537,col 9)-(line 537,col 34)",
            "(line 538,col 9)-(line 538,col 49)",
            "(line 539,col 9)-(line 539,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateMonthB()",
        "snippet": "    public void testPreviousStandardDateMonthB() {\n        MyDateAxis axis = new MyDateAxis(\"Month\");\n        Month nov2006 = new Month(11, 2006);\n        Month dec2006 = new Month(12, 2006);\n        \n        // five dates to check...\n        Date d0 = new Date(nov2006.getFirstMillisecond());\n        Date d1 = new Date(nov2006.getFirstMillisecond() + 500L);\n        Date d2 = new Date(nov2006.getMiddleMillisecond());\n        Date d3 = new Date(nov2006.getMiddleMillisecond() + 500L);\n        Date d4 = new Date(nov2006.getLastMillisecond());\n        \n        Date end = new Date(dec2006.getLastMillisecond());\n        \n        DateTickUnit unit = new DateTickUnit(DateTickUnit.MONTH, 3);\n        axis.setTickUnit(unit);\n\n        // START: check d0 and d1\n        axis.setTickMarkPosition(DateTickMarkPosition.START);\n\n        axis.setRange(d0, end);\n        Date psd = axis.previousStandardDate(d0, unit);\n        Date nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n\n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n\n        // MIDDLE: check d1, d2 and d3\n        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);\n        \n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n        \n        axis.setRange(d2, end);\n        psd = axis.previousStandardDate(d2, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d2.getTime());\n        assertTrue(nsd.getTime() >= d2.getTime());\n\n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n\n        // END: check d3 and d4\n        axis.setTickMarkPosition(DateTickMarkPosition.END);\n        \n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n        \n        axis.setRange(d4, end);\n        psd = axis.previousStandardDate(d4, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d4.getTime());\n        assertTrue(nsd.getTime() >= d4.getTime());\n    }",
        "begin_line": 546,
        "end_line": 613,
        "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 3 months (just for the sake of having a multiple).\n     ",
        "child_ranges": [
            "(line 547,col 9)-(line 547,col 50)",
            "(line 548,col 9)-(line 548,col 44)",
            "(line 549,col 9)-(line 549,col 44)",
            "(line 552,col 9)-(line 552,col 58)",
            "(line 553,col 9)-(line 553,col 65)",
            "(line 554,col 9)-(line 554,col 59)",
            "(line 555,col 9)-(line 555,col 66)",
            "(line 556,col 9)-(line 556,col 57)",
            "(line 558,col 9)-(line 558,col 58)",
            "(line 560,col 9)-(line 560,col 68)",
            "(line 561,col 9)-(line 561,col 31)",
            "(line 564,col 9)-(line 564,col 61)",
            "(line 566,col 9)-(line 566,col 31)",
            "(line 567,col 9)-(line 567,col 55)",
            "(line 568,col 9)-(line 568,col 39)",
            "(line 569,col 9)-(line 569,col 49)",
            "(line 570,col 9)-(line 570,col 50)",
            "(line 572,col 9)-(line 572,col 31)",
            "(line 573,col 9)-(line 573,col 50)",
            "(line 574,col 9)-(line 574,col 34)",
            "(line 575,col 9)-(line 575,col 49)",
            "(line 576,col 9)-(line 576,col 50)",
            "(line 579,col 9)-(line 579,col 62)",
            "(line 581,col 9)-(line 581,col 31)",
            "(line 582,col 9)-(line 582,col 50)",
            "(line 583,col 9)-(line 583,col 34)",
            "(line 584,col 9)-(line 584,col 49)",
            "(line 585,col 9)-(line 585,col 50)",
            "(line 587,col 9)-(line 587,col 31)",
            "(line 588,col 9)-(line 588,col 50)",
            "(line 589,col 9)-(line 589,col 34)",
            "(line 590,col 9)-(line 590,col 49)",
            "(line 591,col 9)-(line 591,col 50)",
            "(line 593,col 9)-(line 593,col 31)",
            "(line 594,col 9)-(line 594,col 50)",
            "(line 595,col 9)-(line 595,col 34)",
            "(line 596,col 9)-(line 596,col 49)",
            "(line 597,col 9)-(line 597,col 50)",
            "(line 600,col 9)-(line 600,col 59)",
            "(line 602,col 9)-(line 602,col 31)",
            "(line 603,col 9)-(line 603,col 50)",
            "(line 604,col 9)-(line 604,col 34)",
            "(line 605,col 9)-(line 605,col 49)",
            "(line 606,col 9)-(line 606,col 50)",
            "(line 608,col 9)-(line 608,col 31)",
            "(line 609,col 9)-(line 609,col 50)",
            "(line 610,col 9)-(line 610,col 34)",
            "(line 611,col 9)-(line 611,col 49)",
            "(line 612,col 9)-(line 612,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateDayA()",
        "snippet": "    public void testPreviousStandardDateDayA() {\n        MyDateAxis axis = new MyDateAxis(\"Day\");\n        Day apr12007 = new Day(1, 4, 2007);\n        Day apr22007 = new Day(2, 4, 2007);\n        \n        // five dates to check...\n        Date d0 = new Date(apr12007.getFirstMillisecond());\n        Date d1 = new Date(apr12007.getFirstMillisecond() + 500L);\n        Date d2 = new Date(apr12007.getMiddleMillisecond());\n        Date d3 = new Date(apr12007.getMiddleMillisecond() + 500L);\n        Date d4 = new Date(apr12007.getLastMillisecond());\n     \n        Date end = new Date(apr22007.getLastMillisecond());\n        \n        DateTickUnit unit = new DateTickUnit(DateTickUnit.DAY, 1);\n        axis.setTickUnit(unit);\n\n        // START: check d0 and d1\n        axis.setTickMarkPosition(DateTickMarkPosition.START);\n\n        axis.setRange(d0, end);\n        Date psd = axis.previousStandardDate(d0, unit);\n        Date nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n\n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n\n        // MIDDLE: check d1, d2 and d3\n        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);\n        \n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n        \n        axis.setRange(d2, end);\n        psd = axis.previousStandardDate(d2, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d2.getTime());\n        assertTrue(nsd.getTime() >= d2.getTime());\n\n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n\n        // END: check d3 and d4\n        axis.setTickMarkPosition(DateTickMarkPosition.END);\n        \n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n        \n        axis.setRange(d4, end);\n        psd = axis.previousStandardDate(d4, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d4.getTime());\n        assertTrue(nsd.getTime() >= d4.getTime());\n    }",
        "begin_line": 619,
        "end_line": 686,
        "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 1 day.\n     ",
        "child_ranges": [
            "(line 620,col 9)-(line 620,col 48)",
            "(line 621,col 9)-(line 621,col 43)",
            "(line 622,col 9)-(line 622,col 43)",
            "(line 625,col 9)-(line 625,col 59)",
            "(line 626,col 9)-(line 626,col 66)",
            "(line 627,col 9)-(line 627,col 60)",
            "(line 628,col 9)-(line 628,col 67)",
            "(line 629,col 9)-(line 629,col 58)",
            "(line 631,col 9)-(line 631,col 59)",
            "(line 633,col 9)-(line 633,col 66)",
            "(line 634,col 9)-(line 634,col 31)",
            "(line 637,col 9)-(line 637,col 61)",
            "(line 639,col 9)-(line 639,col 31)",
            "(line 640,col 9)-(line 640,col 55)",
            "(line 641,col 9)-(line 641,col 39)",
            "(line 642,col 9)-(line 642,col 49)",
            "(line 643,col 9)-(line 643,col 50)",
            "(line 645,col 9)-(line 645,col 31)",
            "(line 646,col 9)-(line 646,col 50)",
            "(line 647,col 9)-(line 647,col 34)",
            "(line 648,col 9)-(line 648,col 49)",
            "(line 649,col 9)-(line 649,col 50)",
            "(line 652,col 9)-(line 652,col 62)",
            "(line 654,col 9)-(line 654,col 31)",
            "(line 655,col 9)-(line 655,col 50)",
            "(line 656,col 9)-(line 656,col 34)",
            "(line 657,col 9)-(line 657,col 49)",
            "(line 658,col 9)-(line 658,col 50)",
            "(line 660,col 9)-(line 660,col 31)",
            "(line 661,col 9)-(line 661,col 50)",
            "(line 662,col 9)-(line 662,col 34)",
            "(line 663,col 9)-(line 663,col 49)",
            "(line 664,col 9)-(line 664,col 50)",
            "(line 666,col 9)-(line 666,col 31)",
            "(line 667,col 9)-(line 667,col 50)",
            "(line 668,col 9)-(line 668,col 34)",
            "(line 669,col 9)-(line 669,col 49)",
            "(line 670,col 9)-(line 670,col 50)",
            "(line 673,col 9)-(line 673,col 59)",
            "(line 675,col 9)-(line 675,col 31)",
            "(line 676,col 9)-(line 676,col 50)",
            "(line 677,col 9)-(line 677,col 34)",
            "(line 678,col 9)-(line 678,col 49)",
            "(line 679,col 9)-(line 679,col 50)",
            "(line 681,col 9)-(line 681,col 31)",
            "(line 682,col 9)-(line 682,col 50)",
            "(line 683,col 9)-(line 683,col 34)",
            "(line 684,col 9)-(line 684,col 49)",
            "(line 685,col 9)-(line 685,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateDayB()",
        "snippet": "    public void testPreviousStandardDateDayB() {\n        MyDateAxis axis = new MyDateAxis(\"Day\");\n        Day apr12007 = new Day(1, 4, 2007);\n        Day apr22007 = new Day(2, 4, 2007);\n        \n        // five dates to check...\n        Date d0 = new Date(apr12007.getFirstMillisecond());\n        Date d1 = new Date(apr12007.getFirstMillisecond() + 500L);\n        Date d2 = new Date(apr12007.getMiddleMillisecond());\n        Date d3 = new Date(apr12007.getMiddleMillisecond() + 500L);\n        Date d4 = new Date(apr12007.getLastMillisecond());\n     \n        Date end = new Date(apr22007.getLastMillisecond());\n        \n        DateTickUnit unit = new DateTickUnit(DateTickUnit.DAY, 7);\n        axis.setTickUnit(unit);\n\n        // START: check d0 and d1\n        axis.setTickMarkPosition(DateTickMarkPosition.START);\n\n        axis.setRange(d0, end);\n        Date psd = axis.previousStandardDate(d0, unit);\n        Date nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n\n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n\n        // MIDDLE: check d1, d2 and d3\n        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);\n        \n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n        \n        axis.setRange(d2, end);\n        psd = axis.previousStandardDate(d2, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d2.getTime());\n        assertTrue(nsd.getTime() >= d2.getTime());\n\n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n\n        // END: check d3 and d4\n        axis.setTickMarkPosition(DateTickMarkPosition.END);\n        \n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n        \n        axis.setRange(d4, end);\n        psd = axis.previousStandardDate(d4, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d4.getTime());\n        assertTrue(nsd.getTime() >= d4.getTime());\n    }",
        "begin_line": 692,
        "end_line": 759,
        "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 7 days (just for the sake of having a multiple).\n     ",
        "child_ranges": [
            "(line 693,col 9)-(line 693,col 48)",
            "(line 694,col 9)-(line 694,col 43)",
            "(line 695,col 9)-(line 695,col 43)",
            "(line 698,col 9)-(line 698,col 59)",
            "(line 699,col 9)-(line 699,col 66)",
            "(line 700,col 9)-(line 700,col 60)",
            "(line 701,col 9)-(line 701,col 67)",
            "(line 702,col 9)-(line 702,col 58)",
            "(line 704,col 9)-(line 704,col 59)",
            "(line 706,col 9)-(line 706,col 66)",
            "(line 707,col 9)-(line 707,col 31)",
            "(line 710,col 9)-(line 710,col 61)",
            "(line 712,col 9)-(line 712,col 31)",
            "(line 713,col 9)-(line 713,col 55)",
            "(line 714,col 9)-(line 714,col 39)",
            "(line 715,col 9)-(line 715,col 49)",
            "(line 716,col 9)-(line 716,col 50)",
            "(line 718,col 9)-(line 718,col 31)",
            "(line 719,col 9)-(line 719,col 50)",
            "(line 720,col 9)-(line 720,col 34)",
            "(line 721,col 9)-(line 721,col 49)",
            "(line 722,col 9)-(line 722,col 50)",
            "(line 725,col 9)-(line 725,col 62)",
            "(line 727,col 9)-(line 727,col 31)",
            "(line 728,col 9)-(line 728,col 50)",
            "(line 729,col 9)-(line 729,col 34)",
            "(line 730,col 9)-(line 730,col 49)",
            "(line 731,col 9)-(line 731,col 50)",
            "(line 733,col 9)-(line 733,col 31)",
            "(line 734,col 9)-(line 734,col 50)",
            "(line 735,col 9)-(line 735,col 34)",
            "(line 736,col 9)-(line 736,col 49)",
            "(line 737,col 9)-(line 737,col 50)",
            "(line 739,col 9)-(line 739,col 31)",
            "(line 740,col 9)-(line 740,col 50)",
            "(line 741,col 9)-(line 741,col 34)",
            "(line 742,col 9)-(line 742,col 49)",
            "(line 743,col 9)-(line 743,col 50)",
            "(line 746,col 9)-(line 746,col 59)",
            "(line 748,col 9)-(line 748,col 31)",
            "(line 749,col 9)-(line 749,col 50)",
            "(line 750,col 9)-(line 750,col 34)",
            "(line 751,col 9)-(line 751,col 49)",
            "(line 752,col 9)-(line 752,col 50)",
            "(line 754,col 9)-(line 754,col 31)",
            "(line 755,col 9)-(line 755,col 50)",
            "(line 756,col 9)-(line 756,col 34)",
            "(line 757,col 9)-(line 757,col 49)",
            "(line 758,col 9)-(line 758,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateHourA()",
        "snippet": "    public void testPreviousStandardDateHourA() {\n        MyDateAxis axis = new MyDateAxis(\"Hour\");\n        Hour h0 = new Hour(12, 1, 4, 2007);\n        Hour h1 = new Hour(13, 1, 4, 2007);\n        \n        // five dates to check...\n        Date d0 = new Date(h0.getFirstMillisecond());\n        Date d1 = new Date(h0.getFirstMillisecond() + 500L);\n        Date d2 = new Date(h0.getMiddleMillisecond());\n        Date d3 = new Date(h0.getMiddleMillisecond() + 500L);\n        Date d4 = new Date(h0.getLastMillisecond());\n     \n        Date end = new Date(h1.getLastMillisecond());\n        \n        DateTickUnit unit = new DateTickUnit(DateTickUnit.HOUR, 1);\n        axis.setTickUnit(unit);\n\n        // START: check d0 and d1\n        axis.setTickMarkPosition(DateTickMarkPosition.START);\n\n        axis.setRange(d0, end);\n        Date psd = axis.previousStandardDate(d0, unit);\n        Date nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n\n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n\n        // MIDDLE: check d1, d2 and d3\n        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);\n        \n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n        \n        axis.setRange(d2, end);\n        psd = axis.previousStandardDate(d2, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d2.getTime());\n        assertTrue(nsd.getTime() >= d2.getTime());\n\n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n\n        // END: check d3 and d4\n        axis.setTickMarkPosition(DateTickMarkPosition.END);\n        \n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n        \n        axis.setRange(d4, end);\n        psd = axis.previousStandardDate(d4, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d4.getTime());\n        assertTrue(nsd.getTime() >= d4.getTime());\n    }",
        "begin_line": 765,
        "end_line": 832,
        "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 1 hour.\n     ",
        "child_ranges": [
            "(line 766,col 9)-(line 766,col 49)",
            "(line 767,col 9)-(line 767,col 43)",
            "(line 768,col 9)-(line 768,col 43)",
            "(line 771,col 9)-(line 771,col 53)",
            "(line 772,col 9)-(line 772,col 60)",
            "(line 773,col 9)-(line 773,col 54)",
            "(line 774,col 9)-(line 774,col 61)",
            "(line 775,col 9)-(line 775,col 52)",
            "(line 777,col 9)-(line 777,col 53)",
            "(line 779,col 9)-(line 779,col 67)",
            "(line 780,col 9)-(line 780,col 31)",
            "(line 783,col 9)-(line 783,col 61)",
            "(line 785,col 9)-(line 785,col 31)",
            "(line 786,col 9)-(line 786,col 55)",
            "(line 787,col 9)-(line 787,col 39)",
            "(line 788,col 9)-(line 788,col 49)",
            "(line 789,col 9)-(line 789,col 50)",
            "(line 791,col 9)-(line 791,col 31)",
            "(line 792,col 9)-(line 792,col 50)",
            "(line 793,col 9)-(line 793,col 34)",
            "(line 794,col 9)-(line 794,col 49)",
            "(line 795,col 9)-(line 795,col 50)",
            "(line 798,col 9)-(line 798,col 62)",
            "(line 800,col 9)-(line 800,col 31)",
            "(line 801,col 9)-(line 801,col 50)",
            "(line 802,col 9)-(line 802,col 34)",
            "(line 803,col 9)-(line 803,col 49)",
            "(line 804,col 9)-(line 804,col 50)",
            "(line 806,col 9)-(line 806,col 31)",
            "(line 807,col 9)-(line 807,col 50)",
            "(line 808,col 9)-(line 808,col 34)",
            "(line 809,col 9)-(line 809,col 49)",
            "(line 810,col 9)-(line 810,col 50)",
            "(line 812,col 9)-(line 812,col 31)",
            "(line 813,col 9)-(line 813,col 50)",
            "(line 814,col 9)-(line 814,col 34)",
            "(line 815,col 9)-(line 815,col 49)",
            "(line 816,col 9)-(line 816,col 50)",
            "(line 819,col 9)-(line 819,col 59)",
            "(line 821,col 9)-(line 821,col 31)",
            "(line 822,col 9)-(line 822,col 50)",
            "(line 823,col 9)-(line 823,col 34)",
            "(line 824,col 9)-(line 824,col 49)",
            "(line 825,col 9)-(line 825,col 50)",
            "(line 827,col 9)-(line 827,col 31)",
            "(line 828,col 9)-(line 828,col 50)",
            "(line 829,col 9)-(line 829,col 34)",
            "(line 830,col 9)-(line 830,col 49)",
            "(line 831,col 9)-(line 831,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateHourB()",
        "snippet": "    public void testPreviousStandardDateHourB() {\n        MyDateAxis axis = new MyDateAxis(\"Hour\");\n        Hour h0 = new Hour(12, 1, 4, 2007);\n        Hour h1 = new Hour(13, 1, 4, 2007);\n        \n        // five dates to check...\n        Date d0 = new Date(h0.getFirstMillisecond());\n        Date d1 = new Date(h0.getFirstMillisecond() + 500L);\n        Date d2 = new Date(h0.getMiddleMillisecond());\n        Date d3 = new Date(h0.getMiddleMillisecond() + 500L);\n        Date d4 = new Date(h0.getLastMillisecond());\n     \n        Date end = new Date(h1.getLastMillisecond());\n        \n        DateTickUnit unit = new DateTickUnit(DateTickUnit.HOUR, 6);\n        axis.setTickUnit(unit);\n\n        // START: check d0 and d1\n        axis.setTickMarkPosition(DateTickMarkPosition.START);\n\n        axis.setRange(d0, end);\n        Date psd = axis.previousStandardDate(d0, unit);\n        Date nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n\n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n\n        // MIDDLE: check d1, d2 and d3\n        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);\n        \n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n        \n        axis.setRange(d2, end);\n        psd = axis.previousStandardDate(d2, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d2.getTime());\n        assertTrue(nsd.getTime() >= d2.getTime());\n\n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n\n        // END: check d3 and d4\n        axis.setTickMarkPosition(DateTickMarkPosition.END);\n        \n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n        \n        axis.setRange(d4, end);\n        psd = axis.previousStandardDate(d4, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d4.getTime());\n        assertTrue(nsd.getTime() >= d4.getTime());\n    }",
        "begin_line": 838,
        "end_line": 905,
        "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 6 hours (just for the sake of having a multiple).\n     ",
        "child_ranges": [
            "(line 839,col 9)-(line 839,col 49)",
            "(line 840,col 9)-(line 840,col 43)",
            "(line 841,col 9)-(line 841,col 43)",
            "(line 844,col 9)-(line 844,col 53)",
            "(line 845,col 9)-(line 845,col 60)",
            "(line 846,col 9)-(line 846,col 54)",
            "(line 847,col 9)-(line 847,col 61)",
            "(line 848,col 9)-(line 848,col 52)",
            "(line 850,col 9)-(line 850,col 53)",
            "(line 852,col 9)-(line 852,col 67)",
            "(line 853,col 9)-(line 853,col 31)",
            "(line 856,col 9)-(line 856,col 61)",
            "(line 858,col 9)-(line 858,col 31)",
            "(line 859,col 9)-(line 859,col 55)",
            "(line 860,col 9)-(line 860,col 39)",
            "(line 861,col 9)-(line 861,col 49)",
            "(line 862,col 9)-(line 862,col 50)",
            "(line 864,col 9)-(line 864,col 31)",
            "(line 865,col 9)-(line 865,col 50)",
            "(line 866,col 9)-(line 866,col 34)",
            "(line 867,col 9)-(line 867,col 49)",
            "(line 868,col 9)-(line 868,col 50)",
            "(line 871,col 9)-(line 871,col 62)",
            "(line 873,col 9)-(line 873,col 31)",
            "(line 874,col 9)-(line 874,col 50)",
            "(line 875,col 9)-(line 875,col 34)",
            "(line 876,col 9)-(line 876,col 49)",
            "(line 877,col 9)-(line 877,col 50)",
            "(line 879,col 9)-(line 879,col 31)",
            "(line 880,col 9)-(line 880,col 50)",
            "(line 881,col 9)-(line 881,col 34)",
            "(line 882,col 9)-(line 882,col 49)",
            "(line 883,col 9)-(line 883,col 50)",
            "(line 885,col 9)-(line 885,col 31)",
            "(line 886,col 9)-(line 886,col 50)",
            "(line 887,col 9)-(line 887,col 34)",
            "(line 888,col 9)-(line 888,col 49)",
            "(line 889,col 9)-(line 889,col 50)",
            "(line 892,col 9)-(line 892,col 59)",
            "(line 894,col 9)-(line 894,col 31)",
            "(line 895,col 9)-(line 895,col 50)",
            "(line 896,col 9)-(line 896,col 34)",
            "(line 897,col 9)-(line 897,col 49)",
            "(line 898,col 9)-(line 898,col 50)",
            "(line 900,col 9)-(line 900,col 31)",
            "(line 901,col 9)-(line 901,col 50)",
            "(line 902,col 9)-(line 902,col 34)",
            "(line 903,col 9)-(line 903,col 49)",
            "(line 904,col 9)-(line 904,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateSecondA()",
        "snippet": "    public void testPreviousStandardDateSecondA() {\n        MyDateAxis axis = new MyDateAxis(\"Second\");\n        Second s0 = new Second(58, 31, 12, 1, 4, 2007);\n        Second s1 = new Second(59, 31, 12, 1, 4, 2007);\n        \n        // five dates to check...\n        Date d0 = new Date(s0.getFirstMillisecond());\n        Date d1 = new Date(s0.getFirstMillisecond() + 50L);\n        Date d2 = new Date(s0.getMiddleMillisecond());\n        Date d3 = new Date(s0.getMiddleMillisecond() + 50L);\n        Date d4 = new Date(s0.getLastMillisecond());\n     \n        Date end = new Date(s1.getLastMillisecond());\n        \n        DateTickUnit unit = new DateTickUnit(DateTickUnit.SECOND, 1);\n        axis.setTickUnit(unit);\n\n        // START: check d0 and d1\n        axis.setTickMarkPosition(DateTickMarkPosition.START);\n\n        axis.setRange(d0, end);\n        Date psd = axis.previousStandardDate(d0, unit);\n        Date nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n\n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n\n        // MIDDLE: check d1, d2 and d3\n        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);\n        \n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n        \n        axis.setRange(d2, end);\n        psd = axis.previousStandardDate(d2, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d2.getTime());\n        assertTrue(nsd.getTime() >= d2.getTime());\n\n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n\n        // END: check d3 and d4\n        axis.setTickMarkPosition(DateTickMarkPosition.END);\n        \n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n        \n        axis.setRange(d4, end);\n        psd = axis.previousStandardDate(d4, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d4.getTime());\n        assertTrue(nsd.getTime() >= d4.getTime());\n    }",
        "begin_line": 911,
        "end_line": 978,
        "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 1 second.\n     ",
        "child_ranges": [
            "(line 912,col 9)-(line 912,col 51)",
            "(line 913,col 9)-(line 913,col 55)",
            "(line 914,col 9)-(line 914,col 55)",
            "(line 917,col 9)-(line 917,col 53)",
            "(line 918,col 9)-(line 918,col 59)",
            "(line 919,col 9)-(line 919,col 54)",
            "(line 920,col 9)-(line 920,col 60)",
            "(line 921,col 9)-(line 921,col 52)",
            "(line 923,col 9)-(line 923,col 53)",
            "(line 925,col 9)-(line 925,col 69)",
            "(line 926,col 9)-(line 926,col 31)",
            "(line 929,col 9)-(line 929,col 61)",
            "(line 931,col 9)-(line 931,col 31)",
            "(line 932,col 9)-(line 932,col 55)",
            "(line 933,col 9)-(line 933,col 39)",
            "(line 934,col 9)-(line 934,col 49)",
            "(line 935,col 9)-(line 935,col 50)",
            "(line 937,col 9)-(line 937,col 31)",
            "(line 938,col 9)-(line 938,col 50)",
            "(line 939,col 9)-(line 939,col 34)",
            "(line 940,col 9)-(line 940,col 49)",
            "(line 941,col 9)-(line 941,col 50)",
            "(line 944,col 9)-(line 944,col 62)",
            "(line 946,col 9)-(line 946,col 31)",
            "(line 947,col 9)-(line 947,col 50)",
            "(line 948,col 9)-(line 948,col 34)",
            "(line 949,col 9)-(line 949,col 49)",
            "(line 950,col 9)-(line 950,col 50)",
            "(line 952,col 9)-(line 952,col 31)",
            "(line 953,col 9)-(line 953,col 50)",
            "(line 954,col 9)-(line 954,col 34)",
            "(line 955,col 9)-(line 955,col 49)",
            "(line 956,col 9)-(line 956,col 50)",
            "(line 958,col 9)-(line 958,col 31)",
            "(line 959,col 9)-(line 959,col 50)",
            "(line 960,col 9)-(line 960,col 34)",
            "(line 961,col 9)-(line 961,col 49)",
            "(line 962,col 9)-(line 962,col 50)",
            "(line 965,col 9)-(line 965,col 59)",
            "(line 967,col 9)-(line 967,col 31)",
            "(line 968,col 9)-(line 968,col 50)",
            "(line 969,col 9)-(line 969,col 34)",
            "(line 970,col 9)-(line 970,col 49)",
            "(line 971,col 9)-(line 971,col 50)",
            "(line 973,col 9)-(line 973,col 31)",
            "(line 974,col 9)-(line 974,col 50)",
            "(line 975,col 9)-(line 975,col 34)",
            "(line 976,col 9)-(line 976,col 49)",
            "(line 977,col 9)-(line 977,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateSecondB()",
        "snippet": "    public void testPreviousStandardDateSecondB() {\n        MyDateAxis axis = new MyDateAxis(\"Second\");\n        Second s0 = new Second(58, 31, 12, 1, 4, 2007);\n        Second s1 = new Second(59, 31, 12, 1, 4, 2007);\n        \n        // five dates to check...\n        Date d0 = new Date(s0.getFirstMillisecond());\n        Date d1 = new Date(s0.getFirstMillisecond() + 50L);\n        Date d2 = new Date(s0.getMiddleMillisecond());\n        Date d3 = new Date(s0.getMiddleMillisecond() + 50L);\n        Date d4 = new Date(s0.getLastMillisecond());\n     \n        Date end = new Date(s1.getLastMillisecond());\n        \n        DateTickUnit unit = new DateTickUnit(DateTickUnit.SECOND, 5);\n        axis.setTickUnit(unit);\n\n        // START: check d0 and d1\n        axis.setTickMarkPosition(DateTickMarkPosition.START);\n\n        axis.setRange(d0, end);\n        Date psd = axis.previousStandardDate(d0, unit);\n        Date nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n\n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n\n        // MIDDLE: check d1, d2 and d3\n        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);\n        \n        axis.setRange(d1, end);\n        psd = axis.previousStandardDate(d1, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d1.getTime());\n        assertTrue(nsd.getTime() >= d1.getTime());\n        \n        axis.setRange(d2, end);\n        psd = axis.previousStandardDate(d2, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d2.getTime());\n        assertTrue(nsd.getTime() >= d2.getTime());\n\n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n\n        // END: check d3 and d4\n        axis.setTickMarkPosition(DateTickMarkPosition.END);\n        \n        axis.setRange(d3, end);\n        psd = axis.previousStandardDate(d3, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d3.getTime());\n        assertTrue(nsd.getTime() >= d3.getTime());\n        \n        axis.setRange(d4, end);\n        psd = axis.previousStandardDate(d4, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d4.getTime());\n        assertTrue(nsd.getTime() >= d4.getTime());\n    }",
        "begin_line": 984,
        "end_line": 1051,
        "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 5 seconds (just for the sake of having a multiple).\n     ",
        "child_ranges": [
            "(line 985,col 9)-(line 985,col 51)",
            "(line 986,col 9)-(line 986,col 55)",
            "(line 987,col 9)-(line 987,col 55)",
            "(line 990,col 9)-(line 990,col 53)",
            "(line 991,col 9)-(line 991,col 59)",
            "(line 992,col 9)-(line 992,col 54)",
            "(line 993,col 9)-(line 993,col 60)",
            "(line 994,col 9)-(line 994,col 52)",
            "(line 996,col 9)-(line 996,col 53)",
            "(line 998,col 9)-(line 998,col 69)",
            "(line 999,col 9)-(line 999,col 31)",
            "(line 1002,col 9)-(line 1002,col 61)",
            "(line 1004,col 9)-(line 1004,col 31)",
            "(line 1005,col 9)-(line 1005,col 55)",
            "(line 1006,col 9)-(line 1006,col 39)",
            "(line 1007,col 9)-(line 1007,col 49)",
            "(line 1008,col 9)-(line 1008,col 50)",
            "(line 1010,col 9)-(line 1010,col 31)",
            "(line 1011,col 9)-(line 1011,col 50)",
            "(line 1012,col 9)-(line 1012,col 34)",
            "(line 1013,col 9)-(line 1013,col 49)",
            "(line 1014,col 9)-(line 1014,col 50)",
            "(line 1017,col 9)-(line 1017,col 62)",
            "(line 1019,col 9)-(line 1019,col 31)",
            "(line 1020,col 9)-(line 1020,col 50)",
            "(line 1021,col 9)-(line 1021,col 34)",
            "(line 1022,col 9)-(line 1022,col 49)",
            "(line 1023,col 9)-(line 1023,col 50)",
            "(line 1025,col 9)-(line 1025,col 31)",
            "(line 1026,col 9)-(line 1026,col 50)",
            "(line 1027,col 9)-(line 1027,col 34)",
            "(line 1028,col 9)-(line 1028,col 49)",
            "(line 1029,col 9)-(line 1029,col 50)",
            "(line 1031,col 9)-(line 1031,col 31)",
            "(line 1032,col 9)-(line 1032,col 50)",
            "(line 1033,col 9)-(line 1033,col 34)",
            "(line 1034,col 9)-(line 1034,col 49)",
            "(line 1035,col 9)-(line 1035,col 50)",
            "(line 1038,col 9)-(line 1038,col 59)",
            "(line 1040,col 9)-(line 1040,col 31)",
            "(line 1041,col 9)-(line 1041,col 50)",
            "(line 1042,col 9)-(line 1042,col 34)",
            "(line 1043,col 9)-(line 1043,col 49)",
            "(line 1044,col 9)-(line 1044,col 50)",
            "(line 1046,col 9)-(line 1046,col 31)",
            "(line 1047,col 9)-(line 1047,col 50)",
            "(line 1048,col 9)-(line 1048,col 34)",
            "(line 1049,col 9)-(line 1049,col 49)",
            "(line 1050,col 9)-(line 1050,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateMillisecondA()",
        "snippet": "    public void testPreviousStandardDateMillisecondA() {\n        MyDateAxis axis = new MyDateAxis(\"Millisecond\");\n        Millisecond m0 = new Millisecond(458, 58, 31, 12, 1, 4, 2007);\n        Millisecond m1 = new Millisecond(459, 58, 31, 12, 1, 4, 2007);\n\n        Date d0 = new Date(m0.getFirstMillisecond());\n        Date end = new Date(m1.getLastMillisecond());\n        \n        DateTickUnit unit = new DateTickUnit(DateTickUnit.MILLISECOND, 1);\n        axis.setTickUnit(unit);\n\n        // START: check d0\n        axis.setTickMarkPosition(DateTickMarkPosition.START);\n\n        axis.setRange(d0, end);\n        Date psd = axis.previousStandardDate(d0, unit);\n        Date nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n\n        // MIDDLE: check d0\n        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);\n        \n        axis.setRange(d0, end);\n        psd = axis.previousStandardDate(d0, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n        \n        // END: check d0\n        axis.setTickMarkPosition(DateTickMarkPosition.END);\n        \n        axis.setRange(d0, end);\n        psd = axis.previousStandardDate(d0, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n    }",
        "begin_line": 1057,
        "end_line": 1094,
        "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 1 millisecond.\n     ",
        "child_ranges": [
            "(line 1058,col 9)-(line 1058,col 56)",
            "(line 1059,col 9)-(line 1059,col 70)",
            "(line 1060,col 9)-(line 1060,col 70)",
            "(line 1062,col 9)-(line 1062,col 53)",
            "(line 1063,col 9)-(line 1063,col 53)",
            "(line 1065,col 9)-(line 1065,col 74)",
            "(line 1066,col 9)-(line 1066,col 31)",
            "(line 1069,col 9)-(line 1069,col 61)",
            "(line 1071,col 9)-(line 1071,col 31)",
            "(line 1072,col 9)-(line 1072,col 55)",
            "(line 1073,col 9)-(line 1073,col 39)",
            "(line 1074,col 9)-(line 1074,col 49)",
            "(line 1075,col 9)-(line 1075,col 50)",
            "(line 1078,col 9)-(line 1078,col 62)",
            "(line 1080,col 9)-(line 1080,col 31)",
            "(line 1081,col 9)-(line 1081,col 50)",
            "(line 1082,col 9)-(line 1082,col 34)",
            "(line 1083,col 9)-(line 1083,col 49)",
            "(line 1084,col 9)-(line 1084,col 50)",
            "(line 1087,col 9)-(line 1087,col 59)",
            "(line 1089,col 9)-(line 1089,col 31)",
            "(line 1090,col 9)-(line 1090,col 50)",
            "(line 1091,col 9)-(line 1091,col 34)",
            "(line 1092,col 9)-(line 1092,col 49)",
            "(line 1093,col 9)-(line 1093,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateMillisecondB()",
        "snippet": "    public void testPreviousStandardDateMillisecondB() {\n        MyDateAxis axis = new MyDateAxis(\"Millisecond\");\n        Millisecond m0 = new Millisecond(458, 58, 31, 12, 1, 4, 2007);\n        Millisecond m1 = new Millisecond(459, 58, 31, 12, 1, 4, 2007);\n\n        Date d0 = new Date(m0.getFirstMillisecond());\n        Date end = new Date(m1.getLastMillisecond());\n        \n        DateTickUnit unit = new DateTickUnit(DateTickUnit.MILLISECOND, 10);\n        axis.setTickUnit(unit);\n\n        // START: check d0\n        axis.setTickMarkPosition(DateTickMarkPosition.START);\n\n        axis.setRange(d0, end);\n        Date psd = axis.previousStandardDate(d0, unit);\n        Date nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n\n        // MIDDLE: check d0\n        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);\n        \n        axis.setRange(d0, end);\n        psd = axis.previousStandardDate(d0, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n        \n        // END: check d0\n        axis.setTickMarkPosition(DateTickMarkPosition.END);\n        \n        axis.setRange(d0, end);\n        psd = axis.previousStandardDate(d0, unit);\n        nsd = unit.addToDate(psd);\n        assertTrue(psd.getTime() < d0.getTime());\n        assertTrue(nsd.getTime() >= d0.getTime());\n    }",
        "begin_line": 1100,
        "end_line": 1137,
        "comment": "\n     * A basic check for the testPreviousStandardDate() method when the\n     * tick unit is 10 milliseconds (just for the sake of having a multiple).\n     ",
        "child_ranges": [
            "(line 1101,col 9)-(line 1101,col 56)",
            "(line 1102,col 9)-(line 1102,col 70)",
            "(line 1103,col 9)-(line 1103,col 70)",
            "(line 1105,col 9)-(line 1105,col 53)",
            "(line 1106,col 9)-(line 1106,col 53)",
            "(line 1108,col 9)-(line 1108,col 75)",
            "(line 1109,col 9)-(line 1109,col 31)",
            "(line 1112,col 9)-(line 1112,col 61)",
            "(line 1114,col 9)-(line 1114,col 31)",
            "(line 1115,col 9)-(line 1115,col 55)",
            "(line 1116,col 9)-(line 1116,col 39)",
            "(line 1117,col 9)-(line 1117,col 49)",
            "(line 1118,col 9)-(line 1118,col 50)",
            "(line 1121,col 9)-(line 1121,col 62)",
            "(line 1123,col 9)-(line 1123,col 31)",
            "(line 1124,col 9)-(line 1124,col 50)",
            "(line 1125,col 9)-(line 1125,col 34)",
            "(line 1126,col 9)-(line 1126,col 49)",
            "(line 1127,col 9)-(line 1127,col 50)",
            "(line 1130,col 9)-(line 1130,col 59)",
            "(line 1132,col 9)-(line 1132,col 31)",
            "(line 1133,col 9)-(line 1133,col 50)",
            "(line 1134,col 9)-(line 1134,col 34)",
            "(line 1135,col 9)-(line 1135,col 49)",
            "(line 1136,col 9)-(line 1136,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisPackageTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.chart.axis\");\n        suite.addTestSuite(AxisLocationTests.class);\n        suite.addTestSuite(AxisSpaceTests.class);\n        suite.addTestSuite(AxisTests.class);\n        suite.addTestSuite(CategoryAnchorTests.class);\n        suite.addTestSuite(CategoryAxisTests.class);\n        suite.addTestSuite(CategoryAxis3DTests.class);\n        suite.addTestSuite(CategoryLabelPositionTests.class);\n        suite.addTestSuite(CategoryLabelPositionsTests.class);\n        suite.addTestSuite(CategoryLabelWidthTypeTests.class);\n        suite.addTestSuite(CategoryTickTests.class);\n        suite.addTestSuite(CyclicNumberAxisTests.class);\n        suite.addTestSuite(DateAxisTests.class);\n        suite.addTestSuite(DateTickTests.class);\n        suite.addTestSuite(DateTickMarkPositionTests.class);\n        suite.addTestSuite(DateTickUnitTests.class);\n        suite.addTestSuite(ExtendedCategoryAxisTests.class);\n        suite.addTestSuite(LogAxisTests.class);\n        suite.addTestSuite(LogarithmicAxisTests.class);\n        suite.addTestSuite(MarkerAxisBandTests.class);\n        suite.addTestSuite(MonthDateFormatTests.class);\n        suite.addTestSuite(NumberAxisTests.class);\n        suite.addTestSuite(NumberAxis3DTests.class);\n        suite.addTestSuite(NumberTickUnitTests.class);\n        suite.addTestSuite(PeriodAxisTests.class);\n        suite.addTestSuite(PeriodAxisLabelInfoTests.class);\n        suite.addTestSuite(QuarterDateFormatTests.class);\n        suite.addTestSuite(SegmentedTimelineTests.class);\n        suite.addTestSuite(SegmentedTimelineTests2.class);\n        suite.addTestSuite(StandardTickUnitSourceTests.class);\n        suite.addTestSuite(SubCategoryAxisTests.class);\n        suite.addTestSuite(SymbolAxisTests.class);\n        suite.addTestSuite(TickUnitsTests.class);\n        suite.addTestSuite(ValueAxisTests.class);\n        return suite;\n    }",
        "begin_line": 66,
        "end_line": 102,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 64)",
            "(line 68,col 9)-(line 68,col 52)",
            "(line 69,col 9)-(line 69,col 49)",
            "(line 70,col 9)-(line 70,col 44)",
            "(line 71,col 9)-(line 71,col 54)",
            "(line 72,col 9)-(line 72,col 52)",
            "(line 73,col 9)-(line 73,col 54)",
            "(line 74,col 9)-(line 74,col 61)",
            "(line 75,col 9)-(line 75,col 62)",
            "(line 76,col 9)-(line 76,col 62)",
            "(line 77,col 9)-(line 77,col 52)",
            "(line 78,col 9)-(line 78,col 56)",
            "(line 79,col 9)-(line 79,col 48)",
            "(line 80,col 9)-(line 80,col 48)",
            "(line 81,col 9)-(line 81,col 60)",
            "(line 82,col 9)-(line 82,col 52)",
            "(line 83,col 9)-(line 83,col 60)",
            "(line 84,col 9)-(line 84,col 47)",
            "(line 85,col 9)-(line 85,col 55)",
            "(line 86,col 9)-(line 86,col 54)",
            "(line 87,col 9)-(line 87,col 55)",
            "(line 88,col 9)-(line 88,col 50)",
            "(line 89,col 9)-(line 89,col 52)",
            "(line 90,col 9)-(line 90,col 54)",
            "(line 91,col 9)-(line 91,col 50)",
            "(line 92,col 9)-(line 92,col 59)",
            "(line 93,col 9)-(line 93,col 57)",
            "(line 94,col 9)-(line 94,col 57)",
            "(line 95,col 9)-(line 95,col 58)",
            "(line 96,col 9)-(line 96,col 62)",
            "(line 97,col 9)-(line 97,col 55)",
            "(line 98,col 9)-(line 98,col 50)",
            "(line 99,col 9)-(line 99,col 49)",
            "(line 100,col 9)-(line 100,col 49)",
            "(line 101,col 9)-(line 101,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisPackageTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisPackageTests.AxisPackageTests(java.lang.String)",
        "snippet": "    public AxisPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the suite name.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.AxisPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/AxisPackageTests.java",
        "signature": "org.jfree.chart.axis.junit.AxisPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DateTickTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickTests.DateTickTests(java.lang.String)",
        "snippet": "    public DateTickTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        Date d1 = new Date(0L);\n        Date d2 = new Date(1L);\n        String l1 = \"Label 1\";\n        String l2 = \"Label 2\";\n        TextAnchor ta1 = TextAnchor.CENTER;\n        TextAnchor ta2 = TextAnchor.BASELINE_LEFT;\n        \n        DateTick t1 = new DateTick(d1, l1, ta1, ta1, Math.PI / 2.0);\n        DateTick t2 = new DateTick(d1, l1, ta1, ta1, Math.PI / 2.0);\n        assertTrue(t1.equals(t2));\n        \n        t1 = new DateTick(d2, l1, ta1, ta1, Math.PI / 2.0);\n        assertFalse(t1.equals(t2));\n        t2 = new DateTick(d2, l1, ta1, ta1, Math.PI / 2.0);\n        assertTrue(t1.equals(t2));\n\n        t1 = new DateTick(d1, l2, ta1, ta1, Math.PI / 2.0);\n        assertFalse(t1.equals(t2));\n        t2 = new DateTick(d1, l2, ta1, ta1, Math.PI / 2.0);\n        assertTrue(t1.equals(t2));\n\n        t1 = new DateTick(d1, l1, ta2, ta1, Math.PI / 2.0);\n        assertFalse(t1.equals(t2));\n        t2 = new DateTick(d1, l1, ta2, ta1, Math.PI / 2.0);\n        assertTrue(t1.equals(t2));\n\n        t1 = new DateTick(d1, l1, ta1, ta2, Math.PI / 2.0);\n        assertFalse(t1.equals(t2));\n        t2 = new DateTick(d1, l1, ta1, ta2, Math.PI / 2.0);\n        assertTrue(t1.equals(t2));\n\n        t1 = new DateTick(d1, l1, ta1, ta1, Math.PI / 3.0);\n        assertFalse(t1.equals(t2));\n        t2 = new DateTick(d1, l1, ta1, ta1, Math.PI / 3.0);\n        assertTrue(t1.equals(t2));\n        \n    }",
        "begin_line": 85,
        "end_line": 123,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 31)",
            "(line 88,col 9)-(line 88,col 31)",
            "(line 89,col 9)-(line 89,col 30)",
            "(line 90,col 9)-(line 90,col 30)",
            "(line 91,col 9)-(line 91,col 43)",
            "(line 92,col 9)-(line 92,col 50)",
            "(line 94,col 9)-(line 94,col 68)",
            "(line 95,col 9)-(line 95,col 68)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 98,col 9)-(line 98,col 59)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 100,col 59)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 103,col 9)-(line 103,col 59)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 105,col 59)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 108,col 9)-(line 108,col 59)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 110,col 59)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 113,col 9)-(line 113,col 59)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 59)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 118,col 9)-(line 118,col 59)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 120,col 59)",
            "(line 121,col 9)-(line 121,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        Date d1 = new Date(0L);\n        String l1 = \"Label 1\";\n        TextAnchor ta1 = TextAnchor.CENTER;\n        \n        DateTick t1 = new DateTick(d1, l1, ta1, ta1, Math.PI / 2.0);\n        DateTick t2 = new DateTick(d1, l1, ta1, ta1, Math.PI / 2.0);\n        assertTrue(t1.equals(t2));\n        int h1 = t1.hashCode();\n        int h2 = t2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 128,
        "end_line": 139,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 31)",
            "(line 130,col 9)-(line 130,col 30)",
            "(line 131,col 9)-(line 131,col 43)",
            "(line 133,col 9)-(line 133,col 68)",
            "(line 134,col 9)-(line 134,col 68)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 136,col 9)-(line 136,col 31)",
            "(line 137,col 9)-(line 137,col 31)",
            "(line 138,col 9)-(line 138,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DateTick t1 = new DateTick(\n            new Date(0L), \"Label\", TextAnchor.CENTER, TextAnchor.CENTER, 10.0\n        );\n        DateTick t2 = null;\n        try {\n            t2 = (DateTick) t1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(t1 != t2);\n        assertTrue(t1.getClass() == t2.getClass());\n        assertTrue(t1.equals(t2));\n    }",
        "begin_line": 144,
        "end_line": 158,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 147,col 10)",
            "(line 148,col 9)-(line 148,col 27)",
            "(line 149,col 9)-(line 154,col 9)",
            "(line 155,col 9)-(line 155,col 29)",
            "(line 156,col 9)-(line 156,col 51)",
            "(line 157,col 9)-(line 157,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.DateTickTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/DateTickTests.java",
        "signature": "org.jfree.chart.axis.junit.DateTickTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DateTick t1 = new DateTick(\n            new Date(0L), \"Label\", TextAnchor.CENTER, TextAnchor.CENTER, 10.0\n        );\n        DateTick t2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(t1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            t2 = (DateTick) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(t1, t2);\n\n    }",
        "begin_line": 163,
        "end_line": 187,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 165,col 9)-(line 167,col 10)",
            "(line 168,col 9)-(line 168,col 27)",
            "(line 170,col 9)-(line 184,col 9)",
            "(line 185,col 9)-(line 185,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LogAxisTests.class);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.LogAxisTests(java.lang.String)",
        "snippet": "    public LogAxisTests(String name) {\n        super(name);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LogAxis a1 = new LogAxis(\"Test\");\n        LogAxis a2 = null;\n        try {\n            a2 = (LogAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 92,
        "end_line": 104,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 41)",
            "(line 94,col 9)-(line 94,col 26)",
            "(line 95,col 9)-(line 100,col 9)",
            "(line 101,col 9)-(line 101,col 29)",
            "(line 102,col 9)-(line 102,col 51)",
            "(line 103,col 9)-(line 103,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testEquals()",
        "snippet": "    public void testEquals() {}",
        "begin_line": 109,
        "end_line": 109,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        LogAxis a1 = new LogAxis(\"Test\");\n        LogAxis a2 = new LogAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 136,
        "end_line": 143,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 41)",
            "(line 138,col 9)-(line 138,col 41)",
            "(line 139,col 9)-(line 139,col 34)",
            "(line 140,col 9)-(line 140,col 31)",
            "(line 141,col 9)-(line 141,col 31)",
            "(line 142,col 9)-(line 142,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testTranslateJava2DToValue()",
        "snippet": "    public void testTranslateJava2DToValue() {\n        LogAxis axis = new LogAxis();\n        axis.setRange(50.0, 100.0); \n        Rectangle2D dataArea = new Rectangle2D.Double(10.0, 50.0, 400.0, 300.0);\n        double y1 = axis.java2DToValue(75.0, dataArea, RectangleEdge.LEFT);  \n        assertEquals(94.3874312681693, y1, EPSILON); \n        double y2 = axis.java2DToValue(75.0, dataArea, RectangleEdge.RIGHT);   \n        assertEquals(94.3874312681693, y2, EPSILON); \n        double x1 = axis.java2DToValue(75.0, dataArea, RectangleEdge.TOP);   \n        assertEquals(55.961246381405, x1, EPSILON); \n        double x2 = axis.java2DToValue(75.0, dataArea, RectangleEdge.BOTTOM);   \n        assertEquals(55.961246381405, x2, EPSILON); \n        axis.setInverted(true);\n        double y3 = axis.java2DToValue(75.0, dataArea, RectangleEdge.LEFT);  \n        assertEquals(52.9731547179647, y3, EPSILON); \n        double y4 = axis.java2DToValue(75.0, dataArea, RectangleEdge.RIGHT);   \n        assertEquals(52.9731547179647, y4, EPSILON); \n        double x3 = axis.java2DToValue(75.0, dataArea, RectangleEdge.TOP);   \n        assertEquals(89.3475453695651, x3, EPSILON); \n        double x4 = axis.java2DToValue(75.0, dataArea, RectangleEdge.BOTTOM);   \n        assertEquals(89.3475453695651, x4, EPSILON); \n    }",
        "begin_line": 150,
        "end_line": 171,
        "comment": "\n     * Test the translation of Java2D values to data values.\n     ",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 37)",
            "(line 152,col 9)-(line 152,col 35)",
            "(line 153,col 9)-(line 153,col 80)",
            "(line 154,col 9)-(line 154,col 75)",
            "(line 155,col 9)-(line 155,col 52)",
            "(line 156,col 9)-(line 156,col 76)",
            "(line 157,col 9)-(line 157,col 52)",
            "(line 158,col 9)-(line 158,col 74)",
            "(line 159,col 9)-(line 159,col 51)",
            "(line 160,col 9)-(line 160,col 77)",
            "(line 161,col 9)-(line 161,col 51)",
            "(line 162,col 9)-(line 162,col 31)",
            "(line 163,col 9)-(line 163,col 75)",
            "(line 164,col 9)-(line 164,col 52)",
            "(line 165,col 9)-(line 165,col 76)",
            "(line 166,col 9)-(line 166,col 52)",
            "(line 167,col 9)-(line 167,col 74)",
            "(line 168,col 9)-(line 168,col 52)",
            "(line 169,col 9)-(line 169,col 77)",
            "(line 170,col 9)-(line 170,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        LogAxis a1 = new LogAxis(\"Test Axis\");\n        LogAxis a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            a2 = (LogAxis) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 176,
        "end_line": 197,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 46)",
            "(line 179,col 9)-(line 179,col 26)",
            "(line 181,col 9)-(line 194,col 9)",
            "(line 195,col 9)-(line 195,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testAutoRange1()",
        "snippet": "    public void testAutoRange1() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.setValue(100.0, \"Row 1\", \"Column 1\");\n        dataset.setValue(200.0, \"Row 1\", \"Column 2\");\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test\", \n            \"Categories\",\n            \"Value\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false, \n            false,\n            false\n        );\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(0.0, axis.getLowerBound(), EPSILON);    \n        assertEquals(2.6066426411261268E7, axis.getUpperBound(), EPSILON); \n    }",
        "begin_line": 203,
        "end_line": 222,
        "comment": "\n     * A simple test for the auto-range calculation looking at a\n     * LogAxis used as the range axis for a CategoryPlot.\n     ",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 70)",
            "(line 205,col 9)-(line 205,col 53)",
            "(line 206,col 9)-(line 206,col 53)",
            "(line 207,col 9)-(line 216,col 10)",
            "(line 217,col 9)-(line 217,col 59)",
            "(line 218,col 9)-(line 218,col 45)",
            "(line 219,col 9)-(line 219,col 32)",
            "(line 220,col 9)-(line 220,col 57)",
            "(line 221,col 9)-(line 221,col 74)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testAutoRange3()",
        "snippet": "    public void testAutoRange3() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.setValue(100.0, \"Row 1\", \"Column 1\");\n        dataset.setValue(200.0, \"Row 1\", \"Column 2\");\n        JFreeChart chart = ChartFactory.createLineChart(\"Test\", \"Categories\",\n                \"Value\", dataset, PlotOrientation.VERTICAL, false, false,\n                false);\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(96.59363289248458, axis.getLowerBound(), EPSILON);    \n        assertEquals(207.0529847682752, axis.getUpperBound(), EPSILON);    \n        \n        // now replacing the dataset should update the axis range...\n        DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();\n        dataset2.setValue(900.0, \"Row 1\", \"Column 1\");\n        dataset2.setValue(1000.0, \"Row 1\", \"Column 2\");\n        plot.setDataset(dataset2);\n        assertEquals(895.2712433374774, axis.getLowerBound(), EPSILON);    \n        assertEquals(1005.2819262292991, axis.getUpperBound(), EPSILON);    \n    }",
        "begin_line": 229,
        "end_line": 249,
        "comment": "\n     * A simple test for the auto-range calculation looking at a\n     * NumberAxis used as the range axis for a CategoryPlot.  In this\n     * case, the original dataset is replaced with a new dataset.\n     ",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 70)",
            "(line 231,col 9)-(line 231,col 53)",
            "(line 232,col 9)-(line 232,col 53)",
            "(line 233,col 9)-(line 235,col 23)",
            "(line 236,col 9)-(line 236,col 59)",
            "(line 237,col 9)-(line 237,col 45)",
            "(line 238,col 9)-(line 238,col 32)",
            "(line 239,col 9)-(line 239,col 71)",
            "(line 240,col 9)-(line 240,col 71)",
            "(line 243,col 9)-(line 243,col 71)",
            "(line 244,col 9)-(line 244,col 54)",
            "(line 245,col 9)-(line 245,col 55)",
            "(line 246,col 9)-(line 246,col 34)",
            "(line 247,col 9)-(line 247,col 71)",
            "(line 248,col 9)-(line 248,col 72)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testXYAutoRange1()",
        "snippet": "    public void testXYAutoRange1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\", \n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false, \n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);    \n        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);    \n    }",
        "begin_line": 255,
        "end_line": 277,
        "comment": "\n     * Checks that the auto-range for the domain axis on an XYPlot is\n     * working as expected.\n     ",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 51)",
            "(line 257,col 9)-(line 257,col 29)",
            "(line 258,col 9)-(line 258,col 29)",
            "(line 259,col 9)-(line 259,col 29)",
            "(line 260,col 9)-(line 260,col 62)",
            "(line 261,col 9)-(line 261,col 34)",
            "(line 262,col 9)-(line 271,col 10)",
            "(line 272,col 9)-(line 272,col 47)",
            "(line 273,col 9)-(line 273,col 45)",
            "(line 274,col 9)-(line 274,col 32)",
            "(line 275,col 9)-(line 275,col 72)",
            "(line 276,col 9)-(line 276,col 72)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testXYAutoRange2()",
        "snippet": "    public void testXYAutoRange2() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\", \n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false, \n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);    \n        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);    \n    }",
        "begin_line": 283,
        "end_line": 305,
        "comment": "\n     * Checks that the auto-range for the range axis on an XYPlot is\n     * working as expected.\n     ",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 51)",
            "(line 285,col 9)-(line 285,col 29)",
            "(line 286,col 9)-(line 286,col 29)",
            "(line 287,col 9)-(line 287,col 29)",
            "(line 288,col 9)-(line 288,col 62)",
            "(line 289,col 9)-(line 289,col 34)",
            "(line 290,col 9)-(line 299,col 10)",
            "(line 300,col 9)-(line 300,col 47)",
            "(line 301,col 9)-(line 301,col 45)",
            "(line 302,col 9)-(line 302,col 32)",
            "(line 303,col 9)-(line 303,col 72)",
            "(line 304,col 9)-(line 304,col 72)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testSetLowerBound()",
        "snippet": "    public void testSetLowerBound() {\n        LogAxis axis = new LogAxis(\"X\");\n        axis.setRange(0.0, 10.0);\n        axis.setLowerBound(5.0);\n        assertEquals(5.0, axis.getLowerBound(), EPSILON);\n        axis.setLowerBound(10.0);\n        assertEquals(10.0, axis.getLowerBound(), EPSILON);\n        assertEquals(11.0, axis.getUpperBound(), EPSILON);\n    }",
        "begin_line": 310,
        "end_line": 318,
        "comment": "\n     * Some checks for the setLowerBound() method.\n     ",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 40)",
            "(line 312,col 9)-(line 312,col 33)",
            "(line 313,col 9)-(line 313,col 32)",
            "(line 314,col 9)-(line 314,col 57)",
            "(line 315,col 9)-(line 315,col 33)",
            "(line 316,col 9)-(line 316,col 58)",
            "(line 317,col 9)-(line 317,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testTickMarksVisibleDefault()",
        "snippet": "    public void testTickMarksVisibleDefault() {\n        LogAxis axis = new LogAxis(\"Log Axis\");\n        assertTrue(axis.isTickMarksVisible());\n    }",
        "begin_line": 323,
        "end_line": 326,
        "comment": "\n     * Checks the default value for the tickMarksVisible flag.\n     ",
        "child_ranges": [
            "(line 324,col 9)-(line 324,col 47)",
            "(line 325,col 9)-(line 325,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.QuarterDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/QuarterDateFormatTests.java",
        "signature": "org.jfree.chart.axis.junit.QuarterDateFormatTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(QuarterDateFormatTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.QuarterDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/QuarterDateFormatTests.java",
        "signature": "org.jfree.chart.axis.junit.QuarterDateFormatTests.QuarterDateFormatTests(java.lang.String)",
        "snippet": "    public QuarterDateFormatTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.QuarterDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/QuarterDateFormatTests.java",
        "signature": "org.jfree.chart.axis.junit.QuarterDateFormatTests.testEquals()",
        "snippet": "    public void testEquals() {\n        QuarterDateFormat qf1 = new QuarterDateFormat(TimeZone.getTimeZone(\n                \"GMT\"), new String[] {\"1\", \"2\", \"3\", \"4\"});\n        QuarterDateFormat qf2 = new QuarterDateFormat(TimeZone.getTimeZone(\n                \"GMT\"), new String[] {\"1\", \"2\", \"3\", \"4\"});\n        assertTrue(qf1.equals(qf2));\n        assertTrue(qf2.equals(qf1));\n        \n        qf1 = new QuarterDateFormat(TimeZone.getTimeZone(\"PST\"), \n                new String[] {\"1\", \"2\", \"3\", \"4\"});\n        assertFalse(qf1.equals(qf2));\n        qf2 = new QuarterDateFormat(TimeZone.getTimeZone(\"PST\"), \n                new String[] {\"1\", \"2\", \"3\", \"4\"});\n        assertTrue(qf1.equals(qf2));\n        \n        qf1 = new QuarterDateFormat(TimeZone.getTimeZone(\"PST\"), \n                new String[] {\"A\", \"2\", \"3\", \"4\"});\n        assertFalse(qf1.equals(qf2));\n        qf2 = new QuarterDateFormat(TimeZone.getTimeZone(\"PST\"), \n                new String[] {\"A\", \"2\", \"3\", \"4\"});\n        assertTrue(qf1.equals(qf2));\n\n        qf1 = new QuarterDateFormat(TimeZone.getTimeZone(\"PST\"), \n                new String[] {\"A\", \"2\", \"3\", \"4\"}, true);\n        assertFalse(qf1.equals(qf2));\n        qf2 = new QuarterDateFormat(TimeZone.getTimeZone(\"PST\"), \n                new String[] {\"A\", \"2\", \"3\", \"4\"}, true);\n        assertTrue(qf1.equals(qf2));\n    }",
        "begin_line": 84,
        "end_line": 112,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 86,col 59)",
            "(line 87,col 9)-(line 88,col 59)",
            "(line 89,col 9)-(line 89,col 36)",
            "(line 90,col 9)-(line 90,col 36)",
            "(line 92,col 9)-(line 93,col 51)",
            "(line 94,col 9)-(line 94,col 37)",
            "(line 95,col 9)-(line 96,col 51)",
            "(line 97,col 9)-(line 97,col 36)",
            "(line 99,col 9)-(line 100,col 51)",
            "(line 101,col 9)-(line 101,col 37)",
            "(line 102,col 9)-(line 103,col 51)",
            "(line 104,col 9)-(line 104,col 36)",
            "(line 106,col 9)-(line 107,col 57)",
            "(line 108,col 9)-(line 108,col 37)",
            "(line 109,col 9)-(line 110,col 57)",
            "(line 111,col 9)-(line 111,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.QuarterDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/QuarterDateFormatTests.java",
        "signature": "org.jfree.chart.axis.junit.QuarterDateFormatTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        QuarterDateFormat qf1 = new QuarterDateFormat(TimeZone.getTimeZone(\n                \"GMT\"), new String[] {\"1\", \"2\", \"3\", \"4\"});\n        QuarterDateFormat qf2 = new QuarterDateFormat(TimeZone.getTimeZone(\n                \"GMT\"), new String[] {\"1\", \"2\", \"3\", \"4\"});\n        assertTrue(qf1.equals(qf2));\n        int h1 = qf1.hashCode();\n        int h2 = qf2.hashCode();\n        assertEquals(h1, h2);\n    }    ",
        "begin_line": 117,
        "end_line": 126,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 119,col 59)",
            "(line 120,col 9)-(line 121,col 59)",
            "(line 122,col 9)-(line 122,col 36)",
            "(line 123,col 9)-(line 123,col 32)",
            "(line 124,col 9)-(line 124,col 32)",
            "(line 125,col 9)-(line 125,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.QuarterDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/QuarterDateFormatTests.java",
        "signature": "org.jfree.chart.axis.junit.QuarterDateFormatTests.testCloning()",
        "snippet": "    public void testCloning() {\n        QuarterDateFormat qf1 = new QuarterDateFormat(TimeZone.getTimeZone(\n                \"GMT\"), new String[] {\"1\", \"2\", \"3\", \"4\"});\n        QuarterDateFormat qf2 = null;\n        qf2 = (QuarterDateFormat) qf1.clone();\n        assertTrue(qf1 != qf2);\n        assertTrue(qf1.getClass() == qf2.getClass());\n        assertTrue(qf1.equals(qf2));\n    }",
        "begin_line": 131,
        "end_line": 139,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 133,col 59)",
            "(line 134,col 9)-(line 134,col 37)",
            "(line 135,col 9)-(line 135,col 46)",
            "(line 136,col 9)-(line 136,col 31)",
            "(line 137,col 9)-(line 137,col 53)",
            "(line 138,col 9)-(line 138,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.QuarterDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/QuarterDateFormatTests.java",
        "signature": "org.jfree.chart.axis.junit.QuarterDateFormatTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        QuarterDateFormat qf1 = new QuarterDateFormat(TimeZone.getTimeZone(\n                \"GMT\"), new String[] {\"1\", \"2\", \"3\", \"4\"});\n        QuarterDateFormat qf2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(qf1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            qf2 = (QuarterDateFormat) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertTrue(qf1.equals(qf2));\n    }",
        "begin_line": 144,
        "end_line": 163,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 146,col 59)",
            "(line 147,col 9)-(line 147,col 37)",
            "(line 148,col 9)-(line 161,col 9)",
            "(line 162,col 9)-(line 162,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxis3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxis3DTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxis3DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(NumberAxis3DTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxis3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxis3DTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxis3DTests.NumberAxis3DTests(java.lang.String)",
        "snippet": "    public NumberAxis3DTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxis3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxis3DTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxis3DTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        NumberAxis3D a1 = new NumberAxis3D(\"Test Axis\");\n        NumberAxis3D a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (NumberAxis3D) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 82,
        "end_line": 104,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 56)",
            "(line 85,col 9)-(line 85,col 31)",
            "(line 87,col 9)-(line 101,col 9)",
            "(line 102,col 9)-(line 102,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(SegmentedTimelineTests.class);\n    }",
        "begin_line": 171,
        "end_line": 173,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.SegmentedTimelineTests(java.lang.String)",
        "snippet": "    public SegmentedTimelineTests(String name) {\n        super(name);\n    }",
        "begin_line": 180,
        "end_line": 182,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        // setup our test timelines\n        //\n        // Legend for comments below:\n        // <spaces> = Segments included in the final timeline\n        // EE       = Excluded segments via timeline rules\n        // xx       = Exception segments inherited from base timeline exclusions\n\n        // 1-ms test timeline using 5 included and 2 excluded segments.\n        //\n        // timeline start time = 0\n        //   |\n        //   v\n        //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 ..\n        // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+..\n        // |  |  |  |  |  |EE|EE|  |  |  |  |  |EE|EE|  |  |  |  |  |  |EE|EE|    <-- msTimeline\n        // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+..\n        //  \\_________  ________/            \\_/\n        //            \\/                      |\n        //       segment group         segment size = 1 ms\n        //\n        this.msTimeline = new SegmentedTimeline(1, 5, 2);\n        this.msTimeline.setStartTime(0);\n\n        // 4-ms test base timeline for ms2Timeline using 1 included and 1\n        // excluded segments\n        //\n        // timeline start time = 0\n        //   |\n        //   v\n        //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 ...\n        // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+...\n        // |  |  |  |  |EE|EE|EE|EE|  |  |  |  |EE|EE|EE|EE|  |  |  |  |    <-- ms2BaseTimeline\n        // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+...\n        //  \\__________  _________/            \\____  _____/\n        //             \\/                           \\/\n        //        segment group              segment size = 4 ms\n        //\n        this.ms2BaseTimeline = new SegmentedTimeline(4, 1, 1);\n        this.ms2BaseTimeline.setStartTime(0);\n\n        // 1-ms test timeline (with a baseTimeline) using 2 included and 2 \n        // excluded segments centered inside each base segment\n        //\n        // The ms2Timeline without a base would look like this:\n        //\n        //    timeline start time = 1\n        //      |\n        //      v\n        //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 ...\n        // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+...\n        // |EE|  |  |EE|EE|  |  |EE|EE|  |  |EE|EE|  |  |EE|EE|  |  |EE|    <-- ms2Timeline\n        // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+...\n        //    \\____  _____/            \\_/\n        //         \\/                   |\n        //    segment group      segment size = 1 ms\n        //\n        // With the base timeline some originally included segments are now \n        // removed (see \"xx\" below):\n        //\n        //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 ...\n        // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+...\n        // |EE|  |  |EE|EE|xx|xx|EE|EE|  |  |EE|EE|xx|xx|EE|EE|  |  |EE|    <-- ms2Timeline\n        // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+...\n        // |  |  |  |  |EE|EE|EE|EE|  |  |  |  |EE|EE|EE|EE|  |  |  |  |    <-- ms2BaseTimeline\n        // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+...\n        //\n        this.ms2Timeline = new SegmentedTimeline(1, 2, 2);\n        this.ms2Timeline.setStartTime(1);\n        this.ms2Timeline.setBaseTimeline(this.ms2BaseTimeline);\n\n        // test monday though friday timeline\n        this.mondayFridayTimeline \n                = SegmentedTimeline.newMondayThroughFridayTimeline();\n\n        // test 9am-4pm Monday through Friday timeline\n        this.fifteenMinTimeline \n                = SegmentedTimeline.newFifteenMinuteTimeline();\n\n        // find first Monday after 2001-01-01\n        Calendar cal = new GregorianCalendar(\n                SegmentedTimeline.NO_DST_TIME_ZONE);\n        cal.set(2001, 0, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        while (cal.get(Calendar.DAY_OF_WEEK) != Calendar.MONDAY) {\n            cal.add(Calendar.DATE, 1);\n        }\n        this.monday = (Calendar) cal.clone();\n\n        // calculate 9am on the first Monday after 2001-01-01\n        cal.add(Calendar.HOUR, 9);\n        this.monday9am = (Calendar) cal.clone();\n    }",
        "begin_line": 190,
        "end_line": 282,
        "comment": "\n     * Sets up the fixture, for example, open a network connection.\n     * This method is called before a test is executed.\n     * \n     * @throws Exception if there is a problem.\n     ",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 57)",
            "(line 212,col 9)-(line 212,col 40)",
            "(line 228,col 9)-(line 228,col 62)",
            "(line 229,col 9)-(line 229,col 45)",
            "(line 257,col 9)-(line 257,col 58)",
            "(line 258,col 9)-(line 258,col 41)",
            "(line 259,col 9)-(line 259,col 63)",
            "(line 262,col 9)-(line 263,col 69)",
            "(line 266,col 9)-(line 267,col 63)",
            "(line 270,col 9)-(line 271,col 52)",
            "(line 272,col 9)-(line 272,col 37)",
            "(line 273,col 9)-(line 273,col 41)",
            "(line 274,col 9)-(line 276,col 9)",
            "(line 277,col 9)-(line 277,col 45)",
            "(line 280,col 9)-(line 280,col 34)",
            "(line 281,col 9)-(line 281,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        // does nothing\n    }",
        "begin_line": 290,
        "end_line": 292,
        "comment": "\n     * Tears down the fixture, for example, close a network connection.\n     * This method is called after a test is executed.\n     * \n     * @throws Exception if there is a problem.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMsSegmentedTimeline()",
        "snippet": "    public void testMsSegmentedTimeline() {\n        // verify attributes set during object construction\n        assertEquals(1, this.msTimeline.getSegmentSize());\n        assertEquals(0, this.msTimeline.getStartTime());\n        assertEquals(5, this.msTimeline.getSegmentsIncluded());\n        assertEquals(2, this.msTimeline.getSegmentsExcluded());\n    }",
        "begin_line": 302,
        "end_line": 308,
        "comment": "\n     * Tests that the new method that created the msTimeline segmented\n     * timeline did so correctly.\n     ",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 58)",
            "(line 305,col 9)-(line 305,col 56)",
            "(line 306,col 9)-(line 306,col 63)",
            "(line 307,col 9)-(line 307,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMs2SegmentedTimeline()",
        "snippet": "    public void testMs2SegmentedTimeline() {\n        // verify attributes set during object construction\n        assertEquals(1, this.ms2Timeline.getSegmentSize());\n        assertEquals(1, this.ms2Timeline.getStartTime());\n        assertEquals(2, this.ms2Timeline.getSegmentsIncluded());\n        assertEquals(2, this.ms2Timeline.getSegmentsExcluded());\n        assertEquals(this.ms2BaseTimeline, this.ms2Timeline.getBaseTimeline());\n    }",
        "begin_line": 314,
        "end_line": 321,
        "comment": "\n     * Tests that the new method that created the ms2Timeline segmented\n     * timeline did so correctly.\n     ",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 59)",
            "(line 317,col 9)-(line 317,col 57)",
            "(line 318,col 9)-(line 318,col 64)",
            "(line 319,col 9)-(line 319,col 64)",
            "(line 320,col 9)-(line 320,col 79)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMondayThroughFridaySegmentedTimeline()",
        "snippet": "    public void testMondayThroughFridaySegmentedTimeline() {\n        // verify attributes set during object construction\n        assertEquals(SegmentedTimeline.DAY_SEGMENT_SIZE, \n                this.mondayFridayTimeline.getSegmentSize());\n        assertEquals(SegmentedTimeline.FIRST_MONDAY_AFTER_1900, \n                this.mondayFridayTimeline.getStartTime());\n        assertEquals(5, this.mondayFridayTimeline.getSegmentsIncluded());\n        assertEquals(2, this.mondayFridayTimeline.getSegmentsExcluded());\n    }",
        "begin_line": 327,
        "end_line": 335,
        "comment": "\n     * Tests that the factory method that creates Monday through Friday \n     * segmented timeline does so correctly.\n     ",
        "child_ranges": [
            "(line 329,col 9)-(line 330,col 60)",
            "(line 331,col 9)-(line 332,col 58)",
            "(line 333,col 9)-(line 333,col 73)",
            "(line 334,col 9)-(line 334,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testFifteenMinSegmentedTimeline()",
        "snippet": "    public void testFifteenMinSegmentedTimeline() {\n        assertEquals(SegmentedTimeline.FIFTEEN_MINUTE_SEGMENT_SIZE,\n                this.fifteenMinTimeline.getSegmentSize());\n        assertEquals(SegmentedTimeline.FIRST_MONDAY_AFTER_1900 + 36 \n                * this.fifteenMinTimeline.getSegmentSize(),\n                this.fifteenMinTimeline.getStartTime());\n        assertEquals(28, this.fifteenMinTimeline.getSegmentsIncluded());\n        assertEquals(68, this.fifteenMinTimeline.getSegmentsExcluded());\n    }",
        "begin_line": 341,
        "end_line": 349,
        "comment": "\n     * Tests that the factory method that creates a 15-min 9:00 AM  4:00 PM\n     * segmented axis does so correctly.\n     ",
        "child_ranges": [
            "(line 342,col 9)-(line 343,col 58)",
            "(line 344,col 9)-(line 346,col 56)",
            "(line 347,col 9)-(line 347,col 72)",
            "(line 348,col 9)-(line 348,col 72)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMsSegment()",
        "snippet": "    public void testMsSegment() {\n        verifyOneSegment(this.msTimeline);\n    }",
        "begin_line": 359,
        "end_line": 361,
        "comment": "\n     * Tests one segment of the ms timeline. Internal indices\n     * inside one segment as well as adjacent segments are verified.\n     ",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMs2Segment()",
        "snippet": "    public void testMs2Segment() {\n        verifyOneSegment(this.ms2Timeline);\n    }",
        "begin_line": 367,
        "end_line": 369,
        "comment": "\n     * Tests one segment of the ms timeline. Internal indices\n     * inside one segment as well as adjacent segments are verified.\n     ",
        "child_ranges": [
            "(line 368,col 9)-(line 368,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMondayThroughFridaySegment()",
        "snippet": "    public void testMondayThroughFridaySegment() {\n        verifyOneSegment(this.mondayFridayTimeline);\n    }",
        "begin_line": 375,
        "end_line": 377,
        "comment": "\n     * Tests one segment of the Monday through Friday timeline. Internal indices\n     * inside one segment as well as adjacent segments are verified.\n     ",
        "child_ranges": [
            "(line 376,col 9)-(line 376,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testFifteenMinSegment()",
        "snippet": "    public void testFifteenMinSegment() {\n        verifyOneSegment(this.fifteenMinTimeline);\n    }",
        "begin_line": 383,
        "end_line": 385,
        "comment": "\n     * Tests one segment of the Fifteen timeline. Internal indices\n     * inside one segment as well as adjacent segments are verified.\n     ",
        "child_ranges": [
            "(line 384,col 9)-(line 384,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.verifyOneSegment(org.jfree.chart.axis.SegmentedTimeline)",
        "snippet": "    public void verifyOneSegment(SegmentedTimeline timeline) {\n        \n        for (long testCycle = TEST_CYCLE_START; testCycle < TEST_CYCLE_END;\n             testCycle += TEST_CYCLE_INC) {\n\n            // get two consecutive segments for various tests\n            SegmentedTimeline.Segment segment1 = timeline.getSegment(\n                    this.monday.getTime().getTime() + testCycle);\n            SegmentedTimeline.Segment segment2 = timeline.getSegment(\n                    segment1.getSegmentEnd() + 1);\n\n            // verify segments are consecutive and correct\n            assertEquals(segment1.getSegmentNumber() + 1, \n                    segment2.getSegmentNumber());\n            assertEquals(segment1.getSegmentEnd() + 1, \n                    segment2.getSegmentStart());\n            assertEquals(segment1.getSegmentStart() \n                    + timeline.getSegmentSize() - 1, segment1.getSegmentEnd());\n            assertEquals(segment1.getSegmentStart() + timeline.getSegmentSize(),\n                    segment2.getSegmentStart());\n            assertEquals(segment1.getSegmentEnd() + timeline.getSegmentSize(),\n                    segment2.getSegmentEnd());\n\n            // verify various indices inside a segment are the same segment\n            long delta;\n            if (timeline.getSegmentSize() > 1000000) {\n                delta = timeline.getSegmentSize() / 10000;\n            } \n            else if (timeline.getSegmentSize() > 100000) {\n                delta = timeline.getSegmentSize() / 1000;\n            } \n            else if (timeline.getSegmentSize() > 10000) {\n                delta = timeline.getSegmentSize() / 100;\n            }\n            else if (timeline.getSegmentSize() > 1000) {\n                delta = timeline.getSegmentSize() / 10;\n            }\n            else if (timeline.getSegmentSize() > 100) {\n                delta = timeline.getSegmentSize() / 5;\n            }\n            else {\n                delta = 1;\n            }\n\n            long start = segment1.getSegmentStart() + delta;\n            long end = segment1.getSegmentStart() \n                       + timeline.getSegmentSize() - 1;\n            SegmentedTimeline.Segment lastSeg = timeline.getSegment(\n                    segment1.getSegmentStart());\n            SegmentedTimeline.Segment seg;\n            for (long i = start; i < end; i += delta) {\n                seg = timeline.getSegment(i);\n                assertEquals(lastSeg.getSegmentNumber(), \n                        seg.getSegmentNumber());\n                assertEquals(lastSeg.getSegmentStart(), seg.getSegmentStart());\n                assertEquals(lastSeg.getSegmentEnd(), seg.getSegmentEnd());\n                assertTrue(lastSeg.getMillisecond() < seg.getMillisecond());\n                lastSeg = seg;\n            }\n\n            // try next segment\n            seg = timeline.getSegment(end + 1);\n            assertEquals(segment2.getSegmentNumber(), seg.getSegmentNumber());\n            assertEquals(segment2.getSegmentStart(), seg.getSegmentStart());\n            assertEquals(segment2.getSegmentEnd(), seg.getSegmentEnd());\n        }\n    }",
        "begin_line": 392,
        "end_line": 458,
        "comment": "\n     * Tests one segment of the Monday through Friday timeline. Internal indices\n     * inside one segment as well as adjacent segments are verified.\n     * @param timeline the timeline to use for verifications.\n     ",
        "child_ranges": [
            "(line 394,col 9)-(line 457,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMsInc()",
        "snippet": "    public void testMsInc() {\n        verifyInc(this.msTimeline);\n    }",
        "begin_line": 467,
        "end_line": 469,
        "comment": "\n     * Tests the inc methods on the msTimeline.\n     ",
        "child_ranges": [
            "(line 468,col 9)-(line 468,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMs2Inc()",
        "snippet": "    public void testMs2Inc() {\n        verifyInc(this.ms2Timeline);\n    }",
        "begin_line": 474,
        "end_line": 476,
        "comment": "\n     * Tests the inc methods on the msTimeline.\n     ",
        "child_ranges": [
            "(line 475,col 9)-(line 475,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMondayThroughFridayInc()",
        "snippet": "    public void testMondayThroughFridayInc() {\n        verifyInc(this.mondayFridayTimeline);\n    }",
        "begin_line": 481,
        "end_line": 483,
        "comment": "\n     * Tests the inc methods on the Monday through Friday timeline.\n     ",
        "child_ranges": [
            "(line 482,col 9)-(line 482,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testFifteenMinInc()",
        "snippet": "    public void testFifteenMinInc() {\n        verifyInc(this.fifteenMinTimeline);\n    }",
        "begin_line": 488,
        "end_line": 490,
        "comment": "\n     * Tests the inc methods on the Fifteen minute timeline.\n     ",
        "child_ranges": [
            "(line 489,col 9)-(line 489,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.verifyInc(org.jfree.chart.axis.SegmentedTimeline)",
        "snippet": "    public void verifyInc(SegmentedTimeline timeline) {\n        for (long testCycle = TEST_CYCLE_START; testCycle < TEST_CYCLE_END;\n             testCycle += TEST_CYCLE_INC) {\n\n            long m = timeline.getSegmentSize();\n            SegmentedTimeline.Segment segment = timeline.getSegment(testCycle);\n            SegmentedTimeline.Segment seg1 = segment.copy();\n            for (int i = 0; i < 1000; i++) {\n\n                // test inc() method\n                SegmentedTimeline.Segment seg2 = seg1.copy();\n                seg2.inc();\n\n                if ((seg1.getSegmentEnd() + 1) != seg2.getSegmentStart()) {\n                    // logically consecutive segments non-physically consecutive\n                    // (with non-contained time in between)\n                    assertTrue(!timeline.containsDomainRange(\n                            seg1.getSegmentEnd() + 1, \n                            seg2.getSegmentStart() - 1));\n                    assertEquals(0, (seg2.getSegmentStart() \n                            - seg1.getSegmentStart()) % m);\n                    assertEquals(0, (seg2.getSegmentEnd() \n                            - seg1.getSegmentEnd()) % m);\n                    assertEquals(0, (seg2.getMillisecond() \n                            - seg1.getMillisecond()) % m);\n                } \n                else {\n                    // physically consecutive\n                    assertEquals(seg1.getSegmentStart() + m, \n                            seg2.getSegmentStart());\n                    assertEquals(seg1.getSegmentEnd() + m, \n                            seg2.getSegmentEnd());\n                    assertEquals(seg1.getMillisecond() + m, \n                            seg2.getMillisecond());\n                }\n\n                // test inc(n) method\n                SegmentedTimeline.Segment seg3 = seg1.copy();\n                SegmentedTimeline.Segment seg4 = seg1.copy();\n\n                for (int j = 0; j < i; j++) {\n                    seg3.inc();\n                }\n                seg4.inc(i);\n\n                assertEquals(seg3.getSegmentStart(), seg4.getSegmentStart());\n                assertEquals(seg3.getSegmentEnd(), seg4.getSegmentEnd());\n                assertEquals(seg3.getMillisecond(), seg4.getMillisecond());\n\n                // go to another segment to continue test\n                seg1.inc();\n            }\n        }\n    }",
        "begin_line": 496,
        "end_line": 549,
        "comment": "\n     * Tests the inc methods.\n     * @param timeline the timeline to use for verifications.\n     ",
        "child_ranges": [
            "(line 497,col 9)-(line 548,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMsIncludedAndExcludedSegments()",
        "snippet": "    public void testMsIncludedAndExcludedSegments() {\n        verifyIncludedAndExcludedSegments(this.msTimeline, 0);\n    }",
        "begin_line": 559,
        "end_line": 561,
        "comment": "\n     * Tests that the msTimeline's included and excluded\n     * segments are being calculated correctly.\n     ",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMs2IncludedAndExcludedSegments()",
        "snippet": "    public void testMs2IncludedAndExcludedSegments() {\n        verifyIncludedAndExcludedSegments(this.ms2Timeline, 1);\n    }",
        "begin_line": 567,
        "end_line": 569,
        "comment": "\n     * Tests that the ms2Timeline's included and excluded\n     * segments are being calculated correctly.\n     ",
        "child_ranges": [
            "(line 568,col 9)-(line 568,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMondayThroughFridayIncludedAndExcludedSegments()",
        "snippet": "    public void testMondayThroughFridayIncludedAndExcludedSegments() {\n        verifyIncludedAndExcludedSegments(this.mondayFridayTimeline, \n                this.monday.getTime().getTime());\n    }",
        "begin_line": 576,
        "end_line": 579,
        "comment": "\n     * Tests that the Monday through Friday timeline's included and excluded\n     * segments are being calculated correctly. The test is performed starting\n     * on the first monday after 1/1/2000 and for five years.\n     ",
        "child_ranges": [
            "(line 577,col 9)-(line 578,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testFifteenMinIncludedAndExcludedSegments()",
        "snippet": "    public void testFifteenMinIncludedAndExcludedSegments() {\n        verifyIncludedAndExcludedSegments(this.fifteenMinTimeline, \n                this.monday9am.getTime().getTime());\n    }",
        "begin_line": 586,
        "end_line": 589,
        "comment": "\n     * Tests that the Fifteen-Min timeline's included and excluded\n     * segments are being calculated correctly. The test is performed starting\n     * on the first monday after 1/1/2000 and for five years.\n     ",
        "child_ranges": [
            "(line 587,col 9)-(line 588,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.verifyIncludedAndExcludedSegments(org.jfree.chart.axis.SegmentedTimeline, long)",
        "snippet": "    public void verifyIncludedAndExcludedSegments(SegmentedTimeline timeline, \n                                                  long n) {\n        // clear any exceptions in this timeline\n        timeline.setExceptionSegments(new java.util.ArrayList());\n\n        // test some included and excluded segments\n        SegmentedTimeline.Segment segment = timeline.getSegment(n);\n        for (int i = 0; i < 1000; i++) {\n            int d = (i % timeline.getGroupSegmentCount());\n            if (d < timeline.getSegmentsIncluded()) {\n                // should be an included segment\n                assertTrue(segment.inIncludeSegments());\n                assertTrue(!segment.inExcludeSegments());\n                assertTrue(!segment.inExceptionSegments());\n            } \n            else {\n                // should be an excluded segment\n                assertTrue(!segment.inIncludeSegments());\n                assertTrue(segment.inExcludeSegments());\n                assertTrue(!segment.inExceptionSegments());\n            }\n            segment.inc();\n        }\n    }",
        "begin_line": 598,
        "end_line": 621,
        "comment": "\n     * Tests that a timeline's included and excluded segments are being \n     * calculated correctly.\n     * \n     * @param timeline the timeline to verify\n     * @param n the first segment number to start verifying\n     ",
        "child_ranges": [
            "(line 601,col 9)-(line 601,col 65)",
            "(line 604,col 9)-(line 604,col 67)",
            "(line 605,col 9)-(line 620,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMsExceptionSegments()",
        "snippet": "    public void testMsExceptionSegments() throws ParseException {\n        verifyExceptionSegments(this.msTimeline, MS_EXCEPTIONS, NUMBER_FORMAT);\n    }",
        "begin_line": 632,
        "end_line": 634,
        "comment": "\n     * Tests methods related to exceptions methods in the msTimeline.\n     * \n     * @throws ParseException if there is a parsing error.\n     ",
        "child_ranges": [
            "(line 633,col 9)-(line 633,col 79)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMs2BaseTimelineExceptionSegments()",
        "snippet": "    public void testMs2BaseTimelineExceptionSegments() throws ParseException {\n        verifyExceptionSegments(this.ms2BaseTimeline, \n                MS2_BASE_TIMELINE_EXCEPTIONS, NUMBER_FORMAT);\n    }",
        "begin_line": 641,
        "end_line": 644,
        "comment": "\n     * Tests methods related to exceptions methods in the ms2BaseTimeline.\n     * \n     * @throws ParseException if there is a parsing error.\n     ",
        "child_ranges": [
            "(line 642,col 9)-(line 643,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMondayThoughFridayExceptionSegments()",
        "snippet": "    public void testMondayThoughFridayExceptionSegments() \n        throws ParseException {\n        verifyExceptionSegments(this.mondayFridayTimeline, \n                US_HOLIDAYS, DATE_FORMAT);\n    }",
        "begin_line": 651,
        "end_line": 655,
        "comment": "\n     * Tests methods related to exceptions methods in the mondayFridayTimeline.\n     * \n     * @throws ParseException if there is a parsing error.\n     ",
        "child_ranges": [
            "(line 653,col 9)-(line 654,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testFifteenMinExceptionSegments()",
        "snippet": "    public void testFifteenMinExceptionSegments() throws ParseException {\n        verifyExceptionSegments(this.fifteenMinTimeline, \n                FIFTEEN_MIN_EXCEPTIONS, DATE_TIME_FORMAT);\n    }",
        "begin_line": 662,
        "end_line": 665,
        "comment": "\n     * Tests methods related to exceptions methods in the fifteenMinTimeline.\n     * \n     * @throws ParseException if there is a parsing error.\n     ",
        "child_ranges": [
            "(line 663,col 9)-(line 664,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.verifyExceptionSegments(org.jfree.chart.axis.SegmentedTimeline, java.lang.String[], java.text.Format)",
        "snippet": "    public void verifyExceptionSegments(SegmentedTimeline timeline,\n                                        String[] exceptionString,\n                                        Format fmt)\n        throws ParseException {\n\n        // fill in the exceptions\n        long[] exception = verifyFillInExceptions(timeline, exceptionString, \n                fmt);\n\n        int m = exception.length;\n\n        // verify list of exceptions\n        assertEquals(exception.length, timeline.getExceptionSegments().size());\n        SegmentedTimeline.Segment lastSegment = timeline.getSegment(\n                exception[m - 1]);\n        for (int i = 0; i < m; i++) {\n            SegmentedTimeline.Segment segment = timeline.getSegment(\n                    exception[i]);\n            assertTrue(segment.inExceptionSegments());\n            // include current exception and last one\n            assertEquals(m - i, timeline.getExceptionSegmentCount(\n                    segment.getSegmentStart(), lastSegment.getSegmentEnd()));\n            // exclude current exception and last one\n            assertEquals(Math.max(0, m - i - 2), \n                    timeline.getExceptionSegmentCount(exception[i] + 1, \n                    exception[m - 1] - 1));\n        }\n\n    }",
        "begin_line": 676,
        "end_line": 704,
        "comment": "\n     * Tests methods related to adding exceptions.\n     * \n     * @param timeline the timeline to verify\n     * @param exceptionString array of Strings that represent the exceptions\n     * @param fmt Format object that can parse the exceptionString strings\n     * \n     * @throws ParseException if there is a parsing error.\n     ",
        "child_ranges": [
            "(line 682,col 9)-(line 683,col 21)",
            "(line 685,col 9)-(line 685,col 33)",
            "(line 688,col 9)-(line 688,col 79)",
            "(line 689,col 9)-(line 690,col 34)",
            "(line 691,col 9)-(line 702,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMsTranslations()",
        "snippet": "    public void testMsTranslations() throws ParseException {\n        verifyFillInExceptions(this.msTimeline, MS_EXCEPTIONS, NUMBER_FORMAT);\n        verifyTranslations(this.msTimeline, 0);\n    }",
        "begin_line": 715,
        "end_line": 718,
        "comment": "\n     * Tests translations for 1-ms timeline\n     * \n     * @throws ParseException if there is a parsing error.\n     ",
        "child_ranges": [
            "(line 716,col 9)-(line 716,col 78)",
            "(line 717,col 9)-(line 717,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMs2BaseTimelineTranslations()",
        "snippet": "    public void testMs2BaseTimelineTranslations() throws ParseException {\n        verifyFillInExceptions(this.ms2BaseTimeline, \n                MS2_BASE_TIMELINE_EXCEPTIONS, NUMBER_FORMAT);\n        verifyTranslations(this.ms2BaseTimeline, 0);\n    }",
        "begin_line": 725,
        "end_line": 729,
        "comment": "\n     * Tests translations for the base timeline used for the ms2Timeline\n     * \n     * @throws ParseException if there is a parsing error.\n     ",
        "child_ranges": [
            "(line 726,col 9)-(line 727,col 61)",
            "(line 728,col 9)-(line 728,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testMs2Translations()",
        "snippet": "    public void testMs2Translations() throws ParseException {\n        fillInBaseTimelineExceptions(this.ms2Timeline, \n                MS2_BASE_TIMELINE_EXCEPTIONS, NUMBER_FORMAT);\n        fillInBaseTimelineExclusionsAsExceptions(this.ms2Timeline, 0, 5000);\n        verifyTranslations(this.ms2Timeline, 1);\n    }",
        "begin_line": 736,
        "end_line": 741,
        "comment": "\n     * Tests translations for the Monday through Friday timeline\n     * \n     * @throws ParseException if there is a parsing error.\n     ",
        "child_ranges": [
            "(line 737,col 9)-(line 738,col 61)",
            "(line 739,col 9)-(line 739,col 76)",
            "(line 740,col 9)-(line 740,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.textMondayThroughFridayTranslations()",
        "snippet": "    public void textMondayThroughFridayTranslations() throws ParseException {\n        verifyFillInExceptions(this.mondayFridayTimeline, US_HOLIDAYS, \n                DATE_FORMAT);\n        verifyTranslations(this.mondayFridayTimeline, \n                this.monday.getTime().getTime());\n    }",
        "begin_line": 748,
        "end_line": 753,
        "comment": "\n     * Tests translations for the Monday through Friday timeline\n     * \n     * @throws ParseException if there is a parsing error.\n     ",
        "child_ranges": [
            "(line 749,col 9)-(line 750,col 29)",
            "(line 751,col 9)-(line 752,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testFifteenMinTranslations()",
        "snippet": "    public void testFifteenMinTranslations() throws ParseException {\n        verifyFillInExceptions(this.fifteenMinTimeline, \n                FIFTEEN_MIN_EXCEPTIONS, DATE_TIME_FORMAT);\n        fillInBaseTimelineExceptions(this.fifteenMinTimeline, \n                US_HOLIDAYS, DATE_FORMAT);\n        fillInBaseTimelineExclusionsAsExceptions(this.fifteenMinTimeline,\n                this.monday9am.getTime().getTime(), \n                this.monday9am.getTime().getTime() + FIVE_YEARS);\n        verifyTranslations(this.fifteenMinTimeline, \n                this.monday9am.getTime().getTime());\n    }",
        "begin_line": 760,
        "end_line": 770,
        "comment": "\n     * Tests translations for the Fifteen Min timeline\n     * \n     * @throws ParseException if there is a parsing error.\n     ",
        "child_ranges": [
            "(line 761,col 9)-(line 762,col 58)",
            "(line 763,col 9)-(line 764,col 42)",
            "(line 765,col 9)-(line 767,col 65)",
            "(line 768,col 9)-(line 769,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.verifyTranslations(org.jfree.chart.axis.SegmentedTimeline, long)",
        "snippet": "    public void verifyTranslations(SegmentedTimeline timeline, long startTest) {\n        for (long testCycle = TEST_CYCLE_START; testCycle < TEST_CYCLE_END;\n             testCycle += TEST_CYCLE_INC) {\n\n            long millisecond = startTest + testCycle \n                               * timeline.getSegmentSize();\n            SegmentedTimeline.Segment segment = timeline.getSegment(\n                    millisecond);\n            \n            for (int i = 0; i < 1000; i++) {\n                long translatedValue = timeline.toTimelineValue(\n                        segment.getMillisecond());\n                long newValue = timeline.toMillisecond(translatedValue);\n\n                if (segment.inExcludeSegments() \n                        || segment.inExceptionSegments()) {\n                    // the reverse transformed value will be in the start of the\n                    // next non-excluded and non-exception segment\n                    SegmentedTimeline.Segment tempSegment = segment.copy();\n                    tempSegment.moveIndexToStart();\n                    do {\n                        tempSegment.inc();\n                    }\n                    while (!tempSegment.inIncludeSegments());\n                    assertEquals(tempSegment.getMillisecond(), newValue);\n                }\n\n                else {\n                    assertEquals(segment.getMillisecond(), newValue);\n                }\n                segment.inc();\n            }\n        }\n    }",
        "begin_line": 778,
        "end_line": 811,
        "comment": "\n     * Tests translations between timelines.\n     * \n     * @param timeline the timeline to use for verifications.\n     * @param startTest  ??.\n     ",
        "child_ranges": [
            "(line 779,col 9)-(line 810,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        verifySerialization(this.msTimeline);\n        verifySerialization(this.ms2Timeline);\n        verifySerialization(this.ms2BaseTimeline);\n        verifySerialization(SegmentedTimeline.newMondayThroughFridayTimeline());\n        verifySerialization(SegmentedTimeline.newFifteenMinuteTimeline());\n    }",
        "begin_line": 820,
        "end_line": 826,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 821,col 9)-(line 821,col 45)",
            "(line 822,col 9)-(line 822,col 46)",
            "(line 823,col 9)-(line 823,col 50)",
            "(line 824,col 9)-(line 824,col 80)",
            "(line 825,col 9)-(line 825,col 74)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.verifySerialization(org.jfree.chart.axis.SegmentedTimeline)",
        "snippet": "    private void verifySerialization(SegmentedTimeline a1) {\n        SegmentedTimeline a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            a2 = (SegmentedTimeline) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n    }",
        "begin_line": 832,
        "end_line": 850,
        "comment": "\n     * Tests serialization of an instance.\n     * @param a1 The timeline to verify the serialization\n     ",
        "child_ranges": [
            "(line 833,col 9)-(line 833,col 36)",
            "(line 835,col 9)-(line 848,col 9)",
            "(line 849,col 9)-(line 849,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.verifyFillInExceptions(org.jfree.chart.axis.SegmentedTimeline, java.lang.String[], java.text.Format)",
        "snippet": "    private long[] verifyFillInExceptions(SegmentedTimeline timeline,\n                                         String[] exceptionString,\n                                         Format fmt) throws ParseException {\n        // make sure there are no exceptions\n        timeline.setExceptionSegments(new java.util.ArrayList());\n        assertEquals(0, timeline.getExceptionSegments().size());\n\n        // add our exceptions and store locally in ArrayList of Longs\n        ArrayList exceptionList = new ArrayList();\n        for (int i = 0; i < exceptionString.length; i++) {\n            long e;\n            if (fmt instanceof NumberFormat) {\n                e = ((NumberFormat) fmt).parse(exceptionString[i]).longValue();\n            }\n            else {\n                e = timeline.getTime(((SimpleDateFormat) fmt)\n                        .parse(exceptionString[i]));\n            }\n            // only add an exception if it is currently an included segment\n            SegmentedTimeline.Segment segment = timeline.getSegment(e);\n            if (segment.inIncludeSegments()) {\n                timeline.addException(e);\n                exceptionList.add(new Long(e));\n                assertEquals(exceptionList.size(), \n                        timeline.getExceptionSegments().size());\n                assertTrue(segment.inExceptionSegments());\n            }\n        }\n\n        // make array of exceptions\n        long[] exception = new long[exceptionList.size()];\n        int i = 0;\n        for (Iterator iter = exceptionList.iterator(); iter.hasNext();) {\n            Long l = (Long) iter.next();\n            exception[i++] = l.longValue();\n        }\n\n        return (exception);\n\n    }",
        "begin_line": 862,
        "end_line": 901,
        "comment": "\n     * Adds an array of exceptions to the timeline. The timeline exception list\n     * is first cleared.\n     * @param timeline The timeline where the exceptions will be stored\n     * @param exceptionString The exceptions to load\n     * @param fmt The date formatter to use to parse each exceptions[i] value\n     * @throws ParseException If there is any exception parsing each \n     *         exceptions[i] value.\n     * @return An array of Dates[] containing each exception date.\n     ",
        "child_ranges": [
            "(line 866,col 9)-(line 866,col 65)",
            "(line 867,col 9)-(line 867,col 64)",
            "(line 870,col 9)-(line 870,col 50)",
            "(line 871,col 9)-(line 889,col 9)",
            "(line 892,col 9)-(line 892,col 58)",
            "(line 893,col 9)-(line 893,col 18)",
            "(line 894,col 9)-(line 897,col 9)",
            "(line 899,col 9)-(line 899,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.fillInBaseTimelineExceptions(org.jfree.chart.axis.SegmentedTimeline, java.lang.String[], java.text.Format)",
        "snippet": "    private void fillInBaseTimelineExceptions(SegmentedTimeline timeline,\n                                             String[] exceptionString,\n                                             Format fmt) throws ParseException {\n        SegmentedTimeline baseTimeline = timeline.getBaseTimeline();\n        for (int i = 0; i < exceptionString.length; i++) {\n            long e;\n            if (fmt instanceof NumberFormat) {\n                e = ((NumberFormat) fmt).parse(exceptionString[i]).longValue();\n            }\n            else {\n                e = timeline.getTime(((SimpleDateFormat) fmt)\n                        .parse(exceptionString[i]));\n            }\n            timeline.addBaseTimelineException(e);\n\n            // verify all timeline segments included in the \n            // baseTimeline.segment are now exceptions\n            SegmentedTimeline.Segment segment1 = baseTimeline.getSegment(e);\n            for (SegmentedTimeline.Segment segment2 \n                    = timeline.getSegment(segment1.getSegmentStart());\n                 segment2.getSegmentStart() <= segment1.getSegmentEnd();\n                 segment2.inc()) {\n                if (!segment2.inExcludeSegments()) {\n                    assertTrue(segment2.inExceptionSegments());\n                }\n            }\n\n        }\n    }",
        "begin_line": 912,
        "end_line": 940,
        "comment": "\n     * Adds an array of exceptions relative to the base timeline.\n     *\n     * @param timeline The timeline where the exceptions will be stored\n     * @param exceptionString The exceptions to load\n     * @param fmt The date formatter to use to parse each exceptions[i] value\n     * @throws ParseException If there is any exception parsing each \n     *                        exceptions[i] value.\n     ",
        "child_ranges": [
            "(line 915,col 9)-(line 915,col 68)",
            "(line 916,col 9)-(line 939,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.fillInBaseTimelineExclusionsAsExceptions(org.jfree.chart.axis.SegmentedTimeline, long, long)",
        "snippet": "    private void fillInBaseTimelineExclusionsAsExceptions(\n            SegmentedTimeline timeline, long from, long to) {\n\n        // add the base timeline exclusions as timeline's esceptions\n        timeline.addBaseTimelineExclusions(from, to);\n\n        // validate base timeline exclusions added as timeline's esceptions\n        for (SegmentedTimeline.Segment segment1 = timeline.getBaseTimeline()\n                .getSegment(from);\n             segment1.getSegmentStart() <= to;\n             segment1.inc()) {\n\n            if (segment1.inExcludeSegments()) {\n\n                // verify all timeline segments included in the \n                // baseTimeline.segment are now exceptions\n                for (SegmentedTimeline.Segment segment2 = timeline.getSegment(\n                        segment1.getSegmentStart()); \n                    segment2.getSegmentStart() <= segment1.getSegmentEnd();\n                    segment2.inc()) {\n                    if (!segment2.inExcludeSegments()) {\n                        assertTrue(segment2.inExceptionSegments());\n                    }\n                }\n            }\n        }\n    }",
        "begin_line": 950,
        "end_line": 976,
        "comment": "\n     * Adds new exceptions to a timeline. The exceptions are the excluded \n     * segments from its base timeline.\n     *\n     * @param timeline  the timeline.\n     * @param from  the start.\n     * @param to  the end.\n     ",
        "child_ranges": [
            "(line 954,col 9)-(line 954,col 53)",
            "(line 957,col 9)-(line 975,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testCloning()",
        "snippet": "    public void testCloning() {\n        SegmentedTimeline l1 = new SegmentedTimeline(1000, 5, 2);\n        SegmentedTimeline l2 = null;\n        try {\n            l2 = (SegmentedTimeline) l1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(l1 != l2);\n        assertTrue(l1.getClass() == l2.getClass());\n        assertTrue(l1.equals(l2));\n    }",
        "begin_line": 981,
        "end_line": 993,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 982,col 9)-(line 982,col 65)",
            "(line 983,col 9)-(line 983,col 36)",
            "(line 984,col 9)-(line 989,col 9)",
            "(line 990,col 9)-(line 990,col 29)",
            "(line 991,col 9)-(line 991,col 51)",
            "(line 992,col 9)-(line 992,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        SegmentedTimeline l1 = new SegmentedTimeline(1000, 5, 2);\n        SegmentedTimeline l2 = new SegmentedTimeline(1000, 5, 2);\n        assertTrue(l1.equals(l2));\n        \n        l1 = new SegmentedTimeline(1000, 5, 2);\n        l2 = new SegmentedTimeline(1001, 5, 2);\n        assertFalse(l1.equals(l2));\n        \n        l1 = new SegmentedTimeline(1000, 5, 2);\n        l2 = new SegmentedTimeline(1000, 4, 2);\n        assertFalse(l1.equals(l2));\n        \n        l1 = new SegmentedTimeline(1000, 5, 2);\n        l2 = new SegmentedTimeline(1000, 5, 1);\n        assertFalse(l1.equals(l2));\n        \n        l1 = new SegmentedTimeline(1000, 5, 2);\n        l2 = new SegmentedTimeline(1000, 5, 2);\n        \n        // start time...\n        l1.setStartTime(1234L);\n        assertFalse(l1.equals(l2));\n        l2.setStartTime(1234L);\n        assertTrue(l1.equals(l2));\n\n    }",
        "begin_line": 998,
        "end_line": 1025,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 1000,col 9)-(line 1000,col 65)",
            "(line 1001,col 9)-(line 1001,col 65)",
            "(line 1002,col 9)-(line 1002,col 34)",
            "(line 1004,col 9)-(line 1004,col 47)",
            "(line 1005,col 9)-(line 1005,col 47)",
            "(line 1006,col 9)-(line 1006,col 35)",
            "(line 1008,col 9)-(line 1008,col 47)",
            "(line 1009,col 9)-(line 1009,col 47)",
            "(line 1010,col 9)-(line 1010,col 35)",
            "(line 1012,col 9)-(line 1012,col 47)",
            "(line 1013,col 9)-(line 1013,col 47)",
            "(line 1014,col 9)-(line 1014,col 35)",
            "(line 1016,col 9)-(line 1016,col 47)",
            "(line 1017,col 9)-(line 1017,col 47)",
            "(line 1020,col 9)-(line 1020,col 31)",
            "(line 1021,col 9)-(line 1021,col 35)",
            "(line 1022,col 9)-(line 1022,col 31)",
            "(line 1023,col 9)-(line 1023,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        SegmentedTimeline l1 = new SegmentedTimeline(1000, 5, 2);\n        SegmentedTimeline l2 = new SegmentedTimeline(1000, 5, 2);\n        assertTrue(l1.equals(l2));\n        int h1 = l1.hashCode();\n        int h2 = l2.hashCode();\n        assertEquals(h1, h2);\n    }    ",
        "begin_line": 1030,
        "end_line": 1037,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 1031,col 9)-(line 1031,col 65)",
            "(line 1032,col 9)-(line 1032,col 65)",
            "(line 1033,col 9)-(line 1033,col 34)",
            "(line 1034,col 9)-(line 1034,col 31)",
            "(line 1035,col 9)-(line 1035,col 31)",
            "(line 1036,col 9)-(line 1036,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n\n        SegmentedTimeline l1 = new SegmentedTimeline(1000, 5, 2);\n        SegmentedTimeline l2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(l1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            l2 = (SegmentedTimeline) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        boolean b = l1.equals(l2);\n        assertTrue(b);\n\n    }",
        "begin_line": 1042,
        "end_line": 1064,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 1044,col 9)-(line 1044,col 65)",
            "(line 1045,col 9)-(line 1045,col 36)",
            "(line 1047,col 9)-(line 1060,col 9)",
            "(line 1061,col 9)-(line 1061,col 34)",
            "(line 1062,col 9)-(line 1062,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testBasicSegmentedTimeline()",
        "snippet": "    public void testBasicSegmentedTimeline() {\n        SegmentedTimeline stl = new SegmentedTimeline(10, 2, 3);\n        stl.setStartTime(946684800000L);  // 1-Jan-2000\n        assertFalse(stl.containsDomainValue(946684799999L));\n        assertTrue(stl.containsDomainValue(946684800000L));\n        assertTrue(stl.containsDomainValue(946684800019L));\n        assertFalse(stl.containsDomainValue(946684800020L));\n        assertFalse(stl.containsDomainValue(946684800049L));\n        assertTrue(stl.containsDomainValue(946684800050L));\n        assertTrue(stl.containsDomainValue(946684800069L));\n        assertFalse(stl.containsDomainValue(946684800070L));\n        assertFalse(stl.containsDomainValue(946684800099L));\n        assertTrue(stl.containsDomainValue(946684800100L));\n        \n        assertEquals(0, stl.toTimelineValue(946684800000L));\n        assertEquals(19, stl.toTimelineValue(946684800019L));\n        assertEquals(20, stl.toTimelineValue(946684800020L));\n        assertEquals(20, stl.toTimelineValue(946684800049L));\n        assertEquals(20, stl.toTimelineValue(946684800050L));\n        assertEquals(39, stl.toTimelineValue(946684800069L));\n        assertEquals(40, stl.toTimelineValue(946684800070L));\n        assertEquals(40, stl.toTimelineValue(946684800099L));\n        assertEquals(40, stl.toTimelineValue(946684800100L));\n        \n        assertEquals(946684800000L, stl.toMillisecond(0));\n        assertEquals(946684800019L, stl.toMillisecond(19));\n        assertEquals(946684800050L, stl.toMillisecond(20));\n        assertEquals(946684800069L, stl.toMillisecond(39));\n        assertEquals(946684800100L, stl.toMillisecond(40));\n        \n    }",
        "begin_line": 1073,
        "end_line": 1103,
        "comment": "\n     * Tests a basic segmented timeline.\n     ",
        "child_ranges": [
            "(line 1074,col 9)-(line 1074,col 64)",
            "(line 1075,col 9)-(line 1075,col 40)",
            "(line 1076,col 9)-(line 1076,col 60)",
            "(line 1077,col 9)-(line 1077,col 59)",
            "(line 1078,col 9)-(line 1078,col 59)",
            "(line 1079,col 9)-(line 1079,col 60)",
            "(line 1080,col 9)-(line 1080,col 60)",
            "(line 1081,col 9)-(line 1081,col 59)",
            "(line 1082,col 9)-(line 1082,col 59)",
            "(line 1083,col 9)-(line 1083,col 60)",
            "(line 1084,col 9)-(line 1084,col 60)",
            "(line 1085,col 9)-(line 1085,col 59)",
            "(line 1087,col 9)-(line 1087,col 60)",
            "(line 1088,col 9)-(line 1088,col 61)",
            "(line 1089,col 9)-(line 1089,col 61)",
            "(line 1090,col 9)-(line 1090,col 61)",
            "(line 1091,col 9)-(line 1091,col 61)",
            "(line 1092,col 9)-(line 1092,col 61)",
            "(line 1093,col 9)-(line 1093,col 61)",
            "(line 1094,col 9)-(line 1094,col 61)",
            "(line 1095,col 9)-(line 1095,col 61)",
            "(line 1097,col 9)-(line 1097,col 58)",
            "(line 1098,col 9)-(line 1098,col 59)",
            "(line 1099,col 9)-(line 1099,col 59)",
            "(line 1100,col 9)-(line 1100,col 59)",
            "(line 1101,col 9)-(line 1101,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.testSegmentedTimelineWithException1()",
        "snippet": "    public void testSegmentedTimelineWithException1() {\n        SegmentedTimeline stl = new SegmentedTimeline(10, 2, 3);\n        stl.setStartTime(946684800000L);  // 1-Jan-2000\n        stl.addException(946684800050L);        \n        assertFalse(stl.containsDomainValue(946684799999L));\n        assertTrue(stl.containsDomainValue(946684800000L));\n        assertTrue(stl.containsDomainValue(946684800019L));\n        assertFalse(stl.containsDomainValue(946684800020L));\n        assertFalse(stl.containsDomainValue(946684800049L));\n        assertFalse(stl.containsDomainValue(946684800050L));\n        assertFalse(stl.containsDomainValue(946684800059L));\n        assertTrue(stl.containsDomainValue(946684800060L));\n        assertTrue(stl.containsDomainValue(946684800069L));\n        assertFalse(stl.containsDomainValue(946684800070L));\n        assertFalse(stl.containsDomainValue(946684800099L));\n        assertTrue(stl.containsDomainValue(946684800100L));\n\n        //long v = stl.toTimelineValue(946684800020L);\n        assertEquals(0, stl.toTimelineValue(946684800000L));\n        assertEquals(19, stl.toTimelineValue(946684800019L));\n        assertEquals(20, stl.toTimelineValue(946684800020L));\n        assertEquals(20, stl.toTimelineValue(946684800049L));\n        assertEquals(20, stl.toTimelineValue(946684800050L));\n        assertEquals(29, stl.toTimelineValue(946684800069L));\n        assertEquals(30, stl.toTimelineValue(946684800070L));\n        assertEquals(30, stl.toTimelineValue(946684800099L));\n        assertEquals(30, stl.toTimelineValue(946684800100L));\n\n        assertEquals(946684800000L, stl.toMillisecond(0));\n        assertEquals(946684800019L, stl.toMillisecond(19));\n        assertEquals(946684800060L, stl.toMillisecond(20));\n        assertEquals(946684800069L, stl.toMillisecond(29));\n        assertEquals(946684800100L, stl.toMillisecond(30));\n\n    }    ",
        "begin_line": 1108,
        "end_line": 1142,
        "comment": "\n     * Tests a basic time line with one exception.\n     ",
        "child_ranges": [
            "(line 1109,col 9)-(line 1109,col 64)",
            "(line 1110,col 9)-(line 1110,col 40)",
            "(line 1111,col 9)-(line 1111,col 40)",
            "(line 1112,col 9)-(line 1112,col 60)",
            "(line 1113,col 9)-(line 1113,col 59)",
            "(line 1114,col 9)-(line 1114,col 59)",
            "(line 1115,col 9)-(line 1115,col 60)",
            "(line 1116,col 9)-(line 1116,col 60)",
            "(line 1117,col 9)-(line 1117,col 60)",
            "(line 1118,col 9)-(line 1118,col 60)",
            "(line 1119,col 9)-(line 1119,col 59)",
            "(line 1120,col 9)-(line 1120,col 59)",
            "(line 1121,col 9)-(line 1121,col 60)",
            "(line 1122,col 9)-(line 1122,col 60)",
            "(line 1123,col 9)-(line 1123,col 59)",
            "(line 1126,col 9)-(line 1126,col 60)",
            "(line 1127,col 9)-(line 1127,col 61)",
            "(line 1128,col 9)-(line 1128,col 61)",
            "(line 1129,col 9)-(line 1129,col 61)",
            "(line 1130,col 9)-(line 1130,col 61)",
            "(line 1131,col 9)-(line 1131,col 61)",
            "(line 1132,col 9)-(line 1132,col 61)",
            "(line 1133,col 9)-(line 1133,col 61)",
            "(line 1134,col 9)-(line 1134,col 61)",
            "(line 1136,col 9)-(line 1136,col 58)",
            "(line 1137,col 9)-(line 1137,col 59)",
            "(line 1138,col 9)-(line 1138,col 59)",
            "(line 1139,col 9)-(line 1139,col 59)",
            "(line 1140,col 9)-(line 1140,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.SegmentedTimelineTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java",
        "signature": "org.jfree.chart.axis.junit.SegmentedTimelineTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) throws Exception {\n        SegmentedTimelineTests test = new SegmentedTimelineTests(\"Test\");\n        test.setUp();\n        test.testMondayThoughFridayExceptionSegments();\n        test.tearDown();\n    }",
        "begin_line": 1155,
        "end_line": 1160,
        "comment": "\n     * Only use to debug JUnit suite.\n     * \n     * @param args  ignored.\n     * \n     * @throws Exception if there is some problem.\n     ",
        "child_ranges": [
            "(line 1156,col 9)-(line 1156,col 73)",
            "(line 1157,col 9)-(line 1157,col 21)",
            "(line 1158,col 9)-(line 1158,col 55)",
            "(line 1159,col 9)-(line 1159,col 24)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryTickTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryTickTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryTickTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryTickTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryTickTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryTickTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryTickTests.CategoryTickTests(java.lang.String)",
        "snippet": "    public CategoryTickTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryTickTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryTickTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryTickTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        Comparable c1 = \"C1\";\n        Comparable c2 = \"C2\";\n        TextBlock tb1 = new TextBlock();\n        tb1.addLine(new TextLine(\"Block 1\"));\n        TextBlock tb2 = new TextBlock();\n        tb1.addLine(new TextLine(\"Block 2\"));\n        TextBlockAnchor tba1 = TextBlockAnchor.CENTER;\n        TextBlockAnchor tba2 = TextBlockAnchor.BOTTOM_CENTER;\n        TextAnchor ta1 = TextAnchor.CENTER;\n        TextAnchor ta2 = TextAnchor.BASELINE_LEFT;\n        \n        CategoryTick t1 = new CategoryTick(c1, tb1, tba1, ta1, 1.0f);\n        CategoryTick t2 = new CategoryTick(c1, tb1, tba1, ta1, 1.0f);\n        assertTrue(t1.equals(t2));\n        \n        t1 = new CategoryTick(c2, tb1, tba1, ta1, 1.0f);\n        assertFalse(t1.equals(t2));\n        t2 = new CategoryTick(c2, tb1, tba1, ta1, 1.0f);\n        assertTrue(t1.equals(t2));\n\n        t1 = new CategoryTick(c2, tb2, tba1, ta1, 1.0f);\n        assertFalse(t1.equals(t2));\n        t2 = new CategoryTick(c2, tb2, tba1, ta1, 1.0f);\n        assertTrue(t1.equals(t2));\n\n        t1 = new CategoryTick(c2, tb2, tba2, ta1, 1.0f);\n        assertFalse(t1.equals(t2));\n        t2 = new CategoryTick(c2, tb2, tba2, ta1, 1.0f);\n        assertTrue(t1.equals(t2));\n\n        t1 = new CategoryTick(c2, tb2, tba2, ta2, 1.0f);\n        assertFalse(t1.equals(t2));\n        t2 = new CategoryTick(c2, tb2, tba2, ta2, 1.0f);\n        assertTrue(t1.equals(t2));\n\n        t1 = new CategoryTick(c2, tb2, tba2, ta2, 2.0f);\n        assertFalse(t1.equals(t2));\n        t2 = new CategoryTick(c2, tb2, tba2, ta2, 2.0f);\n        assertTrue(t1.equals(t2));\n        \n    }",
        "begin_line": 88,
        "end_line": 130,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 29)",
            "(line 91,col 9)-(line 91,col 29)",
            "(line 92,col 9)-(line 92,col 40)",
            "(line 93,col 9)-(line 93,col 45)",
            "(line 94,col 9)-(line 94,col 40)",
            "(line 95,col 9)-(line 95,col 45)",
            "(line 96,col 9)-(line 96,col 54)",
            "(line 97,col 9)-(line 97,col 61)",
            "(line 98,col 9)-(line 98,col 43)",
            "(line 99,col 9)-(line 99,col 50)",
            "(line 101,col 9)-(line 101,col 69)",
            "(line 102,col 9)-(line 102,col 69)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 105,col 9)-(line 105,col 56)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 107,col 56)",
            "(line 108,col 9)-(line 108,col 34)",
            "(line 110,col 9)-(line 110,col 56)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 56)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 115,col 9)-(line 115,col 56)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 117,col 56)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 120,col 9)-(line 120,col 56)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 56)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 125,col 9)-(line 125,col 56)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 127,col 56)",
            "(line 128,col 9)-(line 128,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryTickTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryTickTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryTickTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        Comparable c1 = \"C1\";\n        TextBlock tb1 = new TextBlock();\n        tb1.addLine(new TextLine(\"Block 1\"));\n        tb1.addLine(new TextLine(\"Block 2\"));\n        TextBlockAnchor tba1 = TextBlockAnchor.CENTER;\n        TextAnchor ta1 = TextAnchor.CENTER;\n        \n        CategoryTick t1 = new CategoryTick(c1, tb1, tba1, ta1, 1.0f);\n        CategoryTick t2 = new CategoryTick(c1, tb1, tba1, ta1, 1.0f);\n        assertTrue(t1.equals(t2));\n        int h1 = t1.hashCode();\n        int h2 = t2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 135,
        "end_line": 149,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 29)",
            "(line 137,col 9)-(line 137,col 40)",
            "(line 138,col 9)-(line 138,col 45)",
            "(line 139,col 9)-(line 139,col 45)",
            "(line 140,col 9)-(line 140,col 54)",
            "(line 141,col 9)-(line 141,col 43)",
            "(line 143,col 9)-(line 143,col 69)",
            "(line 144,col 9)-(line 144,col 69)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 146,col 9)-(line 146,col 31)",
            "(line 147,col 9)-(line 147,col 31)",
            "(line 148,col 9)-(line 148,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryTickTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryTickTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryTickTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CategoryTick t1 = new CategoryTick(\n            \"C1\", new TextBlock(), TextBlockAnchor.CENTER, \n            TextAnchor.CENTER, 1.5f\n        );\n        CategoryTick t2 = null;\n        try {\n            t2 = (CategoryTick) t1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(t1 != t2);\n        assertTrue(t1.getClass() == t2.getClass());\n        assertTrue(t1.equals(t2));\n    }",
        "begin_line": 154,
        "end_line": 169,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 158,col 10)",
            "(line 159,col 9)-(line 159,col 31)",
            "(line 160,col 9)-(line 165,col 9)",
            "(line 166,col 9)-(line 166,col 29)",
            "(line 167,col 9)-(line 167,col 51)",
            "(line 168,col 9)-(line 168,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryTickTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryTickTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryTickTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CategoryTick t1 = new CategoryTick(\n            \"C1\", new TextBlock(), TextBlockAnchor.CENTER, \n            TextAnchor.CENTER, 1.5f\n        );\n        CategoryTick t2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(t1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            t2 = (CategoryTick) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(t1, t2);\n\n    }",
        "begin_line": 174,
        "end_line": 199,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 179,col 10)",
            "(line 180,col 9)-(line 180,col 31)",
            "(line 182,col 9)-(line 196,col 9)",
            "(line 197,col 9)-(line 197,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelPositionsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelPositionsTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelPositionsTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryLabelPositionsTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelPositionsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelPositionsTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelPositionsTests.CategoryLabelPositionsTests(java.lang.String)",
        "snippet": "    public CategoryLabelPositionsTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelPositionsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelPositionsTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelPositionsTests.testEquals()",
        "snippet": "    public void testEquals() {\n        CategoryLabelPositions p1 = new CategoryLabelPositions(\n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER) \n        );\n        CategoryLabelPositions p2 = new CategoryLabelPositions(\n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER) \n        );\n        assertEquals(p1, p2);\n\n        p1 = new CategoryLabelPositions(\n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER) \n        );\n        assertTrue(!p1.equals(p2));\n        p2 = new CategoryLabelPositions(\n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER) \n        ); \n        assertTrue(p1.equals(p2));\n\n        p1 = new CategoryLabelPositions(\n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER) \n        );\n        assertTrue(!p1.equals(p2));\n        p2 = new CategoryLabelPositions(\n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER) \n        ); \n        assertTrue(p1.equals(p2));\n\n        p1 = new CategoryLabelPositions(\n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER) \n        );\n        assertTrue(!p1.equals(p2));\n        p2 = new CategoryLabelPositions(\n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER) \n        ); \n        assertTrue(p1.equals(p2));\n\n        p1 = new CategoryLabelPositions(\n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER) \n        );\n        assertTrue(!p1.equals(p2));\n        p2 = new CategoryLabelPositions(\n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER), \n            new CategoryLabelPosition(RA_BOTTOM, TextBlockAnchor.TOP_CENTER) \n        ); \n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 90,
        "end_line": 164,
        "comment": "\n     * Check that the equals method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 96,col 10)",
            "(line 97,col 9)-(line 102,col 10)",
            "(line 103,col 9)-(line 103,col 29)",
            "(line 105,col 9)-(line 110,col 10)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 117,col 10)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 120,col 9)-(line 125,col 10)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 132,col 10)",
            "(line 133,col 9)-(line 133,col 34)",
            "(line 135,col 9)-(line 140,col 10)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 147,col 10)",
            "(line 148,col 9)-(line 148,col 34)",
            "(line 150,col 9)-(line 155,col 10)",
            "(line 156,col 9)-(line 156,col 35)",
            "(line 157,col 9)-(line 162,col 10)",
            "(line 163,col 9)-(line 163,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelPositionsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelPositionsTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelPositionsTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        CategoryLabelPositions p1 = new CategoryLabelPositions(\n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER) \n        );\n        CategoryLabelPositions p2 = new CategoryLabelPositions(\n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER), \n            new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER) \n        );\n        assertTrue(p1.equals(p2));\n        int h1 = p1.hashCode();\n        int h2 = p2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 169,
        "end_line": 186,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 175,col 10)",
            "(line 176,col 9)-(line 181,col 10)",
            "(line 182,col 9)-(line 182,col 34)",
            "(line 183,col 9)-(line 183,col 31)",
            "(line 184,col 9)-(line 184,col 31)",
            "(line 185,col 9)-(line 185,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryLabelPositionsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryLabelPositionsTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryLabelPositionsTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CategoryLabelPositions p1 = CategoryLabelPositions.STANDARD;\n        CategoryLabelPositions p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CategoryLabelPositions) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(p1, p2);\n    }",
        "begin_line": 191,
        "end_line": 211,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 68)",
            "(line 194,col 9)-(line 194,col 41)",
            "(line 196,col 9)-(line 209,col 9)",
            "(line 210,col 9)-(line 210,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(NumberAxisTests.class);\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.NumberAxisTests(java.lang.String)",
        "snippet": "    public NumberAxisTests(String name) {\n        super(name);\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testCloning()",
        "snippet": "    public void testCloning() {\n        NumberAxis a1 = new NumberAxis(\"Test\");\n        NumberAxis a2 = null;\n        try {\n            a2 = (NumberAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 104,
        "end_line": 116,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 47)",
            "(line 106,col 9)-(line 106,col 29)",
            "(line 107,col 9)-(line 112,col 9)",
            "(line 113,col 9)-(line 113,col 29)",
            "(line 114,col 9)-(line 114,col 51)",
            "(line 115,col 9)-(line 115,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        NumberAxis a1 = new NumberAxis(\"Test\");\n        NumberAxis a2 = new NumberAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        \n        //private boolean autoRangeIncludesZero;\n        a1.setAutoRangeIncludesZero(false);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRangeIncludesZero(false);\n        assertTrue(a1.equals(a2));\n\n        //private boolean autoRangeStickyZero;\n        a1.setAutoRangeStickyZero(false);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRangeStickyZero(false);\n        assertTrue(a1.equals(a2));\n\n        //private NumberTickUnit tickUnit;\n        a1.setTickUnit(new NumberTickUnit(25.0));\n        assertFalse(a1.equals(a2));\n        a2.setTickUnit(new NumberTickUnit(25.0));\n        assertTrue(a1.equals(a2));\n\n        //private NumberFormat numberFormatOverride;\n        a1.setNumberFormatOverride(new DecimalFormat(\"0.00\"));\n        assertFalse(a1.equals(a2));\n        a2.setNumberFormatOverride(new DecimalFormat(\"0.00\"));\n        assertTrue(a1.equals(a2));\n        \n        a1.setRangeType(RangeType.POSITIVE);\n        assertFalse(a1.equals(a2));\n        a2.setRangeType(RangeType.POSITIVE);\n        assertTrue(a1.equals(a2));\n        \n    }",
        "begin_line": 121,
        "end_line": 156,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 47)",
            "(line 124,col 9)-(line 124,col 47)",
            "(line 125,col 9)-(line 125,col 34)",
            "(line 128,col 9)-(line 128,col 43)",
            "(line 129,col 9)-(line 129,col 35)",
            "(line 130,col 9)-(line 130,col 43)",
            "(line 131,col 9)-(line 131,col 34)",
            "(line 134,col 9)-(line 134,col 41)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 136,col 41)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 140,col 9)-(line 140,col 49)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 49)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 146,col 9)-(line 146,col 62)",
            "(line 147,col 9)-(line 147,col 35)",
            "(line 148,col 9)-(line 148,col 62)",
            "(line 149,col 9)-(line 149,col 34)",
            "(line 151,col 9)-(line 151,col 44)",
            "(line 152,col 9)-(line 152,col 35)",
            "(line 153,col 9)-(line 153,col 44)",
            "(line 154,col 9)-(line 154,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        NumberAxis a1 = new NumberAxis(\"Test\");\n        NumberAxis a2 = new NumberAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 161,
        "end_line": 168,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 47)",
            "(line 163,col 9)-(line 163,col 47)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 165,col 9)-(line 165,col 31)",
            "(line 166,col 9)-(line 166,col 31)",
            "(line 167,col 9)-(line 167,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testTranslateJava2DToValue()",
        "snippet": "    public void testTranslateJava2DToValue() {\n        NumberAxis axis = new NumberAxis();\n        axis.setRange(50.0, 100.0); \n        Rectangle2D dataArea = new Rectangle2D.Double(10.0, 50.0, 400.0, 300.0);\n        double y1 = axis.java2DToValue(75.0, dataArea, RectangleEdge.LEFT);  \n        assertEquals(y1, 95.8333333, EPSILON); \n        double y2 = axis.java2DToValue(75.0, dataArea, RectangleEdge.RIGHT);   \n        assertEquals(y2, 95.8333333, EPSILON); \n        double x1 = axis.java2DToValue(75.0, dataArea, RectangleEdge.TOP);   \n        assertEquals(x1, 58.125, EPSILON); \n        double x2 = axis.java2DToValue(75.0, dataArea, RectangleEdge.BOTTOM);   \n        assertEquals(x2, 58.125, EPSILON); \n        axis.setInverted(true);\n        double y3 = axis.java2DToValue(75.0, dataArea, RectangleEdge.LEFT);  \n        assertEquals(y3, 54.1666667, EPSILON); \n        double y4 = axis.java2DToValue(75.0, dataArea, RectangleEdge.RIGHT);   \n        assertEquals(y4, 54.1666667, EPSILON); \n        double x3 = axis.java2DToValue(75.0, dataArea, RectangleEdge.TOP);   \n        assertEquals(x3, 91.875, EPSILON); \n        double x4 = axis.java2DToValue(75.0, dataArea, RectangleEdge.BOTTOM);   \n        assertEquals(x4, 91.875, EPSILON); \n    }",
        "begin_line": 175,
        "end_line": 196,
        "comment": "\n     * Test the translation of Java2D values to data values.\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 43)",
            "(line 177,col 9)-(line 177,col 35)",
            "(line 178,col 9)-(line 178,col 80)",
            "(line 179,col 9)-(line 179,col 75)",
            "(line 180,col 9)-(line 180,col 46)",
            "(line 181,col 9)-(line 181,col 76)",
            "(line 182,col 9)-(line 182,col 46)",
            "(line 183,col 9)-(line 183,col 74)",
            "(line 184,col 9)-(line 184,col 42)",
            "(line 185,col 9)-(line 185,col 77)",
            "(line 186,col 9)-(line 186,col 42)",
            "(line 187,col 9)-(line 187,col 31)",
            "(line 188,col 9)-(line 188,col 75)",
            "(line 189,col 9)-(line 189,col 46)",
            "(line 190,col 9)-(line 190,col 76)",
            "(line 191,col 9)-(line 191,col 46)",
            "(line 192,col 9)-(line 192,col 74)",
            "(line 193,col 9)-(line 193,col 42)",
            "(line 194,col 9)-(line 194,col 77)",
            "(line 195,col 9)-(line 195,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        NumberAxis a1 = new NumberAxis(\"Test Axis\");\n        NumberAxis a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            a2 = (NumberAxis) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 201,
        "end_line": 222,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 52)",
            "(line 204,col 9)-(line 204,col 29)",
            "(line 206,col 9)-(line 219,col 9)",
            "(line 220,col 9)-(line 220,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testAutoRange1()",
        "snippet": "    public void testAutoRange1() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.setValue(100.0, \"Row 1\", \"Column 1\");\n        dataset.setValue(200.0, \"Row 1\", \"Column 2\");\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test\", \n            \"Categories\",\n            \"Value\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false, \n            false,\n            false\n        );\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        assertEquals(axis.getLowerBound(), 0.0, EPSILON);    \n        assertEquals(axis.getUpperBound(), 210.0, EPSILON);    \n    }",
        "begin_line": 228,
        "end_line": 246,
        "comment": "\n     * A simple test for the auto-range calculation looking at a\n     * NumberAxis used as the range axis for a CategoryPlot.\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 70)",
            "(line 230,col 9)-(line 230,col 53)",
            "(line 231,col 9)-(line 231,col 53)",
            "(line 232,col 9)-(line 241,col 10)",
            "(line 242,col 9)-(line 242,col 59)",
            "(line 243,col 9)-(line 243,col 59)",
            "(line 244,col 9)-(line 244,col 57)",
            "(line 245,col 9)-(line 245,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testAutoRange2()",
        "snippet": "    public void testAutoRange2() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.setValue(100.0, \"Row 1\", \"Column 1\");\n        dataset.setValue(200.0, \"Row 1\", \"Column 2\");\n        JFreeChart chart = ChartFactory.createLineChart(\"Test\", \"Categories\",\n                \"Value\", dataset, PlotOrientation.VERTICAL, false, false,\n                false);\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(axis.getLowerBound(), 95.0, EPSILON);    \n        assertEquals(axis.getUpperBound(), 205.0, EPSILON);    \n    }",
        "begin_line": 253,
        "end_line": 265,
        "comment": "\n     * A simple test for the auto-range calculation looking at a\n     * NumberAxis used as the range axis for a CategoryPlot.  In this\n     * case, the 'autoRangeIncludesZero' flag is set to false.\n     ",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 70)",
            "(line 255,col 9)-(line 255,col 53)",
            "(line 256,col 9)-(line 256,col 53)",
            "(line 257,col 9)-(line 259,col 23)",
            "(line 260,col 9)-(line 260,col 59)",
            "(line 261,col 9)-(line 261,col 59)",
            "(line 262,col 9)-(line 262,col 45)",
            "(line 263,col 9)-(line 263,col 58)",
            "(line 264,col 9)-(line 264,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testAutoRange3()",
        "snippet": "    public void testAutoRange3() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.setValue(100.0, \"Row 1\", \"Column 1\");\n        dataset.setValue(200.0, \"Row 1\", \"Column 2\");\n        JFreeChart chart = ChartFactory.createLineChart(\"Test\", \"Categories\",\n                \"Value\", dataset, PlotOrientation.VERTICAL, false, false,\n                false);\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(axis.getLowerBound(), 95.0, EPSILON);    \n        assertEquals(axis.getUpperBound(), 205.0, EPSILON);    \n        \n        // now replacing the dataset should update the axis range...\n        DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();\n        dataset2.setValue(900.0, \"Row 1\", \"Column 1\");\n        dataset2.setValue(1000.0, \"Row 1\", \"Column 2\");\n        plot.setDataset(dataset2);\n        assertEquals(axis.getLowerBound(), 895.0, EPSILON);    \n        assertEquals(axis.getUpperBound(), 1005.0, EPSILON);    \n    }",
        "begin_line": 273,
        "end_line": 293,
        "comment": "\n     * A simple test for the auto-range calculation looking at a\n     * NumberAxis used as the range axis for a CategoryPlot.  In this\n     * case, the 'autoRangeIncludesZero' flag is set to false AND the\n     * original dataset is replaced with a new dataset.\n     ",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 70)",
            "(line 275,col 9)-(line 275,col 53)",
            "(line 276,col 9)-(line 276,col 53)",
            "(line 277,col 9)-(line 279,col 23)",
            "(line 280,col 9)-(line 280,col 59)",
            "(line 281,col 9)-(line 281,col 59)",
            "(line 282,col 9)-(line 282,col 45)",
            "(line 283,col 9)-(line 283,col 58)",
            "(line 284,col 9)-(line 284,col 59)",
            "(line 287,col 9)-(line 287,col 71)",
            "(line 288,col 9)-(line 288,col 54)",
            "(line 289,col 9)-(line 289,col 55)",
            "(line 290,col 9)-(line 290,col 34)",
            "(line 291,col 9)-(line 291,col 59)",
            "(line 292,col 9)-(line 292,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testAutoRange4()",
        "snippet": "    public void testAutoRange4() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.setValue(100.0, \"Row 1\", \"Column 1\");\n        dataset.setValue(200.0, \"Row 1\", \"Column 2\");\n        JFreeChart chart = ChartFactory.createBarChart(\"Test\", \"Categories\",\n                \"Value\", dataset, PlotOrientation.VERTICAL, false, false,\n                false);\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        axis.setAutoRangeIncludesZero(false);\n        BarRenderer br = (BarRenderer) plot.getRenderer();\n        br.setIncludeBaseInRange(false);\n        assertEquals(95.0, axis.getLowerBound(), EPSILON);    \n        assertEquals(205.0, axis.getUpperBound(), EPSILON);    \n        \n        br.setIncludeBaseInRange(true);\n        assertEquals(0.0, axis.getLowerBound(), EPSILON);    \n        assertEquals(210.0, axis.getUpperBound(), EPSILON);    \n        \n        axis.setAutoRangeIncludesZero(true);\n        assertEquals(0.0, axis.getLowerBound(), EPSILON);    \n        assertEquals(210.0, axis.getUpperBound(), EPSILON);    \n        \n        br.setIncludeBaseInRange(true);\n        assertEquals(0.0, axis.getLowerBound(), EPSILON);    \n        assertEquals(210.0, axis.getUpperBound(), EPSILON);    \n\n        // now replacing the dataset should update the axis range...\n        DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();\n        dataset2.setValue(900.0, \"Row 1\", \"Column 1\");\n        dataset2.setValue(1000.0, \"Row 1\", \"Column 2\");\n        plot.setDataset(dataset2);\n        assertEquals(0.0, axis.getLowerBound(), EPSILON);    \n        assertEquals(1050.0, axis.getUpperBound(), EPSILON);\n        \n        br.setIncludeBaseInRange(false);\n        assertEquals(0.0, axis.getLowerBound(), EPSILON);    \n        assertEquals(1050.0, axis.getUpperBound(), EPSILON);\n        \n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(895.0, axis.getLowerBound(), EPSILON);    \n        assertEquals(1005.0, axis.getUpperBound(), EPSILON);        \n    }",
        "begin_line": 299,
        "end_line": 341,
        "comment": "\n     * A check for the interaction between the 'autoRangeIncludesZero' flag\n     * and the base setting in the BarRenderer.\n     ",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 70)",
            "(line 301,col 9)-(line 301,col 53)",
            "(line 302,col 9)-(line 302,col 53)",
            "(line 303,col 9)-(line 305,col 23)",
            "(line 306,col 9)-(line 306,col 59)",
            "(line 307,col 9)-(line 307,col 59)",
            "(line 308,col 9)-(line 308,col 45)",
            "(line 309,col 9)-(line 309,col 58)",
            "(line 310,col 9)-(line 310,col 40)",
            "(line 311,col 9)-(line 311,col 58)",
            "(line 312,col 9)-(line 312,col 59)",
            "(line 314,col 9)-(line 314,col 39)",
            "(line 315,col 9)-(line 315,col 57)",
            "(line 316,col 9)-(line 316,col 59)",
            "(line 318,col 9)-(line 318,col 44)",
            "(line 319,col 9)-(line 319,col 57)",
            "(line 320,col 9)-(line 320,col 59)",
            "(line 322,col 9)-(line 322,col 39)",
            "(line 323,col 9)-(line 323,col 57)",
            "(line 324,col 9)-(line 324,col 59)",
            "(line 327,col 9)-(line 327,col 71)",
            "(line 328,col 9)-(line 328,col 54)",
            "(line 329,col 9)-(line 329,col 55)",
            "(line 330,col 9)-(line 330,col 34)",
            "(line 331,col 9)-(line 331,col 57)",
            "(line 332,col 9)-(line 332,col 60)",
            "(line 334,col 9)-(line 334,col 40)",
            "(line 335,col 9)-(line 335,col 57)",
            "(line 336,col 9)-(line 336,col 60)",
            "(line 338,col 9)-(line 338,col 45)",
            "(line 339,col 9)-(line 339,col 59)",
            "(line 340,col 9)-(line 340,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testXYAutoRange1()",
        "snippet": "    public void testXYAutoRange1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\", \n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false, \n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getDomainAxis();\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(0.9, axis.getLowerBound(), EPSILON);    \n        assertEquals(3.1, axis.getUpperBound(), EPSILON);    \n    }",
        "begin_line": 347,
        "end_line": 369,
        "comment": "\n     * Checks that the auto-range for the domain axis on an XYPlot is\n     * working as expected.\n     ",
        "child_ranges": [
            "(line 348,col 9)-(line 348,col 51)",
            "(line 349,col 9)-(line 349,col 29)",
            "(line 350,col 9)-(line 350,col 29)",
            "(line 351,col 9)-(line 351,col 29)",
            "(line 352,col 9)-(line 352,col 62)",
            "(line 353,col 9)-(line 353,col 34)",
            "(line 354,col 9)-(line 363,col 10)",
            "(line 364,col 9)-(line 364,col 47)",
            "(line 365,col 9)-(line 365,col 60)",
            "(line 366,col 9)-(line 366,col 45)",
            "(line 367,col 9)-(line 367,col 57)",
            "(line 368,col 9)-(line 368,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testXYAutoRange2()",
        "snippet": "    public void testXYAutoRange2() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\", \n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false, \n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(0.9, axis.getLowerBound(), EPSILON);    \n        assertEquals(3.1, axis.getUpperBound(), EPSILON);    \n    }",
        "begin_line": 375,
        "end_line": 397,
        "comment": "\n     * Checks that the auto-range for the range axis on an XYPlot is\n     * working as expected.\n     ",
        "child_ranges": [
            "(line 376,col 9)-(line 376,col 51)",
            "(line 377,col 9)-(line 377,col 29)",
            "(line 378,col 9)-(line 378,col 29)",
            "(line 379,col 9)-(line 379,col 29)",
            "(line 380,col 9)-(line 380,col 62)",
            "(line 381,col 9)-(line 381,col 34)",
            "(line 382,col 9)-(line 391,col 10)",
            "(line 392,col 9)-(line 392,col 47)",
            "(line 393,col 9)-(line 393,col 59)",
            "(line 394,col 9)-(line 394,col 45)",
            "(line 395,col 9)-(line 395,col 57)",
            "(line 396,col 9)-(line 396,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testSetLowerBound()",
        "snippet": "    public void testSetLowerBound() {\n        NumberAxis axis = new NumberAxis(\"X\");\n        axis.setRange(0.0, 10.0);\n        axis.setLowerBound(5.0);\n        assertEquals(5.0, axis.getLowerBound(), EPSILON);\n        axis.setLowerBound(10.0);\n        assertEquals(10.0, axis.getLowerBound(), EPSILON);\n        assertEquals(11.0, axis.getUpperBound(), EPSILON);\n        \n        //axis.setRangeType(RangeType.POSITIVE);\n        //axis.setLowerBound(-5.0);\n        //assertEquals(0.0, axis.getLowerBound(), EPSILON);\n    }",
        "begin_line": 446,
        "end_line": 458,
        "comment": "\n     * Some checks for the setLowerBound() method.\n     ",
        "child_ranges": [
            "(line 447,col 9)-(line 447,col 46)",
            "(line 448,col 9)-(line 448,col 33)",
            "(line 449,col 9)-(line 449,col 32)",
            "(line 450,col 9)-(line 450,col 57)",
            "(line 451,col 9)-(line 451,col 33)",
            "(line 452,col 9)-(line 452,col 58)",
            "(line 453,col 9)-(line 453,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAnchorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAnchorTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAnchorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryAnchorTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAnchorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAnchorTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAnchorTests.CategoryAnchorTests(java.lang.String)",
        "snippet": "    public CategoryAnchorTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAnchorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAnchorTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAnchorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        assertEquals(CategoryAnchor.START, CategoryAnchor.START);\n        assertEquals(CategoryAnchor.MIDDLE, CategoryAnchor.MIDDLE);\n        assertEquals(CategoryAnchor.END, CategoryAnchor.END);\n        assertFalse(CategoryAnchor.START.equals(CategoryAnchor.END));\n        assertFalse(CategoryAnchor.MIDDLE.equals(CategoryAnchor.END));\n    }",
        "begin_line": 83,
        "end_line": 89,
        "comment": "\n     * Check that the equals() method distinguishes known instances.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 65)",
            "(line 85,col 9)-(line 85,col 67)",
            "(line 86,col 9)-(line 86,col 61)",
            "(line 87,col 9)-(line 87,col 69)",
            "(line 88,col 9)-(line 88,col 70)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAnchorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAnchorTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAnchorTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        CategoryAnchor a1 = CategoryAnchor.START;\n        CategoryAnchor a2 = CategoryAnchor.START;\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 94,
        "end_line": 101,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 49)",
            "(line 96,col 9)-(line 96,col 49)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 98,col 9)-(line 98,col 31)",
            "(line 99,col 9)-(line 99,col 31)",
            "(line 100,col 9)-(line 100,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.CategoryAnchorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/CategoryAnchorTests.java",
        "signature": "org.jfree.chart.axis.junit.CategoryAnchorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        CategoryAnchor a1 = CategoryAnchor.MIDDLE;\n        CategoryAnchor a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (CategoryAnchor) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(a1, a2);\n        assertTrue(a1 == a2);        \n    }",
        "begin_line": 106,
        "end_line": 127,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 50)",
            "(line 108,col 9)-(line 108,col 33)",
            "(line 110,col 9)-(line 124,col 9)",
            "(line 125,col 9)-(line 125,col 29)",
            "(line 126,col 9)-(line 126,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.PeriodAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/PeriodAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.PeriodAxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PeriodAxisTests.class);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.PeriodAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/PeriodAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.PeriodAxisTests.PeriodAxisTests(java.lang.String)",
        "snippet": "    public PeriodAxisTests(String name) {\n        super(name);\n    }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.PeriodAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/PeriodAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.PeriodAxisTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        PeriodAxis a1 = new PeriodAxis(\"Test\");\n        PeriodAxis a2 = new PeriodAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        assertTrue(a2.equals(a1));\n        \n        a1.setFirst(new Year(2000));\n        assertFalse(a1.equals(a2));\n        a2.setFirst(new Year(2000));\n        assertTrue(a1.equals(a2));\n        \n        a1.setLast(new Year(2004));\n        assertFalse(a1.equals(a2));\n        a2.setLast(new Year(2004));\n        assertTrue(a1.equals(a2));\n\n        a1.setTimeZone(TimeZone.getTimeZone(\"Pacific/Auckland\"));\n        assertFalse(a1.equals(a2));\n        a2.setTimeZone(TimeZone.getTimeZone(\"Pacific/Auckland\"));\n        assertTrue(a1.equals(a2));\n        \n        a1.setAutoRangeTimePeriodClass(Quarter.class);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRangeTimePeriodClass(Quarter.class);\n        assertTrue(a1.equals(a2));\n        \n        PeriodAxisLabelInfo info[] = new PeriodAxisLabelInfo[1];\n        info[0] = new PeriodAxisLabelInfo(\n            Month.class, new SimpleDateFormat(\"MMM\")\n        );\n        \n        a1.setLabelInfo(info);\n        assertFalse(a1.equals(a2));\n        a2.setLabelInfo(info);\n        assertTrue(a1.equals(a2));\n        \n        a1.setMajorTickTimePeriodClass(Minute.class);\n        assertFalse(a1.equals(a2));\n        a2.setMajorTickTimePeriodClass(Minute.class);\n        assertTrue(a1.equals(a2));\n        \n        a1.setMinorTickMarksVisible(!a1.isMinorTickMarksVisible());\n        assertFalse(a1.equals(a2));\n        a2.setMinorTickMarksVisible(a1.isMinorTickMarksVisible());\n        assertTrue(a1.equals(a2));\n        \n        a1.setMinorTickTimePeriodClass(Minute.class);\n        assertFalse(a1.equals(a2));\n        a2.setMinorTickTimePeriodClass(Minute.class);\n        assertTrue(a1.equals(a2));\n\n        Stroke s = new BasicStroke(1.23f);\n        a1.setMinorTickMarkStroke(s);\n        assertFalse(a1.equals(a2));\n        a2.setMinorTickMarkStroke(s);\n        assertTrue(a1.equals(a2));\n    \n        a1.setMinorTickMarkPaint(Color.blue);\n        assertFalse(a1.equals(a2));\n        a2.setMinorTickMarkPaint(Color.blue);\n        assertTrue(a1.equals(a2));\n    \n    }",
        "begin_line": 96,
        "end_line": 159,
        "comment": "\n     * Confirm that the equals() method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 47)",
            "(line 99,col 9)-(line 99,col 47)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 103,col 9)-(line 103,col 36)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 105,col 36)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 113,col 9)-(line 113,col 65)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 65)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 118,col 9)-(line 118,col 54)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 120,col 54)",
            "(line 121,col 9)-(line 121,col 34)",
            "(line 123,col 9)-(line 123,col 64)",
            "(line 124,col 9)-(line 126,col 10)",
            "(line 128,col 9)-(line 128,col 30)",
            "(line 129,col 9)-(line 129,col 35)",
            "(line 130,col 9)-(line 130,col 30)",
            "(line 131,col 9)-(line 131,col 34)",
            "(line 133,col 9)-(line 133,col 53)",
            "(line 134,col 9)-(line 134,col 35)",
            "(line 135,col 9)-(line 135,col 53)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 138,col 9)-(line 138,col 67)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 140,col 9)-(line 140,col 66)",
            "(line 141,col 9)-(line 141,col 34)",
            "(line 143,col 9)-(line 143,col 53)",
            "(line 144,col 9)-(line 144,col 35)",
            "(line 145,col 9)-(line 145,col 53)",
            "(line 146,col 9)-(line 146,col 34)",
            "(line 148,col 9)-(line 148,col 42)",
            "(line 149,col 9)-(line 149,col 37)",
            "(line 150,col 9)-(line 150,col 35)",
            "(line 151,col 9)-(line 151,col 37)",
            "(line 152,col 9)-(line 152,col 34)",
            "(line 154,col 9)-(line 154,col 45)",
            "(line 155,col 9)-(line 155,col 35)",
            "(line 156,col 9)-(line 156,col 45)",
            "(line 157,col 9)-(line 157,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.PeriodAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/PeriodAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.PeriodAxisTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        PeriodAxis a1 = new PeriodAxis(\"Test\");\n        PeriodAxis a2 = new PeriodAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }    ",
        "begin_line": 164,
        "end_line": 171,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 47)",
            "(line 166,col 9)-(line 166,col 47)",
            "(line 167,col 9)-(line 167,col 34)",
            "(line 168,col 9)-(line 168,col 31)",
            "(line 169,col 9)-(line 169,col 31)",
            "(line 170,col 9)-(line 170,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.PeriodAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/PeriodAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.PeriodAxisTests.testCloning()",
        "snippet": "    public void testCloning() {\n        PeriodAxis a1 = new PeriodAxis(\"Test\");\n        PeriodAxis a2 = null;\n        try {\n            a2 = (PeriodAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n        \n        // some checks that the clone is independent of the original\n        a1.setLabel(\"New Label\");\n        assertFalse(a1.equals(a2));\n        a2.setLabel(\"New Label\");\n        assertTrue(a1.equals(a2));\n        \n        a1.setFirst(new Year(1920));\n        assertFalse(a1.equals(a2));\n        a2.setFirst(new Year(1920));\n        assertTrue(a1.equals(a2));\n\n        a1.setLast(new Year(2020));\n        assertFalse(a1.equals(a2));\n        a2.setLast(new Year(2020));\n        assertTrue(a1.equals(a2));\n\n        PeriodAxisLabelInfo[] info = new PeriodAxisLabelInfo[2];\n        info[0] = new PeriodAxisLabelInfo(Day.class, new SimpleDateFormat(\"d\"));\n        info[1] = new PeriodAxisLabelInfo(\n            Year.class, new SimpleDateFormat(\"yyyy\")\n        );\n        a1.setLabelInfo(info);\n        assertFalse(a1.equals(a2));\n        a2.setLabelInfo(info);\n        assertTrue(a1.equals(a2));\n\n        a1.setAutoRangeTimePeriodClass(Second.class);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRangeTimePeriodClass(Second.class);\n        assertTrue(a1.equals(a2));\n\n        a1.setTimeZone(new SimpleTimeZone(123, \"Bogus\"));\n        assertFalse(a1.equals(a2));\n        a2.setTimeZone(new SimpleTimeZone(123, \"Bogus\"));\n        assertTrue(a1.equals(a2));\n\n    }",
        "begin_line": 176,
        "end_line": 225,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 47)",
            "(line 178,col 9)-(line 178,col 29)",
            "(line 179,col 9)-(line 184,col 9)",
            "(line 185,col 9)-(line 185,col 29)",
            "(line 186,col 9)-(line 186,col 51)",
            "(line 187,col 9)-(line 187,col 34)",
            "(line 190,col 9)-(line 190,col 33)",
            "(line 191,col 9)-(line 191,col 35)",
            "(line 192,col 9)-(line 192,col 33)",
            "(line 193,col 9)-(line 193,col 34)",
            "(line 195,col 9)-(line 195,col 36)",
            "(line 196,col 9)-(line 196,col 35)",
            "(line 197,col 9)-(line 197,col 36)",
            "(line 198,col 9)-(line 198,col 34)",
            "(line 200,col 9)-(line 200,col 35)",
            "(line 201,col 9)-(line 201,col 35)",
            "(line 202,col 9)-(line 202,col 35)",
            "(line 203,col 9)-(line 203,col 34)",
            "(line 205,col 9)-(line 205,col 64)",
            "(line 206,col 9)-(line 206,col 80)",
            "(line 207,col 9)-(line 209,col 10)",
            "(line 210,col 9)-(line 210,col 30)",
            "(line 211,col 9)-(line 211,col 35)",
            "(line 212,col 9)-(line 212,col 30)",
            "(line 213,col 9)-(line 213,col 34)",
            "(line 215,col 9)-(line 215,col 53)",
            "(line 216,col 9)-(line 216,col 35)",
            "(line 217,col 9)-(line 217,col 53)",
            "(line 218,col 9)-(line 218,col 34)",
            "(line 220,col 9)-(line 220,col 57)",
            "(line 221,col 9)-(line 221,col 35)",
            "(line 222,col 9)-(line 222,col 57)",
            "(line 223,col 9)-(line 223,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.PeriodAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/PeriodAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.PeriodAxisTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        PeriodAxis a1 = new PeriodAxis(\"Test Axis\");\n        PeriodAxis a2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (PeriodAxis) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        boolean b = a1.equals(a2);\n        assertTrue(b);\n    }",
        "begin_line": 230,
        "end_line": 250,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 231,col 9)-(line 231,col 52)",
            "(line 232,col 9)-(line 232,col 29)",
            "(line 233,col 9)-(line 247,col 9)",
            "(line 248,col 9)-(line 248,col 34)",
            "(line 249,col 9)-(line 249,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.PieSectionEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/PieSectionEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.PieSectionEntityTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PieSectionEntityTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.PieSectionEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/PieSectionEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.PieSectionEntityTests.PieSectionEntityTests(java.lang.String)",
        "snippet": "    public PieSectionEntityTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.PieSectionEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/PieSectionEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.PieSectionEntityTests.testEquals()",
        "snippet": "    public void testEquals() {\n        PieSectionEntity e1 = new PieSectionEntity(\n            new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n            new DefaultPieDataset(), 1, 2, \"Key\", \"ToolTip\", \"URL\"\n        ); \n        PieSectionEntity e2 = new PieSectionEntity(\n            new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n            new DefaultPieDataset(), 1, 2, \"Key\", \"ToolTip\", \"URL\"\n        ); \n        assertTrue(e1.equals(e2));  \n        \n        e1.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertFalse(e1.equals(e2));\n        e2.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(e1.equals(e2));  \n\n        e1.setToolTipText(\"New ToolTip\");\n        assertFalse(e1.equals(e2));\n        e2.setToolTipText(\"New ToolTip\");\n        assertTrue(e1.equals(e2));  \n\n        e1.setURLText(\"New URL\");\n        assertFalse(e1.equals(e2));\n        e2.setURLText(\"New URL\");\n        assertTrue(e1.equals(e2));  \n    }",
        "begin_line": 84,
        "end_line": 109,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 88,col 10)",
            "(line 89,col 9)-(line 92,col 10)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 95,col 9)-(line 95,col 63)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 63)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 100,col 9)-(line 100,col 41)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 41)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 105,col 9)-(line 105,col 33)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 107,col 33)",
            "(line 108,col 9)-(line 108,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.PieSectionEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/PieSectionEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.PieSectionEntityTests.testCloning()",
        "snippet": "    public void testCloning() {\n        PieSectionEntity e1 = new PieSectionEntity(\n            new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n            new DefaultPieDataset(), 1, 2, \"Key\", \"ToolTip\", \"URL\"\n        ); \n        PieSectionEntity e2 = null;\n        try {\n            e2 = (PieSectionEntity) e1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(e1 != e2);\n        assertTrue(e1.getClass() == e2.getClass());\n        assertTrue(e1.equals(e2));\n    }",
        "begin_line": 114,
        "end_line": 129,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 118,col 10)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 125,col 9)",
            "(line 126,col 9)-(line 126,col 29)",
            "(line 127,col 9)-(line 127,col 51)",
            "(line 128,col 9)-(line 128,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.PieSectionEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/PieSectionEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.PieSectionEntityTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        PieSectionEntity e1 = new PieSectionEntity(\n            new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n            new DefaultPieDataset(), 1, 2, \"Key\", \"ToolTip\", \"URL\"\n        ); \n        PieSectionEntity e2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(e1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            e2 = (PieSectionEntity) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(e1, e2);\n    }",
        "begin_line": 134,
        "end_line": 156,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 138,col 10)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 140,col 9)-(line 154,col 9)",
            "(line 155,col 9)-(line 155,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.LegendItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/LegendItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.LegendItemEntityTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LegendItemEntityTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.LegendItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/LegendItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.LegendItemEntityTests.LegendItemEntityTests(java.lang.String)",
        "snippet": "    public LegendItemEntityTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.LegendItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/LegendItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.LegendItemEntityTests.testEquals()",
        "snippet": "    public void testEquals() {\n        LegendItemEntity e1 = new LegendItemEntity(new Rectangle2D.Double(1.0, \n                2.0, 3.0, 4.0)); \n        LegendItemEntity e2 = new LegendItemEntity(new Rectangle2D.Double(1.0,\n                2.0, 3.0, 4.0)); \n        assertTrue(e1.equals(e2));  \n        \n        e1.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertFalse(e1.equals(e2));\n        e2.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(e1.equals(e2));  \n\n        e1.setToolTipText(\"New ToolTip\");\n        assertFalse(e1.equals(e2));\n        e2.setToolTipText(\"New ToolTip\");\n        assertTrue(e1.equals(e2));  \n\n        e1.setURLText(\"New URL\");\n        assertFalse(e1.equals(e2));\n        e2.setURLText(\"New URL\");\n        assertTrue(e1.equals(e2));\n        \n        e1.setDataset(new DefaultCategoryDataset());\n        assertFalse(e1.equals(e2));\n        e2.setDataset(new DefaultCategoryDataset());\n        assertTrue(e1.equals(e2));\n        \n        e1.setSeriesKey(\"A\");\n        assertFalse(e1.equals(e2));\n        e2.setSeriesKey(\"A\");\n        assertTrue(e1.equals(e2));\n    }",
        "begin_line": 85,
        "end_line": 116,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 87,col 32)",
            "(line 88,col 9)-(line 89,col 32)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 92,col 9)-(line 92,col 63)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 94,col 63)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 97,col 9)-(line 97,col 41)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 41)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 102,col 33)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 33)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 107,col 9)-(line 107,col 52)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 52)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 112,col 9)-(line 112,col 29)",
            "(line 113,col 9)-(line 113,col 35)",
            "(line 114,col 9)-(line 114,col 29)",
            "(line 115,col 9)-(line 115,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.LegendItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/LegendItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.LegendItemEntityTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LegendItemEntity e1 = new LegendItemEntity(new Rectangle2D.Double(1.0, \n                2.0, 3.0, 4.0)); \n        LegendItemEntity e2 = null;\n        \n        try {\n            e2 = (LegendItemEntity) e1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(e1 != e2);\n        assertTrue(e1.getClass() == e2.getClass());\n        assertTrue(e1.equals(e2));\n    }",
        "begin_line": 121,
        "end_line": 135,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 122,col 9)-(line 123,col 32)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 126,col 9)-(line 131,col 9)",
            "(line 132,col 9)-(line 132,col 29)",
            "(line 133,col 9)-(line 133,col 51)",
            "(line 134,col 9)-(line 134,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.LegendItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/LegendItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.LegendItemEntityTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        LegendItemEntity e1 = new LegendItemEntity(new Rectangle2D.Double(1.0, \n                2.0, 3.0, 4.0)); \n        LegendItemEntity e2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(e1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            e2 = (LegendItemEntity) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(e1, e2);\n    }",
        "begin_line": 140,
        "end_line": 159,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 142,col 32)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 157,col 9)",
            "(line 158,col 9)-(line 158,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.EntityPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/EntityPackageTests.java",
        "signature": "org.jfree.chart.entity.junit.EntityPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.chart.entity\");\n        suite.addTestSuite(CategoryItemEntityTests.class);\n        suite.addTestSuite(LegendItemEntityTests.class);\n        suite.addTestSuite(PieSectionEntityTests.class);\n        suite.addTestSuite(StandardEntityCollectionTests.class);\n        suite.addTestSuite(TickLabelEntityTests.class);\n        suite.addTestSuite(XYItemEntityTests.class);\n        return suite;\n    }",
        "begin_line": 61,
        "end_line": 70,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 66)",
            "(line 63,col 9)-(line 63,col 58)",
            "(line 64,col 9)-(line 64,col 56)",
            "(line 65,col 9)-(line 65,col 56)",
            "(line 66,col 9)-(line 66,col 64)",
            "(line 67,col 9)-(line 67,col 55)",
            "(line 68,col 9)-(line 68,col 52)",
            "(line 69,col 9)-(line 69,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.EntityPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/EntityPackageTests.java",
        "signature": "org.jfree.chart.entity.junit.EntityPackageTests.EntityPackageTests(java.lang.String)",
        "snippet": "    public EntityPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the suite name.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.EntityPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/EntityPackageTests.java",
        "signature": "org.jfree.chart.entity.junit.EntityPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.TickLabelEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/TickLabelEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.TickLabelEntityTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TickLabelEntityTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.TickLabelEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/TickLabelEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.TickLabelEntityTests.TickLabelEntityTests(java.lang.String)",
        "snippet": "    public TickLabelEntityTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.TickLabelEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/TickLabelEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.TickLabelEntityTests.testEquals()",
        "snippet": "    public void testEquals() {\n        TickLabelEntity e1 = new TickLabelEntity(\n            new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \"ToolTip\", \"URL\"\n        ); \n        TickLabelEntity e2 = new TickLabelEntity(\n            new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \"ToolTip\", \"URL\"\n        ); \n        assertTrue(e1.equals(e2));  \n        \n        e1.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertFalse(e1.equals(e2));\n        e2.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(e1.equals(e2));  \n\n        e1.setToolTipText(\"New ToolTip\");\n        assertFalse(e1.equals(e2));\n        e2.setToolTipText(\"New ToolTip\");\n        assertTrue(e1.equals(e2));  \n\n        e1.setURLText(\"New URL\");\n        assertFalse(e1.equals(e2));\n        e2.setURLText(\"New URL\");\n        assertTrue(e1.equals(e2));  \n    }",
        "begin_line": 83,
        "end_line": 106,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 86,col 10)",
            "(line 87,col 9)-(line 89,col 10)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 92,col 9)-(line 92,col 63)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 94,col 63)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 97,col 9)-(line 97,col 41)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 41)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 102,col 33)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 33)",
            "(line 105,col 9)-(line 105,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.TickLabelEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/TickLabelEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.TickLabelEntityTests.testCloning()",
        "snippet": "    public void testCloning() {\n        TickLabelEntity e1 = new TickLabelEntity(\n            new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \"ToolTip\", \"URL\"\n        ); \n        TickLabelEntity e2 = null;\n        try {\n            e2 = (TickLabelEntity) e1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(e1 != e2);\n        assertTrue(e1.getClass() == e2.getClass());\n        assertTrue(e1.equals(e2));\n    }",
        "begin_line": 111,
        "end_line": 125,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 114,col 10)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 116,col 9)-(line 121,col 9)",
            "(line 122,col 9)-(line 122,col 29)",
            "(line 123,col 9)-(line 123,col 51)",
            "(line 124,col 9)-(line 124,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.TickLabelEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/TickLabelEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.TickLabelEntityTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        TickLabelEntity e1 = new TickLabelEntity(\n            new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \"ToolTip\", \"URL\"\n        ); \n        TickLabelEntity e2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(e1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            e2 = (TickLabelEntity) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(e1, e2);\n    }",
        "begin_line": 130,
        "end_line": 151,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 133,col 10)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 135,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 150,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.XYItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/XYItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.XYItemEntityTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYItemEntityTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.XYItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/XYItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.XYItemEntityTests.XYItemEntityTests(java.lang.String)",
        "snippet": "    public XYItemEntityTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.XYItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/XYItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.XYItemEntityTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYItemEntity e1 = new XYItemEntity(\n            new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0),\n            new TimeSeriesCollection(), 1, 9, \"ToolTip\", \"URL\"\n        ); \n        XYItemEntity e2 = new XYItemEntity(\n            new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0),\n            new TimeSeriesCollection(), 1, 9, \"ToolTip\", \"URL\"\n        ); \n        assertTrue(e1.equals(e2));  \n        \n        e1.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertFalse(e1.equals(e2));\n        e2.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(e1.equals(e2));  \n\n        e1.setToolTipText(\"New ToolTip\");\n        assertFalse(e1.equals(e2));\n        e2.setToolTipText(\"New ToolTip\");\n        assertTrue(e1.equals(e2));  \n\n        e1.setURLText(\"New URL\");\n        assertFalse(e1.equals(e2));\n        e2.setURLText(\"New URL\");\n        assertTrue(e1.equals(e2));  \n        \n        e1.setSeriesIndex(88);\n        assertFalse(e1.equals(e2));\n        e2.setSeriesIndex(88);\n        assertTrue(e1.equals(e2)); \n        \n        e1.setItem(88);\n        assertFalse(e1.equals(e2));\n        e2.setItem(88);\n        assertTrue(e1.equals(e2)); \n        \n    }",
        "begin_line": 84,
        "end_line": 120,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 88,col 10)",
            "(line 89,col 9)-(line 92,col 10)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 95,col 9)-(line 95,col 63)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 63)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 100,col 9)-(line 100,col 41)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 41)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 105,col 9)-(line 105,col 33)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 107,col 33)",
            "(line 108,col 9)-(line 108,col 34)",
            "(line 110,col 9)-(line 110,col 30)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 30)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 115,col 9)-(line 115,col 23)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 117,col 23)",
            "(line 118,col 9)-(line 118,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.XYItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/XYItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.XYItemEntityTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYItemEntity e1 = new XYItemEntity(\n            new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0),\n            new TimeSeriesCollection(), 1, 9, \"ToolTip\", \"URL\"\n        ); \n        XYItemEntity e2 = null;\n        \n        try {\n            e2 = (XYItemEntity) e1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(e1 != e2);\n        assertTrue(e1.getClass() == e2.getClass());\n        assertTrue(e1.equals(e2));\n    }",
        "begin_line": 125,
        "end_line": 141,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 126,col 9)-(line 129,col 10)",
            "(line 130,col 9)-(line 130,col 31)",
            "(line 132,col 9)-(line 137,col 9)",
            "(line 138,col 9)-(line 138,col 29)",
            "(line 139,col 9)-(line 139,col 51)",
            "(line 140,col 9)-(line 140,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.XYItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/XYItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.XYItemEntityTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        XYItemEntity e1 = new XYItemEntity(\n            new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0),\n            new TimeSeriesCollection(), 1, 9, \"ToolTip\", \"URL\"\n        ); \n        XYItemEntity e2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(e1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            e2 = (XYItemEntity) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(e1, e2);\n    }",
        "begin_line": 146,
        "end_line": 168,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 150,col 10)",
            "(line 151,col 9)-(line 151,col 31)",
            "(line 152,col 9)-(line 166,col 9)",
            "(line 167,col 9)-(line 167,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.CategoryItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/CategoryItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.CategoryItemEntityTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryItemEntityTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.CategoryItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/CategoryItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.CategoryItemEntityTests.CategoryItemEntityTests(java.lang.String)",
        "snippet": "    public CategoryItemEntityTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.CategoryItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/CategoryItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.CategoryItemEntityTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(1.0, \"R1\", \"C1\");\n        d.addValue(2.0, \"R1\", \"C2\");\n        d.addValue(3.0, \"R2\", \"C1\");\n        d.addValue(4.0, \"R2\", \"C2\");\n        CategoryItemEntity e1 = new CategoryItemEntity(new Rectangle2D.Double(\n                1.0, 2.0, 3.0, 4.0), \"ToolTip\", \"URL\", d, \"R2\", \"C2\"); \n        CategoryItemEntity e2 = new CategoryItemEntity(new Rectangle2D.Double(\n                1.0, 2.0, 3.0, 4.0), \"ToolTip\", \"URL\", d, \"R2\", \"C2\"); \n        assertTrue(e1.equals(e2));  \n        \n        e1.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertFalse(e1.equals(e2));\n        e2.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(e1.equals(e2));  \n\n        e1.setToolTipText(\"New ToolTip\");\n        assertFalse(e1.equals(e2));\n        e2.setToolTipText(\"New ToolTip\");\n        assertTrue(e1.equals(e2));  \n\n        e1.setURLText(\"New URL\");\n        assertFalse(e1.equals(e2));\n        e2.setURLText(\"New URL\");\n        assertTrue(e1.equals(e2));  \n        \n        e1.setColumnKey(\"C1\");\n        assertFalse(e1.equals(e2));\n        e2.setColumnKey(\"C1\");\n        assertTrue(e1.equals(e2)); \n        \n        e1.setRowKey(\"R1\");\n        assertFalse(e1.equals(e2));\n        e2.setRowKey(\"R1\");\n        assertTrue(e1.equals(e2)); \n        \n    }",
        "begin_line": 85,
        "end_line": 122,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 64)",
            "(line 87,col 9)-(line 87,col 36)",
            "(line 88,col 9)-(line 88,col 36)",
            "(line 89,col 9)-(line 89,col 36)",
            "(line 90,col 9)-(line 90,col 36)",
            "(line 91,col 9)-(line 92,col 70)",
            "(line 93,col 9)-(line 94,col 70)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 97,col 9)-(line 97,col 63)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 63)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 102,col 41)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 41)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 107,col 9)-(line 107,col 33)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 33)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 112,col 9)-(line 112,col 30)",
            "(line 113,col 9)-(line 113,col 35)",
            "(line 114,col 9)-(line 114,col 30)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 117,col 9)-(line 117,col 27)",
            "(line 118,col 9)-(line 118,col 35)",
            "(line 119,col 9)-(line 119,col 27)",
            "(line 120,col 9)-(line 120,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.CategoryItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/CategoryItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.CategoryItemEntityTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(1.0, \"R1\", \"C1\");\n        d.addValue(2.0, \"R1\", \"C2\");\n        d.addValue(3.0, \"R2\", \"C1\");\n        d.addValue(4.0, \"R2\", \"C2\");\n        CategoryItemEntity e1 = new CategoryItemEntity(new Rectangle2D.Double(\n                1.0, 2.0, 3.0, 4.0), \"ToolTip\", \"URL\", d, \"C2\", \"C2\"); \n        CategoryItemEntity e2 = null;\n        \n        try {\n            e2 = (CategoryItemEntity) e1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(e1 != e2);\n        assertTrue(e1.getClass() == e2.getClass());\n        assertTrue(e1.equals(e2));\n    }",
        "begin_line": 127,
        "end_line": 146,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 64)",
            "(line 129,col 9)-(line 129,col 36)",
            "(line 130,col 9)-(line 130,col 36)",
            "(line 131,col 9)-(line 131,col 36)",
            "(line 132,col 9)-(line 132,col 36)",
            "(line 133,col 9)-(line 134,col 70)",
            "(line 135,col 9)-(line 135,col 37)",
            "(line 137,col 9)-(line 142,col 9)",
            "(line 143,col 9)-(line 143,col 29)",
            "(line 144,col 9)-(line 144,col 51)",
            "(line 145,col 9)-(line 145,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.CategoryItemEntityTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/CategoryItemEntityTests.java",
        "signature": "org.jfree.chart.entity.junit.CategoryItemEntityTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(1.0, \"R1\", \"C1\");\n        d.addValue(2.0, \"R1\", \"C2\");\n        d.addValue(3.0, \"R2\", \"C1\");\n        d.addValue(4.0, \"R2\", \"C2\");\n        CategoryItemEntity e1 = new CategoryItemEntity(new Rectangle2D.Double(\n                1.0, 2.0, 3.0, 4.0), \"ToolTip\", \"URL\", d, \"R2\", \"C2\"); \n        CategoryItemEntity e2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(e1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            e2 = (CategoryItemEntity) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(e1, e2);\n    }",
        "begin_line": 151,
        "end_line": 175,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 64)",
            "(line 153,col 9)-(line 153,col 36)",
            "(line 154,col 9)-(line 154,col 36)",
            "(line 155,col 9)-(line 155,col 36)",
            "(line 156,col 9)-(line 156,col 36)",
            "(line 157,col 9)-(line 158,col 70)",
            "(line 159,col 9)-(line 159,col 37)",
            "(line 160,col 9)-(line 173,col 9)",
            "(line 174,col 9)-(line 174,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.StandardEntityCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/StandardEntityCollectionTests.java",
        "signature": "org.jfree.chart.entity.junit.StandardEntityCollectionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardEntityCollectionTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 66)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.StandardEntityCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/StandardEntityCollectionTests.java",
        "signature": "org.jfree.chart.entity.junit.StandardEntityCollectionTests.StandardEntityCollectionTests(java.lang.String)",
        "snippet": "    public StandardEntityCollectionTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.StandardEntityCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/StandardEntityCollectionTests.java",
        "signature": "org.jfree.chart.entity.junit.StandardEntityCollectionTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StandardEntityCollection c1 = new StandardEntityCollection();\n        StandardEntityCollection c2 = new StandardEntityCollection();\n        assertTrue(c1.equals(c2));\n        \n        PieSectionEntity e1 = new PieSectionEntity(new Rectangle2D.Double(1.0, \n                2.0, 3.0, 4.0), new DefaultPieDataset(), 0, 1, \"Key\", \n                \"ToolTip\", \"URL\");\n        c1.add(e1);\n        assertFalse(c1.equals(c2));\n        PieSectionEntity e2 = new PieSectionEntity(new Rectangle2D.Double(1.0, \n                2.0, 3.0, 4.0), new DefaultPieDataset(), 0, 1, \"Key\", \n                \"ToolTip\", \"URL\");\n        c2.add(e2);\n        assertTrue(c1.equals(c2));        \n    }",
        "begin_line": 85,
        "end_line": 100,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 69)",
            "(line 87,col 9)-(line 87,col 69)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 90,col 9)-(line 92,col 34)",
            "(line 93,col 9)-(line 93,col 19)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 97,col 34)",
            "(line 98,col 9)-(line 98,col 19)",
            "(line 99,col 9)-(line 99,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.StandardEntityCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/StandardEntityCollectionTests.java",
        "signature": "org.jfree.chart.entity.junit.StandardEntityCollectionTests.testCloning()",
        "snippet": "    public void testCloning() {\n        PieSectionEntity e1 = new PieSectionEntity(new Rectangle2D.Double(1.0, \n                2.0, 3.0, 4.0), new DefaultPieDataset(), 0, 1, \"Key\", \n                \"ToolTip\", \"URL\");\n        StandardEntityCollection c1 = new StandardEntityCollection();\n        c1.add(e1);\n        StandardEntityCollection c2 = null;\n        try {\n            c2 = (StandardEntityCollection) c1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n        \n        // check independence\n        c1.clear();\n        assertFalse(c1.equals(c2));\n        c2.clear();\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 105,
        "end_line": 127,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 108,col 34)",
            "(line 109,col 9)-(line 109,col 69)",
            "(line 110,col 9)-(line 110,col 19)",
            "(line 111,col 9)-(line 111,col 43)",
            "(line 112,col 9)-(line 117,col 9)",
            "(line 118,col 9)-(line 118,col 29)",
            "(line 119,col 9)-(line 119,col 51)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 123,col 9)-(line 123,col 19)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 125,col 19)",
            "(line 126,col 9)-(line 126,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.entity.junit.StandardEntityCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/entity/junit/StandardEntityCollectionTests.java",
        "signature": "org.jfree.chart.entity.junit.StandardEntityCollectionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        PieSectionEntity e1 = new PieSectionEntity(new Rectangle2D.Double(1.0, \n                2.0, 3.0, 4.0), new DefaultPieDataset(), 0, 1, \"Key\", \n                \"ToolTip\", \"URL\");\n        StandardEntityCollection c1 = new StandardEntityCollection();\n        c1.add(e1);\n        StandardEntityCollection c2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            c2 = (StandardEntityCollection) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n    }",
        "begin_line": 132,
        "end_line": 154,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 135,col 34)",
            "(line 136,col 9)-(line 136,col 69)",
            "(line 137,col 9)-(line 137,col 19)",
            "(line 138,col 9)-(line 138,col 43)",
            "(line 139,col 9)-(line 152,col 9)",
            "(line 153,col 9)-(line 153,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BarChart3DTests.class);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.BarChart3DTests(java.lang.String)",
        "snippet": "    public BarChart3DTests(String name) {\n        super(name);\n    }",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createBarChart3D();\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 109,
        "end_line": 124,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 32)",
            "(line 111,col 9)-(line 122,col 9)",
            "(line 123,col 9)-(line 123,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 129,
        "end_line": 152,
        "comment": "\n     * Replaces the dataset and checks that the data range is as expected.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 135,col 49)",
            "(line 137,col 9)-(line 138,col 27)",
            "(line 140,col 9)-(line 140,col 46)",
            "(line 141,col 9)-(line 141,col 40)",
            "(line 142,col 9)-(line 142,col 64)",
            "(line 143,col 9)-(line 143,col 33)",
            "(line 144,col 9)-(line 144,col 35)",
            "(line 145,col 9)-(line 145,col 45)",
            "(line 146,col 9)-(line 146,col 38)",
            "(line 147,col 9)-(line 148,col 71)",
            "(line 149,col 9)-(line 150,col 70)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 158,
        "end_line": 166,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 64)",
            "(line 160,col 9)-(line 160,col 59)",
            "(line 161,col 9)-(line 162,col 57)",
            "(line 163,col 9)-(line 163,col 50)",
            "(line 164,col 9)-(line 164,col 74)",
            "(line 165,col 9)-(line 165,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }",
        "begin_line": 172,
        "end_line": 180,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 64)",
            "(line 174,col 9)-(line 174,col 59)",
            "(line 175,col 9)-(line 176,col 53)",
            "(line 177,col 9)-(line 177,col 48)",
            "(line 178,col 9)-(line 178,col 67)",
            "(line 179,col 9)-(line 179,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.createBarChart3D()",
        "snippet": "    private static JFreeChart createBarChart3D() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createBarChart3D(\"Bar Chart 3D\", \"Domain\", \"Range\",\n                dataset, PlotOrientation.HORIZONTAL, true, true, true);\n\n    }",
        "begin_line": 187,
        "end_line": 202,
        "comment": "\n     * Create a horizontal bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 190,col 9)-(line 193,col 47)",
            "(line 195,col 9)-(line 196,col 27)",
            "(line 199,col 9)-(line 200,col 71)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 218,
        "end_line": 220,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 219,col 13)-(line 219,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.WaterfallChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "signature": "org.jfree.chart.junit.WaterfallChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(WaterfallChartTests.class);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.WaterfallChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "signature": "org.jfree.chart.junit.WaterfallChartTests.WaterfallChartTests(java.lang.String)",
        "snippet": "    public WaterfallChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.WaterfallChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "signature": "org.jfree.chart.junit.WaterfallChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createWaterfallChart();\n    }",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.WaterfallChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "signature": "org.jfree.chart.junit.WaterfallChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n\n        assertTrue(success);\n\n    }",
        "begin_line": 102,
        "end_line": 121,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 32)",
            "(line 106,col 9)-(line 117,col 9)",
            "(line 119,col 9)-(line 119,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.WaterfallChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "signature": "org.jfree.chart.junit.WaterfallChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 127,
        "end_line": 135,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 64)",
            "(line 129,col 9)-(line 129,col 59)",
            "(line 130,col 9)-(line 131,col 57)",
            "(line 132,col 9)-(line 132,col 50)",
            "(line 133,col 9)-(line 133,col 74)",
            "(line 134,col 9)-(line 134,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.WaterfallChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "signature": "org.jfree.chart.junit.WaterfallChartTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }",
        "begin_line": 141,
        "end_line": 149,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 64)",
            "(line 143,col 9)-(line 143,col 59)",
            "(line 144,col 9)-(line 145,col 53)",
            "(line 146,col 9)-(line 146,col 48)",
            "(line 147,col 9)-(line 147,col 67)",
            "(line 148,col 9)-(line 148,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.WaterfallChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "signature": "org.jfree.chart.junit.WaterfallChartTests.createWaterfallChart()",
        "snippet": "    private static JFreeChart createWaterfallChart() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createWaterfallChart(\n            \"Waterfall Chart\",\n            \"Domain\", \"Range\",\n            dataset,\n            PlotOrientation.HORIZONTAL,\n            true,     // include legend\n            true,\n            true\n        );\n\n    }",
        "begin_line": 156,
        "end_line": 178,
        "comment": "\n     * Create a bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 159,col 9)-(line 162,col 47)",
            "(line 164,col 9)-(line 165,col 27)",
            "(line 168,col 9)-(line 176,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StrokeMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StrokeMapTests.java",
        "signature": "org.jfree.chart.junit.StrokeMapTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StrokeMapTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StrokeMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StrokeMapTests.java",
        "signature": "org.jfree.chart.junit.StrokeMapTests.StrokeMapTests(java.lang.String)",
        "snippet": "    public StrokeMapTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StrokeMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StrokeMapTests.java",
        "signature": "org.jfree.chart.junit.StrokeMapTests.testGetStroke()",
        "snippet": "    public void testGetStroke() {\n        StrokeMap m1 = new StrokeMap();\n        assertEquals(null, m1.getStroke(\"A\"));\n        m1.put(\"A\", new BasicStroke(1.1f));\n        assertEquals(new BasicStroke(1.1f), m1.getStroke(\"A\"));\n        m1.put(\"A\", null);\n        assertEquals(null, m1.getStroke(\"A\"));\n        \n        // a null key should throw an IllegalArgumentException\n        boolean pass = false;\n        try {\n            m1.getStroke(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 83,
        "end_line": 100,
        "comment": "\n     * Some checks for the getStroke() method.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 39)",
            "(line 85,col 9)-(line 85,col 46)",
            "(line 86,col 9)-(line 86,col 43)",
            "(line 87,col 9)-(line 87,col 63)",
            "(line 88,col 9)-(line 88,col 26)",
            "(line 89,col 9)-(line 89,col 46)",
            "(line 92,col 9)-(line 92,col 29)",
            "(line 93,col 9)-(line 98,col 9)",
            "(line 99,col 9)-(line 99,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StrokeMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StrokeMapTests.java",
        "signature": "org.jfree.chart.junit.StrokeMapTests.testPut()",
        "snippet": "    public void testPut() {\n        StrokeMap m1 = new StrokeMap();\n        m1.put(\"A\", new BasicStroke(1.1f));\n        assertEquals(new BasicStroke(1.1f), m1.getStroke(\"A\"));\n        \n        // a null key should throw an IllegalArgumentException\n        boolean pass = false;\n        try {\n            m1.put(null, new BasicStroke(1.1f));\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 105,
        "end_line": 119,
        "comment": "\n     * Some checks for the put() method.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 39)",
            "(line 107,col 9)-(line 107,col 43)",
            "(line 108,col 9)-(line 108,col 63)",
            "(line 111,col 9)-(line 111,col 29)",
            "(line 112,col 9)-(line 117,col 9)",
            "(line 118,col 9)-(line 118,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StrokeMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StrokeMapTests.java",
        "signature": "org.jfree.chart.junit.StrokeMapTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StrokeMap m1 = new StrokeMap();\n        StrokeMap m2 = new StrokeMap();\n        assertTrue(m1.equals(m1));\n        assertTrue(m1.equals(m2));\n        assertFalse(m1.equals(null));\n        assertFalse(m1.equals(\"ABC\"));\n        \n        m1.put(\"K1\", new BasicStroke(1.1f));\n        assertFalse(m1.equals(m2));\n        m2.put(\"K1\", new BasicStroke(1.1f));\n        assertTrue(m1.equals(m2));\n        \n        m1.put(\"K2\", new BasicStroke(2.2f));\n        assertFalse(m1.equals(m2));\n        m2.put(\"K2\", new BasicStroke(2.2f));\n        assertTrue(m1.equals(m2));\n        \n        m1.put(\"K2\", null);\n        assertFalse(m1.equals(m2));\n        m2.put(\"K2\", null);\n        assertTrue(m1.equals(m2));\n    }",
        "begin_line": 124,
        "end_line": 146,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 39)",
            "(line 126,col 9)-(line 126,col 39)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 128,col 9)-(line 128,col 34)",
            "(line 129,col 9)-(line 129,col 37)",
            "(line 130,col 9)-(line 130,col 38)",
            "(line 132,col 9)-(line 132,col 44)",
            "(line 133,col 9)-(line 133,col 35)",
            "(line 134,col 9)-(line 134,col 44)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 137,col 9)-(line 137,col 44)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 44)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 142,col 9)-(line 142,col 27)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 144,col 27)",
            "(line 145,col 9)-(line 145,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StrokeMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StrokeMapTests.java",
        "signature": "org.jfree.chart.junit.StrokeMapTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StrokeMap m1 = new StrokeMap();\n        StrokeMap m2 = null;\n        try {\n            m2 = (StrokeMap) m1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(m1.equals(m2));\n        \n        m1.put(\"K1\", new BasicStroke(1.1f));\n        m1.put(\"K2\", new BasicStroke(2.2f));\n        try {\n            m2 = (StrokeMap) m1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(m1.equals(m2));\n    }",
        "begin_line": 151,
        "end_line": 171,
        "comment": "\n     * Some checks for cloning.\n     ",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 39)",
            "(line 153,col 9)-(line 153,col 28)",
            "(line 154,col 9)-(line 159,col 9)",
            "(line 160,col 9)-(line 160,col 34)",
            "(line 162,col 9)-(line 162,col 44)",
            "(line 163,col 9)-(line 163,col 44)",
            "(line 164,col 9)-(line 169,col 9)",
            "(line 170,col 9)-(line 170,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StrokeMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StrokeMapTests.java",
        "signature": "org.jfree.chart.junit.StrokeMapTests.testSerialization1()",
        "snippet": "    public void testSerialization1() {\n        StrokeMap m1 = new StrokeMap();\n        StrokeMap m2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            m2 = (StrokeMap) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(m1, m2);\n    }",
        "begin_line": 176,
        "end_line": 194,
        "comment": "\n     * A check for serialization.\n     ",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 39)",
            "(line 178,col 9)-(line 178,col 28)",
            "(line 179,col 9)-(line 192,col 9)",
            "(line 193,col 9)-(line 193,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StrokeMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StrokeMapTests.java",
        "signature": "org.jfree.chart.junit.StrokeMapTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n        StrokeMap m1 = new StrokeMap();\n        m1.put(\"K1\", new BasicStroke(1.1f));\n        m1.put(\"K2\", new BasicStroke(2.2f));\n        StrokeMap m2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            m2 = (StrokeMap) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(m1, m2);\n    }",
        "begin_line": 199,
        "end_line": 219,
        "comment": "\n     * A check for serialization.\n     ",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 39)",
            "(line 201,col 9)-(line 201,col 44)",
            "(line 202,col 9)-(line 202,col 44)",
            "(line 203,col 9)-(line 203,col 28)",
            "(line 204,col 9)-(line 217,col 9)",
            "(line 218,col 9)-(line 218,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TestUtilities",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TestUtilities.java",
        "signature": "org.jfree.chart.junit.TestUtilities.containsInstanceOf(java.util.Collection, java.lang.Class)",
        "snippet": "    public static boolean containsInstanceOf(Collection collection, Class c) {\n        Iterator iterator = collection.iterator();\n        while (iterator.hasNext()) {\n            Object obj = iterator.next();\n            if (obj != null && obj.getClass().equals(c)) {\n                return true;\n            }\n        }\n        return false;\n    }",
        "begin_line": 60,
        "end_line": 69,
        "comment": "\n     * Returns <code>true</code> if the collections contains any object that\n     * is an instance of the specified class, and <code>false</code> otherwise.\n     * \n     * @param collection  the collection.\n     * @param c  the class.\n     * \n     * @return A boolean.\n     ",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 50)",
            "(line 62,col 9)-(line 67,col 9)",
            "(line 68,col 9)-(line 68,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StackedBarChart3DTests.class);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.StackedBarChart3DTests(java.lang.String)",
        "snippet": "    public StackedBarChart3DTests(String name) {\n        super(name);\n    }",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n        }\n        assertTrue(success);\n\n    }",
        "begin_line": 106,
        "end_line": 123,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 32)",
            "(line 109,col 9)-(line 120,col 9)",
            "(line 121,col 9)-(line 121,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                    + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 128,
        "end_line": 151,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 134,col 49)",
            "(line 136,col 9)-(line 137,col 27)",
            "(line 139,col 9)-(line 139,col 46)",
            "(line 140,col 9)-(line 140,col 40)",
            "(line 141,col 9)-(line 141,col 64)",
            "(line 142,col 9)-(line 142,col 33)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 144,col 45)",
            "(line 145,col 9)-(line 145,col 38)",
            "(line 146,col 9)-(line 147,col 75)",
            "(line 148,col 9)-(line 149,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 157,
        "end_line": 165,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 64)",
            "(line 159,col 9)-(line 159,col 59)",
            "(line 160,col 9)-(line 161,col 57)",
            "(line 162,col 9)-(line 162,col 50)",
            "(line 163,col 9)-(line 163,col 74)",
            "(line 164,col 9)-(line 164,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }",
        "begin_line": 171,
        "end_line": 179,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 64)",
            "(line 173,col 9)-(line 173,col 59)",
            "(line 174,col 9)-(line 175,col 53)",
            "(line 176,col 9)-(line 176,col 48)",
            "(line 177,col 9)-(line 177,col 67)",
            "(line 178,col 9)-(line 178,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createStackedBarChart3D(\n            \"Stacked Bar Chart 3D\",  // chart title\n            \"Domain\", \"Range\",\n            dataset,      // data\n            PlotOrientation.HORIZONTAL,\n            true,         // include legend\n            true,\n            true\n        );\n\n    }",
        "begin_line": 186,
        "end_line": 208,
        "comment": "\n     * Create a stacked bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 189,col 9)-(line 192,col 47)",
            "(line 194,col 9)-(line 195,col 27)",
            "(line 198,col 9)-(line 206,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 223,
        "end_line": 225,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 224,col 13)-(line 224,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ChartPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ChartPackageTests.java",
        "signature": "org.jfree.chart.junit.ChartPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.chart\");\n        suite.addTestSuite(AreaChartTests.class);\n        suite.addTestSuite(BarChartTests.class);\n        suite.addTestSuite(BarChart3DTests.class);\n        suite.addTestSuite(ChartPanelTests.class);\n        suite.addTestSuite(ChartRenderingInfoTests.class);\n        suite.addTestSuite(GanttChartTests.class);\n        suite.addTestSuite(JFreeChartTests.class);\n        suite.addTestSuite(LegendItemTests.class);\n        suite.addTestSuite(LegendItemCollectionTests.class);\n        suite.addTestSuite(LineChartTests.class);\n        suite.addTestSuite(LineChart3DTests.class);\n        suite.addTestSuite(MeterChartTests.class);\n        suite.addTestSuite(PaintMapTests.class);\n        suite.addTestSuite(PieChartTests.class);\n        suite.addTestSuite(PieChart3DTests.class);\n        suite.addTestSuite(ScatterPlotTests.class);\n        suite.addTestSuite(StackedAreaChartTests.class);\n        suite.addTestSuite(StackedBarChartTests.class);\n        suite.addTestSuite(StackedBarChart3DTests.class);\n        suite.addTestSuite(StrokeMapTests.class);\n        suite.addTestSuite(TimeSeriesChartTests.class);\n        suite.addTestSuite(WaterfallChartTests.class);\n        suite.addTestSuite(XYAreaChartTests.class);\n        suite.addTestSuite(XYBarChartTests.class);\n        suite.addTestSuite(XYLineChartTests.class);\n        suite.addTestSuite(XYStepAreaChartTests.class);\n        suite.addTestSuite(XYStepChartTests.class);\n        return suite;\n    }",
        "begin_line": 63,
        "end_line": 93,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 59)",
            "(line 65,col 9)-(line 65,col 49)",
            "(line 66,col 9)-(line 66,col 48)",
            "(line 67,col 9)-(line 67,col 50)",
            "(line 68,col 9)-(line 68,col 50)",
            "(line 69,col 9)-(line 69,col 58)",
            "(line 70,col 9)-(line 70,col 50)",
            "(line 71,col 9)-(line 71,col 50)",
            "(line 72,col 9)-(line 72,col 50)",
            "(line 73,col 9)-(line 73,col 60)",
            "(line 74,col 9)-(line 74,col 49)",
            "(line 75,col 9)-(line 75,col 51)",
            "(line 76,col 9)-(line 76,col 50)",
            "(line 77,col 9)-(line 77,col 48)",
            "(line 78,col 9)-(line 78,col 48)",
            "(line 79,col 9)-(line 79,col 50)",
            "(line 80,col 9)-(line 80,col 51)",
            "(line 81,col 9)-(line 81,col 56)",
            "(line 82,col 9)-(line 82,col 55)",
            "(line 83,col 9)-(line 83,col 57)",
            "(line 84,col 9)-(line 84,col 49)",
            "(line 85,col 9)-(line 85,col 55)",
            "(line 86,col 9)-(line 86,col 54)",
            "(line 87,col 9)-(line 87,col 51)",
            "(line 88,col 9)-(line 88,col 50)",
            "(line 89,col 9)-(line 89,col 51)",
            "(line 90,col 9)-(line 90,col 55)",
            "(line 91,col 9)-(line 91,col 51)",
            "(line 92,col 9)-(line 92,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(JFreeChartTests.class);\n    }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.JFreeChartTests(java.lang.String)",
        "snippet": "    public JFreeChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 108,
        "end_line": 110,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.setUp()",
        "snippet": "    protected void setUp() {\n\n        // create a dataset...\n        DefaultPieDataset data = new DefaultPieDataset();\n        data.setValue(\"Java\", new Double(43.2));\n        data.setValue(\"Visual Basic\", new Double(0.0));\n        data.setValue(\"C/C++\", new Double(17.5));\n\n        // create the chart...\n        this.pieChart = ChartFactory.createPieChart(\n            \"Pie Chart\",  // chart title\n            data,         // data\n            true,         // include legend\n            true,\n            false\n        );\n\n    }",
        "begin_line": 115,
        "end_line": 132,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 57)",
            "(line 119,col 9)-(line 119,col 48)",
            "(line 120,col 9)-(line 120,col 55)",
            "(line 121,col 9)-(line 121,col 49)",
            "(line 124,col 9)-(line 130,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testEquals()",
        "snippet": "    public void testEquals() {\n        JFreeChart chart1 = new JFreeChart(\"Title\", \n                new Font(\"SansSerif\", Font.PLAIN, 12), new PiePlot(), true);\n        JFreeChart chart2 = new JFreeChart(\"Title\", \n                new Font(\"SansSerif\", Font.PLAIN, 12), new PiePlot(), true);\n        assertTrue(chart1.equals(chart2));\n        assertTrue(chart2.equals(chart1));\n        \n        // renderingHints\n        chart1.setRenderingHints(new RenderingHints(\n                RenderingHints.KEY_TEXT_ANTIALIASING, \n                RenderingHints.VALUE_TEXT_ANTIALIAS_ON));\n        assertFalse(chart1.equals(chart2));\n        chart2.setRenderingHints(new RenderingHints(\n                RenderingHints.KEY_TEXT_ANTIALIASING, \n                RenderingHints.VALUE_TEXT_ANTIALIAS_ON));\n        assertTrue(chart1.equals(chart2));\n        \n        // borderVisible\n        chart1.setBorderVisible(true);\n        assertFalse(chart1.equals(chart2));\n        chart2.setBorderVisible(true);\n        assertTrue(chart1.equals(chart2));\n        \n        // borderStroke\n        BasicStroke s = new BasicStroke(2.0f);\n        chart1.setBorderStroke(s);\n        assertFalse(chart1.equals(chart2));\n        chart2.setBorderStroke(s);\n        assertTrue(chart1.equals(chart2));\n        \n        // borderPaint\n        chart1.setBorderPaint(Color.red);\n        assertFalse(chart1.equals(chart2));\n        chart2.setBorderPaint(Color.red);\n        assertTrue(chart1.equals(chart2));\n        \n        // padding\n        chart1.setPadding(new RectangleInsets(1, 2, 3, 4));\n        assertFalse(chart1.equals(chart2));\n        chart2.setPadding(new RectangleInsets(1, 2, 3, 4));\n        assertTrue(chart1.equals(chart2));\n        \n        // title\n        chart1.setTitle(\"XYZ\");\n        assertFalse(chart1.equals(chart2));\n        chart2.setTitle(\"XYZ\");\n        assertTrue(chart1.equals(chart2));\n        \n        // subtitles\n        chart1.addSubtitle(new TextTitle(\"Subtitle\"));\n        assertFalse(chart1.equals(chart2));\n        chart2.addSubtitle(new TextTitle(\"Subtitle\"));\n        assertTrue(chart1.equals(chart2));\n        \n        // plot\n        chart1 = new JFreeChart(\"Title\", \n                new Font(\"SansSerif\", Font.PLAIN, 12), new RingPlot(), false);\n        chart2 = new JFreeChart(\"Title\", \n                new Font(\"SansSerif\", Font.PLAIN, 12), new PiePlot(), false);\n        assertFalse(chart1.equals(chart2));\n        chart2 = new JFreeChart(\"Title\", \n                new Font(\"SansSerif\", Font.PLAIN, 12), new RingPlot(), false);\n        assertTrue(chart1.equals(chart2));\n        \n        // backgroundPaint\n        chart1.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue));\n        assertFalse(chart1.equals(chart2));\n        chart2.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue));\n        assertTrue(chart1.equals(chart2));\n        \n        // backgroundImage\n        chart1.setBackgroundImage(JFreeChart.INFO.getLogo());\n        assertFalse(chart1.equals(chart2));\n        chart2.setBackgroundImage(JFreeChart.INFO.getLogo());\n        assertTrue(chart1.equals(chart2));\n        \n        // backgroundImageAlignment\n        chart1.setBackgroundImageAlignment(Align.BOTTOM_LEFT);\n        assertFalse(chart1.equals(chart2));\n        chart2.setBackgroundImageAlignment(Align.BOTTOM_LEFT);\n        assertTrue(chart1.equals(chart2));\n        \n        // backgroundImageAlpha\n        chart1.setBackgroundImageAlpha(0.1f);\n        assertFalse(chart1.equals(chart2));\n        chart2.setBackgroundImageAlpha(0.1f);\n        assertTrue(chart1.equals(chart2));\n    }",
        "begin_line": 137,
        "end_line": 227,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 139,col 76)",
            "(line 140,col 9)-(line 141,col 76)",
            "(line 142,col 9)-(line 142,col 42)",
            "(line 143,col 9)-(line 143,col 42)",
            "(line 146,col 9)-(line 148,col 57)",
            "(line 149,col 9)-(line 149,col 43)",
            "(line 150,col 9)-(line 152,col 57)",
            "(line 153,col 9)-(line 153,col 42)",
            "(line 156,col 9)-(line 156,col 38)",
            "(line 157,col 9)-(line 157,col 43)",
            "(line 158,col 9)-(line 158,col 38)",
            "(line 159,col 9)-(line 159,col 42)",
            "(line 162,col 9)-(line 162,col 46)",
            "(line 163,col 9)-(line 163,col 34)",
            "(line 164,col 9)-(line 164,col 43)",
            "(line 165,col 9)-(line 165,col 34)",
            "(line 166,col 9)-(line 166,col 42)",
            "(line 169,col 9)-(line 169,col 41)",
            "(line 170,col 9)-(line 170,col 43)",
            "(line 171,col 9)-(line 171,col 41)",
            "(line 172,col 9)-(line 172,col 42)",
            "(line 175,col 9)-(line 175,col 59)",
            "(line 176,col 9)-(line 176,col 43)",
            "(line 177,col 9)-(line 177,col 59)",
            "(line 178,col 9)-(line 178,col 42)",
            "(line 181,col 9)-(line 181,col 31)",
            "(line 182,col 9)-(line 182,col 43)",
            "(line 183,col 9)-(line 183,col 31)",
            "(line 184,col 9)-(line 184,col 42)",
            "(line 187,col 9)-(line 187,col 54)",
            "(line 188,col 9)-(line 188,col 43)",
            "(line 189,col 9)-(line 189,col 54)",
            "(line 190,col 9)-(line 190,col 42)",
            "(line 193,col 9)-(line 194,col 78)",
            "(line 195,col 9)-(line 196,col 77)",
            "(line 197,col 9)-(line 197,col 43)",
            "(line 198,col 9)-(line 199,col 78)",
            "(line 200,col 9)-(line 200,col 42)",
            "(line 203,col 9)-(line 204,col 41)",
            "(line 205,col 9)-(line 205,col 43)",
            "(line 206,col 9)-(line 207,col 41)",
            "(line 208,col 9)-(line 208,col 42)",
            "(line 211,col 9)-(line 211,col 61)",
            "(line 212,col 9)-(line 212,col 43)",
            "(line 213,col 9)-(line 213,col 61)",
            "(line 214,col 9)-(line 214,col 42)",
            "(line 217,col 9)-(line 217,col 62)",
            "(line 218,col 9)-(line 218,col 43)",
            "(line 219,col 9)-(line 219,col 62)",
            "(line 220,col 9)-(line 220,col 42)",
            "(line 223,col 9)-(line 223,col 45)",
            "(line 224,col 9)-(line 224,col 43)",
            "(line 225,col 9)-(line 225,col 45)",
            "(line 226,col 9)-(line 226,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testEquals2()",
        "snippet": "    public void testEquals2() {\n        JFreeChart chart1 = new JFreeChart(\"Title\", \n                new Font(\"SansSerif\", Font.PLAIN, 12), new PiePlot(), true);\n        JFreeChart chart2 = new JFreeChart(\"Title\", \n                new Font(\"SansSerif\", Font.PLAIN, 12), new PiePlot(), false);\n        assertFalse(chart1.equals(chart2));\n        assertFalse(chart2.equals(chart1));\n    }",
        "begin_line": 233,
        "end_line": 240,
        "comment": "\n     * A test to make sure that the legend is being picked up in the\n     * equals() testing.\n     ",
        "child_ranges": [
            "(line 234,col 9)-(line 235,col 76)",
            "(line 236,col 9)-(line 237,col 77)",
            "(line 238,col 9)-(line 238,col 43)",
            "(line 239,col 9)-(line 239,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testSubtitleCount()",
        "snippet": "    public void testSubtitleCount() {\n        int count = this.pieChart.getSubtitleCount();\n        assertEquals(1, count);\n    }",
        "begin_line": 245,
        "end_line": 248,
        "comment": "\n     * Checks the subtitle count - should be 1 (the legend).\n     ",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 53)",
            "(line 247,col 9)-(line 247,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testGetSubtitle()",
        "snippet": "    public void testGetSubtitle() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        JFreeChart chart = ChartFactory.createPieChart(\"title\", dataset, true, \n                false, false);\n        Title t = chart.getSubtitle(0);\n        assertTrue(t instanceof LegendTitle);\n        \n        boolean pass = false;\n        try {\n            t = chart.getSubtitle(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            t = chart.getSubtitle(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            t = chart.getSubtitle(2);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 253,
        "end_line": 286,
        "comment": "\n     * Some checks for the getSubtitle() method.\n     ",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 60)",
            "(line 255,col 9)-(line 256,col 30)",
            "(line 257,col 9)-(line 257,col 39)",
            "(line 258,col 9)-(line 258,col 45)",
            "(line 260,col 9)-(line 260,col 29)",
            "(line 261,col 9)-(line 266,col 9)",
            "(line 267,col 9)-(line 267,col 25)",
            "(line 269,col 9)-(line 269,col 21)",
            "(line 270,col 9)-(line 275,col 9)",
            "(line 276,col 9)-(line 276,col 25)",
            "(line 278,col 9)-(line 278,col 21)",
            "(line 279,col 9)-(line 284,col 9)",
            "(line 285,col 9)-(line 285,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testSerialization1()",
        "snippet": "    public void testSerialization1() {\n\n        DefaultPieDataset data = new DefaultPieDataset();\n        data.setValue(\"Type 1\", 54.5);\n        data.setValue(\"Type 2\", 23.9);\n        data.setValue(\"Type 3\", 45.8);\n\n        JFreeChart c1 = ChartFactory.createPieChart(\"Test\", data, true, true, \n                true);\n        JFreeChart c2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            c2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n        LegendTitle lt2 = c2.getLegend();\n        assertTrue(lt2.getSources()[0] == c2.getPlot());\n    }",
        "begin_line": 291,
        "end_line": 319,
        "comment": "\n     * Serialize a pie chart, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 57)",
            "(line 294,col 9)-(line 294,col 38)",
            "(line 295,col 9)-(line 295,col 38)",
            "(line 296,col 9)-(line 296,col 38)",
            "(line 298,col 9)-(line 299,col 22)",
            "(line 300,col 9)-(line 300,col 29)",
            "(line 302,col 9)-(line 315,col 9)",
            "(line 316,col 9)-(line 316,col 29)",
            "(line 317,col 9)-(line 317,col 41)",
            "(line 318,col 9)-(line 318,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n\n        DefaultPieDataset data = new DefaultPieDataset();\n        data.setValue(\"Type 1\", 54.5);\n        data.setValue(\"Type 2\", 23.9);\n        data.setValue(\"Type 3\", 45.8);\n\n        JFreeChart c1 = ChartFactory.createPieChart3D(\"Test\", data, true, true,\n                true);\n        JFreeChart c2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            c2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n\n    }",
        "begin_line": 324,
        "end_line": 351,
        "comment": "\n     * Serialize a 3D pie chart, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 57)",
            "(line 327,col 9)-(line 327,col 38)",
            "(line 328,col 9)-(line 328,col 38)",
            "(line 329,col 9)-(line 329,col 38)",
            "(line 331,col 9)-(line 332,col 22)",
            "(line 333,col 9)-(line 333,col 29)",
            "(line 335,col 9)-(line 348,col 9)",
            "(line 349,col 9)-(line 349,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testSerialization3()",
        "snippet": "    public void testSerialization3() {\n\n        // row keys...\n        String series1 = \"First\";\n        String series2 = \"Second\";\n        String series3 = \"Third\";\n\n        // column keys...\n        String category1 = \"Category 1\";\n        String category2 = \"Category 2\";\n        String category3 = \"Category 3\";\n        String category4 = \"Category 4\";\n        String category5 = \"Category 5\";\n        String category6 = \"Category 6\";\n        String category7 = \"Category 7\";\n        String category8 = \"Category 8\";\n\n        // create the dataset...\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n\n        dataset.addValue(1.0, series1, category1);\n        dataset.addValue(4.0, series1, category2);\n        dataset.addValue(3.0, series1, category3);\n        dataset.addValue(5.0, series1, category4);\n        dataset.addValue(5.0, series1, category5);\n        dataset.addValue(7.0, series1, category6);\n        dataset.addValue(7.0, series1, category7);\n        dataset.addValue(8.0, series1, category8);\n\n        dataset.addValue(5.0, series2, category1);\n        dataset.addValue(7.0, series2, category2);\n        dataset.addValue(6.0, series2, category3);\n        dataset.addValue(8.0, series2, category4);\n        dataset.addValue(4.0, series2, category5);\n        dataset.addValue(4.0, series2, category6);\n        dataset.addValue(2.0, series2, category7);\n        dataset.addValue(1.0, series2, category8);\n\n        dataset.addValue(4.0, series3, category1);\n        dataset.addValue(3.0, series3, category2);\n        dataset.addValue(2.0, series3, category3);\n        dataset.addValue(3.0, series3, category4);\n        dataset.addValue(6.0, series3, category5);\n        dataset.addValue(3.0, series3, category6);\n        dataset.addValue(4.0, series3, category7);\n        dataset.addValue(3.0, series3, category8);\n\n        // create the chart...\n        JFreeChart c1 = ChartFactory.createBarChart(\n            \"Vertical Bar Chart\",      // chart title\n            \"Category\",                // domain axis label\n            \"Value\",                   // range axis label\n            dataset,                   // data\n            PlotOrientation.VERTICAL,  // orientation\n            true,                      // include legend\n            true,\n            false\n        );\n\n        JFreeChart c2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            c2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n\n    }",
        "begin_line": 356,
        "end_line": 433,
        "comment": "\n     * Serialize a bar chart, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 33)",
            "(line 360,col 9)-(line 360,col 34)",
            "(line 361,col 9)-(line 361,col 33)",
            "(line 364,col 9)-(line 364,col 40)",
            "(line 365,col 9)-(line 365,col 40)",
            "(line 366,col 9)-(line 366,col 40)",
            "(line 367,col 9)-(line 367,col 40)",
            "(line 368,col 9)-(line 368,col 40)",
            "(line 369,col 9)-(line 369,col 40)",
            "(line 370,col 9)-(line 370,col 40)",
            "(line 371,col 9)-(line 371,col 40)",
            "(line 374,col 9)-(line 374,col 70)",
            "(line 376,col 9)-(line 376,col 50)",
            "(line 377,col 9)-(line 377,col 50)",
            "(line 378,col 9)-(line 378,col 50)",
            "(line 379,col 9)-(line 379,col 50)",
            "(line 380,col 9)-(line 380,col 50)",
            "(line 381,col 9)-(line 381,col 50)",
            "(line 382,col 9)-(line 382,col 50)",
            "(line 383,col 9)-(line 383,col 50)",
            "(line 385,col 9)-(line 385,col 50)",
            "(line 386,col 9)-(line 386,col 50)",
            "(line 387,col 9)-(line 387,col 50)",
            "(line 388,col 9)-(line 388,col 50)",
            "(line 389,col 9)-(line 389,col 50)",
            "(line 390,col 9)-(line 390,col 50)",
            "(line 391,col 9)-(line 391,col 50)",
            "(line 392,col 9)-(line 392,col 50)",
            "(line 394,col 9)-(line 394,col 50)",
            "(line 395,col 9)-(line 395,col 50)",
            "(line 396,col 9)-(line 396,col 50)",
            "(line 397,col 9)-(line 397,col 50)",
            "(line 398,col 9)-(line 398,col 50)",
            "(line 399,col 9)-(line 399,col 50)",
            "(line 400,col 9)-(line 400,col 50)",
            "(line 401,col 9)-(line 401,col 50)",
            "(line 404,col 9)-(line 413,col 10)",
            "(line 415,col 9)-(line 415,col 29)",
            "(line 417,col 9)-(line 430,col 9)",
            "(line 431,col 9)-(line 431,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testSerialization4()",
        "snippet": "    public void testSerialization4() {\n\n        RegularTimePeriod t = new Day();\n        TimeSeries series = new TimeSeries(\"Series 1\");\n        series.add(t, 36.4);\n        t = t.next();\n        series.add(t, 63.5);\n        TimeSeriesCollection dataset = new TimeSeriesCollection();\n        dataset.addSeries(series);\n\n        JFreeChart c1 = ChartFactory.createTimeSeriesChart(\"Test\", \"Date\", \n                \"Value\", dataset, true, true, true);\n        JFreeChart c2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            c2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n\n    }",
        "begin_line": 438,
        "end_line": 468,
        "comment": "\n     * Serialize a time seroes chart, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 440,col 9)-(line 440,col 40)",
            "(line 441,col 9)-(line 441,col 55)",
            "(line 442,col 9)-(line 442,col 28)",
            "(line 443,col 9)-(line 443,col 21)",
            "(line 444,col 9)-(line 444,col 28)",
            "(line 445,col 9)-(line 445,col 66)",
            "(line 446,col 9)-(line 446,col 34)",
            "(line 448,col 9)-(line 449,col 52)",
            "(line 450,col 9)-(line 450,col 29)",
            "(line 452,col 9)-(line 465,col 9)",
            "(line 466,col 9)-(line 466,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testAddSubtitle()",
        "snippet": "    public void testAddSubtitle() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        JFreeChart chart = ChartFactory.createPieChart(\"title\", dataset, true, \n                false, false);\n        \n        TextTitle t0 = new TextTitle(\"T0\");\n        chart.addSubtitle(0, t0);\n        assertEquals(t0, chart.getSubtitle(0));\n        \n        TextTitle t1 = new TextTitle(\"T1\");\n        chart.addSubtitle(t1);\n        assertEquals(t1, chart.getSubtitle(2));  // subtitle 1 is the legend\n\n        boolean pass = false;\n        try {\n            chart.addSubtitle(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            chart.addSubtitle(-1, t0);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n            \n        pass = false;\n        try {\n            chart.addSubtitle(4, t0);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 473,
        "end_line": 512,
        "comment": "\n     * Some checks for the addSubtitle() methods.\n     ",
        "child_ranges": [
            "(line 474,col 9)-(line 474,col 60)",
            "(line 475,col 9)-(line 476,col 30)",
            "(line 478,col 9)-(line 478,col 43)",
            "(line 479,col 9)-(line 479,col 33)",
            "(line 480,col 9)-(line 480,col 47)",
            "(line 482,col 9)-(line 482,col 43)",
            "(line 483,col 9)-(line 483,col 30)",
            "(line 484,col 9)-(line 484,col 47)",
            "(line 486,col 9)-(line 486,col 29)",
            "(line 487,col 9)-(line 492,col 9)",
            "(line 493,col 9)-(line 493,col 25)",
            "(line 495,col 9)-(line 495,col 21)",
            "(line 496,col 9)-(line 501,col 9)",
            "(line 502,col 9)-(line 502,col 25)",
            "(line 504,col 9)-(line 504,col 21)",
            "(line 505,col 9)-(line 510,col 9)",
            "(line 511,col 9)-(line 511,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testGetSubtitles()",
        "snippet": "    public void testGetSubtitles() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        JFreeChart chart = ChartFactory.createPieChart(\"title\", dataset, true, \n                false, false);\n        List subtitles = chart.getSubtitles();\n        \n        assertEquals(1, chart.getSubtitleCount());\n        \n        // adding something to the returned list should NOT change the chart\n        subtitles.add(new TextTitle(\"T\"));\n        assertEquals(1, chart.getSubtitleCount());\n    }",
        "begin_line": 517,
        "end_line": 528,
        "comment": "\n     * Some checks for the getSubtitles() method.\n     ",
        "child_ranges": [
            "(line 518,col 9)-(line 518,col 60)",
            "(line 519,col 9)-(line 520,col 30)",
            "(line 521,col 9)-(line 521,col 46)",
            "(line 523,col 9)-(line 523,col 50)",
            "(line 526,col 9)-(line 526,col 42)",
            "(line 527,col 9)-(line 527,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testLegendEvents()",
        "snippet": "    public void testLegendEvents() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        JFreeChart chart = ChartFactory.createPieChart(\"title\", dataset, true, \n                false, false);\n        chart.addChangeListener(this);\n        this.lastChartChangeEvent = null;\n        LegendTitle legend = chart.getLegend();\n        legend.setPosition(RectangleEdge.TOP);\n        assertNotNull(this.lastChartChangeEvent);\n    }",
        "begin_line": 533,
        "end_line": 542,
        "comment": "\n     * Some checks for the default legend firing change events.\n     ",
        "child_ranges": [
            "(line 534,col 9)-(line 534,col 60)",
            "(line 535,col 9)-(line 536,col 30)",
            "(line 537,col 9)-(line 537,col 38)",
            "(line 538,col 9)-(line 538,col 41)",
            "(line 539,col 9)-(line 539,col 47)",
            "(line 540,col 9)-(line 540,col 46)",
            "(line 541,col 9)-(line 541,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testTitleChangeEvent()",
        "snippet": "    public void testTitleChangeEvent() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        JFreeChart chart = ChartFactory.createPieChart(\"title\", dataset, true, \n                false, false);\n        chart.addChangeListener(this);\n        this.lastChartChangeEvent = null;\n        TextTitle t = chart.getTitle();\n        t.setFont(new Font(\"Dialog\", Font.BOLD, 9));\n        assertNotNull(this.lastChartChangeEvent);\n        this.lastChartChangeEvent = null;\n        \n        // now create a new title and replace the existing title, several\n        // things should happen:\n        // (1) Adding the new title should trigger an immediate \n        //     ChartChangeEvent;\n        // (2) Modifying the new title should trigger a ChartChangeEvent;\n        // (3) Modifying the old title should NOT trigger a ChartChangeEvent\n        TextTitle t2 = new TextTitle(\"T2\");\n        chart.setTitle(t2);\n        assertNotNull(this.lastChartChangeEvent);\n        this.lastChartChangeEvent = null;\n        \n        t2.setFont(new Font(\"Dialog\", Font.BOLD, 9));\n        assertNotNull(this.lastChartChangeEvent);\n        this.lastChartChangeEvent = null;\n        \n        t.setFont(new Font(\"Dialog\", Font.BOLD, 9));\n        assertNull(this.lastChartChangeEvent);\n        this.lastChartChangeEvent = null;\n    }",
        "begin_line": 547,
        "end_line": 576,
        "comment": "\n     * Some checks for title changes and event notification.\n     ",
        "child_ranges": [
            "(line 548,col 9)-(line 548,col 60)",
            "(line 549,col 9)-(line 550,col 30)",
            "(line 551,col 9)-(line 551,col 38)",
            "(line 552,col 9)-(line 552,col 41)",
            "(line 553,col 9)-(line 553,col 39)",
            "(line 554,col 9)-(line 554,col 52)",
            "(line 555,col 9)-(line 555,col 49)",
            "(line 556,col 9)-(line 556,col 41)",
            "(line 564,col 9)-(line 564,col 43)",
            "(line 565,col 9)-(line 565,col 27)",
            "(line 566,col 9)-(line 566,col 49)",
            "(line 567,col 9)-(line 567,col 41)",
            "(line 569,col 9)-(line 569,col 53)",
            "(line 570,col 9)-(line 570,col 49)",
            "(line 571,col 9)-(line 571,col 41)",
            "(line 573,col 9)-(line 573,col 52)",
            "(line 574,col 9)-(line 574,col 46)",
            "(line 575,col 9)-(line 575,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "    public void chartChanged(ChartChangeEvent event) {\n        this.lastChartChangeEvent = event;\n    }",
        "begin_line": 584,
        "end_line": 586,
        "comment": " (non-Javadoc)\n     * @see org.jfree.chart.event.ChartChangeListener#chartChanged(org.jfree.chart.event.ChartChangeEvent)\n     ",
        "child_ranges": [
            "(line 585,col 9)-(line 585,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TimeSeriesChartTests.class);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.TimeSeriesChartTests(java.lang.String)",
        "snippet": "    public TimeSeriesChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n        assertTrue(success);\n\n    }",
        "begin_line": 102,
        "end_line": 120,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 32)",
            "(line 105,col 9)-(line 117,col 9)",
            "(line 118,col 9)-(line 118,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 125,
        "end_line": 146,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 52)",
            "(line 129,col 9)-(line 129,col 32)",
            "(line 130,col 9)-(line 130,col 32)",
            "(line 131,col 9)-(line 131,col 32)",
            "(line 132,col 9)-(line 132,col 60)",
            "(line 134,col 9)-(line 134,col 46)",
            "(line 135,col 9)-(line 135,col 40)",
            "(line 136,col 9)-(line 136,col 52)",
            "(line 137,col 9)-(line 137,col 33)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 45)",
            "(line 140,col 9)-(line 140,col 38)",
            "(line 141,col 9)-(line 142,col 73)",
            "(line 143,col 9)-(line 144,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 152,
        "end_line": 159,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 52)",
            "(line 154,col 9)-(line 154,col 53)",
            "(line 155,col 9)-(line 155,col 73)",
            "(line 156,col 9)-(line 156,col 50)",
            "(line 157,col 9)-(line 157,col 68)",
            "(line 158,col 9)-(line 158,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(1.0, 1.0);\n        series1.add(2.0, 2.0);\n        series1.add(3.0, 3.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        // create the chart...\n        return ChartFactory.createTimeSeriesChart(\n            \"XY Line Chart\",  // chart title\n            \"Domain\",\n            \"Range\",\n            dataset,         // data\n            true,            // include legend\n            true,            // tooltips\n            true             // urls\n        );\n\n    }",
        "begin_line": 166,
        "end_line": 186,
        "comment": "\n     * Create a horizontal bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 52)",
            "(line 170,col 9)-(line 170,col 30)",
            "(line 171,col 9)-(line 171,col 30)",
            "(line 172,col 9)-(line 172,col 30)",
            "(line 173,col 9)-(line 173,col 60)",
            "(line 176,col 9)-(line 184,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 202,
        "end_line": 204,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 203,col 13)-(line 203,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTestSuite",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTestSuite.java",
        "signature": "org.jfree.chart.junit.JFreeChartTestSuite.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"JFreeChart\");\n        suite.addTest(ChartPackageTests.suite());\n        suite.addTest(AnnotationsPackageTests.suite());\n        suite.addTest(AxisPackageTests.suite());\n        suite.addTest(BlockPackageTests.suite());\n        suite.addTest(EntityPackageTests.suite());\n        suite.addTest(LabelsPackageTests.suite());\n        suite.addTest(NeedlePackageTests.suite());\n        suite.addTest(PlotPackageTests.suite());\n        suite.addTest(RendererPackageTests.suite());\n        suite.addTest(RendererCategoryPackageTests.suite());\n        suite.addTest(RendererXYPackageTests.suite());\n        suite.addTest(TitlePackageTests.suite());\n        suite.addTest(UrlsPackageTests.suite());\n        suite.addTest(DataPackageTests.suite());\n        suite.addTest(DataCategoryPackageTests.suite());\n        suite.addTest(DataStatisticsPackageTests.suite());\n        suite.addTest(DataTimePackageTests.suite());\n        suite.addTest(OHLCPackageTests.suite());\n        suite.addTest(DataXYPackageTests.suite());\n        suite.addTest(DataGanttPackageTests.suite());\n        return suite;\n    }",
        "begin_line": 88,
        "end_line": 111,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 54)",
            "(line 90,col 9)-(line 90,col 49)",
            "(line 91,col 9)-(line 91,col 55)",
            "(line 92,col 9)-(line 92,col 48)",
            "(line 93,col 9)-(line 93,col 49)",
            "(line 94,col 9)-(line 94,col 50)",
            "(line 95,col 9)-(line 95,col 50)",
            "(line 96,col 9)-(line 96,col 50)",
            "(line 97,col 9)-(line 97,col 48)",
            "(line 98,col 9)-(line 98,col 52)",
            "(line 99,col 9)-(line 99,col 60)",
            "(line 100,col 9)-(line 100,col 54)",
            "(line 101,col 9)-(line 101,col 49)",
            "(line 102,col 9)-(line 102,col 48)",
            "(line 103,col 9)-(line 103,col 48)",
            "(line 104,col 9)-(line 104,col 56)",
            "(line 105,col 9)-(line 105,col 58)",
            "(line 106,col 9)-(line 106,col 52)",
            "(line 107,col 9)-(line 107,col 48)",
            "(line 108,col 9)-(line 108,col 50)",
            "(line 109,col 9)-(line 109,col 53)",
            "(line 110,col 9)-(line 110,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTestSuite",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTestSuite.java",
        "signature": "org.jfree.chart.junit.JFreeChartTestSuite.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LineChartTests.class);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.LineChartTests(java.lang.String)",
        "snippet": "    public LineChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createLineChart();\n    }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n\n    }",
        "begin_line": 106,
        "end_line": 123,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 32)",
            "(line 109,col 9)-(line 120,col 9)",
            "(line 121,col 9)-(line 121,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                   + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 128,
        "end_line": 151,
        "comment": "\n     * Replaces the chart's dataset and then checks that the new dataset is OK.\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 134,col 49)",
            "(line 136,col 9)-(line 137,col 27)",
            "(line 139,col 9)-(line 139,col 46)",
            "(line 140,col 9)-(line 140,col 40)",
            "(line 141,col 9)-(line 141,col 64)",
            "(line 142,col 9)-(line 142,col 33)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 144,col 45)",
            "(line 145,col 9)-(line 145,col 38)",
            "(line 146,col 9)-(line 147,col 74)",
            "(line 148,col 9)-(line 149,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 157,
        "end_line": 165,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 64)",
            "(line 159,col 9)-(line 159,col 59)",
            "(line 160,col 9)-(line 161,col 57)",
            "(line 162,col 9)-(line 162,col 50)",
            "(line 163,col 9)-(line 163,col 74)",
            "(line 164,col 9)-(line 164,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }",
        "begin_line": 171,
        "end_line": 179,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 64)",
            "(line 173,col 9)-(line 173,col 59)",
            "(line 174,col 9)-(line 175,col 53)",
            "(line 176,col 9)-(line 176,col 48)",
            "(line 177,col 9)-(line 177,col 67)",
            "(line 178,col 9)-(line 178,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.createLineChart()",
        "snippet": "    private static JFreeChart createLineChart() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createLineChart(\n            \"Line Chart\",\n            \"Domain\", \"Range\",\n            dataset,\n            PlotOrientation.HORIZONTAL,\n            true,     // include legend\n            true,\n            true\n        );\n\n    }",
        "begin_line": 186,
        "end_line": 208,
        "comment": "\n     * Create a line chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 189,col 9)-(line 192,col 47)",
            "(line 194,col 9)-(line 195,col 27)",
            "(line 198,col 9)-(line 206,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 225,col 13)-(line 225,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.MeterChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/MeterChartTests.java",
        "signature": "org.jfree.chart.junit.MeterChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MeterChartTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.MeterChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/MeterChartTests.java",
        "signature": "org.jfree.chart.junit.MeterChartTests.MeterChartTests(java.lang.String)",
        "snippet": "    public MeterChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.MeterChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/MeterChartTests.java",
        "signature": "org.jfree.chart.junit.MeterChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        MeterPlot plot = new MeterPlot(new DefaultValueDataset(60.0));\n        plot.addInterval(new MeterInterval(\"Normal\", new Range(0.0, 80.0)));\n        JFreeChart chart = new JFreeChart(plot);\n        try {\n            BufferedImage image = new BufferedImage(200, 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;   \n        }\n        assertTrue(success);\n    }",
        "begin_line": 84,
        "end_line": 101,
        "comment": "\n     * Draws the chart with a single range.  At one point, this caused a null\n     * pointer exception (fixed now).\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 32)",
            "(line 86,col 9)-(line 86,col 70)",
            "(line 87,col 9)-(line 87,col 76)",
            "(line 88,col 9)-(line 88,col 48)",
            "(line 89,col 9)-(line 99,col 9)",
            "(line 100,col 9)-(line 100,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ScatterPlotTests.class);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.ScatterPlotTests(java.lang.String)",
        "snippet": "    public ScatterPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n\n        assertTrue(success);\n\n    }",
        "begin_line": 105,
        "end_line": 125,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 32)",
            "(line 109,col 9)-(line 121,col 9)",
            "(line 123,col 9)-(line 123,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 130,
        "end_line": 151,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 52)",
            "(line 134,col 9)-(line 134,col 32)",
            "(line 135,col 9)-(line 135,col 32)",
            "(line 136,col 9)-(line 136,col 32)",
            "(line 137,col 9)-(line 137,col 60)",
            "(line 139,col 9)-(line 139,col 46)",
            "(line 140,col 9)-(line 140,col 40)",
            "(line 141,col 9)-(line 141,col 52)",
            "(line 142,col 9)-(line 142,col 33)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 144,col 45)",
            "(line 145,col 9)-(line 145,col 38)",
            "(line 146,col 9)-(line 147,col 73)",
            "(line 148,col 9)-(line 149,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 157,
        "end_line": 164,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 52)",
            "(line 159,col 9)-(line 159,col 53)",
            "(line 160,col 9)-(line 160,col 73)",
            "(line 161,col 9)-(line 161,col 50)",
            "(line 162,col 9)-(line 162,col 68)",
            "(line 163,col 9)-(line 163,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(1.0, 1.0);\n        series1.add(2.0, 2.0);\n        series1.add(3.0, 3.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        // create the chart...\n        return ChartFactory.createScatterPlot(\n            \"Scatter Plot\",  // chart title\n            \"Domain\",\n            \"Range\",\n            dataset,         // data\n            PlotOrientation.VERTICAL,\n            true,            // include legend\n            true,            // tooltips\n            false            // urls\n        );\n\n    }",
        "begin_line": 171,
        "end_line": 192,
        "comment": "\n     * Create a horizontal bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 52)",
            "(line 175,col 9)-(line 175,col 30)",
            "(line 176,col 9)-(line 176,col 30)",
            "(line 177,col 9)-(line 177,col 30)",
            "(line 178,col 9)-(line 178,col 60)",
            "(line 181,col 9)-(line 190,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 208,
        "end_line": 210,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 209,col 13)-(line 209,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ChartRenderingInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ChartRenderingInfoTests.java",
        "signature": "org.jfree.chart.junit.ChartRenderingInfoTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ChartRenderingInfoTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ChartRenderingInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ChartRenderingInfoTests.java",
        "signature": "org.jfree.chart.junit.ChartRenderingInfoTests.ChartRenderingInfoTests(java.lang.String)",
        "snippet": "    public ChartRenderingInfoTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ChartRenderingInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ChartRenderingInfoTests.java",
        "signature": "org.jfree.chart.junit.ChartRenderingInfoTests.testEquals()",
        "snippet": "    public void testEquals() {\n        ChartRenderingInfo i1 = new ChartRenderingInfo();\n        ChartRenderingInfo i2 = new ChartRenderingInfo();\n        assertTrue(i1.equals(i2));\n        \n        i1.setChartArea(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(i1.equals(i2));\n        i2.setChartArea(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(i1.equals(i2));\n        \n        i1.getPlotInfo().setDataArea(new Rectangle(1, 2, 3, 4));\n        assertFalse(i1.equals(i2));\n        i2.getPlotInfo().setDataArea(new Rectangle(1, 2, 3, 4));\n        assertTrue(i1.equals(i2));\n        \n        StandardEntityCollection e1 = new StandardEntityCollection();\n        e1.add(new ChartEntity(new Rectangle(1, 2, 3, 4)));\n        i1.setEntityCollection(e1);\n        assertFalse(i1.equals(i2));\n        StandardEntityCollection e2 = new StandardEntityCollection();\n        e2.add(new ChartEntity(new Rectangle(1, 2, 3, 4)));\n        i2.setEntityCollection(e2); \n    }",
        "begin_line": 87,
        "end_line": 109,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 57)",
            "(line 89,col 9)-(line 89,col 57)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 92,col 9)-(line 92,col 68)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 94,col 68)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 97,col 9)-(line 97,col 64)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 64)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 102,col 69)",
            "(line 103,col 9)-(line 103,col 59)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 105,col 35)",
            "(line 106,col 9)-(line 106,col 69)",
            "(line 107,col 9)-(line 107,col 59)",
            "(line 108,col 9)-(line 108,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ChartRenderingInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ChartRenderingInfoTests.java",
        "signature": "org.jfree.chart.junit.ChartRenderingInfoTests.testCloning()",
        "snippet": "    public void testCloning() {\n        ChartRenderingInfo i1 = new ChartRenderingInfo();\n        ChartRenderingInfo i2 = null;\n        try {\n            i2 = (ChartRenderingInfo) i1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(i1 != i2);\n        assertTrue(i1.getClass() == i2.getClass());\n        assertTrue(i1.equals(i2));\n        \n        // check independence\n        i1.getChartArea().setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(i1.equals(i2));\n        i2.getChartArea().setRect(4.0, 3.0, 2.0, 1.0);\n        assertTrue(i1.equals(i2));\n        \n        i1.getEntityCollection().add(new ChartEntity(new Rectangle(1, 2, 2, \n                1)));\n        assertFalse(i1.equals(i2));\n        i2.getEntityCollection().add(new ChartEntity(new Rectangle(1, 2, 2, \n                1)));\n        assertTrue(i1.equals(i2));\n         \n    }",
        "begin_line": 114,
        "end_line": 140,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 57)",
            "(line 116,col 9)-(line 116,col 37)",
            "(line 117,col 9)-(line 122,col 9)",
            "(line 123,col 9)-(line 123,col 29)",
            "(line 124,col 9)-(line 124,col 51)",
            "(line 125,col 9)-(line 125,col 34)",
            "(line 128,col 9)-(line 128,col 54)",
            "(line 129,col 9)-(line 129,col 35)",
            "(line 130,col 9)-(line 130,col 54)",
            "(line 131,col 9)-(line 131,col 34)",
            "(line 133,col 9)-(line 134,col 21)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 137,col 21)",
            "(line 138,col 9)-(line 138,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ChartRenderingInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ChartRenderingInfoTests.java",
        "signature": "org.jfree.chart.junit.ChartRenderingInfoTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        ChartRenderingInfo i1 = new ChartRenderingInfo();\n        i1.setChartArea(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        ChartRenderingInfo i2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(i1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            i2 = (ChartRenderingInfo) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(i1, i2);\n\n    }",
        "begin_line": 145,
        "end_line": 166,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 57)",
            "(line 148,col 9)-(line 148,col 68)",
            "(line 149,col 9)-(line 149,col 37)",
            "(line 150,col 9)-(line 163,col 9)",
            "(line 164,col 9)-(line 164,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ChartRenderingInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ChartRenderingInfoTests.java",
        "signature": "org.jfree.chart.junit.ChartRenderingInfoTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n\n        ChartRenderingInfo i1 = new ChartRenderingInfo();\n        i1.getPlotInfo().setDataArea(new Rectangle2D.Double(1.0, 2.0, 3.0, \n                4.0));\n        ChartRenderingInfo i2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(i1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            i2 = (ChartRenderingInfo) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(i1, i2);\n        assertEquals(i2, i2.getPlotInfo().getOwner());\n\n    }",
        "begin_line": 171,
        "end_line": 194,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 57)",
            "(line 174,col 9)-(line 175,col 22)",
            "(line 176,col 9)-(line 176,col 37)",
            "(line 177,col 9)-(line 190,col 9)",
            "(line 191,col 9)-(line 191,col 29)",
            "(line 192,col 9)-(line 192,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BarChartTests.class);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.BarChartTests(java.lang.String)",
        "snippet": "    public BarChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createBarChart();\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n\n        assertTrue(success);\n\n    }",
        "begin_line": 109,
        "end_line": 128,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 32)",
            "(line 113,col 9)-(line 124,col 9)",
            "(line 126,col 9)-(line 126,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                   + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 133,
        "end_line": 156,
        "comment": "\n     * Replaces the chart's dataset and then checks that the new dataset is OK.\n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 139,col 49)",
            "(line 141,col 9)-(line 142,col 27)",
            "(line 144,col 9)-(line 144,col 46)",
            "(line 145,col 9)-(line 145,col 40)",
            "(line 146,col 9)-(line 146,col 64)",
            "(line 147,col 9)-(line 147,col 33)",
            "(line 148,col 9)-(line 148,col 35)",
            "(line 149,col 9)-(line 149,col 45)",
            "(line 150,col 9)-(line 150,col 38)",
            "(line 151,col 9)-(line 152,col 74)",
            "(line 153,col 9)-(line 154,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 162,
        "end_line": 170,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 64)",
            "(line 164,col 9)-(line 164,col 59)",
            "(line 165,col 9)-(line 166,col 57)",
            "(line 167,col 9)-(line 167,col 50)",
            "(line 168,col 9)-(line 168,col 74)",
            "(line 169,col 9)-(line 169,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }",
        "begin_line": 176,
        "end_line": 184,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 64)",
            "(line 178,col 9)-(line 178,col 59)",
            "(line 179,col 9)-(line 180,col 53)",
            "(line 181,col 9)-(line 181,col 48)",
            "(line 182,col 9)-(line 182,col 67)",
            "(line 183,col 9)-(line 183,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.createBarChart()",
        "snippet": "    private static JFreeChart createBarChart() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createBarChart(\n            \"Bar Chart\",\n            \"Domain\", \"Range\",\n            dataset,\n            PlotOrientation.HORIZONTAL,\n            true,     // include legend\n            true,\n            true\n        );\n\n    }",
        "begin_line": 191,
        "end_line": 213,
        "comment": "\n     * Create a bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 194,col 9)-(line 197,col 47)",
            "(line 199,col 9)-(line 200,col 27)",
            "(line 203,col 9)-(line 211,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 229,
        "end_line": 231,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 230,col 13)-(line 230,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LineChart3DTests.class);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.LineChart3DTests(java.lang.String)",
        "snippet": "    public LineChart3DTests(String name) {\n        super(name);\n    }",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createLineChart3D();\n    }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n\n    }",
        "begin_line": 106,
        "end_line": 123,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 32)",
            "(line 109,col 9)-(line 120,col 9)",
            "(line 121,col 9)-(line 121,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                   + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 128,
        "end_line": 151,
        "comment": "\n     * Replaces the chart's dataset and then checks that the new dataset is OK.\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 134,col 49)",
            "(line 136,col 9)-(line 137,col 27)",
            "(line 139,col 9)-(line 139,col 46)",
            "(line 140,col 9)-(line 140,col 40)",
            "(line 141,col 9)-(line 141,col 64)",
            "(line 142,col 9)-(line 142,col 33)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 144,col 45)",
            "(line 145,col 9)-(line 145,col 38)",
            "(line 146,col 9)-(line 147,col 74)",
            "(line 148,col 9)-(line 149,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 157,
        "end_line": 165,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 64)",
            "(line 159,col 9)-(line 159,col 59)",
            "(line 160,col 9)-(line 161,col 57)",
            "(line 162,col 9)-(line 162,col 50)",
            "(line 163,col 9)-(line 163,col 74)",
            "(line 164,col 9)-(line 164,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }",
        "begin_line": 171,
        "end_line": 179,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 64)",
            "(line 173,col 9)-(line 173,col 59)",
            "(line 174,col 9)-(line 175,col 53)",
            "(line 176,col 9)-(line 176,col 48)",
            "(line 177,col 9)-(line 177,col 67)",
            "(line 178,col 9)-(line 178,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.createLineChart3D()",
        "snippet": "    private static JFreeChart createLineChart3D() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createLineChart3D(\n            \"Line Chart\",\n            \"Domain\", \"Range\",\n            dataset,\n            PlotOrientation.HORIZONTAL,\n            true,     // include legend\n            true,\n            true\n        );\n\n    }",
        "begin_line": 186,
        "end_line": 208,
        "comment": "\n     * Create a line chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 189,col 9)-(line 192,col 47)",
            "(line 194,col 9)-(line 195,col 27)",
            "(line 198,col 9)-(line 206,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 225,col 13)-(line 225,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYAreaChartTests.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.XYAreaChartTests(java.lang.String)",
        "snippet": "    public XYAreaChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n        assertTrue(success);\n\n    }",
        "begin_line": 103,
        "end_line": 121,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 32)",
            "(line 106,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 126,
        "end_line": 147,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 52)",
            "(line 130,col 9)-(line 130,col 32)",
            "(line 131,col 9)-(line 131,col 32)",
            "(line 132,col 9)-(line 132,col 32)",
            "(line 133,col 9)-(line 133,col 60)",
            "(line 135,col 9)-(line 135,col 46)",
            "(line 136,col 9)-(line 136,col 40)",
            "(line 137,col 9)-(line 137,col 52)",
            "(line 138,col 9)-(line 138,col 33)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 140,col 9)-(line 140,col 45)",
            "(line 141,col 9)-(line 141,col 38)",
            "(line 142,col 9)-(line 143,col 73)",
            "(line 144,col 9)-(line 145,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 153,
        "end_line": 160,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 52)",
            "(line 155,col 9)-(line 155,col 53)",
            "(line 156,col 9)-(line 156,col 73)",
            "(line 157,col 9)-(line 157,col 50)",
            "(line 158,col 9)-(line 158,col 68)",
            "(line 159,col 9)-(line 159,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(1.0, 1.0);\n        series1.add(2.0, 2.0);\n        series1.add(3.0, 3.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        // create the chart...\n        return ChartFactory.createXYAreaChart(\n            \"Area Chart\",  // chart title\n            \"Domain\",\n            \"Range\",\n            dataset,         // data\n            PlotOrientation.VERTICAL,\n            true,            // include legend\n            true,            // tooltips\n            true             // urls\n        );\n\n    }",
        "begin_line": 167,
        "end_line": 188,
        "comment": "\n     * Create a horizontal bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 52)",
            "(line 171,col 9)-(line 171,col 30)",
            "(line 172,col 9)-(line 172,col 30)",
            "(line 173,col 9)-(line 173,col 30)",
            "(line 174,col 9)-(line 174,col 60)",
            "(line 177,col 9)-(line 186,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 205,col 13)-(line 205,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYLineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYLineChartTests.java",
        "signature": "org.jfree.chart.junit.XYLineChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYLineChartTests.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYLineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYLineChartTests.java",
        "signature": "org.jfree.chart.junit.XYLineChartTests.XYLineChartTests(java.lang.String)",
        "snippet": "    public XYLineChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYLineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYLineChartTests.java",
        "signature": "org.jfree.chart.junit.XYLineChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYLineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYLineChartTests.java",
        "signature": "org.jfree.chart.junit.XYLineChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n        assertTrue(success);\n\n    }",
        "begin_line": 103,
        "end_line": 121,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 32)",
            "(line 106,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYLineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYLineChartTests.java",
        "signature": "org.jfree.chart.junit.XYLineChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 126,
        "end_line": 147,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 52)",
            "(line 130,col 9)-(line 130,col 32)",
            "(line 131,col 9)-(line 131,col 32)",
            "(line 132,col 9)-(line 132,col 32)",
            "(line 133,col 9)-(line 133,col 60)",
            "(line 135,col 9)-(line 135,col 46)",
            "(line 136,col 9)-(line 136,col 40)",
            "(line 137,col 9)-(line 137,col 52)",
            "(line 138,col 9)-(line 138,col 33)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 140,col 9)-(line 140,col 45)",
            "(line 141,col 9)-(line 141,col 38)",
            "(line 142,col 9)-(line 143,col 73)",
            "(line 144,col 9)-(line 145,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYLineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYLineChartTests.java",
        "signature": "org.jfree.chart.junit.XYLineChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 153,
        "end_line": 160,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 52)",
            "(line 155,col 9)-(line 155,col 53)",
            "(line 156,col 9)-(line 156,col 73)",
            "(line 157,col 9)-(line 157,col 50)",
            "(line 158,col 9)-(line 158,col 68)",
            "(line 159,col 9)-(line 159,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYLineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYLineChartTests.java",
        "signature": "org.jfree.chart.junit.XYLineChartTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(1.0, 1.0);\n        series1.add(2.0, 2.0);\n        series1.add(3.0, 3.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        // create the chart...\n        return ChartFactory.createXYLineChart(\n            \"XY Line Chart\",  // chart title\n            \"Domain\",\n            \"Range\",\n            dataset,         // data\n            PlotOrientation.VERTICAL,\n            true,            // include legend\n            true,            // tooltips\n            true             // urls\n        );\n\n    }",
        "begin_line": 167,
        "end_line": 188,
        "comment": "\n     * Create a horizontal bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 52)",
            "(line 171,col 9)-(line 171,col 30)",
            "(line 172,col 9)-(line 172,col 30)",
            "(line 173,col 9)-(line 173,col 30)",
            "(line 174,col 9)-(line 174,col 60)",
            "(line 177,col 9)-(line 186,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYLineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYLineChartTests.java",
        "signature": "org.jfree.chart.junit.XYLineChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 205,col 13)-(line 205,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYStepChartTests.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.XYStepChartTests(java.lang.String)",
        "snippet": "    public XYStepChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n        assertTrue(success);\n\n    }",
        "begin_line": 103,
        "end_line": 121,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 32)",
            "(line 106,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 126,
        "end_line": 147,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 52)",
            "(line 130,col 9)-(line 130,col 32)",
            "(line 131,col 9)-(line 131,col 32)",
            "(line 132,col 9)-(line 132,col 32)",
            "(line 133,col 9)-(line 133,col 60)",
            "(line 135,col 9)-(line 135,col 46)",
            "(line 136,col 9)-(line 136,col 40)",
            "(line 137,col 9)-(line 137,col 52)",
            "(line 138,col 9)-(line 138,col 33)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 140,col 9)-(line 140,col 45)",
            "(line 141,col 9)-(line 141,col 38)",
            "(line 142,col 9)-(line 143,col 73)",
            "(line 144,col 9)-(line 145,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 153,
        "end_line": 160,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 52)",
            "(line 155,col 9)-(line 155,col 53)",
            "(line 156,col 9)-(line 156,col 73)",
            "(line 157,col 9)-(line 157,col 50)",
            "(line 158,col 9)-(line 158,col 68)",
            "(line 159,col 9)-(line 159,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(1.0, 1.0);\n        series1.add(2.0, 2.0);\n        series1.add(3.0, 3.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        // create the chart...\n        return ChartFactory.createXYStepChart(\n            \"Step Chart\",  // chart title\n            \"Domain\",\n            \"Range\",\n            dataset,         // data\n            PlotOrientation.VERTICAL,\n            true,            // include legend\n            true,            // tooltips\n            true             // urls\n        );\n\n    }",
        "begin_line": 167,
        "end_line": 188,
        "comment": "\n     * Create a horizontal bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 52)",
            "(line 171,col 9)-(line 171,col 30)",
            "(line 172,col 9)-(line 172,col 30)",
            "(line 173,col 9)-(line 173,col 30)",
            "(line 174,col 9)-(line 174,col 60)",
            "(line 177,col 9)-(line 186,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 205,col 13)-(line 205,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LegendItemCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LegendItemCollectionTests.java",
        "signature": "org.jfree.chart.junit.LegendItemCollectionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LegendItemCollectionTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LegendItemCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LegendItemCollectionTests.java",
        "signature": "org.jfree.chart.junit.LegendItemCollectionTests.LegendItemCollectionTests(java.lang.String)",
        "snippet": "    public LegendItemCollectionTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LegendItemCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LegendItemCollectionTests.java",
        "signature": "org.jfree.chart.junit.LegendItemCollectionTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        LegendItemCollection c1 = new LegendItemCollection();\n        LegendItemCollection c2 = new LegendItemCollection();\n        assertTrue(c1.equals(c2));\n        assertTrue(c2.equals(c1));\n\n        LegendItem item1 = new LegendItem(\"Label\", \"Description\", \n                \"ToolTip\", \"URL\", true,  \n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), true, Color.red, \n                true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), \n                new BasicStroke(2.1f), Color.green);\n        LegendItem item2 = new LegendItem(\"Label\", \"Description\", \n                \"ToolTip\", \"URL\", true, \n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n                true, Color.red, true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green);\n        c1.add(item1);\n        c2.add(item2);\n        assertTrue(c1.equals(c2));\n        \n    }",
        "begin_line": 87,
        "end_line": 110,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 61)",
            "(line 90,col 9)-(line 90,col 61)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 99,col 52)",
            "(line 100,col 9)-(line 105,col 29)",
            "(line 106,col 9)-(line 106,col 22)",
            "(line 107,col 9)-(line 107,col 22)",
            "(line 108,col 9)-(line 108,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LegendItemCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LegendItemCollectionTests.java",
        "signature": "org.jfree.chart.junit.LegendItemCollectionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        LegendItemCollection c1 = new LegendItemCollection();\n        c1.add(new LegendItem(\"Item\", \"Description\", \"ToolTip\", \"URL\", \n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.red)); \n        LegendItemCollection c2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            c2 = (LegendItemCollection) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n    }",
        "begin_line": 116,
        "end_line": 136,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 61)",
            "(line 118,col 9)-(line 119,col 72)",
            "(line 120,col 9)-(line 120,col 39)",
            "(line 121,col 9)-(line 134,col 9)",
            "(line 135,col 9)-(line 135,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LegendItemCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LegendItemCollectionTests.java",
        "signature": "org.jfree.chart.junit.LegendItemCollectionTests.testCloning()",
        "snippet": "    public void testCloning() {\n\n        LegendItemCollection c1 = new LegendItemCollection();\n        c1.add(new LegendItem(\"Item\", \"Description\", \"ToolTip\", \"URL\", \n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.red)); \n        LegendItemCollection c2 = null;\n        try {\n            c2 = (LegendItemCollection) c1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n        \n    }",
        "begin_line": 141,
        "end_line": 157,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 61)",
            "(line 144,col 9)-(line 145,col 72)",
            "(line 146,col 9)-(line 146,col 39)",
            "(line 147,col 9)-(line 152,col 9)",
            "(line 153,col 9)-(line 153,col 29)",
            "(line 154,col 9)-(line 154,col 51)",
            "(line 155,col 9)-(line 155,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ChartPanelTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ChartPanelTests.java",
        "signature": "org.jfree.chart.junit.ChartPanelTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ChartPanelTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ChartPanelTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ChartPanelTests.java",
        "signature": "org.jfree.chart.junit.ChartPanelTests.ChartPanelTests(java.lang.String)",
        "snippet": "    public ChartPanelTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ChartPanelTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ChartPanelTests.java",
        "signature": "org.jfree.chart.junit.ChartPanelTests.testConstructor1()",
        "snippet": "    public void testConstructor1() {\n        ChartPanel panel = new ChartPanel(null); \n        assertEquals(null, panel.getChart());\n    }",
        "begin_line": 83,
        "end_line": 86,
        "comment": "\n     * Test that the constructor will accept a null chart.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 48)",
            "(line 85,col 9)-(line 85,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ChartPanelTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ChartPanelTests.java",
        "signature": "org.jfree.chart.junit.ChartPanelTests.testSetChart()",
        "snippet": "    public void testSetChart() {\n        JFreeChart chart = new JFreeChart(new XYPlot());\n        ChartPanel panel = new ChartPanel(chart);\n        panel.setChart(null);\n        assertEquals(null, panel.getChart());\n    }",
        "begin_line": 91,
        "end_line": 96,
        "comment": "\n     * Test that it is possible to set the panel's chart to null.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 56)",
            "(line 93,col 9)-(line 93,col 49)",
            "(line 94,col 9)-(line 94,col 29)",
            "(line 95,col 9)-(line 95,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ChartPanelTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ChartPanelTests.java",
        "signature": "org.jfree.chart.junit.ChartPanelTests.testGetListeners()",
        "snippet": "    public void testGetListeners() {\n        ChartPanel p = new ChartPanel(null);\n        p.addChartMouseListener(this);\n        EventListener[] listeners = p.getListeners(ChartMouseListener.class);\n        assertEquals(1, listeners.length);\n        assertEquals(this, listeners[0]);\n        // try a listener type that isn't registered\n        listeners = p.getListeners(CaretListener.class);\n        assertEquals(0, listeners.length);\n        p.removeChartMouseListener(this);\n        listeners = p.getListeners(ChartMouseListener.class);\n        assertEquals(0, listeners.length);\n    \n        // try a null argument\n        boolean pass = false;\n        try {\n            listeners = p.getListeners((Class) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;    \n        }\n        assertTrue(pass);\n    \n        // try a class that isn't a listener\n        pass = false;\n        try {\n            listeners = p.getListeners(Integer.class);\n        }\n        catch (ClassCastException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 101,
        "end_line": 133,
        "comment": "\n     * Check the behaviour of the getListeners() method.\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 44)",
            "(line 103,col 9)-(line 103,col 38)",
            "(line 104,col 9)-(line 104,col 77)",
            "(line 105,col 9)-(line 105,col 42)",
            "(line 106,col 9)-(line 106,col 41)",
            "(line 108,col 9)-(line 108,col 56)",
            "(line 109,col 9)-(line 109,col 42)",
            "(line 110,col 9)-(line 110,col 41)",
            "(line 111,col 9)-(line 111,col 61)",
            "(line 112,col 9)-(line 112,col 42)",
            "(line 115,col 9)-(line 115,col 29)",
            "(line 116,col 9)-(line 121,col 9)",
            "(line 122,col 9)-(line 122,col 25)",
            "(line 125,col 9)-(line 125,col 21)",
            "(line 126,col 9)-(line 131,col 9)",
            "(line 132,col 9)-(line 132,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ChartPanelTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ChartPanelTests.java",
        "signature": "org.jfree.chart.junit.ChartPanelTests.chartMouseClicked(org.jfree.chart.ChartMouseEvent)",
        "snippet": "    public void chartMouseClicked(ChartMouseEvent event) {\n        // ignore\n    }",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.chart.junit.ChartPanelTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ChartPanelTests.java",
        "signature": "org.jfree.chart.junit.ChartPanelTests.chartMouseMoved(org.jfree.chart.ChartMouseEvent)",
        "snippet": "    public void chartMouseMoved(ChartMouseEvent event) {\n        // ignore\n    }",
        "begin_line": 139,
        "end_line": 141,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.chart.junit.XYBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYBarChartTests.java",
        "signature": "org.jfree.chart.junit.XYBarChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYBarChartTests.class);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYBarChartTests.java",
        "signature": "org.jfree.chart.junit.XYBarChartTests.XYBarChartTests(java.lang.String)",
        "snippet": "    public XYBarChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYBarChartTests.java",
        "signature": "org.jfree.chart.junit.XYBarChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYBarChartTests.java",
        "signature": "org.jfree.chart.junit.XYBarChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n        assertTrue(success);\n\n    }",
        "begin_line": 105,
        "end_line": 123,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 32)",
            "(line 108,col 9)-(line 120,col 9)",
            "(line 121,col 9)-(line 121,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYBarChartTests.java",
        "signature": "org.jfree.chart.junit.XYBarChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        \n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 128,
        "end_line": 150,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 52)",
            "(line 132,col 9)-(line 132,col 32)",
            "(line 133,col 9)-(line 133,col 32)",
            "(line 134,col 9)-(line 134,col 32)",
            "(line 135,col 9)-(line 135,col 60)",
            "(line 137,col 9)-(line 137,col 46)",
            "(line 138,col 9)-(line 138,col 40)",
            "(line 140,col 9)-(line 140,col 52)",
            "(line 141,col 9)-(line 141,col 33)",
            "(line 142,col 9)-(line 142,col 35)",
            "(line 143,col 9)-(line 143,col 45)",
            "(line 144,col 9)-(line 144,col 38)",
            "(line 145,col 9)-(line 146,col 73)",
            "(line 147,col 9)-(line 148,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYBarChartTests.java",
        "signature": "org.jfree.chart.junit.XYBarChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 156,
        "end_line": 163,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 52)",
            "(line 158,col 9)-(line 158,col 53)",
            "(line 159,col 9)-(line 159,col 73)",
            "(line 160,col 9)-(line 160,col 50)",
            "(line 161,col 9)-(line 161,col 68)",
            "(line 162,col 9)-(line 162,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYBarChartTests.java",
        "signature": "org.jfree.chart.junit.XYBarChartTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(1.0, 1.0);\n        series1.add(2.0, 2.0);\n        series1.add(3.0, 3.0);\n        IntervalXYDataset dataset = new XYBarDataset(new XYSeriesCollection(\n                series1), 1.0);\n \n        // create the chart...\n        return ChartFactory.createXYBarChart(\n            \"XY Bar Chart\",  // chart title\n            \"Domain\", false,\n            \"Range\",\n            dataset,         // data\n            PlotOrientation.VERTICAL,\n            true,            // include legend\n            true,            // tooltips\n            true             // urls\n        );\n\n    }",
        "begin_line": 170,
        "end_line": 192,
        "comment": "\n     * Create a horizontal bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 52)",
            "(line 174,col 9)-(line 174,col 30)",
            "(line 175,col 9)-(line 175,col 30)",
            "(line 176,col 9)-(line 176,col 30)",
            "(line 177,col 9)-(line 178,col 31)",
            "(line 181,col 9)-(line 190,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYBarChartTests.java",
        "signature": "org.jfree.chart.junit.XYBarChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 208,
        "end_line": 210,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 209,col 13)-(line 209,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LegendItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LegendItemTests.java",
        "signature": "org.jfree.chart.junit.LegendItemTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LegendItemTests.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LegendItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LegendItemTests.java",
        "signature": "org.jfree.chart.junit.LegendItemTests.LegendItemTests(java.lang.String)",
        "snippet": "    public LegendItemTests(String name) {\n        super(name);\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LegendItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LegendItemTests.java",
        "signature": "org.jfree.chart.junit.LegendItemTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        LegendItem item1 = new LegendItem(\"Label\", \"Description\", \n                \"ToolTip\", \"URL\", true, \n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), true, Color.red, \n                true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), \n                new BasicStroke(2.1f), Color.green);  \n        LegendItem item2 = new LegendItem(\"Label\", \"Description\", \n                \"ToolTip\", \"URL\", true, \n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n                true, Color.red, true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green);  \n        assertTrue(item1.equals(item2));  \n        assertTrue(item2.equals(item1));  \n        \n        item1 = new LegendItem(\"Label2\", \"Description\", \"ToolTip\", \"URL\",\n                true, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), true, \n                Color.red, true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertFalse(item1.equals(item2));\n        item2 = new LegendItem(\"Label2\", \"Description\", \"ToolTip\", \"URL\", \n                true, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n                true, Color.red, true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertTrue(item1.equals(item2));\n        \n        item1 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", true, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n                true, Color.red, true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertFalse(item1.equals(item2));\n        item2 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", true, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n                true, Color.red, true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertTrue(item1.equals(item2));\n        \n        item1 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", false, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n                true, Color.red, true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertFalse(item1.equals(item2));\n        item2 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", false, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n                true, Color.red, true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertTrue(item1.equals(item2));\n        \n        item1 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                true, Color.red, true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertFalse(item1.equals(item2));\n        item2 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                true, Color.red, true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertTrue(item1.equals(item2));\n        \n        item1 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                false, Color.red, true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertFalse(item1.equals(item2));\n        item2 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                false, Color.red, true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertTrue(item1.equals(item2));\n        \n        item1 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \"URL\",\n                false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), false, \n                Color.black, true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertFalse(item1.equals(item2));\n        item2 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \"URL\", \n                false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), false, \n                Color.black, true, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertTrue(item1.equals(item2));\n        \n        item1 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                false, Color.black, false, Color.blue, new BasicStroke(1.2f), \n                true, new Line2D.Double(1.0, 2.0, 3.0, 4.0), \n                new BasicStroke(2.1f), Color.green); \n        assertFalse(item1.equals(item2));\n        item2 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \"URL\",\n                false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), false, \n                Color.black, false, Color.blue, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertTrue(item1.equals(item2));\n        \n        item1 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \"URL\", \n                false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), false, \n                Color.black, false, Color.yellow, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertFalse(item1.equals(item2));\n        item2 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \"URL\", \n                false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), false, \n                Color.black, false, Color.yellow, new BasicStroke(1.2f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertTrue(item1.equals(item2));\n        \n        item1 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \"URL\",\n                false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), false, \n                Color.black, false, Color.yellow, new BasicStroke(2.1f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertFalse(item1.equals(item2));\n        item2 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \"URL\",\n                false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), false, \n                Color.black, false, Color.yellow, new BasicStroke(2.1f), true, \n                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f), \n                Color.green); \n        assertTrue(item1.equals(item2));\n        \n        item1 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                false, Color.black, false, Color.yellow, new BasicStroke(2.1f), \n                false, new Line2D.Double(1.0, 2.0, 3.0, 4.0), \n                new BasicStroke(2.1f), Color.green); \n        assertFalse(item1.equals(item2));\n        item2 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                false, Color.black, false, Color.yellow, new BasicStroke(2.1f),\n                false, new Line2D.Double(1.0, 2.0, 3.0, 4.0), \n                new BasicStroke(2.1f),  Color.green); \n        assertTrue(item1.equals(item2));\n        \n        item1 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                false, Color.black, false, Color.yellow, new BasicStroke(2.1f),\n                false, new Line2D.Double(4.0, 3.0, 2.0, 1.0), \n                new BasicStroke(2.1f), Color.green); \n        assertFalse(item1.equals(item2));\n        item2 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                false, Color.black, false, Color.yellow, new BasicStroke(2.1f),\n                false, new Line2D.Double(4.0, 3.0, 2.0, 1.0), \n                new BasicStroke(2.1f), Color.green); \n        assertTrue(item1.equals(item2));\n        \n        item1 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                false, Color.black, false, Color.yellow, new BasicStroke(2.1f), \n                false, new Line2D.Double(4.0, 3.0, 2.0, 1.0), \n                new BasicStroke(3.3f), Color.green); \n        assertFalse(item1.equals(item2));\n        item2 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                false, Color.black, false, Color.yellow, new BasicStroke(2.1f), \n                false, new Line2D.Double(4.0, 3.0, 2.0, 1.0), \n                new BasicStroke(3.3f), Color.green); \n        assertTrue(item1.equals(item2));\n        \n        item1 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \"URL\",\n                false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), false, \n                Color.black, false, Color.yellow, new BasicStroke(2.1f), false, \n            new Line2D.Double(4.0, 3.0, 2.0, 1.0), new BasicStroke(3.3f), \n            Color.white\n        ); \n        assertFalse(item1.equals(item2));\n        item2 = new LegendItem(\"Label2\", \"Description2\", \"ToolTip\", \n                \"URL\", false, new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                false, Color.black, false, Color.yellow, new BasicStroke(2.1f), \n                false, new Line2D.Double(4.0, 3.0, 2.0, 1.0), \n                new BasicStroke(3.3f), \n                Color.white); \n        assertTrue(item1.equals(item2));\n        \n        // fillPaintTransformer\n        item1.setFillPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        assertFalse(item1.equals(item2));\n        item2.setFillPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        assertTrue(item1.equals(item2));\n    }",
        "begin_line": 95,
        "end_line": 290,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 102,col 52)",
            "(line 103,col 9)-(line 108,col 29)",
            "(line 109,col 9)-(line 109,col 40)",
            "(line 110,col 9)-(line 110,col 40)",
            "(line 112,col 9)-(line 116,col 29)",
            "(line 117,col 9)-(line 117,col 41)",
            "(line 118,col 9)-(line 122,col 29)",
            "(line 123,col 9)-(line 123,col 40)",
            "(line 125,col 9)-(line 129,col 29)",
            "(line 130,col 9)-(line 130,col 41)",
            "(line 131,col 9)-(line 135,col 29)",
            "(line 136,col 9)-(line 136,col 40)",
            "(line 138,col 9)-(line 142,col 29)",
            "(line 143,col 9)-(line 143,col 41)",
            "(line 144,col 9)-(line 148,col 29)",
            "(line 149,col 9)-(line 149,col 40)",
            "(line 151,col 9)-(line 155,col 29)",
            "(line 156,col 9)-(line 156,col 41)",
            "(line 157,col 9)-(line 161,col 29)",
            "(line 162,col 9)-(line 162,col 40)",
            "(line 164,col 9)-(line 168,col 29)",
            "(line 169,col 9)-(line 169,col 41)",
            "(line 170,col 9)-(line 174,col 29)",
            "(line 175,col 9)-(line 175,col 40)",
            "(line 177,col 9)-(line 181,col 29)",
            "(line 182,col 9)-(line 182,col 41)",
            "(line 183,col 9)-(line 187,col 29)",
            "(line 188,col 9)-(line 188,col 40)",
            "(line 190,col 9)-(line 194,col 52)",
            "(line 195,col 9)-(line 195,col 41)",
            "(line 196,col 9)-(line 200,col 29)",
            "(line 201,col 9)-(line 201,col 40)",
            "(line 203,col 9)-(line 207,col 29)",
            "(line 208,col 9)-(line 208,col 41)",
            "(line 209,col 9)-(line 213,col 29)",
            "(line 214,col 9)-(line 214,col 40)",
            "(line 216,col 9)-(line 220,col 29)",
            "(line 221,col 9)-(line 221,col 41)",
            "(line 222,col 9)-(line 226,col 29)",
            "(line 227,col 9)-(line 227,col 40)",
            "(line 229,col 9)-(line 233,col 52)",
            "(line 234,col 9)-(line 234,col 41)",
            "(line 235,col 9)-(line 239,col 53)",
            "(line 240,col 9)-(line 240,col 40)",
            "(line 242,col 9)-(line 246,col 52)",
            "(line 247,col 9)-(line 247,col 41)",
            "(line 248,col 9)-(line 252,col 52)",
            "(line 253,col 9)-(line 253,col 40)",
            "(line 255,col 9)-(line 259,col 52)",
            "(line 260,col 9)-(line 260,col 41)",
            "(line 261,col 9)-(line 265,col 52)",
            "(line 266,col 9)-(line 266,col 40)",
            "(line 268,col 9)-(line 273,col 10)",
            "(line 274,col 9)-(line 274,col 41)",
            "(line 275,col 9)-(line 280,col 29)",
            "(line 281,col 9)-(line 281,col 40)",
            "(line 284,col 9)-(line 285,col 61)",
            "(line 286,col 9)-(line 286,col 41)",
            "(line 287,col 9)-(line 288,col 61)",
            "(line 289,col 9)-(line 289,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LegendItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LegendItemTests.java",
        "signature": "org.jfree.chart.junit.LegendItemTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        LegendItem item1 = new LegendItem(\"Item\", \"Description\", \n                \"ToolTip\", \"URL\", \n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.red); \n        LegendItem item2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(item1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            item2 = (LegendItem) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(item1, item2);\n    }",
        "begin_line": 295,
        "end_line": 315,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 296,col 9)-(line 298,col 71)",
            "(line 299,col 9)-(line 299,col 32)",
            "(line 300,col 9)-(line 313,col 9)",
            "(line 314,col 9)-(line 314,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LegendItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LegendItemTests.java",
        "signature": "org.jfree.chart.junit.LegendItemTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n        AttributedString as = new AttributedString(\"Test String\");\n        as.addAttribute(TextAttribute.FONT, new Font(\"Dialog\", Font.PLAIN, 12));\n        LegendItem item1 = new LegendItem(as, \"Description\", \"ToolTip\", \"URL\", \n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.red); \n        LegendItem item2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(item1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            item2 = (LegendItem) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(item1, item2);\n    }",
        "begin_line": 320,
        "end_line": 341,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 321,col 9)-(line 321,col 66)",
            "(line 322,col 9)-(line 322,col 80)",
            "(line 323,col 9)-(line 324,col 71)",
            "(line 325,col 9)-(line 325,col 32)",
            "(line 326,col 9)-(line 339,col 9)",
            "(line 340,col 9)-(line 340,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LegendItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LegendItemTests.java",
        "signature": "org.jfree.chart.junit.LegendItemTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LegendItem item = new LegendItem(\"Item\", \"Description\", \n                \"ToolTip\", \"URL\", \n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.red); \n        assertFalse(item instanceof Cloneable);\n    }",
        "begin_line": 347,
        "end_line": 352,
        "comment": "\n     * Cloning is not required for this class as it is designed to be \n     * immutable.\n     ",
        "child_ranges": [
            "(line 348,col 9)-(line 350,col 71)",
            "(line 351,col 9)-(line 351,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PieChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PieChartTests.java",
        "signature": "org.jfree.chart.junit.PieChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PieChartTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PieChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PieChartTests.java",
        "signature": "org.jfree.chart.junit.PieChartTests.PieChartTests(java.lang.String)",
        "snippet": "    public PieChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PieChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PieChartTests.java",
        "signature": "org.jfree.chart.junit.PieChartTests.setUp()",
        "snippet": "    protected void setUp() {\n\n        this.pieChart = createPieChart();\n\n    }",
        "begin_line": 85,
        "end_line": 89,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PieChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PieChartTests.java",
        "signature": "org.jfree.chart.junit.PieChartTests.testReplaceDatasetOnPieChart()",
        "snippet": "    public void testReplaceDatasetOnPieChart() {\n        LocalListener l = new LocalListener();\n        this.pieChart.addChangeListener(l);\n        PiePlot plot = (PiePlot) this.pieChart.getPlot();\n        plot.setDataset(null);\n        assertEquals(true, l.flag);\n        assertNull(plot.getDataset());\n    }",
        "begin_line": 96,
        "end_line": 103,
        "comment": "\n     * Using a regular pie chart, we replace the dataset with null.  Expect to \n     * receive notification of a chart change event, and (of course) the \n     * dataset should be null.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 46)",
            "(line 98,col 9)-(line 98,col 43)",
            "(line 99,col 9)-(line 99,col 57)",
            "(line 100,col 9)-(line 100,col 30)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PieChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PieChartTests.java",
        "signature": "org.jfree.chart.junit.PieChartTests.createPieChart()",
        "snippet": "    private static JFreeChart createPieChart() {\n        // create a dataset...\n        DefaultPieDataset data = new DefaultPieDataset();\n        data.setValue(\"Java\", new Double(43.2));\n        data.setValue(\"Visual Basic\", new Double(0.0));\n        data.setValue(\"C/C++\", new Double(17.5));\n\n        // create the chart...\n        return ChartFactory.createPieChart(\"Pie Chart\",  // chart title\n                                           data,         // data\n                                           true,         // include legend\n                                           true,\n                                           false\n                                           );\n    }",
        "begin_line": 110,
        "end_line": 124,
        "comment": "\n     * Creates a pie chart.\n     *\n     * @return The pie chart.\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 57)",
            "(line 113,col 9)-(line 113,col 48)",
            "(line 114,col 9)-(line 114,col 55)",
            "(line 115,col 9)-(line 115,col 49)",
            "(line 118,col 9)-(line 123,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PieChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PieChartTests.java",
        "signature": "org.jfree.chart.junit.PieChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 140,
        "end_line": 142,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 141,col 13)-(line 141,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StackedBarChartTests.class);\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.StackedBarChartTests(java.lang.String)",
        "snippet": "    public StackedBarChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n        }\n\n        assertTrue(success);\n\n    }",
        "begin_line": 110,
        "end_line": 129,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 32)",
            "(line 114,col 9)-(line 125,col 9)",
            "(line 127,col 9)-(line 127,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                    + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 134,
        "end_line": 157,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 140,col 49)",
            "(line 142,col 9)-(line 143,col 27)",
            "(line 145,col 9)-(line 145,col 46)",
            "(line 146,col 9)-(line 146,col 40)",
            "(line 147,col 9)-(line 147,col 64)",
            "(line 148,col 9)-(line 148,col 33)",
            "(line 149,col 9)-(line 149,col 35)",
            "(line 150,col 9)-(line 150,col 45)",
            "(line 151,col 9)-(line 151,col 38)",
            "(line 152,col 9)-(line 153,col 75)",
            "(line 154,col 9)-(line 155,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 163,
        "end_line": 171,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 64)",
            "(line 165,col 9)-(line 165,col 59)",
            "(line 166,col 9)-(line 167,col 57)",
            "(line 168,col 9)-(line 168,col 50)",
            "(line 169,col 9)-(line 169,col 74)",
            "(line 170,col 9)-(line 170,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }",
        "begin_line": 177,
        "end_line": 185,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 64)",
            "(line 179,col 9)-(line 179,col 59)",
            "(line 180,col 9)-(line 181,col 53)",
            "(line 182,col 9)-(line 182,col 48)",
            "(line 183,col 9)-(line 183,col 67)",
            "(line 184,col 9)-(line 184,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createStackedBarChart(\n            \"Stacked Bar Chart\",  // chart title\n            \"Domain\", \"Range\",\n            dataset,      // data\n            PlotOrientation.HORIZONTAL,\n            true,         // include legend\n            true,\n            true\n        );\n\n    }",
        "begin_line": 192,
        "end_line": 214,
        "comment": "\n     * Create a stacked bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 195,col 9)-(line 198,col 47)",
            "(line 200,col 9)-(line 201,col 27)",
            "(line 204,col 9)-(line 212,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 229,
        "end_line": 231,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 230,col 13)-(line 230,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PieChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PieChart3DTests.java",
        "signature": "org.jfree.chart.junit.PieChart3DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PieChart3DTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PieChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PieChart3DTests.java",
        "signature": "org.jfree.chart.junit.PieChart3DTests.PieChart3DTests(java.lang.String)",
        "snippet": "    public PieChart3DTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PieChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PieChart3DTests.java",
        "signature": "org.jfree.chart.junit.PieChart3DTests.setUp()",
        "snippet": "    protected void setUp() {\n        // create a dataset...\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Java\", new Double(43.2));\n        dataset.setValue(\"Visual Basic\", new Double(0.0));\n        dataset.setValue(\"C/C++\", new Double(17.5));\n        this.pieChart = createPieChart3D(dataset);\n    }",
        "begin_line": 88,
        "end_line": 95,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 60)",
            "(line 91,col 9)-(line 91,col 51)",
            "(line 92,col 9)-(line 92,col 58)",
            "(line 93,col 9)-(line 93,col 52)",
            "(line 94,col 9)-(line 94,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PieChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PieChart3DTests.java",
        "signature": "org.jfree.chart.junit.PieChart3DTests.testReplaceDatasetOnPieChart()",
        "snippet": "    public void testReplaceDatasetOnPieChart() {\n        LocalListener l = new LocalListener();\n        this.pieChart.addChangeListener(l);\n        PiePlot plot = (PiePlot) this.pieChart.getPlot();\n        plot.setDataset(null);\n        assertEquals(true, l.flag);\n        assertNull(plot.getDataset());\n    }",
        "begin_line": 102,
        "end_line": 109,
        "comment": "\n     * Using a regular pie chart, we replace the dataset with null.  Expect to \n     * receive notification of a chart change event, and (of course) the \n     * dataset should be null.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 46)",
            "(line 104,col 9)-(line 104,col 43)",
            "(line 105,col 9)-(line 105,col 57)",
            "(line 106,col 9)-(line 106,col 30)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PieChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PieChart3DTests.java",
        "signature": "org.jfree.chart.junit.PieChart3DTests.testNullValueInDataset()",
        "snippet": "    public void testNullValueInDataset() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Section 1\", 10.0);\n        dataset.setValue(\"Section 2\", 11.0);\n        dataset.setValue(\"Section 3\", null);\n        JFreeChart chart = createPieChart3D(dataset);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Throwable t) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 115,
        "end_line": 134,
        "comment": "\n     * Tests that no exceptions are thrown when there is a <code>null</code> \n     * value in the dataset.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 60)",
            "(line 117,col 9)-(line 117,col 44)",
            "(line 118,col 9)-(line 118,col 44)",
            "(line 119,col 9)-(line 119,col 44)",
            "(line 120,col 9)-(line 120,col 53)",
            "(line 121,col 9)-(line 121,col 32)",
            "(line 122,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 133,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PieChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PieChart3DTests.java",
        "signature": "org.jfree.chart.junit.PieChart3DTests.createPieChart3D(org.jfree.data.general.PieDataset)",
        "snippet": "    private static JFreeChart createPieChart3D(PieDataset dataset) {\n\n        return ChartFactory.createPieChart3D(\n            \"Pie Chart\",  // chart title\n            dataset,      // data\n            true,         // include legend\n            true,\n            false\n        );\n    }",
        "begin_line": 143,
        "end_line": 152,
        "comment": "\n     * Creates a pie chart.\n     *\n     * @param dataset  the dataset.\n     * \n     * @return The pie chart.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 151,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PieChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PieChart3DTests.java",
        "signature": "org.jfree.chart.junit.PieChart3DTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 167,
        "end_line": 169,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 168,col 13)-(line 168,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(AreaChartTests.class);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.AreaChartTests(java.lang.String)",
        "snippet": "    public AreaChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createAreaChart();\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 105,
        "end_line": 113,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 64)",
            "(line 107,col 9)-(line 107,col 59)",
            "(line 108,col 9)-(line 109,col 57)",
            "(line 110,col 9)-(line 110,col 50)",
            "(line 111,col 9)-(line 111,col 74)",
            "(line 112,col 9)-(line 112,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }",
        "begin_line": 119,
        "end_line": 127,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 64)",
            "(line 121,col 9)-(line 121,col 59)",
            "(line 122,col 9)-(line 123,col 53)",
            "(line 124,col 9)-(line 124,col 48)",
            "(line 125,col 9)-(line 125,col 67)",
            "(line 126,col 9)-(line 126,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 133,
        "end_line": 148,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 32)",
            "(line 135,col 9)-(line 146,col 9)",
            "(line 147,col 9)-(line 147,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\n                \"S\", \"C\", data);\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                   + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 153,
        "end_line": 173,
        "comment": "\n     * Replaces the chart's dataset and then checks that the new dataset is OK.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 157,col 49)",
            "(line 159,col 9)-(line 160,col 32)",
            "(line 161,col 9)-(line 161,col 46)",
            "(line 162,col 9)-(line 162,col 40)",
            "(line 163,col 9)-(line 163,col 64)",
            "(line 164,col 9)-(line 164,col 33)",
            "(line 165,col 9)-(line 165,col 35)",
            "(line 166,col 9)-(line 166,col 45)",
            "(line 167,col 9)-(line 167,col 38)",
            "(line 168,col 9)-(line 169,col 74)",
            "(line 170,col 9)-(line 171,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.createAreaChart()",
        "snippet": "    private static JFreeChart createAreaChart() {\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n        return ChartFactory.createAreaChart(\"Area Chart\", \"Domain\", \"Range\",\n                dataset, PlotOrientation.HORIZONTAL, true, true, true);\n\n    }",
        "begin_line": 180,
        "end_line": 190,
        "comment": "\n     * Create an area chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 181,col 9)-(line 184,col 47)",
            "(line 185,col 9)-(line 186,col 27)",
            "(line 187,col 9)-(line 188,col 71)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 205,
        "end_line": 207,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 206,col 13)-(line 206,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PaintMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PaintMapTests.java",
        "signature": "org.jfree.chart.junit.PaintMapTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PaintMapTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PaintMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PaintMapTests.java",
        "signature": "org.jfree.chart.junit.PaintMapTests.PaintMapTests(java.lang.String)",
        "snippet": "    public PaintMapTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PaintMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PaintMapTests.java",
        "signature": "org.jfree.chart.junit.PaintMapTests.testGetPaint()",
        "snippet": "    public void testGetPaint() {\n        PaintMap m1 = new PaintMap();\n        assertEquals(null, m1.getPaint(\"A\"));\n        m1.put(\"A\", Color.red);\n        assertEquals(Color.red, m1.getPaint(\"A\"));\n        m1.put(\"A\", null);\n        assertEquals(null, m1.getPaint(\"A\"));\n        \n        // a null key should throw an IllegalArgumentException\n        boolean pass = false;\n        try {\n            m1.getPaint(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 85,
        "end_line": 102,
        "comment": "\n     * Some checks for the getPaint() method.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 37)",
            "(line 87,col 9)-(line 87,col 45)",
            "(line 88,col 9)-(line 88,col 31)",
            "(line 89,col 9)-(line 89,col 50)",
            "(line 90,col 9)-(line 90,col 26)",
            "(line 91,col 9)-(line 91,col 45)",
            "(line 94,col 9)-(line 94,col 29)",
            "(line 95,col 9)-(line 100,col 9)",
            "(line 101,col 9)-(line 101,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PaintMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PaintMapTests.java",
        "signature": "org.jfree.chart.junit.PaintMapTests.testPut()",
        "snippet": "    public void testPut() {\n        PaintMap m1 = new PaintMap();\n        m1.put(\"A\", Color.red);\n        assertEquals(Color.red, m1.getPaint(\"A\"));\n        \n        // a null key should throw an IllegalArgumentException\n        boolean pass = false;\n        try {\n            m1.put(null, Color.blue);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 107,
        "end_line": 121,
        "comment": "\n     * Some checks for the put() method.\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 37)",
            "(line 109,col 9)-(line 109,col 31)",
            "(line 110,col 9)-(line 110,col 50)",
            "(line 113,col 9)-(line 113,col 29)",
            "(line 114,col 9)-(line 119,col 9)",
            "(line 120,col 9)-(line 120,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PaintMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PaintMapTests.java",
        "signature": "org.jfree.chart.junit.PaintMapTests.testEquals()",
        "snippet": "    public void testEquals() {\n        PaintMap m1 = new PaintMap();\n        PaintMap m2 = new PaintMap();\n        assertTrue(m1.equals(m1));\n        assertTrue(m1.equals(m2));\n        assertFalse(m1.equals(null));\n        assertFalse(m1.equals(\"ABC\"));\n        \n        m1.put(\"K1\", Color.red);\n        assertFalse(m1.equals(m2));\n        m2.put(\"K1\", Color.red);\n        assertTrue(m1.equals(m2));\n        \n        m1.put(\"K2\", new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, \n                Color.yellow));\n        assertFalse(m1.equals(m2));\n        m2.put(\"K2\", new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, \n                Color.yellow));\n        assertTrue(m1.equals(m2));\n        \n        m1.put(\"K2\", null);\n        assertFalse(m1.equals(m2));\n        m2.put(\"K2\", null);\n        assertTrue(m1.equals(m2));\n    }",
        "begin_line": 126,
        "end_line": 150,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 37)",
            "(line 128,col 9)-(line 128,col 37)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 131,col 9)-(line 131,col 37)",
            "(line 132,col 9)-(line 132,col 38)",
            "(line 134,col 9)-(line 134,col 32)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 136,col 32)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 139,col 9)-(line 140,col 31)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 143,col 31)",
            "(line 144,col 9)-(line 144,col 34)",
            "(line 146,col 9)-(line 146,col 27)",
            "(line 147,col 9)-(line 147,col 35)",
            "(line 148,col 9)-(line 148,col 27)",
            "(line 149,col 9)-(line 149,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PaintMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PaintMapTests.java",
        "signature": "org.jfree.chart.junit.PaintMapTests.testCloning()",
        "snippet": "    public void testCloning() {\n        PaintMap m1 = new PaintMap();\n        PaintMap m2 = null;\n        try {\n            m2 = (PaintMap) m1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(m1.equals(m2));\n        \n        m1.put(\"K1\", Color.red);\n        m1.put(\"K2\", new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, \n                Color.yellow));\n        try {\n            m2 = (PaintMap) m1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(m1.equals(m2));\n    }",
        "begin_line": 155,
        "end_line": 176,
        "comment": "\n     * Some checks for cloning.\n     ",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 37)",
            "(line 157,col 9)-(line 157,col 27)",
            "(line 158,col 9)-(line 163,col 9)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 166,col 9)-(line 166,col 32)",
            "(line 167,col 9)-(line 168,col 31)",
            "(line 169,col 9)-(line 174,col 9)",
            "(line 175,col 9)-(line 175,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PaintMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PaintMapTests.java",
        "signature": "org.jfree.chart.junit.PaintMapTests.testSerialization1()",
        "snippet": "    public void testSerialization1() {\n        PaintMap m1 = new PaintMap();\n        PaintMap m2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            m2 = (PaintMap) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(m1, m2);\n    }",
        "begin_line": 181,
        "end_line": 199,
        "comment": "\n     * A check for serialization.\n     ",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 37)",
            "(line 183,col 9)-(line 183,col 27)",
            "(line 184,col 9)-(line 197,col 9)",
            "(line 198,col 9)-(line 198,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PaintMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PaintMapTests.java",
        "signature": "org.jfree.chart.junit.PaintMapTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n        PaintMap m1 = new PaintMap();\n        m1.put(\"K1\", Color.red);\n        m1.put(\"K2\", new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, \n                Color.yellow));\n        PaintMap m2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            m2 = (PaintMap) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(m1, m2);\n    }",
        "begin_line": 204,
        "end_line": 225,
        "comment": "\n     * A check for serialization.\n     ",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 37)",
            "(line 206,col 9)-(line 206,col 32)",
            "(line 207,col 9)-(line 208,col 31)",
            "(line 209,col 9)-(line 209,col 27)",
            "(line 210,col 9)-(line 223,col 9)",
            "(line 224,col 9)-(line 224,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.PaintMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/PaintMapTests.java",
        "signature": "org.jfree.chart.junit.PaintMapTests.testKeysOfDifferentClasses()",
        "snippet": "    public void testKeysOfDifferentClasses() {\n        PaintMap m = new PaintMap();\n        m.put(\"ABC\", Color.red);\n        m.put(new Integer(99), Color.blue);\n        assertEquals(Color.blue, m.getPaint(new Integer(99)));\n    }",
        "begin_line": 232,
        "end_line": 237,
        "comment": "\n     * This test covers a bug reported in the forum:\n     * \n     * http://www.jfree.org/phpBB2/viewtopic.php?t=19980\n     ",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 36)",
            "(line 234,col 9)-(line 234,col 32)",
            "(line 235,col 9)-(line 235,col 43)",
            "(line 236,col 9)-(line 236,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYStepAreaChartTests.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.XYStepAreaChartTests(java.lang.String)",
        "snippet": "    public XYStepAreaChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n        assertTrue(success);\n\n    }",
        "begin_line": 103,
        "end_line": 121,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 32)",
            "(line 106,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 126,
        "end_line": 147,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 52)",
            "(line 130,col 9)-(line 130,col 32)",
            "(line 131,col 9)-(line 131,col 32)",
            "(line 132,col 9)-(line 132,col 32)",
            "(line 133,col 9)-(line 133,col 60)",
            "(line 135,col 9)-(line 135,col 46)",
            "(line 136,col 9)-(line 136,col 40)",
            "(line 137,col 9)-(line 137,col 52)",
            "(line 138,col 9)-(line 138,col 33)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 140,col 9)-(line 140,col 45)",
            "(line 141,col 9)-(line 141,col 38)",
            "(line 142,col 9)-(line 143,col 73)",
            "(line 144,col 9)-(line 145,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 153,
        "end_line": 160,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 52)",
            "(line 155,col 9)-(line 155,col 53)",
            "(line 156,col 9)-(line 156,col 73)",
            "(line 157,col 9)-(line 157,col 50)",
            "(line 158,col 9)-(line 158,col 68)",
            "(line 159,col 9)-(line 159,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(1.0, 1.0);\n        series1.add(2.0, 2.0);\n        series1.add(3.0, 3.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        // create the chart...\n        return ChartFactory.createXYStepAreaChart(\n            \"Step Chart\",  // chart title\n            \"Domain\",\n            \"Range\",\n            dataset,         // data\n            PlotOrientation.VERTICAL,\n            true,            // include legend\n            true,            // tooltips\n            true            // urls\n        );\n\n    }",
        "begin_line": 167,
        "end_line": 188,
        "comment": "\n     * Create a horizontal bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 52)",
            "(line 171,col 9)-(line 171,col 30)",
            "(line 172,col 9)-(line 172,col 30)",
            "(line 173,col 9)-(line 173,col 30)",
            "(line 174,col 9)-(line 174,col 60)",
            "(line 177,col 9)-(line 186,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 205,col 13)-(line 205,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(GanttChartTests.class);\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.GanttChartTests(java.lang.String)",
        "snippet": "    public GanttChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createGanttChart();\n    }",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 108,
        "end_line": 123,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 32)",
            "(line 110,col 9)-(line 121,col 9)",
            "(line 122,col 9)-(line 122,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.testDrawWithNullInfo2()",
        "snippet": "    public void testDrawWithNullInfo2() {\n        boolean success = false;\n        try {\n            JFreeChart chart = createGanttChart();\n            CategoryPlot plot = (CategoryPlot) chart.getPlot();\n            plot.setDataset(createDataset());\n            /* BufferedImage img =*/ chart.createBufferedImage(300, 200, null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 129,
        "end_line": 142,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 32)",
            "(line 131,col 9)-(line 140,col 9)",
            "(line 141,col 9)-(line 141,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(null);\n        assertEquals(true, l.flag);\n    }",
        "begin_line": 147,
        "end_line": 153,
        "comment": "\n     * Replaces the chart's dataset and then checks that the new dataset is OK.\n     ",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 46)",
            "(line 149,col 9)-(line 149,col 40)",
            "(line 150,col 9)-(line 150,col 64)",
            "(line 151,col 9)-(line 151,col 30)",
            "(line 152,col 9)-(line 152,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 159,
        "end_line": 167,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 64)",
            "(line 161,col 9)-(line 161,col 59)",
            "(line 162,col 9)-(line 163,col 57)",
            "(line 164,col 9)-(line 164,col 50)",
            "(line 165,col 9)-(line 165,col 74)",
            "(line 166,col 9)-(line 166,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }",
        "begin_line": 173,
        "end_line": 181,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 64)",
            "(line 175,col 9)-(line 175,col 59)",
            "(line 176,col 9)-(line 177,col 53)",
            "(line 178,col 9)-(line 178,col 48)",
            "(line 179,col 9)-(line 179,col 67)",
            "(line 180,col 9)-(line 180,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.createGanttChart()",
        "snippet": "    private static JFreeChart createGanttChart() {\n\n        // create the chart...\n        return ChartFactory.createGanttChart(\n            \"Gantt Chart\",\n            \"Domain\", \"Range\",\n            null,\n            true,     // include legend\n            true,\n            true\n        );\n\n    }",
        "begin_line": 188,
        "end_line": 200,
        "comment": "\n     * Create a Gantt chart.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 198,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.createDataset()",
        "snippet": "    public static IntervalCategoryDataset createDataset() {\n\n        TaskSeries s1 = new TaskSeries(\"Scheduled\");\n        s1.add(new Task(\"Write Proposal\",\n               new SimpleTimePeriod(date(1, Calendar.APRIL, 2001),\n                                    date(5, Calendar.APRIL, 2001))));\n        s1.add(new Task(\"Obtain Approval\",\n               new SimpleTimePeriod(date(9, Calendar.APRIL, 2001),\n                                    date(9, Calendar.APRIL, 2001))));\n        s1.add(new Task(\"Requirements Analysis\",\n               new SimpleTimePeriod(date(10, Calendar.APRIL, 2001),\n                                    date(5, Calendar.MAY, 2001))));\n        s1.add(new Task(\"Design Phase\",\n               new SimpleTimePeriod(date(6, Calendar.MAY, 2001),\n                                    date(30, Calendar.MAY, 2001))));\n        s1.add(new Task(\"Design Signoff\",\n               new SimpleTimePeriod(date(2, Calendar.JUNE, 2001),\n                                    date(2, Calendar.JUNE, 2001))));\n        s1.add(new Task(\"Alpha Implementation\",\n               new SimpleTimePeriod(date(3, Calendar.JUNE, 2001),\n                                    date(31, Calendar.JULY, 2001))));\n        s1.add(new Task(\"Design Review\",\n               new SimpleTimePeriod(date(1, Calendar.AUGUST, 2001),\n                                    date(8, Calendar.AUGUST, 2001))));\n        s1.add(new Task(\"Revised Design Signoff\",\n               new SimpleTimePeriod(date(10, Calendar.AUGUST, 2001),\n                                    date(10, Calendar.AUGUST, 2001))));\n        s1.add(new Task(\"Beta Implementation\",\n               new SimpleTimePeriod(date(12, Calendar.AUGUST, 2001),\n                                    date(12, Calendar.SEPTEMBER, 2001))));\n        s1.add(new Task(\"Testing\",\n               new SimpleTimePeriod(date(13, Calendar.SEPTEMBER, 2001),\n                                    date(31, Calendar.OCTOBER, 2001))));\n        s1.add(new Task(\"Final Implementation\",\n               new SimpleTimePeriod(date(1, Calendar.NOVEMBER, 2001),\n                                    date(15, Calendar.NOVEMBER, 2001))));\n        s1.add(new Task(\"Signoff\",\n               new SimpleTimePeriod(date(28, Calendar.NOVEMBER, 2001),\n                                    date(30, Calendar.NOVEMBER, 2001))));\n\n        TaskSeries s2 = new TaskSeries(\"Actual\");\n        s2.add(new Task(\"Write Proposal\",\n               new SimpleTimePeriod(date(1, Calendar.APRIL, 2001),\n                                    date(5, Calendar.APRIL, 2001))));\n        s2.add(new Task(\"Obtain Approval\",\n               new SimpleTimePeriod(date(9, Calendar.APRIL, 2001),\n                                    date(9, Calendar.APRIL, 2001))));\n        s2.add(new Task(\"Requirements Analysis\",\n               new SimpleTimePeriod(date(10, Calendar.APRIL, 2001),\n                                    date(15, Calendar.MAY, 2001))));\n        s2.add(new Task(\"Design Phase\",\n               new SimpleTimePeriod(date(15, Calendar.MAY, 2001),\n                                    date(17, Calendar.JUNE, 2001))));\n        s2.add(new Task(\"Design Signoff\",\n               new SimpleTimePeriod(date(30, Calendar.JUNE, 2001),\n                                    date(30, Calendar.JUNE, 2001))));\n        s2.add(new Task(\"Alpha Implementation\",\n               new SimpleTimePeriod(date(1, Calendar.JULY, 2001),\n                                    date(12, Calendar.SEPTEMBER, 2001))));\n        s2.add(new Task(\"Design Review\",\n               new SimpleTimePeriod(date(12, Calendar.SEPTEMBER, 2001),\n                                    date(22, Calendar.SEPTEMBER, 2001))));\n        s2.add(new Task(\"Revised Design Signoff\",\n               new SimpleTimePeriod(date(25, Calendar.SEPTEMBER, 2001),\n                                    date(27, Calendar.SEPTEMBER, 2001))));\n        s2.add(new Task(\"Beta Implementation\",\n               new SimpleTimePeriod(date(27, Calendar.SEPTEMBER, 2001),\n                                    date(30, Calendar.OCTOBER, 2001))));\n        s2.add(new Task(\"Testing\",\n               new SimpleTimePeriod(date(31, Calendar.OCTOBER, 2001),\n                                    date(17, Calendar.NOVEMBER, 2001))));\n        s2.add(new Task(\"Final Implementation\",\n               new SimpleTimePeriod(date(18, Calendar.NOVEMBER, 2001),\n                                    date(5, Calendar.DECEMBER, 2001))));\n        s2.add(new Task(\"Signoff\",\n               new SimpleTimePeriod(date(10, Calendar.DECEMBER, 2001),\n                                    date(11, Calendar.DECEMBER, 2001))));\n\n        TaskSeriesCollection collection = new TaskSeriesCollection();\n        collection.add(s1);\n        collection.add(s2);\n\n        return collection;\n    }",
        "begin_line": 207,
        "end_line": 290,
        "comment": "\n     * Creates a sample dataset for a Gantt chart.\n     *\n     * @return The dataset.\n     ",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 52)",
            "(line 210,col 9)-(line 212,col 69)",
            "(line 213,col 9)-(line 215,col 69)",
            "(line 216,col 9)-(line 218,col 67)",
            "(line 219,col 9)-(line 221,col 68)",
            "(line 222,col 9)-(line 224,col 68)",
            "(line 225,col 9)-(line 227,col 69)",
            "(line 228,col 9)-(line 230,col 70)",
            "(line 231,col 9)-(line 233,col 71)",
            "(line 234,col 9)-(line 236,col 74)",
            "(line 237,col 9)-(line 239,col 72)",
            "(line 240,col 9)-(line 242,col 73)",
            "(line 243,col 9)-(line 245,col 73)",
            "(line 247,col 9)-(line 247,col 49)",
            "(line 248,col 9)-(line 250,col 69)",
            "(line 251,col 9)-(line 253,col 69)",
            "(line 254,col 9)-(line 256,col 68)",
            "(line 257,col 9)-(line 259,col 69)",
            "(line 260,col 9)-(line 262,col 69)",
            "(line 263,col 9)-(line 265,col 74)",
            "(line 266,col 9)-(line 268,col 74)",
            "(line 269,col 9)-(line 271,col 74)",
            "(line 272,col 9)-(line 274,col 72)",
            "(line 275,col 9)-(line 277,col 73)",
            "(line 278,col 9)-(line 280,col 72)",
            "(line 281,col 9)-(line 283,col 73)",
            "(line 285,col 9)-(line 285,col 69)",
            "(line 286,col 9)-(line 286,col 27)",
            "(line 287,col 9)-(line 287,col 27)",
            "(line 289,col 9)-(line 289,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.date(int, int, int)",
        "snippet": "    private static Date date(int day, int month, int year) {\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(year, month, day);\n        Date result = calendar.getTime();\n        return result;\n\n    }    /**",
        "begin_line": 301,
        "end_line": 308,
        "comment": "\n     * Utility method for creating <code>Date</code> objects.\n     *\n     * @param day  the date.\n     * @param month  the month.\n     * @param year  the year.\n     *\n     * @return a date.\n     ",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 51)",
            "(line 304,col 9)-(line 304,col 39)",
            "(line 305,col 9)-(line 305,col 41)",
            "(line 306,col 9)-(line 306,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 322,
        "end_line": 324,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 323,col 13)-(line 323,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StackedAreaChartTests.class);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.StackedAreaChartTests(java.lang.String)",
        "snippet": "    public StackedAreaChartTests(String name) {\n        super(name);\n    }",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n        }\n        assertTrue(success);\n\n    }",
        "begin_line": 106,
        "end_line": 123,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 32)",
            "(line 109,col 9)-(line 120,col 9)",
            "(line 121,col 9)-(line 121,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                    + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
        "begin_line": 128,
        "end_line": 151,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 134,col 49)",
            "(line 136,col 9)-(line 137,col 27)",
            "(line 139,col 9)-(line 139,col 46)",
            "(line 140,col 9)-(line 140,col 40)",
            "(line 141,col 9)-(line 141,col 64)",
            "(line 142,col 9)-(line 142,col 33)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 144,col 45)",
            "(line 145,col 9)-(line 145,col 38)",
            "(line 146,col 9)-(line 147,col 75)",
            "(line 148,col 9)-(line 149,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n            = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }",
        "begin_line": 157,
        "end_line": 165,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 64)",
            "(line 159,col 9)-(line 159,col 59)",
            "(line 160,col 9)-(line 161,col 53)",
            "(line 162,col 9)-(line 162,col 50)",
            "(line 163,col 9)-(line 163,col 74)",
            "(line 164,col 9)-(line 164,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }",
        "begin_line": 171,
        "end_line": 179,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 64)",
            "(line 173,col 9)-(line 173,col 59)",
            "(line 174,col 9)-(line 175,col 53)",
            "(line 176,col 9)-(line 176,col 48)",
            "(line 177,col 9)-(line 177,col 67)",
            "(line 178,col 9)-(line 178,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createStackedAreaChart(\n            \"Stacked Area Chart\",  // chart title\n            \"Domain\", \"Range\",\n            dataset,      // data\n            PlotOrientation.HORIZONTAL,\n            true,         // include legend\n            true,\n            true\n        );\n\n    }",
        "begin_line": 186,
        "end_line": 208,
        "comment": "\n     * Create a stacked bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 189,col 9)-(line 192,col 47)",
            "(line 194,col 9)-(line 195,col 27)",
            "(line 198,col 9)-(line 206,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }",
        "begin_line": 223,
        "end_line": 225,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 224,col 13)-(line 224,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.SpiderWebPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/SpiderWebPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.SpiderWebPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(SpiderWebPlotTests.class);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.SpiderWebPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/SpiderWebPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.SpiderWebPlotTests.SpiderWebPlotTests(java.lang.String)",
        "snippet": "    public SpiderWebPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.SpiderWebPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/SpiderWebPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.SpiderWebPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        SpiderWebPlot p1 = new SpiderWebPlot(new DefaultCategoryDataset());\n        SpiderWebPlot p2 = new SpiderWebPlot(new DefaultCategoryDataset());\n        assertTrue(p1.equals(p2));\n        assertTrue(p2.equals(p1));\n        \n        // dataExtractOrder\n        p1.setDataExtractOrder(TableOrder.BY_COLUMN);\n        assertFalse(p1.equals(p2));\n        p2.setDataExtractOrder(TableOrder.BY_COLUMN);\n        assertTrue(p1.equals(p2));\n        \n        // headPercent\n        p1.setHeadPercent(0.321);\n        assertFalse(p1.equals(p2));\n        p2.setHeadPercent(0.321);\n        assertTrue(p1.equals(p2));\n        \n        // interiorGap\n        p1.setInteriorGap(0.123);\n        assertFalse(p1.equals(p2));\n        p2.setInteriorGap(0.123);\n        assertTrue(p1.equals(p2));\n        \n        // startAngle\n        p1.setStartAngle(0.456);\n        assertFalse(p1.equals(p2));\n        p2.setStartAngle(0.456);\n        assertTrue(p1.equals(p2));\n        \n        // direction \n        p1.setDirection(Rotation.ANTICLOCKWISE);\n        assertFalse(p1.equals(p2));\n        p2.setDirection(Rotation.ANTICLOCKWISE);\n        assertTrue(p1.equals(p2));\n        \n        // maxValue\n        p1.setMaxValue(123.4);\n        assertFalse(p1.equals(p2));\n        p2.setMaxValue(123.4);\n        assertTrue(p1.equals(p2));\n        \n        // legendItemShape\n        p1.setLegendItemShape(new Rectangle(1, 2, 3, 4));\n        assertFalse(p1.equals(p2));\n        p2.setLegendItemShape(new Rectangle(1, 2, 3, 4));\n        assertTrue(p1.equals(p2));\n\n        // seriesPaint\n        p1.setSeriesPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.white));\n        assertFalse(p1.equals(p2));\n        p2.setSeriesPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.white));\n        assertTrue(p1.equals(p2));\n\n        // seriesPaintList\n        p1.setSeriesPaint(1, new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.white));\n        assertFalse(p1.equals(p2));\n        p2.setSeriesPaint(1, new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.white));\n        assertTrue(p1.equals(p2));\n        \n        // baseSeriesPaint\n        p1.setBaseSeriesPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.black));\n        assertFalse(p1.equals(p2));\n        p2.setBaseSeriesPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.black));\n        assertTrue(p1.equals(p2));\n        \n        // seriesOutlinePaint\n        p1.setSeriesOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.black));\n        assertFalse(p1.equals(p2));\n        p2.setSeriesOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.black));\n        assertTrue(p1.equals(p2));\n\n        // seriesOutlinePaintList\n        p1.setSeriesOutlinePaint(1, new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.green));\n        assertFalse(p1.equals(p2));\n        p2.setSeriesOutlinePaint(1, new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.green));\n        assertTrue(p1.equals(p2));\n\n        // baseSeriesOutlinePaint\n        p1.setBaseSeriesOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.cyan, \n                3.0f, 4.0f, Color.green));\n        assertFalse(p1.equals(p2));\n        p2.setBaseSeriesOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.cyan, \n                3.0f, 4.0f, Color.green));\n        assertTrue(p1.equals(p2));\n        \n        // seriesOutlineStroke\n        BasicStroke s = new BasicStroke(1.23f);\n        p1.setSeriesOutlineStroke(s);\n        assertFalse(p1.equals(p2));\n        p2.setSeriesOutlineStroke(s);\n        assertTrue(p1.equals(p2));\n        \n        // seriesOutlineStrokeList\n        p1.setSeriesOutlineStroke(1, s);\n        assertFalse(p1.equals(p2));\n        p2.setSeriesOutlineStroke(1, s);\n        assertTrue(p1.equals(p2));\n        \n        // baseSeriesOutlineStroke\n        p1.setBaseSeriesOutlineStroke(s);\n        assertFalse(p1.equals(p2));\n        p2.setBaseSeriesOutlineStroke(s);\n        assertTrue(p1.equals(p2));\n\n        // webFilled\n        p1.setWebFilled(false);\n        assertFalse(p1.equals(p2));\n        p2.setWebFilled(false);\n        assertTrue(p1.equals(p2));\n        \n        // axisLabelGap\n        p1.setAxisLabelGap(0.11);\n        assertFalse(p1.equals(p2));\n        p2.setAxisLabelGap(0.11);\n        assertTrue(p1.equals(p2));\n\n        // labelFont\n        p1.setLabelFont(new Font(\"Serif\", Font.PLAIN, 9));\n        assertFalse(p1.equals(p2));\n        p2.setLabelFont(new Font(\"Serif\", Font.PLAIN, 9));\n        assertTrue(p1.equals(p2));\n        \n        // labelPaint\n        p1.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue));\n        assertFalse(p1.equals(p2));\n        p2.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue));\n        assertTrue(p1.equals(p2));\n\n        // labelGenerator\n        p1.setLabelGenerator(new StandardCategoryItemLabelGenerator(\"XYZ: {0}\",\n                new DecimalFormat(\"0.000\")));\n        assertFalse(p1.equals(p2));\n        p2.setLabelGenerator(new StandardCategoryItemLabelGenerator(\"XYZ: {0}\",\n                new DecimalFormat(\"0.000\")));\n        assertTrue(p1.equals(p2));\n        \n        // toolTipGenerator\n        p1.setToolTipGenerator(new StandardCategoryToolTipGenerator());\n        assertFalse(p1.equals(p2));\n        p2.setToolTipGenerator(new StandardCategoryToolTipGenerator());\n        assertTrue(p1.equals(p2));\n\n        // urlGenerator\n        p1.setURLGenerator(new StandardCategoryURLGenerator());\n        assertFalse(p1.equals(p2));\n        p2.setURLGenerator(new StandardCategoryURLGenerator());\n        assertTrue(p1.equals(p2));\n        \n        // axisLinePaint\n        p1.setAxisLinePaint(Color.red);\n        assertFalse(p1.equals(p2));\n        p2.setAxisLinePaint(Color.red);\n        assertTrue(p1.equals(p2));\n        \n        // axisLineStroke\n        p1.setAxisLineStroke(new BasicStroke(1.1f));\n        assertFalse(p1.equals(p2));\n        p2.setAxisLineStroke(new BasicStroke(1.1f));\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 101,
        "end_line": 273,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 75)",
            "(line 103,col 9)-(line 103,col 75)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 108,col 9)-(line 108,col 53)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 110,col 53)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 114,col 9)-(line 114,col 33)",
            "(line 115,col 9)-(line 115,col 35)",
            "(line 116,col 9)-(line 116,col 33)",
            "(line 117,col 9)-(line 117,col 34)",
            "(line 120,col 9)-(line 120,col 33)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 33)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 126,col 9)-(line 126,col 32)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 128,col 32)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 132,col 9)-(line 132,col 48)",
            "(line 133,col 9)-(line 133,col 35)",
            "(line 134,col 9)-(line 134,col 48)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 138,col 9)-(line 138,col 30)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 140,col 9)-(line 140,col 30)",
            "(line 141,col 9)-(line 141,col 34)",
            "(line 144,col 9)-(line 144,col 57)",
            "(line 145,col 9)-(line 145,col 35)",
            "(line 146,col 9)-(line 146,col 57)",
            "(line 147,col 9)-(line 147,col 34)",
            "(line 150,col 9)-(line 151,col 42)",
            "(line 152,col 9)-(line 152,col 35)",
            "(line 153,col 9)-(line 154,col 42)",
            "(line 155,col 9)-(line 155,col 34)",
            "(line 158,col 9)-(line 159,col 42)",
            "(line 160,col 9)-(line 160,col 35)",
            "(line 161,col 9)-(line 162,col 42)",
            "(line 163,col 9)-(line 163,col 34)",
            "(line 166,col 9)-(line 167,col 42)",
            "(line 168,col 9)-(line 168,col 35)",
            "(line 169,col 9)-(line 170,col 42)",
            "(line 171,col 9)-(line 171,col 34)",
            "(line 174,col 9)-(line 175,col 42)",
            "(line 176,col 9)-(line 176,col 35)",
            "(line 177,col 9)-(line 178,col 42)",
            "(line 179,col 9)-(line 179,col 34)",
            "(line 182,col 9)-(line 183,col 42)",
            "(line 184,col 9)-(line 184,col 35)",
            "(line 185,col 9)-(line 186,col 42)",
            "(line 187,col 9)-(line 187,col 34)",
            "(line 190,col 9)-(line 191,col 42)",
            "(line 192,col 9)-(line 192,col 35)",
            "(line 193,col 9)-(line 194,col 42)",
            "(line 195,col 9)-(line 195,col 34)",
            "(line 198,col 9)-(line 198,col 47)",
            "(line 199,col 9)-(line 199,col 37)",
            "(line 200,col 9)-(line 200,col 35)",
            "(line 201,col 9)-(line 201,col 37)",
            "(line 202,col 9)-(line 202,col 34)",
            "(line 205,col 9)-(line 205,col 40)",
            "(line 206,col 9)-(line 206,col 35)",
            "(line 207,col 9)-(line 207,col 40)",
            "(line 208,col 9)-(line 208,col 34)",
            "(line 211,col 9)-(line 211,col 41)",
            "(line 212,col 9)-(line 212,col 35)",
            "(line 213,col 9)-(line 213,col 41)",
            "(line 214,col 9)-(line 214,col 34)",
            "(line 217,col 9)-(line 217,col 31)",
            "(line 218,col 9)-(line 218,col 35)",
            "(line 219,col 9)-(line 219,col 31)",
            "(line 220,col 9)-(line 220,col 34)",
            "(line 223,col 9)-(line 223,col 33)",
            "(line 224,col 9)-(line 224,col 35)",
            "(line 225,col 9)-(line 225,col 33)",
            "(line 226,col 9)-(line 226,col 34)",
            "(line 229,col 9)-(line 229,col 58)",
            "(line 230,col 9)-(line 230,col 35)",
            "(line 231,col 9)-(line 231,col 58)",
            "(line 232,col 9)-(line 232,col 34)",
            "(line 235,col 9)-(line 236,col 41)",
            "(line 237,col 9)-(line 237,col 35)",
            "(line 238,col 9)-(line 239,col 41)",
            "(line 240,col 9)-(line 240,col 34)",
            "(line 243,col 9)-(line 244,col 45)",
            "(line 245,col 9)-(line 245,col 35)",
            "(line 246,col 9)-(line 247,col 45)",
            "(line 248,col 9)-(line 248,col 34)",
            "(line 251,col 9)-(line 251,col 71)",
            "(line 252,col 9)-(line 252,col 35)",
            "(line 253,col 9)-(line 253,col 71)",
            "(line 254,col 9)-(line 254,col 34)",
            "(line 257,col 9)-(line 257,col 63)",
            "(line 258,col 9)-(line 258,col 35)",
            "(line 259,col 9)-(line 259,col 63)",
            "(line 260,col 9)-(line 260,col 34)",
            "(line 263,col 9)-(line 263,col 39)",
            "(line 264,col 9)-(line 264,col 35)",
            "(line 265,col 9)-(line 265,col 39)",
            "(line 266,col 9)-(line 266,col 34)",
            "(line 269,col 9)-(line 269,col 52)",
            "(line 270,col 9)-(line 270,col 35)",
            "(line 271,col 9)-(line 271,col 52)",
            "(line 272,col 9)-(line 272,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.SpiderWebPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/SpiderWebPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.SpiderWebPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        SpiderWebPlot p1 = new SpiderWebPlot(new DefaultCategoryDataset());\n        Rectangle2D legendShape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        p1.setLegendItemShape(legendShape);\n        SpiderWebPlot p2 = null;\n        try {\n            p2 = (SpiderWebPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        \n        // change the legendItemShape\n        legendShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(p1.equals(p2));\n        p2.setLegendItemShape(legendShape);\n        assertTrue(p1.equals(p2));\n        \n        // change a series paint\n        p1.setSeriesPaint(1, Color.black);\n        assertFalse(p1.equals(p2));\n        p2.setSeriesPaint(1, Color.black);\n        assertTrue(p1.equals(p2));\n        \n        // change a series outline paint\n        p1.setSeriesOutlinePaint(0, Color.red);\n        assertFalse(p1.equals(p2));\n        p2.setSeriesOutlinePaint(0, Color.red);\n        assertTrue(p1.equals(p2));\n        \n        // change a series outline stroke\n        p1.setSeriesOutlineStroke(0, new BasicStroke(1.1f));\n        assertFalse(p1.equals(p2));\n        p2.setSeriesOutlineStroke(0, new BasicStroke(1.1f));\n        assertTrue(p1.equals(p2));\n        \n    }",
        "begin_line": 278,
        "end_line": 317,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 279,col 9)-(line 279,col 75)",
            "(line 280,col 9)-(line 280,col 77)",
            "(line 281,col 9)-(line 281,col 43)",
            "(line 282,col 9)-(line 282,col 32)",
            "(line 283,col 9)-(line 288,col 9)",
            "(line 289,col 9)-(line 289,col 29)",
            "(line 290,col 9)-(line 290,col 51)",
            "(line 291,col 9)-(line 291,col 34)",
            "(line 294,col 9)-(line 294,col 48)",
            "(line 295,col 9)-(line 295,col 35)",
            "(line 296,col 9)-(line 296,col 43)",
            "(line 297,col 9)-(line 297,col 34)",
            "(line 300,col 9)-(line 300,col 42)",
            "(line 301,col 9)-(line 301,col 35)",
            "(line 302,col 9)-(line 302,col 42)",
            "(line 303,col 9)-(line 303,col 34)",
            "(line 306,col 9)-(line 306,col 47)",
            "(line 307,col 9)-(line 307,col 35)",
            "(line 308,col 9)-(line 308,col 47)",
            "(line 309,col 9)-(line 309,col 34)",
            "(line 312,col 9)-(line 312,col 60)",
            "(line 313,col 9)-(line 313,col 35)",
            "(line 314,col 9)-(line 314,col 60)",
            "(line 315,col 9)-(line 315,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.SpiderWebPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/SpiderWebPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.SpiderWebPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        SpiderWebPlot p1 = new SpiderWebPlot(new DefaultCategoryDataset());\n        SpiderWebPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (SpiderWebPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(p1, p2);\n\n    }",
        "begin_line": 322,
        "end_line": 343,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 324,col 9)-(line 324,col 75)",
            "(line 325,col 9)-(line 325,col 32)",
            "(line 327,col 9)-(line 340,col 9)",
            "(line 341,col 9)-(line 341,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.SpiderWebPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/SpiderWebPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.SpiderWebPlotTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.addValue(35.0, \"S1\", \"C1\");\n        dataset.addValue(45.0, \"S1\", \"C2\");\n        dataset.addValue(55.0, \"S1\", \"C3\");\n        dataset.addValue(15.0, \"S1\", \"C4\");\n        dataset.addValue(25.0, \"S1\", \"C5\");\n        SpiderWebPlot plot = new SpiderWebPlot(dataset);\n        JFreeChart chart = new JFreeChart(plot);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }    ",
        "begin_line": 349,
        "end_line": 371,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown.\n     ",
        "child_ranges": [
            "(line 350,col 9)-(line 350,col 70)",
            "(line 351,col 9)-(line 351,col 43)",
            "(line 352,col 9)-(line 352,col 43)",
            "(line 353,col 9)-(line 353,col 43)",
            "(line 354,col 9)-(line 354,col 43)",
            "(line 355,col 9)-(line 355,col 43)",
            "(line 356,col 9)-(line 356,col 56)",
            "(line 357,col 9)-(line 357,col 48)",
            "(line 358,col 9)-(line 358,col 32)",
            "(line 359,col 9)-(line 369,col 9)",
            "(line 370,col 9)-(line 370,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryPlotTests.class);\n    }",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.CategoryPlotTests(java.lang.String)",
        "snippet": "    public CategoryPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testConstructor()",
        "snippet": "    public void testConstructor() {\n        CategoryPlot plot = new CategoryPlot();\n        assertEquals(new RectangleInsets(4.0, 4.0, 4.0, 4.0), \n        \t\tplot.getAxisOffset());\n    }",
        "begin_line": 122,
        "end_line": 126,
        "comment": "\n     * Some checks for the constructor.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 47)",
            "(line 124,col 9)-(line 125,col 32)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAxisRange()",
        "snippet": "    public void testAxisRange() {\n        DefaultCategoryDataset datasetA = new DefaultCategoryDataset();\n        DefaultCategoryDataset datasetB = new DefaultCategoryDataset();\n        datasetB.addValue(50.0, \"R1\", \"C1\");\n        datasetB.addValue(80.0, \"R1\", \"C1\");\n        CategoryPlot plot = new CategoryPlot(datasetA, new CategoryAxis(null), \n                new NumberAxis(null), new LineAndShapeRenderer());\n        plot.setDataset(1, datasetB);\n        plot.setRenderer(1, new LineAndShapeRenderer());\n        Range r = plot.getRangeAxis().getRange();\n        assertEquals(84.0, r.getUpperBound(), 0.00001);\n    }",
        "begin_line": 131,
        "end_line": 142,
        "comment": "\n     * A test for a bug reported in the forum.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 71)",
            "(line 133,col 9)-(line 133,col 71)",
            "(line 134,col 9)-(line 134,col 44)",
            "(line 135,col 9)-(line 135,col 44)",
            "(line 136,col 9)-(line 137,col 66)",
            "(line 138,col 9)-(line 138,col 37)",
            "(line 139,col 9)-(line 139,col 56)",
            "(line 140,col 9)-(line 140,col 49)",
            "(line 141,col 9)-(line 141,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        assertTrue(plot1.equals(plot2));    \n        assertTrue(plot2.equals(plot1));\n        \n        // orientation...\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n        \n        // axisOffset...\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxis - no longer a separate field but test anyway...\n        plot1.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxes...\n        plot1.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxisLocation - no longer a separate field but test anyway...\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxisLocations...\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // draw shared domain axis...\n        plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeAxis - no longer a separate field but test anyway...\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxes...\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxisLocation - no longer a separate field but test anyway...\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxisLocations...\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n        \n        // datasetToDomainAxisMap...\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        // datasetToRangeAxisMap...\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n        \n        // renderer - no longer a separate field but test anyway...\n        plot1.setRenderer(new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n        \n        // renderers...\n        plot1.setRenderer(11, new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n        \n        // rendering order...\n        plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertTrue(plot1.equals(plot2));\n\n        // columnRenderingOrder...\n        plot1.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n        \n        // rowRenderingOrder...\n        plot1.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n        \n        // domainGridlinesVisible\n        plot1.setDomainGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        // domainGridlinePosition\n        plot1.setDomainGridlinePosition(CategoryAnchor.END);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePosition(CategoryAnchor.END);\n        assertTrue(plot1.equals(plot2));\n\n        // domainGridlineStroke\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // domainGridlinePaint\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeGridlinesVisible\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeGridlineStroke\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeGridlinePaint\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        // anchorValue\n        plot1.setAnchorValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAnchorValue(100.0);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairVisible\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairValue\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairStroke\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairPaint\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairLockedOnData\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n        \n        // range markers - no longer separate fields but test anyway...\n        plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n        \n        // foreground range markers...\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n        \n        // background range markers...\n        plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        // annotations\n        plot1.addAnnotation(\n            new CategoryTextAnnotation(\"Text\", \"Category\", 43.0)\n        );\n        assertFalse(plot1.equals(plot2));\n        plot2.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\", \n                43.0));\n        assertTrue(plot1.equals(plot2));\n        \n        // weight\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n        \n        // fixed domain axis space...\n        plot1.setFixedDomainAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedDomainAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n        \n        // fixed range axis space...\n        plot1.setFixedRangeAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedRangeAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n    }",
        "begin_line": 147,
        "end_line": 397,
        "comment": "\n     * Test that the equals() method differentiates all the required fields.\n     ",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 48)",
            "(line 150,col 9)-(line 150,col 48)",
            "(line 151,col 9)-(line 151,col 40)",
            "(line 152,col 9)-(line 152,col 40)",
            "(line 155,col 9)-(line 155,col 57)",
            "(line 156,col 9)-(line 156,col 41)",
            "(line 157,col 9)-(line 157,col 57)",
            "(line 158,col 9)-(line 158,col 40)",
            "(line 161,col 9)-(line 161,col 73)",
            "(line 162,col 9)-(line 162,col 41)",
            "(line 163,col 9)-(line 163,col 73)",
            "(line 164,col 9)-(line 164,col 40)",
            "(line 167,col 9)-(line 167,col 63)",
            "(line 168,col 9)-(line 168,col 41)",
            "(line 169,col 9)-(line 169,col 63)",
            "(line 170,col 9)-(line 170,col 40)",
            "(line 173,col 9)-(line 173,col 68)",
            "(line 174,col 9)-(line 174,col 41)",
            "(line 175,col 9)-(line 175,col 68)",
            "(line 176,col 9)-(line 176,col 40)",
            "(line 179,col 9)-(line 179,col 63)",
            "(line 180,col 9)-(line 180,col 41)",
            "(line 181,col 9)-(line 181,col 63)",
            "(line 182,col 9)-(line 182,col 40)",
            "(line 185,col 9)-(line 185,col 67)",
            "(line 186,col 9)-(line 186,col 41)",
            "(line 187,col 9)-(line 187,col 67)",
            "(line 188,col 9)-(line 188,col 40)",
            "(line 191,col 9)-(line 191,col 72)",
            "(line 192,col 9)-(line 192,col 41)",
            "(line 193,col 9)-(line 193,col 72)",
            "(line 194,col 9)-(line 194,col 40)",
            "(line 197,col 9)-(line 197,col 57)",
            "(line 198,col 9)-(line 198,col 41)",
            "(line 199,col 9)-(line 199,col 57)",
            "(line 200,col 9)-(line 200,col 40)",
            "(line 203,col 9)-(line 203,col 71)",
            "(line 204,col 9)-(line 204,col 41)",
            "(line 205,col 9)-(line 205,col 71)",
            "(line 206,col 9)-(line 206,col 40)",
            "(line 209,col 9)-(line 209,col 62)",
            "(line 210,col 9)-(line 210,col 41)",
            "(line 211,col 9)-(line 211,col 62)",
            "(line 212,col 9)-(line 212,col 40)",
            "(line 215,col 9)-(line 215,col 66)",
            "(line 216,col 9)-(line 216,col 41)",
            "(line 217,col 9)-(line 217,col 66)",
            "(line 218,col 9)-(line 218,col 40)",
            "(line 221,col 9)-(line 221,col 45)",
            "(line 222,col 9)-(line 222,col 41)",
            "(line 223,col 9)-(line 223,col 45)",
            "(line 224,col 9)-(line 224,col 40)",
            "(line 227,col 9)-(line 227,col 44)",
            "(line 228,col 9)-(line 228,col 41)",
            "(line 229,col 9)-(line 229,col 44)",
            "(line 230,col 9)-(line 230,col 40)",
            "(line 233,col 9)-(line 233,col 46)",
            "(line 234,col 9)-(line 234,col 41)",
            "(line 235,col 9)-(line 235,col 46)",
            "(line 236,col 9)-(line 236,col 40)",
            "(line 239,col 9)-(line 239,col 50)",
            "(line 240,col 9)-(line 240,col 41)",
            "(line 241,col 9)-(line 241,col 50)",
            "(line 242,col 9)-(line 242,col 40)",
            "(line 245,col 9)-(line 245,col 70)",
            "(line 246,col 9)-(line 246,col 41)",
            "(line 247,col 9)-(line 247,col 70)",
            "(line 248,col 9)-(line 248,col 40)",
            "(line 251,col 9)-(line 251,col 60)",
            "(line 252,col 9)-(line 252,col 41)",
            "(line 253,col 9)-(line 253,col 60)",
            "(line 254,col 9)-(line 254,col 40)",
            "(line 257,col 9)-(line 257,col 57)",
            "(line 258,col 9)-(line 258,col 41)",
            "(line 259,col 9)-(line 259,col 57)",
            "(line 260,col 9)-(line 260,col 40)",
            "(line 263,col 9)-(line 263,col 46)",
            "(line 264,col 9)-(line 264,col 41)",
            "(line 265,col 9)-(line 265,col 46)",
            "(line 266,col 9)-(line 266,col 40)",
            "(line 269,col 9)-(line 269,col 60)",
            "(line 270,col 9)-(line 270,col 41)",
            "(line 271,col 9)-(line 271,col 60)",
            "(line 272,col 9)-(line 272,col 40)",
            "(line 275,col 9)-(line 275,col 46)",
            "(line 276,col 9)-(line 276,col 46)",
            "(line 277,col 9)-(line 277,col 41)",
            "(line 278,col 9)-(line 278,col 46)",
            "(line 279,col 9)-(line 279,col 40)",
            "(line 282,col 9)-(line 283,col 43)",
            "(line 284,col 9)-(line 284,col 41)",
            "(line 285,col 9)-(line 286,col 43)",
            "(line 287,col 9)-(line 287,col 40)",
            "(line 290,col 9)-(line 290,col 46)",
            "(line 291,col 9)-(line 291,col 41)",
            "(line 292,col 9)-(line 292,col 46)",
            "(line 293,col 9)-(line 293,col 40)",
            "(line 296,col 9)-(line 296,col 45)",
            "(line 297,col 9)-(line 297,col 41)",
            "(line 298,col 9)-(line 298,col 45)",
            "(line 299,col 9)-(line 299,col 40)",
            "(line 302,col 9)-(line 303,col 43)",
            "(line 304,col 9)-(line 304,col 41)",
            "(line 305,col 9)-(line 306,col 43)",
            "(line 307,col 9)-(line 307,col 40)",
            "(line 310,col 9)-(line 310,col 36)",
            "(line 311,col 9)-(line 311,col 41)",
            "(line 312,col 9)-(line 312,col 36)",
            "(line 313,col 9)-(line 313,col 40)",
            "(line 316,col 9)-(line 316,col 45)",
            "(line 317,col 9)-(line 317,col 41)",
            "(line 318,col 9)-(line 318,col 45)",
            "(line 319,col 9)-(line 319,col 40)",
            "(line 322,col 9)-(line 322,col 44)",
            "(line 323,col 9)-(line 323,col 41)",
            "(line 324,col 9)-(line 324,col 44)",
            "(line 325,col 9)-(line 325,col 40)",
            "(line 328,col 9)-(line 328,col 46)",
            "(line 329,col 9)-(line 329,col 41)",
            "(line 330,col 9)-(line 330,col 46)",
            "(line 331,col 9)-(line 331,col 40)",
            "(line 334,col 9)-(line 335,col 43)",
            "(line 336,col 9)-(line 336,col 41)",
            "(line 337,col 9)-(line 338,col 43)",
            "(line 339,col 9)-(line 339,col 40)",
            "(line 342,col 9)-(line 342,col 51)",
            "(line 343,col 9)-(line 343,col 41)",
            "(line 344,col 9)-(line 344,col 51)",
            "(line 345,col 9)-(line 345,col 40)",
            "(line 348,col 9)-(line 348,col 69)",
            "(line 349,col 9)-(line 349,col 41)",
            "(line 350,col 9)-(line 350,col 69)",
            "(line 351,col 9)-(line 351,col 40)",
            "(line 353,col 9)-(line 353,col 69)",
            "(line 354,col 9)-(line 354,col 41)",
            "(line 355,col 9)-(line 355,col 69)",
            "(line 356,col 9)-(line 356,col 40)",
            "(line 359,col 9)-(line 359,col 72)",
            "(line 360,col 9)-(line 360,col 41)",
            "(line 361,col 9)-(line 361,col 72)",
            "(line 362,col 9)-(line 362,col 40)",
            "(line 365,col 9)-(line 365,col 72)",
            "(line 366,col 9)-(line 366,col 41)",
            "(line 367,col 9)-(line 367,col 72)",
            "(line 368,col 9)-(line 368,col 40)",
            "(line 371,col 9)-(line 373,col 10)",
            "(line 374,col 9)-(line 374,col 41)",
            "(line 375,col 9)-(line 376,col 23)",
            "(line 377,col 9)-(line 377,col 40)",
            "(line 380,col 9)-(line 380,col 27)",
            "(line 381,col 9)-(line 381,col 41)",
            "(line 382,col 9)-(line 382,col 27)",
            "(line 383,col 9)-(line 383,col 40)",
            "(line 386,col 9)-(line 386,col 55)",
            "(line 387,col 9)-(line 387,col 41)",
            "(line 388,col 9)-(line 388,col 55)",
            "(line 389,col 9)-(line 389,col 40)",
            "(line 392,col 9)-(line 392,col 54)",
            "(line 393,col 9)-(line 393,col 41)",
            "(line 394,col 9)-(line 394,col 54)",
            "(line 395,col 9)-(line 395,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CategoryPlot p1 = new CategoryPlot();\n        p1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow));\n        CategoryPlot p2 = null;\n        try {\n            p2 = (CategoryPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 402,
        "end_line": 417,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 45)",
            "(line 404,col 9)-(line 405,col 43)",
            "(line 406,col 9)-(line 406,col 31)",
            "(line 407,col 9)-(line 413,col 9)",
            "(line 414,col 9)-(line 414,col 29)",
            "(line 415,col 9)-(line 415,col 51)",
            "(line 416,col 9)-(line 416,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        CategoryAxis domainAxis = new CategoryAxis(\"Domain\");\n        NumberAxis rangeAxis = new NumberAxis(\"Range\");\n        BarRenderer renderer = new BarRenderer();\n        CategoryPlot p1 = new CategoryPlot(dataset, domainAxis, rangeAxis, \n                renderer);\n        p1.setOrientation(PlotOrientation.HORIZONTAL);\n        CategoryPlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CategoryPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 422,
        "end_line": 447,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 424,col 9)-(line 424,col 70)",
            "(line 425,col 9)-(line 425,col 61)",
            "(line 426,col 9)-(line 426,col 55)",
            "(line 427,col 9)-(line 427,col 49)",
            "(line 428,col 9)-(line 429,col 26)",
            "(line 430,col 9)-(line 430,col 54)",
            "(line 431,col 9)-(line 431,col 31)",
            "(line 432,col 9)-(line 445,col 9)",
            "(line 446,col 9)-(line 446,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n\n        DefaultCategoryDataset data = new DefaultCategoryDataset();\n        CategoryAxis domainAxis = new CategoryAxis(\"Domain\");\n        NumberAxis rangeAxis = new NumberAxis(\"Range\");\n        BarRenderer renderer = new BarRenderer();\n        CategoryPlot p1 = new CategoryPlot(data, domainAxis, rangeAxis, \n                renderer);\n        p1.setOrientation(PlotOrientation.VERTICAL);\n        CategoryPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CategoryPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n\n    }",
        "begin_line": 452,
        "end_line": 479,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 454,col 9)-(line 454,col 67)",
            "(line 455,col 9)-(line 455,col 61)",
            "(line 456,col 9)-(line 456,col 55)",
            "(line 457,col 9)-(line 457,col 49)",
            "(line 458,col 9)-(line 459,col 26)",
            "(line 460,col 9)-(line 460,col 52)",
            "(line 461,col 9)-(line 461,col 31)",
            "(line 463,col 9)-(line 476,col 9)",
            "(line 477,col 9)-(line 477,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization3()",
        "snippet": "    public void testSerialization3() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n\n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);\n    }",
        "begin_line": 484,
        "end_line": 524,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 485,col 9)-(line 485,col 70)",
            "(line 486,col 9)-(line 495,col 10)",
            "(line 496,col 9)-(line 496,col 33)",
            "(line 499,col 9)-(line 512,col 9)",
            "(line 515,col 9)-(line 515,col 30)",
            "(line 516,col 9)-(line 522,col 9)",
            "(line 523,col 9)-(line 523,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization4()",
        "snippet": "    public void testSerialization4() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);\n        plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(chart, chart2);\n        \n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);\n    }",
        "begin_line": 529,
        "end_line": 573,
        "comment": "\n     * This test ensures that a plot with markers is serialized correctly.\n     ",
        "child_ranges": [
            "(line 530,col 9)-(line 530,col 70)",
            "(line 531,col 9)-(line 540,col 10)",
            "(line 541,col 9)-(line 541,col 59)",
            "(line 542,col 9)-(line 542,col 68)",
            "(line 543,col 9)-(line 543,col 76)",
            "(line 544,col 9)-(line 544,col 33)",
            "(line 547,col 9)-(line 560,col 9)",
            "(line 561,col 9)-(line 561,col 36)",
            "(line 564,col 9)-(line 564,col 30)",
            "(line 565,col 9)-(line 571,col 9)",
            "(line 572,col 9)-(line 572,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization5()",
        "snippet": "    public void testSerialization5() {\n        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n        CategoryAxis domainAxis1 = new CategoryAxis(\"Domain 1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Range 1\");\n        BarRenderer renderer1 = new BarRenderer();\n        CategoryPlot p1 = new CategoryPlot(dataset1, domainAxis1, rangeAxis1, \n                renderer1);\n        CategoryAxis domainAxis2 = new CategoryAxis(\"Domain 2\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Range 2\");\n        BarRenderer renderer2 = new BarRenderer();\n        DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();\n        p1.setDataset(1, dataset2);\n        p1.setDomainAxis(1, domainAxis2);\n        p1.setRangeAxis(1, rangeAxis2);\n        p1.setRenderer(1, renderer2);\n        CategoryPlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CategoryPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n        \n        // now check that all datasets, renderers and axes are being listened \n        // too...\n        CategoryAxis domainAxisA = p2.getDomainAxis(0);\n        NumberAxis rangeAxisA = (NumberAxis) p2.getRangeAxis(0);\n        DefaultCategoryDataset datasetA \n                = (DefaultCategoryDataset) p2.getDataset(0);\n        BarRenderer rendererA = (BarRenderer) p2.getRenderer(0);\n        CategoryAxis domainAxisB = p2.getDomainAxis(1);\n        NumberAxis rangeAxisB = (NumberAxis) p2.getRangeAxis(1);\n        DefaultCategoryDataset datasetB \n                = (DefaultCategoryDataset) p2.getDataset(1);\n        BarRenderer rendererB  = (BarRenderer) p2.getRenderer(1);\n        assertTrue(datasetA.hasListener(p2));\n        assertTrue(domainAxisA.hasListener(p2));\n        assertTrue(rangeAxisA.hasListener(p2));\n        assertTrue(rendererA.hasListener(p2));\n        assertTrue(datasetB.hasListener(p2));\n        assertTrue(domainAxisB.hasListener(p2));\n        assertTrue(rangeAxisB.hasListener(p2));\n        assertTrue(rendererB.hasListener(p2));\n    }",
        "begin_line": 580,
        "end_line": 631,
        "comment": "\n     * Tests a bug where the plot is no longer registered as a listener\n     * with the dataset(s) and axes after deserialization.  See patch 1209475\n     * at SourceForge.\n     ",
        "child_ranges": [
            "(line 581,col 9)-(line 581,col 71)",
            "(line 582,col 9)-(line 582,col 64)",
            "(line 583,col 9)-(line 583,col 58)",
            "(line 584,col 9)-(line 584,col 50)",
            "(line 585,col 9)-(line 586,col 27)",
            "(line 587,col 9)-(line 587,col 64)",
            "(line 588,col 9)-(line 588,col 58)",
            "(line 589,col 9)-(line 589,col 50)",
            "(line 590,col 9)-(line 590,col 71)",
            "(line 591,col 9)-(line 591,col 35)",
            "(line 592,col 9)-(line 592,col 41)",
            "(line 593,col 9)-(line 593,col 39)",
            "(line 594,col 9)-(line 594,col 37)",
            "(line 595,col 9)-(line 595,col 31)",
            "(line 596,col 9)-(line 608,col 9)",
            "(line 609,col 9)-(line 609,col 29)",
            "(line 613,col 9)-(line 613,col 55)",
            "(line 614,col 9)-(line 614,col 64)",
            "(line 615,col 9)-(line 616,col 60)",
            "(line 617,col 9)-(line 617,col 64)",
            "(line 618,col 9)-(line 618,col 55)",
            "(line 619,col 9)-(line 619,col 64)",
            "(line 620,col 9)-(line 621,col 60)",
            "(line 622,col 9)-(line 622,col 65)",
            "(line 623,col 9)-(line 623,col 45)",
            "(line 624,col 9)-(line 624,col 48)",
            "(line 625,col 9)-(line 625,col 47)",
            "(line 626,col 9)-(line 626,col 46)",
            "(line 627,col 9)-(line 627,col 45)",
            "(line 628,col 9)-(line 628,col 48)",
            "(line 629,col 9)-(line 629,col 47)",
            "(line 630,col 9)-(line 630,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSetRenderer()",
        "snippet": "    public void testSetRenderer() {\n        CategoryPlot plot = new CategoryPlot();\n        CategoryItemRenderer renderer = new LineAndShapeRenderer();\n        plot.setRenderer(renderer);\n        // now make a change to the renderer and see if it triggers a plot\n        // change event...\n        MyPlotChangeListener listener = new MyPlotChangeListener();\n        plot.addChangeListener(listener);\n        renderer.setSeriesPaint(0, Color.black);\n        assertTrue(listener.getEvent() != null);\n    }",
        "begin_line": 637,
        "end_line": 647,
        "comment": "\n     * A test for a bug where setting the renderer doesn't register the plot\n     * as a RendererChangeListener.\n     ",
        "child_ranges": [
            "(line 638,col 9)-(line 638,col 47)",
            "(line 639,col 9)-(line 639,col 67)",
            "(line 640,col 9)-(line 640,col 35)",
            "(line 643,col 9)-(line 643,col 67)",
            "(line 644,col 9)-(line 644,col 41)",
            "(line 645,col 9)-(line 645,col 48)",
            "(line 646,col 9)-(line 646,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.test1169972()",
        "snippet": "    public void test1169972() {\n        CategoryPlot plot = new CategoryPlot(null, null, null, null);\n        plot.setDomainAxis(new CategoryAxis(\"C\"));\n        plot.setRangeAxis(new NumberAxis(\"Y\"));\n        plot.setRenderer(new BarRenderer());\n        plot.setDataset(new DefaultCategoryDataset());\n        assertTrue(plot != null);\n    }",
        "begin_line": 652,
        "end_line": 659,
        "comment": "\n     * A test for bug report 1169972.\n     ",
        "child_ranges": [
            "(line 653,col 9)-(line 653,col 69)",
            "(line 654,col 9)-(line 654,col 50)",
            "(line 655,col 9)-(line 655,col 47)",
            "(line 656,col 9)-(line 656,col 44)",
            "(line 657,col 9)-(line 657,col 54)",
            "(line 658,col 9)-(line 658,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAddDomainMarker()",
        "snippet": "    public void testAddDomainMarker() {\n        CategoryPlot plot = new CategoryPlot();\n        CategoryMarker m = new CategoryMarker(\"C1\");\n        plot.addDomainMarker(m);\n        List listeners = Arrays.asList(m.getListeners(\n                MarkerChangeListener.class));\n        assertTrue(listeners.contains(plot));\n        plot.clearDomainMarkers();\n        listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class));\n        assertFalse(listeners.contains(plot));\n    }    ",
        "begin_line": 664,
        "end_line": 674,
        "comment": "\n     * Some tests for the addDomainMarker() method(s).\n     ",
        "child_ranges": [
            "(line 665,col 9)-(line 665,col 47)",
            "(line 666,col 9)-(line 666,col 52)",
            "(line 667,col 9)-(line 667,col 32)",
            "(line 668,col 9)-(line 669,col 45)",
            "(line 670,col 9)-(line 670,col 45)",
            "(line 671,col 9)-(line 671,col 34)",
            "(line 672,col 9)-(line 672,col 78)",
            "(line 673,col 9)-(line 673,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAddRangeMarker()",
        "snippet": "    public void testAddRangeMarker() {\n        CategoryPlot plot = new CategoryPlot();\n        Marker m = new ValueMarker(1.0);\n        plot.addRangeMarker(m);\n        List listeners = Arrays.asList(m.getListeners(\n                MarkerChangeListener.class));\n        assertTrue(listeners.contains(plot));\n        plot.clearRangeMarkers();\n        listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class));\n        assertFalse(listeners.contains(plot));\n    }",
        "begin_line": 679,
        "end_line": 689,
        "comment": "\n     * Some tests for the addRangeMarker() method(s).\n     ",
        "child_ranges": [
            "(line 680,col 9)-(line 680,col 47)",
            "(line 681,col 9)-(line 681,col 40)",
            "(line 682,col 9)-(line 682,col 31)",
            "(line 683,col 9)-(line 684,col 45)",
            "(line 685,col 9)-(line 685,col 45)",
            "(line 686,col 9)-(line 686,col 33)",
            "(line 687,col 9)-(line 687,col 78)",
            "(line 688,col 9)-(line 688,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.test1654215()",
        "snippet": "    public void test1654215() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createLineChart(\"Title\", \"X\", \"Y\",\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        plot.setRenderer(1, new LineAndShapeRenderer());\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 695,
        "end_line": 715,
        "comment": "\n     * A test for bug 1654215 (where a renderer is added to the plot without\n     * a corresponding dataset and it throws an exception at drawing time).\n     ",
        "child_ranges": [
            "(line 696,col 9)-(line 696,col 70)",
            "(line 697,col 9)-(line 698,col 71)",
            "(line 699,col 9)-(line 699,col 59)",
            "(line 700,col 9)-(line 700,col 56)",
            "(line 701,col 9)-(line 701,col 32)",
            "(line 702,col 9)-(line 713,col 9)",
            "(line 714,col 9)-(line 714,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testGetDomainAxisIndex()",
        "snippet": "    public void testGetDomainAxisIndex() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        CategoryAxis domainAxis2 = new CategoryAxis(\"X2\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        assertEquals(0, plot.getDomainAxisIndex(domainAxis1));\n        assertEquals(-1, plot.getDomainAxisIndex(domainAxis2));\n        plot.setDomainAxis(1, domainAxis2);\n        assertEquals(1, plot.getDomainAxisIndex(domainAxis2));\n        assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis(\"X2\")));\n        boolean pass = false;\n        try {\n            plot.getDomainAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 720,
        "end_line": 739,
        "comment": "\n     * Some checks for the getDomainAxisIndex() method.\n     ",
        "child_ranges": [
            "(line 721,col 9)-(line 721,col 58)",
            "(line 722,col 9)-(line 722,col 58)",
            "(line 723,col 9)-(line 723,col 53)",
            "(line 724,col 9)-(line 725,col 22)",
            "(line 726,col 9)-(line 726,col 62)",
            "(line 727,col 9)-(line 727,col 63)",
            "(line 728,col 9)-(line 728,col 43)",
            "(line 729,col 9)-(line 729,col 62)",
            "(line 730,col 9)-(line 730,col 74)",
            "(line 731,col 9)-(line 731,col 29)",
            "(line 732,col 9)-(line 737,col 9)",
            "(line 738,col 9)-(line 738,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testGetRangeAxisIndex()",
        "snippet": "    public void testGetRangeAxisIndex() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Y2\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        assertEquals(0, plot.getRangeAxisIndex(rangeAxis1));\n        assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2));\n        plot.setRangeAxis(1, rangeAxis2);\n        assertEquals(1, plot.getRangeAxisIndex(rangeAxis2));\n        assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis(\"Y2\")));\n        boolean pass = false;\n        try {\n            plot.getRangeAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 744,
        "end_line": 763,
        "comment": "\n     * Some checks for the getRangeAxisIndex() method.\n     ",
        "child_ranges": [
            "(line 745,col 9)-(line 745,col 58)",
            "(line 746,col 9)-(line 746,col 53)",
            "(line 747,col 9)-(line 747,col 53)",
            "(line 748,col 9)-(line 749,col 22)",
            "(line 750,col 9)-(line 750,col 60)",
            "(line 751,col 9)-(line 751,col 61)",
            "(line 752,col 9)-(line 752,col 41)",
            "(line 753,col 9)-(line 753,col 60)",
            "(line 754,col 9)-(line 754,col 71)",
            "(line 755,col 9)-(line 755,col 29)",
            "(line 756,col 9)-(line 761,col 9)",
            "(line 762,col 9)-(line 762,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testRemoveDomainMarker()",
        "snippet": "    public void testRemoveDomainMarker() {\n    \tCategoryPlot plot = new CategoryPlot();\n    \tassertFalse(plot.removeDomainMarker(new CategoryMarker(\"Category 1\")));\n    }",
        "begin_line": 769,
        "end_line": 772,
        "comment": "\n     * Check that removing a marker that isn't assigned to the plot returns \n     * false.\n     ",
        "child_ranges": [
            "(line 770,col 6)-(line 770,col 44)",
            "(line 771,col 6)-(line 771,col 76)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testRemoveRangeMarker()",
        "snippet": "    public void testRemoveRangeMarker() {\n    \tCategoryPlot plot = new CategoryPlot();\n    \tassertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));\n    }",
        "begin_line": 778,
        "end_line": 781,
        "comment": "\n     * Check that removing a marker that isn't assigned to the plot returns \n     * false.\n     ",
        "child_ranges": [
            "(line 779,col 6)-(line 779,col 44)",
            "(line 780,col 6)-(line 780,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryMarkerTests.markerChanged(org.jfree.chart.event.MarkerChangeEvent)",
        "snippet": "    public void markerChanged(MarkerChangeEvent event) {\n        this.lastEvent = event;\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryMarkerTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryMarkerTests.class);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryMarkerTests.CategoryMarkerTests(java.lang.String)",
        "snippet": "    public CategoryMarkerTests(String name) {\n        super(name);\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryMarkerTests.testEquals()",
        "snippet": "    public void testEquals() {\n        CategoryMarker m1 = new CategoryMarker(\"A\");\n        CategoryMarker m2 = new CategoryMarker(\"A\");\n        assertTrue(m1.equals(m2));\n        assertTrue(m2.equals(m1));\n        \n        //key \n        m1 = new CategoryMarker(\"B\");\n        assertFalse(m1.equals(m2));\n        m2 = new CategoryMarker(\"B\");\n        assertTrue(m1.equals(m2));\n        \n        //paint \n        m1 = new CategoryMarker(\"A\", new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow), new BasicStroke(1.1f));\n        assertFalse(m1.equals(m2));\n        m2 = new CategoryMarker(\"A\", new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow), new BasicStroke(1.1f));\n        assertTrue(m1.equals(m2));\n\n        //stroke \n        m1 = new CategoryMarker(\"A\", new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow), new BasicStroke(2.2f));\n        assertFalse(m1.equals(m2));\n        m2 = new CategoryMarker(\"A\", new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow), new BasicStroke(2.2f));\n        assertTrue(m1.equals(m2));\n\n        //outlinePaint \n        m1 = new CategoryMarker(\"A\", new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow), new BasicStroke(2.2f), Color.red,\n                new BasicStroke(1.0f), 1.0f);\n        assertFalse(m1.equals(m2));\n        m2 = new CategoryMarker(\"A\", new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow), new BasicStroke(2.2f), Color.red,\n                new BasicStroke(1.0f), 1.0f);\n        assertTrue(m1.equals(m2));\n\n        //outlineStroke \n        m1 = new CategoryMarker(\"A\", new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow), new BasicStroke(2.2f), Color.red,\n                new BasicStroke(3.3f), 1.0f);\n        assertFalse(m1.equals(m2));\n        m2 = new CategoryMarker(\"A\", new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow), new BasicStroke(2.2f), Color.red,\n                new BasicStroke(3.3f), 1.0f);\n        assertTrue(m1.equals(m2));\n\n        //alpha\n        m1 = new CategoryMarker(\"A\", new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow), new BasicStroke(2.2f), Color.red,\n                new BasicStroke(1.0f), 0.5f);\n        assertFalse(m1.equals(m2));\n        m2 = new CategoryMarker(\"A\", new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow), new BasicStroke(2.2f), Color.red,\n                new BasicStroke(1.0f), 0.5f);\n        assertTrue(m1.equals(m2));\n\n    }",
        "begin_line": 94,
        "end_line": 152,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 52)",
            "(line 96,col 9)-(line 96,col 52)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 101,col 9)-(line 101,col 37)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 37)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 107,col 9)-(line 108,col 66)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 111,col 66)",
            "(line 112,col 9)-(line 112,col 34)",
            "(line 115,col 9)-(line 116,col 66)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 119,col 66)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 123,col 9)-(line 125,col 45)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 129,col 45)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 133,col 9)-(line 135,col 45)",
            "(line 136,col 9)-(line 136,col 35)",
            "(line 137,col 9)-(line 139,col 45)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 143,col 9)-(line 145,col 45)",
            "(line 146,col 9)-(line 146,col 35)",
            "(line 147,col 9)-(line 149,col 45)",
            "(line 150,col 9)-(line 150,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryMarkerTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CategoryMarker m1 = new CategoryMarker(\"A\", new GradientPaint(1.0f, \n                2.0f, Color.white, 3.0f, 4.0f, Color.yellow), \n                new BasicStroke(1.1f));\n        CategoryMarker m2 = null;\n        try {\n            m2 = (CategoryMarker) m1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(m1 != m2);\n        assertTrue(m1.getClass() == m2.getClass());\n        assertTrue(m1.equals(m2));\n    }",
        "begin_line": 157,
        "end_line": 171,
        "comment": "\n     * Check cloning.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 160,col 39)",
            "(line 161,col 9)-(line 161,col 33)",
            "(line 162,col 9)-(line 167,col 9)",
            "(line 168,col 9)-(line 168,col 29)",
            "(line 169,col 9)-(line 169,col 51)",
            "(line 170,col 9)-(line 170,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryMarkerTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CategoryMarker m1 = new CategoryMarker(\"A\", new GradientPaint(1.0f, \n                2.0f, Color.white, 3.0f, 4.0f, Color.yellow), \n                new BasicStroke(1.1f));\n        CategoryMarker m2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            m2 = (CategoryMarker) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        boolean b = m1.equals(m2);\n        assertTrue(b);\n\n    }",
        "begin_line": 176,
        "end_line": 199,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 178,col 9)-(line 180,col 39)",
            "(line 181,col 9)-(line 181,col 33)",
            "(line 182,col 9)-(line 195,col 9)",
            "(line 196,col 9)-(line 196,col 34)",
            "(line 197,col 9)-(line 197,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryMarkerTests.testGetSetKey()",
        "snippet": "    public void testGetSetKey() {\n        CategoryMarker m = new CategoryMarker(\"X\");\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(\"X\", m.getKey());\n        m.setKey(\"Y\");\n        assertEquals(\"Y\", m.getKey());\n        assertEquals(m, this.lastEvent.getMarker());\n        \n        // check null argument...\n        try {\n            m.setKey(null);\n            fail(\"Expected an IllegalArgumentException for null.\");\n        }\n        catch (IllegalArgumentException e) {\n            assertTrue(true);\n        }\n    }",
        "begin_line": 204,
        "end_line": 221,
        "comment": "\n     * Some checks for the getKey() and setKey() methods.\n     ",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 51)",
            "(line 206,col 9)-(line 206,col 34)",
            "(line 207,col 9)-(line 207,col 30)",
            "(line 208,col 9)-(line 208,col 38)",
            "(line 209,col 9)-(line 209,col 22)",
            "(line 210,col 9)-(line 210,col 38)",
            "(line 211,col 9)-(line 211,col 52)",
            "(line 214,col 9)-(line 220,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryMarkerTests.testGetSetDrawAsLine()",
        "snippet": "    public void testGetSetDrawAsLine() {\n        CategoryMarker m = new CategoryMarker(\"X\");\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(false, m.getDrawAsLine());\n        m.setDrawAsLine(true);\n        assertEquals(true, m.getDrawAsLine());\n        assertEquals(m, this.lastEvent.getMarker());\n    }",
        "begin_line": 226,
        "end_line": 234,
        "comment": "\n     * Some checks for the getDrawAsLine() and setDrawAsLine() methods.\n     ",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 51)",
            "(line 228,col 9)-(line 228,col 34)",
            "(line 229,col 9)-(line 229,col 30)",
            "(line 230,col 9)-(line 230,col 47)",
            "(line 231,col 9)-(line 231,col 30)",
            "(line 232,col 9)-(line 232,col 46)",
            "(line 233,col 9)-(line 233,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CombinedRangeXYPlotTests.class);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests.CombinedRangeXYPlotTests(java.lang.String)",
        "snippet": "    public CombinedRangeXYPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        CombinedRangeXYPlot plot1 = createPlot();\n        CombinedRangeXYPlot plot2 = createPlot();\n        assertTrue(plot1.equals(plot2));    \n        assertTrue(plot2.equals(plot1));\n    }",
        "begin_line": 94,
        "end_line": 99,
        "comment": "\n     * Test the equals method.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 49)",
            "(line 96,col 9)-(line 96,col 49)",
            "(line 97,col 9)-(line 97,col 40)",
            "(line 98,col 9)-(line 98,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests.testRemoveSubplot()",
        "snippet": "    public void testRemoveSubplot() {\n        CombinedRangeXYPlot plot = new CombinedRangeXYPlot();\n        XYPlot plot1 = new XYPlot();\n        XYPlot plot2 = new XYPlot();\n        plot.add(plot1);\n        plot.add(plot2);\n        // remove plot2, but plot1 is removed instead\n        plot.remove(plot2);\n        List plots = plot.getSubplots();\n        assertTrue(plots.get(0) == plot1);\n    }",
        "begin_line": 104,
        "end_line": 114,
        "comment": "\n     * This is a test to replicate the bug report 987080.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 61)",
            "(line 106,col 9)-(line 106,col 36)",
            "(line 107,col 9)-(line 107,col 36)",
            "(line 108,col 9)-(line 108,col 24)",
            "(line 109,col 9)-(line 109,col 24)",
            "(line 111,col 9)-(line 111,col 27)",
            "(line 112,col 9)-(line 112,col 40)",
            "(line 113,col 9)-(line 113,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CombinedRangeXYPlot plot1 = createPlot();        \n        CombinedRangeXYPlot plot2 = null;\n        try {\n            plot2 = (CombinedRangeXYPlot) plot1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(plot1 != plot2);\n        assertTrue(plot1.getClass() == plot2.getClass());\n        assertTrue(plot1.equals(plot2));\n    }",
        "begin_line": 119,
        "end_line": 131,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 49)",
            "(line 121,col 9)-(line 121,col 41)",
            "(line 122,col 9)-(line 127,col 9)",
            "(line 128,col 9)-(line 128,col 35)",
            "(line 129,col 9)-(line 129,col 57)",
            "(line 130,col 9)-(line 130,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CombinedRangeXYPlot plot1 = createPlot();\n        CombinedRangeXYPlot plot2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(plot1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            plot2 = (CombinedRangeXYPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(plot1, plot2);\n\n    }",
        "begin_line": 136,
        "end_line": 158,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 49)",
            "(line 139,col 9)-(line 139,col 41)",
            "(line 141,col 9)-(line 155,col 9)",
            "(line 156,col 9)-(line 156,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests.createDataset1()",
        "snippet": "    private XYDataset createDataset1() {\n\n        // create dataset 1...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 12353.3);\n        series1.add(20.0, 13734.4);\n        series1.add(30.0, 14525.3);\n        series1.add(40.0, 13984.3);\n        series1.add(50.0, 12999.4);\n        series1.add(60.0, 14274.3);\n        series1.add(70.0, 15943.5);\n        series1.add(80.0, 14845.3);\n        series1.add(90.0, 14645.4);\n        series1.add(100.0, 16234.6);\n        series1.add(110.0, 17232.3);\n        series1.add(120.0, 14232.2);\n        series1.add(130.0, 13102.2);\n        series1.add(140.0, 14230.2);\n        series1.add(150.0, 11235.2);\n\n        XYSeries series2 = new XYSeries(\"Series 2\");\n        series2.add(10.0, 15000.3);\n        series2.add(20.0, 11000.4);\n        series2.add(30.0, 17000.3);\n        series2.add(40.0, 15000.3);\n        series2.add(50.0, 14000.4);\n        series2.add(60.0, 12000.3);\n        series2.add(70.0, 11000.5);\n        series2.add(80.0, 12000.3);\n        series2.add(90.0, 13000.4);\n        series2.add(100.0, 12000.6);\n        series2.add(110.0, 13000.3);\n        series2.add(120.0, 17000.2);\n        series2.add(130.0, 18000.2);\n        series2.add(140.0, 16000.2);\n        series2.add(150.0, 17000.2);\n\n        XYSeriesCollection collection = new XYSeriesCollection();\n        collection.addSeries(series1);\n        collection.addSeries(series2);\n        return collection;\n\n    }",
        "begin_line": 165,
        "end_line": 207,
        "comment": "\n     * Creates a sample dataset.\n     *\n     * @return Series 1.\n     ",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 52)",
            "(line 169,col 9)-(line 169,col 35)",
            "(line 170,col 9)-(line 170,col 35)",
            "(line 171,col 9)-(line 171,col 35)",
            "(line 172,col 9)-(line 172,col 35)",
            "(line 173,col 9)-(line 173,col 35)",
            "(line 174,col 9)-(line 174,col 35)",
            "(line 175,col 9)-(line 175,col 35)",
            "(line 176,col 9)-(line 176,col 35)",
            "(line 177,col 9)-(line 177,col 35)",
            "(line 178,col 9)-(line 178,col 36)",
            "(line 179,col 9)-(line 179,col 36)",
            "(line 180,col 9)-(line 180,col 36)",
            "(line 181,col 9)-(line 181,col 36)",
            "(line 182,col 9)-(line 182,col 36)",
            "(line 183,col 9)-(line 183,col 36)",
            "(line 185,col 9)-(line 185,col 52)",
            "(line 186,col 9)-(line 186,col 35)",
            "(line 187,col 9)-(line 187,col 35)",
            "(line 188,col 9)-(line 188,col 35)",
            "(line 189,col 9)-(line 189,col 35)",
            "(line 190,col 9)-(line 190,col 35)",
            "(line 191,col 9)-(line 191,col 35)",
            "(line 192,col 9)-(line 192,col 35)",
            "(line 193,col 9)-(line 193,col 35)",
            "(line 194,col 9)-(line 194,col 35)",
            "(line 195,col 9)-(line 195,col 36)",
            "(line 196,col 9)-(line 196,col 36)",
            "(line 197,col 9)-(line 197,col 36)",
            "(line 198,col 9)-(line 198,col 36)",
            "(line 199,col 9)-(line 199,col 36)",
            "(line 200,col 9)-(line 200,col 36)",
            "(line 202,col 9)-(line 202,col 65)",
            "(line 203,col 9)-(line 203,col 38)",
            "(line 204,col 9)-(line 204,col 38)",
            "(line 205,col 9)-(line 205,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests.createDataset2()",
        "snippet": "    private XYDataset createDataset2() {\n\n        // create dataset 2...\n        XYSeries series2 = new XYSeries(\"Series 3\");\n\n        series2.add(10.0, 16853.2);\n        series2.add(20.0, 19642.3);\n        series2.add(30.0, 18253.5);\n        series2.add(40.0, 15352.3);\n        series2.add(50.0, 13532.0);\n        series2.add(100.0, 12635.3);\n        series2.add(110.0, 13998.2);\n        series2.add(120.0, 11943.2);\n        series2.add(130.0, 16943.9);\n        series2.add(140.0, 17843.2);\n        series2.add(150.0, 16495.3);\n        series2.add(160.0, 17943.6);\n        series2.add(170.0, 18500.7);\n        series2.add(180.0, 19595.9);\n\n        return new XYSeriesCollection(series2);\n\n    }",
        "begin_line": 214,
        "end_line": 236,
        "comment": "\n     * Creates a sample dataset.\n     *\n     * @return Series 2.\n     ",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 52)",
            "(line 219,col 9)-(line 219,col 35)",
            "(line 220,col 9)-(line 220,col 35)",
            "(line 221,col 9)-(line 221,col 35)",
            "(line 222,col 9)-(line 222,col 35)",
            "(line 223,col 9)-(line 223,col 35)",
            "(line 224,col 9)-(line 224,col 36)",
            "(line 225,col 9)-(line 225,col 36)",
            "(line 226,col 9)-(line 226,col 36)",
            "(line 227,col 9)-(line 227,col 36)",
            "(line 228,col 9)-(line 228,col 36)",
            "(line 229,col 9)-(line 229,col 36)",
            "(line 230,col 9)-(line 230,col 36)",
            "(line 231,col 9)-(line 231,col 36)",
            "(line 232,col 9)-(line 232,col 36)",
            "(line 234,col 9)-(line 234,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeXYPlotTests.createPlot()",
        "snippet": "    private CombinedRangeXYPlot createPlot() {\n        // create subplot 1...\n        XYDataset data1 = createDataset1();\n        XYItemRenderer renderer1 = new StandardXYItemRenderer();\n        NumberAxis rangeAxis1 = new NumberAxis(\"Range 1\");\n        XYPlot subplot1 = new XYPlot(data1, null, rangeAxis1, renderer1);\n        subplot1.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);\n         \n        XYTextAnnotation annotation \n            = new XYTextAnnotation(\"Hello!\", 50.0, 10000.0);\n        annotation.setFont(new Font(\"SansSerif\", Font.PLAIN, 9));\n        annotation.setRotationAngle(Math.PI / 4.0);\n        subplot1.addAnnotation(annotation);\n         \n        // create subplot 2...\n        XYDataset data2 = createDataset2();\n        XYItemRenderer renderer2 = new StandardXYItemRenderer();\n        NumberAxis rangeAxis2 = new NumberAxis(\"Range 2\");\n        rangeAxis2.setAutoRangeIncludesZero(false);\n        XYPlot subplot2 = new XYPlot(data2, null, rangeAxis2, renderer2);\n        subplot2.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT); \n\n        // parent plot...\n        CombinedRangeXYPlot plot \n            = new CombinedRangeXYPlot(new NumberAxis(\"Range\"));\n        plot.setGap(10.0);\n        \n        // add the subplots...\n        plot.add(subplot1, 1);\n        plot.add(subplot2, 1);\n        plot.setOrientation(PlotOrientation.VERTICAL);\n        return plot;\n    }",
        "begin_line": 243,
        "end_line": 275,
        "comment": "\n     * Creates a sample plot.\n     * \n     * @return A sample plot.\n     ",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 43)",
            "(line 246,col 9)-(line 246,col 64)",
            "(line 247,col 9)-(line 247,col 58)",
            "(line 248,col 9)-(line 248,col 73)",
            "(line 249,col 9)-(line 249,col 67)",
            "(line 251,col 9)-(line 252,col 60)",
            "(line 253,col 9)-(line 253,col 65)",
            "(line 254,col 9)-(line 254,col 51)",
            "(line 255,col 9)-(line 255,col 43)",
            "(line 258,col 9)-(line 258,col 43)",
            "(line 259,col 9)-(line 259,col 64)",
            "(line 260,col 9)-(line 260,col 58)",
            "(line 261,col 9)-(line 261,col 51)",
            "(line 262,col 9)-(line 262,col 73)",
            "(line 263,col 9)-(line 263,col 64)",
            "(line 266,col 9)-(line 267,col 63)",
            "(line 268,col 9)-(line 268,col 26)",
            "(line 271,col 9)-(line 271,col 30)",
            "(line 272,col 9)-(line 272,col 30)",
            "(line 273,col 9)-(line 273,col 54)",
            "(line 274,col 9)-(line 274,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CombinedDomainXYPlotTests.class);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.CombinedDomainXYPlotTests(java.lang.String)",
        "snippet": "    public CombinedDomainXYPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.testConstructor1()",
        "snippet": "    public void testConstructor1() {\n        CombinedDomainXYPlot plot = new CombinedDomainXYPlot(null);\n        assertEquals(null, plot.getDomainAxis());\n    }",
        "begin_line": 94,
        "end_line": 97,
        "comment": "\n     * Confirm that the constructor will accept a null axis.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 67)",
            "(line 96,col 9)-(line 96,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.testRemoveSubplot()",
        "snippet": "    public void testRemoveSubplot() {\n        CombinedDomainXYPlot plot = new CombinedDomainXYPlot();\n        XYPlot plot1 = new XYPlot();\n        XYPlot plot2 = new XYPlot();\n        plot.add(plot1);\n        plot.add(plot2);\n        // remove plot2, but plot1 is removed instead\n        plot.remove(plot2);\n        List plots = plot.getSubplots();\n        assertTrue(plots.get(0) == plot1);\n    }",
        "begin_line": 102,
        "end_line": 112,
        "comment": "\n     * This is a test to replicate the bug report 987080.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 63)",
            "(line 104,col 9)-(line 104,col 36)",
            "(line 105,col 9)-(line 105,col 36)",
            "(line 106,col 9)-(line 106,col 24)",
            "(line 107,col 9)-(line 107,col 24)",
            "(line 109,col 9)-(line 109,col 27)",
            "(line 110,col 9)-(line 110,col 40)",
            "(line 111,col 9)-(line 111,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        CombinedDomainXYPlot plot1 = createPlot();\n        CombinedDomainXYPlot plot2 = createPlot();\n        assertTrue(plot1.equals(plot2));    \n        assertTrue(plot2.equals(plot1));\n    }",
        "begin_line": 117,
        "end_line": 122,
        "comment": "\n     * Tests the equals() method.\n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 50)",
            "(line 119,col 9)-(line 119,col 50)",
            "(line 120,col 9)-(line 120,col 40)",
            "(line 121,col 9)-(line 121,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CombinedDomainXYPlot plot1 = createPlot();        \n        CombinedDomainXYPlot plot2 = null;\n        try {\n            plot2 = (CombinedDomainXYPlot) plot1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(plot1 != plot2);\n        assertTrue(plot1.getClass() == plot2.getClass());\n        assertTrue(plot1.equals(plot2));\n    }",
        "begin_line": 127,
        "end_line": 139,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 50)",
            "(line 129,col 9)-(line 129,col 42)",
            "(line 130,col 9)-(line 135,col 9)",
            "(line 136,col 9)-(line 136,col 35)",
            "(line 137,col 9)-(line 137,col 57)",
            "(line 138,col 9)-(line 138,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CombinedDomainXYPlot plot1 = createPlot();\n        CombinedDomainXYPlot plot2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(plot1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            plot2 = (CombinedDomainXYPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(plot1, plot2);\n\n    }",
        "begin_line": 144,
        "end_line": 166,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 50)",
            "(line 147,col 9)-(line 147,col 42)",
            "(line 149,col 9)-(line 163,col 9)",
            "(line 164,col 9)-(line 164,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.createDataset1()",
        "snippet": "    private XYDataset createDataset1() {\n\n        // create dataset 1...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 12353.3);\n        series1.add(20.0, 13734.4);\n        series1.add(30.0, 14525.3);\n        series1.add(40.0, 13984.3);\n        series1.add(50.0, 12999.4);\n        series1.add(60.0, 14274.3);\n        series1.add(70.0, 15943.5);\n        series1.add(80.0, 14845.3);\n        series1.add(90.0, 14645.4);\n        series1.add(100.0, 16234.6);\n        series1.add(110.0, 17232.3);\n        series1.add(120.0, 14232.2);\n        series1.add(130.0, 13102.2);\n        series1.add(140.0, 14230.2);\n        series1.add(150.0, 11235.2);\n\n        XYSeries series2 = new XYSeries(\"Series 2\");\n        series2.add(10.0, 15000.3);\n        series2.add(20.0, 11000.4);\n        series2.add(30.0, 17000.3);\n        series2.add(40.0, 15000.3);\n        series2.add(50.0, 14000.4);\n        series2.add(60.0, 12000.3);\n        series2.add(70.0, 11000.5);\n        series2.add(80.0, 12000.3);\n        series2.add(90.0, 13000.4);\n        series2.add(100.0, 12000.6);\n        series2.add(110.0, 13000.3);\n        series2.add(120.0, 17000.2);\n        series2.add(130.0, 18000.2);\n        series2.add(140.0, 16000.2);\n        series2.add(150.0, 17000.2);\n\n        XYSeriesCollection collection = new XYSeriesCollection();\n        collection.addSeries(series1);\n        collection.addSeries(series2);\n        return collection;\n\n    }",
        "begin_line": 173,
        "end_line": 215,
        "comment": "\n     * Creates a sample dataset.\n     *\n     * @return Series 1.\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 52)",
            "(line 177,col 9)-(line 177,col 35)",
            "(line 178,col 9)-(line 178,col 35)",
            "(line 179,col 9)-(line 179,col 35)",
            "(line 180,col 9)-(line 180,col 35)",
            "(line 181,col 9)-(line 181,col 35)",
            "(line 182,col 9)-(line 182,col 35)",
            "(line 183,col 9)-(line 183,col 35)",
            "(line 184,col 9)-(line 184,col 35)",
            "(line 185,col 9)-(line 185,col 35)",
            "(line 186,col 9)-(line 186,col 36)",
            "(line 187,col 9)-(line 187,col 36)",
            "(line 188,col 9)-(line 188,col 36)",
            "(line 189,col 9)-(line 189,col 36)",
            "(line 190,col 9)-(line 190,col 36)",
            "(line 191,col 9)-(line 191,col 36)",
            "(line 193,col 9)-(line 193,col 52)",
            "(line 194,col 9)-(line 194,col 35)",
            "(line 195,col 9)-(line 195,col 35)",
            "(line 196,col 9)-(line 196,col 35)",
            "(line 197,col 9)-(line 197,col 35)",
            "(line 198,col 9)-(line 198,col 35)",
            "(line 199,col 9)-(line 199,col 35)",
            "(line 200,col 9)-(line 200,col 35)",
            "(line 201,col 9)-(line 201,col 35)",
            "(line 202,col 9)-(line 202,col 35)",
            "(line 203,col 9)-(line 203,col 36)",
            "(line 204,col 9)-(line 204,col 36)",
            "(line 205,col 9)-(line 205,col 36)",
            "(line 206,col 9)-(line 206,col 36)",
            "(line 207,col 9)-(line 207,col 36)",
            "(line 208,col 9)-(line 208,col 36)",
            "(line 210,col 9)-(line 210,col 65)",
            "(line 211,col 9)-(line 211,col 38)",
            "(line 212,col 9)-(line 212,col 38)",
            "(line 213,col 9)-(line 213,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.createDataset2()",
        "snippet": "    private XYDataset createDataset2() {\n\n        // create dataset 2...\n        XYSeries series2 = new XYSeries(\"Series 3\");\n\n        series2.add(10.0, 16853.2);\n        series2.add(20.0, 19642.3);\n        series2.add(30.0, 18253.5);\n        series2.add(40.0, 15352.3);\n        series2.add(50.0, 13532.0);\n        series2.add(100.0, 12635.3);\n        series2.add(110.0, 13998.2);\n        series2.add(120.0, 11943.2);\n        series2.add(130.0, 16943.9);\n        series2.add(140.0, 17843.2);\n        series2.add(150.0, 16495.3);\n        series2.add(160.0, 17943.6);\n        series2.add(170.0, 18500.7);\n        series2.add(180.0, 19595.9);\n\n        return new XYSeriesCollection(series2);\n\n    }",
        "begin_line": 222,
        "end_line": 244,
        "comment": "\n     * Creates a sample dataset.\n     *\n     * @return Series 2.\n     ",
        "child_ranges": [
            "(line 225,col 9)-(line 225,col 52)",
            "(line 227,col 9)-(line 227,col 35)",
            "(line 228,col 9)-(line 228,col 35)",
            "(line 229,col 9)-(line 229,col 35)",
            "(line 230,col 9)-(line 230,col 35)",
            "(line 231,col 9)-(line 231,col 35)",
            "(line 232,col 9)-(line 232,col 36)",
            "(line 233,col 9)-(line 233,col 36)",
            "(line 234,col 9)-(line 234,col 36)",
            "(line 235,col 9)-(line 235,col 36)",
            "(line 236,col 9)-(line 236,col 36)",
            "(line 237,col 9)-(line 237,col 36)",
            "(line 238,col 9)-(line 238,col 36)",
            "(line 239,col 9)-(line 239,col 36)",
            "(line 240,col 9)-(line 240,col 36)",
            "(line 242,col 9)-(line 242,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainXYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.createPlot()",
        "snippet": "    private CombinedDomainXYPlot createPlot() {\n        // create subplot 1...\n        XYDataset data1 = createDataset1();\n        XYItemRenderer renderer1 = new StandardXYItemRenderer();\n        NumberAxis rangeAxis1 = new NumberAxis(\"Range 1\");\n        XYPlot subplot1 = new XYPlot(data1, null, rangeAxis1, renderer1);\n        subplot1.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);\n        \n        XYTextAnnotation annotation \n            = new XYTextAnnotation(\"Hello!\", 50.0, 10000.0);\n        annotation.setFont(new Font(\"SansSerif\", Font.PLAIN, 9));\n        annotation.setRotationAngle(Math.PI / 4.0);\n        subplot1.addAnnotation(annotation);\n        \n        // create subplot 2...\n        XYDataset data2 = createDataset2();\n        XYItemRenderer renderer2 = new StandardXYItemRenderer();\n        NumberAxis rangeAxis2 = new NumberAxis(\"Range 2\");\n        rangeAxis2.setAutoRangeIncludesZero(false);\n        XYPlot subplot2 = new XYPlot(data2, null, rangeAxis2, renderer2);\n        subplot2.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);\n\n        // parent plot...\n        CombinedDomainXYPlot plot \n            = new CombinedDomainXYPlot(new NumberAxis(\"Domain\"));\n        plot.setGap(10.0);\n        \n        // add the subplots...\n        plot.add(subplot1, 1);\n        plot.add(subplot2, 1);\n        plot.setOrientation(PlotOrientation.VERTICAL);\n        return plot;\n    }",
        "begin_line": 251,
        "end_line": 283,
        "comment": "\n     * Creates a sample plot.\n     * \n     * @return A sample plot.\n     ",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 43)",
            "(line 254,col 9)-(line 254,col 64)",
            "(line 255,col 9)-(line 255,col 58)",
            "(line 256,col 9)-(line 256,col 73)",
            "(line 257,col 9)-(line 257,col 67)",
            "(line 259,col 9)-(line 260,col 60)",
            "(line 261,col 9)-(line 261,col 65)",
            "(line 262,col 9)-(line 262,col 51)",
            "(line 263,col 9)-(line 263,col 43)",
            "(line 266,col 9)-(line 266,col 43)",
            "(line 267,col 9)-(line 267,col 64)",
            "(line 268,col 9)-(line 268,col 58)",
            "(line 269,col 9)-(line 269,col 51)",
            "(line 270,col 9)-(line 270,col 73)",
            "(line 271,col 9)-(line 271,col 64)",
            "(line 274,col 9)-(line 275,col 65)",
            "(line 276,col 9)-(line 276,col 26)",
            "(line 279,col 9)-(line 279,col 30)",
            "(line 280,col 9)-(line 280,col 30)",
            "(line 281,col 9)-(line 281,col 54)",
            "(line 282,col 9)-(line 282,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotPackageTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.chart.plot\");\n        suite.addTestSuite(CategoryMarkerTests.class);\n        suite.addTestSuite(CategoryPlotTests.class);\n        suite.addTestSuite(CombinedDomainCategoryPlotTests.class);\n        suite.addTestSuite(CombinedDomainXYPlotTests.class);\n        suite.addTestSuite(CombinedRangeCategoryPlotTests.class);\n        suite.addTestSuite(CombinedRangeXYPlotTests.class);\n        suite.addTestSuite(CompassPlotTests.class);\n        suite.addTestSuite(DefaultDrawingSupplierTests.class);\n        suite.addTestSuite(FastScatterPlotTests.class);\n        suite.addTestSuite(IntervalMarkerTests.class);\n        suite.addTestSuite(MarkerTests.class);\n        suite.addTestSuite(MeterIntervalTests.class);\n        suite.addTestSuite(MeterPlotTests.class);\n        suite.addTestSuite(MultiplePiePlotTests.class);\n        suite.addTestSuite(PieLabelRecordTests.class);\n        suite.addTestSuite(PiePlotTests.class);\n        suite.addTestSuite(PiePlot3DTests.class);\n        suite.addTestSuite(PlotOrientationTests.class);\n        suite.addTestSuite(PlotRenderingInfoTests.class);\n        suite.addTestSuite(PlotTests.class);\n        suite.addTestSuite(PolarPlotTests.class);\n        suite.addTestSuite(RingPlotTests.class);\n        suite.addTestSuite(SpiderWebPlotTests.class);\n        suite.addTestSuite(ThermometerPlotTests.class);\n        suite.addTestSuite(ValueMarkerTests.class);\n        suite.addTestSuite(XYPlotTests.class);\n        return suite;\n    }",
        "begin_line": 67,
        "end_line": 96,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 64)",
            "(line 69,col 9)-(line 69,col 54)",
            "(line 70,col 9)-(line 70,col 52)",
            "(line 71,col 9)-(line 71,col 66)",
            "(line 72,col 9)-(line 72,col 60)",
            "(line 73,col 9)-(line 73,col 65)",
            "(line 74,col 9)-(line 74,col 59)",
            "(line 75,col 9)-(line 75,col 51)",
            "(line 76,col 9)-(line 76,col 62)",
            "(line 77,col 9)-(line 77,col 55)",
            "(line 78,col 9)-(line 78,col 54)",
            "(line 79,col 9)-(line 79,col 46)",
            "(line 80,col 9)-(line 80,col 53)",
            "(line 81,col 9)-(line 81,col 49)",
            "(line 82,col 9)-(line 82,col 55)",
            "(line 83,col 9)-(line 83,col 54)",
            "(line 84,col 9)-(line 84,col 47)",
            "(line 85,col 9)-(line 85,col 49)",
            "(line 86,col 9)-(line 86,col 55)",
            "(line 87,col 9)-(line 87,col 57)",
            "(line 88,col 9)-(line 88,col 44)",
            "(line 89,col 9)-(line 89,col 49)",
            "(line 90,col 9)-(line 90,col 48)",
            "(line 91,col 9)-(line 91,col 53)",
            "(line 92,col 9)-(line 92,col 55)",
            "(line 93,col 9)-(line 93,col 51)",
            "(line 94,col 9)-(line 94,col 46)",
            "(line 95,col 9)-(line 95,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotPackageTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotPackageTests.PlotPackageTests(java.lang.String)",
        "snippet": "    public PlotPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the suite name.\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotPackageTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 112,
        "end_line": 114,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MeterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MeterPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MeterPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MeterPlotTests.class);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MeterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MeterPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MeterPlotTests.MeterPlotTests(java.lang.String)",
        "snippet": "    public MeterPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MeterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MeterPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MeterPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        MeterPlot plot1 = new MeterPlot();\n        MeterPlot plot2 = new MeterPlot();\n        assertTrue(plot1.equals(plot2));    \n        \n        // units\n        plot1.setUnits(\"mph\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setUnits(\"mph\");\n        assertTrue(plot1.equals(plot2));\n        \n        // range\n        plot1.setRange(new Range(50.0, 70.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRange(new Range(50.0, 70.0));\n        assertTrue(plot1.equals(plot2));\n        \n        // interval\n        plot1.addInterval(new MeterInterval(\"Normal\", new Range(55.0, 60.0)));\n        assertFalse(plot1.equals(plot2));\n        plot2.addInterval(new MeterInterval(\"Normal\", new Range(55.0, 60.0)));\n        assertTrue(plot1.equals(plot2));\n        \n        // dial outline paint\n        plot1.setDialOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDialOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n        \n        // dial shape\n        plot1.setDialShape(DialShape.CHORD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDialShape(DialShape.CHORD);\n        assertTrue(plot1.equals(plot2));\n        \n        // dial background paint\n        plot1.setDialBackgroundPaint(new GradientPaint(9.0f, 8.0f, Color.red, \n                7.0f, 6.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDialBackgroundPaint(new GradientPaint(9.0f, 8.0f, Color.red, \n                7.0f, 6.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n         \n        // dial outline paint\n        plot1.setDialOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDialOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n        \n        // needle paint\n        plot1.setNeedlePaint(new GradientPaint(9.0f, 8.0f, Color.red, \n                7.0f, 6.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setNeedlePaint(new GradientPaint(9.0f, 8.0f, Color.red, \n                7.0f, 6.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n        \n        // value font\n        plot1.setValueFont(new Font(\"Serif\", Font.PLAIN, 6));\n        assertFalse(plot1.equals(plot2));\n        plot2.setValueFont(new Font(\"Serif\", Font.PLAIN, 6));\n        assertTrue(plot1.equals(plot2));\n        \n        // value paint\n        plot1.setValuePaint(new GradientPaint(1.0f, 2.0f, Color.black, \n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setValuePaint(new GradientPaint(1.0f, 2.0f, Color.black, \n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n        \n        // tick labels visible\n        plot1.setTickLabelsVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setTickLabelsVisible(false);\n        assertTrue(plot1.equals(plot2));\n        \n        // tick label font\n        plot1.setTickLabelFont(new Font(\"Serif\", Font.PLAIN, 6));\n        assertFalse(plot1.equals(plot2));\n        plot2.setTickLabelFont(new Font(\"Serif\", Font.PLAIN, 6));\n        assertTrue(plot1.equals(plot2));\n        \n        // tick label paint\n        plot1.setTickLabelPaint(Color.red);\n        assertFalse(plot1.equals(plot2));\n        plot2.setTickLabelPaint(Color.red);\n        assertTrue(plot1.equals(plot2));        \n        \n        // tick label format\n        plot1.setTickLabelFormat(new DecimalFormat(\"0\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setTickLabelFormat(new DecimalFormat(\"0\"));\n        assertTrue(plot1.equals(plot2));\n        \n        // tick paint\n        plot1.setTickPaint(Color.green);\n        assertFalse(plot1.equals(plot2));\n        plot2.setTickPaint(Color.green);\n        assertTrue(plot1.equals(plot2));\n        \n        // tick size\n        plot1.setTickSize(1.23);\n        assertFalse(plot1.equals(plot2));\n        plot2.setTickSize(1.23);\n        assertTrue(plot1.equals(plot2));        \n        \n        // draw border\n        plot1.setDrawBorder(!plot1.getDrawBorder());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawBorder(plot1.getDrawBorder());\n        assertTrue(plot1.equals(plot2));\n        \n        // meter angle\n        plot1.setMeterAngle(22);\n        assertFalse(plot1.equals(plot2));\n        plot2.setMeterAngle(22);\n        assertTrue(plot1.equals(plot2));\n        \n    }",
        "begin_line": 94,
        "end_line": 217,
        "comment": "\n     * Test the equals method to ensure that it can distinguish the required \n     * fields.  Note that the dataset is NOT considered in the equals test.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 42)",
            "(line 96,col 9)-(line 96,col 42)",
            "(line 97,col 9)-(line 97,col 40)",
            "(line 100,col 9)-(line 100,col 30)",
            "(line 101,col 9)-(line 101,col 41)",
            "(line 102,col 9)-(line 102,col 30)",
            "(line 103,col 9)-(line 103,col 40)",
            "(line 106,col 9)-(line 106,col 46)",
            "(line 107,col 9)-(line 107,col 41)",
            "(line 108,col 9)-(line 108,col 46)",
            "(line 109,col 9)-(line 109,col 40)",
            "(line 112,col 9)-(line 112,col 78)",
            "(line 113,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 114,col 78)",
            "(line 115,col 9)-(line 115,col 40)",
            "(line 118,col 9)-(line 119,col 41)",
            "(line 120,col 9)-(line 120,col 41)",
            "(line 121,col 9)-(line 122,col 41)",
            "(line 123,col 9)-(line 123,col 40)",
            "(line 126,col 9)-(line 126,col 44)",
            "(line 127,col 9)-(line 127,col 41)",
            "(line 128,col 9)-(line 128,col 44)",
            "(line 129,col 9)-(line 129,col 40)",
            "(line 132,col 9)-(line 133,col 41)",
            "(line 134,col 9)-(line 134,col 41)",
            "(line 135,col 9)-(line 136,col 41)",
            "(line 137,col 9)-(line 137,col 40)",
            "(line 140,col 9)-(line 141,col 40)",
            "(line 142,col 9)-(line 142,col 41)",
            "(line 143,col 9)-(line 144,col 40)",
            "(line 145,col 9)-(line 145,col 40)",
            "(line 148,col 9)-(line 149,col 41)",
            "(line 150,col 9)-(line 150,col 41)",
            "(line 151,col 9)-(line 152,col 41)",
            "(line 153,col 9)-(line 153,col 40)",
            "(line 156,col 9)-(line 156,col 61)",
            "(line 157,col 9)-(line 157,col 41)",
            "(line 158,col 9)-(line 158,col 61)",
            "(line 159,col 9)-(line 159,col 40)",
            "(line 162,col 9)-(line 163,col 42)",
            "(line 164,col 9)-(line 164,col 41)",
            "(line 165,col 9)-(line 166,col 42)",
            "(line 167,col 9)-(line 167,col 40)",
            "(line 170,col 9)-(line 170,col 42)",
            "(line 171,col 9)-(line 171,col 41)",
            "(line 172,col 9)-(line 172,col 42)",
            "(line 173,col 9)-(line 173,col 40)",
            "(line 176,col 9)-(line 176,col 65)",
            "(line 177,col 9)-(line 177,col 41)",
            "(line 178,col 9)-(line 178,col 65)",
            "(line 179,col 9)-(line 179,col 40)",
            "(line 182,col 9)-(line 182,col 43)",
            "(line 183,col 9)-(line 183,col 41)",
            "(line 184,col 9)-(line 184,col 43)",
            "(line 185,col 9)-(line 185,col 40)",
            "(line 188,col 9)-(line 188,col 57)",
            "(line 189,col 9)-(line 189,col 41)",
            "(line 190,col 9)-(line 190,col 57)",
            "(line 191,col 9)-(line 191,col 40)",
            "(line 194,col 9)-(line 194,col 40)",
            "(line 195,col 9)-(line 195,col 41)",
            "(line 196,col 9)-(line 196,col 40)",
            "(line 197,col 9)-(line 197,col 40)",
            "(line 200,col 9)-(line 200,col 32)",
            "(line 201,col 9)-(line 201,col 41)",
            "(line 202,col 9)-(line 202,col 32)",
            "(line 203,col 9)-(line 203,col 40)",
            "(line 206,col 9)-(line 206,col 52)",
            "(line 207,col 9)-(line 207,col 41)",
            "(line 208,col 9)-(line 208,col 51)",
            "(line 209,col 9)-(line 209,col 40)",
            "(line 212,col 9)-(line 212,col 32)",
            "(line 213,col 9)-(line 213,col 41)",
            "(line 214,col 9)-(line 214,col 32)",
            "(line 215,col 9)-(line 215,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MeterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MeterPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MeterPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        MeterPlot p1 = new MeterPlot();\n        MeterPlot p2 = null;\n        try {\n            p2 = (MeterPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        \n        // the clone and the original share a reference to the SAME dataset\n        assertTrue(p1.getDataset() == p2.getDataset());\n        \n        // try a few checks to ensure that the clone is independent of the\n        // original\n        p1.getTickLabelFormat().setMinimumIntegerDigits(99);\n        assertFalse(p1.equals(p2));\n        p2.getTickLabelFormat().setMinimumIntegerDigits(99);\n        assertTrue(p1.equals(p2));\n        \n        p1.addInterval(new MeterInterval(\"Test\", new Range(1.234, 5.678)));\n        assertFalse(p1.equals(p2));\n        p2.addInterval(new MeterInterval(\"Test\", new Range(1.234, 5.678)));\n        assertTrue(p1.equals(p2));\n        \n    }",
        "begin_line": 222,
        "end_line": 250,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 39)",
            "(line 224,col 9)-(line 224,col 28)",
            "(line 225,col 9)-(line 230,col 9)",
            "(line 231,col 9)-(line 231,col 29)",
            "(line 232,col 9)-(line 232,col 51)",
            "(line 233,col 9)-(line 233,col 34)",
            "(line 236,col 9)-(line 236,col 55)",
            "(line 240,col 9)-(line 240,col 60)",
            "(line 241,col 9)-(line 241,col 35)",
            "(line 242,col 9)-(line 242,col 60)",
            "(line 243,col 9)-(line 243,col 34)",
            "(line 245,col 9)-(line 245,col 75)",
            "(line 246,col 9)-(line 246,col 35)",
            "(line 247,col 9)-(line 247,col 75)",
            "(line 248,col 9)-(line 248,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MeterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MeterPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MeterPlotTests.testSerialization1()",
        "snippet": "    public void testSerialization1() {\n        MeterPlot p1 = new MeterPlot(null);\n        p1.setDialBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        p1.setDialOutlinePaint(new GradientPaint(4.0f, 3.0f, Color.red,\n                2.0f, 1.0f, Color.blue));\n        p1.setNeedlePaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        p1.setTickLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        p1.setTickPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        MeterPlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                     new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (MeterPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(p1, p2);\n    }",
        "begin_line": 255,
        "end_line": 283,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 43)",
            "(line 257,col 9)-(line 258,col 41)",
            "(line 259,col 9)-(line 260,col 41)",
            "(line 261,col 9)-(line 262,col 41)",
            "(line 263,col 9)-(line 264,col 41)",
            "(line 265,col 9)-(line 266,col 41)",
            "(line 267,col 9)-(line 267,col 28)",
            "(line 268,col 9)-(line 281,col 9)",
            "(line 282,col 9)-(line 282,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MeterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MeterPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MeterPlotTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n        MeterPlot p1 = new MeterPlot(new DefaultValueDataset(1.23));\n        MeterPlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                     new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (MeterPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(p1, p2);\n\n    }",
        "begin_line": 288,
        "end_line": 307,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 68)",
            "(line 290,col 9)-(line 290,col 28)",
            "(line 291,col 9)-(line 304,col 9)",
            "(line 305,col 9)-(line 305,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CombinedRangeCategoryPlotTests.class);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 67)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests.CombinedRangeCategoryPlotTests(java.lang.String)",
        "snippet": "    public CombinedRangeCategoryPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        CombinedRangeCategoryPlot plot1 = createPlot();\n        CombinedRangeCategoryPlot plot2 = createPlot();\n        assertTrue(plot1.equals(plot2));    \n    }",
        "begin_line": 90,
        "end_line": 94,
        "comment": "\n     * Test the equals() method.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 55)",
            "(line 92,col 9)-(line 92,col 55)",
            "(line 93,col 9)-(line 93,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CombinedRangeCategoryPlot plot1 = createPlot();        \n        CombinedRangeCategoryPlot plot2 = null;\n        try {\n            plot2 = (CombinedRangeCategoryPlot) plot1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(plot1 != plot2);\n        assertTrue(plot1.getClass() == plot2.getClass());\n        assertTrue(plot1.equals(plot2));\n    }",
        "begin_line": 99,
        "end_line": 111,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 55)",
            "(line 101,col 9)-(line 101,col 47)",
            "(line 102,col 9)-(line 107,col 9)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 57)",
            "(line 110,col 9)-(line 110,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        CombinedRangeCategoryPlot plot1 = createPlot();\n        CombinedRangeCategoryPlot plot2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(plot1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            plot2 = (CombinedRangeCategoryPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(plot1, plot2);\n\n    }",
        "begin_line": 116,
        "end_line": 135,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 55)",
            "(line 118,col 9)-(line 118,col 47)",
            "(line 119,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 133,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests.testRemoveSubplot()",
        "snippet": "    public void testRemoveSubplot() {\n        CombinedRangeCategoryPlot plot = new CombinedRangeCategoryPlot();\n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        CategoryPlot plot3 = new CategoryPlot();\n        plot.add(plot1);\n        plot.add(plot2);\n        plot.add(plot3);\n        plot.remove(plot2);\n        List plots = plot.getSubplots();\n        assertEquals(2, plots.size());\n    }",
        "begin_line": 140,
        "end_line": 151,
        "comment": "\n     * This is a test to replicate the bug report 1121172.\n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 73)",
            "(line 142,col 9)-(line 142,col 48)",
            "(line 143,col 9)-(line 143,col 48)",
            "(line 144,col 9)-(line 144,col 48)",
            "(line 145,col 9)-(line 145,col 24)",
            "(line 146,col 9)-(line 146,col 24)",
            "(line 147,col 9)-(line 147,col 24)",
            "(line 148,col 9)-(line 148,col 27)",
            "(line 149,col 9)-(line 149,col 40)",
            "(line 150,col 9)-(line 150,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests.createDataset1()",
        "snippet": "    public CategoryDataset createDataset1() {\n\n        DefaultCategoryDataset result = new DefaultCategoryDataset();\n\n        // row keys...\n        String series1 = \"First\";\n        String series2 = \"Second\";\n\n        // column keys...\n        String type1 = \"Type 1\";\n        String type2 = \"Type 2\";\n        String type3 = \"Type 3\";\n        String type4 = \"Type 4\";\n        String type5 = \"Type 5\";\n        String type6 = \"Type 6\";\n        String type7 = \"Type 7\";\n        String type8 = \"Type 8\";\n\n        result.addValue(1.0, series1, type1);\n        result.addValue(4.0, series1, type2);\n        result.addValue(3.0, series1, type3);\n        result.addValue(5.0, series1, type4);\n        result.addValue(5.0, series1, type5);\n        result.addValue(7.0, series1, type6);\n        result.addValue(7.0, series1, type7);\n        result.addValue(8.0, series1, type8);\n\n        result.addValue(5.0, series2, type1);\n        result.addValue(7.0, series2, type2);\n        result.addValue(6.0, series2, type3);\n        result.addValue(8.0, series2, type4);\n        result.addValue(4.0, series2, type5);\n        result.addValue(4.0, series2, type6);\n        result.addValue(2.0, series2, type7);\n        result.addValue(1.0, series2, type8);\n\n        return result;\n\n    }",
        "begin_line": 158,
        "end_line": 196,
        "comment": "\n     * Creates a dataset.\n     *\n     * @return A dataset.\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 69)",
            "(line 163,col 9)-(line 163,col 33)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 167,col 9)-(line 167,col 32)",
            "(line 168,col 9)-(line 168,col 32)",
            "(line 169,col 9)-(line 169,col 32)",
            "(line 170,col 9)-(line 170,col 32)",
            "(line 171,col 9)-(line 171,col 32)",
            "(line 172,col 9)-(line 172,col 32)",
            "(line 173,col 9)-(line 173,col 32)",
            "(line 174,col 9)-(line 174,col 32)",
            "(line 176,col 9)-(line 176,col 45)",
            "(line 177,col 9)-(line 177,col 45)",
            "(line 178,col 9)-(line 178,col 45)",
            "(line 179,col 9)-(line 179,col 45)",
            "(line 180,col 9)-(line 180,col 45)",
            "(line 181,col 9)-(line 181,col 45)",
            "(line 182,col 9)-(line 182,col 45)",
            "(line 183,col 9)-(line 183,col 45)",
            "(line 185,col 9)-(line 185,col 45)",
            "(line 186,col 9)-(line 186,col 45)",
            "(line 187,col 9)-(line 187,col 45)",
            "(line 188,col 9)-(line 188,col 45)",
            "(line 189,col 9)-(line 189,col 45)",
            "(line 190,col 9)-(line 190,col 45)",
            "(line 191,col 9)-(line 191,col 45)",
            "(line 192,col 9)-(line 192,col 45)",
            "(line 194,col 9)-(line 194,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests.createDataset2()",
        "snippet": "    public CategoryDataset createDataset2() {\n\n        DefaultCategoryDataset result = new DefaultCategoryDataset();\n\n        // row keys...\n        String series1 = \"Third\";\n        String series2 = \"Fourth\";\n\n        // column keys...\n        String type1 = \"Type 1\";\n        String type2 = \"Type 2\";\n        String type3 = \"Type 3\";\n        String type4 = \"Type 4\";\n        String type5 = \"Type 5\";\n        String type6 = \"Type 6\";\n        String type7 = \"Type 7\";\n        String type8 = \"Type 8\";\n\n        result.addValue(11.0, series1, type1);\n        result.addValue(14.0, series1, type2);\n        result.addValue(13.0, series1, type3);\n        result.addValue(15.0, series1, type4);\n        result.addValue(15.0, series1, type5);\n        result.addValue(17.0, series1, type6);\n        result.addValue(17.0, series1, type7);\n        result.addValue(18.0, series1, type8);\n\n        result.addValue(15.0, series2, type1);\n        result.addValue(17.0, series2, type2);\n        result.addValue(16.0, series2, type3);\n        result.addValue(18.0, series2, type4);\n        result.addValue(14.0, series2, type5);\n        result.addValue(14.0, series2, type6);\n        result.addValue(12.0, series2, type7);\n        result.addValue(11.0, series2, type8);\n\n        return result;\n\n    }",
        "begin_line": 203,
        "end_line": 241,
        "comment": "\n     * Creates a dataset.\n     *\n     * @return A dataset.\n     ",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 69)",
            "(line 208,col 9)-(line 208,col 33)",
            "(line 209,col 9)-(line 209,col 34)",
            "(line 212,col 9)-(line 212,col 32)",
            "(line 213,col 9)-(line 213,col 32)",
            "(line 214,col 9)-(line 214,col 32)",
            "(line 215,col 9)-(line 215,col 32)",
            "(line 216,col 9)-(line 216,col 32)",
            "(line 217,col 9)-(line 217,col 32)",
            "(line 218,col 9)-(line 218,col 32)",
            "(line 219,col 9)-(line 219,col 32)",
            "(line 221,col 9)-(line 221,col 46)",
            "(line 222,col 9)-(line 222,col 46)",
            "(line 223,col 9)-(line 223,col 46)",
            "(line 224,col 9)-(line 224,col 46)",
            "(line 225,col 9)-(line 225,col 46)",
            "(line 226,col 9)-(line 226,col 46)",
            "(line 227,col 9)-(line 227,col 46)",
            "(line 228,col 9)-(line 228,col 46)",
            "(line 230,col 9)-(line 230,col 46)",
            "(line 231,col 9)-(line 231,col 46)",
            "(line 232,col 9)-(line 232,col 46)",
            "(line 233,col 9)-(line 233,col 46)",
            "(line 234,col 9)-(line 234,col 46)",
            "(line 235,col 9)-(line 235,col 46)",
            "(line 236,col 9)-(line 236,col 46)",
            "(line 237,col 9)-(line 237,col 46)",
            "(line 239,col 9)-(line 239,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedRangeCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests.createPlot()",
        "snippet": "    private CombinedRangeCategoryPlot createPlot() {\n        CategoryDataset dataset1 = createDataset1();\n        NumberAxis rangeAxis1 = new NumberAxis(\"Value\");\n        rangeAxis1.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        LineAndShapeRenderer renderer1 = new LineAndShapeRenderer();\n        renderer1.setBaseToolTipGenerator(\n            new StandardCategoryToolTipGenerator()\n        );\n        CategoryPlot subplot1 = new CategoryPlot(\n            dataset1, null, rangeAxis1, renderer1\n        );\n        subplot1.setDomainGridlinesVisible(true);\n        \n        CategoryDataset dataset2 = createDataset2();\n        NumberAxis rangeAxis2 = new NumberAxis(\"Value\");\n        rangeAxis2.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        BarRenderer renderer2 = new BarRenderer();\n        renderer2.setBaseToolTipGenerator(\n            new StandardCategoryToolTipGenerator()\n        );\n        CategoryPlot subplot2 = new CategoryPlot(\n            dataset2, null, rangeAxis2, renderer2\n        );\n        subplot2.setDomainGridlinesVisible(true);\n\n        NumberAxis rangeAxis = new NumberAxis(\"Value\");\n        CombinedRangeCategoryPlot plot \n            = new CombinedRangeCategoryPlot(rangeAxis);\n        plot.add(subplot1, 2);\n        plot.add(subplot2, 1);\n        return plot;\n    }",
        "begin_line": 248,
        "end_line": 279,
        "comment": "\n     * Creates a sample plot.\n     * \n     * @return A plot.\n     ",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 52)",
            "(line 250,col 9)-(line 250,col 56)",
            "(line 251,col 9)-(line 251,col 77)",
            "(line 252,col 9)-(line 252,col 68)",
            "(line 253,col 9)-(line 255,col 10)",
            "(line 256,col 9)-(line 258,col 10)",
            "(line 259,col 9)-(line 259,col 49)",
            "(line 261,col 9)-(line 261,col 52)",
            "(line 262,col 9)-(line 262,col 56)",
            "(line 263,col 9)-(line 263,col 77)",
            "(line 264,col 9)-(line 264,col 50)",
            "(line 265,col 9)-(line 267,col 10)",
            "(line 268,col 9)-(line 270,col 10)",
            "(line 271,col 9)-(line 271,col 49)",
            "(line 273,col 9)-(line 273,col 55)",
            "(line 274,col 9)-(line 275,col 55)",
            "(line 276,col 9)-(line 276,col 30)",
            "(line 277,col 9)-(line 277,col 30)",
            "(line 278,col 9)-(line 278,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MarkerTests.class);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.MarkerTests(java.lang.String)",
        "snippet": "    public MarkerTests(String name) {\n        super(name);\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.testGetSetPaint()",
        "snippet": "    public void testGetSetPaint() {\n        // we use ValueMarker for the tests, because we need a concrete \n        // subclass...\n        ValueMarker m = new ValueMarker(1.1);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(Color.gray, m.getPaint());\n        m.setPaint(Color.blue);\n        assertEquals(Color.blue, m.getPaint());\n        assertEquals(m, this.lastEvent.getMarker());\n        \n        // check null argument...\n        try {\n            m.setPaint(null);\n            fail(\"Expected an IllegalArgumentException for null.\");\n        }\n        catch (IllegalArgumentException e) {\n            assertTrue(true);\n        }\n    }",
        "begin_line": 94,
        "end_line": 113,
        "comment": "\n     * Some checks for the getPaint() and setPaint() methods.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 45)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 99,col 9)-(line 99,col 30)",
            "(line 100,col 9)-(line 100,col 47)",
            "(line 101,col 9)-(line 101,col 31)",
            "(line 102,col 9)-(line 102,col 47)",
            "(line 103,col 9)-(line 103,col 52)",
            "(line 106,col 9)-(line 112,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.testGetSetStroke()",
        "snippet": "    public void testGetSetStroke() {\n        // we use ValueMarker for the tests, because we need a concrete \n        // subclass...\n        ValueMarker m = new ValueMarker(1.1);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(new BasicStroke(0.5f), m.getStroke());\n        m.setStroke(new BasicStroke(1.1f));\n        assertEquals(new BasicStroke(1.1f), m.getStroke());\n        assertEquals(m, this.lastEvent.getMarker());\n        \n        // check null argument...\n        try {\n            m.setStroke(null);\n            fail(\"Expected an IllegalArgumentException for null.\");\n        }\n        catch (IllegalArgumentException e) {\n            assertTrue(true);\n        }\n    }",
        "begin_line": 118,
        "end_line": 137,
        "comment": "\n     * Some checks for the getStroke() and setStroke() methods.\n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 45)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 123,col 9)-(line 123,col 30)",
            "(line 124,col 9)-(line 124,col 59)",
            "(line 125,col 9)-(line 125,col 43)",
            "(line 126,col 9)-(line 126,col 59)",
            "(line 127,col 9)-(line 127,col 52)",
            "(line 130,col 9)-(line 136,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.testGetSetOutlinePaint()",
        "snippet": "    public void testGetSetOutlinePaint() {\n        // we use ValueMarker for the tests, because we need a concrete \n        // subclass...\n        ValueMarker m = new ValueMarker(1.1);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(Color.gray, m.getOutlinePaint());\n        m.setOutlinePaint(Color.yellow);\n        assertEquals(Color.yellow, m.getOutlinePaint());\n        assertEquals(m, this.lastEvent.getMarker());\n        \n        // check null argument...\n        m.setOutlinePaint(null);\n        assertEquals(null, m.getOutlinePaint());\n    }",
        "begin_line": 142,
        "end_line": 156,
        "comment": "\n     * Some checks for the getOutlinePaint() and setOutlinePaint() methods.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 45)",
            "(line 146,col 9)-(line 146,col 34)",
            "(line 147,col 9)-(line 147,col 30)",
            "(line 148,col 9)-(line 148,col 54)",
            "(line 149,col 9)-(line 149,col 40)",
            "(line 150,col 9)-(line 150,col 56)",
            "(line 151,col 9)-(line 151,col 52)",
            "(line 154,col 9)-(line 154,col 32)",
            "(line 155,col 9)-(line 155,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.testGetSetOutlineStroke()",
        "snippet": "    public void testGetSetOutlineStroke() {\n        // we use ValueMarker for the tests, because we need a concrete \n        // subclass...\n        ValueMarker m = new ValueMarker(1.1);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(new BasicStroke(0.5f), m.getOutlineStroke());\n        m.setOutlineStroke(new BasicStroke(1.1f));\n        assertEquals(new BasicStroke(1.1f), m.getOutlineStroke());\n        assertEquals(m, this.lastEvent.getMarker());\n        \n        // check null argument...\n        m.setOutlineStroke(null);\n        assertEquals(null, m.getOutlineStroke());\n    }",
        "begin_line": 161,
        "end_line": 175,
        "comment": "\n     * Some checks for the getOutlineStroke() and setOutlineStroke() methods.\n     ",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 45)",
            "(line 165,col 9)-(line 165,col 34)",
            "(line 166,col 9)-(line 166,col 30)",
            "(line 167,col 9)-(line 167,col 66)",
            "(line 168,col 9)-(line 168,col 50)",
            "(line 169,col 9)-(line 169,col 66)",
            "(line 170,col 9)-(line 170,col 52)",
            "(line 173,col 9)-(line 173,col 33)",
            "(line 174,col 9)-(line 174,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.testGetSetAlpha()",
        "snippet": "    public void testGetSetAlpha() {\n        // we use ValueMarker for the tests, because we need a concrete \n        // subclass...\n        ValueMarker m = new ValueMarker(1.1);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(0.8f, m.getAlpha(), EPSILON);\n        m.setAlpha(0.5f);\n        assertEquals(0.5f, m.getAlpha(), EPSILON);\n        assertEquals(m, this.lastEvent.getMarker());\n    }",
        "begin_line": 182,
        "end_line": 192,
        "comment": "\n     * Some checks for the getAlpha() and setAlpha() methods.\n     ",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 45)",
            "(line 186,col 9)-(line 186,col 34)",
            "(line 187,col 9)-(line 187,col 30)",
            "(line 188,col 9)-(line 188,col 50)",
            "(line 189,col 9)-(line 189,col 25)",
            "(line 190,col 9)-(line 190,col 50)",
            "(line 191,col 9)-(line 191,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.testGetSetLabel()",
        "snippet": "    public void testGetSetLabel() {\n        // we use ValueMarker for the tests, because we need a concrete \n        // subclass...\n        ValueMarker m = new ValueMarker(1.1);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(null, m.getLabel());\n        m.setLabel(\"XYZ\");\n        assertEquals(\"XYZ\", m.getLabel());\n        assertEquals(m, this.lastEvent.getMarker());\n        \n        // check null argument...\n        m.setLabel(null);\n        assertEquals(null, m.getLabel());\n    }",
        "begin_line": 197,
        "end_line": 211,
        "comment": "\n     * Some checks for the getLabel() and setLabel() methods.\n     ",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 45)",
            "(line 201,col 9)-(line 201,col 34)",
            "(line 202,col 9)-(line 202,col 30)",
            "(line 203,col 9)-(line 203,col 41)",
            "(line 204,col 9)-(line 204,col 26)",
            "(line 205,col 9)-(line 205,col 42)",
            "(line 206,col 9)-(line 206,col 52)",
            "(line 209,col 9)-(line 209,col 25)",
            "(line 210,col 9)-(line 210,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.testGetSetLabelFont()",
        "snippet": "    public void testGetSetLabelFont() {\n        // we use ValueMarker for the tests, because we need a concrete \n        // subclass...\n        ValueMarker m = new ValueMarker(1.1);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(new Font(\"SansSerif\", Font.PLAIN, 9), m.getLabelFont());\n        m.setLabelFont(new Font(\"SansSerif\", Font.BOLD, 10));\n        assertEquals(new Font(\"SansSerif\", Font.BOLD, 10), m.getLabelFont());\n        assertEquals(m, this.lastEvent.getMarker());\n        \n        // check null argument...\n        try {\n            m.setLabelFont(null);\n            fail(\"Expected an IllegalArgumentException for null.\");\n        }\n        catch (IllegalArgumentException e) {\n            assertTrue(true);\n        }\n    }",
        "begin_line": 216,
        "end_line": 235,
        "comment": "\n     * Some checks for the getLabelFont() and setLabelFont() methods.\n     ",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 45)",
            "(line 220,col 9)-(line 220,col 34)",
            "(line 221,col 9)-(line 221,col 30)",
            "(line 222,col 9)-(line 222,col 77)",
            "(line 223,col 9)-(line 223,col 61)",
            "(line 224,col 9)-(line 224,col 77)",
            "(line 225,col 9)-(line 225,col 52)",
            "(line 228,col 9)-(line 234,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.testGetSetLabelPaint()",
        "snippet": "    public void testGetSetLabelPaint() {\n        // we use ValueMarker for the tests, because we need a concrete \n        // subclass...\n        ValueMarker m = new ValueMarker(1.1);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(Color.black, m.getLabelPaint());\n        m.setLabelPaint(Color.red);\n        assertEquals(Color.red, m.getLabelPaint());\n        assertEquals(m, this.lastEvent.getMarker());\n        \n        // check null argument...\n        try {\n            m.setLabelPaint(null);\n            fail(\"Expected an IllegalArgumentException for null.\");\n        }\n        catch (IllegalArgumentException e) {\n            assertTrue(true);\n        }\n    }",
        "begin_line": 240,
        "end_line": 259,
        "comment": "\n     * Some checks for the getLabelPaint() and setLabelPaint() methods.\n     ",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 45)",
            "(line 244,col 9)-(line 244,col 34)",
            "(line 245,col 9)-(line 245,col 30)",
            "(line 246,col 9)-(line 246,col 53)",
            "(line 247,col 9)-(line 247,col 35)",
            "(line 248,col 9)-(line 248,col 51)",
            "(line 249,col 9)-(line 249,col 52)",
            "(line 252,col 9)-(line 258,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.testGetSetLabelAnchor()",
        "snippet": "    public void testGetSetLabelAnchor() {\n        // we use ValueMarker for the tests, because we need a concrete \n        // subclass...\n        ValueMarker m = new ValueMarker(1.1);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(RectangleAnchor.TOP_LEFT, m.getLabelAnchor());\n        m.setLabelAnchor(RectangleAnchor.TOP);\n        assertEquals(RectangleAnchor.TOP, m.getLabelAnchor());\n        assertEquals(m, this.lastEvent.getMarker());\n        \n        // check null argument...\n        try {\n            m.setLabelAnchor(null);\n            fail(\"Expected an IllegalArgumentException for null.\");\n        }\n        catch (IllegalArgumentException e) {\n            assertTrue(true);\n        }\n    }",
        "begin_line": 264,
        "end_line": 283,
        "comment": "\n     * Some checks for the getLabelAnchor() and setLabelAnchor() methods.\n     ",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 45)",
            "(line 268,col 9)-(line 268,col 34)",
            "(line 269,col 9)-(line 269,col 30)",
            "(line 270,col 9)-(line 270,col 67)",
            "(line 271,col 9)-(line 271,col 46)",
            "(line 272,col 9)-(line 272,col 62)",
            "(line 273,col 9)-(line 273,col 52)",
            "(line 276,col 9)-(line 282,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.testGetSetLabelOffset()",
        "snippet": "    public void testGetSetLabelOffset() {\n        // we use ValueMarker for the tests, because we need a concrete \n        // subclass...\n        ValueMarker m = new ValueMarker(1.1);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(new RectangleInsets(3, 3, 3, 3), m.getLabelOffset());\n        m.setLabelOffset(new RectangleInsets(1, 2, 3, 4));\n        assertEquals(new RectangleInsets(1, 2, 3, 4), m.getLabelOffset());\n        assertEquals(m, this.lastEvent.getMarker());\n        \n        // check null argument...\n        try {\n            m.setLabelOffset(null);\n            fail(\"Expected an IllegalArgumentException for null.\");\n        }\n        catch (IllegalArgumentException e) {\n            assertTrue(true);\n        }\n    }",
        "begin_line": 288,
        "end_line": 307,
        "comment": "\n     * Some checks for the getLabelOffset() and setLabelOffset() methods.\n     ",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 45)",
            "(line 292,col 9)-(line 292,col 34)",
            "(line 293,col 9)-(line 293,col 30)",
            "(line 294,col 9)-(line 294,col 74)",
            "(line 295,col 9)-(line 295,col 58)",
            "(line 296,col 9)-(line 296,col 74)",
            "(line 297,col 9)-(line 297,col 52)",
            "(line 300,col 9)-(line 306,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.testGetSetLabelOffsetType()",
        "snippet": "    public void testGetSetLabelOffsetType() {\n        // we use ValueMarker for the tests, because we need a concrete \n        // subclass...\n        ValueMarker m = new ValueMarker(1.1);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(LengthAdjustmentType.CONTRACT, m.getLabelOffsetType());\n        m.setLabelOffsetType(LengthAdjustmentType.EXPAND);\n        assertEquals(LengthAdjustmentType.EXPAND, m.getLabelOffsetType());\n        assertEquals(m, this.lastEvent.getMarker());\n        \n        // check null argument...\n        try {\n            m.setLabelOffsetType(null);\n            fail(\"Expected an IllegalArgumentException for null.\");\n        }\n        catch (IllegalArgumentException e) {\n            assertTrue(true);\n        }\n    }",
        "begin_line": 313,
        "end_line": 332,
        "comment": "\n     * Some checks for the getLabelOffsetType() and setLabelOffsetType() \n     * methods.\n     ",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 45)",
            "(line 317,col 9)-(line 317,col 34)",
            "(line 318,col 9)-(line 318,col 30)",
            "(line 319,col 9)-(line 319,col 76)",
            "(line 320,col 9)-(line 320,col 58)",
            "(line 321,col 9)-(line 321,col 74)",
            "(line 322,col 9)-(line 322,col 52)",
            "(line 325,col 9)-(line 331,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.testGetSetLabelTextAnchor()",
        "snippet": "    public void testGetSetLabelTextAnchor() {\n        // we use ValueMarker for the tests, because we need a concrete \n        // subclass...\n        ValueMarker m = new ValueMarker(1.1);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(TextAnchor.CENTER, m.getLabelTextAnchor());\n        m.setLabelTextAnchor(TextAnchor.BASELINE_LEFT);\n        assertEquals(TextAnchor.BASELINE_LEFT, m.getLabelTextAnchor());\n        assertEquals(m, this.lastEvent.getMarker());\n        \n        // check null argument...\n        try {\n            m.setLabelTextAnchor(null);\n            fail(\"Expected an IllegalArgumentException for null.\");\n        }\n        catch (IllegalArgumentException e) {\n            assertTrue(true);\n        }\n    }",
        "begin_line": 338,
        "end_line": 357,
        "comment": "\n     * Some checks for the getLabelTextAnchor() and setLabelTextAnchor() \n     * methods.\n     ",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 45)",
            "(line 342,col 9)-(line 342,col 34)",
            "(line 343,col 9)-(line 343,col 30)",
            "(line 344,col 9)-(line 344,col 64)",
            "(line 345,col 9)-(line 345,col 55)",
            "(line 346,col 9)-(line 346,col 71)",
            "(line 347,col 9)-(line 347,col 52)",
            "(line 350,col 9)-(line 356,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.testListenersWithCategoryPlot()",
        "snippet": "    public void testListenersWithCategoryPlot() {\n        CategoryPlot plot = new CategoryPlot();\n        CategoryMarker marker1 = new CategoryMarker(\"X\");\n        ValueMarker marker2 = new ValueMarker(1.0);\n        plot.addDomainMarker(marker1);\n        plot.addRangeMarker(marker2);\n        EventListener[] listeners1 = marker1.getListeners(\n                MarkerChangeListener.class);\n        assertTrue(Arrays.asList(listeners1).contains(plot));\n        EventListener[] listeners2 = marker1.getListeners(\n                MarkerChangeListener.class);\n        assertTrue(Arrays.asList(listeners2).contains(plot));\n        plot.clearDomainMarkers();\n        plot.clearRangeMarkers();\n        listeners1 = marker1.getListeners(MarkerChangeListener.class);\n        assertFalse(Arrays.asList(listeners1).contains(plot));\n        listeners2 = marker1.getListeners(MarkerChangeListener.class);\n        assertFalse(Arrays.asList(listeners2).contains(plot));\n    }",
        "begin_line": 362,
        "end_line": 380,
        "comment": "\n     * Checks that a CategoryPlot deregisters listeners when clearing markers.\n     ",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 47)",
            "(line 364,col 9)-(line 364,col 57)",
            "(line 365,col 9)-(line 365,col 51)",
            "(line 366,col 9)-(line 366,col 38)",
            "(line 367,col 9)-(line 367,col 37)",
            "(line 368,col 9)-(line 369,col 44)",
            "(line 370,col 9)-(line 370,col 61)",
            "(line 371,col 9)-(line 372,col 44)",
            "(line 373,col 9)-(line 373,col 61)",
            "(line 374,col 9)-(line 374,col 34)",
            "(line 375,col 9)-(line 375,col 33)",
            "(line 376,col 9)-(line 376,col 70)",
            "(line 377,col 9)-(line 377,col 62)",
            "(line 378,col 9)-(line 378,col 70)",
            "(line 379,col 9)-(line 379,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.testListenersWithXYPlot()",
        "snippet": "    public void testListenersWithXYPlot() {\n        XYPlot plot = new XYPlot();\n        ValueMarker marker1 = new ValueMarker(1.0);\n        ValueMarker marker2 = new ValueMarker(2.0);\n        plot.addDomainMarker(marker1);\n        plot.addRangeMarker(marker2);\n        EventListener[] listeners1 = marker1.getListeners(\n                MarkerChangeListener.class);\n        assertTrue(Arrays.asList(listeners1).contains(plot));\n        EventListener[] listeners2 = marker1.getListeners(\n                MarkerChangeListener.class);\n        assertTrue(Arrays.asList(listeners2).contains(plot));\n        plot.clearDomainMarkers();\n        plot.clearRangeMarkers();\n        listeners1 = marker1.getListeners(MarkerChangeListener.class);\n        assertFalse(Arrays.asList(listeners1).contains(plot));\n        listeners2 = marker1.getListeners(MarkerChangeListener.class);\n        assertFalse(Arrays.asList(listeners2).contains(plot));\n    }",
        "begin_line": 385,
        "end_line": 403,
        "comment": "\n     * Checks that an XYPlot deregisters listeners when clearing markers.\n     ",
        "child_ranges": [
            "(line 386,col 9)-(line 386,col 35)",
            "(line 387,col 9)-(line 387,col 51)",
            "(line 388,col 9)-(line 388,col 51)",
            "(line 389,col 9)-(line 389,col 38)",
            "(line 390,col 9)-(line 390,col 37)",
            "(line 391,col 9)-(line 392,col 44)",
            "(line 393,col 9)-(line 393,col 61)",
            "(line 394,col 9)-(line 395,col 44)",
            "(line 396,col 9)-(line 396,col 61)",
            "(line 397,col 9)-(line 397,col 34)",
            "(line 398,col 9)-(line 398,col 33)",
            "(line 399,col 9)-(line 399,col 70)",
            "(line 400,col 9)-(line 400,col 62)",
            "(line 401,col 9)-(line 401,col 70)",
            "(line 402,col 9)-(line 402,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.MarkerTests.markerChanged(org.jfree.chart.event.MarkerChangeEvent)",
        "snippet": "    public void markerChanged(MarkerChangeEvent event) {\n        this.lastEvent = event;\n    }",
        "begin_line": 405,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PlotTests.class);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotTests.PlotTests(java.lang.String)",
        "snippet": "    public PlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        PiePlot plot1 = new PiePlot();\n        PiePlot plot2 = new PiePlot();\n        assertTrue(plot1.equals(plot2));    \n        assertTrue(plot2.equals(plot1));\n\n        // noDataMessage\n        plot1.setNoDataMessage(\"No data XYZ\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setNoDataMessage(\"No data XYZ\");\n        assertTrue(plot1.equals(plot2));\n        \n        // noDataMessageFont\n        plot1.setNoDataMessageFont(new Font(\"SansSerif\", Font.PLAIN, 13));\n        assertFalse(plot1.equals(plot2));\n        plot2.setNoDataMessageFont(new Font(\"SansSerif\", Font.PLAIN, 13));\n        assertTrue(plot1.equals(plot2));\n        \n        // noDataMessagePaint\n        plot1.setNoDataMessagePaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setNoDataMessagePaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n        \n        // insets\n        plot1.setInsets(new RectangleInsets(1.0, 2.0, 3.0, 4.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.setInsets(new RectangleInsets(1.0, 2.0, 3.0, 4.0));\n        assertTrue(plot1.equals(plot2));\n        \n        // outlineVisible\n        plot1.setOutlineVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOutlineVisible(false);\n        assertTrue(plot1.equals(plot2));\n        \n        // outlineStroke\n        BasicStroke s = new BasicStroke(1.23f);\n        plot1.setOutlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOutlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n        \n        // outlinePaint\n        plot1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.green));\n        assertFalse(plot1.equals(plot2));\n        plot2.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.green));\n        assertTrue(plot1.equals(plot2));\n        \n        // backgroundPaint\n        plot1.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.cyan, \n                3.0f, 4.0f, Color.green));\n        assertFalse(plot1.equals(plot2));\n        plot2.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.cyan, \n                3.0f, 4.0f, Color.green));\n        assertTrue(plot1.equals(plot2));\n        \n        // backgroundImage\n        plot1.setBackgroundImage(JFreeChart.INFO.getLogo());\n        assertFalse(plot1.equals(plot2));\n        plot2.setBackgroundImage(JFreeChart.INFO.getLogo());\n        assertTrue(plot1.equals(plot2));\n        \n        // backgroundImageAlignment\n        plot1.setBackgroundImageAlignment(Align.BOTTOM_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setBackgroundImageAlignment(Align.BOTTOM_RIGHT);\n        assertTrue(plot1.equals(plot2));\n        \n        // backgroundImageAlpha\n        plot1.setBackgroundImageAlpha(0.77f);\n        assertFalse(plot1.equals(plot2));\n        plot2.setBackgroundImageAlpha(0.77f);\n        assertTrue(plot1.equals(plot2));\n        \n        // foregroundAlpha\n        plot1.setForegroundAlpha(0.99f);\n        assertFalse(plot1.equals(plot2));\n        plot2.setForegroundAlpha(0.99f);\n        assertTrue(plot1.equals(plot2));\n        \n        // backgroundAlpha\n        plot1.setBackgroundAlpha(0.99f);\n        assertFalse(plot1.equals(plot2));\n        plot2.setBackgroundAlpha(0.99f);\n        assertTrue(plot1.equals(plot2));\n        \n        // drawingSupplier\n        plot1.setDrawingSupplier(new DefaultDrawingSupplier(\n                new Paint[] {Color.blue}, new Paint[] {Color.red}, \n                new Stroke[] {new BasicStroke(1.1f)}, \n                new Stroke[] {new BasicStroke(9.9f)}, \n                new Shape[] {new Rectangle(1, 2, 3, 4)}));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawingSupplier(new DefaultDrawingSupplier(\n                new Paint[] {Color.blue}, new Paint[] {Color.red}, \n                new Stroke[] {new BasicStroke(1.1f)}, \n                new Stroke[] {new BasicStroke(9.9f)}, \n                new Shape[] {new Rectangle(1, 2, 3, 4)}));\n        assertTrue(plot1.equals(plot2));\n    }",
        "begin_line": 93,
        "end_line": 197,
        "comment": "\n     * Check that the equals() method can distinguish all fields (note that \n     * the dataset is NOT considered in the equals() method).\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 38)",
            "(line 95,col 9)-(line 95,col 38)",
            "(line 96,col 9)-(line 96,col 40)",
            "(line 97,col 9)-(line 97,col 40)",
            "(line 100,col 9)-(line 100,col 46)",
            "(line 101,col 9)-(line 101,col 41)",
            "(line 102,col 9)-(line 102,col 46)",
            "(line 103,col 9)-(line 103,col 40)",
            "(line 106,col 9)-(line 106,col 74)",
            "(line 107,col 9)-(line 107,col 41)",
            "(line 108,col 9)-(line 108,col 74)",
            "(line 109,col 9)-(line 109,col 40)",
            "(line 112,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 114,col 41)",
            "(line 115,col 9)-(line 116,col 41)",
            "(line 117,col 9)-(line 117,col 40)",
            "(line 120,col 9)-(line 120,col 65)",
            "(line 121,col 9)-(line 121,col 41)",
            "(line 122,col 9)-(line 122,col 65)",
            "(line 123,col 9)-(line 123,col 40)",
            "(line 126,col 9)-(line 126,col 39)",
            "(line 127,col 9)-(line 127,col 41)",
            "(line 128,col 9)-(line 128,col 39)",
            "(line 129,col 9)-(line 129,col 40)",
            "(line 132,col 9)-(line 132,col 47)",
            "(line 133,col 9)-(line 133,col 34)",
            "(line 134,col 9)-(line 134,col 41)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 136,col 9)-(line 136,col 40)",
            "(line 139,col 9)-(line 140,col 42)",
            "(line 141,col 9)-(line 141,col 41)",
            "(line 142,col 9)-(line 143,col 42)",
            "(line 144,col 9)-(line 144,col 40)",
            "(line 147,col 9)-(line 148,col 42)",
            "(line 149,col 9)-(line 149,col 41)",
            "(line 150,col 9)-(line 151,col 42)",
            "(line 152,col 9)-(line 152,col 40)",
            "(line 155,col 9)-(line 155,col 60)",
            "(line 156,col 9)-(line 156,col 41)",
            "(line 157,col 9)-(line 157,col 60)",
            "(line 158,col 9)-(line 158,col 40)",
            "(line 161,col 9)-(line 161,col 62)",
            "(line 162,col 9)-(line 162,col 41)",
            "(line 163,col 9)-(line 163,col 62)",
            "(line 164,col 9)-(line 164,col 40)",
            "(line 167,col 9)-(line 167,col 45)",
            "(line 168,col 9)-(line 168,col 41)",
            "(line 169,col 9)-(line 169,col 45)",
            "(line 170,col 9)-(line 170,col 40)",
            "(line 173,col 9)-(line 173,col 40)",
            "(line 174,col 9)-(line 174,col 41)",
            "(line 175,col 9)-(line 175,col 40)",
            "(line 176,col 9)-(line 176,col 40)",
            "(line 179,col 9)-(line 179,col 40)",
            "(line 180,col 9)-(line 180,col 41)",
            "(line 181,col 9)-(line 181,col 40)",
            "(line 182,col 9)-(line 182,col 40)",
            "(line 185,col 9)-(line 189,col 58)",
            "(line 190,col 9)-(line 190,col 41)",
            "(line 191,col 9)-(line 195,col 58)",
            "(line 196,col 9)-(line 196,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MeterIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MeterIntervalTests.java",
        "signature": "org.jfree.chart.plot.junit.MeterIntervalTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MeterIntervalTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MeterIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MeterIntervalTests.java",
        "signature": "org.jfree.chart.plot.junit.MeterIntervalTests.MeterIntervalTests(java.lang.String)",
        "snippet": "    public MeterIntervalTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MeterIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MeterIntervalTests.java",
        "signature": "org.jfree.chart.plot.junit.MeterIntervalTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        MeterInterval m1 = new MeterInterval(\n            \"Label 1\", new Range(1.2, 3.4), Color.red, new BasicStroke(1.0f), \n            Color.blue\n        );\n        MeterInterval m2 = new MeterInterval(\n            \"Label 1\", new Range(1.2, 3.4), Color.red, new BasicStroke(1.0f), \n            Color.blue\n        );\n        assertTrue(m1.equals(m2));\n        assertTrue(m2.equals(m1));\n        \n        m1 = new MeterInterval(\n            \"Label 2\", new Range(1.2, 3.4), Color.red, new BasicStroke(1.0f), \n            Color.blue\n        );\n        assertFalse(m1.equals(m2));\n        m2 = new MeterInterval(\n            \"Label 2\", new Range(1.2, 3.4), Color.red, new BasicStroke(1.0f), \n            Color.blue\n        );\n        assertTrue(m1.equals(m2));\n        \n    }",
        "begin_line": 85,
        "end_line": 109,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 90,col 10)",
            "(line 91,col 9)-(line 94,col 10)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 98,col 9)-(line 101,col 10)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 106,col 10)",
            "(line 107,col 9)-(line 107,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MeterIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MeterIntervalTests.java",
        "signature": "org.jfree.chart.plot.junit.MeterIntervalTests.testCloning()",
        "snippet": "    public void testCloning() {\n        MeterInterval m1 = new MeterInterval(\"X\", new Range(1.0, 2.0));\n        assertFalse(m1 instanceof Cloneable);\n    }",
        "begin_line": 114,
        "end_line": 117,
        "comment": "\n     * This class is immutable so cloning isn't required.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 71)",
            "(line 116,col 9)-(line 116,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MeterIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MeterIntervalTests.java",
        "signature": "org.jfree.chart.plot.junit.MeterIntervalTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        MeterInterval m1 = new MeterInterval(\"X\", new Range(1.0, 2.0));\n        MeterInterval m2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            m2 = (MeterInterval) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        boolean b = m1.equals(m2);\n        assertTrue(b);\n\n    }",
        "begin_line": 122,
        "end_line": 144,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 71)",
            "(line 125,col 9)-(line 125,col 32)",
            "(line 126,col 9)-(line 140,col 9)",
            "(line 141,col 9)-(line 141,col 34)",
            "(line 142,col 9)-(line 142,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ValueMarkerTests.class);\n    }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.ValueMarkerTests(java.lang.String)",
        "snippet": "    public ValueMarkerTests(String name) {\n        super(name);\n    }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        Marker m1 = new ValueMarker(45.0);\n        Marker m2 = new ValueMarker(45.0);\n        assertTrue(m1.equals(m2));\n        assertTrue(m2.equals(m1));\n        \n        m1.setPaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.red));\n        assertFalse(m1.equals(m2));\n        m2.setPaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.red));\n        assertTrue(m1.equals(m2));\n        \n        BasicStroke stroke = new BasicStroke(2.2f);\n        m1.setStroke(stroke);\n        assertFalse(m1.equals(m2));\n        m2.setStroke(stroke);\n        assertTrue(m1.equals(m2));\n        \n        m1.setOutlinePaint(new GradientPaint(4.0f, 3.0f, Color.yellow, \n                2.0f, 1.0f, Color.white));\n        assertFalse(m1.equals(m2));\n        m2.setOutlinePaint(new GradientPaint(4.0f, 3.0f, Color.yellow, \n                2.0f, 1.0f, Color.white));\n        assertTrue(m1.equals(m2));\n        \n        m1.setOutlineStroke(stroke);\n        assertFalse(m1.equals(m2));\n        m2.setOutlineStroke(stroke);\n        assertTrue(m1.equals(m2));\n\n        m1.setAlpha(0.1f);\n        assertFalse(m1.equals(m2));\n        m2.setAlpha(0.1f);\n        assertTrue(m1.equals(m2));\n        \n        m1.setLabel(\"New Label\");\n        assertFalse(m1.equals(m2));\n        m2.setLabel(\"New Label\");\n        assertTrue(m1.equals(m2));\n        \n        m1.setLabelFont(new Font(\"SansSerif\", Font.PLAIN, 10));\n        assertFalse(m1.equals(m2));\n        m2.setLabelFont(new Font(\"SansSerif\", Font.PLAIN, 10));\n        assertTrue(m1.equals(m2));\n\n        m1.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(m1.equals(m2));\n        m2.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(m1.equals(m2));\n\n        m1.setLabelAnchor(RectangleAnchor.TOP_RIGHT);\n        assertFalse(m1.equals(m2));\n        m2.setLabelAnchor(RectangleAnchor.TOP_RIGHT);\n        assertTrue(m1.equals(m2));\n        \n        m1.setLabelTextAnchor(TextAnchor.BASELINE_RIGHT);\n        assertFalse(m1.equals(m2));\n        m2.setLabelTextAnchor(TextAnchor.BASELINE_RIGHT);\n        assertTrue(m1.equals(m2));\n        \n        m1.setLabelOffset(new RectangleInsets(10.0, 10.0, 10.0, 10.0));\n        assertFalse(m1.equals(m2));\n        m2.setLabelOffset(new RectangleInsets(10.0, 10.0, 10.0, 10.0));\n        assertTrue(m1.equals(m2));\n        \n        m1.setLabelOffsetType(LengthAdjustmentType.EXPAND);\n        assertFalse(m1.equals(m2));\n        m2.setLabelOffsetType(LengthAdjustmentType.EXPAND);\n        assertTrue(m1.equals(m2));\n        \n        m1 = new ValueMarker(12.3);\n        m2 = new ValueMarker(45.6);\n        assertFalse(m1.equals(m2));\n        m2 = new ValueMarker(12.3);\n        assertTrue(m1.equals(m2));\n        \n    }",
        "begin_line": 105,
        "end_line": 185,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 42)",
            "(line 108,col 9)-(line 108,col 42)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 112,col 9)-(line 113,col 40)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 116,col 40)",
            "(line 117,col 9)-(line 117,col 34)",
            "(line 119,col 9)-(line 119,col 51)",
            "(line 120,col 9)-(line 120,col 29)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 29)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 125,col 9)-(line 126,col 42)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 129,col 42)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 132,col 9)-(line 132,col 36)",
            "(line 133,col 9)-(line 133,col 35)",
            "(line 134,col 9)-(line 134,col 36)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 137,col 9)-(line 137,col 26)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 26)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 142,col 9)-(line 142,col 33)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 144,col 33)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 147,col 9)-(line 147,col 63)",
            "(line 148,col 9)-(line 148,col 35)",
            "(line 149,col 9)-(line 149,col 63)",
            "(line 150,col 9)-(line 150,col 34)",
            "(line 152,col 9)-(line 153,col 43)",
            "(line 154,col 9)-(line 154,col 35)",
            "(line 155,col 9)-(line 156,col 43)",
            "(line 157,col 9)-(line 157,col 34)",
            "(line 159,col 9)-(line 159,col 53)",
            "(line 160,col 9)-(line 160,col 35)",
            "(line 161,col 9)-(line 161,col 53)",
            "(line 162,col 9)-(line 162,col 34)",
            "(line 164,col 9)-(line 164,col 57)",
            "(line 165,col 9)-(line 165,col 35)",
            "(line 166,col 9)-(line 166,col 57)",
            "(line 167,col 9)-(line 167,col 34)",
            "(line 169,col 9)-(line 169,col 71)",
            "(line 170,col 9)-(line 170,col 35)",
            "(line 171,col 9)-(line 171,col 71)",
            "(line 172,col 9)-(line 172,col 34)",
            "(line 174,col 9)-(line 174,col 59)",
            "(line 175,col 9)-(line 175,col 35)",
            "(line 176,col 9)-(line 176,col 59)",
            "(line 177,col 9)-(line 177,col 34)",
            "(line 179,col 9)-(line 179,col 35)",
            "(line 180,col 9)-(line 180,col 35)",
            "(line 181,col 9)-(line 181,col 35)",
            "(line 182,col 9)-(line 182,col 35)",
            "(line 183,col 9)-(line 183,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.testCloning()",
        "snippet": "    public void testCloning() {\n        ValueMarker m1 = new ValueMarker(25.0);\n        ValueMarker m2 = null;\n        try {\n            m2 = (ValueMarker) m1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(m1 != m2);\n        assertTrue(m1.getClass() == m2.getClass());\n        assertTrue(m1.equals(m2));\n    }",
        "begin_line": 190,
        "end_line": 202,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 47)",
            "(line 192,col 9)-(line 192,col 30)",
            "(line 193,col 9)-(line 198,col 9)",
            "(line 199,col 9)-(line 199,col 29)",
            "(line 200,col 9)-(line 200,col 51)",
            "(line 201,col 9)-(line 201,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        ValueMarker m1 = new ValueMarker(25.0);\n        ValueMarker m2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            m2 = (ValueMarker) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        boolean b = m1.equals(m2);\n        assertTrue(b);\n\n    }",
        "begin_line": 207,
        "end_line": 229,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 47)",
            "(line 210,col 9)-(line 210,col 30)",
            "(line 212,col 9)-(line 225,col 9)",
            "(line 226,col 9)-(line 226,col 34)",
            "(line 227,col 9)-(line 227,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.testGetSetValue()",
        "snippet": "    public void testGetSetValue() {\n        ValueMarker m = new ValueMarker(1.1);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(1.1, m.getValue(), EPSILON);\n        m.setValue(33.3);\n        assertEquals(33.3, m.getValue(), EPSILON);\n        assertEquals(m, this.lastEvent.getMarker());\n    }",
        "begin_line": 236,
        "end_line": 244,
        "comment": "\n     * Some checks for the getValue() and setValue() methods.\n     ",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 45)",
            "(line 238,col 9)-(line 238,col 34)",
            "(line 239,col 9)-(line 239,col 30)",
            "(line 240,col 9)-(line 240,col 49)",
            "(line 241,col 9)-(line 241,col 25)",
            "(line 242,col 9)-(line 242,col 50)",
            "(line 243,col 9)-(line 243,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.markerChanged(org.jfree.chart.event.MarkerChangeEvent)",
        "snippet": "    public void markerChanged(MarkerChangeEvent event) {\n        this.lastEvent = event;\n    }",
        "begin_line": 246,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.test1802195()",
        "snippet": "    public void test1802195() {\n\n        ValueMarker m1 = new ValueMarker(25.0);\n        ValueMarker m2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            m2 = (ValueMarker) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        boolean b = m1.equals(m2);\n        assertTrue(b);\n\n        boolean pass = true;\n        try {\n            m2.setValue(-10.0);\n        }\n        catch (NullPointerException e) {\n            pass = false;\n        }\n        assertTrue(pass);\n\n    }",
        "begin_line": 253,
        "end_line": 284,
        "comment": "\n     * A test for bug 1802195.\n     ",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 47)",
            "(line 256,col 9)-(line 256,col 30)",
            "(line 258,col 9)-(line 271,col 9)",
            "(line 272,col 9)-(line 272,col 34)",
            "(line 273,col 9)-(line 273,col 22)",
            "(line 275,col 9)-(line 275,col 28)",
            "(line 276,col 9)-(line 281,col 9)",
            "(line 282,col 9)-(line 282,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ValueMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.ValueMarkerTests.test1808376()",
        "snippet": "    public void test1808376() {\n        Stroke stroke = new BasicStroke(1.0f);\n        Stroke outlineStroke = new BasicStroke(2.0f);\n        ValueMarker m = new ValueMarker(1.0, Color.red, stroke, Color.blue, \n                outlineStroke, 0.5f);\n        assertEquals(1.0, m.getValue(), EPSILON);\n        assertEquals(Color.red, m.getPaint());\n        assertEquals(stroke, m.getStroke());\n        assertEquals(Color.blue, m.getOutlinePaint());\n        assertEquals(outlineStroke, m.getOutlineStroke());\n        assertEquals(0.5f, m.getAlpha(), EPSILON);\n    }",
        "begin_line": 289,
        "end_line": 300,
        "comment": "\n     * A test for bug report 1808376.\n     ",
        "child_ranges": [
            "(line 290,col 9)-(line 290,col 46)",
            "(line 291,col 9)-(line 291,col 53)",
            "(line 292,col 9)-(line 293,col 37)",
            "(line 294,col 9)-(line 294,col 49)",
            "(line 295,col 9)-(line 295,col 46)",
            "(line 296,col 9)-(line 296,col 44)",
            "(line 297,col 9)-(line 297,col 54)",
            "(line 298,col 9)-(line 298,col 58)",
            "(line 299,col 9)-(line 299,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYPlotTests.class);\n    }",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.XYPlotTests(java.lang.String)",
        "snippet": "    public XYPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        XYPlot plot1 = new XYPlot();\n        XYPlot plot2 = new XYPlot();\n        assertTrue(plot1.equals(plot2));    \n        \n        // orientation...\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n        \n        // axisOffset...\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxis...\n        plot1.setDomainAxis(new NumberAxis(\"Domain Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new NumberAxis(\"Domain Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxisLocation...\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // secondary DomainAxes...\n        plot1.setDomainAxis(11, new NumberAxis(\"Secondary Domain Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new NumberAxis(\"Secondary Domain Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // secondary DomainAxisLocations...\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxis...\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxisLocation...\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // secondary RangeAxes...\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // secondary RangeAxisLocations...\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n        \n        // secondary DatasetDomainAxisMap...\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        // secondaryDatasetRangeAxisMap...\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n        \n        // renderer\n        plot1.setRenderer(new DefaultXYItemRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new DefaultXYItemRenderer());\n        assertTrue(plot1.equals(plot2));\n        \n        // secondary renderers\n        plot1.setRenderer(11, new DefaultXYItemRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new DefaultXYItemRenderer());\n        assertTrue(plot1.equals(plot2));\n        \n        // domainGridlinesVisible\n        plot1.setDomainGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        // domainGridlineStroke\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // domainGridlinePaint\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeGridlinesVisible\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeGridlineStroke\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeGridlinePaint\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n                \n        // rangeZeroBaselineVisible\n        plot1.setRangeZeroBaselineVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeZeroBaselineStroke\n        plot1.setRangeZeroBaselineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeZeroBaselinePaint\n        plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeCrosshairVisible\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairValue\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairStroke\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairPaint\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.pink, \n                3.0f, 4.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.pink, \n                3.0f, 4.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairLockedOnData\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n        \n        // range markers\n        plot1.addRangeMarker(new ValueMarker(4.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0));\n        assertTrue(plot1.equals(plot2));\n        \n        // secondary range markers\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.addRangeMarker(1, new ValueMarker(99.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(99.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n                \n        // weight\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n        \n        // quadrant origin\n        plot1.setQuadrantOrigin(new Point2D.Double(12.3, 45.6));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantOrigin(new Point2D.Double(12.3, 45.6));\n        assertTrue(plot1.equals(plot2));\n        \n        // quadrant paint\n        plot1.setQuadrantPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n        plot1.setQuadrantPaint(1, new GradientPaint(2.0f, 3.0f, Color.red,\n                4.0f, 5.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantPaint(1, new GradientPaint(2.0f, 3.0f, Color.red,\n                4.0f, 5.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n        plot1.setQuadrantPaint(2, new GradientPaint(3.0f, 4.0f, Color.red,\n                5.0f, 6.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantPaint(2, new GradientPaint(3.0f, 4.0f, Color.red,\n                5.0f, 6.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n        plot1.setQuadrantPaint(3, new GradientPaint(4.0f, 5.0f, Color.red,\n                6.0f, 7.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantPaint(3, new GradientPaint(4.0f, 5.0f, Color.red,\n                6.0f, 7.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));  \n        \n        plot1.setDomainTickBandPaint(Color.red);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainTickBandPaint(Color.red);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setRangeTickBandPaint(Color.blue);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeTickBandPaint(Color.blue);\n        assertTrue(plot1.equals(plot2));\n        \n    }",
        "begin_line": 142,
        "end_line": 390,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 36)",
            "(line 145,col 9)-(line 145,col 36)",
            "(line 146,col 9)-(line 146,col 40)",
            "(line 149,col 9)-(line 149,col 57)",
            "(line 150,col 9)-(line 150,col 41)",
            "(line 151,col 9)-(line 151,col 57)",
            "(line 152,col 9)-(line 152,col 40)",
            "(line 155,col 9)-(line 155,col 73)",
            "(line 156,col 9)-(line 156,col 41)",
            "(line 157,col 9)-(line 157,col 73)",
            "(line 158,col 9)-(line 158,col 40)",
            "(line 161,col 9)-(line 161,col 59)",
            "(line 162,col 9)-(line 162,col 41)",
            "(line 163,col 9)-(line 163,col 59)",
            "(line 164,col 9)-(line 164,col 40)",
            "(line 167,col 9)-(line 167,col 63)",
            "(line 168,col 9)-(line 168,col 41)",
            "(line 169,col 9)-(line 169,col 63)",
            "(line 170,col 9)-(line 170,col 40)",
            "(line 173,col 9)-(line 173,col 73)",
            "(line 174,col 9)-(line 174,col 41)",
            "(line 175,col 9)-(line 175,col 73)",
            "(line 176,col 9)-(line 176,col 40)",
            "(line 179,col 9)-(line 179,col 67)",
            "(line 180,col 9)-(line 180,col 41)",
            "(line 181,col 9)-(line 181,col 67)",
            "(line 182,col 9)-(line 182,col 40)",
            "(line 185,col 9)-(line 185,col 57)",
            "(line 186,col 9)-(line 186,col 41)",
            "(line 187,col 9)-(line 187,col 57)",
            "(line 188,col 9)-(line 188,col 40)",
            "(line 191,col 9)-(line 191,col 62)",
            "(line 192,col 9)-(line 192,col 41)",
            "(line 193,col 9)-(line 193,col 62)",
            "(line 194,col 9)-(line 194,col 40)",
            "(line 197,col 9)-(line 197,col 71)",
            "(line 198,col 9)-(line 198,col 41)",
            "(line 199,col 9)-(line 199,col 71)",
            "(line 200,col 9)-(line 200,col 40)",
            "(line 203,col 9)-(line 203,col 66)",
            "(line 204,col 9)-(line 204,col 41)",
            "(line 205,col 9)-(line 205,col 66)",
            "(line 206,col 9)-(line 206,col 40)",
            "(line 209,col 9)-(line 209,col 45)",
            "(line 210,col 9)-(line 210,col 41)",
            "(line 211,col 9)-(line 211,col 45)",
            "(line 212,col 9)-(line 212,col 40)",
            "(line 215,col 9)-(line 215,col 44)",
            "(line 216,col 9)-(line 216,col 41)",
            "(line 217,col 9)-(line 217,col 44)",
            "(line 218,col 9)-(line 218,col 40)",
            "(line 221,col 9)-(line 221,col 55)",
            "(line 222,col 9)-(line 222,col 41)",
            "(line 223,col 9)-(line 223,col 55)",
            "(line 224,col 9)-(line 224,col 40)",
            "(line 227,col 9)-(line 227,col 59)",
            "(line 228,col 9)-(line 228,col 41)",
            "(line 229,col 9)-(line 229,col 59)",
            "(line 230,col 9)-(line 230,col 40)",
            "(line 233,col 9)-(line 233,col 47)",
            "(line 234,col 9)-(line 234,col 41)",
            "(line 235,col 9)-(line 235,col 47)",
            "(line 236,col 9)-(line 236,col 40)",
            "(line 239,col 9)-(line 239,col 46)",
            "(line 240,col 9)-(line 240,col 46)",
            "(line 241,col 9)-(line 241,col 41)",
            "(line 242,col 9)-(line 242,col 46)",
            "(line 243,col 9)-(line 243,col 40)",
            "(line 246,col 9)-(line 247,col 40)",
            "(line 248,col 9)-(line 248,col 41)",
            "(line 249,col 9)-(line 250,col 40)",
            "(line 251,col 9)-(line 251,col 40)",
            "(line 254,col 9)-(line 254,col 46)",
            "(line 255,col 9)-(line 255,col 41)",
            "(line 256,col 9)-(line 256,col 46)",
            "(line 257,col 9)-(line 257,col 40)",
            "(line 260,col 9)-(line 260,col 45)",
            "(line 261,col 9)-(line 261,col 41)",
            "(line 262,col 9)-(line 262,col 45)",
            "(line 263,col 9)-(line 263,col 40)",
            "(line 266,col 9)-(line 267,col 40)",
            "(line 268,col 9)-(line 268,col 41)",
            "(line 269,col 9)-(line 270,col 40)",
            "(line 271,col 9)-(line 271,col 40)",
            "(line 274,col 9)-(line 274,col 48)",
            "(line 275,col 9)-(line 275,col 41)",
            "(line 276,col 9)-(line 276,col 48)",
            "(line 277,col 9)-(line 277,col 40)",
            "(line 280,col 9)-(line 280,col 49)",
            "(line 281,col 9)-(line 281,col 41)",
            "(line 282,col 9)-(line 282,col 49)",
            "(line 283,col 9)-(line 283,col 40)",
            "(line 286,col 9)-(line 287,col 40)",
            "(line 288,col 9)-(line 288,col 41)",
            "(line 289,col 9)-(line 290,col 40)",
            "(line 291,col 9)-(line 291,col 40)",
            "(line 294,col 9)-(line 294,col 45)",
            "(line 295,col 9)-(line 295,col 41)",
            "(line 296,col 9)-(line 296,col 45)",
            "(line 297,col 9)-(line 297,col 40)",
            "(line 300,col 9)-(line 300,col 44)",
            "(line 301,col 9)-(line 301,col 41)",
            "(line 302,col 9)-(line 302,col 44)",
            "(line 303,col 9)-(line 303,col 40)",
            "(line 306,col 9)-(line 306,col 46)",
            "(line 307,col 9)-(line 307,col 41)",
            "(line 308,col 9)-(line 308,col 46)",
            "(line 309,col 9)-(line 309,col 40)",
            "(line 312,col 9)-(line 313,col 40)",
            "(line 314,col 9)-(line 314,col 41)",
            "(line 315,col 9)-(line 316,col 40)",
            "(line 317,col 9)-(line 317,col 40)",
            "(line 320,col 9)-(line 320,col 51)",
            "(line 321,col 9)-(line 321,col 41)",
            "(line 322,col 9)-(line 322,col 51)",
            "(line 323,col 9)-(line 323,col 40)",
            "(line 326,col 9)-(line 326,col 51)",
            "(line 327,col 9)-(line 327,col 41)",
            "(line 328,col 9)-(line 328,col 51)",
            "(line 329,col 9)-(line 329,col 40)",
            "(line 332,col 9)-(line 332,col 72)",
            "(line 333,col 9)-(line 333,col 41)",
            "(line 334,col 9)-(line 334,col 72)",
            "(line 335,col 9)-(line 335,col 40)",
            "(line 337,col 9)-(line 337,col 73)",
            "(line 338,col 9)-(line 338,col 41)",
            "(line 339,col 9)-(line 339,col 73)",
            "(line 340,col 9)-(line 340,col 40)",
            "(line 343,col 9)-(line 343,col 27)",
            "(line 344,col 9)-(line 344,col 41)",
            "(line 345,col 9)-(line 345,col 27)",
            "(line 346,col 9)-(line 346,col 40)",
            "(line 349,col 9)-(line 349,col 64)",
            "(line 350,col 9)-(line 350,col 41)",
            "(line 351,col 9)-(line 351,col 64)",
            "(line 352,col 9)-(line 352,col 40)",
            "(line 355,col 9)-(line 356,col 41)",
            "(line 357,col 9)-(line 357,col 41)",
            "(line 358,col 9)-(line 359,col 41)",
            "(line 360,col 9)-(line 360,col 40)",
            "(line 361,col 9)-(line 362,col 41)",
            "(line 363,col 9)-(line 363,col 41)",
            "(line 364,col 9)-(line 365,col 41)",
            "(line 366,col 9)-(line 366,col 40)",
            "(line 367,col 9)-(line 368,col 41)",
            "(line 369,col 9)-(line 369,col 41)",
            "(line 370,col 9)-(line 371,col 41)",
            "(line 372,col 9)-(line 372,col 40)",
            "(line 373,col 9)-(line 374,col 41)",
            "(line 375,col 9)-(line 375,col 41)",
            "(line 376,col 9)-(line 377,col 41)",
            "(line 378,col 9)-(line 378,col 40)",
            "(line 380,col 9)-(line 380,col 48)",
            "(line 381,col 9)-(line 381,col 41)",
            "(line 382,col 9)-(line 382,col 48)",
            "(line 383,col 9)-(line 383,col 40)",
            "(line 385,col 9)-(line 385,col 48)",
            "(line 386,col 9)-(line 386,col 41)",
            "(line 387,col 9)-(line 387,col 48)",
            "(line 388,col 9)-(line 388,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYPlot p1 = new XYPlot();\n        XYPlot p2 = null;\n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 395,
        "end_line": 407,
        "comment": "\n     * Confirm that basic cloning works.\n     ",
        "child_ranges": [
            "(line 396,col 9)-(line 396,col 33)",
            "(line 397,col 9)-(line 397,col 25)",
            "(line 398,col 9)-(line 403,col 9)",
            "(line 404,col 9)-(line 404,col 29)",
            "(line 405,col 9)-(line 405,col 51)",
            "(line 406,col 9)-(line 406,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n        XYPlot p1 = new XYPlot(null, new NumberAxis(\"Domain Axis\"), \n                new NumberAxis(\"Range Axis\"), new StandardXYItemRenderer());\n        p1.setRangeAxis(1, new NumberAxis(\"Range Axis 2\"));\n        p1.setRenderer(1, new XYBarRenderer());\n        XYPlot p2 = null;\n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 412,
        "end_line": 427,
        "comment": "\n     * Tests cloning for a more complex plot.\n     ",
        "child_ranges": [
            "(line 413,col 9)-(line 414,col 76)",
            "(line 415,col 9)-(line 415,col 59)",
            "(line 416,col 9)-(line 416,col 47)",
            "(line 417,col 9)-(line 417,col 25)",
            "(line 418,col 9)-(line 423,col 9)",
            "(line 424,col 9)-(line 424,col 29)",
            "(line 425,col 9)-(line 425,col 51)",
            "(line 426,col 9)-(line 426,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantOrigin()",
        "snippet": "    public void testCloning_QuadrantOrigin() {\n        XYPlot p1 = new XYPlot();\n        Point2D p = new Point2D.Double(1.2, 3.4);\n        p1.setQuadrantOrigin(p);\n        XYPlot p2 = null;\n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        assertTrue(p2.getQuadrantOrigin() != p);\n    }",
        "begin_line": 432,
        "end_line": 447,
        "comment": "\n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
        "child_ranges": [
            "(line 433,col 9)-(line 433,col 33)",
            "(line 434,col 9)-(line 434,col 49)",
            "(line 435,col 9)-(line 435,col 32)",
            "(line 436,col 9)-(line 436,col 25)",
            "(line 437,col 9)-(line 442,col 9)",
            "(line 443,col 9)-(line 443,col 29)",
            "(line 444,col 9)-(line 444,col 51)",
            "(line 445,col 9)-(line 445,col 34)",
            "(line 446,col 9)-(line 446,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantPaint()",
        "snippet": "    public void testCloning_QuadrantPaint() {\n        XYPlot p1 = new XYPlot();\n        p1.setQuadrantPaint(3, new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue));\n        XYPlot p2 = null;\n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        \n        // check for independence\n        p1.setQuadrantPaint(1, Color.red);\n        assertFalse(p1.equals(p2));\n        p2.setQuadrantPaint(1, Color.red);\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 452,
        "end_line": 472,
        "comment": "\n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 33)",
            "(line 454,col 9)-(line 455,col 41)",
            "(line 456,col 9)-(line 456,col 25)",
            "(line 457,col 9)-(line 462,col 9)",
            "(line 463,col 9)-(line 463,col 29)",
            "(line 464,col 9)-(line 464,col 51)",
            "(line 465,col 9)-(line 465,col 34)",
            "(line 468,col 9)-(line 468,col 42)",
            "(line 469,col 9)-(line 469,col 35)",
            "(line 470,col 9)-(line 470,col 42)",
            "(line 471,col 9)-(line 471,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloneIndependence()",
        "snippet": "    public void testCloneIndependence() {\n        XYPlot p1 = new XYPlot(null, new NumberAxis(\"Domain Axis\"), \n                new NumberAxis(\"Range Axis\"), new StandardXYItemRenderer());\n        p1.setDomainAxis(1, new NumberAxis(\"Domain Axis 2\"));\n        p1.setDomainAxisLocation(1, AxisLocation.BOTTOM_OR_LEFT);\n        p1.setRangeAxis(1, new NumberAxis(\"Range Axis 2\"));\n        p1.setRangeAxisLocation(1, AxisLocation.TOP_OR_RIGHT);\n        p1.setRenderer(1, new XYBarRenderer());\n        XYPlot p2 = null;        \n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(p1.equals(p2));\n        \n        p1.getDomainAxis().setLabel(\"Label\");\n        assertFalse(p1.equals(p2));\n        p2.getDomainAxis().setLabel(\"Label\");\n        assertTrue(p1.equals(p2));\n        \n        p1.getDomainAxis(1).setLabel(\"S1\");\n        assertFalse(p1.equals(p2));\n        p2.getDomainAxis(1).setLabel(\"S1\");\n        assertTrue(p1.equals(p2));\n        \n        p1.setDomainAxisLocation(1, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(p1.equals(p2));\n        p2.setDomainAxisLocation(1, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(p1.equals(p2));\n        \n        p1.mapDatasetToDomainAxis(2, 1);\n        assertFalse(p1.equals(p2));\n        p2.mapDatasetToDomainAxis(2, 1);\n        assertTrue(p1.equals(p2));\n\n        p1.getRangeAxis().setLabel(\"Label\");\n        assertFalse(p1.equals(p2));\n        p2.getRangeAxis().setLabel(\"Label\");\n        assertTrue(p1.equals(p2));\n        \n        p1.getRangeAxis(1).setLabel(\"S1\");\n        assertFalse(p1.equals(p2));\n        p2.getRangeAxis(1).setLabel(\"S1\");\n        assertTrue(p1.equals(p2));\n        \n        p1.setRangeAxisLocation(1, AxisLocation.TOP_OR_LEFT);\n        assertFalse(p1.equals(p2));\n        p2.setRangeAxisLocation(1, AxisLocation.TOP_OR_LEFT);\n        assertTrue(p1.equals(p2));\n        \n        p1.mapDatasetToRangeAxis(2, 1);\n        assertFalse(p1.equals(p2));\n        p2.mapDatasetToRangeAxis(2, 1);\n        assertTrue(p1.equals(p2));\n\n        p1.getRenderer().setBaseOutlinePaint(Color.cyan);\n        assertFalse(p1.equals(p2));\n        p2.getRenderer().setBaseOutlinePaint(Color.cyan);\n        assertTrue(p1.equals(p2));\n        \n        p1.getRenderer(1).setBaseOutlinePaint(Color.red);\n        assertFalse(p1.equals(p2));\n        p2.getRenderer(1).setBaseOutlinePaint(Color.red);\n        assertTrue(p1.equals(p2));\n        \n    }",
        "begin_line": 477,
        "end_line": 545,
        "comment": "\n     * Tests the independence of the clones.\n     ",
        "child_ranges": [
            "(line 478,col 9)-(line 479,col 76)",
            "(line 480,col 9)-(line 480,col 61)",
            "(line 481,col 9)-(line 481,col 65)",
            "(line 482,col 9)-(line 482,col 59)",
            "(line 483,col 9)-(line 483,col 62)",
            "(line 484,col 9)-(line 484,col 47)",
            "(line 485,col 9)-(line 485,col 25)",
            "(line 486,col 9)-(line 492,col 9)",
            "(line 493,col 9)-(line 493,col 34)",
            "(line 495,col 9)-(line 495,col 45)",
            "(line 496,col 9)-(line 496,col 35)",
            "(line 497,col 9)-(line 497,col 45)",
            "(line 498,col 9)-(line 498,col 34)",
            "(line 500,col 9)-(line 500,col 43)",
            "(line 501,col 9)-(line 501,col 35)",
            "(line 502,col 9)-(line 502,col 43)",
            "(line 503,col 9)-(line 503,col 34)",
            "(line 505,col 9)-(line 505,col 63)",
            "(line 506,col 9)-(line 506,col 35)",
            "(line 507,col 9)-(line 507,col 63)",
            "(line 508,col 9)-(line 508,col 34)",
            "(line 510,col 9)-(line 510,col 40)",
            "(line 511,col 9)-(line 511,col 35)",
            "(line 512,col 9)-(line 512,col 40)",
            "(line 513,col 9)-(line 513,col 34)",
            "(line 515,col 9)-(line 515,col 44)",
            "(line 516,col 9)-(line 516,col 35)",
            "(line 517,col 9)-(line 517,col 44)",
            "(line 518,col 9)-(line 518,col 34)",
            "(line 520,col 9)-(line 520,col 42)",
            "(line 521,col 9)-(line 521,col 35)",
            "(line 522,col 9)-(line 522,col 42)",
            "(line 523,col 9)-(line 523,col 34)",
            "(line 525,col 9)-(line 525,col 61)",
            "(line 526,col 9)-(line 526,col 35)",
            "(line 527,col 9)-(line 527,col 61)",
            "(line 528,col 9)-(line 528,col 34)",
            "(line 530,col 9)-(line 530,col 39)",
            "(line 531,col 9)-(line 531,col 35)",
            "(line 532,col 9)-(line 532,col 39)",
            "(line 533,col 9)-(line 533,col 34)",
            "(line 535,col 9)-(line 535,col 57)",
            "(line 536,col 9)-(line 536,col 35)",
            "(line 537,col 9)-(line 537,col 57)",
            "(line 538,col 9)-(line 538,col 34)",
            "(line 540,col 9)-(line 540,col 57)",
            "(line 541,col 9)-(line 541,col 35)",
            "(line 542,col 9)-(line 542,col 57)",
            "(line 543,col 9)-(line 543,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetNullRenderer()",
        "snippet": "    public void testSetNullRenderer() {\n        boolean failed = false;\n        try {\n            XYPlot plot = new XYPlot(null, new NumberAxis(\"X\"), \n                    new NumberAxis(\"Y\"), null);\n            plot.setRenderer(null);\n        }\n        catch (Exception e) {\n            failed = true;\n        }\n        assertTrue(!failed);\n    }",
        "begin_line": 551,
        "end_line": 562,
        "comment": "\n     * Setting a null renderer should be allowed, but is generating a null \n     * pointer exception in 0.9.7.\n     ",
        "child_ranges": [
            "(line 552,col 9)-(line 552,col 31)",
            "(line 553,col 9)-(line 560,col 9)",
            "(line 561,col 9)-(line 561,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization1()",
        "snippet": "    public void testSerialization1() {\n\n        XYDataset data = new XYSeriesCollection();\n        NumberAxis domainAxis = new NumberAxis(\"Domain\");\n        NumberAxis rangeAxis = new NumberAxis(\"Range\");\n        StandardXYItemRenderer renderer = new StandardXYItemRenderer();\n        XYPlot p1 = new XYPlot(data, domainAxis, rangeAxis, renderer);\n        XYPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            p2 = (XYPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n\n    }",
        "begin_line": 567,
        "end_line": 593,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 569,col 9)-(line 569,col 50)",
            "(line 570,col 9)-(line 570,col 57)",
            "(line 571,col 9)-(line 571,col 55)",
            "(line 572,col 9)-(line 572,col 71)",
            "(line 573,col 9)-(line 573,col 70)",
            "(line 574,col 9)-(line 574,col 25)",
            "(line 576,col 9)-(line 590,col 9)",
            "(line 591,col 9)-(line 591,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n\n        IntervalXYDataset data1 = createDataset1();\n        XYItemRenderer renderer1 = new XYBarRenderer(0.20);\n        renderer1.setBaseToolTipGenerator(\n                StandardXYToolTipGenerator.getTimeSeriesInstance());\n        XYPlot p1 = new XYPlot(data1, new DateAxis(\"Date\"), null, renderer1);\n        XYPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (XYPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n\n    }",
        "begin_line": 599,
        "end_line": 624,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.  This test \n     * uses a {@link DateAxis} and a {@link StandardXYToolTipGenerator}.\n     ",
        "child_ranges": [
            "(line 601,col 9)-(line 601,col 51)",
            "(line 602,col 9)-(line 602,col 59)",
            "(line 603,col 9)-(line 604,col 68)",
            "(line 605,col 9)-(line 605,col 77)",
            "(line 606,col 9)-(line 606,col 25)",
            "(line 608,col 9)-(line 621,col 9)",
            "(line 622,col 9)-(line 622,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization3()",
        "snippet": "    public void testSerialization3() {\n        \n        XYSeriesCollection dataset = new XYSeriesCollection();\n        JFreeChart chart = ChartFactory.createXYLineChart(\n            \"Test Chart\",\n            \"Domain Axis\",\n            \"Range Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n\n        assertEquals(chart, chart2);\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);\n    }",
        "begin_line": 636,
        "end_line": 678,
        "comment": "\n     * Problem to reproduce a bug in serialization.  The bug (first reported \n     * against the {@link org.jfree.chart.plot.CategoryPlot} class) is a null \n     * pointer exception that occurs when drawing a plot after deserialization.\n     * It is caused by four temporary storage structures (axesAtTop, \n     * axesAtBottom, axesAtLeft and axesAtRight - all initialized as empty \n     * lists in the constructor) not being initialized by the readObject() \n     * method following deserialization.  This test has been written to \n     * reproduce the bug (now fixed).\n     ",
        "child_ranges": [
            "(line 638,col 9)-(line 638,col 62)",
            "(line 639,col 9)-(line 648,col 10)",
            "(line 649,col 9)-(line 649,col 33)",
            "(line 652,col 9)-(line 666,col 9)",
            "(line 668,col 9)-(line 668,col 36)",
            "(line 669,col 9)-(line 669,col 30)",
            "(line 670,col 9)-(line 676,col 9)",
            "(line 677,col 9)-(line 677,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization4()",
        "snippet": "    public void testSerialization4() {\n        \n        XYSeriesCollection dataset = new XYSeriesCollection();\n        JFreeChart chart = ChartFactory.createXYLineChart(\n            \"Test Chart\",\n            \"Domain Axis\",\n            \"Range Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        plot.addDomainMarker(new ValueMarker(1.0), Layer.FOREGROUND);\n        plot.addDomainMarker(new IntervalMarker(2.0, 3.0), Layer.BACKGROUND);\n        plot.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        plot.addRangeMarker(new IntervalMarker(5.0, 6.0), Layer.BACKGROUND);\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n\n        assertEquals(chart, chart2);\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);\n    }",
        "begin_line": 684,
        "end_line": 731,
        "comment": "\n     * A test to reproduce a bug in serialization: the domain and/or range\n     * markers for a plot are not being serialized.\n     ",
        "child_ranges": [
            "(line 686,col 9)-(line 686,col 62)",
            "(line 687,col 9)-(line 696,col 10)",
            "(line 697,col 9)-(line 697,col 47)",
            "(line 698,col 9)-(line 698,col 69)",
            "(line 699,col 9)-(line 699,col 77)",
            "(line 700,col 9)-(line 700,col 68)",
            "(line 701,col 9)-(line 701,col 76)",
            "(line 702,col 9)-(line 702,col 33)",
            "(line 705,col 9)-(line 719,col 9)",
            "(line 721,col 9)-(line 721,col 36)",
            "(line 722,col 9)-(line 722,col 30)",
            "(line 723,col 9)-(line 729,col 9)",
            "(line 730,col 9)-(line 730,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization5()",
        "snippet": "    public void testSerialization5() {\n        XYSeriesCollection dataset1 = new XYSeriesCollection();\n        NumberAxis domainAxis1 = new NumberAxis(\"Domain 1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Range 1\");\n        StandardXYItemRenderer renderer1 = new StandardXYItemRenderer();\n        XYPlot p1 = new XYPlot(dataset1, domainAxis1, rangeAxis1, renderer1);\n        NumberAxis domainAxis2 = new NumberAxis(\"Domain 2\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Range 2\");\n        StandardXYItemRenderer renderer2 = new StandardXYItemRenderer();\n        XYSeriesCollection dataset2 = new XYSeriesCollection();\n        p1.setDataset(1, dataset2);\n        p1.setDomainAxis(1, domainAxis2);\n        p1.setRangeAxis(1, rangeAxis2);\n        p1.setRenderer(1, renderer2);\n        XYPlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            p2 = (XYPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n        \n        // now check that all datasets, renderers and axes are being listened \n        // too...\n        NumberAxis domainAxisA = (NumberAxis) p2.getDomainAxis(0);\n        NumberAxis rangeAxisA = (NumberAxis) p2.getRangeAxis(0);\n        XYSeriesCollection datasetA = (XYSeriesCollection) p2.getDataset(0);\n        StandardXYItemRenderer rendererA \n            = (StandardXYItemRenderer) p2.getRenderer(0);\n        NumberAxis domainAxisB = (NumberAxis) p2.getDomainAxis(1);\n        NumberAxis rangeAxisB = (NumberAxis) p2.getRangeAxis(1);\n        XYSeriesCollection datasetB = (XYSeriesCollection) p2.getDataset(1);\n        StandardXYItemRenderer rendererB \n            = (StandardXYItemRenderer) p2.getRenderer(1);\n        assertTrue(datasetA.hasListener(p2));\n        assertTrue(domainAxisA.hasListener(p2));\n        assertTrue(rangeAxisA.hasListener(p2));\n        assertTrue(rendererA.hasListener(p2));\n        assertTrue(datasetB.hasListener(p2));\n        assertTrue(domainAxisB.hasListener(p2));\n        assertTrue(rangeAxisB.hasListener(p2));\n        assertTrue(rendererB.hasListener(p2));\n    }",
        "begin_line": 738,
        "end_line": 789,
        "comment": "\n     * Tests a bug where the plot is no longer registered as a listener\n     * with the dataset(s) and axes after deserialization.  See patch 1209475\n     * at SourceForge.\n     ",
        "child_ranges": [
            "(line 739,col 9)-(line 739,col 63)",
            "(line 740,col 9)-(line 740,col 60)",
            "(line 741,col 9)-(line 741,col 58)",
            "(line 742,col 9)-(line 742,col 72)",
            "(line 743,col 9)-(line 743,col 77)",
            "(line 744,col 9)-(line 744,col 60)",
            "(line 745,col 9)-(line 745,col 58)",
            "(line 746,col 9)-(line 746,col 72)",
            "(line 747,col 9)-(line 747,col 63)",
            "(line 748,col 9)-(line 748,col 35)",
            "(line 749,col 9)-(line 749,col 41)",
            "(line 750,col 9)-(line 750,col 39)",
            "(line 751,col 9)-(line 751,col 37)",
            "(line 752,col 9)-(line 752,col 25)",
            "(line 753,col 9)-(line 766,col 9)",
            "(line 767,col 9)-(line 767,col 29)",
            "(line 771,col 9)-(line 771,col 66)",
            "(line 772,col 9)-(line 772,col 64)",
            "(line 773,col 9)-(line 773,col 76)",
            "(line 774,col 9)-(line 775,col 57)",
            "(line 776,col 9)-(line 776,col 66)",
            "(line 777,col 9)-(line 777,col 64)",
            "(line 778,col 9)-(line 778,col 76)",
            "(line 779,col 9)-(line 780,col 57)",
            "(line 781,col 9)-(line 781,col 45)",
            "(line 782,col 9)-(line 782,col 48)",
            "(line 783,col 9)-(line 783,col 47)",
            "(line 784,col 9)-(line 784,col 46)",
            "(line 785,col 9)-(line 785,col 45)",
            "(line 786,col 9)-(line 786,col 48)",
            "(line 787,col 9)-(line 787,col 47)",
            "(line 788,col 9)-(line 788,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetRendererForDataset()",
        "snippet": "    public void testGetRendererForDataset() {\n        XYDataset d0 = new XYSeriesCollection();\n        XYDataset d1 = new XYSeriesCollection();\n        XYDataset d2 = new XYSeriesCollection();\n        XYDataset d3 = new XYSeriesCollection();  // not used by plot\n        XYItemRenderer r0 = new XYLineAndShapeRenderer();\n        XYItemRenderer r2 = new XYLineAndShapeRenderer();\n        XYPlot plot = new XYPlot();\n        plot.setDataset(0, d0);\n        plot.setDataset(1, d1);\n        plot.setDataset(2, d2);\n        plot.setRenderer(0, r0);\n        // no renderer 1\n        plot.setRenderer(2, r2);\n        assertEquals(r0, plot.getRendererForDataset(d0));\n        assertEquals(r0, plot.getRendererForDataset(d1));\n        assertEquals(r2, plot.getRendererForDataset(d2));\n        assertEquals(null, plot.getRendererForDataset(d3));\n        assertEquals(null, plot.getRendererForDataset(null));\n    }",
        "begin_line": 794,
        "end_line": 813,
        "comment": "\n     * Some checks for the getRendererForDataset() method.\n     ",
        "child_ranges": [
            "(line 795,col 9)-(line 795,col 48)",
            "(line 796,col 9)-(line 796,col 48)",
            "(line 797,col 9)-(line 797,col 48)",
            "(line 798,col 9)-(line 798,col 48)",
            "(line 799,col 9)-(line 799,col 57)",
            "(line 800,col 9)-(line 800,col 57)",
            "(line 801,col 9)-(line 801,col 35)",
            "(line 802,col 9)-(line 802,col 31)",
            "(line 803,col 9)-(line 803,col 31)",
            "(line 804,col 9)-(line 804,col 31)",
            "(line 805,col 9)-(line 805,col 32)",
            "(line 807,col 9)-(line 807,col 32)",
            "(line 808,col 9)-(line 808,col 57)",
            "(line 809,col 9)-(line 809,col 57)",
            "(line 810,col 9)-(line 810,col 57)",
            "(line 811,col 9)-(line 811,col 59)",
            "(line 812,col 9)-(line 812,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetLegendItems()",
        "snippet": "    public void testGetLegendItems() {\n        // check the case where there is a secondary dataset that doesn't \n        // have a renderer (i.e. falls back to renderer 0)\n        XYDataset d0 = createDataset1();\n        XYDataset d1 = createDataset2();\n        XYItemRenderer r0 = new XYLineAndShapeRenderer();\n        XYPlot plot = new XYPlot();\n        plot.setDataset(0, d0);\n        plot.setDataset(1, d1);\n        plot.setRenderer(0, r0);\n        LegendItemCollection items = plot.getLegendItems();\n        assertEquals(2, items.getItemCount());\n    }",
        "begin_line": 818,
        "end_line": 830,
        "comment": "\n     * Some checks for the getLegendItems() method.\n     ",
        "child_ranges": [
            "(line 821,col 9)-(line 821,col 40)",
            "(line 822,col 9)-(line 822,col 40)",
            "(line 823,col 9)-(line 823,col 57)",
            "(line 824,col 9)-(line 824,col 35)",
            "(line 825,col 9)-(line 825,col 31)",
            "(line 826,col 9)-(line 826,col 31)",
            "(line 827,col 9)-(line 827,col 32)",
            "(line 828,col 9)-(line 828,col 59)",
            "(line 829,col 9)-(line 829,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset1()",
        "snippet": "    private IntervalXYDataset createDataset1() {\n\n        // create dataset 1...\n        TimeSeries series1 = new TimeSeries(\"Series 1\", Day.class);\n        series1.add(new Day(1, MonthConstants.MARCH, 2002), 12353.3);\n        series1.add(new Day(2, MonthConstants.MARCH, 2002), 13734.4);\n        series1.add(new Day(3, MonthConstants.MARCH, 2002), 14525.3);\n        series1.add(new Day(4, MonthConstants.MARCH, 2002), 13984.3);\n        series1.add(new Day(5, MonthConstants.MARCH, 2002), 12999.4);\n        series1.add(new Day(6, MonthConstants.MARCH, 2002), 14274.3);\n        series1.add(new Day(7, MonthConstants.MARCH, 2002), 15943.5);\n        series1.add(new Day(8, MonthConstants.MARCH, 2002), 14845.3);\n        series1.add(new Day(9, MonthConstants.MARCH, 2002), 14645.4);\n        series1.add(new Day(10, MonthConstants.MARCH, 2002), 16234.6);\n        series1.add(new Day(11, MonthConstants.MARCH, 2002), 17232.3);\n        series1.add(new Day(12, MonthConstants.MARCH, 2002), 14232.2);\n        series1.add(new Day(13, MonthConstants.MARCH, 2002), 13102.2);\n        series1.add(new Day(14, MonthConstants.MARCH, 2002), 14230.2);\n        series1.add(new Day(15, MonthConstants.MARCH, 2002), 11235.2);\n\n        TimeSeriesCollection collection = new TimeSeriesCollection(series1);\n        return collection;\n\n    }",
        "begin_line": 837,
        "end_line": 860,
        "comment": "\n     * Creates a sample dataset.\n     *\n     * @return Series 1.\n     ",
        "child_ranges": [
            "(line 840,col 9)-(line 840,col 67)",
            "(line 841,col 9)-(line 841,col 69)",
            "(line 842,col 9)-(line 842,col 69)",
            "(line 843,col 9)-(line 843,col 69)",
            "(line 844,col 9)-(line 844,col 69)",
            "(line 845,col 9)-(line 845,col 69)",
            "(line 846,col 9)-(line 846,col 69)",
            "(line 847,col 9)-(line 847,col 69)",
            "(line 848,col 9)-(line 848,col 69)",
            "(line 849,col 9)-(line 849,col 69)",
            "(line 850,col 9)-(line 850,col 70)",
            "(line 851,col 9)-(line 851,col 70)",
            "(line 852,col 9)-(line 852,col 70)",
            "(line 853,col 9)-(line 853,col 70)",
            "(line 854,col 9)-(line 854,col 70)",
            "(line 855,col 9)-(line 855,col 70)",
            "(line 857,col 9)-(line 857,col 76)",
            "(line 858,col 9)-(line 858,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset2()",
        "snippet": "    private XYDataset createDataset2() {\n        // create dataset 1...\n        XYSeries series = new XYSeries(\"Series 2\");\n        XYSeriesCollection collection = new XYSeriesCollection(series);\n        return collection;\n\n    }",
        "begin_line": 867,
        "end_line": 873,
        "comment": "\n     * Creates a sample dataset.\n     *\n     * @return A sample dataset.\n     ",
        "child_ranges": [
            "(line 869,col 9)-(line 869,col 51)",
            "(line 870,col 9)-(line 870,col 71)",
            "(line 871,col 9)-(line 871,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetRenderer()",
        "snippet": "    public void testSetRenderer() {\n        XYPlot plot = new XYPlot();\n        XYItemRenderer renderer = new XYLineAndShapeRenderer();\n        plot.setRenderer(renderer);\n        // now make a change to the renderer and see if it triggers a plot\n        // change event...\n        MyPlotChangeListener listener = new MyPlotChangeListener();\n        plot.addChangeListener(listener);\n        renderer.setSeriesPaint(0, Color.black);\n        assertTrue(listener.getEvent() != null);\n    }",
        "begin_line": 879,
        "end_line": 889,
        "comment": "\n     * A test for a bug where setting the renderer doesn't register the plot\n     * as a RendererChangeListener.\n     ",
        "child_ranges": [
            "(line 880,col 9)-(line 880,col 35)",
            "(line 881,col 9)-(line 881,col 63)",
            "(line 882,col 9)-(line 882,col 35)",
            "(line 885,col 9)-(line 885,col 67)",
            "(line 886,col 9)-(line 886,col 41)",
            "(line 887,col 9)-(line 887,col 48)",
            "(line 888,col 9)-(line 888,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveAnnotation()",
        "snippet": "    public void testRemoveAnnotation() {\n        XYPlot plot = new XYPlot();\n        XYTextAnnotation a1 = new XYTextAnnotation(\"X\", 1.0, 2.0);\n        XYTextAnnotation a2 = new XYTextAnnotation(\"X\", 3.0, 4.0);\n        XYTextAnnotation a3 = new XYTextAnnotation(\"X\", 1.0, 2.0);\n        plot.addAnnotation(a1);\n        plot.addAnnotation(a2);\n        plot.addAnnotation(a3);\n        plot.removeAnnotation(a2);\n        XYTextAnnotation x = (XYTextAnnotation) plot.getAnnotations().get(0);\n        assertEquals(x, a1);\n        \n        // now remove a3, but since a3.equals(a1), this will in fact remove \n        // a1...\n        assertTrue(a1.equals(a3));\n        plot.removeAnnotation(a3);  // actually removes a1\n        x = (XYTextAnnotation) plot.getAnnotations().get(0);\n        assertEquals(x, a3); \n    }",
        "begin_line": 894,
        "end_line": 912,
        "comment": "\n     * Some checks for the removeAnnotation() method.\n     ",
        "child_ranges": [
            "(line 895,col 9)-(line 895,col 35)",
            "(line 896,col 9)-(line 896,col 66)",
            "(line 897,col 9)-(line 897,col 66)",
            "(line 898,col 9)-(line 898,col 66)",
            "(line 899,col 9)-(line 899,col 31)",
            "(line 900,col 9)-(line 900,col 31)",
            "(line 901,col 9)-(line 901,col 31)",
            "(line 902,col 9)-(line 902,col 34)",
            "(line 903,col 9)-(line 903,col 77)",
            "(line 904,col 9)-(line 904,col 28)",
            "(line 908,col 9)-(line 908,col 34)",
            "(line 909,col 9)-(line 909,col 34)",
            "(line 910,col 9)-(line 910,col 60)",
            "(line 911,col 9)-(line 911,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddDomainMarker()",
        "snippet": "    public void testAddDomainMarker() {\n        XYPlot plot = new XYPlot();\n        Marker m = new ValueMarker(1.0);\n        plot.addDomainMarker(m);\n        List listeners = Arrays.asList(m.getListeners(\n                MarkerChangeListener.class));\n        assertTrue(listeners.contains(plot));\n        plot.clearDomainMarkers();\n        listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class));\n        assertFalse(listeners.contains(plot));\n    }    ",
        "begin_line": 917,
        "end_line": 927,
        "comment": "\n     * Some tests for the addDomainMarker() method(s).\n     ",
        "child_ranges": [
            "(line 918,col 9)-(line 918,col 35)",
            "(line 919,col 9)-(line 919,col 40)",
            "(line 920,col 9)-(line 920,col 32)",
            "(line 921,col 9)-(line 922,col 45)",
            "(line 923,col 9)-(line 923,col 45)",
            "(line 924,col 9)-(line 924,col 34)",
            "(line 925,col 9)-(line 925,col 78)",
            "(line 926,col 9)-(line 926,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddRangeMarker()",
        "snippet": "    public void testAddRangeMarker() {\n        XYPlot plot = new XYPlot();\n        Marker m = new ValueMarker(1.0);\n        plot.addRangeMarker(m);\n        List listeners = Arrays.asList(m.getListeners(\n                MarkerChangeListener.class));\n        assertTrue(listeners.contains(plot));\n        plot.clearRangeMarkers();\n        listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class));\n        assertFalse(listeners.contains(plot));\n    }",
        "begin_line": 932,
        "end_line": 942,
        "comment": "\n     * Some tests for the addRangeMarker() method(s).\n     ",
        "child_ranges": [
            "(line 933,col 9)-(line 933,col 35)",
            "(line 934,col 9)-(line 934,col 40)",
            "(line 935,col 9)-(line 935,col 31)",
            "(line 936,col 9)-(line 937,col 45)",
            "(line 938,col 9)-(line 938,col 45)",
            "(line 939,col 9)-(line 939,col 33)",
            "(line 940,col 9)-(line 940,col 78)",
            "(line 941,col 9)-(line 941,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.test1654215()",
        "snippet": "    public void test1654215() {\n        DefaultXYDataset dataset = new DefaultXYDataset();\n        JFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\",\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        plot.setRenderer(1, new XYLineAndShapeRenderer());\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 948,
        "end_line": 968,
        "comment": "\n     * A test for bug 1654215 (where a renderer is added to the plot without\n     * a corresponding dataset and it throws an exception at drawing time).\n     ",
        "child_ranges": [
            "(line 949,col 9)-(line 949,col 58)",
            "(line 950,col 9)-(line 951,col 71)",
            "(line 952,col 9)-(line 952,col 47)",
            "(line 953,col 9)-(line 953,col 58)",
            "(line 954,col 9)-(line 954,col 32)",
            "(line 955,col 9)-(line 966,col 9)",
            "(line 967,col 9)-(line 967,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawRangeGridlines()",
        "snippet": "    public void testDrawRangeGridlines() {\n        DefaultXYDataset dataset = new DefaultXYDataset();\n        JFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\",\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        plot.setRenderer(null);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 974,
        "end_line": 994,
        "comment": "\n     * A test for drawing range grid lines when there is no primary renderer.\n     * In 1.0.4, this is throwing a NullPointerException.\n     ",
        "child_ranges": [
            "(line 975,col 9)-(line 975,col 58)",
            "(line 976,col 9)-(line 977,col 71)",
            "(line 978,col 9)-(line 978,col 47)",
            "(line 979,col 9)-(line 979,col 31)",
            "(line 980,col 9)-(line 980,col 32)",
            "(line 981,col 9)-(line 992,col 9)",
            "(line 993,col 9)-(line 993,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawSeriesWithZeroItems()",
        "snippet": "    public void testDrawSeriesWithZeroItems() {\n        DefaultXYDataset dataset = new DefaultXYDataset();\n        dataset.addSeries(\"Series 1\", new double[][] {{1.0, 2.0}, {3.0, 4.0}});\n        dataset.addSeries(\"Series 2\", new double[][] {{}, {}});\n        JFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\",\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 1000,
        "end_line": 1020,
        "comment": "\n     * A test for drawing a plot where a series has zero items.  With\n     * JFreeChart 1.0.5+cvs this was throwing an exception at one point.\n     ",
        "child_ranges": [
            "(line 1001,col 9)-(line 1001,col 58)",
            "(line 1002,col 9)-(line 1002,col 79)",
            "(line 1003,col 9)-(line 1003,col 63)",
            "(line 1004,col 9)-(line 1005,col 71)",
            "(line 1006,col 9)-(line 1006,col 32)",
            "(line 1007,col 9)-(line 1018,col 9)",
            "(line 1019,col 9)-(line 1019,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveDomainMarker()",
        "snippet": "    public void testRemoveDomainMarker() {\n    \tXYPlot plot = new XYPlot();\n    \tassertFalse(plot.removeDomainMarker(new ValueMarker(0.5)));\n    }",
        "begin_line": 1026,
        "end_line": 1029,
        "comment": "\n     * Check that removing a marker that isn't assigned to the plot returns \n     * false.\n     ",
        "child_ranges": [
            "(line 1027,col 6)-(line 1027,col 32)",
            "(line 1028,col 6)-(line 1028,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveRangeMarker()",
        "snippet": "    public void testRemoveRangeMarker() {\n    \tXYPlot plot = new XYPlot();\n    \tassertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));\n    }",
        "begin_line": 1035,
        "end_line": 1038,
        "comment": "\n     * Check that removing a marker that isn't assigned to the plot returns \n     * false.\n     ",
        "child_ranges": [
            "(line 1036,col 6)-(line 1036,col 32)",
            "(line 1037,col 6)-(line 1037,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CompassPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CompassPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CompassPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CompassPlotTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CompassPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CompassPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CompassPlotTests.CompassPlotTests(java.lang.String)",
        "snippet": "    public CompassPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CompassPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CompassPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CompassPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        CompassPlot plot1 = new CompassPlot();\n        CompassPlot plot2 = new CompassPlot();\n        assertTrue(plot1.equals(plot2));    \n        \n        // labelType...\n        plot1.setLabelType(CompassPlot.VALUE_LABELS);\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelType(CompassPlot.VALUE_LABELS);\n        assertTrue(plot1.equals(plot2));\n        \n        // labelFont\n        plot1.setLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(plot1.equals(plot2));\n        \n        // drawBorder\n        plot1.setDrawBorder(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawBorder(true);\n        assertTrue(plot1.equals(plot2));\n        \n        // rosePaint\n        plot1.setRosePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRosePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        // roseCenterPaint\n        plot1.setRoseCenterPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRoseCenterPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        // roseHighlightPaint\n        plot1.setRoseHighlightPaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRoseHighlightPaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n    }",
        "begin_line": 87,
        "end_line": 133,
        "comment": "\n     * Test the equals() method.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 46)",
            "(line 89,col 9)-(line 89,col 46)",
            "(line 90,col 9)-(line 90,col 40)",
            "(line 93,col 9)-(line 93,col 53)",
            "(line 94,col 9)-(line 94,col 41)",
            "(line 95,col 9)-(line 95,col 53)",
            "(line 96,col 9)-(line 96,col 40)",
            "(line 99,col 9)-(line 99,col 62)",
            "(line 100,col 9)-(line 100,col 41)",
            "(line 101,col 9)-(line 101,col 62)",
            "(line 102,col 9)-(line 102,col 40)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 106,col 9)-(line 106,col 41)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 108,col 9)-(line 108,col 40)",
            "(line 111,col 9)-(line 112,col 43)",
            "(line 113,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 115,col 43)",
            "(line 116,col 9)-(line 116,col 40)",
            "(line 119,col 9)-(line 120,col 43)",
            "(line 121,col 9)-(line 121,col 41)",
            "(line 122,col 9)-(line 123,col 43)",
            "(line 124,col 9)-(line 124,col 40)",
            "(line 127,col 9)-(line 128,col 43)",
            "(line 129,col 9)-(line 129,col 41)",
            "(line 130,col 9)-(line 131,col 43)",
            "(line 132,col 9)-(line 132,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CompassPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CompassPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CompassPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CompassPlot p1 = new CompassPlot(null);\n        p1.setRosePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.blue));\n        p1.setRoseCenterPaint(new GradientPaint(4.0f, 3.0f, Color.red, 2.0f,\n                1.0f, Color.green));\n        p1.setRoseHighlightPaint(new GradientPaint(4.0f, 3.0f, Color.red, 2.0f,\n                1.0f, Color.green));\n        CompassPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CompassPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(p1, p2);\n\n    }",
        "begin_line": 138,
        "end_line": 165,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 47)",
            "(line 141,col 9)-(line 142,col 29)",
            "(line 143,col 9)-(line 144,col 36)",
            "(line 145,col 9)-(line 146,col 36)",
            "(line 147,col 9)-(line 147,col 30)",
            "(line 149,col 9)-(line 162,col 9)",
            "(line 163,col 9)-(line 163,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CompassPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CompassPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CompassPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CompassPlot p1 = new CompassPlot(new DefaultValueDataset(15.0));\n        CompassPlot p2 = null;\n        try {\n            p2 = (CompassPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 170,
        "end_line": 182,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 72)",
            "(line 172,col 9)-(line 172,col 30)",
            "(line 173,col 9)-(line 178,col 9)",
            "(line 179,col 9)-(line 179,col 29)",
            "(line 180,col 9)-(line 180,col 51)",
            "(line 181,col 9)-(line 181,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.RingPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/RingPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.RingPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(RingPlotTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.RingPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/RingPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.RingPlotTests.RingPlotTests(java.lang.String)",
        "snippet": "    public RingPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.RingPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/RingPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.RingPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        RingPlot plot1 = new RingPlot(null);\n        RingPlot plot2 = new RingPlot(null);\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n                \n        // separatorsVisible\n        plot1.setSeparatorsVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setSeparatorsVisible(false);\n        assertTrue(plot1.equals(plot2));\n        \n        // separatorStroke\n        Stroke s = new BasicStroke(1.1f);\n        plot1.setSeparatorStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setSeparatorStroke(s);\n        assertTrue(plot1.equals(plot2));\n\n        // separatorPaint\n        plot1.setSeparatorPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                2.0f, 1.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setSeparatorPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                2.0f, 1.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n        \n        // innerSeparatorExtension\n        plot1.setInnerSeparatorExtension(0.01);\n        assertFalse(plot1.equals(plot2));\n        plot2.setInnerSeparatorExtension(0.01);\n        assertTrue(plot1.equals(plot2));\n        \n        // outerSeparatorExtension\n        plot1.setOuterSeparatorExtension(0.02);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOuterSeparatorExtension(0.02);\n        assertTrue(plot1.equals(plot2));\n\n        // sectionDepth\n        plot1.setSectionDepth(0.12);\n        assertFalse(plot1.equals(plot2));\n        plot2.setSectionDepth(0.12);\n        assertTrue(plot1.equals(plot2));\n        \n    }",
        "begin_line": 87,
        "end_line": 133,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 44)",
            "(line 90,col 9)-(line 90,col 44)",
            "(line 91,col 9)-(line 91,col 40)",
            "(line 92,col 9)-(line 92,col 40)",
            "(line 95,col 9)-(line 95,col 42)",
            "(line 96,col 9)-(line 96,col 41)",
            "(line 97,col 9)-(line 97,col 42)",
            "(line 98,col 9)-(line 98,col 40)",
            "(line 101,col 9)-(line 101,col 41)",
            "(line 102,col 9)-(line 102,col 36)",
            "(line 103,col 9)-(line 103,col 41)",
            "(line 104,col 9)-(line 104,col 36)",
            "(line 105,col 9)-(line 105,col 40)",
            "(line 108,col 9)-(line 109,col 41)",
            "(line 110,col 9)-(line 110,col 41)",
            "(line 111,col 9)-(line 112,col 41)",
            "(line 113,col 9)-(line 113,col 40)",
            "(line 116,col 9)-(line 116,col 47)",
            "(line 117,col 9)-(line 117,col 41)",
            "(line 118,col 9)-(line 118,col 47)",
            "(line 119,col 9)-(line 119,col 40)",
            "(line 122,col 9)-(line 122,col 47)",
            "(line 123,col 9)-(line 123,col 41)",
            "(line 124,col 9)-(line 124,col 47)",
            "(line 125,col 9)-(line 125,col 40)",
            "(line 128,col 9)-(line 128,col 36)",
            "(line 129,col 9)-(line 129,col 41)",
            "(line 130,col 9)-(line 130,col 36)",
            "(line 131,col 9)-(line 131,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.RingPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/RingPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.RingPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        RingPlot p1 = new RingPlot(null);\n        GradientPaint gp = new GradientPaint(1.0f, 2.0f, Color.yellow,\n                3.0f, 4.0f, Color.red);\n        p1.setSeparatorPaint(gp);\n        RingPlot p2 = null;\n        try {\n            p2 = (RingPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 138,
        "end_line": 153,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 41)",
            "(line 140,col 9)-(line 141,col 39)",
            "(line 142,col 9)-(line 142,col 33)",
            "(line 143,col 9)-(line 143,col 27)",
            "(line 144,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 150,col 29)",
            "(line 151,col 9)-(line 151,col 51)",
            "(line 152,col 9)-(line 152,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.RingPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/RingPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.RingPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        RingPlot p1 = new RingPlot(null);\n        GradientPaint gp = new GradientPaint(1.0f, 2.0f, Color.yellow,\n                3.0f, 4.0f, Color.red);\n        p1.setSeparatorPaint(gp);\n        RingPlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (RingPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(p1, p2);\n    }",
        "begin_line": 158,
        "end_line": 180,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 41)",
            "(line 161,col 9)-(line 162,col 39)",
            "(line 163,col 9)-(line 163,col 33)",
            "(line 164,col 9)-(line 164,col 27)",
            "(line 165,col 9)-(line 178,col 9)",
            "(line 179,col 9)-(line 179,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PieLabelRecordTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PieLabelRecordTests.java",
        "signature": "org.jfree.chart.plot.junit.PieLabelRecordTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PieLabelRecordTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PieLabelRecordTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PieLabelRecordTests.java",
        "signature": "org.jfree.chart.plot.junit.PieLabelRecordTests.PieLabelRecordTests(java.lang.String)",
        "snippet": "    public PieLabelRecordTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PieLabelRecordTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PieLabelRecordTests.java",
        "signature": "org.jfree.chart.plot.junit.PieLabelRecordTests.testEquals()",
        "snippet": "    public void testEquals() {\n        PieLabelRecord p1 = new PieLabelRecord(\"A\", 1.0, 2.0, new TextBox(\"B\"), \n                3.0, 4.0, 5.0);\n        PieLabelRecord p2 = new PieLabelRecord(\"A\", 1.0, 2.0, new TextBox(\"B\"), \n                3.0, 4.0, 5.0);\n        assertTrue(p1.equals(p2));\n        assertTrue(p2.equals(p1));\n        \n        p1 = new PieLabelRecord(\"B\", 1.0, 2.0, new TextBox(\"B\"), 3.0, 4.0, 5.0);\n        assertFalse(p1.equals(p2));\n        p2 = new PieLabelRecord(\"B\", 1.0, 2.0, new TextBox(\"B\"), 3.0, 4.0, 5.0);\n        assertTrue(p1.equals(p2));\n\n        p1 = new PieLabelRecord(\"B\", 1.1, 2.0, new TextBox(\"B\"), 3.0, 4.0, 5.0);\n        assertFalse(p1.equals(p2));\n        p2 = new PieLabelRecord(\"B\", 1.1, 2.0, new TextBox(\"B\"), 3.0, 4.0, 5.0);\n        assertTrue(p1.equals(p2));\n\n        p1 = new PieLabelRecord(\"B\", 1.1, 2.2, new TextBox(\"B\"), 3.0, 4.0, 5.0);\n        assertFalse(p1.equals(p2));\n        p2 = new PieLabelRecord(\"B\", 1.1, 2.2, new TextBox(\"B\"), 3.0, 4.0, 5.0);\n        assertTrue(p1.equals(p2));\n\n        p1 = new PieLabelRecord(\"B\", 1.1, 2.2, new TextBox(\"C\"), 3.0, 4.0, 5.0);\n        assertFalse(p1.equals(p2));\n        p2 = new PieLabelRecord(\"B\", 1.1, 2.2, new TextBox(\"C\"), 3.0, 4.0, 5.0);\n        assertTrue(p1.equals(p2));\n\n        p1 = new PieLabelRecord(\"B\", 1.1, 2.2, new TextBox(\"C\"), 3.3, 4.0, 5.0);\n        assertFalse(p1.equals(p2));\n        p2 = new PieLabelRecord(\"B\", 1.1, 2.2, new TextBox(\"C\"), 3.3, 4.0, 5.0);\n        assertTrue(p1.equals(p2));\n\n        p1 = new PieLabelRecord(\"B\", 1.1, 2.2, new TextBox(\"C\"), 3.3, 4.4, 5.0);\n        assertFalse(p1.equals(p2));\n        p2 = new PieLabelRecord(\"B\", 1.1, 2.2, new TextBox(\"C\"), 3.3, 4.4, 5.0);\n        assertTrue(p1.equals(p2));\n\n        p1 = new PieLabelRecord(\"B\", 1.1, 2.2, new TextBox(\"C\"), 3.3, 4.4, 5.5);\n        assertFalse(p1.equals(p2));\n        p2 = new PieLabelRecord(\"B\", 1.1, 2.2, new TextBox(\"C\"), 3.3, 4.4, 5.5);\n        assertTrue(p1.equals(p2));\n    \n    }",
        "begin_line": 84,
        "end_line": 127,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 86,col 31)",
            "(line 87,col 9)-(line 88,col 31)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 92,col 9)-(line 92,col 80)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 94,col 80)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 97,col 9)-(line 97,col 80)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 80)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 102,col 80)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 80)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 107,col 9)-(line 107,col 80)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 80)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 112,col 9)-(line 112,col 80)",
            "(line 113,col 9)-(line 113,col 35)",
            "(line 114,col 9)-(line 114,col 80)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 117,col 9)-(line 117,col 80)",
            "(line 118,col 9)-(line 118,col 35)",
            "(line 119,col 9)-(line 119,col 80)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 122,col 9)-(line 122,col 80)",
            "(line 123,col 9)-(line 123,col 35)",
            "(line 124,col 9)-(line 124,col 80)",
            "(line 125,col 9)-(line 125,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PieLabelRecordTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PieLabelRecordTests.java",
        "signature": "org.jfree.chart.plot.junit.PieLabelRecordTests.testCloning()",
        "snippet": "    public void testCloning() {\n        PieLabelRecord p1 = new PieLabelRecord(\"A\", 1.0, 2.0, new TextBox(\"B\"), \n                3.0, 4.0, 5.0);\n        assertFalse(p1 instanceof Cloneable);\n    }",
        "begin_line": 132,
        "end_line": 136,
        "comment": "\n     * Confirm that cloning is not implemented.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 134,col 31)",
            "(line 135,col 9)-(line 135,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PieLabelRecordTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PieLabelRecordTests.java",
        "signature": "org.jfree.chart.plot.junit.PieLabelRecordTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        PieLabelRecord p1 = new PieLabelRecord(\"A\", 1.0, 2.0, new TextBox(\"B\"), \n                3.0, 4.0, 5.0);\n        PieLabelRecord p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (PieLabelRecord) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        boolean b = p1.equals(p2);\n        assertTrue(b);\n\n    }",
        "begin_line": 141,
        "end_line": 163,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 143,col 9)-(line 144,col 31)",
            "(line 145,col 9)-(line 145,col 33)",
            "(line 146,col 9)-(line 159,col 9)",
            "(line 160,col 9)-(line 160,col 34)",
            "(line 161,col 9)-(line 161,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.DefaultDrawingSupplierTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/DefaultDrawingSupplierTests.java",
        "signature": "org.jfree.chart.plot.junit.DefaultDrawingSupplierTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultDrawingSupplierTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.DefaultDrawingSupplierTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/DefaultDrawingSupplierTests.java",
        "signature": "org.jfree.chart.plot.junit.DefaultDrawingSupplierTests.DefaultDrawingSupplierTests(java.lang.String)",
        "snippet": "    public DefaultDrawingSupplierTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.DefaultDrawingSupplierTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/DefaultDrawingSupplierTests.java",
        "signature": "org.jfree.chart.plot.junit.DefaultDrawingSupplierTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultDrawingSupplier r1 = new DefaultDrawingSupplier();\n        DefaultDrawingSupplier r2 = new DefaultDrawingSupplier();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        // set up some objects...\n        Paint[] ps1A = new Paint[] {Color.red, Color.blue};\n        Paint[] ps2A = new Paint[] {Color.green, Color.yellow, Color.white};\n        Paint[] ops1A = new Paint[] {Color.lightGray, Color.blue};\n        Paint[] ops2A = new Paint[] {Color.black, Color.yellow, Color.cyan};\n        Stroke[] ss1A = new Stroke[] {new BasicStroke(1.1f)};\n        Stroke[] ss2A \n            = new Stroke[] {new BasicStroke(2.2f), new BasicStroke(3.3f)};\n        Stroke[] oss1A = new Stroke[] {new BasicStroke(4.4f)};\n        Stroke[] oss2A \n            = new Stroke[] {new BasicStroke(5.5f), new BasicStroke(6.6f)};\n        Shape[] shapes1A = new Shape[] {\n            new Rectangle2D.Double(1.0, 1.0, 1.0, 1.0)\n        };\n        Shape[] shapes2A = new Shape[] {\n            new Rectangle2D.Double(2.0, 2.0, 2.0, 2.0),\n            new Rectangle2D.Double(2.0, 2.0, 2.0, 2.0)\n        };\n        Paint[] ps1B = new Paint[] {Color.red, Color.blue};\n        Paint[] ps2B = new Paint[] {Color.green, Color.yellow, Color.white};\n        Paint[] ops1B = new Paint[] {Color.lightGray, Color.blue};\n        Paint[] ops2B = new Paint[] {Color.black, Color.yellow, Color.cyan};\n        Stroke[] ss1B = new Stroke[] {new BasicStroke(1.1f)};\n        Stroke[] ss2B \n            = new Stroke[] {new BasicStroke(2.2f), new BasicStroke(3.3f)};\n        Stroke[] oss1B = new Stroke[] {new BasicStroke(4.4f)};\n        Stroke[] oss2B \n            = new Stroke[] {new BasicStroke(5.5f), new BasicStroke(6.6f)};\n        Shape[] shapes1B = new Shape[] {\n            new Rectangle2D.Double(1.0, 1.0, 1.0, 1.0)\n        };\n        Shape[] shapes2B = new Shape[] {\n            new Rectangle2D.Double(2.0, 2.0, 2.0, 2.0),\n            new Rectangle2D.Double(2.0, 2.0, 2.0, 2.0)\n        };\n        \n        r1 = new DefaultDrawingSupplier(ps1A, ops1A, ss1A, oss1A, shapes1A);\n        r2 = new DefaultDrawingSupplier(ps1B, ops1B, ss1B, oss1B, shapes1B);\n        assertTrue(r1.equals(r2));\n        \n        // paint sequence\n        r1 = new DefaultDrawingSupplier(ps2A, ops1A, ss1A, oss1A, shapes1A);\n        assertFalse(r1.equals(r2));\n        r2 = new DefaultDrawingSupplier(ps2B, ops1B, ss1B, oss1B, shapes1B);\n        assertTrue(r1.equals(r2));\n        // outline paint sequence\n        r1 = new DefaultDrawingSupplier(ps2A, ops2A, ss1A, oss1A, shapes1A);\n        assertFalse(r1.equals(r2));\n        r2 = new DefaultDrawingSupplier(ps2B, ops2B, ss1B, oss1B, shapes1B);\n        assertTrue(r1.equals(r2));\n        // stroke sequence\n        r1 = new DefaultDrawingSupplier(ps2A, ops2A, ss2A, oss1A, shapes1A);\n        assertFalse(r1.equals(r2));\n        r2 = new DefaultDrawingSupplier(ps2B, ops2B, ss2B, oss1B, shapes1B);\n        assertTrue(r1.equals(r2));\n        // outline stroke sequence\n        r1 = new DefaultDrawingSupplier(ps2A, ops2A, ss2A, oss2A, shapes1A);\n        assertFalse(r1.equals(r2));\n        r2 = new DefaultDrawingSupplier(ps2B, ops2B, ss2B, oss2B, shapes1B);\n        assertTrue(r1.equals(r2));\n        // shape sequence\n        r1 = new DefaultDrawingSupplier(ps2A, ops2A, ss2A, oss2A, shapes2A);\n        assertFalse(r1.equals(r2));\n        r2 = new DefaultDrawingSupplier(ps2B, ops2B, ss2B, oss2B, shapes2B);\n        assertTrue(r1.equals(r2));\n        \n        // paint index\n        r1.getNextPaint();\n        assertFalse(r1.equals(r2));\n        r2.getNextPaint();\n        assertTrue(r1.equals(r2));\n        \n        // outline paint index\n        r1.getNextOutlinePaint();\n        assertFalse(r1.equals(r2));\n        r2.getNextOutlinePaint();\n        assertTrue(r1.equals(r2));\n        \n        // stroke index\n        r1.getNextStroke();\n        assertFalse(r1.equals(r2));\n        r2.getNextStroke();\n        assertTrue(r1.equals(r2));\n        \n        // outline stroke index\n        r1.getNextOutlineStroke();\n        assertFalse(r1.equals(r2));\n        r2.getNextOutlineStroke();\n        assertTrue(r1.equals(r2));\n        \n        // shape index\n        r1.getNextShape();\n        assertFalse(r1.equals(r2));\n        r2.getNextShape();\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 88,
        "end_line": 189,
        "comment": "\n     * Check that the equals() method can distinguish all required fields.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 65)",
            "(line 90,col 9)-(line 90,col 65)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 95,col 9)-(line 95,col 59)",
            "(line 96,col 9)-(line 96,col 76)",
            "(line 97,col 9)-(line 97,col 66)",
            "(line 98,col 9)-(line 98,col 76)",
            "(line 99,col 9)-(line 99,col 61)",
            "(line 100,col 9)-(line 101,col 74)",
            "(line 102,col 9)-(line 102,col 62)",
            "(line 103,col 9)-(line 104,col 74)",
            "(line 105,col 9)-(line 107,col 10)",
            "(line 108,col 9)-(line 111,col 10)",
            "(line 112,col 9)-(line 112,col 59)",
            "(line 113,col 9)-(line 113,col 76)",
            "(line 114,col 9)-(line 114,col 66)",
            "(line 115,col 9)-(line 115,col 76)",
            "(line 116,col 9)-(line 116,col 61)",
            "(line 117,col 9)-(line 118,col 74)",
            "(line 119,col 9)-(line 119,col 62)",
            "(line 120,col 9)-(line 121,col 74)",
            "(line 122,col 9)-(line 124,col 10)",
            "(line 125,col 9)-(line 128,col 10)",
            "(line 130,col 9)-(line 130,col 76)",
            "(line 131,col 9)-(line 131,col 76)",
            "(line 132,col 9)-(line 132,col 34)",
            "(line 135,col 9)-(line 135,col 76)",
            "(line 136,col 9)-(line 136,col 35)",
            "(line 137,col 9)-(line 137,col 76)",
            "(line 138,col 9)-(line 138,col 34)",
            "(line 140,col 9)-(line 140,col 76)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 76)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 145,col 9)-(line 145,col 76)",
            "(line 146,col 9)-(line 146,col 35)",
            "(line 147,col 9)-(line 147,col 76)",
            "(line 148,col 9)-(line 148,col 34)",
            "(line 150,col 9)-(line 150,col 76)",
            "(line 151,col 9)-(line 151,col 35)",
            "(line 152,col 9)-(line 152,col 76)",
            "(line 153,col 9)-(line 153,col 34)",
            "(line 155,col 9)-(line 155,col 76)",
            "(line 156,col 9)-(line 156,col 35)",
            "(line 157,col 9)-(line 157,col 76)",
            "(line 158,col 9)-(line 158,col 34)",
            "(line 161,col 9)-(line 161,col 26)",
            "(line 162,col 9)-(line 162,col 35)",
            "(line 163,col 9)-(line 163,col 26)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 167,col 9)-(line 167,col 33)",
            "(line 168,col 9)-(line 168,col 35)",
            "(line 169,col 9)-(line 169,col 33)",
            "(line 170,col 9)-(line 170,col 34)",
            "(line 173,col 9)-(line 173,col 27)",
            "(line 174,col 9)-(line 174,col 35)",
            "(line 175,col 9)-(line 175,col 27)",
            "(line 176,col 9)-(line 176,col 34)",
            "(line 179,col 9)-(line 179,col 34)",
            "(line 180,col 9)-(line 180,col 35)",
            "(line 181,col 9)-(line 181,col 34)",
            "(line 182,col 9)-(line 182,col 34)",
            "(line 185,col 9)-(line 185,col 26)",
            "(line 186,col 9)-(line 186,col 35)",
            "(line 187,col 9)-(line 187,col 26)",
            "(line 188,col 9)-(line 188,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.DefaultDrawingSupplierTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/DefaultDrawingSupplierTests.java",
        "signature": "org.jfree.chart.plot.junit.DefaultDrawingSupplierTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultDrawingSupplier r1 = new DefaultDrawingSupplier();\n        DefaultDrawingSupplier r2 = null;\n        try {\n            r2 = (DefaultDrawingSupplier) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 194,
        "end_line": 207,
        "comment": "\n     * Some basic checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 65)",
            "(line 196,col 9)-(line 196,col 41)",
            "(line 197,col 9)-(line 203,col 9)",
            "(line 204,col 9)-(line 204,col 29)",
            "(line 205,col 9)-(line 205,col 51)",
            "(line 206,col 9)-(line 206,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.DefaultDrawingSupplierTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/DefaultDrawingSupplierTests.java",
        "signature": "org.jfree.chart.plot.junit.DefaultDrawingSupplierTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultDrawingSupplier r1 = new DefaultDrawingSupplier();\n        DefaultDrawingSupplier r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (DefaultDrawingSupplier) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 212,
        "end_line": 234,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 65)",
            "(line 215,col 9)-(line 215,col 41)",
            "(line 217,col 9)-(line 231,col 9)",
            "(line 232,col 9)-(line 232,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotOrientationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotOrientationTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotOrientationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PlotOrientationTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotOrientationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotOrientationTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotOrientationTests.PlotOrientationTests(java.lang.String)",
        "snippet": "    public PlotOrientationTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotOrientationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotOrientationTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotOrientationTests.testEquals()",
        "snippet": "    public void testEquals() {\n        assertEquals(PlotOrientation.HORIZONTAL, PlotOrientation.HORIZONTAL);\n        assertEquals(PlotOrientation.VERTICAL, PlotOrientation.VERTICAL);\n        assertFalse(\n            PlotOrientation.HORIZONTAL.equals(PlotOrientation.VERTICAL)\n        );\n        assertFalse(\n            PlotOrientation.VERTICAL.equals(PlotOrientation.HORIZONTAL)\n        );\n    }",
        "begin_line": 83,
        "end_line": 92,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 77)",
            "(line 85,col 9)-(line 85,col 73)",
            "(line 86,col 9)-(line 88,col 10)",
            "(line 89,col 9)-(line 91,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotOrientationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotOrientationTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotOrientationTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        PlotOrientation orientation1 = PlotOrientation.HORIZONTAL;\n        PlotOrientation orientation2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(orientation1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            orientation2 = (PlotOrientation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(orientation1, orientation2);\n        boolean same = orientation1 == orientation2;\n        assertEquals(true, same);        \n    }",
        "begin_line": 97,
        "end_line": 120,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 66)",
            "(line 100,col 9)-(line 100,col 44)",
            "(line 102,col 9)-(line 116,col 9)",
            "(line 117,col 9)-(line 117,col 49)",
            "(line 118,col 9)-(line 118,col 52)",
            "(line 119,col 9)-(line 119,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.FastScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/FastScatterPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.FastScatterPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(FastScatterPlotTests.class);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.FastScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/FastScatterPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.FastScatterPlotTests.FastScatterPlotTests(java.lang.String)",
        "snippet": "    public FastScatterPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.FastScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/FastScatterPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.FastScatterPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        FastScatterPlot plot1 = new FastScatterPlot();\n        FastScatterPlot plot2 = new FastScatterPlot();\n        assertTrue(plot1.equals(plot2));    \n        assertTrue(plot2.equals(plot1));\n        \n        plot1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setDomainGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        Stroke s = new BasicStroke(1.5f);\n        plot1.setDomainGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        Stroke s2 = new BasicStroke(1.5f);\n        plot1.setRangeGridlineStroke(s2);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(s2);\n        assertTrue(plot1.equals(plot2));\n        \n    }",
        "begin_line": 89,
        "end_line": 139,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 54)",
            "(line 92,col 9)-(line 92,col 54)",
            "(line 93,col 9)-(line 93,col 40)",
            "(line 94,col 9)-(line 94,col 40)",
            "(line 96,col 9)-(line 97,col 43)",
            "(line 98,col 9)-(line 98,col 41)",
            "(line 99,col 9)-(line 100,col 43)",
            "(line 101,col 9)-(line 101,col 40)",
            "(line 103,col 9)-(line 103,col 47)",
            "(line 104,col 9)-(line 104,col 41)",
            "(line 105,col 9)-(line 105,col 47)",
            "(line 106,col 9)-(line 106,col 40)",
            "(line 108,col 9)-(line 109,col 43)",
            "(line 110,col 9)-(line 110,col 41)",
            "(line 111,col 9)-(line 112,col 43)",
            "(line 113,col 9)-(line 113,col 40)",
            "(line 115,col 9)-(line 115,col 41)",
            "(line 116,col 9)-(line 116,col 41)",
            "(line 117,col 9)-(line 117,col 41)",
            "(line 118,col 9)-(line 118,col 41)",
            "(line 119,col 9)-(line 119,col 40)",
            "(line 121,col 9)-(line 121,col 46)",
            "(line 122,col 9)-(line 122,col 41)",
            "(line 123,col 9)-(line 123,col 46)",
            "(line 124,col 9)-(line 124,col 40)",
            "(line 126,col 9)-(line 127,col 43)",
            "(line 128,col 9)-(line 128,col 41)",
            "(line 129,col 9)-(line 130,col 43)",
            "(line 131,col 9)-(line 131,col 40)",
            "(line 133,col 9)-(line 133,col 42)",
            "(line 134,col 9)-(line 134,col 41)",
            "(line 135,col 9)-(line 135,col 41)",
            "(line 136,col 9)-(line 136,col 41)",
            "(line 137,col 9)-(line 137,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.FastScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/FastScatterPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.FastScatterPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        FastScatterPlot p1 = new FastScatterPlot();\n        FastScatterPlot p2 = null;\n        try {\n            p2 = (FastScatterPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 144,
        "end_line": 157,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 51)",
            "(line 146,col 9)-(line 146,col 34)",
            "(line 147,col 9)-(line 153,col 9)",
            "(line 154,col 9)-(line 154,col 29)",
            "(line 155,col 9)-(line 155,col 51)",
            "(line 156,col 9)-(line 156,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.FastScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/FastScatterPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.FastScatterPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        float[][] data = createData();\n\n        ValueAxis domainAxis = new NumberAxis(\"X\");\n        ValueAxis rangeAxis = new NumberAxis(\"Y\");\n        FastScatterPlot p1 = new FastScatterPlot(data, domainAxis, rangeAxis);\n        FastScatterPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            p2 = (FastScatterPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(p1, p2);\n\n    }",
        "begin_line": 162,
        "end_line": 188,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 38)",
            "(line 166,col 9)-(line 166,col 51)",
            "(line 167,col 9)-(line 167,col 50)",
            "(line 168,col 9)-(line 168,col 78)",
            "(line 169,col 9)-(line 169,col 34)",
            "(line 171,col 9)-(line 185,col 9)",
            "(line 186,col 9)-(line 186,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.FastScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/FastScatterPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.FastScatterPlotTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            float[][] data = createData();\n\n            ValueAxis domainAxis = new NumberAxis(\"X\");\n            ValueAxis rangeAxis = new NumberAxis(\"Y\");\n            FastScatterPlot plot = new FastScatterPlot(data, domainAxis, \n                    rangeAxis);\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 194,
        "end_line": 213,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown.\n     ",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 32)",
            "(line 196,col 9)-(line 211,col 9)",
            "(line 212,col 9)-(line 212,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.FastScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/FastScatterPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.FastScatterPlotTests.createData()",
        "snippet": "    private float[][] createData() {\n\n        float[][] result = new float[2][1000];\n        for (int i = 0; i < result[0].length; i++) {\n\n            float x = (float) i + 100;\n            result[0][i] = x;\n            result[1][i] = 100 + (float) Math.random() * 1000;\n        }\n        return result;\n\n    }",
        "begin_line": 220,
        "end_line": 231,
        "comment": "\n     * Populates the data array with random values.\n     *\n     * @return Random data.\n     ",
        "child_ranges": [
            "(line 222,col 9)-(line 222,col 46)",
            "(line 223,col 9)-(line 228,col 9)",
            "(line 229,col 9)-(line 229,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MyPlotChangeListener",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MyPlotChangeListener.java",
        "signature": "org.jfree.chart.plot.junit.MyPlotChangeListener.MyPlotChangeListener()",
        "snippet": "    public MyPlotChangeListener() {\n        this.event = null;\n    }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "\n     * Creates a new instance.\n     ",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MyPlotChangeListener",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MyPlotChangeListener.java",
        "signature": "org.jfree.chart.plot.junit.MyPlotChangeListener.getEvent()",
        "snippet": "    public PlotChangeEvent getEvent() {\n        return this.event;   \n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Returns the last event received by the listener.\n     * \n     * @return The event.\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MyPlotChangeListener",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MyPlotChangeListener.java",
        "signature": "org.jfree.chart.plot.junit.MyPlotChangeListener.setEvent(org.jfree.chart.event.PlotChangeEvent)",
        "snippet": "    public void setEvent(PlotChangeEvent e) {\n        this.event = e;   \n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Sets the event for the listener.\n     * \n     * @param e  the event.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 23)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MyPlotChangeListener",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MyPlotChangeListener.java",
        "signature": "org.jfree.chart.plot.junit.MyPlotChangeListener.plotChanged(org.jfree.chart.event.PlotChangeEvent)",
        "snippet": "    public void plotChanged(PlotChangeEvent e) {\n        this.event = e;\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Receives notification of a plot change event.\n     * \n     * @param e  the event.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 23)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PiePlotTests.class);\n    }",
        "begin_line": 92,
        "end_line": 94,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.PiePlotTests(java.lang.String)",
        "snippet": "    public PiePlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        PiePlot plot1 = new PiePlot();\n        PiePlot plot2 = new PiePlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n                \n        // pieIndex...\n        plot1.setPieIndex(99);\n        assertFalse(plot1.equals(plot2));\n        plot2.setPieIndex(99);\n        assertTrue(plot1.equals(plot2));\n        \n        // interiorGap...\n        plot1.setInteriorGap(0.15);\n        assertFalse(plot1.equals(plot2));\n        plot2.setInteriorGap(0.15);\n        assertTrue(plot1.equals(plot2));\n\n        // circular\n        plot1.setCircular(!plot1.isCircular());\n        assertFalse(plot1.equals(plot2));\n        plot2.setCircular(false);\n        assertTrue(plot1.equals(plot2));\n        \n        // startAngle\n        plot1.setStartAngle(Math.PI);\n        assertFalse(plot1.equals(plot2));\n        plot2.setStartAngle(Math.PI);\n        assertTrue(plot1.equals(plot2));\n        \n        // direction\n        plot1.setDirection(Rotation.ANTICLOCKWISE);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDirection(Rotation.ANTICLOCKWISE);\n        assertTrue(plot1.equals(plot2));\n        \n        // ignoreZeroValues\n        plot1.setIgnoreZeroValues(true);\n        plot2.setIgnoreZeroValues(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setIgnoreZeroValues(true);\n        assertTrue(plot1.equals(plot2));\n        \n        // ignoreNullValues\n        plot1.setIgnoreNullValues(true);\n        plot2.setIgnoreNullValues(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setIgnoreNullValues(true);\n        assertTrue(plot1.equals(plot2));\n        \n        // sectionPaintMap\n        plot1.setSectionPaint(\"A\", new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setSectionPaint(\"A\", new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n        \n        // baseSectionPaint\n        plot1.setBaseSectionPaint(new GradientPaint(1.0f, 2.0f, Color.black, \n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setBaseSectionPaint(new GradientPaint(1.0f, 2.0f, Color.black, \n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n        \n        // sectionOutlinesVisible\n        plot1.setSectionOutlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setSectionOutlinesVisible(false);\n        assertTrue(plot1.equals(plot2)); \n                \n        // sectionOutlinePaintList\n        plot1.setSectionOutlinePaint(\"A\", new GradientPaint(1.0f, 2.0f, \n                Color.green, 3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setSectionOutlinePaint(\"A\", new GradientPaint(1.0f, 2.0f, \n                Color.green, 3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n        \n        // baseSectionOutlinePaint\n        plot1.setBaseSectionOutlinePaint(new GradientPaint(1.0f, 2.0f, \n                Color.gray, 3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setBaseSectionOutlinePaint(new GradientPaint(1.0f, 2.0f, \n                Color.gray, 3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n        \n        // sectionOutlineStrokeList\n        plot1.setSectionOutlineStroke(\"A\", new BasicStroke(1.0f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setSectionOutlineStroke(\"A\", new BasicStroke(1.0f));\n        assertTrue(plot1.equals(plot2));\n        \n        // baseSectionOutlineStroke\n        plot1.setBaseSectionOutlineStroke(new BasicStroke(1.0f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setBaseSectionOutlineStroke(new BasicStroke(1.0f));\n        assertTrue(plot1.equals(plot2));\n        \n        // shadowPaint\n        plot1.setShadowPaint(new GradientPaint(1.0f, 2.0f, Color.orange, \n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowPaint(new GradientPaint(1.0f, 2.0f, Color.orange, \n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n\n        // shadowXOffset\n        plot1.setShadowXOffset(4.4);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowXOffset(4.4);\n        assertTrue(plot1.equals(plot2));\n\n        // shadowYOffset\n        plot1.setShadowYOffset(4.4);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowYOffset(4.4);\n        assertTrue(plot1.equals(plot2));\n\n        // labelFont\n        plot1.setLabelFont(new Font(\"Serif\", Font.PLAIN, 18));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelFont(new Font(\"Serif\", Font.PLAIN, 18));\n        assertTrue(plot1.equals(plot2));\n       \n        // labelPaint\n        plot1.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.darkGray, \n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.darkGray, \n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n       \n        // labelBackgroundPaint\n        plot1.setLabelBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n        \n        // labelOutlinePaint\n        plot1.setLabelOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n        \n        // labelOutlineStroke\n        Stroke s = new BasicStroke(1.1f);\n        plot1.setLabelOutlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelOutlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n        \n        // labelShadowPaint\n        plot1.setLabelShadowPaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelShadowPaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n        \n        // explodePercentages\n        plot1.setExplodePercent(\"A\", 0.33);\n        assertFalse(plot1.equals(plot2));\n        plot2.setExplodePercent(\"A\", 0.33);\n        assertTrue(plot1.equals(plot2));\n        \n        // labelGenerator\n        plot1.setLabelGenerator(new StandardPieSectionLabelGenerator(\n                \"{2}{1}{0}\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelGenerator(new StandardPieSectionLabelGenerator(\n                \"{2}{1}{0}\"));\n        assertTrue(plot1.equals(plot2));\n       \n        // labelFont\n        Font f = new Font(\"SansSerif\", Font.PLAIN, 20);\n        plot1.setLabelFont(f);\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelFont(f);\n        assertTrue(plot1.equals(plot2));\n        \n        // labelPaint\n        plot1.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.magenta, \n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.magenta, \n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n        \n        // maximumLabelWidth\n        plot1.setMaximumLabelWidth(0.33);\n        assertFalse(plot1.equals(plot2));\n        plot2.setMaximumLabelWidth(0.33);\n        assertTrue(plot1.equals(plot2));\n        \n        // labelGap\n        plot1.setLabelGap(0.11);\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelGap(0.11);\n        assertTrue(plot1.equals(plot2));\n        \n        // links visible\n        plot1.setLabelLinksVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelLinksVisible(false);\n        assertTrue(plot1.equals(plot2));\n        \n        // linkMargin\n        plot1.setLabelLinkMargin(0.11);\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelLinkMargin(0.11);\n        assertTrue(plot1.equals(plot2));\n\n        // labelLinkPaint\n        plot1.setLabelLinkPaint(new GradientPaint(1.0f, 2.0f, Color.magenta, \n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelLinkPaint(new GradientPaint(1.0f, 2.0f, Color.magenta, \n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n       \n        // labelLinkStroke\n        plot1.setLabelLinkStroke(new BasicStroke(1.0f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelLinkStroke(new BasicStroke(1.0f));\n        assertTrue(plot1.equals(plot2));\n       \n        // toolTipGenerator\n        plot1.setToolTipGenerator(\n            new StandardPieToolTipGenerator(\"{2}{1}{0}\")\n        );\n        assertFalse(plot1.equals(plot2));\n        plot2.setToolTipGenerator(\n            new StandardPieToolTipGenerator(\"{2}{1}{0}\")\n        );\n        assertTrue(plot1.equals(plot2));\n        \n        // urlGenerator\n        plot1.setURLGenerator(new StandardPieURLGenerator(\"xx\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setURLGenerator(new StandardPieURLGenerator(\"xx\"));\n        assertTrue(plot1.equals(plot2));\n        \n        // minimumArcAngleToDraw\n        plot1.setMinimumArcAngleToDraw(1.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setMinimumArcAngleToDraw(1.0);  \n        assertTrue(plot1.equals(plot2));\n        \n        // legendItemShape\n        plot1.setLegendItemShape(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLegendItemShape(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(plot1.equals(plot2));\n        \n        // legendLabelGenerator\n        plot1.setLegendLabelGenerator(new StandardPieSectionLabelGenerator(\n                \"{0} --> {1}\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLegendLabelGenerator(new StandardPieSectionLabelGenerator(\n                \"{0} --> {1}\"));\n        assertTrue(plot1.equals(plot2));\n        \n        // legendLabelToolTipGenerator\n        plot1.setLegendLabelToolTipGenerator(\n                new StandardPieSectionLabelGenerator(\"{0} is {1}\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLegendLabelToolTipGenerator(\n                new StandardPieSectionLabelGenerator(\"{0} is {1}\"));\n        assertTrue(plot1.equals(plot2));\n        \n        // legendLabelURLGenerator\n        plot1.setLegendLabelURLGenerator(new StandardPieURLGenerator(\n                \"index.html\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLegendLabelURLGenerator(new StandardPieURLGenerator(\n                \"index.html\"));\n        assertTrue(plot1.equals(plot2));\n        \n    }",
        "begin_line": 108,
        "end_line": 393,
        "comment": "\n     * Test the equals() method.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 38)",
            "(line 111,col 9)-(line 111,col 38)",
            "(line 112,col 9)-(line 112,col 40)",
            "(line 113,col 9)-(line 113,col 40)",
            "(line 116,col 9)-(line 116,col 30)",
            "(line 117,col 9)-(line 117,col 41)",
            "(line 118,col 9)-(line 118,col 30)",
            "(line 119,col 9)-(line 119,col 40)",
            "(line 122,col 9)-(line 122,col 35)",
            "(line 123,col 9)-(line 123,col 41)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 125,col 40)",
            "(line 128,col 9)-(line 128,col 47)",
            "(line 129,col 9)-(line 129,col 41)",
            "(line 130,col 9)-(line 130,col 33)",
            "(line 131,col 9)-(line 131,col 40)",
            "(line 134,col 9)-(line 134,col 37)",
            "(line 135,col 9)-(line 135,col 41)",
            "(line 136,col 9)-(line 136,col 37)",
            "(line 137,col 9)-(line 137,col 40)",
            "(line 140,col 9)-(line 140,col 51)",
            "(line 141,col 9)-(line 141,col 41)",
            "(line 142,col 9)-(line 142,col 51)",
            "(line 143,col 9)-(line 143,col 40)",
            "(line 146,col 9)-(line 146,col 40)",
            "(line 147,col 9)-(line 147,col 41)",
            "(line 148,col 9)-(line 148,col 41)",
            "(line 149,col 9)-(line 149,col 40)",
            "(line 150,col 9)-(line 150,col 40)",
            "(line 153,col 9)-(line 153,col 40)",
            "(line 154,col 9)-(line 154,col 41)",
            "(line 155,col 9)-(line 155,col 41)",
            "(line 156,col 9)-(line 156,col 40)",
            "(line 157,col 9)-(line 157,col 40)",
            "(line 160,col 9)-(line 161,col 42)",
            "(line 162,col 9)-(line 162,col 41)",
            "(line 163,col 9)-(line 164,col 42)",
            "(line 165,col 9)-(line 165,col 40)",
            "(line 168,col 9)-(line 169,col 42)",
            "(line 170,col 9)-(line 170,col 41)",
            "(line 171,col 9)-(line 172,col 42)",
            "(line 173,col 9)-(line 173,col 40)",
            "(line 176,col 9)-(line 176,col 47)",
            "(line 177,col 9)-(line 177,col 41)",
            "(line 178,col 9)-(line 178,col 47)",
            "(line 179,col 9)-(line 179,col 40)",
            "(line 182,col 9)-(line 183,col 55)",
            "(line 184,col 9)-(line 184,col 41)",
            "(line 185,col 9)-(line 186,col 55)",
            "(line 187,col 9)-(line 187,col 40)",
            "(line 190,col 9)-(line 191,col 54)",
            "(line 192,col 9)-(line 192,col 41)",
            "(line 193,col 9)-(line 194,col 54)",
            "(line 195,col 9)-(line 195,col 40)",
            "(line 198,col 9)-(line 198,col 66)",
            "(line 199,col 9)-(line 199,col 41)",
            "(line 200,col 9)-(line 200,col 66)",
            "(line 201,col 9)-(line 201,col 40)",
            "(line 204,col 9)-(line 204,col 65)",
            "(line 205,col 9)-(line 205,col 41)",
            "(line 206,col 9)-(line 206,col 65)",
            "(line 207,col 9)-(line 207,col 40)",
            "(line 210,col 9)-(line 211,col 42)",
            "(line 212,col 9)-(line 212,col 41)",
            "(line 213,col 9)-(line 214,col 42)",
            "(line 215,col 9)-(line 215,col 40)",
            "(line 218,col 9)-(line 218,col 36)",
            "(line 219,col 9)-(line 219,col 41)",
            "(line 220,col 9)-(line 220,col 36)",
            "(line 221,col 9)-(line 221,col 40)",
            "(line 224,col 9)-(line 224,col 36)",
            "(line 225,col 9)-(line 225,col 41)",
            "(line 226,col 9)-(line 226,col 36)",
            "(line 227,col 9)-(line 227,col 40)",
            "(line 230,col 9)-(line 230,col 62)",
            "(line 231,col 9)-(line 231,col 41)",
            "(line 232,col 9)-(line 232,col 62)",
            "(line 233,col 9)-(line 233,col 40)",
            "(line 236,col 9)-(line 237,col 42)",
            "(line 238,col 9)-(line 238,col 41)",
            "(line 239,col 9)-(line 240,col 42)",
            "(line 241,col 9)-(line 241,col 40)",
            "(line 244,col 9)-(line 245,col 42)",
            "(line 246,col 9)-(line 246,col 41)",
            "(line 247,col 9)-(line 248,col 42)",
            "(line 249,col 9)-(line 249,col 40)",
            "(line 252,col 9)-(line 253,col 42)",
            "(line 254,col 9)-(line 254,col 41)",
            "(line 255,col 9)-(line 256,col 42)",
            "(line 257,col 9)-(line 257,col 40)",
            "(line 260,col 9)-(line 260,col 41)",
            "(line 261,col 9)-(line 261,col 39)",
            "(line 262,col 9)-(line 262,col 41)",
            "(line 263,col 9)-(line 263,col 39)",
            "(line 264,col 9)-(line 264,col 40)",
            "(line 267,col 9)-(line 268,col 42)",
            "(line 269,col 9)-(line 269,col 41)",
            "(line 270,col 9)-(line 271,col 42)",
            "(line 272,col 9)-(line 272,col 40)",
            "(line 275,col 9)-(line 275,col 43)",
            "(line 276,col 9)-(line 276,col 41)",
            "(line 277,col 9)-(line 277,col 43)",
            "(line 278,col 9)-(line 278,col 40)",
            "(line 281,col 9)-(line 282,col 30)",
            "(line 283,col 9)-(line 283,col 41)",
            "(line 284,col 9)-(line 285,col 30)",
            "(line 286,col 9)-(line 286,col 40)",
            "(line 289,col 9)-(line 289,col 55)",
            "(line 290,col 9)-(line 290,col 30)",
            "(line 291,col 9)-(line 291,col 41)",
            "(line 292,col 9)-(line 292,col 30)",
            "(line 293,col 9)-(line 293,col 40)",
            "(line 296,col 9)-(line 297,col 42)",
            "(line 298,col 9)-(line 298,col 41)",
            "(line 299,col 9)-(line 300,col 42)",
            "(line 301,col 9)-(line 301,col 40)",
            "(line 304,col 9)-(line 304,col 41)",
            "(line 305,col 9)-(line 305,col 41)",
            "(line 306,col 9)-(line 306,col 41)",
            "(line 307,col 9)-(line 307,col 40)",
            "(line 310,col 9)-(line 310,col 32)",
            "(line 311,col 9)-(line 311,col 41)",
            "(line 312,col 9)-(line 312,col 32)",
            "(line 313,col 9)-(line 313,col 40)",
            "(line 316,col 9)-(line 316,col 42)",
            "(line 317,col 9)-(line 317,col 41)",
            "(line 318,col 9)-(line 318,col 42)",
            "(line 319,col 9)-(line 319,col 40)",
            "(line 322,col 9)-(line 322,col 39)",
            "(line 323,col 9)-(line 323,col 41)",
            "(line 324,col 9)-(line 324,col 39)",
            "(line 325,col 9)-(line 325,col 40)",
            "(line 328,col 9)-(line 329,col 42)",
            "(line 330,col 9)-(line 330,col 41)",
            "(line 331,col 9)-(line 332,col 42)",
            "(line 333,col 9)-(line 333,col 40)",
            "(line 336,col 9)-(line 336,col 56)",
            "(line 337,col 9)-(line 337,col 41)",
            "(line 338,col 9)-(line 338,col 56)",
            "(line 339,col 9)-(line 339,col 40)",
            "(line 342,col 9)-(line 344,col 10)",
            "(line 345,col 9)-(line 345,col 41)",
            "(line 346,col 9)-(line 348,col 10)",
            "(line 349,col 9)-(line 349,col 40)",
            "(line 352,col 9)-(line 352,col 65)",
            "(line 353,col 9)-(line 353,col 41)",
            "(line 354,col 9)-(line 354,col 65)",
            "(line 355,col 9)-(line 355,col 40)",
            "(line 358,col 9)-(line 358,col 44)",
            "(line 359,col 9)-(line 359,col 41)",
            "(line 360,col 9)-(line 360,col 44)",
            "(line 361,col 9)-(line 361,col 40)",
            "(line 364,col 9)-(line 364,col 77)",
            "(line 365,col 9)-(line 365,col 41)",
            "(line 366,col 9)-(line 366,col 77)",
            "(line 367,col 9)-(line 367,col 40)",
            "(line 370,col 9)-(line 371,col 32)",
            "(line 372,col 9)-(line 372,col 41)",
            "(line 373,col 9)-(line 374,col 32)",
            "(line 375,col 9)-(line 375,col 40)",
            "(line 378,col 9)-(line 379,col 68)",
            "(line 380,col 9)-(line 380,col 41)",
            "(line 381,col 9)-(line 382,col 68)",
            "(line 383,col 9)-(line 383,col 40)",
            "(line 386,col 9)-(line 387,col 31)",
            "(line 388,col 9)-(line 388,col 41)",
            "(line 389,col 9)-(line 390,col 31)",
            "(line 391,col 9)-(line 391,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        PiePlot p1 = new PiePlot();\n        PiePlot p2 = null;\n        try {\n            p2 = (PiePlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 398,
        "end_line": 410,
        "comment": "\n     * Some basic checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 399,col 9)-(line 399,col 35)",
            "(line 400,col 9)-(line 400,col 26)",
            "(line 401,col 9)-(line 406,col 9)",
            "(line 407,col 9)-(line 407,col 29)",
            "(line 408,col 9)-(line 408,col 51)",
            "(line 409,col 9)-(line 409,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.testCloning_URLGenerator()",
        "snippet": "    public void testCloning_URLGenerator() {\n        CustomPieURLGenerator generator = new CustomPieURLGenerator();\n        PiePlot p1 = new PiePlot();\n        p1.setURLGenerator(generator);\n        PiePlot p2 = null;\n        try {\n            p2 = (PiePlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        \n        // check that the URL generator has been cloned\n        assertTrue(p1.getURLGenerator() != p2.getURLGenerator());\n    }    ",
        "begin_line": 415,
        "end_line": 432,
        "comment": "\n     * Check cloning of the urlGenerator field.\n     ",
        "child_ranges": [
            "(line 416,col 9)-(line 416,col 70)",
            "(line 417,col 9)-(line 417,col 35)",
            "(line 418,col 9)-(line 418,col 38)",
            "(line 419,col 9)-(line 419,col 26)",
            "(line 420,col 9)-(line 425,col 9)",
            "(line 426,col 9)-(line 426,col 29)",
            "(line 427,col 9)-(line 427,col 51)",
            "(line 428,col 9)-(line 428,col 34)",
            "(line 431,col 9)-(line 431,col 65)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.testCloning_LegendItemShape()",
        "snippet": "    public void testCloning_LegendItemShape() {\n        Rectangle shape = new Rectangle(-4, -4, 8, 8);\n        PiePlot p1 = new PiePlot();\n        p1.setLegendItemShape(shape);\n        PiePlot p2 = null;\n        try {\n            p2 = (PiePlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        \n        // change the shape and make sure it only affects p1\n        shape.setRect(1.0, 2.0, 3.0, 4.0);\n        assertFalse(p1.equals(p2));\n    }    ",
        "begin_line": 437,
        "end_line": 455,
        "comment": "\n     * Check cloning of the legendItemShape field.\n     ",
        "child_ranges": [
            "(line 438,col 9)-(line 438,col 54)",
            "(line 439,col 9)-(line 439,col 35)",
            "(line 440,col 9)-(line 440,col 37)",
            "(line 441,col 9)-(line 441,col 26)",
            "(line 442,col 9)-(line 447,col 9)",
            "(line 448,col 9)-(line 448,col 29)",
            "(line 449,col 9)-(line 449,col 51)",
            "(line 450,col 9)-(line 450,col 34)",
            "(line 453,col 9)-(line 453,col 42)",
            "(line 454,col 9)-(line 454,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.testCloning_LegendLabelGenerator()",
        "snippet": "    public void testCloning_LegendLabelGenerator() {\n        StandardPieSectionLabelGenerator generator \n                = new StandardPieSectionLabelGenerator();\n        PiePlot p1 = new PiePlot();\n        p1.setLegendLabelGenerator(generator);\n        PiePlot p2 = null;\n        try {\n            p2 = (PiePlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        \n        // change the generator and make sure it only affects p1\n        generator.getNumberFormat().setMinimumFractionDigits(2);\n        assertFalse(p1.equals(p2));\n    }    ",
        "begin_line": 460,
        "end_line": 479,
        "comment": "\n     * Check cloning of the legendLabelGenerator field.\n     ",
        "child_ranges": [
            "(line 461,col 9)-(line 462,col 57)",
            "(line 463,col 9)-(line 463,col 35)",
            "(line 464,col 9)-(line 464,col 46)",
            "(line 465,col 9)-(line 465,col 26)",
            "(line 466,col 9)-(line 471,col 9)",
            "(line 472,col 9)-(line 472,col 29)",
            "(line 473,col 9)-(line 473,col 51)",
            "(line 474,col 9)-(line 474,col 34)",
            "(line 477,col 9)-(line 477,col 64)",
            "(line 478,col 9)-(line 478,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.testCloning_LegendLabelToolTipGenerator()",
        "snippet": "    public void testCloning_LegendLabelToolTipGenerator() {\n        StandardPieSectionLabelGenerator generator \n                = new StandardPieSectionLabelGenerator();\n        PiePlot p1 = new PiePlot();\n        p1.setLegendLabelToolTipGenerator(generator);\n        PiePlot p2 = null;\n        try {\n            p2 = (PiePlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        \n        // change the generator and make sure it only affects p1\n        generator.getNumberFormat().setMinimumFractionDigits(2);\n        assertFalse(p1.equals(p2));\n    }    ",
        "begin_line": 484,
        "end_line": 503,
        "comment": "\n     * Check cloning of the legendLabelToolTipGenerator field.\n     ",
        "child_ranges": [
            "(line 485,col 9)-(line 486,col 57)",
            "(line 487,col 9)-(line 487,col 35)",
            "(line 488,col 9)-(line 488,col 53)",
            "(line 489,col 9)-(line 489,col 26)",
            "(line 490,col 9)-(line 495,col 9)",
            "(line 496,col 9)-(line 496,col 29)",
            "(line 497,col 9)-(line 497,col 51)",
            "(line 498,col 9)-(line 498,col 34)",
            "(line 501,col 9)-(line 501,col 64)",
            "(line 502,col 9)-(line 502,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.testCloning_LegendLabelURLGenerator()",
        "snippet": "    public void testCloning_LegendLabelURLGenerator() {\n        CustomPieURLGenerator generator = new CustomPieURLGenerator();\n        PiePlot p1 = new PiePlot();\n        p1.setLegendLabelURLGenerator(generator);\n        PiePlot p2 = null;\n        try {\n            p2 = (PiePlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        \n        // check that the URL generator has been cloned\n        assertTrue(p1.getLegendLabelURLGenerator() \n                != p2.getLegendLabelURLGenerator());\n    }    ",
        "begin_line": 508,
        "end_line": 526,
        "comment": "\n     * Check cloning of the legendLabelURLGenerator field.\n     ",
        "child_ranges": [
            "(line 509,col 9)-(line 509,col 70)",
            "(line 510,col 9)-(line 510,col 35)",
            "(line 511,col 9)-(line 511,col 49)",
            "(line 512,col 9)-(line 512,col 26)",
            "(line 513,col 9)-(line 518,col 9)",
            "(line 519,col 9)-(line 519,col 29)",
            "(line 520,col 9)-(line 520,col 51)",
            "(line 521,col 9)-(line 521,col 34)",
            "(line 524,col 9)-(line 525,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        PiePlot p1 = new PiePlot(null);\n        PiePlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            p2 = (PiePlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(p1, p2);\n    }",
        "begin_line": 531,
        "end_line": 549,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 532,col 9)-(line 532,col 39)",
            "(line 533,col 9)-(line 533,col 26)",
            "(line 534,col 9)-(line 547,col 9)",
            "(line 548,col 9)-(line 548,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.testGetLegendItems()",
        "snippet": "    public void testGetLegendItems() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Item 1\", 1.0);\n        dataset.setValue(\"Item 2\", 2.0);\n        dataset.setValue(\"Item 3\", 0.0);\n        dataset.setValue(\"Item 4\", null);\n       \n        PiePlot plot = new PiePlot(dataset);\n        plot.setIgnoreNullValues(false);\n        plot.setIgnoreZeroValues(false);\n        LegendItemCollection items = plot.getLegendItems();\n        assertEquals(4, items.getItemCount());\n        \n        // check that null items are ignored if requested\n        plot.setIgnoreNullValues(true);\n        items = plot.getLegendItems();\n        assertEquals(3, items.getItemCount());\n        \n        // check that zero items are ignored if requested\n        plot.setIgnoreZeroValues(true);\n        items = plot.getLegendItems();\n        assertEquals(2, items.getItemCount());\n        \n        // check that negative items are always ignored\n        dataset.setValue(\"Item 5\", -1.0);\n        items = plot.getLegendItems();\n        assertEquals(2, items.getItemCount());        \n    }",
        "begin_line": 554,
        "end_line": 581,
        "comment": "\n     * Some checks for the getLegendItems() method.\n     ",
        "child_ranges": [
            "(line 555,col 9)-(line 555,col 60)",
            "(line 556,col 9)-(line 556,col 40)",
            "(line 557,col 9)-(line 557,col 40)",
            "(line 558,col 9)-(line 558,col 40)",
            "(line 559,col 9)-(line 559,col 41)",
            "(line 561,col 9)-(line 561,col 44)",
            "(line 562,col 9)-(line 562,col 40)",
            "(line 563,col 9)-(line 563,col 40)",
            "(line 564,col 9)-(line 564,col 59)",
            "(line 565,col 9)-(line 565,col 46)",
            "(line 568,col 9)-(line 568,col 39)",
            "(line 569,col 9)-(line 569,col 38)",
            "(line 570,col 9)-(line 570,col 46)",
            "(line 573,col 9)-(line 573,col 39)",
            "(line 574,col 9)-(line 574,col 38)",
            "(line 575,col 9)-(line 575,col 46)",
            "(line 578,col 9)-(line 578,col 41)",
            "(line 579,col 9)-(line 579,col 38)",
            "(line 580,col 9)-(line 580,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.testGetBaseSectionPaint()",
        "snippet": "    public void testGetBaseSectionPaint() {\n        PiePlot plot = new PiePlot();\n        assertNotNull(plot.getBaseSectionPaint());\n        \n        boolean pass = false;\n        try {\n            plot.setBaseSectionPaint(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 587,
        "end_line": 599,
        "comment": "\n     * Check that the default base section paint is not null, and that you \n     * can never set it to null.\n     ",
        "child_ranges": [
            "(line 588,col 9)-(line 588,col 37)",
            "(line 589,col 9)-(line 589,col 50)",
            "(line 591,col 9)-(line 591,col 29)",
            "(line 592,col 9)-(line 597,col 9)",
            "(line 598,col 9)-(line 598,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.NullLegendLabelGenerator.generateAttributedSectionLabel(org.jfree.data.general.PieDataset, java.lang.Comparable)",
        "snippet": "        public AttributedString generateAttributedSectionLabel(\n                PieDataset dataset, Comparable key) {\n            return null;\n        }",
        "begin_line": 602,
        "end_line": 605,
        "comment": "",
        "child_ranges": [
            "(line 604,col 13)-(line 604,col 24)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.NullLegendLabelGenerator.generateSectionLabel(org.jfree.data.general.PieDataset, java.lang.Comparable)",
        "snippet": "        public String generateSectionLabel(PieDataset dataset, Comparable key) {\n            return null;\n        }",
        "begin_line": 606,
        "end_line": 608,
        "comment": "",
        "child_ranges": [
            "(line 607,col 13)-(line 607,col 24)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlotTests.testDrawWithNullLegendLabels()",
        "snippet": "    public void testDrawWithNullLegendLabels() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"L1\", 12.0);\n        dataset.setValue(\"L2\", 11.0);\n        JFreeChart chart = ChartFactory.createPieChart(\"Test\", dataset, true, \n                false, false);\n        PiePlot plot = (PiePlot) chart.getPlot();\n        plot.setLegendLabelGenerator(new NullLegendLabelGenerator());\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 614,
        "end_line": 635,
        "comment": "\n     * Draws a pie chart where the label generator returns null.\n     ",
        "child_ranges": [
            "(line 615,col 9)-(line 615,col 60)",
            "(line 616,col 9)-(line 616,col 37)",
            "(line 617,col 9)-(line 617,col 37)",
            "(line 618,col 9)-(line 619,col 30)",
            "(line 620,col 9)-(line 620,col 49)",
            "(line 621,col 9)-(line 621,col 69)",
            "(line 622,col 9)-(line 622,col 32)",
            "(line 623,col 9)-(line 633,col 9)",
            "(line 634,col 9)-(line 634,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlot3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlot3DTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlot3DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PiePlot3DTests.class);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlot3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlot3DTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlot3DTests.PiePlot3DTests(java.lang.String)",
        "snippet": "    public PiePlot3DTests(String name) {\n        super(name);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlot3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlot3DTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlot3DTests.testEquals()",
        "snippet": "    public void testEquals() {\n        PiePlot3D p1 = new PiePlot3D();\n        PiePlot3D p2 = new PiePlot3D();\n        assertTrue(p1.equals(p2));\n        assertTrue(p2.equals(p1));\n        \n        p1.setDepthFactor(1.23);\n        assertFalse(p1.equals(p2));\n        p2.setDepthFactor(1.23);\n        assertTrue(p1.equals(p2));\n        \n        p1.setDarkerSides(true);\n        assertFalse(p1.equals(p2));\n        p2.setDarkerSides(true);\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 90,
        "end_line": 105,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 39)",
            "(line 92,col 9)-(line 92,col 39)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 96,col 32)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 32)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 101,col 32)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 32)",
            "(line 104,col 9)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlot3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlot3DTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlot3DTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        PiePlot3D p1 = new PiePlot3D(null);\n        PiePlot3D p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (PiePlot3D) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(p1, p2);\n\n    }",
        "begin_line": 110,
        "end_line": 131,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 43)",
            "(line 113,col 9)-(line 113,col 28)",
            "(line 115,col 9)-(line 128,col 9)",
            "(line 129,col 9)-(line 129,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlot3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlot3DTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlot3DTests.testDrawWithNullDataset()",
        "snippet": "    public void testDrawWithNullDataset() {\n        JFreeChart chart = ChartFactory.createPieChart3D(\"Test\", null, true, \n                false, false);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 136,
        "end_line": 152,
        "comment": "\n     * Draws a pie chart where the label generator returns null.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 138,col 30)",
            "(line 139,col 9)-(line 139,col 32)",
            "(line 140,col 9)-(line 150,col 9)",
            "(line 151,col 9)-(line 151,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.IntervalMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/IntervalMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.IntervalMarkerTests.markerChanged(org.jfree.chart.event.MarkerChangeEvent)",
        "snippet": "    public void markerChanged(MarkerChangeEvent event) {\n        this.lastEvent = event;\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.IntervalMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/IntervalMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.IntervalMarkerTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(IntervalMarkerTests.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.IntervalMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/IntervalMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.IntervalMarkerTests.IntervalMarkerTests(java.lang.String)",
        "snippet": "    public IntervalMarkerTests(String name) {\n        super(name);\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.IntervalMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/IntervalMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.IntervalMarkerTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        IntervalMarker m1 = new IntervalMarker(45.0, 50.0);\n        IntervalMarker m2 = new IntervalMarker(45.0, 50.0);\n        assertTrue(m1.equals(m2));\n        assertTrue(m2.equals(m1));\n        \n        m1 = new IntervalMarker(44.0, 50.0);\n        assertFalse(m1.equals(m2));\n        m2 = new IntervalMarker(44.0, 50.0);\n        assertTrue(m1.equals(m2));\n        \n        m1 = new IntervalMarker(44.0, 55.0);\n        assertFalse(m1.equals(m2));\n        m2 = new IntervalMarker(44.0, 55.0);\n        assertTrue(m1.equals(m2));\n       \n        GradientPaintTransformer t = new StandardGradientPaintTransformer(\n                GradientPaintTransformType.HORIZONTAL);\n        m1.setGradientPaintTransformer(t);\n        assertFalse(m1.equals(m2));\n        m2.setGradientPaintTransformer(t);\n        assertTrue(m1.equals(m2));\n        \n    }",
        "begin_line": 95,
        "end_line": 119,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 59)",
            "(line 98,col 9)-(line 98,col 59)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 102,col 44)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 44)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 107,col 9)-(line 107,col 44)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 44)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 112,col 9)-(line 113,col 55)",
            "(line 114,col 9)-(line 114,col 42)",
            "(line 115,col 9)-(line 115,col 35)",
            "(line 116,col 9)-(line 116,col 42)",
            "(line 117,col 9)-(line 117,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.IntervalMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/IntervalMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.IntervalMarkerTests.testCloning()",
        "snippet": "    public void testCloning() {\n        IntervalMarker m1 = new IntervalMarker(45.0, 50.0);\n        IntervalMarker m2 = null;\n        try {\n            m2 = (IntervalMarker) m1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(m1 != m2);\n        assertTrue(m1.getClass() == m2.getClass());\n        assertTrue(m1.equals(m2));\n    }",
        "begin_line": 124,
        "end_line": 136,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 59)",
            "(line 126,col 9)-(line 126,col 33)",
            "(line 127,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 133,col 29)",
            "(line 134,col 9)-(line 134,col 51)",
            "(line 135,col 9)-(line 135,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.IntervalMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/IntervalMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.IntervalMarkerTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        IntervalMarker m1 = new IntervalMarker(45.0, 50.0);\n        IntervalMarker m2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            m2 = (IntervalMarker) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        boolean b = m1.equals(m2);\n        assertTrue(b);\n\n    }",
        "begin_line": 141,
        "end_line": 162,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 59)",
            "(line 144,col 9)-(line 144,col 33)",
            "(line 145,col 9)-(line 158,col 9)",
            "(line 159,col 9)-(line 159,col 34)",
            "(line 160,col 9)-(line 160,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.IntervalMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/IntervalMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.IntervalMarkerTests.testGetSetStartValue()",
        "snippet": "    public void testGetSetStartValue() {\n        IntervalMarker m = new IntervalMarker(1.0, 2.0);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(1.0, m.getStartValue(), EPSILON);\n        m.setStartValue(0.5);\n        assertEquals(0.5, m.getStartValue(), EPSILON);\n        assertEquals(m, this.lastEvent.getMarker());\n    }",
        "begin_line": 169,
        "end_line": 177,
        "comment": "\n     * Some checks for the getStartValue() and setStartValue() methods.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 56)",
            "(line 171,col 9)-(line 171,col 34)",
            "(line 172,col 9)-(line 172,col 30)",
            "(line 173,col 9)-(line 173,col 54)",
            "(line 174,col 9)-(line 174,col 29)",
            "(line 175,col 9)-(line 175,col 54)",
            "(line 176,col 9)-(line 176,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.IntervalMarkerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/IntervalMarkerTests.java",
        "signature": "org.jfree.chart.plot.junit.IntervalMarkerTests.testGetSetEndValue()",
        "snippet": "    public void testGetSetEndValue() {\n        IntervalMarker m = new IntervalMarker(1.0, 2.0);\n        m.addChangeListener(this);\n        this.lastEvent = null;\n        assertEquals(2.0, m.getEndValue(), EPSILON);\n        m.setEndValue(0.5);\n        assertEquals(0.5, m.getEndValue(), EPSILON);\n        assertEquals(m, this.lastEvent.getMarker());\n    }",
        "begin_line": 182,
        "end_line": 190,
        "comment": "\n     * Some checks for the getEndValue() and setEndValue() methods.\n     ",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 56)",
            "(line 184,col 9)-(line 184,col 34)",
            "(line 185,col 9)-(line 185,col 30)",
            "(line 186,col 9)-(line 186,col 52)",
            "(line 187,col 9)-(line 187,col 27)",
            "(line 188,col 9)-(line 188,col 52)",
            "(line 189,col 9)-(line 189,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PolarPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PolarPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PolarPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PolarPlotTests.class);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PolarPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PolarPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PolarPlotTests.PolarPlotTests(java.lang.String)",
        "snippet": "    public PolarPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PolarPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PolarPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PolarPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        PolarPlot plot1 = new PolarPlot();\n        PolarPlot plot2 = new PolarPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n        \n        plot1.setAngleGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAngleGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n        \n        Stroke s = new BasicStroke(1.23f);\n        plot1.setAngleGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAngleGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setAngleTickUnit(new NumberTickUnit(11.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAngleTickUnit(new NumberTickUnit(11.0));\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setAngleGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAngleGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setAngleLabelFont(new Font(\"Serif\", Font.PLAIN, 9));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAngleLabelFont(new Font(\"Serif\", Font.PLAIN, 9));\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setAngleLabelPaint(new GradientPaint(9.0f, 8.0f, Color.blue,\n                7.0f, 6.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAngleLabelPaint(new GradientPaint(9.0f, 8.0f, Color.blue,\n                7.0f, 6.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setAngleLabelsVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAngleLabelsVisible(false);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setAxis(new NumberAxis(\"Test\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxis(new NumberAxis(\"Test\"));\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setRadiusGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.white,\n                3.0f, 4.0f, Color.black));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRadiusGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.white,\n                3.0f, 4.0f, Color.black));\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setRadiusGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRadiusGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setRadiusGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRadiusGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.addCornerTextItem(\"XYZ\");\n        assertFalse(plot1.equals(plot2));\n        plot2.addCornerTextItem(\"XYZ\");\n        assertTrue(plot1.equals(plot2));   \n    }",
        "begin_line": 94,
        "end_line": 166,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 42)",
            "(line 96,col 9)-(line 96,col 42)",
            "(line 97,col 9)-(line 97,col 40)",
            "(line 98,col 9)-(line 98,col 40)",
            "(line 100,col 9)-(line 101,col 41)",
            "(line 102,col 9)-(line 102,col 41)",
            "(line 103,col 9)-(line 104,col 41)",
            "(line 105,col 9)-(line 105,col 40)",
            "(line 107,col 9)-(line 107,col 42)",
            "(line 108,col 9)-(line 108,col 40)",
            "(line 109,col 9)-(line 109,col 41)",
            "(line 110,col 9)-(line 110,col 40)",
            "(line 111,col 9)-(line 111,col 40)",
            "(line 113,col 9)-(line 113,col 57)",
            "(line 114,col 9)-(line 114,col 41)",
            "(line 115,col 9)-(line 115,col 57)",
            "(line 116,col 9)-(line 116,col 40)",
            "(line 118,col 9)-(line 118,col 46)",
            "(line 119,col 9)-(line 119,col 41)",
            "(line 120,col 9)-(line 120,col 46)",
            "(line 121,col 9)-(line 121,col 40)",
            "(line 123,col 9)-(line 123,col 66)",
            "(line 124,col 9)-(line 124,col 41)",
            "(line 125,col 9)-(line 125,col 66)",
            "(line 126,col 9)-(line 126,col 40)",
            "(line 128,col 9)-(line 129,col 40)",
            "(line 130,col 9)-(line 130,col 41)",
            "(line 131,col 9)-(line 132,col 40)",
            "(line 133,col 9)-(line 133,col 40)",
            "(line 135,col 9)-(line 135,col 43)",
            "(line 136,col 9)-(line 136,col 41)",
            "(line 137,col 9)-(line 137,col 43)",
            "(line 138,col 9)-(line 138,col 40)",
            "(line 140,col 9)-(line 140,col 46)",
            "(line 141,col 9)-(line 141,col 41)",
            "(line 142,col 9)-(line 142,col 46)",
            "(line 143,col 9)-(line 143,col 40)",
            "(line 145,col 9)-(line 146,col 42)",
            "(line 147,col 9)-(line 147,col 41)",
            "(line 148,col 9)-(line 149,col 42)",
            "(line 150,col 9)-(line 150,col 40)",
            "(line 152,col 9)-(line 152,col 41)",
            "(line 153,col 9)-(line 153,col 41)",
            "(line 154,col 9)-(line 154,col 41)",
            "(line 155,col 9)-(line 155,col 40)",
            "(line 157,col 9)-(line 157,col 47)",
            "(line 158,col 9)-(line 158,col 41)",
            "(line 159,col 9)-(line 159,col 47)",
            "(line 160,col 9)-(line 160,col 40)",
            "(line 162,col 9)-(line 162,col 39)",
            "(line 163,col 9)-(line 163,col 41)",
            "(line 164,col 9)-(line 164,col 39)",
            "(line 165,col 9)-(line 165,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PolarPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PolarPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PolarPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        PolarPlot p1 = new PolarPlot();\n        PolarPlot p2 = null;\n        try {\n            p2 = (PolarPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        \n        // check independence\n        p1.addCornerTextItem(\"XYZ\");\n        assertFalse(p1.equals(p2));\n        p2.addCornerTextItem(\"XYZ\");\n        assertTrue(p1.equals(p2));\n        \n        p1 = new PolarPlot(new DefaultXYDataset(), new NumberAxis(\"A1\"), \n                new DefaultPolarItemRenderer());\n        p2 = null;\n        try {\n            p2 = (PolarPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        \n        // check independence\n        p1.getAxis().setLabel(\"ABC\");\n        assertFalse(p1.equals(p2));\n        p2.getAxis().setLabel(\"ABC\");\n        assertTrue(p1.equals(p2));\n        \n    }",
        "begin_line": 171,
        "end_line": 210,
        "comment": "\n     * Some basic checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 39)",
            "(line 173,col 9)-(line 173,col 28)",
            "(line 174,col 9)-(line 179,col 9)",
            "(line 180,col 9)-(line 180,col 29)",
            "(line 181,col 9)-(line 181,col 51)",
            "(line 182,col 9)-(line 182,col 34)",
            "(line 185,col 9)-(line 185,col 36)",
            "(line 186,col 9)-(line 186,col 35)",
            "(line 187,col 9)-(line 187,col 36)",
            "(line 188,col 9)-(line 188,col 34)",
            "(line 190,col 9)-(line 191,col 48)",
            "(line 192,col 9)-(line 192,col 18)",
            "(line 193,col 9)-(line 199,col 9)",
            "(line 200,col 9)-(line 200,col 29)",
            "(line 201,col 9)-(line 201,col 51)",
            "(line 202,col 9)-(line 202,col 34)",
            "(line 205,col 9)-(line 205,col 37)",
            "(line 206,col 9)-(line 206,col 35)",
            "(line 207,col 9)-(line 207,col 37)",
            "(line 208,col 9)-(line 208,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PolarPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PolarPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.PolarPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        PolarPlot p1 = new PolarPlot();\n        p1.setAngleGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,\n                4.0f, Color.blue));\n        p1.setAngleLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,\n                4.0f, Color.blue));\n        p1.setRadiusGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,\n                4.0f, Color.blue));\n        PolarPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (PolarPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(p1, p2);\n\n    }",
        "begin_line": 215,
        "end_line": 242,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 39)",
            "(line 218,col 9)-(line 219,col 35)",
            "(line 220,col 9)-(line 221,col 35)",
            "(line 222,col 9)-(line 223,col 35)",
            "(line 224,col 9)-(line 224,col 28)",
            "(line 226,col 9)-(line 239,col 9)",
            "(line 240,col 9)-(line 240,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MultiplePiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MultiplePiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MultiplePiePlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MultiplePiePlotTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MultiplePiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MultiplePiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MultiplePiePlotTests.MultiplePiePlotTests(java.lang.String)",
        "snippet": "    public MultiplePiePlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MultiplePiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MultiplePiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MultiplePiePlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        MultiplePiePlot p1 = new MultiplePiePlot();\n        MultiplePiePlot p2 = new MultiplePiePlot();\n        assertTrue(p1.equals(p2));\n        assertTrue(p2.equals(p1));\n        \n        p1.setDataExtractOrder(TableOrder.BY_ROW);\n        assertFalse(p1.equals(p2));\n        p2.setDataExtractOrder(TableOrder.BY_ROW);\n        assertTrue(p1.equals(p2));\n        \n        p1.setLimit(1.23);\n        assertFalse(p1.equals(p2));\n        p2.setLimit(1.23);\n        assertTrue(p1.equals(p2));\n        \n        p1.setAggregatedItemsKey(\"Aggregated Items\");\n        assertFalse(p1.equals(p2));\n        p2.setAggregatedItemsKey(\"Aggregated Items\");\n        assertTrue(p1.equals(p2));   \n        \n        p1.setAggregatedItemsPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(p1.equals(p2));\n        p2.setAggregatedItemsPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(p1.equals(p2));   \n        \n        p1.setPieChart(ChartFactory.createPieChart(\"Title\", null, true, true, \n                true));\n        assertFalse(p1.equals(p2));\n        p2.setPieChart(ChartFactory.createPieChart(\"Title\", null, true, true, \n                true));\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 88,
        "end_line": 122,
        "comment": "\n     * Check that the equals() method distinguishes the required fields.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 51)",
            "(line 90,col 9)-(line 90,col 51)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 94,col 50)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 50)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 99,col 9)-(line 99,col 26)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 26)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 104,col 9)-(line 104,col 53)",
            "(line 105,col 9)-(line 105,col 35)",
            "(line 106,col 9)-(line 106,col 53)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 109,col 9)-(line 110,col 43)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 113,col 43)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 116,col 9)-(line 117,col 23)",
            "(line 118,col 9)-(line 118,col 35)",
            "(line 119,col 9)-(line 120,col 23)",
            "(line 121,col 9)-(line 121,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MultiplePiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MultiplePiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MultiplePiePlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        MultiplePiePlot p1 = new MultiplePiePlot();\n        MultiplePiePlot p2 = null;\n        try {\n            p2 = (MultiplePiePlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 127,
        "end_line": 140,
        "comment": "\n     * Some basic checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 51)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 130,col 9)-(line 136,col 9)",
            "(line 137,col 9)-(line 137,col 29)",
            "(line 138,col 9)-(line 138,col 51)",
            "(line 139,col 9)-(line 139,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MultiplePiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MultiplePiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MultiplePiePlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        MultiplePiePlot p1 = new MultiplePiePlot(null);\n        p1.setAggregatedItemsPaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.red));\n        MultiplePiePlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            p2 = (MultiplePiePlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(p1, p2);\n    }",
        "begin_line": 145,
        "end_line": 166,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 55)",
            "(line 147,col 9)-(line 148,col 40)",
            "(line 149,col 9)-(line 149,col 34)",
            "(line 150,col 9)-(line 164,col 9)",
            "(line 165,col 9)-(line 165,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CombinedDomainCategoryPlotTests.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 68)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests.CombinedDomainCategoryPlotTests(java.lang.String)",
        "snippet": "    public CombinedDomainCategoryPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests.testRemoveSubplot()",
        "snippet": "    public void testRemoveSubplot() {\n        CombinedDomainCategoryPlot plot = new CombinedDomainCategoryPlot();\n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        plot.add(plot1);\n        plot.add(plot2);\n        // remove plot2, but plot1 is removed instead\n        plot.remove(plot2);\n        List plots = plot.getSubplots();\n        assertTrue(plots.get(0) == plot1);\n        assertEquals(1, plots.size());\n    }",
        "begin_line": 91,
        "end_line": 102,
        "comment": "\n     * This is a test to replicate the bug report 987080.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 75)",
            "(line 93,col 9)-(line 93,col 48)",
            "(line 94,col 9)-(line 94,col 48)",
            "(line 95,col 9)-(line 95,col 24)",
            "(line 96,col 9)-(line 96,col 24)",
            "(line 98,col 9)-(line 98,col 27)",
            "(line 99,col 9)-(line 99,col 40)",
            "(line 100,col 9)-(line 100,col 42)",
            "(line 101,col 9)-(line 101,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        CombinedDomainCategoryPlot plot1 = createPlot();\n        CombinedDomainCategoryPlot plot2 = createPlot();\n        assertTrue(plot1.equals(plot2));    \n    }",
        "begin_line": 107,
        "end_line": 111,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 56)",
            "(line 109,col 9)-(line 109,col 56)",
            "(line 110,col 9)-(line 110,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CombinedDomainCategoryPlot plot1 = createPlot();        \n        CombinedDomainCategoryPlot plot2 = null;\n        try {\n            plot2 = (CombinedDomainCategoryPlot) plot1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(plot1 != plot2);\n        assertTrue(plot1.getClass() == plot2.getClass());\n        assertTrue(plot1.equals(plot2));\n    }",
        "begin_line": 116,
        "end_line": 128,
        "comment": "\n     * Some checks for cloning.\n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 56)",
            "(line 118,col 9)-(line 118,col 48)",
            "(line 119,col 9)-(line 124,col 9)",
            "(line 125,col 9)-(line 125,col 35)",
            "(line 126,col 9)-(line 126,col 57)",
            "(line 127,col 9)-(line 127,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        CombinedDomainCategoryPlot plot1 = createPlot();\n        CombinedDomainCategoryPlot plot2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(plot1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            plot2 = (CombinedDomainCategoryPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(plot1, plot2);\n    }",
        "begin_line": 133,
        "end_line": 151,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 56)",
            "(line 135,col 9)-(line 135,col 48)",
            "(line 136,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 150,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests.createDataset1()",
        "snippet": "    public CategoryDataset createDataset1() {\n\n        DefaultCategoryDataset result = new DefaultCategoryDataset();\n\n        // row keys...\n        String series1 = \"First\";\n        String series2 = \"Second\";\n\n        // column keys...\n        String type1 = \"Type 1\";\n        String type2 = \"Type 2\";\n        String type3 = \"Type 3\";\n        String type4 = \"Type 4\";\n        String type5 = \"Type 5\";\n        String type6 = \"Type 6\";\n        String type7 = \"Type 7\";\n        String type8 = \"Type 8\";\n\n        result.addValue(1.0, series1, type1);\n        result.addValue(4.0, series1, type2);\n        result.addValue(3.0, series1, type3);\n        result.addValue(5.0, series1, type4);\n        result.addValue(5.0, series1, type5);\n        result.addValue(7.0, series1, type6);\n        result.addValue(7.0, series1, type7);\n        result.addValue(8.0, series1, type8);\n\n        result.addValue(5.0, series2, type1);\n        result.addValue(7.0, series2, type2);\n        result.addValue(6.0, series2, type3);\n        result.addValue(8.0, series2, type4);\n        result.addValue(4.0, series2, type5);\n        result.addValue(4.0, series2, type6);\n        result.addValue(2.0, series2, type7);\n        result.addValue(1.0, series2, type8);\n\n        return result;\n\n    }",
        "begin_line": 158,
        "end_line": 196,
        "comment": "\n     * Creates a dataset.\n     *\n     * @return A dataset.\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 69)",
            "(line 163,col 9)-(line 163,col 33)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 167,col 9)-(line 167,col 32)",
            "(line 168,col 9)-(line 168,col 32)",
            "(line 169,col 9)-(line 169,col 32)",
            "(line 170,col 9)-(line 170,col 32)",
            "(line 171,col 9)-(line 171,col 32)",
            "(line 172,col 9)-(line 172,col 32)",
            "(line 173,col 9)-(line 173,col 32)",
            "(line 174,col 9)-(line 174,col 32)",
            "(line 176,col 9)-(line 176,col 45)",
            "(line 177,col 9)-(line 177,col 45)",
            "(line 178,col 9)-(line 178,col 45)",
            "(line 179,col 9)-(line 179,col 45)",
            "(line 180,col 9)-(line 180,col 45)",
            "(line 181,col 9)-(line 181,col 45)",
            "(line 182,col 9)-(line 182,col 45)",
            "(line 183,col 9)-(line 183,col 45)",
            "(line 185,col 9)-(line 185,col 45)",
            "(line 186,col 9)-(line 186,col 45)",
            "(line 187,col 9)-(line 187,col 45)",
            "(line 188,col 9)-(line 188,col 45)",
            "(line 189,col 9)-(line 189,col 45)",
            "(line 190,col 9)-(line 190,col 45)",
            "(line 191,col 9)-(line 191,col 45)",
            "(line 192,col 9)-(line 192,col 45)",
            "(line 194,col 9)-(line 194,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests.createDataset2()",
        "snippet": "    public CategoryDataset createDataset2() {\n\n        DefaultCategoryDataset result = new DefaultCategoryDataset();\n\n        // row keys...\n        String series1 = \"Third\";\n        String series2 = \"Fourth\";\n\n        // column keys...\n        String type1 = \"Type 1\";\n        String type2 = \"Type 2\";\n        String type3 = \"Type 3\";\n        String type4 = \"Type 4\";\n        String type5 = \"Type 5\";\n        String type6 = \"Type 6\";\n        String type7 = \"Type 7\";\n        String type8 = \"Type 8\";\n\n        result.addValue(11.0, series1, type1);\n        result.addValue(14.0, series1, type2);\n        result.addValue(13.0, series1, type3);\n        result.addValue(15.0, series1, type4);\n        result.addValue(15.0, series1, type5);\n        result.addValue(17.0, series1, type6);\n        result.addValue(17.0, series1, type7);\n        result.addValue(18.0, series1, type8);\n\n        result.addValue(15.0, series2, type1);\n        result.addValue(17.0, series2, type2);\n        result.addValue(16.0, series2, type3);\n        result.addValue(18.0, series2, type4);\n        result.addValue(14.0, series2, type5);\n        result.addValue(14.0, series2, type6);\n        result.addValue(12.0, series2, type7);\n        result.addValue(11.0, series2, type8);\n\n        return result;\n\n    }",
        "begin_line": 203,
        "end_line": 241,
        "comment": "\n     * Creates a dataset.\n     *\n     * @return A dataset.\n     ",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 69)",
            "(line 208,col 9)-(line 208,col 33)",
            "(line 209,col 9)-(line 209,col 34)",
            "(line 212,col 9)-(line 212,col 32)",
            "(line 213,col 9)-(line 213,col 32)",
            "(line 214,col 9)-(line 214,col 32)",
            "(line 215,col 9)-(line 215,col 32)",
            "(line 216,col 9)-(line 216,col 32)",
            "(line 217,col 9)-(line 217,col 32)",
            "(line 218,col 9)-(line 218,col 32)",
            "(line 219,col 9)-(line 219,col 32)",
            "(line 221,col 9)-(line 221,col 46)",
            "(line 222,col 9)-(line 222,col 46)",
            "(line 223,col 9)-(line 223,col 46)",
            "(line 224,col 9)-(line 224,col 46)",
            "(line 225,col 9)-(line 225,col 46)",
            "(line 226,col 9)-(line 226,col 46)",
            "(line 227,col 9)-(line 227,col 46)",
            "(line 228,col 9)-(line 228,col 46)",
            "(line 230,col 9)-(line 230,col 46)",
            "(line 231,col 9)-(line 231,col 46)",
            "(line 232,col 9)-(line 232,col 46)",
            "(line 233,col 9)-(line 233,col 46)",
            "(line 234,col 9)-(line 234,col 46)",
            "(line 235,col 9)-(line 235,col 46)",
            "(line 236,col 9)-(line 236,col 46)",
            "(line 237,col 9)-(line 237,col 46)",
            "(line 239,col 9)-(line 239,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CombinedDomainCategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests.createPlot()",
        "snippet": "    private CombinedDomainCategoryPlot createPlot() {\n        \n        CategoryDataset dataset1 = createDataset1();\n        NumberAxis rangeAxis1 = new NumberAxis(\"Value\");\n        rangeAxis1.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        LineAndShapeRenderer renderer1 = new LineAndShapeRenderer();\n        renderer1.setBaseToolTipGenerator(\n            new StandardCategoryToolTipGenerator()\n        );\n        CategoryPlot subplot1 = new CategoryPlot(\n            dataset1, null, rangeAxis1, renderer1\n        );\n        subplot1.setDomainGridlinesVisible(true);\n        \n        CategoryDataset dataset2 = createDataset2();\n        NumberAxis rangeAxis2 = new NumberAxis(\"Value\");\n        rangeAxis2.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        BarRenderer renderer2 = new BarRenderer();\n        renderer2.setBaseToolTipGenerator(\n            new StandardCategoryToolTipGenerator()\n        );\n        CategoryPlot subplot2 = new CategoryPlot(\n            dataset2, null, rangeAxis2, renderer2\n        );\n        subplot2.setDomainGridlinesVisible(true);\n\n        CategoryAxis domainAxis = new CategoryAxis(\"Category\");\n        CombinedDomainCategoryPlot plot \n            = new CombinedDomainCategoryPlot(domainAxis);\n        plot.add(subplot1, 2);\n        plot.add(subplot2, 1);\n        return plot;\n        \n    }",
        "begin_line": 248,
        "end_line": 281,
        "comment": "\n     * Creates a sample plot.\n     * \n     * @return A sample plot.\n     ",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 52)",
            "(line 251,col 9)-(line 251,col 56)",
            "(line 252,col 9)-(line 252,col 77)",
            "(line 253,col 9)-(line 253,col 68)",
            "(line 254,col 9)-(line 256,col 10)",
            "(line 257,col 9)-(line 259,col 10)",
            "(line 260,col 9)-(line 260,col 49)",
            "(line 262,col 9)-(line 262,col 52)",
            "(line 263,col 9)-(line 263,col 56)",
            "(line 264,col 9)-(line 264,col 77)",
            "(line 265,col 9)-(line 265,col 50)",
            "(line 266,col 9)-(line 268,col 10)",
            "(line 269,col 9)-(line 271,col 10)",
            "(line 272,col 9)-(line 272,col 49)",
            "(line 274,col 9)-(line 274,col 63)",
            "(line 275,col 9)-(line 276,col 57)",
            "(line 277,col 9)-(line 277,col 30)",
            "(line 278,col 9)-(line 278,col 30)",
            "(line 279,col 9)-(line 279,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ThermometerPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ThermometerPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.ThermometerPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ThermometerPlotTests.class);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ThermometerPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ThermometerPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.ThermometerPlotTests.ThermometerPlotTests(java.lang.String)",
        "snippet": "    public ThermometerPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ThermometerPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ThermometerPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.ThermometerPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n    \tThermometerPlot p1 = new ThermometerPlot();\n    \tThermometerPlot p2 = new ThermometerPlot();\n    \tassertTrue(p1.equals(p2));\n    \tassertTrue(p2.equals(p1));\n        \n        // padding\n        p1.setPadding(new RectangleInsets(1.0, 2.0, 3.0, 4.0));\n        assertFalse(p1.equals(p2));\n        p2.setPadding(new RectangleInsets(1.0, 2.0, 3.0, 4.0));\n        assertTrue(p2.equals(p1));\n\n        // thermometerStroke\n        BasicStroke s = new BasicStroke(1.23f);\n        p1.setThermometerStroke(s);\n        assertFalse(p1.equals(p2));\n        p2.setThermometerStroke(s);\n        assertTrue(p2.equals(p1));\n\n        // thermometerPaint\n        p1.setThermometerPaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertFalse(p1.equals(p2));\n        p2.setThermometerPaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertTrue(p2.equals(p1));\n        \n        // units\n        p1.setUnits(ThermometerPlot.UNITS_KELVIN);\n        assertFalse(p1.equals(p2));\n        p2.setUnits(ThermometerPlot.UNITS_KELVIN);\n        assertTrue(p2.equals(p1));\n        \n        // valueLocation\n        p1.setValueLocation(ThermometerPlot.LEFT);\n        assertFalse(p1.equals(p2));\n        p2.setValueLocation(ThermometerPlot.LEFT);\n        assertTrue(p2.equals(p1));\n        \n        // axisLocation\n        p1.setAxisLocation(ThermometerPlot.RIGHT);\n        assertFalse(p1.equals(p2));\n        p2.setAxisLocation(ThermometerPlot.RIGHT);\n        assertTrue(p2.equals(p1));\n        \n        // valueFont\n        p1.setValueFont(new Font(\"Serif\", Font.PLAIN, 9));\n        assertFalse(p1.equals(p2));\n        p2.setValueFont(new Font(\"Serif\", Font.PLAIN, 9));\n        assertTrue(p2.equals(p1));\n        \n        // valuePaint\n        p1.setValuePaint(new GradientPaint(4.0f, 5.0f, Color.red, \n                6.0f, 7.0f, Color.white));\n        assertFalse(p1.equals(p2));\n        p2.setValuePaint(new GradientPaint(4.0f, 5.0f, Color.red, \n                6.0f, 7.0f, Color.white));\n        assertTrue(p2.equals(p1));\n        \n        // valueFormat\n        p1.setValueFormat(new DecimalFormat(\"0.0000\"));\n        assertFalse(p1.equals(p2));\n        p2.setValueFormat(new DecimalFormat(\"0.0000\"));\n        assertTrue(p2.equals(p1));\n        \n        // mercuryPaint\n        p1.setMercuryPaint(new GradientPaint(9.0f, 8.0f, Color.red, \n                7.0f, 6.0f, Color.blue));\n        assertFalse(p1.equals(p2));\n        p2.setMercuryPaint(new GradientPaint(9.0f, 8.0f, Color.red, \n                7.0f, 6.0f, Color.blue));\n        assertTrue(p2.equals(p1));\n        \n        p1.setSubrange(1, 1.0, 2.0);\n        assertFalse(p1.equals(p2));\n        p2.setSubrange(1, 1.0, 2.0);\n        assertTrue(p2.equals(p1));\n        \n        p1.setSubrangePaint(1, new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(p1.equals(p2));\n        p2.setSubrangePaint(1, new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(p2.equals(p1));\n        \n        p1.setBulbRadius(9);\n        assertFalse(p1.equals(p2));\n        p2.setBulbRadius(9);\n        assertTrue(p2.equals(p1));\n        \n        p1.setColumnRadius(8);\n        assertFalse(p1.equals(p2));\n        p2.setColumnRadius(8);\n        assertTrue(p2.equals(p1));\n        \n        p1.setGap(7);\n        assertFalse(p1.equals(p2));\n        p2.setGap(7);\n        assertTrue(p2.equals(p1));\n    }",
        "begin_line": 93,
        "end_line": 192,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 94,col 6)-(line 94,col 48)",
            "(line 95,col 6)-(line 95,col 48)",
            "(line 96,col 6)-(line 96,col 31)",
            "(line 97,col 6)-(line 97,col 31)",
            "(line 100,col 9)-(line 100,col 63)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 63)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 106,col 9)-(line 106,col 47)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 113,col 9)-(line 114,col 40)",
            "(line 115,col 9)-(line 115,col 35)",
            "(line 116,col 9)-(line 117,col 40)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 121,col 9)-(line 121,col 50)",
            "(line 122,col 9)-(line 122,col 35)",
            "(line 123,col 9)-(line 123,col 50)",
            "(line 124,col 9)-(line 124,col 34)",
            "(line 127,col 9)-(line 127,col 50)",
            "(line 128,col 9)-(line 128,col 35)",
            "(line 129,col 9)-(line 129,col 50)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 133,col 9)-(line 133,col 50)",
            "(line 134,col 9)-(line 134,col 35)",
            "(line 135,col 9)-(line 135,col 50)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 139,col 9)-(line 139,col 58)",
            "(line 140,col 9)-(line 140,col 35)",
            "(line 141,col 9)-(line 141,col 58)",
            "(line 142,col 9)-(line 142,col 34)",
            "(line 145,col 9)-(line 146,col 42)",
            "(line 147,col 9)-(line 147,col 35)",
            "(line 148,col 9)-(line 149,col 42)",
            "(line 150,col 9)-(line 150,col 34)",
            "(line 153,col 9)-(line 153,col 55)",
            "(line 154,col 9)-(line 154,col 35)",
            "(line 155,col 9)-(line 155,col 55)",
            "(line 156,col 9)-(line 156,col 34)",
            "(line 159,col 9)-(line 160,col 41)",
            "(line 161,col 9)-(line 161,col 35)",
            "(line 162,col 9)-(line 163,col 41)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 166,col 9)-(line 166,col 36)",
            "(line 167,col 9)-(line 167,col 35)",
            "(line 168,col 9)-(line 168,col 36)",
            "(line 169,col 9)-(line 169,col 34)",
            "(line 171,col 9)-(line 172,col 43)",
            "(line 173,col 9)-(line 173,col 35)",
            "(line 174,col 9)-(line 175,col 43)",
            "(line 176,col 9)-(line 176,col 34)",
            "(line 178,col 9)-(line 178,col 28)",
            "(line 179,col 9)-(line 179,col 35)",
            "(line 180,col 9)-(line 180,col 28)",
            "(line 181,col 9)-(line 181,col 34)",
            "(line 183,col 9)-(line 183,col 30)",
            "(line 184,col 9)-(line 184,col 35)",
            "(line 185,col 9)-(line 185,col 30)",
            "(line 186,col 9)-(line 186,col 34)",
            "(line 188,col 9)-(line 188,col 21)",
            "(line 189,col 9)-(line 189,col 35)",
            "(line 190,col 9)-(line 190,col 21)",
            "(line 191,col 9)-(line 191,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ThermometerPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ThermometerPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.ThermometerPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        ThermometerPlot p1 = new ThermometerPlot();\n        ThermometerPlot p2 = null;\n        try {\n            p2 = (ThermometerPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 197,
        "end_line": 209,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 51)",
            "(line 199,col 9)-(line 199,col 34)",
            "(line 200,col 9)-(line 205,col 9)",
            "(line 206,col 9)-(line 206,col 29)",
            "(line 207,col 9)-(line 207,col 51)",
            "(line 208,col 9)-(line 208,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ThermometerPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ThermometerPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.ThermometerPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        ThermometerPlot p1 = new ThermometerPlot();\n        ThermometerPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (ThermometerPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1.equals(p2));\n\n    }",
        "begin_line": 214,
        "end_line": 235,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 51)",
            "(line 217,col 9)-(line 217,col 34)",
            "(line 219,col 9)-(line 232,col 9)",
            "(line 233,col 9)-(line 233,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.ThermometerPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/ThermometerPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.ThermometerPlotTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n        ThermometerPlot p1 = new ThermometerPlot();\n        p1.setSubrangePaint(1, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.blue));\n        ThermometerPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (ThermometerPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 240,
        "end_line": 261,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 51)",
            "(line 242,col 9)-(line 243,col 35)",
            "(line 244,col 9)-(line 244,col 34)",
            "(line 246,col 9)-(line 259,col 9)",
            "(line 260,col 9)-(line 260,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotRenderingInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotRenderingInfoTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotRenderingInfoTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PlotRenderingInfoTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotRenderingInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotRenderingInfoTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotRenderingInfoTests.PlotRenderingInfoTests(java.lang.String)",
        "snippet": "    public PlotRenderingInfoTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotRenderingInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotRenderingInfoTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotRenderingInfoTests.testEquals()",
        "snippet": "    public void testEquals() {       \n        PlotRenderingInfo p1 = new PlotRenderingInfo(new ChartRenderingInfo());\n        PlotRenderingInfo p2 = new PlotRenderingInfo(new ChartRenderingInfo());\n        assertTrue(p1.equals(p2));\n        assertTrue(p2.equals(p1));\n        \n        p1.setPlotArea(new Rectangle(2, 3, 4, 5));\n        assertFalse(p1.equals(p2));\n        p2.setPlotArea(new Rectangle(2, 3, 4, 5));\n        assertTrue(p1.equals(p2));\n        \n        p1.setDataArea(new Rectangle(2, 4, 6, 8));\n        assertFalse(p1.equals(p2));\n        p2.setDataArea(new Rectangle(2, 4, 6, 8));\n        assertTrue(p1.equals(p2));\n\n        p1.addSubplotInfo(new PlotRenderingInfo(null));\n        assertFalse(p1.equals(p2));\n        p2.addSubplotInfo(new PlotRenderingInfo(null));\n        assertTrue(p1.equals(p2));\n        \n        p1.getSubplotInfo(0).setDataArea(new Rectangle(1, 2, 3, 4));\n        assertFalse(p1.equals(p2));\n        p2.getSubplotInfo(0).setDataArea(new Rectangle(1, 2, 3, 4));\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 85,
        "end_line": 110,
        "comment": "\n     * Test the equals() method.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 79)",
            "(line 87,col 9)-(line 87,col 79)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 91,col 9)-(line 91,col 50)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 50)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 96,col 50)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 50)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 101,col 55)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 55)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 106,col 9)-(line 106,col 68)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 68)",
            "(line 109,col 9)-(line 109,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotRenderingInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotRenderingInfoTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotRenderingInfoTests.testCloning()",
        "snippet": "    public void testCloning() {\n        PlotRenderingInfo p1 = new PlotRenderingInfo(new ChartRenderingInfo());\n        p1.setPlotArea(new Rectangle2D.Double());\n        PlotRenderingInfo p2 = null;\n        try {\n            p2 = (PlotRenderingInfo) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        \n        // check independence\n        p1.getPlotArea().setRect(1.0, 2.0, 3.0, 4.0);\n        assertFalse(p1.equals(p2));\n        p2.getPlotArea().setRect(1.0, 2.0, 3.0, 4.0);\n        assertTrue(p1.equals(p2));\n        \n        p1.getDataArea().setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(p1.equals(p2));\n        p2.getDataArea().setRect(4.0, 3.0, 2.0, 1.0);\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 115,
        "end_line": 139,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 79)",
            "(line 117,col 9)-(line 117,col 49)",
            "(line 118,col 9)-(line 118,col 36)",
            "(line 119,col 9)-(line 124,col 9)",
            "(line 125,col 9)-(line 125,col 29)",
            "(line 126,col 9)-(line 126,col 51)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 130,col 9)-(line 130,col 53)",
            "(line 131,col 9)-(line 131,col 35)",
            "(line 132,col 9)-(line 132,col 53)",
            "(line 133,col 9)-(line 133,col 34)",
            "(line 135,col 9)-(line 135,col 53)",
            "(line 136,col 9)-(line 136,col 35)",
            "(line 137,col 9)-(line 137,col 53)",
            "(line 138,col 9)-(line 138,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PlotRenderingInfoTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PlotRenderingInfoTests.java",
        "signature": "org.jfree.chart.plot.junit.PlotRenderingInfoTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        PlotRenderingInfo p1 = new PlotRenderingInfo(new ChartRenderingInfo());\n        PlotRenderingInfo p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            p2 = (PlotRenderingInfo) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(p1, p2);\n\n    }",
        "begin_line": 144,
        "end_line": 166,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 79)",
            "(line 147,col 9)-(line 147,col 36)",
            "(line 149,col 9)-(line 163,col 9)",
            "(line 164,col 9)-(line 164,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialBackgroundTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialBackgroundTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialBackgroundTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DialBackgroundTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialBackgroundTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialBackgroundTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialBackgroundTests.DialBackgroundTests(java.lang.String)",
        "snippet": "    public DialBackgroundTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialBackgroundTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialBackgroundTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialBackgroundTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DialBackground b1 = new DialBackground();\n        DialBackground b2 = new DialBackground();\n        assertTrue(b1.equals(b2));\n        \n        // paint\n        b1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.yellow));\n        assertFalse(b1.equals(b2));\n        b2.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.yellow));\n        assertTrue(b1.equals(b2));\n        \n        // gradient paint transformer\n        b1.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        assertFalse(b1.equals(b2));\n        b2.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        assertTrue(b1.equals(b2));\n        \n        // check an inherited attribute\n        b1.setVisible(false);\n        assertFalse(b1.equals(b2));\n        b2.setVisible(false);\n        assertTrue(b1.equals(b2));\n        \n    }",
        "begin_line": 87,
        "end_line": 114,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 49)",
            "(line 89,col 9)-(line 89,col 49)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 93,col 9)-(line 94,col 31)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 97,col 31)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 101,col 9)-(line 102,col 61)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 105,col 61)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 109,col 9)-(line 109,col 29)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 111,col 29)",
            "(line 112,col 9)-(line 112,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialBackgroundTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialBackgroundTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialBackgroundTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        DialBackground b1 = new DialBackground(Color.red);\n        DialBackground b2 = new DialBackground(Color.red);\n        assertTrue(b1.equals(b2));\n        int h1 = b1.hashCode();\n        int h2 = b2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 119,
        "end_line": 126,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 58)",
            "(line 121,col 9)-(line 121,col 58)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 123,col 9)-(line 123,col 31)",
            "(line 124,col 9)-(line 124,col 31)",
            "(line 125,col 9)-(line 125,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialBackgroundTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialBackgroundTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialBackgroundTests.testCloning()",
        "snippet": "    public void testCloning() {\n        // test default instance\n        DialBackground b1 = new DialBackground();\n        DialBackground b2 = null;\n        try {\n            b2 = (DialBackground) b1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(b1 != b2);\n        assertTrue(b1.getClass() == b2.getClass());\n        assertTrue(b1.equals(b2));\n        \n        // test a customised instance\n        b1 = new DialBackground();\n        b1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f,\n                Color.green));\n        b1.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        b2 = null;\n        try {\n            b2 = (DialBackground) b1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(b1 != b2);\n        assertTrue(b1.getClass() == b2.getClass());\n        assertTrue(b1.equals(b2));\n        \n        // check that the listener lists are independent\n        MyDialLayerChangeListener l1 = new MyDialLayerChangeListener();\n        b1.addChangeListener(l1);\n        assertTrue(b1.hasListener(l1));\n        assertFalse(b2.hasListener(l1));\n    }",
        "begin_line": 131,
        "end_line": 167,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 49)",
            "(line 134,col 9)-(line 134,col 33)",
            "(line 135,col 9)-(line 140,col 9)",
            "(line 141,col 9)-(line 141,col 29)",
            "(line 142,col 9)-(line 142,col 51)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 146,col 9)-(line 146,col 34)",
            "(line 147,col 9)-(line 148,col 30)",
            "(line 149,col 9)-(line 150,col 61)",
            "(line 151,col 9)-(line 151,col 18)",
            "(line 152,col 9)-(line 157,col 9)",
            "(line 158,col 9)-(line 158,col 29)",
            "(line 159,col 9)-(line 159,col 51)",
            "(line 160,col 9)-(line 160,col 34)",
            "(line 163,col 9)-(line 163,col 71)",
            "(line 164,col 9)-(line 164,col 33)",
            "(line 165,col 9)-(line 165,col 39)",
            "(line 166,col 9)-(line 166,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialBackgroundTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialBackgroundTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialBackgroundTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        // test a default instance\n        DialBackground b1 = new DialBackground();\n        DialBackground b2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(b1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            b2 = (DialBackground) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(b1, b2);\n        \n        // test a customised instance\n        b1 = new DialBackground();\n        b1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f,\n                Color.green));\n        b1.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        b2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(b1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            b2 = (DialBackground) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(b1, b2);\n    }",
        "begin_line": 173,
        "end_line": 217,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 49)",
            "(line 176,col 9)-(line 176,col 33)",
            "(line 178,col 9)-(line 191,col 9)",
            "(line 192,col 9)-(line 192,col 29)",
            "(line 195,col 9)-(line 195,col 34)",
            "(line 196,col 9)-(line 197,col 30)",
            "(line 198,col 9)-(line 199,col 61)",
            "(line 200,col 9)-(line 200,col 18)",
            "(line 202,col 9)-(line 215,col 9)",
            "(line 216,col 9)-(line 216,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.MyDialLayerChangeListener",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/MyDialLayerChangeListener.java",
        "signature": "org.jfree.chart.plot.dial.junit.MyDialLayerChangeListener.MyDialLayerChangeListener()",
        "snippet": "    public MyDialLayerChangeListener() {        \n    }",
        "begin_line": 54,
        "end_line": 55,
        "comment": "\n     * Creates a new instance.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.MyDialLayerChangeListener",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/MyDialLayerChangeListener.java",
        "signature": "org.jfree.chart.plot.dial.junit.MyDialLayerChangeListener.dialLayerChanged(org.jfree.chart.plot.dial.DialLayerChangeEvent)",
        "snippet": "    public void dialLayerChanged(DialLayerChangeEvent event) { \n    }",
        "begin_line": 62,
        "end_line": 63,
        "comment": "\n     * Receives a change event.\n     * \n     * @param event  the event.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPackageTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\n                \"org.jfree.experimental.chart.plot.dial\");\n        suite.addTestSuite(AbstractDialLayerTests.class);\n        suite.addTestSuite(DialBackgroundTests.class);\n        suite.addTestSuite(DialCapTests.class);\n        suite.addTestSuite(DialPlotTests.class);\n        suite.addTestSuite(DialPointerTests.class);\n        suite.addTestSuite(DialTextAnnotationTests.class);\n        suite.addTestSuite(DialValueIndicatorTests.class);\n        suite.addTestSuite(StandardDialFrameTests.class);\n        suite.addTestSuite(ArcDialFrameTests.class);\n        suite.addTestSuite(StandardDialRangeTests.class);\n        suite.addTestSuite(StandardDialScaleTests.class);\n        return suite;\n    }",
        "begin_line": 59,
        "end_line": 74,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 60,col 9)-(line 61,col 58)",
            "(line 62,col 9)-(line 62,col 57)",
            "(line 63,col 9)-(line 63,col 54)",
            "(line 64,col 9)-(line 64,col 47)",
            "(line 65,col 9)-(line 65,col 48)",
            "(line 66,col 9)-(line 66,col 51)",
            "(line 67,col 9)-(line 67,col 58)",
            "(line 68,col 9)-(line 68,col 58)",
            "(line 69,col 9)-(line 69,col 57)",
            "(line 70,col 9)-(line 70,col 52)",
            "(line 71,col 9)-(line 71,col 57)",
            "(line 72,col 9)-(line 72,col 57)",
            "(line 73,col 9)-(line 73,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPackageTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPackageTests.DialPackageTests(java.lang.String)",
        "snippet": "    public DialPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the suite name.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPackageTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialValueIndicatorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialValueIndicatorTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialValueIndicatorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DialValueIndicatorTests.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialValueIndicatorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialValueIndicatorTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialValueIndicatorTests.DialValueIndicatorTests(java.lang.String)",
        "snippet": "    public DialValueIndicatorTests(String name) {\n        super(name);\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialValueIndicatorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialValueIndicatorTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialValueIndicatorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DialValueIndicator i1 = new DialValueIndicator(0);\n        DialValueIndicator i2 = new DialValueIndicator(0);\n        assertTrue(i1.equals(i2));\n        \n        // dataset index\n        i1.setDatasetIndex(99);\n        assertFalse(i1.equals(i2));\n        i2.setDatasetIndex(99);\n        assertTrue(i1.equals(i2));\n        \n        // angle\n        i1.setAngle(43);\n        assertFalse(i1.equals(i2));\n        i2.setAngle(43);\n        assertTrue(i1.equals(i2));\n        \n        // radius\n        i1.setRadius(0.77);\n        assertFalse(i1.equals(i2));\n        i2.setRadius(0.77);\n        assertTrue(i1.equals(i2));\n        \n        // frameAnchor\n        i1.setFrameAnchor(RectangleAnchor.TOP_LEFT);\n        assertFalse(i1.equals(i2));\n        i2.setFrameAnchor(RectangleAnchor.TOP_LEFT);\n        assertTrue(i1.equals(i2));\n        \n        // templateValue\n        i1.setTemplateValue(new Double(1.23));\n        assertFalse(i1.equals(i2));\n        i2.setTemplateValue(new Double(1.23));\n        assertTrue(i1.equals(i2));\n        \n        // font\n        i1.setFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(i1.equals(i2));\n        i2.setFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(i1.equals(i2));\n        \n        // paint\n        i1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.green));\n        assertFalse(i1.equals(i2));\n        i2.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.green));\n        assertTrue(i1.equals(i2));\n\n        // backgroundPaint\n        i1.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.green));\n        assertFalse(i1.equals(i2));\n        i2.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.green));\n        assertTrue(i1.equals(i2));\n        \n        // outlineStroke\n        i1.setOutlineStroke(new BasicStroke(1.1f));\n        assertFalse(i1.equals(i2));\n        i2.setOutlineStroke(new BasicStroke(1.1f));\n        assertTrue(i1.equals(i2));\n        \n        // outlinePaint\n        i1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.green));\n        assertFalse(i1.equals(i2));\n        i2.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.green));\n        assertTrue(i1.equals(i2));\n\n        // insets\n        i1.setInsets(new RectangleInsets(1, 2, 3, 4));\n        assertFalse(i1.equals(i2));\n        i2.setInsets(new RectangleInsets(1, 2, 3, 4));\n        assertTrue(i1.equals(i2));\n        \n        // valueAnchor\n        i1.setValueAnchor(RectangleAnchor.BOTTOM_LEFT);        \n        assertFalse(i1.equals(i2));\n        i2.setValueAnchor(RectangleAnchor.BOTTOM_LEFT);       \n        assertTrue(i1.equals(i2));\n        \n        // textAnchor\n        i1.setTextAnchor(TextAnchor.TOP_LEFT);\n        assertFalse(i1.equals(i2));\n        i2.setTextAnchor(TextAnchor.TOP_LEFT);\n        assertTrue(i1.equals(i2));\n        \n        // check an inherited attribute\n        i1.setVisible(false);\n        assertFalse(i1.equals(i2));\n        i2.setVisible(false);\n        assertTrue(i1.equals(i2));\n    }",
        "begin_line": 91,
        "end_line": 185,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 58)",
            "(line 93,col 9)-(line 93,col 58)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 97,col 9)-(line 97,col 31)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 31)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 103,col 9)-(line 103,col 24)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 105,col 24)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 109,col 9)-(line 109,col 27)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 111,col 27)",
            "(line 112,col 9)-(line 112,col 34)",
            "(line 115,col 9)-(line 115,col 52)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 117,col 52)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 121,col 9)-(line 121,col 46)",
            "(line 122,col 9)-(line 122,col 35)",
            "(line 123,col 9)-(line 123,col 46)",
            "(line 124,col 9)-(line 124,col 34)",
            "(line 127,col 9)-(line 127,col 54)",
            "(line 128,col 9)-(line 128,col 35)",
            "(line 129,col 9)-(line 129,col 54)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 133,col 9)-(line 134,col 30)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 137,col 30)",
            "(line 138,col 9)-(line 138,col 34)",
            "(line 141,col 9)-(line 142,col 36)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 145,col 36)",
            "(line 146,col 9)-(line 146,col 34)",
            "(line 149,col 9)-(line 149,col 51)",
            "(line 150,col 9)-(line 150,col 35)",
            "(line 151,col 9)-(line 151,col 51)",
            "(line 152,col 9)-(line 152,col 34)",
            "(line 155,col 9)-(line 156,col 30)",
            "(line 157,col 9)-(line 157,col 35)",
            "(line 158,col 9)-(line 159,col 30)",
            "(line 160,col 9)-(line 160,col 34)",
            "(line 163,col 9)-(line 163,col 54)",
            "(line 164,col 9)-(line 164,col 35)",
            "(line 165,col 9)-(line 165,col 54)",
            "(line 166,col 9)-(line 166,col 34)",
            "(line 169,col 9)-(line 169,col 55)",
            "(line 170,col 9)-(line 170,col 35)",
            "(line 171,col 9)-(line 171,col 55)",
            "(line 172,col 9)-(line 172,col 34)",
            "(line 175,col 9)-(line 175,col 46)",
            "(line 176,col 9)-(line 176,col 35)",
            "(line 177,col 9)-(line 177,col 46)",
            "(line 178,col 9)-(line 178,col 34)",
            "(line 181,col 9)-(line 181,col 29)",
            "(line 182,col 9)-(line 182,col 35)",
            "(line 183,col 9)-(line 183,col 29)",
            "(line 184,col 9)-(line 184,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialValueIndicatorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialValueIndicatorTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialValueIndicatorTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        DialValueIndicator i1 = new DialValueIndicator(0);\n        DialValueIndicator i2 = new DialValueIndicator(0);\n        assertTrue(i1.equals(i2));\n        int h1 = i1.hashCode();\n        int h2 = i2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 190,
        "end_line": 197,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 58)",
            "(line 192,col 9)-(line 192,col 58)",
            "(line 193,col 9)-(line 193,col 34)",
            "(line 194,col 9)-(line 194,col 31)",
            "(line 195,col 9)-(line 195,col 31)",
            "(line 196,col 9)-(line 196,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialValueIndicatorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialValueIndicatorTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialValueIndicatorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        // test a default instance\n        DialValueIndicator i1 = new DialValueIndicator(0);\n        DialValueIndicator i2 = null;\n        try {\n            i2 = (DialValueIndicator) i1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(i1 != i2);\n        assertTrue(i1.getClass() == i2.getClass());\n        assertTrue(i1.equals(i2));\n        \n        // check that the listener lists are independent\n        MyDialLayerChangeListener l1 = new MyDialLayerChangeListener();\n        i1.addChangeListener(l1);\n        assertTrue(i1.hasListener(l1));\n        assertFalse(i2.hasListener(l1));\n    }",
        "begin_line": 202,
        "end_line": 221,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 58)",
            "(line 205,col 9)-(line 205,col 37)",
            "(line 206,col 9)-(line 211,col 9)",
            "(line 212,col 9)-(line 212,col 29)",
            "(line 213,col 9)-(line 213,col 51)",
            "(line 214,col 9)-(line 214,col 34)",
            "(line 217,col 9)-(line 217,col 71)",
            "(line 218,col 9)-(line 218,col 33)",
            "(line 219,col 9)-(line 219,col 39)",
            "(line 220,col 9)-(line 220,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialValueIndicatorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialValueIndicatorTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialValueIndicatorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        // test a default instance\n        DialValueIndicator i1 = new DialValueIndicator(0);\n        DialValueIndicator i2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(i1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            i2 = (DialValueIndicator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(i1, i2);\n        \n        // test a custom instance\n    }",
        "begin_line": 227,
        "end_line": 249,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 58)",
            "(line 230,col 9)-(line 230,col 37)",
            "(line 232,col 9)-(line 245,col 9)",
            "(line 246,col 9)-(line 246,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialRangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialRangeTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialRangeTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardDialRangeTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialRangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialRangeTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialRangeTests.StandardDialRangeTests(java.lang.String)",
        "snippet": "    public StandardDialRangeTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialRangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialRangeTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialRangeTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StandardDialRange r1 = new StandardDialRange();\n        StandardDialRange r2 = new StandardDialRange();\n        assertTrue(r1.equals(r2));\n        \n        // lowerBound\n        r1.setLowerBound(1.1);\n        assertFalse(r1.equals(r2));\n        r2.setLowerBound(1.1);\n        assertTrue(r1.equals(r2));\n        \n        // upperBound\n        r1.setUpperBound(11.1);\n        assertFalse(r1.equals(r2));\n        r2.setUpperBound(11.1);\n        assertTrue(r1.equals(r2));\n        \n        // paint\n        r1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.blue));\n        assertFalse(r1.equals(r2));\n        r2.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.blue));\n        assertTrue(r1.equals(r2));\n        \n        // check an inherited attribute\n        r1.setVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setVisible(false);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 84,
        "end_line": 114,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 55)",
            "(line 86,col 9)-(line 86,col 55)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 90,col 9)-(line 90,col 30)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 92,col 9)-(line 92,col 30)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 96,col 9)-(line 96,col 31)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 31)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 102,col 9)-(line 103,col 29)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 106,col 29)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 110,col 9)-(line 110,col 29)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 29)",
            "(line 113,col 9)-(line 113,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialRangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialRangeTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialRangeTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        StandardDialRange r1 = new StandardDialRange();\n        StandardDialRange r2 = new StandardDialRange();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 119,
        "end_line": 126,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 55)",
            "(line 121,col 9)-(line 121,col 55)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 123,col 9)-(line 123,col 31)",
            "(line 124,col 9)-(line 124,col 31)",
            "(line 125,col 9)-(line 125,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialRangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialRangeTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialRangeTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StandardDialRange r1 = new StandardDialRange();\n        StandardDialRange r2 = null;\n        try {\n            r2 = (StandardDialRange) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check that the listener lists are independent\n        MyDialLayerChangeListener l1 = new MyDialLayerChangeListener();\n        r1.addChangeListener(l1);\n        assertTrue(r1.hasListener(l1));\n        assertFalse(r2.hasListener(l1));\n    }",
        "begin_line": 131,
        "end_line": 149,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 55)",
            "(line 133,col 9)-(line 133,col 36)",
            "(line 134,col 9)-(line 139,col 9)",
            "(line 140,col 9)-(line 140,col 29)",
            "(line 141,col 9)-(line 141,col 51)",
            "(line 142,col 9)-(line 142,col 34)",
            "(line 145,col 9)-(line 145,col 71)",
            "(line 146,col 9)-(line 146,col 33)",
            "(line 147,col 9)-(line 147,col 39)",
            "(line 148,col 9)-(line 148,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialRangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialRangeTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialRangeTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        StandardDialRange r1 = new StandardDialRange();\n        StandardDialRange r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (StandardDialRange) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 154,
        "end_line": 173,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 55)",
            "(line 156,col 9)-(line 156,col 36)",
            "(line 158,col 9)-(line 171,col 9)",
            "(line 172,col 9)-(line 172,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialCapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialCapTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialCapTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DialCapTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialCapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialCapTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialCapTests.DialCapTests(java.lang.String)",
        "snippet": "    public DialCapTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialCapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialCapTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialCapTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DialCap c1 = new DialCap();\n        DialCap c2 = new DialCap();\n        assertTrue(c1.equals(c2));\n        \n        // radius\n        c1.setRadius(0.5);\n        assertFalse(c1.equals(c2));\n        c2.setRadius(0.5);\n        assertTrue(c1.equals(c2));\n        \n        // fill paint\n        c1.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.green));\n        assertFalse(c1.equals(c2));\n        c2.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.green));\n        \n        // outline paint\n        c1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.gray));\n        assertFalse(c1.equals(c2));\n        c2.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.gray));\n        \n        assertTrue(c1.equals(c2));\n\n        // outline stroke\n        c1.setOutlineStroke(new BasicStroke(1.1f));\n        assertFalse(c1.equals(c2));\n        c2.setOutlineStroke(new BasicStroke(1.1f));\n        assertTrue(c1.equals(c2));\n        \n        // check an inherited attribute\n        c1.setVisible(false);\n        assertFalse(c1.equals(c2));\n        c2.setVisible(false);\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 85,
        "end_line": 123,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 35)",
            "(line 87,col 9)-(line 87,col 35)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 91,col 9)-(line 91,col 26)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 26)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 97,col 9)-(line 98,col 42)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 101,col 42)",
            "(line 104,col 9)-(line 105,col 41)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 108,col 41)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 113,col 9)-(line 113,col 51)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 51)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 119,col 9)-(line 119,col 29)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 121,col 29)",
            "(line 122,col 9)-(line 122,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialCapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialCapTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialCapTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        DialCap c1 = new DialCap();\n        DialCap c2 = new DialCap();\n        assertTrue(c1.equals(c2));\n        int h1 = c1.hashCode();\n        int h2 = c2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 128,
        "end_line": 135,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 35)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 131,col 34)",
            "(line 132,col 9)-(line 132,col 31)",
            "(line 133,col 9)-(line 133,col 31)",
            "(line 134,col 9)-(line 134,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialCapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialCapTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialCapTests.testCloning()",
        "snippet": "    public void testCloning() {\n        // test a default instance\n        DialCap c1 = new DialCap();\n        DialCap c2 = null;\n        try {\n            c2 = (DialCap) c1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n        \n        // test a customised instance\n        c1 = new DialCap();\n        c1.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.green));\n        c1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.gray));\n        c1.setOutlineStroke(new BasicStroke(2.0f));\n        c2 = null;\n        try {\n            c2 = (DialCap) c1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n        \n        // check that the listener lists are independent\n        MyDialLayerChangeListener l1 = new MyDialLayerChangeListener();\n        c1.addChangeListener(l1);\n        assertTrue(c1.hasListener(l1));\n        assertFalse(c2.hasListener(l1));\n    }",
        "begin_line": 140,
        "end_line": 177,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 35)",
            "(line 143,col 9)-(line 143,col 26)",
            "(line 144,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 150,col 29)",
            "(line 151,col 9)-(line 151,col 51)",
            "(line 152,col 9)-(line 152,col 34)",
            "(line 155,col 9)-(line 155,col 27)",
            "(line 156,col 9)-(line 157,col 42)",
            "(line 158,col 9)-(line 159,col 41)",
            "(line 160,col 9)-(line 160,col 51)",
            "(line 161,col 9)-(line 161,col 18)",
            "(line 162,col 9)-(line 167,col 9)",
            "(line 168,col 9)-(line 168,col 29)",
            "(line 169,col 9)-(line 169,col 51)",
            "(line 170,col 9)-(line 170,col 34)",
            "(line 173,col 9)-(line 173,col 71)",
            "(line 174,col 9)-(line 174,col 33)",
            "(line 175,col 9)-(line 175,col 39)",
            "(line 176,col 9)-(line 176,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialCapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialCapTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialCapTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        // test a default instance\n        DialCap c1 = new DialCap();\n        DialCap c2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            c2 = (DialCap) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n        \n        // test a custom instance\n        c1 = new DialCap();\n        c1.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.green));\n        c1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.gray));\n        c1.setOutlineStroke(new BasicStroke(2.0f));\n        c2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            c2 = (DialCap) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n    }",
        "begin_line": 183,
        "end_line": 228,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 35)",
            "(line 186,col 9)-(line 186,col 26)",
            "(line 188,col 9)-(line 201,col 9)",
            "(line 202,col 9)-(line 202,col 29)",
            "(line 205,col 9)-(line 205,col 27)",
            "(line 206,col 9)-(line 207,col 42)",
            "(line 208,col 9)-(line 209,col 41)",
            "(line 210,col 9)-(line 210,col 51)",
            "(line 211,col 9)-(line 211,col 18)",
            "(line 213,col 9)-(line 226,col 9)",
            "(line 227,col 9)-(line 227,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPlotTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPlotTests.plotChanged(org.jfree.chart.event.PlotChangeEvent)",
        "snippet": "    public void plotChanged(PlotChangeEvent event) {\n        this.lastEvent = event;    \n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Records the last plot change event received.\n     * \n     * @param event  the event.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPlotTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DialPlotTests.class);\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPlotTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPlotTests.DialPlotTests(java.lang.String)",
        "snippet": "    public DialPlotTests(String name) {\n        super(name);\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPlotTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DialPlot p1 = new DialPlot();\n        DialPlot p2 = new DialPlot();\n        assertTrue(p1.equals(p2));\n        \n        // background\n        p1.setBackground(new DialBackground(Color.green));\n        assertFalse(p1.equals(p2));\n        p2.setBackground(new DialBackground(Color.green));\n        assertTrue(p1.equals(p2));\n        \n        p1.setBackground(null);\n        assertFalse(p1.equals(p2));\n        p2.setBackground(null);\n        assertTrue(p1.equals(p2));\n        \n        // dial cap\n        DialCap cap1 = new DialCap();\n        cap1.setFillPaint(Color.red);\n        p1.setCap(cap1);\n        assertFalse(p1.equals(p2));\n        DialCap cap2 = new DialCap();\n        cap2.setFillPaint(Color.red);\n        p2.setCap(cap2);\n        assertTrue(p1.equals(p2));\n        \n        p1.setCap(null);\n        assertFalse(p1.equals(p2));\n        p2.setCap(null);\n        assertTrue(p1.equals(p2));\n        \n        // frame\n        StandardDialFrame f1 = new StandardDialFrame();\n        f1.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.white));\n        p1.setDialFrame(f1);\n        assertFalse(p1.equals(p2));\n        StandardDialFrame f2 = new StandardDialFrame();\n        f2.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.white));\n        p2.setDialFrame(f2);\n        assertTrue(p1.equals(p2));\n        \n        // view\n        p1.setView(0.2, 0.0, 0.8, 1.0);\n        assertFalse(p1.equals(p2));\n        p2.setView(0.2, 0.0, 0.8, 1.0);\n        assertTrue(p1.equals(p2));\n        \n        // layer\n        p1.addLayer(new StandardDialScale());\n        assertFalse(p1.equals(p2));\n        p2.addLayer(new StandardDialScale());\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 104,
        "end_line": 158,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 37)",
            "(line 106,col 9)-(line 106,col 37)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 110,col 9)-(line 110,col 58)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 58)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 115,col 9)-(line 115,col 31)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 117,col 31)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 121,col 9)-(line 121,col 37)",
            "(line 122,col 9)-(line 122,col 37)",
            "(line 123,col 9)-(line 123,col 24)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 125,col 37)",
            "(line 126,col 9)-(line 126,col 37)",
            "(line 127,col 9)-(line 127,col 24)",
            "(line 128,col 9)-(line 128,col 34)",
            "(line 130,col 9)-(line 130,col 24)",
            "(line 131,col 9)-(line 131,col 35)",
            "(line 132,col 9)-(line 132,col 24)",
            "(line 133,col 9)-(line 133,col 34)",
            "(line 136,col 9)-(line 136,col 55)",
            "(line 137,col 9)-(line 138,col 36)",
            "(line 139,col 9)-(line 139,col 28)",
            "(line 140,col 9)-(line 140,col 35)",
            "(line 141,col 9)-(line 141,col 55)",
            "(line 142,col 9)-(line 143,col 36)",
            "(line 144,col 9)-(line 144,col 28)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 148,col 9)-(line 148,col 39)",
            "(line 149,col 9)-(line 149,col 35)",
            "(line 150,col 9)-(line 150,col 39)",
            "(line 151,col 9)-(line 151,col 34)",
            "(line 154,col 9)-(line 154,col 45)",
            "(line 155,col 9)-(line 155,col 35)",
            "(line 156,col 9)-(line 156,col 45)",
            "(line 157,col 9)-(line 157,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPlotTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPlotTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        DialPlot p1 = new DialPlot();\n        DialPlot p2 = new DialPlot();\n        assertTrue(p1.equals(p2));\n        int h1 = p1.hashCode();\n        int h2 = p2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 163,
        "end_line": 170,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 37)",
            "(line 165,col 9)-(line 165,col 37)",
            "(line 166,col 9)-(line 166,col 34)",
            "(line 167,col 9)-(line 167,col 31)",
            "(line 168,col 9)-(line 168,col 31)",
            "(line 169,col 9)-(line 169,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPlotTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DialPlot p1 = new DialPlot();\n        DialPlot p2 = null;\n        try {\n            p2 = (DialPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 175,
        "end_line": 187,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 37)",
            "(line 177,col 9)-(line 177,col 27)",
            "(line 178,col 9)-(line 183,col 9)",
            "(line 184,col 9)-(line 184,col 29)",
            "(line 185,col 9)-(line 185,col 51)",
            "(line 186,col 9)-(line 186,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPlotTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        DialPlot p1 = new DialPlot();\n        DialPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (DialPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(p1, p2);\n    }",
        "begin_line": 193,
        "end_line": 212,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 37)",
            "(line 195,col 9)-(line 195,col 27)",
            "(line 197,col 9)-(line 210,col 9)",
            "(line 211,col 9)-(line 211,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPlotTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPlotTests.testBackgroundListener()",
        "snippet": "    public void testBackgroundListener() {\n        DialPlot p = new DialPlot();\n        DialBackground b1 = new DialBackground(Color.red);\n        p.setBackground(b1);\n        p.addChangeListener(this);\n        this.lastEvent = null;\n        b1.setPaint(Color.blue);\n        assertNotNull(this.lastEvent);\n        \n        DialBackground b2 = new DialBackground(Color.green);\n        p.setBackground(b2);\n        this.lastEvent = null;\n        b1.setPaint(Color.red);\n        assertNull(this.lastEvent);\n        b2.setPaint(Color.red);\n        assertNotNull(this.lastEvent);\n    }",
        "begin_line": 217,
        "end_line": 233,
        "comment": "\n     * Check the notification event mechanism for the dial background.\n     ",
        "child_ranges": [
            "(line 218,col 9)-(line 218,col 36)",
            "(line 219,col 9)-(line 219,col 58)",
            "(line 220,col 9)-(line 220,col 28)",
            "(line 221,col 9)-(line 221,col 34)",
            "(line 222,col 9)-(line 222,col 30)",
            "(line 223,col 9)-(line 223,col 32)",
            "(line 224,col 9)-(line 224,col 38)",
            "(line 226,col 9)-(line 226,col 60)",
            "(line 227,col 9)-(line 227,col 28)",
            "(line 228,col 9)-(line 228,col 30)",
            "(line 229,col 9)-(line 229,col 31)",
            "(line 230,col 9)-(line 230,col 35)",
            "(line 231,col 9)-(line 231,col 31)",
            "(line 232,col 9)-(line 232,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPlotTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPlotTests.testCapListener()",
        "snippet": "    public void testCapListener() {\n        DialPlot p = new DialPlot();\n        DialCap c1 = new DialCap();\n        p.setCap(c1);\n        p.addChangeListener(this);\n        this.lastEvent = null;\n        c1.setFillPaint(Color.red);\n        assertNotNull(this.lastEvent);\n        \n        DialCap c2 = new DialCap();\n        p.setCap(c2);\n        this.lastEvent = null;\n        c1.setFillPaint(Color.blue);\n        assertNull(this.lastEvent);\n        c2.setFillPaint(Color.green);\n        assertNotNull(this.lastEvent);\n    }",
        "begin_line": 238,
        "end_line": 254,
        "comment": "\n     * Check the notification event mechanism for the dial cap.\n     ",
        "child_ranges": [
            "(line 239,col 9)-(line 239,col 36)",
            "(line 240,col 9)-(line 240,col 35)",
            "(line 241,col 9)-(line 241,col 21)",
            "(line 242,col 9)-(line 242,col 34)",
            "(line 243,col 9)-(line 243,col 30)",
            "(line 244,col 9)-(line 244,col 35)",
            "(line 245,col 9)-(line 245,col 38)",
            "(line 247,col 9)-(line 247,col 35)",
            "(line 248,col 9)-(line 248,col 21)",
            "(line 249,col 9)-(line 249,col 30)",
            "(line 250,col 9)-(line 250,col 36)",
            "(line 251,col 9)-(line 251,col 35)",
            "(line 252,col 9)-(line 252,col 37)",
            "(line 253,col 9)-(line 253,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPlotTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPlotTests.testFrameListener()",
        "snippet": "    public void testFrameListener() {\n        DialPlot p = new DialPlot();\n        ArcDialFrame f1 = new ArcDialFrame();\n        p.setDialFrame(f1);\n        p.addChangeListener(this);\n        this.lastEvent = null;\n        f1.setBackgroundPaint(Color.gray);\n        assertNotNull(this.lastEvent);\n        \n        ArcDialFrame f2 = new ArcDialFrame();\n        p.setDialFrame(f2);\n        this.lastEvent = null;\n        f1.setBackgroundPaint(Color.blue);\n        assertNull(this.lastEvent);\n        f2.setBackgroundPaint(Color.green);\n        assertNotNull(this.lastEvent);\n    }",
        "begin_line": 259,
        "end_line": 275,
        "comment": "\n     * Check the notification event mechanism for the dial frame.\n     ",
        "child_ranges": [
            "(line 260,col 9)-(line 260,col 36)",
            "(line 261,col 9)-(line 261,col 45)",
            "(line 262,col 9)-(line 262,col 27)",
            "(line 263,col 9)-(line 263,col 34)",
            "(line 264,col 9)-(line 264,col 30)",
            "(line 265,col 9)-(line 265,col 42)",
            "(line 266,col 9)-(line 266,col 38)",
            "(line 268,col 9)-(line 268,col 45)",
            "(line 269,col 9)-(line 269,col 27)",
            "(line 270,col 9)-(line 270,col 30)",
            "(line 271,col 9)-(line 271,col 42)",
            "(line 272,col 9)-(line 272,col 35)",
            "(line 273,col 9)-(line 273,col 43)",
            "(line 274,col 9)-(line 274,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPlotTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPlotTests.testScaleListener()",
        "snippet": "    public void testScaleListener() {\n        DialPlot p = new DialPlot();\n        StandardDialScale s1 = new StandardDialScale();\n        p.addScale(0, s1);\n        p.addChangeListener(this);\n        this.lastEvent = null;\n        s1.setStartAngle(22.0);\n        assertNotNull(this.lastEvent);\n        \n        StandardDialScale s2 = new StandardDialScale();\n        p.addScale(0, s2);\n        this.lastEvent = null;\n        s1.setStartAngle(33.0);\n        assertNull(this.lastEvent);\n        s2.setStartAngle(33.0);\n        assertNotNull(this.lastEvent);\n    }",
        "begin_line": 280,
        "end_line": 296,
        "comment": "\n     * Check the notification event mechanism for the dial scales.\n     ",
        "child_ranges": [
            "(line 281,col 9)-(line 281,col 36)",
            "(line 282,col 9)-(line 282,col 55)",
            "(line 283,col 9)-(line 283,col 26)",
            "(line 284,col 9)-(line 284,col 34)",
            "(line 285,col 9)-(line 285,col 30)",
            "(line 286,col 9)-(line 286,col 31)",
            "(line 287,col 9)-(line 287,col 38)",
            "(line 289,col 9)-(line 289,col 55)",
            "(line 290,col 9)-(line 290,col 26)",
            "(line 291,col 9)-(line 291,col 30)",
            "(line 292,col 9)-(line 292,col 31)",
            "(line 293,col 9)-(line 293,col 35)",
            "(line 294,col 9)-(line 294,col 31)",
            "(line 295,col 9)-(line 295,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPlotTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPlotTests.testLayerListener()",
        "snippet": "    public void testLayerListener() {\n        DialPlot p = new DialPlot();\n        DialBackground b1 = new DialBackground(Color.red);\n        p.addLayer(b1);\n        p.addChangeListener(this);\n        this.lastEvent = null;\n        b1.setPaint(Color.blue);\n        assertNotNull(this.lastEvent);\n        \n        DialBackground b2 = new DialBackground(Color.green);\n        p.addLayer(b2);\n        this.lastEvent = null;\n        b1.setPaint(Color.red);\n        assertNotNull(this.lastEvent);\n        b2.setPaint(Color.green);\n        assertNotNull(this.lastEvent);\n        \n        p.removeLayer(b2);\n        this.lastEvent = null;\n        b2.setPaint(Color.red);\n        assertNull(this.lastEvent);   \n    }",
        "begin_line": 301,
        "end_line": 322,
        "comment": "\n     * Check the notification event mechanism for a layer.\n     ",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 36)",
            "(line 303,col 9)-(line 303,col 58)",
            "(line 304,col 9)-(line 304,col 23)",
            "(line 305,col 9)-(line 305,col 34)",
            "(line 306,col 9)-(line 306,col 30)",
            "(line 307,col 9)-(line 307,col 32)",
            "(line 308,col 9)-(line 308,col 38)",
            "(line 310,col 9)-(line 310,col 60)",
            "(line 311,col 9)-(line 311,col 23)",
            "(line 312,col 9)-(line 312,col 30)",
            "(line 313,col 9)-(line 313,col 31)",
            "(line 314,col 9)-(line 314,col 38)",
            "(line 315,col 9)-(line 315,col 33)",
            "(line 316,col 9)-(line 316,col 38)",
            "(line 318,col 9)-(line 318,col 26)",
            "(line 319,col 9)-(line 319,col 30)",
            "(line 320,col 9)-(line 320,col 31)",
            "(line 321,col 9)-(line 321,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialScaleTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialScaleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardDialScaleTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialScaleTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialScaleTests.StandardDialScaleTests(java.lang.String)",
        "snippet": "    public StandardDialScaleTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialScaleTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialScaleTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StandardDialScale s1 = new StandardDialScale();\n        StandardDialScale s2 = new StandardDialScale();\n        assertTrue(s1.equals(s2));\n        \n        // lowerBound\n        s1 = new StandardDialScale(10.0, 100.0, 0.0, 270.0, 10.0, 4);\n        assertFalse(s1.equals(s2));\n        s2 = new StandardDialScale(10.0, 100.0, 0.0, 270.0, 10.0, 4);\n        assertTrue(s1.equals(s2));\n        \n        // upperBound\n        s1 = new StandardDialScale(10.0, 200.0, 0.0, 270.0, 10.0, 4);\n        assertFalse(s1.equals(s2));\n        s2 = new StandardDialScale(10.0, 200.0, 0.0, 270.0, 10.0, 4);\n        assertTrue(s1.equals(s2));\n        \n        // startAngle\n        s1 = new StandardDialScale(10.0, 200.0, 20.0, 270.0, 10.0, 4);\n        assertFalse(s1.equals(s2));\n        s2 = new StandardDialScale(10.0, 200.0, 20.0, 270.0, 10.0, 4);\n        assertTrue(s1.equals(s2));\n\n        // extent\n        s1 = new StandardDialScale(10.0, 200.0, 20.0, 99.0, 10.0, 4);\n        assertFalse(s1.equals(s2));\n        s2 = new StandardDialScale(10.0, 200.0, 20.0, 99.0, 10.0, 4);\n        assertTrue(s1.equals(s2));\n    \n        // tickRadius\n        s1.setTickRadius(0.99);\n        assertFalse(s1.equals(s2));\n        s2.setTickRadius(0.99);\n        assertTrue(s1.equals(s2));\n        \n        // majorTickIncrement\n        s1.setMajorTickIncrement(11.1);\n        assertFalse(s1.equals(s2));\n        s2.setMajorTickIncrement(11.1);\n        assertTrue(s1.equals(s2));\n        \n        // majorTickLength\n        s1.setMajorTickLength(0.09);\n        assertFalse(s1.equals(s2));\n        s2.setMajorTickLength(0.09);\n        assertTrue(s1.equals(s2));\n\n        // majorTickPaint\n        s1.setMajorTickPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(s1.equals(s2));\n        s2.setMajorTickPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(s1.equals(s2));\n        \n        // majorTickStroke\n        s1.setMajorTickStroke(new BasicStroke(1.1f));\n        assertFalse(s1.equals(s2));\n        s2.setMajorTickStroke(new BasicStroke(1.1f));\n        assertTrue(s1.equals(s2));\n        \n        // minorTickCount\n        s1.setMinorTickCount(7);\n        assertFalse(s1.equals(s2));\n        s2.setMinorTickCount(7);\n        assertTrue(s1.equals(s2));\n        \n        // minorTickLength\n        s1.setMinorTickLength(0.09);\n        assertFalse(s1.equals(s2));\n        s2.setMinorTickLength(0.09);\n        assertTrue(s1.equals(s2));  \n        \n        // tickLabelOffset\n        s1.setTickLabelOffset(0.11);\n        assertFalse(s1.equals(s2));\n        s2.setTickLabelOffset(0.11);\n        assertTrue(s1.equals(s2));  \n        \n        // tickLabelFont\n        s1.setTickLabelFont(new Font(\"Dialog\", Font.PLAIN, 15));\n        assertFalse(s1.equals(s2));\n        s2.setTickLabelFont(new Font(\"Dialog\", Font.PLAIN, 15));\n        assertTrue(s1.equals(s2));  \n        \n        // tickLabelPaint\n        s1.setTickLabelPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.green));\n        assertFalse(s1.equals(s2));\n        s2.setTickLabelPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.green));\n        assertTrue(s1.equals(s2));  \n        \n        s1.setTickLabelsVisible(false);\n        assertFalse(s1.equals(s2));\n        s2.setTickLabelsVisible(false);\n        assertTrue(s1.equals(s2));  \n        \n        // check an inherited attribute\n        s1.setVisible(false);\n        assertFalse(s1.equals(s2));\n        s2.setVisible(false);\n        assertTrue(s1.equals(s2));\n    }",
        "begin_line": 87,
        "end_line": 190,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 55)",
            "(line 89,col 9)-(line 89,col 55)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 93,col 9)-(line 93,col 69)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 95,col 69)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 99,col 9)-(line 99,col 69)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 69)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 105,col 9)-(line 105,col 70)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 107,col 70)",
            "(line 108,col 9)-(line 108,col 34)",
            "(line 111,col 9)-(line 111,col 69)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 113,col 69)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 117,col 9)-(line 117,col 31)",
            "(line 118,col 9)-(line 118,col 35)",
            "(line 119,col 9)-(line 119,col 31)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 123,col 9)-(line 123,col 39)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 125,col 39)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 129,col 9)-(line 129,col 36)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 131,col 36)",
            "(line 132,col 9)-(line 132,col 34)",
            "(line 135,col 9)-(line 136,col 43)",
            "(line 137,col 9)-(line 137,col 35)",
            "(line 138,col 9)-(line 139,col 43)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 143,col 9)-(line 143,col 53)",
            "(line 144,col 9)-(line 144,col 35)",
            "(line 145,col 9)-(line 145,col 53)",
            "(line 146,col 9)-(line 146,col 34)",
            "(line 149,col 9)-(line 149,col 32)",
            "(line 150,col 9)-(line 150,col 35)",
            "(line 151,col 9)-(line 151,col 32)",
            "(line 152,col 9)-(line 152,col 34)",
            "(line 155,col 9)-(line 155,col 36)",
            "(line 156,col 9)-(line 156,col 35)",
            "(line 157,col 9)-(line 157,col 36)",
            "(line 158,col 9)-(line 158,col 34)",
            "(line 161,col 9)-(line 161,col 36)",
            "(line 162,col 9)-(line 162,col 35)",
            "(line 163,col 9)-(line 163,col 36)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 167,col 9)-(line 167,col 64)",
            "(line 168,col 9)-(line 168,col 35)",
            "(line 169,col 9)-(line 169,col 64)",
            "(line 170,col 9)-(line 170,col 34)",
            "(line 173,col 9)-(line 174,col 42)",
            "(line 175,col 9)-(line 175,col 35)",
            "(line 176,col 9)-(line 177,col 42)",
            "(line 178,col 9)-(line 178,col 34)",
            "(line 180,col 9)-(line 180,col 39)",
            "(line 181,col 9)-(line 181,col 35)",
            "(line 182,col 9)-(line 182,col 39)",
            "(line 183,col 9)-(line 183,col 34)",
            "(line 186,col 9)-(line 186,col 29)",
            "(line 187,col 9)-(line 187,col 35)",
            "(line 188,col 9)-(line 188,col 29)",
            "(line 189,col 9)-(line 189,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialScaleTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialScaleTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        StandardDialScale s1 = new StandardDialScale();\n        StandardDialScale s2 = new StandardDialScale();\n        assertTrue(s1.equals(s2));\n        int h1 = s1.hashCode();\n        int h2 = s2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 195,
        "end_line": 202,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 55)",
            "(line 197,col 9)-(line 197,col 55)",
            "(line 198,col 9)-(line 198,col 34)",
            "(line 199,col 9)-(line 199,col 31)",
            "(line 200,col 9)-(line 200,col 31)",
            "(line 201,col 9)-(line 201,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialScaleTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialScaleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        // try a default instance\n        StandardDialScale s1 = new StandardDialScale();\n        StandardDialScale s2 = null;\n        try {\n            s2 = (StandardDialScale) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n        \n        // try a customised instance\n        s1 = new StandardDialScale();\n        s1.setExtent(123.4);\n        s1.setMajorTickPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.white));\n        s1.setMajorTickStroke(new BasicStroke(2.0f));\n        s2 = null;\n        try {\n            s2 = (StandardDialScale) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n        \n        // check that the listener lists are independent\n        MyDialLayerChangeListener l1 = new MyDialLayerChangeListener();\n        s1.addChangeListener(l1);\n        assertTrue(s1.hasListener(l1));\n        assertFalse(s2.hasListener(l1));\n    }",
        "begin_line": 207,
        "end_line": 243,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 55)",
            "(line 210,col 9)-(line 210,col 36)",
            "(line 211,col 9)-(line 216,col 9)",
            "(line 217,col 9)-(line 217,col 29)",
            "(line 218,col 9)-(line 218,col 51)",
            "(line 219,col 9)-(line 219,col 34)",
            "(line 222,col 9)-(line 222,col 37)",
            "(line 223,col 9)-(line 223,col 28)",
            "(line 224,col 9)-(line 225,col 36)",
            "(line 226,col 9)-(line 226,col 53)",
            "(line 227,col 9)-(line 227,col 18)",
            "(line 228,col 9)-(line 233,col 9)",
            "(line 234,col 9)-(line 234,col 29)",
            "(line 235,col 9)-(line 235,col 51)",
            "(line 236,col 9)-(line 236,col 34)",
            "(line 239,col 9)-(line 239,col 71)",
            "(line 240,col 9)-(line 240,col 33)",
            "(line 241,col 9)-(line 241,col 39)",
            "(line 242,col 9)-(line 242,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialScaleTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialScaleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        // try a default instance\n        StandardDialScale s1 = new StandardDialScale();\n        StandardDialScale s2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            s2 = (StandardDialScale) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(s1, s2);\n        \n        // try a customised instance\n        s1 = new StandardDialScale();\n        s1.setExtent(123.4);\n        s1.setMajorTickPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.white));\n        s1.setMajorTickStroke(new BasicStroke(2.0f));\n        s2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            s2 = (StandardDialScale) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(s1, s2);\n    }",
        "begin_line": 248,
        "end_line": 292,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 55)",
            "(line 251,col 9)-(line 251,col 36)",
            "(line 253,col 9)-(line 266,col 9)",
            "(line 267,col 9)-(line 267,col 29)",
            "(line 270,col 9)-(line 270,col 37)",
            "(line 271,col 9)-(line 271,col 28)",
            "(line 272,col 9)-(line 273,col 36)",
            "(line 274,col 9)-(line 274,col 53)",
            "(line 275,col 9)-(line 275,col 18)",
            "(line 277,col 9)-(line 290,col 9)",
            "(line 291,col 9)-(line 291,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPointerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPointerTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPointerTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DialPointerTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPointerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPointerTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPointerTests.DialPointerTests(java.lang.String)",
        "snippet": "    public DialPointerTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPointerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPointerTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPointerTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DialPointer i1 = new DialPointer.Pin(1);\n        DialPointer i2 = new DialPointer.Pin(1);\n        assertTrue(i1.equals(i2));\n        \n        // dataset index\n        i1 = new DialPointer.Pin(2);\n        assertFalse(i1.equals(i2));\n        i2 = new DialPointer.Pin(2);\n        assertTrue(i1.equals(i2));  \n        \n        // check an inherited attribute\n        i1.setVisible(false);\n        assertFalse(i1.equals(i2));\n        i2.setVisible(false);\n        assertTrue(i1.equals(i2));\n    }",
        "begin_line": 85,
        "end_line": 101,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 48)",
            "(line 87,col 9)-(line 87,col 48)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 91,col 9)-(line 91,col 36)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 36)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 97,col 9)-(line 97,col 29)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 29)",
            "(line 100,col 9)-(line 100,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPointerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPointerTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPointerTests.testEqualsPin()",
        "snippet": "    public void testEqualsPin() {\n        DialPointer.Pin p1 = new DialPointer.Pin();\n        DialPointer.Pin p2 = new DialPointer.Pin();\n        assertEquals(p1, p2);\n        \n        p1.setPaint(Color.green);\n        assertFalse(p1.equals(p2));\n        p2.setPaint(Color.green);\n        assertTrue(p1.equals(p2));\n        \n        BasicStroke s = new BasicStroke(4.4f);\n        p1.setStroke(s);\n        assertFalse(p1.equals(p2));\n        p2.setStroke(s);\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 106,
        "end_line": 121,
        "comment": "\n     * Check the equals() method for the DialPointer.Pin class.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 51)",
            "(line 108,col 9)-(line 108,col 51)",
            "(line 109,col 9)-(line 109,col 29)",
            "(line 111,col 9)-(line 111,col 33)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 113,col 33)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 116,col 9)-(line 116,col 46)",
            "(line 117,col 9)-(line 117,col 24)",
            "(line 118,col 9)-(line 118,col 35)",
            "(line 119,col 9)-(line 119,col 24)",
            "(line 120,col 9)-(line 120,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPointerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPointerTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPointerTests.testEqualsPointer()",
        "snippet": "    public void testEqualsPointer() {\n        DialPointer.Pointer p1 = new DialPointer.Pointer();\n        DialPointer.Pointer p2 = new DialPointer.Pointer();\n        assertEquals(p1, p2);\n        \n        p1.setFillPaint(Color.green);\n        assertFalse(p1.equals(p2));\n        p2.setFillPaint(Color.green);\n        assertTrue(p1.equals(p2));\n        \n        p1.setOutlinePaint(Color.green);\n        assertFalse(p1.equals(p2));\n        p2.setOutlinePaint(Color.green);\n        assertTrue(p1.equals(p2));\n    }",
        "begin_line": 126,
        "end_line": 140,
        "comment": "\n     * Check the equals() method for the DialPointer.Pointer class.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 59)",
            "(line 128,col 9)-(line 128,col 59)",
            "(line 129,col 9)-(line 129,col 29)",
            "(line 131,col 9)-(line 131,col 37)",
            "(line 132,col 9)-(line 132,col 35)",
            "(line 133,col 9)-(line 133,col 37)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 136,col 9)-(line 136,col 40)",
            "(line 137,col 9)-(line 137,col 35)",
            "(line 138,col 9)-(line 138,col 40)",
            "(line 139,col 9)-(line 139,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPointerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPointerTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPointerTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        DialPointer i1 = new DialPointer.Pin(1);\n        DialPointer i2 = new DialPointer.Pin(1);\n        assertTrue(i1.equals(i2));\n        int h1 = i1.hashCode();\n        int h2 = i2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 145,
        "end_line": 152,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 48)",
            "(line 147,col 9)-(line 147,col 48)",
            "(line 148,col 9)-(line 148,col 34)",
            "(line 149,col 9)-(line 149,col 31)",
            "(line 150,col 9)-(line 150,col 31)",
            "(line 151,col 9)-(line 151,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPointerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPointerTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPointerTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DialPointer i1 = new DialPointer.Pin(1);\n        DialPointer i2 = null;\n        try {\n            i2 = (DialPointer) i1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(i1 != i2);\n        assertTrue(i1.getClass() == i2.getClass());\n        assertTrue(i1.equals(i2));\n        \n        // check that the listener lists are independent\n        MyDialLayerChangeListener l1 = new MyDialLayerChangeListener();\n        i1.addChangeListener(l1);\n        assertTrue(i1.hasListener(l1));\n        assertFalse(i2.hasListener(l1));\n    }",
        "begin_line": 157,
        "end_line": 175,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 48)",
            "(line 159,col 9)-(line 159,col 30)",
            "(line 160,col 9)-(line 165,col 9)",
            "(line 166,col 9)-(line 166,col 29)",
            "(line 167,col 9)-(line 167,col 51)",
            "(line 168,col 9)-(line 168,col 34)",
            "(line 171,col 9)-(line 171,col 71)",
            "(line 172,col 9)-(line 172,col 33)",
            "(line 173,col 9)-(line 173,col 39)",
            "(line 174,col 9)-(line 174,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPointerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPointerTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPointerTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        // test a default instance\n        DialPointer i1 = new DialPointer.Pin(1);\n        DialPointer i2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(i1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            i2 = (DialPointer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(i1, i2);\n        \n        // test a custom instance\n    }",
        "begin_line": 180,
        "end_line": 202,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 48)",
            "(line 183,col 9)-(line 183,col 30)",
            "(line 185,col 9)-(line 198,col 9)",
            "(line 199,col 9)-(line 199,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialPointerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialPointerTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialPointerTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n        // test a default instance\n        DialPointer i1 = new DialPointer.Pointer(1);\n        DialPointer i2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(i1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            i2 = (DialPointer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(i1, i2);\n        \n        // test a custom instance\n    }",
        "begin_line": 207,
        "end_line": 229,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 52)",
            "(line 210,col 9)-(line 210,col 30)",
            "(line 212,col 9)-(line 225,col 9)",
            "(line 226,col 9)-(line 226,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.AbstractDialLayerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/AbstractDialLayerTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.AbstractDialLayerTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(AbstractDialLayerTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.AbstractDialLayerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/AbstractDialLayerTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.AbstractDialLayerTests.AbstractDialLayerTests(java.lang.String)",
        "snippet": "    public AbstractDialLayerTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.AbstractDialLayerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/AbstractDialLayerTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.AbstractDialLayerTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DialCap c1 = new DialCap();\n        DialCap c2 = new DialCap();\n        assertTrue(c1.equals(c2));\n        \n        // visible\n        c1.setVisible(false);\n        assertFalse(c1.equals(c2));\n        c2.setVisible(false);\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 83,
        "end_line": 93,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 35)",
            "(line 85,col 9)-(line 85,col 35)",
            "(line 86,col 9)-(line 86,col 34)",
            "(line 89,col 9)-(line 89,col 29)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 29)",
            "(line 92,col 9)-(line 92,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.AbstractDialLayerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/AbstractDialLayerTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.AbstractDialLayerTests.testCloning()",
        "snippet": "    public void testCloning() {\n        // test a default instance\n        DialCap c1 = new DialCap();\n        DialCap c2 = null;\n        try {\n            c2 = (DialCap) c1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n        \n        // check that the listener lists are independent\n        MyDialLayerChangeListener l1 = new MyDialLayerChangeListener();\n        c1.addChangeListener(l1);\n        assertTrue(c1.hasListener(l1));\n        assertFalse(c2.hasListener(l1));\n    }",
        "begin_line": 98,
        "end_line": 117,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 26)",
            "(line 102,col 9)-(line 107,col 9)",
            "(line 108,col 9)-(line 108,col 29)",
            "(line 109,col 9)-(line 109,col 51)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 113,col 9)-(line 113,col 71)",
            "(line 114,col 9)-(line 114,col 33)",
            "(line 115,col 9)-(line 115,col 39)",
            "(line 116,col 9)-(line 116,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.AbstractDialLayerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/AbstractDialLayerTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.AbstractDialLayerTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        // test a default instance\n        DialCap c1 = new DialCap();\n        DialCap c2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            c2 = (DialCap) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n\n        // check that the listener lists are independent\n        MyDialLayerChangeListener l1 = new MyDialLayerChangeListener();\n        c1.addChangeListener(l1);\n        assertTrue(c1.hasListener(l1));\n        assertFalse(c2.hasListener(l1));\n    }",
        "begin_line": 122,
        "end_line": 148,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 125,col 26)",
            "(line 127,col 9)-(line 140,col 9)",
            "(line 141,col 9)-(line 141,col 29)",
            "(line 144,col 9)-(line 144,col 71)",
            "(line 145,col 9)-(line 145,col 33)",
            "(line 146,col 9)-(line 146,col 39)",
            "(line 147,col 9)-(line 147,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialFrameTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialFrameTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialFrameTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardDialFrameTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialFrameTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialFrameTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialFrameTests.StandardDialFrameTests(java.lang.String)",
        "snippet": "    public StandardDialFrameTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialFrameTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialFrameTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialFrameTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StandardDialFrame f1 = new StandardDialFrame();\n        StandardDialFrame f2 = new StandardDialFrame();\n        assertTrue(f1.equals(f2));\n\n        // radius\n        f1.setRadius(0.2);\n        assertFalse(f1.equals(f2));\n        f2.setRadius(0.2);\n        assertTrue(f1.equals(f2));\n        \n        // backgroundPaint\n        f1.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f,\n                4.0f, Color.yellow));\n        assertFalse(f1.equals(f2));\n        f2.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f,\n                4.0f, Color.yellow));\n        assertTrue(f1.equals(f2));\n        \n        // foregroundPaint\n        f1.setForegroundPaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f,\n                4.0f, Color.green));\n        assertFalse(f1.equals(f2));\n        f2.setForegroundPaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f,\n                4.0f, Color.green));\n        assertTrue(f1.equals(f2));\n        \n        // stroke\n        f1.setStroke(new BasicStroke(2.4f));\n        assertFalse(f1.equals(f2));\n        f2.setStroke(new BasicStroke(2.4f));\n        assertTrue(f1.equals(f2));\n        \n        // check an inherited attribute\n        f1.setVisible(false);\n        assertFalse(f1.equals(f2));\n        f2.setVisible(false);\n        assertTrue(f1.equals(f2));\n    }",
        "begin_line": 85,
        "end_line": 123,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 55)",
            "(line 87,col 9)-(line 87,col 55)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 91,col 9)-(line 91,col 26)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 26)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 97,col 9)-(line 98,col 37)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 101,col 37)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 105,col 9)-(line 106,col 36)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 109,col 36)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 113,col 9)-(line 113,col 44)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 44)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 119,col 9)-(line 119,col 29)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 121,col 29)",
            "(line 122,col 9)-(line 122,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialFrameTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialFrameTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialFrameTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        StandardDialFrame f1 = new StandardDialFrame();\n        StandardDialFrame f2 = new StandardDialFrame();\n        assertTrue(f1.equals(f2));\n        int h1 = f1.hashCode();\n        int h2 = f2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 128,
        "end_line": 135,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 55)",
            "(line 130,col 9)-(line 130,col 55)",
            "(line 131,col 9)-(line 131,col 34)",
            "(line 132,col 9)-(line 132,col 31)",
            "(line 133,col 9)-(line 133,col 31)",
            "(line 134,col 9)-(line 134,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialFrameTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialFrameTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialFrameTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StandardDialFrame f1 = new StandardDialFrame();\n        StandardDialFrame f2 = null;\n        try {\n            f2 = (StandardDialFrame) f1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(f1 != f2);\n        assertTrue(f1.getClass() == f2.getClass());\n        assertTrue(f1.equals(f2));\n        \n        // check that the listener lists are independent\n        MyDialLayerChangeListener l1 = new MyDialLayerChangeListener();\n        f1.addChangeListener(l1);\n        assertTrue(f1.hasListener(l1));\n        assertFalse(f2.hasListener(l1));\n    }",
        "begin_line": 140,
        "end_line": 158,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 55)",
            "(line 142,col 9)-(line 142,col 36)",
            "(line 143,col 9)-(line 148,col 9)",
            "(line 149,col 9)-(line 149,col 29)",
            "(line 150,col 9)-(line 150,col 51)",
            "(line 151,col 9)-(line 151,col 34)",
            "(line 154,col 9)-(line 154,col 71)",
            "(line 155,col 9)-(line 155,col 33)",
            "(line 156,col 9)-(line 156,col 39)",
            "(line 157,col 9)-(line 157,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.StandardDialFrameTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/StandardDialFrameTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.StandardDialFrameTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        StandardDialFrame f1 = new StandardDialFrame();\n        StandardDialFrame f2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(f1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            f2 = (StandardDialFrame) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(f1, f2);\n    }",
        "begin_line": 163,
        "end_line": 182,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 55)",
            "(line 165,col 9)-(line 165,col 36)",
            "(line 167,col 9)-(line 180,col 9)",
            "(line 181,col 9)-(line 181,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialTextAnnotationTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialTextAnnotationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DialTextAnnotationTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialTextAnnotationTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialTextAnnotationTests.DialTextAnnotationTests(java.lang.String)",
        "snippet": "    public DialTextAnnotationTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialTextAnnotationTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialTextAnnotationTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DialTextAnnotation a1 = new DialTextAnnotation(\"A1\");\n        DialTextAnnotation a2 = new DialTextAnnotation(\"A1\");\n        assertTrue(a1.equals(a2));\n        \n        // angle\n        a1.setAngle(1.1);\n        assertFalse(a1.equals(a2));\n        a2.setAngle(1.1);\n        assertTrue(a1.equals(a2));\n        \n        // radius\n        a1.setRadius(9.9);\n        assertFalse(a1.equals(a2));\n        a2.setRadius(9.9);\n        assertTrue(a1.equals(a2));\n        \n        // font\n        Font f = new Font(\"SansSerif\", Font.PLAIN, 14);\n        a1.setFont(f);\n        assertFalse(a1.equals(a2));\n        a2.setFont(f);\n        assertTrue(a1.equals(a2));\n        \n        // paint\n        a1.setPaint(Color.red);\n        assertFalse(a1.equals(a2));\n        a2.setPaint(Color.red);\n        assertTrue(a1.equals(a2));\n        \n        // label\n        a1.setLabel(\"ABC\");\n        assertFalse(a1.equals(a2));\n        a2.setLabel(\"ABC\");\n        assertTrue(a1.equals(a2));\n        \n        // check an inherited attribute\n        a1.setVisible(false);\n        assertFalse(a1.equals(a2));\n        a2.setVisible(false);\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 85,
        "end_line": 126,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 61)",
            "(line 87,col 9)-(line 87,col 61)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 91,col 9)-(line 91,col 25)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 25)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 97,col 9)-(line 97,col 26)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 26)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 103,col 9)-(line 103,col 55)",
            "(line 104,col 9)-(line 104,col 22)",
            "(line 105,col 9)-(line 105,col 35)",
            "(line 106,col 9)-(line 106,col 22)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 110,col 9)-(line 110,col 31)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 31)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 116,col 9)-(line 116,col 27)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 118,col 27)",
            "(line 119,col 9)-(line 119,col 34)",
            "(line 122,col 9)-(line 122,col 29)",
            "(line 123,col 9)-(line 123,col 35)",
            "(line 124,col 9)-(line 124,col 29)",
            "(line 125,col 9)-(line 125,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialTextAnnotationTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialTextAnnotationTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        DialTextAnnotation a1 = new DialTextAnnotation(\"A1\");\n        DialTextAnnotation a2 = new DialTextAnnotation(\"A1\");\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 131,
        "end_line": 138,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 61)",
            "(line 133,col 9)-(line 133,col 61)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 135,col 9)-(line 135,col 31)",
            "(line 136,col 9)-(line 136,col 31)",
            "(line 137,col 9)-(line 137,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialTextAnnotationTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialTextAnnotationTests.testCloning()",
        "snippet": "    public void testCloning() {\n        // test a default instance\n        DialTextAnnotation a1 = new DialTextAnnotation(\"A1\");\n        DialTextAnnotation a2 = null;\n        try {\n            a2 = (DialTextAnnotation) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n        \n        // check that the listener lists are independent\n        MyDialLayerChangeListener l1 = new MyDialLayerChangeListener();\n        a1.addChangeListener(l1);\n        assertTrue(a1.hasListener(l1));\n        assertFalse(a2.hasListener(l1));\n       \n    }",
        "begin_line": 143,
        "end_line": 163,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 61)",
            "(line 146,col 9)-(line 146,col 37)",
            "(line 147,col 9)-(line 152,col 9)",
            "(line 153,col 9)-(line 153,col 29)",
            "(line 154,col 9)-(line 154,col 51)",
            "(line 155,col 9)-(line 155,col 34)",
            "(line 158,col 9)-(line 158,col 71)",
            "(line 159,col 9)-(line 159,col 33)",
            "(line 160,col 9)-(line 160,col 39)",
            "(line 161,col 9)-(line 161,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.DialTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/DialTextAnnotationTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.DialTextAnnotationTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        // test a default instance\n        DialTextAnnotation a1 = new DialTextAnnotation(\"A1\");\n        DialTextAnnotation a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            a2 = (DialTextAnnotation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n        \n        // test a custom instance\n        a1 = new DialTextAnnotation(\"A1\");\n        a1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.blue));\n        a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            a2 = (DialTextAnnotation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n        \n        \n    }",
        "begin_line": 169,
        "end_line": 213,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 61)",
            "(line 172,col 9)-(line 172,col 37)",
            "(line 174,col 9)-(line 187,col 9)",
            "(line 188,col 9)-(line 188,col 29)",
            "(line 191,col 9)-(line 191,col 42)",
            "(line 192,col 9)-(line 193,col 29)",
            "(line 194,col 9)-(line 194,col 18)",
            "(line 196,col 9)-(line 209,col 9)",
            "(line 210,col 9)-(line 210,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.ArcDialFrameTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/ArcDialFrameTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.ArcDialFrameTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ArcDialFrameTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.ArcDialFrameTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/ArcDialFrameTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.ArcDialFrameTests.ArcDialFrameTests(java.lang.String)",
        "snippet": "    public ArcDialFrameTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.ArcDialFrameTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/ArcDialFrameTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.ArcDialFrameTests.testEquals()",
        "snippet": "    public void testEquals() {\n        ArcDialFrame f1 = new ArcDialFrame();\n        ArcDialFrame f2 = new ArcDialFrame();\n        assertTrue(f1.equals(f2));\n        \n        // background paint\n        f1.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(f1.equals(f2));\n        f2.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(f1.equals(f2));\n        \n        // foreground paint\n        f1.setForegroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(f1.equals(f2));\n        f2.setForegroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(f1.equals(f2));\n        \n        // stroke\n        f1.setStroke(new BasicStroke(1.1f));\n        assertFalse(f1.equals(f2));\n        f2.setStroke(new BasicStroke(1.1f));\n        assertTrue(f1.equals(f2));\n        \n        // inner radius\n        f1.setInnerRadius(0.11);\n        assertFalse(f1.equals(f2));\n        f2.setInnerRadius(0.11);\n        assertTrue(f1.equals(f2));\n        \n        // outer radius\n        f1.setOuterRadius(0.88);\n        assertFalse(f1.equals(f2));\n        f2.setOuterRadius(0.88);\n        assertTrue(f1.equals(f2));\n        \n        // startAngle\n        f1.setStartAngle(99);\n        assertFalse(f1.equals(f2));\n        f2.setStartAngle(99);\n        assertTrue(f1.equals(f2));\n     \n        // extent\n        f1.setExtent(33);\n        assertFalse(f1.equals(f2));\n        f2.setExtent(33);\n        assertTrue(f1.equals(f2));\n        \n        // check an inherited attribute\n        f1.setVisible(false);\n        assertFalse(f1.equals(f2));\n        f2.setVisible(false);\n        assertTrue(f1.equals(f2));\n    }",
        "begin_line": 85,
        "end_line": 141,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 45)",
            "(line 87,col 9)-(line 87,col 45)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 91,col 9)-(line 92,col 43)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 95,col 43)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 99,col 9)-(line 100,col 43)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 103,col 43)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 107,col 9)-(line 107,col 44)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 44)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 113,col 9)-(line 113,col 32)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 32)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 119,col 9)-(line 119,col 32)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 121,col 32)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 125,col 9)-(line 125,col 29)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 127,col 29)",
            "(line 128,col 9)-(line 128,col 34)",
            "(line 131,col 9)-(line 131,col 25)",
            "(line 132,col 9)-(line 132,col 35)",
            "(line 133,col 9)-(line 133,col 25)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 137,col 9)-(line 137,col 29)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 29)",
            "(line 140,col 9)-(line 140,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.ArcDialFrameTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/ArcDialFrameTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.ArcDialFrameTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        ArcDialFrame f1 = new ArcDialFrame();\n        ArcDialFrame f2 = new ArcDialFrame();\n        assertTrue(f1.equals(f2));\n        int h1 = f1.hashCode();\n        int h2 = f2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 146,
        "end_line": 153,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 45)",
            "(line 148,col 9)-(line 148,col 45)",
            "(line 149,col 9)-(line 149,col 34)",
            "(line 150,col 9)-(line 150,col 31)",
            "(line 151,col 9)-(line 151,col 31)",
            "(line 152,col 9)-(line 152,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.ArcDialFrameTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/ArcDialFrameTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.ArcDialFrameTests.testCloning()",
        "snippet": "    public void testCloning() {\n        ArcDialFrame f1 = new ArcDialFrame();\n        ArcDialFrame f2 = null;\n        try {\n            f2 = (ArcDialFrame) f1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(f1 != f2);\n        assertTrue(f1.getClass() == f2.getClass());\n        assertTrue(f1.equals(f2));\n        \n        // check that the listener lists are independent\n        MyDialLayerChangeListener l1 = new MyDialLayerChangeListener();\n        f1.addChangeListener(l1);\n        assertTrue(f1.hasListener(l1));\n        assertFalse(f2.hasListener(l1));\n    }",
        "begin_line": 158,
        "end_line": 176,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 45)",
            "(line 160,col 9)-(line 160,col 31)",
            "(line 161,col 9)-(line 166,col 9)",
            "(line 167,col 9)-(line 167,col 29)",
            "(line 168,col 9)-(line 168,col 51)",
            "(line 169,col 9)-(line 169,col 34)",
            "(line 172,col 9)-(line 172,col 71)",
            "(line 173,col 9)-(line 173,col 33)",
            "(line 174,col 9)-(line 174,col 39)",
            "(line 175,col 9)-(line 175,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.dial.junit.ArcDialFrameTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/dial/junit/ArcDialFrameTests.java",
        "signature": "org.jfree.chart.plot.dial.junit.ArcDialFrameTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        ArcDialFrame f1 = new ArcDialFrame();\n        ArcDialFrame f2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(f1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            f2 = (ArcDialFrame) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(f1, f2);\n    }",
        "begin_line": 181,
        "end_line": 200,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 45)",
            "(line 183,col 9)-(line 183,col 31)",
            "(line 185,col 9)-(line 198,col 9)",
            "(line 199,col 9)-(line 199,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.PaintListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/PaintListTests.java",
        "signature": "org.jfree.chart.util.junit.PaintListTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PaintListTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.PaintListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/PaintListTests.java",
        "signature": "org.jfree.chart.util.junit.PaintListTests.PaintListTests(java.lang.String)",
        "snippet": "    public PaintListTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.PaintListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/PaintListTests.java",
        "signature": "org.jfree.chart.util.junit.PaintListTests.testEquals()",
        "snippet": "    public void testEquals() {\n        PaintList l1 = new PaintList();\n        l1.setPaint(0, Color.red);\n        l1.setPaint(1, Color.blue);\n        l1.setPaint(2, null);\n        \n        PaintList l2 = new PaintList();\n        l2.setPaint(0, Color.red);\n        l2.setPaint(1, Color.blue);\n        l2.setPaint(2, null);\n        \n        assertTrue(l1.equals(l2));\n        assertTrue(l2.equals(l2));\n    }",
        "begin_line": 85,
        "end_line": 98,
        "comment": "\n     * Tests the equals() method.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 39)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 88,col 9)-(line 88,col 35)",
            "(line 89,col 9)-(line 89,col 29)",
            "(line 91,col 9)-(line 91,col 39)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 94,col 29)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 97,col 9)-(line 97,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.PaintListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/PaintListTests.java",
        "signature": "org.jfree.chart.util.junit.PaintListTests.testEquals2()",
        "snippet": "    public void testEquals2() {\n        // check two separate (but equal) colors\n        PaintList l1 = new PaintList();\n        Color color1 = new Color(200, 200, 200);\n        l1.setPaint(0, color1);\n        PaintList l2 = new PaintList();\n        Color color2 = new Color(200, 200, 200);\n        l2.setPaint(0, color2);\n        assertEquals(l1, l2);\n    }",
        "begin_line": 103,
        "end_line": 112,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 39)",
            "(line 106,col 9)-(line 106,col 48)",
            "(line 107,col 9)-(line 107,col 31)",
            "(line 108,col 9)-(line 108,col 39)",
            "(line 109,col 9)-(line 109,col 48)",
            "(line 110,col 9)-(line 110,col 31)",
            "(line 111,col 9)-(line 111,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.PaintListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/PaintListTests.java",
        "signature": "org.jfree.chart.util.junit.PaintListTests.testEquals3()",
        "snippet": "    public void testEquals3() {\n        // check two separate (but equal) colors\n        PaintList l1 = new PaintList();\n        Paint p1 = new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue);\n        l1.setPaint(0, p1);\n        PaintList l2 = new PaintList();\n        Paint p2 = new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue);\n        l2.setPaint(0, p2);\n        assertEquals(l1, l2);\n    }",
        "begin_line": 118,
        "end_line": 129,
        "comment": "\n     * Tests the equals() method when the list contains a GradientPaint \n     * instance.\n     ",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 39)",
            "(line 121,col 9)-(line 122,col 40)",
            "(line 123,col 9)-(line 123,col 27)",
            "(line 124,col 9)-(line 124,col 39)",
            "(line 125,col 9)-(line 126,col 40)",
            "(line 127,col 9)-(line 127,col 27)",
            "(line 128,col 9)-(line 128,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.PaintListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/PaintListTests.java",
        "signature": "org.jfree.chart.util.junit.PaintListTests.testCloning()",
        "snippet": "    public void testCloning() {\n        \n        PaintList l1 = new PaintList();\n        l1.setPaint(0, Color.red);\n        l1.setPaint(1, Color.blue);\n        l1.setPaint(2, null);\n        \n        PaintList l2 = null;\n        try {\n            l2 = (PaintList) l1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"PaintListTests.testCloning: failed to clone.\");\n        }\n        assertTrue(l1 != l2);\n        assertTrue(l1.getClass() == l2.getClass());\n        assertTrue(l1.equals(l2));\n        \n        l2.setPaint(0, Color.green);\n        assertFalse(l1.equals(l2));\n        \n    }",
        "begin_line": 134,
        "end_line": 155,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 39)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 29)",
            "(line 141,col 9)-(line 141,col 28)",
            "(line 142,col 9)-(line 147,col 9)",
            "(line 148,col 9)-(line 148,col 29)",
            "(line 149,col 9)-(line 149,col 51)",
            "(line 150,col 9)-(line 150,col 34)",
            "(line 152,col 9)-(line 152,col 36)",
            "(line 153,col 9)-(line 153,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.PaintListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/PaintListTests.java",
        "signature": "org.jfree.chart.util.junit.PaintListTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        PaintList l1 = new PaintList();\n        l1.setPaint(0, Color.red);\n        l1.setPaint(1, Color.blue);\n        l1.setPaint(2, null);\n        \n        PaintList l2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(l1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            l2 = (PaintList) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(l1, l2);\n\n    }",
        "begin_line": 160,
        "end_line": 185,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 39)",
            "(line 163,col 9)-(line 163,col 34)",
            "(line 164,col 9)-(line 164,col 35)",
            "(line 165,col 9)-(line 165,col 29)",
            "(line 167,col 9)-(line 167,col 28)",
            "(line 169,col 9)-(line 182,col 9)",
            "(line 183,col 9)-(line 183,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.PaintListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/PaintListTests.java",
        "signature": "org.jfree.chart.util.junit.PaintListTests.testHashCode()",
        "snippet": "    public void testHashCode() {}",
        "begin_line": 190,
        "end_line": 190,
        "comment": "\n     * Some checks for the testHashCode() method.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.chart.util.junit.StrokeListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/StrokeListTests.java",
        "signature": "org.jfree.chart.util.junit.StrokeListTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StrokeListTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.StrokeListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/StrokeListTests.java",
        "signature": "org.jfree.chart.util.junit.StrokeListTests.StrokeListTests(java.lang.String)",
        "snippet": "    public StrokeListTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.StrokeListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/StrokeListTests.java",
        "signature": "org.jfree.chart.util.junit.StrokeListTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StrokeList l1 = new StrokeList();\n        StrokeList l2 = new StrokeList();\n        assertEquals(l1, l2);\n        \n        l1.setStroke(0, new BasicStroke(1.0f));\n        assertFalse(l1.equals(l2));\n        l2.setStroke(0, new BasicStroke(1.0f));\n        assertTrue(l1.equals(l2));\n        \n        l1.setStroke(1, new BasicStroke(1.5f));\n        assertFalse(l1.equals(l2));\n        l2.setStroke(1, new BasicStroke(1.5f));\n        assertTrue(l1.equals(l2));\n\n        l1.setStroke(1, null);\n        assertFalse(l1.equals(l2));       \n        l2.setStroke(1, null); \n        assertTrue(l1.equals(l2));\n    }",
        "begin_line": 83,
        "end_line": 102,
        "comment": "\n     * Tests the equals() method.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 41)",
            "(line 85,col 9)-(line 85,col 41)",
            "(line 86,col 9)-(line 86,col 29)",
            "(line 88,col 9)-(line 88,col 47)",
            "(line 89,col 9)-(line 89,col 35)",
            "(line 90,col 9)-(line 90,col 47)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 93,col 9)-(line 93,col 47)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 95,col 47)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 98,col 9)-(line 98,col 30)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 100,col 30)",
            "(line 101,col 9)-(line 101,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.StrokeListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/StrokeListTests.java",
        "signature": "org.jfree.chart.util.junit.StrokeListTests.testCloning()",
        "snippet": "    public void testCloning() {\n        \n        StrokeList l1 = new StrokeList();\n        l1.setStroke(0, new BasicStroke(1.0f));\n        l1.setStroke(1, new BasicStroke(1.5f));\n        l1.setStroke(2, null);\n        \n        StrokeList l2 = null;\n        try {\n            l2 = (StrokeList) l1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(l1 != l2);\n        assertTrue(l1.getClass() == l2.getClass());\n        assertTrue(l1.equals(l2));\n        \n        l2.setStroke(0, new BasicStroke(0.5f));\n        assertFalse(l1.equals(l2));\n        \n    }",
        "begin_line": 107,
        "end_line": 128,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 41)",
            "(line 110,col 9)-(line 110,col 47)",
            "(line 111,col 9)-(line 111,col 47)",
            "(line 112,col 9)-(line 112,col 30)",
            "(line 114,col 9)-(line 114,col 29)",
            "(line 115,col 9)-(line 120,col 9)",
            "(line 121,col 9)-(line 121,col 29)",
            "(line 122,col 9)-(line 122,col 51)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 125,col 9)-(line 125,col 47)",
            "(line 126,col 9)-(line 126,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.StrokeListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/StrokeListTests.java",
        "signature": "org.jfree.chart.util.junit.StrokeListTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StrokeList l1 = new StrokeList();\n        l1.setStroke(0, new BasicStroke(1.0f));\n        l1.setStroke(1, new BasicStroke(1.5f));\n        l1.setStroke(2, null);\n        \n        StrokeList l2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(l1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            l2 = (StrokeList) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(l1, l2);\n\n    }",
        "begin_line": 133,
        "end_line": 158,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 41)",
            "(line 136,col 9)-(line 136,col 47)",
            "(line 137,col 9)-(line 137,col 47)",
            "(line 138,col 9)-(line 138,col 30)",
            "(line 140,col 9)-(line 140,col 29)",
            "(line 142,col 9)-(line 155,col 9)",
            "(line 156,col 9)-(line 156,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.StrokeListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/StrokeListTests.java",
        "signature": "org.jfree.chart.util.junit.StrokeListTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        StrokeList p1 = new StrokeList();\n        StrokeList p2 = new StrokeList();\n        assertTrue(p1.hashCode() == p2.hashCode());\n        \n        p1.setStroke(0, new BasicStroke(0.5f));\n        assertFalse(p1.hashCode() == p2.hashCode());\n        p2.setStroke(0, new BasicStroke(0.5f));\n        assertTrue(p1.hashCode() == p2.hashCode());\n        \n        p1.setStroke(1,null);\n        assertFalse(p1.hashCode() == p2.hashCode());\n        p2.setStroke(1,null);\n        assertTrue(p1.hashCode() == p2.hashCode());\n    }",
        "begin_line": 163,
        "end_line": 177,
        "comment": "\n     * Some checks for the testHashCode() method.\n     ",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 41)",
            "(line 165,col 9)-(line 165,col 41)",
            "(line 166,col 9)-(line 166,col 51)",
            "(line 168,col 9)-(line 168,col 47)",
            "(line 169,col 9)-(line 169,col 52)",
            "(line 170,col 9)-(line 170,col 47)",
            "(line 171,col 9)-(line 171,col 51)",
            "(line 173,col 9)-(line 173,col 29)",
            "(line 174,col 9)-(line 174,col 52)",
            "(line 175,col 9)-(line 175,col 29)",
            "(line 176,col 9)-(line 176,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.RelativeDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/RelativeDateFormatTests.java",
        "signature": "org.jfree.chart.util.junit.RelativeDateFormatTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(RelativeDateFormatTests.class);\n    }",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.RelativeDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/RelativeDateFormatTests.java",
        "signature": "org.jfree.chart.util.junit.RelativeDateFormatTests.RelativeDateFormatTests(java.lang.String)",
        "snippet": "    public RelativeDateFormatTests(String name) {\n        super(name);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.RelativeDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/RelativeDateFormatTests.java",
        "signature": "org.jfree.chart.util.junit.RelativeDateFormatTests.testEquals()",
        "snippet": "    public void testEquals() {\n        RelativeDateFormat df1 = new RelativeDateFormat();\n        RelativeDateFormat df2 = new RelativeDateFormat();\n        assertEquals(df1, df2);\n        \n        df1.setBaseMillis(123L);\n        assertFalse(df1.equals(df2));\n        df2.setBaseMillis(123L);\n        assertTrue(df1.equals(df2));\n        \n        df1.setDaySuffix(\"D\");\n        assertFalse(df1.equals(df2));\n        df2.setDaySuffix(\"D\");\n        assertTrue(df1.equals(df2));\n        \n        df1.setHourSuffix(\"H\");\n        assertFalse(df1.equals(df2));\n        df2.setHourSuffix(\"H\");\n        assertTrue(df1.equals(df2));\n        \n        df1.setMinuteSuffix(\"M\");\n        assertFalse(df1.equals(df2));\n        df2.setMinuteSuffix(\"M\");\n        assertTrue(df1.equals(df2));\n        \n        df1.setSecondSuffix(\"S\");\n        assertFalse(df1.equals(df2));\n        df2.setSecondSuffix(\"S\");\n        assertTrue(df1.equals(df2));\n        \n        df1.setShowZeroDays(!df1.getShowZeroDays()); \n        assertFalse(df1.equals(df2));\n        df2.setShowZeroDays(!df2.getShowZeroDays()); \n        assertTrue(df1.equals(df2));\n        \n        df1.setSecondFormatter(new DecimalFormat(\"0.0\"));\n        assertFalse(df1.equals(df2));\n        df2.setSecondFormatter(new DecimalFormat(\"0.0\"));\n        assertTrue(df1.equals(df2));\n    }",
        "begin_line": 80,
        "end_line": 119,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 58)",
            "(line 82,col 9)-(line 82,col 58)",
            "(line 83,col 9)-(line 83,col 31)",
            "(line 85,col 9)-(line 85,col 32)",
            "(line 86,col 9)-(line 86,col 37)",
            "(line 87,col 9)-(line 87,col 32)",
            "(line 88,col 9)-(line 88,col 36)",
            "(line 90,col 9)-(line 90,col 30)",
            "(line 91,col 9)-(line 91,col 37)",
            "(line 92,col 9)-(line 92,col 30)",
            "(line 93,col 9)-(line 93,col 36)",
            "(line 95,col 9)-(line 95,col 31)",
            "(line 96,col 9)-(line 96,col 37)",
            "(line 97,col 9)-(line 97,col 31)",
            "(line 98,col 9)-(line 98,col 36)",
            "(line 100,col 9)-(line 100,col 33)",
            "(line 101,col 9)-(line 101,col 37)",
            "(line 102,col 9)-(line 102,col 33)",
            "(line 103,col 9)-(line 103,col 36)",
            "(line 105,col 9)-(line 105,col 33)",
            "(line 106,col 9)-(line 106,col 37)",
            "(line 107,col 9)-(line 107,col 33)",
            "(line 108,col 9)-(line 108,col 36)",
            "(line 110,col 9)-(line 110,col 52)",
            "(line 111,col 9)-(line 111,col 37)",
            "(line 112,col 9)-(line 112,col 52)",
            "(line 113,col 9)-(line 113,col 36)",
            "(line 115,col 9)-(line 115,col 57)",
            "(line 116,col 9)-(line 116,col 37)",
            "(line 117,col 9)-(line 117,col 57)",
            "(line 118,col 9)-(line 118,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.RelativeDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/RelativeDateFormatTests.java",
        "signature": "org.jfree.chart.util.junit.RelativeDateFormatTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        RelativeDateFormat df1 = new RelativeDateFormat(123L);\n        RelativeDateFormat df2 = new RelativeDateFormat(123L);\n        assertTrue(df1.equals(df2));\n        int h1 = df1.hashCode();\n        int h2 = df2.hashCode();\n        assertEquals(h1, h2);\n    }    ",
        "begin_line": 124,
        "end_line": 131,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 62)",
            "(line 126,col 9)-(line 126,col 62)",
            "(line 127,col 9)-(line 127,col 36)",
            "(line 128,col 9)-(line 128,col 32)",
            "(line 129,col 9)-(line 129,col 32)",
            "(line 130,col 9)-(line 130,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.RelativeDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/RelativeDateFormatTests.java",
        "signature": "org.jfree.chart.util.junit.RelativeDateFormatTests.testCloning()",
        "snippet": "    public void testCloning() {\n        NumberFormat nf = new DecimalFormat(\"0\");\n        RelativeDateFormat df1 = new RelativeDateFormat();\n        df1.setSecondFormatter(nf);\n        RelativeDateFormat df2 = null;\n        df2 = (RelativeDateFormat) df1.clone();\n        assertTrue(df1 != df2);\n        assertTrue(df1.getClass() == df2.getClass());\n        assertTrue(df1.equals(df2));\n    \n        // is the clone independent\n        nf.setMinimumFractionDigits(2);\n        assertFalse(df1.equals(df2));\n    }",
        "begin_line": 136,
        "end_line": 149,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 49)",
            "(line 138,col 9)-(line 138,col 58)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 140,col 9)-(line 140,col 38)",
            "(line 141,col 9)-(line 141,col 47)",
            "(line 142,col 9)-(line 142,col 31)",
            "(line 143,col 9)-(line 143,col 53)",
            "(line 144,col 9)-(line 144,col 36)",
            "(line 147,col 9)-(line 147,col 39)",
            "(line 148,col 9)-(line 148,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.RelativeDateFormatTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/RelativeDateFormatTests.java",
        "signature": "org.jfree.chart.util.junit.RelativeDateFormatTests.testNegative()",
        "snippet": "    public void testNegative() {\n        NumberFormat nf = new DecimalFormat(\"0\");\n        RelativeDateFormat df1 = new RelativeDateFormat();\n        df1.setSecondFormatter(nf);\n        assertEquals(\"-0h0m1s\", df1.format(new Date(-1000L)));\n    }",
        "begin_line": 154,
        "end_line": 159,
        "comment": "\n     * Some tests for negative dates.\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 49)",
            "(line 156,col 9)-(line 156,col 58)",
            "(line 157,col 9)-(line 157,col 35)",
            "(line 158,col 9)-(line 158,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.BooleanListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/BooleanListTests.java",
        "signature": "org.jfree.chart.util.junit.BooleanListTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BooleanListTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.BooleanListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/BooleanListTests.java",
        "signature": "org.jfree.chart.util.junit.BooleanListTests.BooleanListTests(java.lang.String)",
        "snippet": "    public BooleanListTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.BooleanListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/BooleanListTests.java",
        "signature": "org.jfree.chart.util.junit.BooleanListTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        BooleanList l1 = new BooleanList();\n        l1.setBoolean(0, Boolean.TRUE);\n        l1.setBoolean(1, Boolean.FALSE);\n        l1.setBoolean(2, null);\n        \n        BooleanList l2 = new BooleanList();\n        l2.setBoolean(0, Boolean.TRUE);\n        l2.setBoolean(1, Boolean.FALSE);\n        l2.setBoolean(2, null);\n        \n        assertTrue(l1.equals(l2));\n        assertTrue(l2.equals(l2));\n        \n    }",
        "begin_line": 82,
        "end_line": 97,
        "comment": "\n     * Tests the equals() method.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 43)",
            "(line 85,col 9)-(line 85,col 39)",
            "(line 86,col 9)-(line 86,col 40)",
            "(line 87,col 9)-(line 87,col 31)",
            "(line 89,col 9)-(line 89,col 43)",
            "(line 90,col 9)-(line 90,col 39)",
            "(line 91,col 9)-(line 91,col 40)",
            "(line 92,col 9)-(line 92,col 31)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 95,col 9)-(line 95,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.BooleanListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/BooleanListTests.java",
        "signature": "org.jfree.chart.util.junit.BooleanListTests.testCloning()",
        "snippet": "    public void testCloning() {\n        \n        BooleanList l1 = new BooleanList();\n        l1.setBoolean(0, Boolean.TRUE);\n        l1.setBoolean(1, Boolean.FALSE);\n        l1.setBoolean(2, null);\n        \n        BooleanList l2 = null;\n        try {\n            l2 = (BooleanList) l1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\n                    \"BooleanListTests.testCloning: failed to clone.\");\n        }\n        assertTrue(l1 != l2);\n        assertTrue(l1.getClass() == l2.getClass());\n        assertTrue(l1.equals(l2));\n        \n        l2.setBoolean(0, Boolean.FALSE);\n        assertFalse(l1.equals(l2));\n        \n    }",
        "begin_line": 103,
        "end_line": 125,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 43)",
            "(line 106,col 9)-(line 106,col 39)",
            "(line 107,col 9)-(line 107,col 40)",
            "(line 108,col 9)-(line 108,col 31)",
            "(line 110,col 9)-(line 110,col 30)",
            "(line 111,col 9)-(line 117,col 9)",
            "(line 118,col 9)-(line 118,col 29)",
            "(line 119,col 9)-(line 119,col 51)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 122,col 9)-(line 122,col 40)",
            "(line 123,col 9)-(line 123,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.BooleanListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/BooleanListTests.java",
        "signature": "org.jfree.chart.util.junit.BooleanListTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        BooleanList l1 = new BooleanList();\n        l1.setBoolean(0, Boolean.TRUE);\n        l1.setBoolean(1, Boolean.FALSE);\n        l1.setBoolean(2, null);\n\n        BooleanList l2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(l1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            l2 = (BooleanList) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(l1, l2);\n\n    }",
        "begin_line": 130,
        "end_line": 155,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 43)",
            "(line 133,col 9)-(line 133,col 39)",
            "(line 134,col 9)-(line 134,col 40)",
            "(line 135,col 9)-(line 135,col 31)",
            "(line 137,col 9)-(line 137,col 30)",
            "(line 139,col 9)-(line 152,col 9)",
            "(line 153,col 9)-(line 153,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.BooleanListTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/BooleanListTests.java",
        "signature": "org.jfree.chart.util.junit.BooleanListTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        BooleanList l1 = new BooleanList();\n        BooleanList l2 = new BooleanList();\n        assertTrue(l1.hashCode() == l2.hashCode());\n    \n        l1.setBoolean(0, Boolean.TRUE);\n        assertFalse(l1.hashCode() == l2.hashCode());\n        l2.setBoolean(0, Boolean.TRUE);\n        assertTrue(l1.hashCode() == l2.hashCode());\n    }",
        "begin_line": 160,
        "end_line": 169,
        "comment": "\n     * Some checks for the hashCode() method.\n     ",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 43)",
            "(line 162,col 9)-(line 162,col 43)",
            "(line 163,col 9)-(line 163,col 51)",
            "(line 165,col 9)-(line 165,col 39)",
            "(line 166,col 9)-(line 166,col 52)",
            "(line 167,col 9)-(line 167,col 39)",
            "(line 168,col 9)-(line 168,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.HashUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/HashUtilitiesTests.java",
        "signature": "org.jfree.chart.util.junit.HashUtilitiesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(HashUtilitiesTests.class);\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.HashUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/HashUtilitiesTests.java",
        "signature": "org.jfree.chart.util.junit.HashUtilitiesTests.HashUtilitiesTests(java.lang.String)",
        "snippet": "    public HashUtilitiesTests(String name) {\n        super(name);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.HashUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/HashUtilitiesTests.java",
        "signature": "org.jfree.chart.util.junit.HashUtilitiesTests.testHashCodeForDoubleArray()",
        "snippet": "    public void testHashCodeForDoubleArray() {\n        double[] a1 = new double[] { 1.0 };\n        double[] a2 = new double[] { 1.0 };\n        int h1 = HashUtilities.hashCodeForDoubleArray(a1);\n        int h2 = HashUtilities.hashCodeForDoubleArray(a2);\n        assertTrue(h1 == h2);\n        \n        double[] a3 = new double[] { 0.5, 1.0 };\n        int h3 = HashUtilities.hashCodeForDoubleArray(a3);\n        assertFalse(h1 == h3);\n    }",
        "begin_line": 75,
        "end_line": 85,
        "comment": "\n     * Some sanity checks for the hashCodeForDoubleArray() method.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 43)",
            "(line 77,col 9)-(line 77,col 43)",
            "(line 78,col 9)-(line 78,col 58)",
            "(line 79,col 9)-(line 79,col 58)",
            "(line 80,col 9)-(line 80,col 29)",
            "(line 82,col 9)-(line 82,col 48)",
            "(line 83,col 9)-(line 83,col 58)",
            "(line 84,col 9)-(line 84,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.UtilPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/UtilPackageTests.java",
        "signature": "org.jfree.chart.util.junit.UtilPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.chart.util\");\n        suite.addTestSuite(BooleanListTests.class);\n        suite.addTestSuite(HashUtilitiesTests.class);\n        suite.addTestSuite(PaintListTests.class);\n        suite.addTestSuite(RelativeDateFormatTests.class);\n        suite.addTestSuite(StrokeListTests.class);\n        return suite;\n    }",
        "begin_line": 61,
        "end_line": 69,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 64)",
            "(line 63,col 9)-(line 63,col 51)",
            "(line 64,col 9)-(line 64,col 53)",
            "(line 65,col 9)-(line 65,col 49)",
            "(line 66,col 9)-(line 66,col 58)",
            "(line 67,col 9)-(line 67,col 50)",
            "(line 68,col 9)-(line 68,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.UtilPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/UtilPackageTests.java",
        "signature": "org.jfree.chart.util.junit.UtilPackageTests.UtilPackageTests(java.lang.String)",
        "snippet": "    public UtilPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the suite name.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.UtilPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/UtilPackageTests.java",
        "signature": "org.jfree.chart.util.junit.UtilPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.StandardXYURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/StandardXYURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.StandardXYURLGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardXYURLGeneratorTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.StandardXYURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/StandardXYURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.StandardXYURLGeneratorTests.StandardXYURLGeneratorTests(java.lang.String)",
        "snippet": "    public StandardXYURLGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.StandardXYURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/StandardXYURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.StandardXYURLGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StandardXYURLGenerator g1 = new StandardXYURLGenerator(\"index.html?\");\n        StandardXYURLGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            g2 = (StandardXYURLGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 82,
        "end_line": 103,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 78)",
            "(line 85,col 9)-(line 85,col 41)",
            "(line 87,col 9)-(line 100,col 9)",
            "(line 101,col 9)-(line 101,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.CustomXYURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/CustomXYURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.CustomXYURLGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CustomXYURLGeneratorTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.CustomXYURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/CustomXYURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.CustomXYURLGeneratorTests.CustomXYURLGeneratorTests(java.lang.String)",
        "snippet": "    public CustomXYURLGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.CustomXYURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/CustomXYURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.CustomXYURLGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        List u1 = new java.util.ArrayList();\n        u1.add(\"URL A1\");\n        u1.add(\"URL A2\");\n        u1.add(\"URL A3\");\n\n        List u2 = new java.util.ArrayList();\n        u2.add(\"URL B1\");\n        u2.add(\"URL B2\");\n        u2.add(\"URL B3\");\n\n        CustomXYURLGenerator g1 = new CustomXYURLGenerator();\n        CustomXYURLGenerator g2 = null;\n\n        g1.addURLSeries(u1);\n        g1.addURLSeries(u2);\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            g2 = (CustomXYURLGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 83,
        "end_line": 118,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 44)",
            "(line 86,col 9)-(line 86,col 25)",
            "(line 87,col 9)-(line 87,col 25)",
            "(line 88,col 9)-(line 88,col 25)",
            "(line 90,col 9)-(line 90,col 44)",
            "(line 91,col 9)-(line 91,col 25)",
            "(line 92,col 9)-(line 92,col 25)",
            "(line 93,col 9)-(line 93,col 25)",
            "(line 95,col 9)-(line 95,col 61)",
            "(line 96,col 9)-(line 96,col 39)",
            "(line 98,col 9)-(line 98,col 28)",
            "(line 99,col 9)-(line 99,col 28)",
            "(line 101,col 9)-(line 115,col 9)",
            "(line 116,col 9)-(line 116,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.StandardPieURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/StandardPieURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.StandardPieURLGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardPieURLGeneratorTests.class);\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 65)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.StandardPieURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/StandardPieURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.StandardPieURLGeneratorTests.StandardPieURLGeneratorTests(java.lang.String)",
        "snippet": "    public StandardPieURLGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.StandardPieURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/StandardPieURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.StandardPieURLGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StandardPieURLGenerator g1 = new StandardPieURLGenerator();\n        StandardPieURLGenerator g2 = new StandardPieURLGenerator();\n        assertTrue(g1.equals(g2));\n        \n        g1 = new StandardPieURLGenerator(\"prefix\", \"category\", \"index\");\n        assertFalse(g1.equals(g2));\n        g2 = new StandardPieURLGenerator(\"prefix\", \"category\", \"index\");\n        assertTrue(g1.equals(g2));\n        \n        g1 = new StandardPieURLGenerator(\"prefix2\", \"category\", \"index\");\n        assertFalse(g1.equals(g2));\n        g2 = new StandardPieURLGenerator(\"prefix2\", \"category\", \"index\");\n        assertTrue(g1.equals(g2));\n        \n        g1 = new StandardPieURLGenerator(\"prefix2\", \"category2\", \"index\");\n        assertFalse(g1.equals(g2));\n        g2 = new StandardPieURLGenerator(\"prefix2\", \"category2\", \"index\");\n        assertTrue(g1.equals(g2));\n\n        g1 = new StandardPieURLGenerator(\"prefix2\", \"category2\", \"index2\");\n        assertFalse(g1.equals(g2));\n        g2 = new StandardPieURLGenerator(\"prefix2\", \"category2\", \"index2\");\n        assertTrue(g1.equals(g2));\n\n        g1 = new StandardPieURLGenerator(\"prefix2\", \"category2\", null);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardPieURLGenerator(\"prefix2\", \"category2\", null);\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 86,
        "end_line": 115,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 67)",
            "(line 88,col 9)-(line 88,col 67)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 91,col 9)-(line 91,col 72)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 72)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 96,col 73)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 73)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 101,col 74)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 74)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 106,col 9)-(line 106,col 75)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 75)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 111,col 9)-(line 111,col 71)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 113,col 71)",
            "(line 114,col 9)-(line 114,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.StandardPieURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/StandardPieURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.StandardPieURLGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StandardPieURLGenerator g1 = new StandardPieURLGenerator(\n                \"index.html?\", \"cat\");\n        StandardPieURLGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            g2 = (StandardPieURLGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 120,
        "end_line": 142,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 122,col 9)-(line 123,col 38)",
            "(line 124,col 9)-(line 124,col 42)",
            "(line 126,col 9)-(line 139,col 9)",
            "(line 140,col 9)-(line 140,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.StandardPieURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/StandardPieURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.StandardPieURLGeneratorTests.testURL()",
        "snippet": "    public void testURL() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Alpha '1'\", new Double(5.0));\n        dataset.setValue(\"Beta\", new Double(5.5));\n        StandardPieURLGenerator g1 = new StandardPieURLGenerator(\n                \"chart.jsp\", \"category\");\n        String url = g1.generateURL(dataset, \"Beta\", 0);\n        assertEquals(\"chart.jsp?category=Beta&amp;pieIndex=0\", url);\n        url = g1.generateURL(dataset, \"Alpha '1'\", 0);\n        assertEquals(\"chart.jsp?category=Alpha+%271%27&amp;pieIndex=0\", url);\n    }",
        "begin_line": 147,
        "end_line": 157,
        "comment": "\n     * Test that the generated URL is as expected.\n     ",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 60)",
            "(line 149,col 9)-(line 149,col 55)",
            "(line 150,col 9)-(line 150,col 50)",
            "(line 151,col 9)-(line 152,col 41)",
            "(line 153,col 9)-(line 153,col 56)",
            "(line 154,col 9)-(line 154,col 68)",
            "(line 155,col 9)-(line 155,col 54)",
            "(line 156,col 9)-(line 156,col 77)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.UrlsPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/UrlsPackageTests.java",
        "signature": "org.jfree.chart.urls.junit.UrlsPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.chart.urls\");\n        suite.addTestSuite(CustomXYURLGeneratorTests.class);\n        suite.addTestSuite(StandardCategoryURLGeneratorTests.class);\n        suite.addTestSuite(StandardPieURLGeneratorTests.class);\n        suite.addTestSuite(StandardXYURLGeneratorTests.class);\n        suite.addTestSuite(TimeSeriesURLGeneratorTests.class);\n        return suite;\n    }",
        "begin_line": 64,
        "end_line": 72,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 64)",
            "(line 66,col 9)-(line 66,col 60)",
            "(line 67,col 9)-(line 67,col 68)",
            "(line 68,col 9)-(line 68,col 63)",
            "(line 69,col 9)-(line 69,col 62)",
            "(line 70,col 9)-(line 70,col 62)",
            "(line 71,col 9)-(line 71,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.UrlsPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/UrlsPackageTests.java",
        "signature": "org.jfree.chart.urls.junit.UrlsPackageTests.UrlsPackageTests(java.lang.String)",
        "snippet": "    public UrlsPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the suite name.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.UrlsPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/UrlsPackageTests.java",
        "signature": "org.jfree.chart.urls.junit.UrlsPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/StandardCategoryURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardCategoryURLGeneratorTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 70)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/StandardCategoryURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests.StandardCategoryURLGeneratorTests(java.lang.String)",
        "snippet": "    public StandardCategoryURLGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/StandardCategoryURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StandardCategoryURLGenerator g1 = new StandardCategoryURLGenerator(\n            \"index.html?\"\n        );\n        StandardCategoryURLGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                buffer.toByteArray())\n            );\n            g2 = (StandardCategoryURLGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 82,
        "end_line": 106,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 86,col 10)",
            "(line 87,col 9)-(line 87,col 47)",
            "(line 89,col 9)-(line 103,col 9)",
            "(line 104,col 9)-(line 104,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/TimeSeriesURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TimeSeriesURLGeneratorTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/TimeSeriesURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests.TimeSeriesURLGeneratorTests(java.lang.String)",
        "snippet": "    public TimeSeriesURLGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/TimeSeriesURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests.testGenerateURL()",
        "snippet": "    public void testGenerateURL() {\n        TimeSeriesURLGenerator g = new TimeSeriesURLGenerator();\n        DefaultXYDataset dataset = new DefaultXYDataset();\n        dataset.addSeries(\"Series '1'\", new double[][] { {1.0, 2.0}, \n                {3.0, 4.0}});\n        String s = g.generateURL(dataset, 0, 0);\n        assertTrue(s.startsWith(\"index.html?series=Series+%271%27&amp;item=\"));\n    }",
        "begin_line": 84,
        "end_line": 91,
        "comment": "\n     * A basic check for the generateURL() method.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 64)",
            "(line 86,col 9)-(line 86,col 58)",
            "(line 87,col 9)-(line 88,col 29)",
            "(line 89,col 9)-(line 89,col 48)",
            "(line 90,col 9)-(line 90,col 79)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/TimeSeriesURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        TimeSeriesURLGenerator g1 = new TimeSeriesURLGenerator();\n        TimeSeriesURLGenerator g2 = new TimeSeriesURLGenerator();\n        assertTrue(g1.equals(g2));\n        \n        g1 = new TimeSeriesURLGenerator(new SimpleDateFormat(\"yyyy\"), \"prefix\", \n                \"series\", \"item\");\n        assertFalse(g1.equals(g2));\n        g2 = new TimeSeriesURLGenerator(new SimpleDateFormat(\"yyyy\"), \"prefix\", \n                \"series\", \"item\");\n        assertTrue(g1.equals(g2));\n\n        g1 = new TimeSeriesURLGenerator(new SimpleDateFormat(\"yy\"), \"prefix\", \n                \"series\", \"item\");\n        assertFalse(g1.equals(g2));\n        g2 = new TimeSeriesURLGenerator(new SimpleDateFormat(\"yy\"), \"prefix\", \n                \"series\", \"item\");\n        assertTrue(g1.equals(g2));\n    \n        g1 = new TimeSeriesURLGenerator(new SimpleDateFormat(\"yy\"), \"prefix1\", \n                \"series\", \"item\");\n        assertFalse(g1.equals(g2));\n        g2 = new TimeSeriesURLGenerator(new SimpleDateFormat(\"yy\"), \"prefix1\", \n                \"series\", \"item\");\n        assertTrue(g1.equals(g2));\n\n        g1 = new TimeSeriesURLGenerator(new SimpleDateFormat(\"yy\"), \"prefix1\", \n                \"series1\", \"item\");\n        assertFalse(g1.equals(g2));\n        g2 = new TimeSeriesURLGenerator(new SimpleDateFormat(\"yy\"), \"prefix1\", \n                \"series1\", \"item\");\n        assertTrue(g1.equals(g2));\n    \n        g1 = new TimeSeriesURLGenerator(new SimpleDateFormat(\"yy\"), \"prefix1\", \n                \"series1\", \"item1\");\n        assertFalse(g1.equals(g2));\n        g2 = new TimeSeriesURLGenerator(new SimpleDateFormat(\"yy\"), \"prefix1\", \n                \"series1\", \"item1\");\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 96,
        "end_line": 135,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 65)",
            "(line 98,col 9)-(line 98,col 65)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 102,col 34)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 105,col 34)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 108,col 9)-(line 109,col 34)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 112,col 34)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 115,col 9)-(line 116,col 34)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 119,col 34)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 122,col 9)-(line 123,col 35)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 129,col 9)-(line 130,col 36)",
            "(line 131,col 9)-(line 131,col 35)",
            "(line 132,col 9)-(line 133,col 36)",
            "(line 134,col 9)-(line 134,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/urls/junit/TimeSeriesURLGeneratorTests.java",
        "signature": "org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        TimeSeriesURLGenerator g1 = new TimeSeriesURLGenerator();\n        TimeSeriesURLGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            g2 = (TimeSeriesURLGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 140,
        "end_line": 161,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 65)",
            "(line 143,col 9)-(line 143,col 41)",
            "(line 145,col 9)-(line 158,col 9)",
            "(line 159,col 9)-(line 159,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYTextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYTextAnnotationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYTextAnnotationTests.class);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYTextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYTextAnnotationTests.XYTextAnnotationTests(java.lang.String)",
        "snippet": "    public XYTextAnnotationTests(String name) {\n        super(name);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYTextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYTextAnnotationTests.testEquals()",
        "snippet": "    public void testEquals() {  \n        XYTextAnnotation a1 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        XYTextAnnotation a2 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n        \n        // text\n        a1 = new XYTextAnnotation(\"ABC\", 10.0, 20.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n        \n        // x\n        a1 = new XYTextAnnotation(\"ABC\", 11.0, 20.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 11.0, 20.0);\n        assertTrue(a1.equals(a2));\n        \n        // y\n        a1 = new XYTextAnnotation(\"ABC\", 11.0, 22.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 11.0, 22.0);\n        assertTrue(a1.equals(a2));\n\n        // font\n        a1.setFont(new Font(\"Serif\", Font.PLAIN, 23));\n        assertFalse(a1.equals(a2));\n        a2.setFont(new Font(\"Serif\", Font.PLAIN, 23));\n        assertTrue(a1.equals(a2));\n        \n        // paint\n        GradientPaint gp1 = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.yellow);\n        GradientPaint gp2 = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.yellow);\n        a1.setPaint(gp1);\n        assertFalse(a1.equals(a2));\n        a2.setPaint(gp2);\n        assertTrue(a1.equals(a2));\n        \n        // rotation anchor\n        a1.setRotationAnchor(TextAnchor.BASELINE_RIGHT);\n        assertFalse(a1.equals(a2));\n        a2.setRotationAnchor(TextAnchor.BASELINE_RIGHT);\n        assertTrue(a1.equals(a2));\n        \n        // rotation angle\n        a1.setRotationAngle(12.3);\n        assertFalse(a1.equals(a2));\n        a2.setRotationAngle(12.3);\n        assertTrue(a1.equals(a2));\n\n        // text anchor\n        a1.setTextAnchor(TextAnchor.BASELINE_RIGHT);\n        assertFalse(a1.equals(a2));\n        a2.setTextAnchor(TextAnchor.BASELINE_RIGHT);\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 89,
        "end_line": 145,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 71)",
            "(line 91,col 9)-(line 91,col 71)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 95,col 9)-(line 95,col 53)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 53)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 101,col 9)-(line 101,col 53)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 53)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 107,col 9)-(line 107,col 53)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 53)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 113,col 9)-(line 113,col 54)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 54)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 119,col 9)-(line 120,col 36)",
            "(line 121,col 9)-(line 122,col 36)",
            "(line 123,col 9)-(line 123,col 25)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 125,col 25)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 129,col 9)-(line 129,col 56)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 131,col 56)",
            "(line 132,col 9)-(line 132,col 34)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 136,col 9)-(line 136,col 35)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 138,col 9)-(line 138,col 34)",
            "(line 141,col 9)-(line 141,col 52)",
            "(line 142,col 9)-(line 142,col 35)",
            "(line 143,col 9)-(line 143,col 52)",
            "(line 144,col 9)-(line 144,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYTextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYTextAnnotationTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        XYTextAnnotation a1 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        XYTextAnnotation a2 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 150,
        "end_line": 157,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 71)",
            "(line 152,col 9)-(line 152,col 71)",
            "(line 153,col 9)-(line 153,col 34)",
            "(line 154,col 9)-(line 154,col 31)",
            "(line 155,col 9)-(line 155,col 31)",
            "(line 156,col 9)-(line 156,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYTextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYTextAnnotationTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYTextAnnotation a1 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        XYTextAnnotation a2 = null;\n        try {\n            a2 = (XYTextAnnotation) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 162,
        "end_line": 174,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 71)",
            "(line 164,col 9)-(line 164,col 35)",
            "(line 165,col 9)-(line 170,col 9)",
            "(line 171,col 9)-(line 171,col 29)",
            "(line 172,col 9)-(line 172,col 51)",
            "(line 173,col 9)-(line 173,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYTextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYTextAnnotationTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYTextAnnotation a1 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        XYTextAnnotation a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            a2 = (XYTextAnnotation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 179,
        "end_line": 200,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 71)",
            "(line 182,col 9)-(line 182,col 35)",
            "(line 184,col 9)-(line 197,col 9)",
            "(line 198,col 9)-(line 198,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.AnnotationsPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/AnnotationsPackageTests.java",
        "signature": "org.jfree.chart.annotations.junit.AnnotationsPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.chart.annotations\");\n        suite.addTestSuite(CategoryLineAnnotationTests.class);\n        suite.addTestSuite(CategoryPointerAnnotationTests.class);\n        suite.addTestSuite(CategoryTextAnnotationTests.class);\n        suite.addTestSuite(TextAnnotationTests.class);\n        suite.addTestSuite(XYBoxAnnotationTests.class);\n        suite.addTestSuite(XYDrawableAnnotationTests.class);\n        suite.addTestSuite(XYImageAnnotationTests.class);\n        suite.addTestSuite(XYLineAnnotationTests.class);\n        suite.addTestSuite(XYPointerAnnotationTests.class);\n        suite.addTestSuite(XYPolygonAnnotationTests.class);\n        suite.addTestSuite(XYShapeAnnotationTests.class);\n        suite.addTestSuite(XYTextAnnotationTests.class);\n        return suite;\n    }",
        "begin_line": 63,
        "end_line": 78,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 71)",
            "(line 65,col 9)-(line 65,col 62)",
            "(line 66,col 9)-(line 66,col 65)",
            "(line 67,col 9)-(line 67,col 62)",
            "(line 68,col 9)-(line 68,col 54)",
            "(line 69,col 9)-(line 69,col 55)",
            "(line 70,col 9)-(line 70,col 60)",
            "(line 71,col 9)-(line 71,col 57)",
            "(line 72,col 9)-(line 72,col 56)",
            "(line 73,col 9)-(line 73,col 59)",
            "(line 74,col 9)-(line 74,col 59)",
            "(line 75,col 9)-(line 75,col 57)",
            "(line 76,col 9)-(line 76,col 56)",
            "(line 77,col 9)-(line 77,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.AnnotationsPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/AnnotationsPackageTests.java",
        "signature": "org.jfree.chart.annotations.junit.AnnotationsPackageTests.AnnotationsPackageTests(java.lang.String)",
        "snippet": "    public AnnotationsPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the suite name.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.AnnotationsPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/AnnotationsPackageTests.java",
        "signature": "org.jfree.chart.annotations.junit.AnnotationsPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYShapeAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYShapeAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYShapeAnnotationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYShapeAnnotationTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYShapeAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYShapeAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYShapeAnnotationTests.XYShapeAnnotationTests(java.lang.String)",
        "snippet": "    public XYShapeAnnotationTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYShapeAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYShapeAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYShapeAnnotationTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        XYShapeAnnotation a1 = new XYShapeAnnotation(\n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n                new BasicStroke(1.2f), Color.red, Color.blue);\n        XYShapeAnnotation a2 = new XYShapeAnnotation(\n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n                new BasicStroke(1.2f), Color.red, Color.blue);\n        assertTrue(a1.equals(a2));\n        assertTrue(a2.equals(a1));\n      \n        // shape\n        a1 = new XYShapeAnnotation(\n                new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                new BasicStroke(1.2f), Color.red, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYShapeAnnotation(\n                new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                new BasicStroke(1.2f), Color.red, Color.blue);\n        assertTrue(a1.equals(a2));\n        \n        // stroke\n        a1 = new XYShapeAnnotation(\n                new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                new BasicStroke(2.3f), Color.red, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYShapeAnnotation(\n                new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                new BasicStroke(2.3f), Color.red, Color.blue);\n        assertTrue(a1.equals(a2));\n        \n        GradientPaint gp1a = new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red);\n        GradientPaint gp1b = new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red);\n        GradientPaint gp2a = new GradientPaint(5.0f, 6.0f, Color.pink, \n                7.0f, 8.0f, Color.white);\n        GradientPaint gp2b = new GradientPaint(5.0f, 6.0f, Color.pink, \n                7.0f, 8.0f, Color.white);\n        \n        // outlinePaint\n        a1 = new XYShapeAnnotation(\n                new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                new BasicStroke(2.3f), gp1a, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYShapeAnnotation(\n                new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                new BasicStroke(2.3f), gp1b, Color.blue);\n        assertTrue(a1.equals(a2));\n        \n        // fillPaint\n        a1 = new XYShapeAnnotation(\n                new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                new BasicStroke(2.3f), gp1a, gp2a);\n        assertFalse(a1.equals(a2));\n        a2 = new XYShapeAnnotation(\n                new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0), \n                new BasicStroke(2.3f), gp1b, gp2b);\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 87,
        "end_line": 146,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 91,col 62)",
            "(line 92,col 9)-(line 94,col 62)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 99,col 9)-(line 101,col 62)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 105,col 62)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 109,col 9)-(line 111,col 62)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 115,col 62)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 118,col 9)-(line 119,col 39)",
            "(line 120,col 9)-(line 121,col 39)",
            "(line 122,col 9)-(line 123,col 41)",
            "(line 124,col 9)-(line 125,col 41)",
            "(line 128,col 9)-(line 130,col 57)",
            "(line 131,col 9)-(line 131,col 35)",
            "(line 132,col 9)-(line 134,col 57)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 138,col 9)-(line 140,col 51)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 144,col 51)",
            "(line 145,col 9)-(line 145,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYShapeAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYShapeAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYShapeAnnotationTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        XYShapeAnnotation a1 = new XYShapeAnnotation(\n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n                new BasicStroke(1.2f), Color.red, Color.blue);\n        XYShapeAnnotation a2 = new XYShapeAnnotation(\n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n                new BasicStroke(1.2f), Color.red, Color.blue);\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 151,
        "end_line": 162,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 152,col 9)-(line 154,col 62)",
            "(line 155,col 9)-(line 157,col 62)",
            "(line 158,col 9)-(line 158,col 34)",
            "(line 159,col 9)-(line 159,col 31)",
            "(line 160,col 9)-(line 160,col 31)",
            "(line 161,col 9)-(line 161,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYShapeAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYShapeAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYShapeAnnotationTests.testCloning()",
        "snippet": "    public void testCloning() {\n\n        XYShapeAnnotation a1 = new XYShapeAnnotation(\n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n                new BasicStroke(1.2f), Color.red, Color.blue);\n        XYShapeAnnotation a2 = null;\n        try {\n            a2 = (XYShapeAnnotation) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 167,
        "end_line": 182,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 169,col 9)-(line 171,col 62)",
            "(line 172,col 9)-(line 172,col 36)",
            "(line 173,col 9)-(line 178,col 9)",
            "(line 179,col 9)-(line 179,col 29)",
            "(line 180,col 9)-(line 180,col 51)",
            "(line 181,col 9)-(line 181,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYShapeAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYShapeAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYShapeAnnotationTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        XYShapeAnnotation a1 = new XYShapeAnnotation(\n                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), \n                new BasicStroke(1.2f), Color.red, Color.blue);\n        XYShapeAnnotation a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            a2 = (XYShapeAnnotation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n    }",
        "begin_line": 187,
        "end_line": 208,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 188,col 9)-(line 190,col 62)",
            "(line 191,col 9)-(line 191,col 36)",
            "(line 193,col 9)-(line 206,col 9)",
            "(line 207,col 9)-(line 207,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.TextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/TextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.TextAnnotationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TextAnnotationTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.TextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/TextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.TextAnnotationTests.TextAnnotationTests(java.lang.String)",
        "snippet": "    public TextAnnotationTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.TextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/TextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.TextAnnotationTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        TextAnnotation a1 = new CategoryTextAnnotation(\"Test\", \"Category\", 1.0);\n        TextAnnotation a2 = new CategoryTextAnnotation(\"Test\", \"Category\", 1.0);\n        assertTrue(a1.equals(a2));\n        \n        // text \n        a1.setText(\"Text\");\n        assertFalse(a1.equals(a2));\n        a2.setText(\"Text\");\n        assertTrue(a1.equals(a2));\n\n        // font \n        a1.setFont(new Font(\"Serif\", Font.BOLD, 18));\n        assertFalse(a1.equals(a2));\n        a2.setFont(new Font(\"Serif\", Font.BOLD, 18));\n        assertTrue(a1.equals(a2));\n\n        // paint \n        a1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.pink));\n        assertFalse(a1.equals(a2));\n        a2.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.pink));\n        assertTrue(a1.equals(a2));\n\n        // textAnchor \n        a1.setTextAnchor(TextAnchor.BOTTOM_LEFT);\n        assertFalse(a1.equals(a2));\n        a2.setTextAnchor(TextAnchor.BOTTOM_LEFT);\n        assertTrue(a1.equals(a2));\n\n        // rotationAnchor \n        a1.setRotationAnchor(TextAnchor.BOTTOM_LEFT);\n        assertFalse(a1.equals(a2));\n        a2.setRotationAnchor(TextAnchor.BOTTOM_LEFT);\n        assertTrue(a1.equals(a2));\n\n        // rotationAngle \n        a1.setRotationAngle(Math.PI);\n        assertFalse(a1.equals(a2));\n        a2.setRotationAngle(Math.PI);\n        assertTrue(a1.equals(a2));\n\n    }",
        "begin_line": 83,
        "end_line": 127,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 80)",
            "(line 86,col 9)-(line 86,col 80)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 90,col 9)-(line 90,col 27)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 92,col 9)-(line 92,col 27)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 96,col 9)-(line 96,col 53)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 53)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 102,col 9)-(line 103,col 41)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 106,col 41)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 110,col 9)-(line 110,col 49)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 49)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 116,col 9)-(line 116,col 53)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 118,col 53)",
            "(line 119,col 9)-(line 119,col 34)",
            "(line 122,col 9)-(line 122,col 37)",
            "(line 123,col 9)-(line 123,col 35)",
            "(line 124,col 9)-(line 124,col 37)",
            "(line 125,col 9)-(line 125,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.TextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/TextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.TextAnnotationTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        TextAnnotation a1 = new CategoryTextAnnotation(\"Test\", \"Category\", 1.0);\n        TextAnnotation a2 = new CategoryTextAnnotation(\"Test\", \"Category\", 1.0);\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 132,
        "end_line": 139,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 80)",
            "(line 134,col 9)-(line 134,col 80)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 136,col 9)-(line 136,col 31)",
            "(line 137,col 9)-(line 137,col 31)",
            "(line 138,col 9)-(line 138,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryPointerAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryPointerAnnotationTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 67)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryPointerAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests.CategoryPointerAnnotationTests(java.lang.String)",
        "snippet": "    public CategoryPointerAnnotationTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryPointerAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        CategoryPointerAnnotation a1 = new CategoryPointerAnnotation(\"Label\", \n                \"Key 1\", 20.0, Math.PI);\n        CategoryPointerAnnotation a2 = new CategoryPointerAnnotation(\"Label\", \n                \"Key 1\", 20.0, Math.PI);\n        assertTrue(a1.equals(a2));\n        \n        a1 = new CategoryPointerAnnotation(\"Label2\", \"Key 1\", 20.0, Math.PI);\n        assertFalse(a1.equals(a2));\n        a2 = new CategoryPointerAnnotation(\"Label2\", \"Key 1\", 20.0, Math.PI);\n        assertTrue(a1.equals(a2));\n        \n        a1.setCategory(\"Key 2\");\n        assertFalse(a1.equals(a2));\n        a2.setCategory(\"Key 2\");\n        assertTrue(a1.equals(a2));\n        \n        a1.setValue(22.0);\n        assertFalse(a1.equals(a2));\n        a2.setValue(22.0);\n        assertTrue(a1.equals(a2));\n        \n        //private double angle;\n        a1.setAngle(Math.PI / 4.0);\n        assertFalse(a1.equals(a2));\n        a2.setAngle(Math.PI / 4.0);\n        assertTrue(a1.equals(a2));\n        \n        //private double tipRadius;\n        a1.setTipRadius(20.0);\n        assertFalse(a1.equals(a2));\n        a2.setTipRadius(20.0);\n        assertTrue(a1.equals(a2));\n\n        //private double baseRadius;\n        a1.setBaseRadius(5.0);\n        assertFalse(a1.equals(a2));\n        a2.setBaseRadius(5.0);\n        assertTrue(a1.equals(a2));\n        \n        //private double arrowLength;\n        a1.setArrowLength(33.0);\n        assertFalse(a1.equals(a2));\n        a2.setArrowLength(33.0);\n        assertTrue(a1.equals(a2));\n        \n        //private double arrowWidth;\n        a1.setArrowWidth(9.0);\n        assertFalse(a1.equals(a2));\n        a2.setArrowWidth(9.0);\n        assertTrue(a1.equals(a2));\n        \n        //private Stroke arrowStroke;\n        Stroke stroke = new BasicStroke(1.5f);\n        a1.setArrowStroke(stroke);\n        assertFalse(a1.equals(a2));\n        a2.setArrowStroke(stroke);\n        assertTrue(a1.equals(a2));\n        \n        //private Paint arrowPaint;\n        a1.setArrowPaint(Color.blue);\n        assertFalse(a1.equals(a2));\n        a2.setArrowPaint(Color.blue);\n        assertTrue(a1.equals(a2));\n\n        //private double labelOffset;\n        a1.setLabelOffset(10.0);\n        assertFalse(a1.equals(a2));\n        a2.setLabelOffset(10.0);\n        assertTrue(a1.equals(a2));\n      \n    }",
        "begin_line": 85,
        "end_line": 157,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 88,col 40)",
            "(line 89,col 9)-(line 90,col 40)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 93,col 9)-(line 93,col 77)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 95,col 77)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 98,col 9)-(line 98,col 32)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 100,col 32)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 103,col 9)-(line 103,col 26)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 105,col 26)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 34)",
            "(line 115,col 9)-(line 115,col 30)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 117,col 30)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 121,col 9)-(line 121,col 30)",
            "(line 122,col 9)-(line 122,col 35)",
            "(line 123,col 9)-(line 123,col 30)",
            "(line 124,col 9)-(line 124,col 34)",
            "(line 127,col 9)-(line 127,col 32)",
            "(line 128,col 9)-(line 128,col 35)",
            "(line 129,col 9)-(line 129,col 32)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 133,col 9)-(line 133,col 30)",
            "(line 134,col 9)-(line 134,col 35)",
            "(line 135,col 9)-(line 135,col 30)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 139,col 9)-(line 139,col 46)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 34)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 146,col 9)-(line 146,col 37)",
            "(line 147,col 9)-(line 147,col 35)",
            "(line 148,col 9)-(line 148,col 37)",
            "(line 149,col 9)-(line 149,col 34)",
            "(line 152,col 9)-(line 152,col 32)",
            "(line 153,col 9)-(line 153,col 35)",
            "(line 154,col 9)-(line 154,col 32)",
            "(line 155,col 9)-(line 155,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryPointerAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        CategoryPointerAnnotation a1 = new CategoryPointerAnnotation(\"Label\", \n                \"A\", 20.0, Math.PI);\n        CategoryPointerAnnotation a2 = new CategoryPointerAnnotation(\"Label\", \n                \"A\", 20.0, Math.PI);\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 162,
        "end_line": 171,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 164,col 36)",
            "(line 165,col 9)-(line 166,col 36)",
            "(line 167,col 9)-(line 167,col 34)",
            "(line 168,col 9)-(line 168,col 31)",
            "(line 169,col 9)-(line 169,col 31)",
            "(line 170,col 9)-(line 170,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryPointerAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CategoryPointerAnnotation a1 = new CategoryPointerAnnotation(\"Label\", \n                \"A\", 20.0, Math.PI);\n        CategoryPointerAnnotation a2 = null;\n        try {\n            a2 = (CategoryPointerAnnotation) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 176,
        "end_line": 189,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 177,col 9)-(line 178,col 36)",
            "(line 179,col 9)-(line 179,col 44)",
            "(line 180,col 9)-(line 185,col 9)",
            "(line 186,col 9)-(line 186,col 29)",
            "(line 187,col 9)-(line 187,col 51)",
            "(line 188,col 9)-(line 188,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryPointerAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CategoryPointerAnnotation a1 = new CategoryPointerAnnotation(\"Label\", \n                \"A\", 20.0, Math.PI);\n        CategoryPointerAnnotation a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            a2 = (CategoryPointerAnnotation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 194,
        "end_line": 216,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 196,col 9)-(line 197,col 36)",
            "(line 198,col 9)-(line 198,col 44)",
            "(line 200,col 9)-(line 213,col 9)",
            "(line 214,col 9)-(line 214,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYLineAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYLineAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYLineAnnotationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYLineAnnotationTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYLineAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYLineAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYLineAnnotationTests.XYLineAnnotationTests(java.lang.String)",
        "snippet": "    public XYLineAnnotationTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYLineAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYLineAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYLineAnnotationTests.testEquals()",
        "snippet": "    public void testEquals() { \n        Stroke stroke = new BasicStroke(2.0f);\n        XYLineAnnotation a1 = new XYLineAnnotation(\n            10.0, 20.0, 100.0, 200.0, stroke, Color.blue\n        );\n        XYLineAnnotation a2 = new XYLineAnnotation(\n            10.0, 20.0, 100.0, 200.0, stroke, Color.blue\n        );\n        assertTrue(a1.equals(a2));\n        assertTrue(a2.equals(a1));\n        \n        a1 = new XYLineAnnotation(11.0, 20.0, 100.0, 200.0, stroke, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYLineAnnotation(11.0, 20.0, 100.0, 200.0, stroke, Color.blue);\n        assertTrue(a1.equals(a2));\n\n        a1 = new XYLineAnnotation(11.0, 21.0, 100.0, 200.0, stroke, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYLineAnnotation(11.0, 21.0, 100.0, 200.0, stroke, Color.blue);\n        assertTrue(a1.equals(a2));\n    \n        a1 = new XYLineAnnotation(11.0, 21.0, 101.0, 200.0, stroke, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYLineAnnotation(11.0, 21.0, 101.0, 200.0, stroke, Color.blue);\n        assertTrue(a1.equals(a2));\n\n        a1 = new XYLineAnnotation(11.0, 21.0, 101.0, 201.0, stroke, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYLineAnnotation(11.0, 21.0, 101.0, 201.0, stroke, Color.blue);\n        assertTrue(a1.equals(a2));\n\n        Stroke stroke2 = new BasicStroke(0.99f);\n        a1 = new XYLineAnnotation(11.0, 21.0, 101.0, 200.0, stroke2, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYLineAnnotation(11.0, 21.0, 101.0, 200.0, stroke2, Color.blue);\n        assertTrue(a1.equals(a2));\n\n        GradientPaint g1 = new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.white);\n        GradientPaint g2 = new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.white);\n        a1 = new XYLineAnnotation(11.0, 21.0, 101.0, 200.0, stroke2, g1);\n        assertFalse(a1.equals(a2));\n        a2 = new XYLineAnnotation(11.0, 21.0, 101.0, 200.0, stroke2, g2);\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 87,
        "end_line": 132,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 46)",
            "(line 89,col 9)-(line 91,col 10)",
            "(line 92,col 9)-(line 94,col 10)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 98,col 9)-(line 98,col 80)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 100,col 80)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 103,col 9)-(line 103,col 80)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 105,col 80)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 108,col 9)-(line 108,col 80)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 110,col 80)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 113,col 9)-(line 113,col 80)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 80)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 118,col 9)-(line 118,col 48)",
            "(line 119,col 9)-(line 119,col 81)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 121,col 81)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 124,col 9)-(line 125,col 41)",
            "(line 126,col 9)-(line 127,col 41)",
            "(line 128,col 9)-(line 128,col 73)",
            "(line 129,col 9)-(line 129,col 35)",
            "(line 130,col 9)-(line 130,col 73)",
            "(line 131,col 9)-(line 131,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYLineAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYLineAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYLineAnnotationTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        Stroke stroke = new BasicStroke(2.0f);\n        XYLineAnnotation a1 = new XYLineAnnotation(\n            10.0, 20.0, 100.0, 200.0, stroke, Color.blue\n        );\n        XYLineAnnotation a2 = new XYLineAnnotation(\n            10.0, 20.0, 100.0, 200.0, stroke, Color.blue\n        );\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 137,
        "end_line": 149,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 46)",
            "(line 139,col 9)-(line 141,col 10)",
            "(line 142,col 9)-(line 144,col 10)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 146,col 9)-(line 146,col 31)",
            "(line 147,col 9)-(line 147,col 31)",
            "(line 148,col 9)-(line 148,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYLineAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYLineAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYLineAnnotationTests.testCloning()",
        "snippet": "    public void testCloning() {\n        Stroke stroke = new BasicStroke(2.0f);\n        XYLineAnnotation a1 = new XYLineAnnotation(\n            10.0, 20.0, 100.0, 200.0, stroke, Color.blue\n        );\n        XYLineAnnotation a2 = null;\n        try {\n            a2 = (XYLineAnnotation) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 154,
        "end_line": 169,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 46)",
            "(line 156,col 9)-(line 158,col 10)",
            "(line 159,col 9)-(line 159,col 35)",
            "(line 160,col 9)-(line 165,col 9)",
            "(line 166,col 9)-(line 166,col 29)",
            "(line 167,col 9)-(line 167,col 51)",
            "(line 168,col 9)-(line 168,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYLineAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYLineAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYLineAnnotationTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        Stroke stroke = new BasicStroke(2.0f);\n        XYLineAnnotation a1 = new XYLineAnnotation(\n            10.0, 20.0, 100.0, 200.0, stroke, Color.blue\n        );\n        XYLineAnnotation a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (XYLineAnnotation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 174,
        "end_line": 199,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 46)",
            "(line 177,col 9)-(line 179,col 10)",
            "(line 180,col 9)-(line 180,col 35)",
            "(line 182,col 9)-(line 196,col 9)",
            "(line 197,col 9)-(line 197,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryTextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryTextAnnotationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryTextAnnotationTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryTextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryTextAnnotationTests.CategoryTextAnnotationTests(java.lang.String)",
        "snippet": "    public CategoryTextAnnotationTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryTextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryTextAnnotationTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        CategoryTextAnnotation a1 = new CategoryTextAnnotation(\n            \"Test\", \"Category\", 1.0\n        );\n        CategoryTextAnnotation a2 = new CategoryTextAnnotation(\n            \"Test\", \"Category\", 1.0\n        );\n        assertTrue(a1.equals(a2));\n        \n        // category \n        a1.setCategory(\"Category 2\");\n        assertFalse(a1.equals(a2));\n        a2.setCategory(\"Category 2\");\n        assertTrue(a1.equals(a2));\n\n        // categoryAnchor\n        a1.setCategoryAnchor(CategoryAnchor.START);\n        assertFalse(a1.equals(a2));\n        a2.setCategoryAnchor(CategoryAnchor.START);\n        assertTrue(a1.equals(a2));\n\n        // value \n        a1.setValue(0.15);\n        assertFalse(a1.equals(a2));\n        a2.setValue(0.15);\n        assertTrue(a1.equals(a2));\n      \n    }",
        "begin_line": 84,
        "end_line": 112,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 88,col 10)",
            "(line 89,col 9)-(line 91,col 10)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 95,col 9)-(line 95,col 37)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 37)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 101,col 9)-(line 101,col 51)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 51)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 107,col 9)-(line 107,col 26)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 26)",
            "(line 110,col 9)-(line 110,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryTextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryTextAnnotationTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        CategoryTextAnnotation a1 = new CategoryTextAnnotation(\n            \"Test\", \"Category\", 1.0\n        );\n        CategoryTextAnnotation a2 = new CategoryTextAnnotation(\n            \"Test\", \"Category\", 1.0\n        );\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 117,
        "end_line": 128,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 120,col 10)",
            "(line 121,col 9)-(line 123,col 10)",
            "(line 124,col 9)-(line 124,col 34)",
            "(line 125,col 9)-(line 125,col 31)",
            "(line 126,col 9)-(line 126,col 31)",
            "(line 127,col 9)-(line 127,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryTextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryTextAnnotationTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CategoryTextAnnotation a1 = new CategoryTextAnnotation(\n            \"Test\", \"Category\", 1.0\n        );\n        CategoryTextAnnotation a2 = null;\n        try {\n            a2 = (CategoryTextAnnotation) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 133,
        "end_line": 147,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 134,col 9)-(line 136,col 10)",
            "(line 137,col 9)-(line 137,col 41)",
            "(line 138,col 9)-(line 143,col 9)",
            "(line 144,col 9)-(line 144,col 29)",
            "(line 145,col 9)-(line 145,col 51)",
            "(line 146,col 9)-(line 146,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryTextAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryTextAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryTextAnnotationTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CategoryTextAnnotation a1 = new CategoryTextAnnotation(\n            \"Test\", \"Category\", 1.0\n        );\n        CategoryTextAnnotation a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (CategoryTextAnnotation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 152,
        "end_line": 176,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 156,col 10)",
            "(line 157,col 9)-(line 157,col 41)",
            "(line 159,col 9)-(line 173,col 9)",
            "(line 174,col 9)-(line 174,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYImageAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYImageAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYImageAnnotationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYImageAnnotationTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYImageAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYImageAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYImageAnnotationTests.XYImageAnnotationTests(java.lang.String)",
        "snippet": "    public XYImageAnnotationTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYImageAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYImageAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYImageAnnotationTests.testEquals()",
        "snippet": "    public void testEquals() {\n        Image image = JFreeChart.INFO.getLogo();\n        XYImageAnnotation a1 = new XYImageAnnotation(10.0, 20.0, image);\n        XYImageAnnotation a2 = new XYImageAnnotation(10.0, 20.0, image);\n        assertTrue(a1.equals(a2));\n        \n        a1 = new XYImageAnnotation(10.0, 20.0, image, RectangleAnchor.LEFT);\n        assertFalse(a1.equals(a2));\n        a2 = new XYImageAnnotation(10.0, 20.0, image, RectangleAnchor.LEFT);\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 82,
        "end_line": 92,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 48)",
            "(line 84,col 9)-(line 84,col 72)",
            "(line 85,col 9)-(line 85,col 72)",
            "(line 86,col 9)-(line 86,col 34)",
            "(line 88,col 9)-(line 88,col 76)",
            "(line 89,col 9)-(line 89,col 35)",
            "(line 90,col 9)-(line 90,col 76)",
            "(line 91,col 9)-(line 91,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYImageAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYImageAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYImageAnnotationTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        Image image = JFreeChart.INFO.getLogo();\n        XYImageAnnotation a1 = new XYImageAnnotation(10.0, 20.0, image);\n        XYImageAnnotation a2 = new XYImageAnnotation(10.0, 20.0, image);\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 97,
        "end_line": 105,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 48)",
            "(line 99,col 9)-(line 99,col 72)",
            "(line 100,col 9)-(line 100,col 72)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 102,col 9)-(line 102,col 31)",
            "(line 103,col 9)-(line 103,col 31)",
            "(line 104,col 9)-(line 104,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYImageAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYImageAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYImageAnnotationTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYImageAnnotation a1 = new XYImageAnnotation(10.0, 20.0, \n                JFreeChart.INFO.getLogo());\n        XYImageAnnotation a2 = null;\n        try {\n            a2 = (XYImageAnnotation) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 110,
        "end_line": 123,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 112,col 43)",
            "(line 113,col 9)-(line 113,col 36)",
            "(line 114,col 9)-(line 119,col 9)",
            "(line 120,col 9)-(line 120,col 29)",
            "(line 121,col 9)-(line 121,col 51)",
            "(line 122,col 9)-(line 122,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYPointerAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYPointerAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYPointerAnnotationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYPointerAnnotationTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYPointerAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYPointerAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYPointerAnnotationTests.XYPointerAnnotationTests(java.lang.String)",
        "snippet": "    public XYPointerAnnotationTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYPointerAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYPointerAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYPointerAnnotationTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        XYPointerAnnotation a1 = new XYPointerAnnotation(\"Label\", 10.0, 20.0, \n                Math.PI);\n        XYPointerAnnotation a2 = new XYPointerAnnotation(\"Label\", 10.0, 20.0, \n                Math.PI);\n        assertTrue(a1.equals(a2));\n        \n        a1 = new XYPointerAnnotation(\"Label2\", 10.0, 20.0, Math.PI);\n        assertFalse(a1.equals(a2));\n        a2 = new XYPointerAnnotation(\"Label2\", 10.0, 20.0, Math.PI);\n        assertTrue(a1.equals(a2));\n        \n        a1.setX(11.0);\n        assertFalse(a1.equals(a2));\n        a2.setX(11.0);\n        assertTrue(a1.equals(a2));\n        \n        a1.setY(22.0);\n        assertFalse(a1.equals(a2));\n        a2.setY(22.0);\n        assertTrue(a1.equals(a2));\n        \n        //private double angle;\n        a1.setAngle(Math.PI / 4.0);\n        assertFalse(a1.equals(a2));\n        a2.setAngle(Math.PI / 4.0);\n        assertTrue(a1.equals(a2));\n        \n        //private double tipRadius;\n        a1.setTipRadius(20.0);\n        assertFalse(a1.equals(a2));\n        a2.setTipRadius(20.0);\n        assertTrue(a1.equals(a2));\n\n        //private double baseRadius;\n        a1.setBaseRadius(5.0);\n        assertFalse(a1.equals(a2));\n        a2.setBaseRadius(5.0);\n        assertTrue(a1.equals(a2));\n        \n        //private double arrowLength;\n        a1.setArrowLength(33.0);\n        assertFalse(a1.equals(a2));\n        a2.setArrowLength(33.0);\n        assertTrue(a1.equals(a2));\n        \n        //private double arrowWidth;\n        a1.setArrowWidth(9.0);\n        assertFalse(a1.equals(a2));\n        a2.setArrowWidth(9.0);\n        assertTrue(a1.equals(a2));\n        \n        //private Stroke arrowStroke;\n        Stroke stroke = new BasicStroke(1.5f);\n        a1.setArrowStroke(stroke);\n        assertFalse(a1.equals(a2));\n        a2.setArrowStroke(stroke);\n        assertTrue(a1.equals(a2));\n        \n        //private Paint arrowPaint;\n        a1.setArrowPaint(Color.blue);\n        assertFalse(a1.equals(a2));\n        a2.setArrowPaint(Color.blue);\n        assertTrue(a1.equals(a2));\n\n        //private double labelOffset;\n        a1.setLabelOffset(10.0);\n        assertFalse(a1.equals(a2));\n        a2.setLabelOffset(10.0);\n        assertTrue(a1.equals(a2));\n      \n    }",
        "begin_line": 88,
        "end_line": 160,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 91,col 25)",
            "(line 92,col 9)-(line 93,col 25)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 96,col 68)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 68)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 101,col 22)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 22)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 106,col 9)-(line 106,col 22)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 22)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 113,col 35)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 118,col 9)-(line 118,col 30)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 120,col 30)",
            "(line 121,col 9)-(line 121,col 34)",
            "(line 124,col 9)-(line 124,col 30)",
            "(line 125,col 9)-(line 125,col 35)",
            "(line 126,col 9)-(line 126,col 30)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 130,col 9)-(line 130,col 32)",
            "(line 131,col 9)-(line 131,col 35)",
            "(line 132,col 9)-(line 132,col 32)",
            "(line 133,col 9)-(line 133,col 34)",
            "(line 136,col 9)-(line 136,col 30)",
            "(line 137,col 9)-(line 137,col 35)",
            "(line 138,col 9)-(line 138,col 30)",
            "(line 139,col 9)-(line 139,col 34)",
            "(line 142,col 9)-(line 142,col 46)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 144,col 9)-(line 144,col 35)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 146,col 9)-(line 146,col 34)",
            "(line 149,col 9)-(line 149,col 37)",
            "(line 150,col 9)-(line 150,col 35)",
            "(line 151,col 9)-(line 151,col 37)",
            "(line 152,col 9)-(line 152,col 34)",
            "(line 155,col 9)-(line 155,col 32)",
            "(line 156,col 9)-(line 156,col 35)",
            "(line 157,col 9)-(line 157,col 32)",
            "(line 158,col 9)-(line 158,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYPointerAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYPointerAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYPointerAnnotationTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        XYPointerAnnotation a1 = new XYPointerAnnotation(\"Label\", 10.0, 20.0, \n                Math.PI);\n        XYPointerAnnotation a2 = new XYPointerAnnotation(\"Label\", 10.0, 20.0, \n                Math.PI);\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 165,
        "end_line": 174,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 166,col 9)-(line 167,col 25)",
            "(line 168,col 9)-(line 169,col 25)",
            "(line 170,col 9)-(line 170,col 34)",
            "(line 171,col 9)-(line 171,col 31)",
            "(line 172,col 9)-(line 172,col 31)",
            "(line 173,col 9)-(line 173,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYPointerAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYPointerAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYPointerAnnotationTests.testCloning()",
        "snippet": "    public void testCloning() {\n\n        XYPointerAnnotation a1 = new XYPointerAnnotation(\"Label\", 10.0, 20.0, \n                Math.PI);\n        XYPointerAnnotation a2 = null;\n        try {\n            a2 = (XYPointerAnnotation) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 179,
        "end_line": 193,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 181,col 9)-(line 182,col 25)",
            "(line 183,col 9)-(line 183,col 38)",
            "(line 184,col 9)-(line 189,col 9)",
            "(line 190,col 9)-(line 190,col 29)",
            "(line 191,col 9)-(line 191,col 51)",
            "(line 192,col 9)-(line 192,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYPointerAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYPointerAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYPointerAnnotationTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYPointerAnnotation a1 = new XYPointerAnnotation(\"Label\", 10.0, 20.0, \n                Math.PI);\n        XYPointerAnnotation a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            a2 = (XYPointerAnnotation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 198,
        "end_line": 220,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 200,col 9)-(line 201,col 25)",
            "(line 202,col 9)-(line 202,col 38)",
            "(line 204,col 9)-(line 217,col 9)",
            "(line 218,col 9)-(line 218,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYPolygonAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYPolygonAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYPolygonAnnotationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYPolygonAnnotationTests.class);\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYPolygonAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYPolygonAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYPolygonAnnotationTests.XYPolygonAnnotationTests(java.lang.String)",
        "snippet": "    public XYPolygonAnnotationTests(String name) {\n        super(name);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYPolygonAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYPolygonAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYPolygonAnnotationTests.testEquals()",
        "snippet": "    public void testEquals() { \n        Stroke stroke1 = new BasicStroke(2.0f);\n        Stroke stroke2 = new BasicStroke(2.5f);\n        XYPolygonAnnotation a1 = new XYPolygonAnnotation(new double[] {1.0, \n                2.0, 3.0, 4.0, 5.0, 6.0}, stroke1, Color.red, Color.blue);\n        XYPolygonAnnotation a2 = new XYPolygonAnnotation(new double[] {1.0, \n                2.0, 3.0, 4.0, 5.0, 6.0}, stroke1, Color.red, Color.blue);\n        assertTrue(a1.equals(a2));\n        assertTrue(a2.equals(a1));\n        \n        a1 = new XYPolygonAnnotation(new double[] {99.0, 2.0, 3.0, 4.0, 5.0, \n                6.0}, stroke1, Color.red, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYPolygonAnnotation(new double[] {99.0, 2.0, 3.0, 4.0, 5.0, \n                6.0}, stroke1, Color.red, Color.blue);\n        assertTrue(a1.equals(a2));\n\n        a1 = new XYPolygonAnnotation(new double[] {99.0, 2.0, 3.0, 4.0, 5.0, \n                6.0}, stroke2, Color.red, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYPolygonAnnotation(new double[] {99.0, 2.0, 3.0, 4.0, 5.0, \n                6.0}, stroke2, Color.red, Color.blue);\n        assertTrue(a1.equals(a2));\n\n        GradientPaint gp1 = new GradientPaint(1.0f, 2.0f, Color.yellow, 3.0f, \n                4.0f, Color.white);\n        GradientPaint gp2 = new GradientPaint(1.0f, 2.0f, Color.yellow, 3.0f, \n                4.0f, Color.white);\n        a1 = new XYPolygonAnnotation(new double[] {99.0, 2.0, 3.0, 4.0, 5.0, \n                6.0}, stroke2, gp1, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYPolygonAnnotation(new double[] {99.0, 2.0, 3.0, 4.0, 5.0, \n                6.0}, stroke2, gp2, Color.blue);\n        assertTrue(a1.equals(a2));\n\n        GradientPaint gp3 = new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, \n                4.0f, Color.white);\n        GradientPaint gp4 = new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, \n                4.0f, Color.white);\n        a1 = new XYPolygonAnnotation(new double[] {99.0, 2.0, 3.0, 4.0, 5.0, \n                6.0}, stroke2, gp1, gp3);\n        assertFalse(a1.equals(a2));\n        a2 = new XYPolygonAnnotation(new double[] {99.0, 2.0, 3.0, 4.0, 5.0, \n                6.0}, stroke2, gp2, gp4);\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 86,
        "end_line": 131,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 47)",
            "(line 88,col 9)-(line 88,col 47)",
            "(line 89,col 9)-(line 90,col 74)",
            "(line 91,col 9)-(line 92,col 74)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 97,col 54)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 100,col 54)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 103,col 9)-(line 104,col 54)",
            "(line 105,col 9)-(line 105,col 35)",
            "(line 106,col 9)-(line 107,col 54)",
            "(line 108,col 9)-(line 108,col 34)",
            "(line 110,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 113,col 35)",
            "(line 114,col 9)-(line 115,col 48)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 118,col 48)",
            "(line 119,col 9)-(line 119,col 34)",
            "(line 121,col 9)-(line 122,col 35)",
            "(line 123,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 126,col 41)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 129,col 41)",
            "(line 130,col 9)-(line 130,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYPolygonAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYPolygonAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYPolygonAnnotationTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        Stroke stroke = new BasicStroke(2.0f);\n        XYPolygonAnnotation a1 = new XYPolygonAnnotation(new double[] {1.0, \n                2.0, 3.0, 4.0, 5.0, 6.0}, stroke, Color.red, Color.blue);\n        XYPolygonAnnotation a2 = new XYPolygonAnnotation(new double[] {1.0, \n                2.0, 3.0, 4.0, 5.0, 6.0}, stroke, Color.red, Color.blue);\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 136,
        "end_line": 146,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 46)",
            "(line 138,col 9)-(line 139,col 73)",
            "(line 140,col 9)-(line 141,col 73)",
            "(line 142,col 9)-(line 142,col 34)",
            "(line 143,col 9)-(line 143,col 31)",
            "(line 144,col 9)-(line 144,col 31)",
            "(line 145,col 9)-(line 145,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYPolygonAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYPolygonAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYPolygonAnnotationTests.testCloning()",
        "snippet": "    public void testCloning() {\n        Stroke stroke1 = new BasicStroke(2.0f);\n        XYPolygonAnnotation a1 = new XYPolygonAnnotation(new double[] {1.0, \n                2.0, 3.0, 4.0, 5.0, 6.0}, stroke1, Color.red, Color.blue);\n        XYPolygonAnnotation a2 = null;\n        try {\n            a2 = (XYPolygonAnnotation) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 151,
        "end_line": 165,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 47)",
            "(line 153,col 9)-(line 154,col 74)",
            "(line 155,col 9)-(line 155,col 38)",
            "(line 156,col 9)-(line 161,col 9)",
            "(line 162,col 9)-(line 162,col 29)",
            "(line 163,col 9)-(line 163,col 51)",
            "(line 164,col 9)-(line 164,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYPolygonAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYPolygonAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYPolygonAnnotationTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        Stroke stroke1 = new BasicStroke(2.0f);\n        XYPolygonAnnotation a1 = new XYPolygonAnnotation(new double[] {1.0, \n                2.0, 3.0, 4.0, 5.0, 6.0}, stroke1, Color.red, Color.blue);\n        XYPolygonAnnotation a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (XYPolygonAnnotation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 170,
        "end_line": 194,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 47)",
            "(line 173,col 9)-(line 174,col 74)",
            "(line 175,col 9)-(line 175,col 38)",
            "(line 177,col 9)-(line 191,col 9)",
            "(line 192,col 9)-(line 192,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryLineAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryLineAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryLineAnnotationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryLineAnnotationTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryLineAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryLineAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryLineAnnotationTests.CategoryLineAnnotationTests(java.lang.String)",
        "snippet": "    public CategoryLineAnnotationTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryLineAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryLineAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryLineAnnotationTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        BasicStroke s1 = new BasicStroke(1.0f);\n        BasicStroke s2 = new BasicStroke(2.0f);\n        CategoryLineAnnotation a1 = new CategoryLineAnnotation(\n            \"Category 1\", 1.0, \"Category 2\", 2.0, Color.red, s1);\n        CategoryLineAnnotation a2 = new CategoryLineAnnotation(\n            \"Category 1\", 1.0, \"Category 2\", 2.0, Color.red, s1);\n        assertTrue(a1.equals(a2));\n        assertTrue(a2.equals(a1));\n        \n        // category 1 \n        a1.setCategory1(\"Category A\");\n        assertFalse(a1.equals(a2));\n        a2.setCategory1(\"Category A\");\n        assertTrue(a1.equals(a2));\n\n        // value 1\n        a1.setValue1(0.15);\n        assertFalse(a1.equals(a2));\n        a2.setValue1(0.15);\n        assertTrue(a1.equals(a2));\n      \n        // category 2 \n        a1.setCategory2(\"Category B\");\n        assertFalse(a1.equals(a2));\n        a2.setCategory2(\"Category B\");\n        assertTrue(a1.equals(a2));\n\n        // value 2\n        a1.setValue2(0.25);\n        assertFalse(a1.equals(a2));\n        a2.setValue2(0.25);\n        assertTrue(a1.equals(a2));\n        \n        // paint\n        a1.setPaint(Color.yellow);\n        assertFalse(a1.equals(a2));\n        a2.setPaint(Color.yellow);\n        assertTrue(a1.equals(a2));\n        \n        // stroke\n        a1.setStroke(s2);\n        assertFalse(a1.equals(a2));\n        a2.setStroke(s2);\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 84,
        "end_line": 130,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 47)",
            "(line 87,col 9)-(line 87,col 47)",
            "(line 88,col 9)-(line 89,col 65)",
            "(line 90,col 9)-(line 91,col 65)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 96,col 9)-(line 96,col 38)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 38)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 102,col 9)-(line 102,col 27)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 27)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 108,col 9)-(line 108,col 38)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 110,col 38)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 114,col 9)-(line 114,col 27)",
            "(line 115,col 9)-(line 115,col 35)",
            "(line 116,col 9)-(line 116,col 27)",
            "(line 117,col 9)-(line 117,col 34)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 126,col 9)-(line 126,col 25)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 128,col 25)",
            "(line 129,col 9)-(line 129,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryLineAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryLineAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryLineAnnotationTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        CategoryLineAnnotation a1 = new CategoryLineAnnotation(\n            \"Category 1\", 1.0, \"Category 2\", 2.0, Color.red, \n            new BasicStroke(1.0f));\n        CategoryLineAnnotation a2 = new CategoryLineAnnotation(\n            \"Category 1\", 1.0, \"Category 2\", 2.0, Color.red, \n            new BasicStroke(1.0f));\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 135,
        "end_line": 146,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 34)",
            "(line 143,col 9)-(line 143,col 31)",
            "(line 144,col 9)-(line 144,col 31)",
            "(line 145,col 9)-(line 145,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryLineAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryLineAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryLineAnnotationTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CategoryLineAnnotation a1 = new CategoryLineAnnotation(\n            \"Category 1\", 1.0, \"Category 2\", 2.0, Color.red, \n            new BasicStroke(1.0f));\n        CategoryLineAnnotation a2 = null;\n        try {\n            a2 = (CategoryLineAnnotation) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 151,
        "end_line": 165,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 152,col 9)-(line 154,col 35)",
            "(line 155,col 9)-(line 155,col 41)",
            "(line 156,col 9)-(line 161,col 9)",
            "(line 162,col 9)-(line 162,col 29)",
            "(line 163,col 9)-(line 163,col 51)",
            "(line 164,col 9)-(line 164,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.CategoryLineAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/CategoryLineAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.CategoryLineAnnotationTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CategoryLineAnnotation a1 = new CategoryLineAnnotation(\n            \"Category 1\", 1.0, \"Category 2\", 2.0, Color.red, \n            new BasicStroke(1.0f));\n        CategoryLineAnnotation a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (CategoryLineAnnotation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 170,
        "end_line": 194,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 172,col 9)-(line 174,col 35)",
            "(line 175,col 9)-(line 175,col 41)",
            "(line 177,col 9)-(line 191,col 9)",
            "(line 192,col 9)-(line 192,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYDrawableAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests.TestDrawable.TestDrawable()",
        "snippet": "        public TestDrawable() {\n        }",
        "begin_line": 72,
        "end_line": 73,
        "comment": "\n         * Default constructor.\n         ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYDrawableAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests.TestDrawable.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "        public void draw(Graphics2D g2, Rectangle2D area) {\n            // do nothing\n        }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n         * Draws something.\n         * @param g2  the graphics device.\n         * @param area  the area in which to draw.\n         ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYDrawableAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests.TestDrawable.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object obj) {\n            if (obj == this) {\n                return true;\n            }\n            if (!(obj instanceof TestDrawable)) {\n                return false;\n            }\n            return true;\n        }",
        "begin_line": 87,
        "end_line": 95,
        "comment": "\n         * Tests this object for equality with an arbitrary object.\n         * @param obj  the object to test against (<code>null</code> permitted).\n         * @return A boolean.\n         ",
        "child_ranges": [
            "(line 88,col 13)-(line 90,col 13)",
            "(line 91,col 13)-(line 93,col 13)",
            "(line 94,col 13)-(line 94,col 24)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYDrawableAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests.TestDrawable.clone()",
        "snippet": "        public Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\n         * Returns a clone.\n         * \n         * @return A clone.\n         * \n         * @throws CloneNotSupportedException if there is a problem cloning.\n         ",
        "child_ranges": [
            "(line 104,col 13)-(line 104,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYDrawableAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYDrawableAnnotationTests.class);\n    }",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYDrawableAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests.XYDrawableAnnotationTests(java.lang.String)",
        "snippet": "    public XYDrawableAnnotationTests(String name) {\n        super(name);\n    }",
        "begin_line": 122,
        "end_line": 124,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYDrawableAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests.testEquals()",
        "snippet": "    public void testEquals() {    \n        XYDrawableAnnotation a1 = new XYDrawableAnnotation(10.0, 20.0, 100.0, \n                200.0, new TestDrawable());\n        XYDrawableAnnotation a2 = new XYDrawableAnnotation(10.0, 20.0, 100.0, \n                200.0, new TestDrawable());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 129,
        "end_line": 135,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 130,col 9)-(line 131,col 43)",
            "(line 132,col 9)-(line 133,col 43)",
            "(line 134,col 9)-(line 134,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYDrawableAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        XYDrawableAnnotation a1 = new XYDrawableAnnotation(10.0, 20.0, 100.0, \n                200.0, new TestDrawable());\n        XYDrawableAnnotation a2 = new XYDrawableAnnotation(10.0, 20.0, 100.0, \n                200.0, new TestDrawable());\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 140,
        "end_line": 149,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 142,col 43)",
            "(line 143,col 9)-(line 144,col 43)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 146,col 9)-(line 146,col 31)",
            "(line 147,col 9)-(line 147,col 31)",
            "(line 148,col 9)-(line 148,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYDrawableAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYDrawableAnnotation a1 = new XYDrawableAnnotation(10.0, 20.0, 100.0, \n                200.0, new TestDrawable());\n        XYDrawableAnnotation a2 = null;\n        try {\n            a2 = (XYDrawableAnnotation) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 154,
        "end_line": 167,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 156,col 43)",
            "(line 157,col 9)-(line 157,col 39)",
            "(line 158,col 9)-(line 163,col 9)",
            "(line 164,col 9)-(line 164,col 29)",
            "(line 165,col 9)-(line 165,col 51)",
            "(line 166,col 9)-(line 166,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYDrawableAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYDrawableAnnotationTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYDrawableAnnotation a1 = new XYDrawableAnnotation(10.0, 20.0, 100.0, \n                200.0, new TestDrawable());\n        XYDrawableAnnotation a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            a2 = (XYDrawableAnnotation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n\n    }",
        "begin_line": 172,
        "end_line": 194,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 175,col 43)",
            "(line 176,col 9)-(line 176,col 39)",
            "(line 178,col 9)-(line 191,col 9)",
            "(line 192,col 9)-(line 192,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYBoxAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYBoxAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYBoxAnnotationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYBoxAnnotationTests.class);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYBoxAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYBoxAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYBoxAnnotationTests.XYBoxAnnotationTests(java.lang.String)",
        "snippet": "    public XYBoxAnnotationTests(String name) {\n        super(name);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYBoxAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYBoxAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYBoxAnnotationTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        XYBoxAnnotation a1 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, \n        \t\tnew BasicStroke(1.2f), Color.red, Color.blue);\n        XYBoxAnnotation a2 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, \n        \t\tnew BasicStroke(1.2f), Color.red, Color.blue);\n        assertTrue(a1.equals(a2));\n        assertTrue(a2.equals(a1));\n      \n        // x0\n        a1 = new XYBoxAnnotation(2.0, 2.0, 3.0, 4.0, new BasicStroke(1.2f), \n        \t\tColor.red, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYBoxAnnotation(2.0, 2.0, 3.0, 4.0, new BasicStroke(1.2f), \n        \t\tColor.red, Color.blue);\n        assertTrue(a1.equals(a2));\n        \n        // stroke\n        a1 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, new BasicStroke(2.3f), \n        \t\tColor.red, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, new BasicStroke(2.3f), \n        \t\tColor.red, Color.blue);\n        assertTrue(a1.equals(a2));\n        \n        GradientPaint gp1a = new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red);\n        GradientPaint gp1b = new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red);\n        GradientPaint gp2a = new GradientPaint(5.0f, 6.0f, Color.pink, \n                7.0f, 8.0f, Color.white);\n        GradientPaint gp2b = new GradientPaint(5.0f, 6.0f, Color.pink, \n                7.0f, 8.0f, Color.white);\n        \n        // outlinePaint\n        a1 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, new BasicStroke(2.3f), \n        \t\tgp1a, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, new BasicStroke(2.3f), \n        \t\tgp1b, Color.blue);\n        assertTrue(a1.equals(a2));\n        \n        // fillPaint\n        a1 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, new BasicStroke(2.3f), \n        \t\tgp1a, gp2a);\n        assertFalse(a1.equals(a2));\n        a2 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, new BasicStroke(2.3f), \n        \t\tgp1b, gp2b);\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 92,
        "end_line": 141,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 95,col 56)",
            "(line 96,col 9)-(line 97,col 56)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 102,col 9)-(line 103,col 33)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 106,col 33)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 110,col 9)-(line 111,col 33)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 114,col 33)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 117,col 9)-(line 118,col 39)",
            "(line 119,col 9)-(line 120,col 39)",
            "(line 121,col 9)-(line 122,col 41)",
            "(line 123,col 9)-(line 124,col 41)",
            "(line 127,col 9)-(line 128,col 28)",
            "(line 129,col 9)-(line 129,col 35)",
            "(line 130,col 9)-(line 131,col 28)",
            "(line 132,col 9)-(line 132,col 34)",
            "(line 135,col 9)-(line 136,col 22)",
            "(line 137,col 9)-(line 137,col 35)",
            "(line 138,col 9)-(line 139,col 22)",
            "(line 140,col 9)-(line 140,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYBoxAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYBoxAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYBoxAnnotationTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        XYBoxAnnotation a1 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, \n        \t\tnew BasicStroke(1.2f), Color.red, Color.blue);\n        XYBoxAnnotation a2 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, \n        \t\tnew BasicStroke(1.2f), Color.red, Color.blue);\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 146,
        "end_line": 155,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 148,col 56)",
            "(line 149,col 9)-(line 150,col 56)",
            "(line 151,col 9)-(line 151,col 34)",
            "(line 152,col 9)-(line 152,col 31)",
            "(line 153,col 9)-(line 153,col 31)",
            "(line 154,col 9)-(line 154,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYBoxAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYBoxAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYBoxAnnotationTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYBoxAnnotation a1 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, \n        \t\tnew BasicStroke(1.2f), Color.red, Color.blue);\n        XYBoxAnnotation a2 = null;\n        try {\n            a2 = (XYBoxAnnotation) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }",
        "begin_line": 160,
        "end_line": 173,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 161,col 9)-(line 162,col 56)",
            "(line 163,col 9)-(line 163,col 34)",
            "(line 164,col 9)-(line 169,col 9)",
            "(line 170,col 9)-(line 170,col 29)",
            "(line 171,col 9)-(line 171,col 51)",
            "(line 172,col 9)-(line 172,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYBoxAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYBoxAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYBoxAnnotationTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYBoxAnnotation a1 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, \n                new BasicStroke(1.2f), Color.red, Color.blue);\n        XYBoxAnnotation a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n            \t\tbuffer.toByteArray()));\n            a2 = (XYBoxAnnotation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n    }",
        "begin_line": 178,
        "end_line": 199,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 180,col 9)-(line 181,col 62)",
            "(line 182,col 9)-(line 182,col 34)",
            "(line 184,col 9)-(line 197,col 9)",
            "(line 198,col 9)-(line 198,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.annotations.junit.XYBoxAnnotationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/annotations/junit/XYBoxAnnotationTests.java",
        "signature": "org.jfree.chart.annotations.junit.XYBoxAnnotationTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultTableXYDataset dataset = new DefaultTableXYDataset();\n        \n            XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n            s1.add(5.0, 5.0);\n            s1.add(10.0, 15.5);\n            s1.add(15.0, 9.5);\n            s1.add(20.0, 7.5);\n            dataset.addSeries(s1);\n        \n            XYSeries s2 = new XYSeries(\"Series 2\", true, false);\n            s2.add(5.0, 5.0);\n            s2.add(10.0, 15.5);\n            s2.add(15.0, 9.5);\n            s2.add(20.0, 3.5);\n            dataset.addSeries(s2);\n            XYPlot plot = new XYPlot(dataset, \n                    new NumberAxis(\"X\"), new NumberAxis(\"Y\"), \n                    new XYLineAndShapeRenderer());\n            plot.addAnnotation(new XYBoxAnnotation(10.0, 12.0, 3.0, 4.0, \n            \t\tnew BasicStroke(1.2f), Color.red, Color.blue));\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 205,
        "end_line": 238,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown.\n     ",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 32)",
            "(line 207,col 9)-(line 236,col 9)",
            "(line 237,col 9)-(line 237,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/IntervalCategoryLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(IntervalCategoryLabelGeneratorTests.class);\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 72)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/IntervalCategoryLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests.IntervalCategoryLabelGeneratorTests(java.lang.String)",
        "snippet": "    public IntervalCategoryLabelGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/IntervalCategoryLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        IntervalCategoryItemLabelGenerator g1 \n            = new IntervalCategoryItemLabelGenerator();\n        IntervalCategoryItemLabelGenerator g2 \n            = new IntervalCategoryItemLabelGenerator();\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new IntervalCategoryItemLabelGenerator(\n            \"{3} - {4}\", new DecimalFormat(\"0.000\")\n        );\n        assertFalse(g1.equals(g2));\n        g2 = new IntervalCategoryItemLabelGenerator(\n            \"{3} - {4}\", new DecimalFormat(\"0.000\")\n        );\n        assertTrue(g1.equals(g2));\n        \n        g1 = new IntervalCategoryItemLabelGenerator(\n            \"{3} - {4}\", new SimpleDateFormat(\"d-MMM\")\n        );\n        assertFalse(g1.equals(g2));\n        g2 = new IntervalCategoryItemLabelGenerator(\n            \"{3} - {4}\", new SimpleDateFormat(\"d-MMM\")\n        );\n        assertTrue(g1.equals(g2));\n        \n    }",
        "begin_line": 86,
        "end_line": 113,
        "comment": "\n     * Tests the equals() method.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 89,col 55)",
            "(line 90,col 9)-(line 91,col 55)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 95,col 9)-(line 97,col 10)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 101,col 10)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 104,col 9)-(line 106,col 10)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 110,col 10)",
            "(line 111,col 9)-(line 111,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/IntervalCategoryLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        IntervalCategoryItemLabelGenerator g1 \n            = new IntervalCategoryItemLabelGenerator();\n        IntervalCategoryItemLabelGenerator g2 = null;\n        try {\n            g2 = (IntervalCategoryItemLabelGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 118,
        "end_line": 131,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 120,col 55)",
            "(line 121,col 9)-(line 121,col 53)",
            "(line 122,col 9)-(line 127,col 9)",
            "(line 128,col 9)-(line 128,col 29)",
            "(line 129,col 9)-(line 129,col 51)",
            "(line 130,col 9)-(line 130,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/IntervalCategoryLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        IntervalCategoryItemLabelGenerator g1 \n            = new IntervalCategoryItemLabelGenerator(\n                \"{3} - {4}\", DateFormat.getInstance()\n            );\n        IntervalCategoryItemLabelGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            g2 = (IntervalCategoryItemLabelGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 136,
        "end_line": 161,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 141,col 14)",
            "(line 142,col 9)-(line 142,col 53)",
            "(line 144,col 9)-(line 158,col 9)",
            "(line 159,col 9)-(line 159,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BubbleXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BubbleXYItemLabelGeneratorTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 68)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BubbleXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests.BubbleXYItemLabelGeneratorTests(java.lang.String)",
        "snippet": "    public BubbleXYItemLabelGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BubbleXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        // some setup...        \n        String f1 = \"{1}\";\n        String f2 = \"{2}\";\n        NumberFormat xnf1 = new DecimalFormat(\"0.00\");\n        NumberFormat xnf2 = new DecimalFormat(\"0.000\");\n        NumberFormat ynf1 = new DecimalFormat(\"0.00\");\n        NumberFormat ynf2 = new DecimalFormat(\"0.000\");\n        NumberFormat znf1 = new DecimalFormat(\"0.00\");\n        NumberFormat znf2 = new DecimalFormat(\"0.000\");\n\n        BubbleXYItemLabelGenerator g1 = null;\n        BubbleXYItemLabelGenerator g2 = null;\n        \n        g1 = new BubbleXYItemLabelGenerator(f1, xnf1, ynf1, znf1);\n        g2 = new BubbleXYItemLabelGenerator(f1, xnf1, ynf1, znf1);\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new BubbleXYItemLabelGenerator(f2, xnf1, ynf1, znf1);\n        assertFalse(g1.equals(g2));\n        g2 = new BubbleXYItemLabelGenerator(f2, xnf1, ynf1, znf1);\n        assertTrue(g1.equals(g2));\n                \n        g1 = new BubbleXYItemLabelGenerator(f2, xnf2, ynf1, znf1);\n        assertFalse(g1.equals(g2));\n        g2 = new BubbleXYItemLabelGenerator(f2, xnf2, ynf1, znf1);\n        assertTrue(g1.equals(g2));\n\n        g1 = new BubbleXYItemLabelGenerator(f2, xnf2, ynf2, znf1);\n        assertFalse(g1.equals(g2));\n        g2 = new BubbleXYItemLabelGenerator(f2, xnf2, ynf2, znf1);\n        assertTrue(g1.equals(g2));\n                \n        g1 = new BubbleXYItemLabelGenerator(f2, xnf2, ynf2, znf2);\n        assertFalse(g1.equals(g2));\n        g2 = new BubbleXYItemLabelGenerator(f2, xnf2, ynf2, znf2);\n        assertTrue(g1.equals(g2));\n\n        DateFormat xdf1 = new SimpleDateFormat(\"d-MMM\");\n        DateFormat xdf2 = new SimpleDateFormat(\"d-MMM-yyyy\");\n        DateFormat ydf1 = new SimpleDateFormat(\"d-MMM\");\n        DateFormat ydf2 = new SimpleDateFormat(\"d-MMM-yyyy\");\n        DateFormat zdf1 = new SimpleDateFormat(\"d-MMM\");\n        DateFormat zdf2 = new SimpleDateFormat(\"d-MMM-yyyy\");\n\n        g1 = new BubbleXYItemLabelGenerator(f1, xdf1, ydf1, zdf1);\n        g2 = new BubbleXYItemLabelGenerator(f1, xdf1, ydf1, zdf1);\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new BubbleXYItemLabelGenerator(f1, xdf2, ydf1, zdf1);\n        assertFalse(g1.equals(g2));\n        g2 = new BubbleXYItemLabelGenerator(f1, xdf2, ydf1, zdf1);\n        assertTrue(g1.equals(g2));\n                \n        g1 = new BubbleXYItemLabelGenerator(f1, xdf2, ydf2, zdf1);\n        assertFalse(g1.equals(g2));\n        g2 = new BubbleXYItemLabelGenerator(f1, xdf2, ydf2, zdf1);\n        assertTrue(g1.equals(g2));\n\n        g1 = new BubbleXYItemLabelGenerator(f1, xdf2, ydf2, zdf2);\n        assertFalse(g1.equals(g2));\n        g2 = new BubbleXYItemLabelGenerator(f1, xdf2, ydf2, zdf2);\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 88,
        "end_line": 154,
        "comment": "\n     * A series of tests for the equals() method.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 26)",
            "(line 92,col 9)-(line 92,col 26)",
            "(line 93,col 9)-(line 93,col 54)",
            "(line 94,col 9)-(line 94,col 55)",
            "(line 95,col 9)-(line 95,col 54)",
            "(line 96,col 9)-(line 96,col 55)",
            "(line 97,col 9)-(line 97,col 54)",
            "(line 98,col 9)-(line 98,col 55)",
            "(line 100,col 9)-(line 100,col 45)",
            "(line 101,col 9)-(line 101,col 45)",
            "(line 103,col 9)-(line 103,col 66)",
            "(line 104,col 9)-(line 104,col 66)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 108,col 9)-(line 108,col 66)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 110,col 66)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 113,col 9)-(line 113,col 66)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 66)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 118,col 9)-(line 118,col 66)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 120,col 66)",
            "(line 121,col 9)-(line 121,col 34)",
            "(line 123,col 9)-(line 123,col 66)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 125,col 66)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 128,col 9)-(line 128,col 56)",
            "(line 129,col 9)-(line 129,col 61)",
            "(line 130,col 9)-(line 130,col 56)",
            "(line 131,col 9)-(line 131,col 61)",
            "(line 132,col 9)-(line 132,col 56)",
            "(line 133,col 9)-(line 133,col 61)",
            "(line 135,col 9)-(line 135,col 66)",
            "(line 136,col 9)-(line 136,col 66)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 138,col 9)-(line 138,col 34)",
            "(line 140,col 9)-(line 140,col 66)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 66)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 145,col 9)-(line 145,col 66)",
            "(line 146,col 9)-(line 146,col 35)",
            "(line 147,col 9)-(line 147,col 66)",
            "(line 148,col 9)-(line 148,col 34)",
            "(line 150,col 9)-(line 150,col 66)",
            "(line 151,col 9)-(line 151,col 35)",
            "(line 152,col 9)-(line 152,col 66)",
            "(line 153,col 9)-(line 153,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BubbleXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        BubbleXYItemLabelGenerator g1 = new BubbleXYItemLabelGenerator();\n        BubbleXYItemLabelGenerator g2 = null;\n        try {\n            g2 = (BubbleXYItemLabelGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Clone failed.\");\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 159,
        "end_line": 171,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 73)",
            "(line 161,col 9)-(line 161,col 45)",
            "(line 162,col 9)-(line 167,col 9)",
            "(line 168,col 9)-(line 168,col 29)",
            "(line 169,col 9)-(line 169,col 51)",
            "(line 170,col 9)-(line 170,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BubbleXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        BubbleXYItemLabelGenerator g1 = new BubbleXYItemLabelGenerator();\n        BubbleXYItemLabelGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            g2 = (BubbleXYItemLabelGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 176,
        "end_line": 197,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 73)",
            "(line 179,col 9)-(line 179,col 45)",
            "(line 181,col 9)-(line 194,col 9)",
            "(line 195,col 9)-(line 195,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BubbleXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests.testGenerateLabel()",
        "snippet": "    public void testGenerateLabel() {\n        // check handling when the dataset is a regular XYDataset, not an\n        // XYZDataset...\n        XYSeries s1 = new XYSeries(\"S1\");\n        s1.add(1.0, 2.0);\n        s1.add(2.2, 3.3);\n        XYSeriesCollection dataset = new XYSeriesCollection(s1);\n        BubbleXYItemLabelGenerator g = new BubbleXYItemLabelGenerator();\n        assertEquals(\"{3}\", g.generateLabel(dataset, 0, 0));\n        assertEquals(\"{3}\", g.generateLabel(dataset, 0, 1));\n    }",
        "begin_line": 202,
        "end_line": 212,
        "comment": "\n     * Some checks for the testGenerateLabel() method.\n     ",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 41)",
            "(line 206,col 9)-(line 206,col 25)",
            "(line 207,col 9)-(line 207,col 25)",
            "(line 208,col 9)-(line 208,col 64)",
            "(line 209,col 9)-(line 209,col 72)",
            "(line 210,col 9)-(line 210,col 60)",
            "(line 211,col 9)-(line 211,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategoryToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardCategoryToolTipGeneratorTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 74)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategoryToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests.StandardCategoryToolTipGeneratorTests(java.lang.String)",
        "snippet": "    public StandardCategoryToolTipGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategoryToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        StandardCategoryToolTipGenerator g1 \n            = new StandardCategoryToolTipGenerator();\n        StandardCategoryToolTipGenerator g2 \n            = new StandardCategoryToolTipGenerator();\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new StandardCategoryToolTipGenerator(\"{0}\", \n                new DecimalFormat(\"0.000\"));\n        assertFalse(g1.equals(g2));\n        g2 = new StandardCategoryToolTipGenerator(\"{0}\", \n                new DecimalFormat(\"0.000\"));\n        assertTrue(g1.equals(g2));\n\n        g1 = new StandardCategoryToolTipGenerator(\"{1}\", \n                new DecimalFormat(\"0.000\"));\n        assertFalse(g1.equals(g2));\n        g2 = new StandardCategoryToolTipGenerator(\"{1}\", \n                new DecimalFormat(\"0.000\"));\n        assertTrue(g1.equals(g2));\n\n        g1 = new StandardCategoryToolTipGenerator(\"{2}\", \n                new SimpleDateFormat(\"d-MMM\"));\n        assertFalse(g1.equals(g2));\n        g2 = new StandardCategoryToolTipGenerator(\"{2}\", \n                new SimpleDateFormat(\"d-MMM\"));\n        assertTrue(g1.equals(g2));\n        \n    }",
        "begin_line": 88,
        "end_line": 118,
        "comment": "\n     * Tests the equals() method.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 91,col 53)",
            "(line 92,col 9)-(line 93,col 53)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 97,col 9)-(line 98,col 44)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 101,col 44)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 104,col 9)-(line 105,col 44)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 108,col 44)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 111,col 9)-(line 112,col 47)",
            "(line 113,col 9)-(line 113,col 35)",
            "(line 114,col 9)-(line 115,col 47)",
            "(line 116,col 9)-(line 116,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategoryToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StandardCategoryToolTipGenerator g1 \n            = new StandardCategoryToolTipGenerator();\n        StandardCategoryToolTipGenerator g2 = null;\n        try {\n            g2 = (StandardCategoryToolTipGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 123,
        "end_line": 136,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 125,col 53)",
            "(line 126,col 9)-(line 126,col 51)",
            "(line 127,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 133,col 29)",
            "(line 134,col 9)-(line 134,col 51)",
            "(line 135,col 9)-(line 135,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategoryToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StandardCategoryToolTipGenerator g1 \n            = new StandardCategoryToolTipGenerator(\"{2}\", \n                    DateFormat.getInstance());\n        StandardCategoryToolTipGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            g2 = (StandardCategoryToolTipGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 141,
        "end_line": 164,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 143,col 9)-(line 145,col 46)",
            "(line 146,col 9)-(line 146,col 51)",
            "(line 148,col 9)-(line 161,col 9)",
            "(line 162,col 9)-(line 162,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategoryToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests.testEquals1481087()",
        "snippet": "    public void testEquals1481087() {\n        StandardCategoryToolTipGenerator g1 \n            = new StandardCategoryToolTipGenerator(\"{0}\", \n                    new DecimalFormat(\"0.00\"));\n        StandardCategoryItemLabelGenerator g2 \n            = new StandardCategoryItemLabelGenerator(\"{0}\", \n                    new DecimalFormat(\"0.00\"));\n        assertFalse(g1.equals(g2));\n    }",
        "begin_line": 169,
        "end_line": 177,
        "comment": "\n     * A test for bug 1481087.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 172,col 47)",
            "(line 173,col 9)-(line 175,col 47)",
            "(line 176,col 9)-(line 176,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.ItemLabelPositionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/ItemLabelPositionTests.java",
        "signature": "org.jfree.chart.labels.junit.ItemLabelPositionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ItemLabelPositionTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.ItemLabelPositionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/ItemLabelPositionTests.java",
        "signature": "org.jfree.chart.labels.junit.ItemLabelPositionTests.ItemLabelPositionTests(java.lang.String)",
        "snippet": "    public ItemLabelPositionTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.ItemLabelPositionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/ItemLabelPositionTests.java",
        "signature": "org.jfree.chart.labels.junit.ItemLabelPositionTests.testEquals()",
        "snippet": "    public void testEquals() {\n        ItemLabelPosition p1 = new ItemLabelPosition();\n        ItemLabelPosition p2 = new ItemLabelPosition();\n        assertEquals(p1, p2);\n    }",
        "begin_line": 83,
        "end_line": 87,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 55)",
            "(line 85,col 9)-(line 85,col 55)",
            "(line 86,col 9)-(line 86,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.ItemLabelPositionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/ItemLabelPositionTests.java",
        "signature": "org.jfree.chart.labels.junit.ItemLabelPositionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        ItemLabelPosition p1 = new ItemLabelPosition();\n        ItemLabelPosition p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            p2 = (ItemLabelPosition) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(p1, p2);\n\n    }",
        "begin_line": 92,
        "end_line": 114,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 55)",
            "(line 95,col 9)-(line 95,col 36)",
            "(line 97,col 9)-(line 111,col 9)",
            "(line 112,col 9)-(line 112,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/HighLowItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(HighLowItemLabelGeneratorTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 67)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/HighLowItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests.HighLowItemLabelGeneratorTests(java.lang.String)",
        "snippet": "    public HighLowItemLabelGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/HighLowItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        HighLowItemLabelGenerator g1 = new HighLowItemLabelGenerator();\n        HighLowItemLabelGenerator g2 = new HighLowItemLabelGenerator();\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new HighLowItemLabelGenerator(\n            new SimpleDateFormat(\"d-MMM-yyyy\"), NumberFormat.getInstance()\n        );\n        assertFalse(g1.equals(g2));\n        g2 = new HighLowItemLabelGenerator(\n            new SimpleDateFormat(\"d-MMM-yyyy\"), NumberFormat.getInstance()\n        );\n        assertTrue(g1.equals(g2));\n        \n        g1 = new HighLowItemLabelGenerator(\n            new SimpleDateFormat(\"d-MMM-yyyy\"), new DecimalFormat(\"0.000\")\n        );\n        assertFalse(g1.equals(g2));\n        g2 = new HighLowItemLabelGenerator(\n            new SimpleDateFormat(\"d-MMM-yyyy\"), new DecimalFormat(\"0.000\")\n        );\n        assertTrue(g1.equals(g2));\n            \n    }",
        "begin_line": 85,
        "end_line": 109,
        "comment": "\n     * Tests that the equals method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 71)",
            "(line 87,col 9)-(line 87,col 71)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 91,col 9)-(line 93,col 10)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 97,col 10)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 100,col 9)-(line 102,col 10)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 106,col 10)",
            "(line 107,col 9)-(line 107,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/HighLowItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        HighLowItemLabelGenerator g1 = new HighLowItemLabelGenerator();\n        HighLowItemLabelGenerator g2 = null;\n        try {\n            g2 = (HighLowItemLabelGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 115,
        "end_line": 127,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 71)",
            "(line 117,col 9)-(line 117,col 44)",
            "(line 118,col 9)-(line 123,col 9)",
            "(line 124,col 9)-(line 124,col 29)",
            "(line 125,col 9)-(line 125,col 51)",
            "(line 126,col 9)-(line 126,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/HighLowItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        HighLowItemLabelGenerator g1 = new HighLowItemLabelGenerator();\n        HighLowItemLabelGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            g2 = (HighLowItemLabelGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 132,
        "end_line": 154,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 71)",
            "(line 135,col 9)-(line 135,col 44)",
            "(line 137,col 9)-(line 151,col 9)",
            "(line 152,col 9)-(line 152,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardPieToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardPieToolTipGeneratorTests.class);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 69)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardPieToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests.StandardPieToolTipGeneratorTests(java.lang.String)",
        "snippet": "    public StandardPieToolTipGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardPieToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StandardPieToolTipGenerator g1 = new StandardPieToolTipGenerator();\n        StandardPieToolTipGenerator g2 = new StandardPieToolTipGenerator();\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new StandardPieToolTipGenerator(\"{0}\", \n                new DecimalFormat(\"#,##0.00\"), \n                NumberFormat.getPercentInstance());\n        assertFalse(g1.equals(g2));\n        g2 = new StandardPieToolTipGenerator(\"{0}\", \n                new DecimalFormat(\"#,##0.00\"), \n                NumberFormat.getPercentInstance());\n        assertTrue(g1.equals(g2));\n\n        g1 = new StandardPieToolTipGenerator(\"{0} {1}\", \n                new DecimalFormat(\"#,##0.00\"), \n                NumberFormat.getPercentInstance());\n        assertFalse(g1.equals(g2));\n        g2 = new StandardPieToolTipGenerator(\"{0} {1}\", \n                new DecimalFormat(\"#,##0.00\"), \n                NumberFormat.getPercentInstance());\n        assertTrue(g1.equals(g2));\n    \n        g1 = new StandardPieToolTipGenerator(\"{0} {1}\", \n                new DecimalFormat(\"#,##0\"), NumberFormat.getPercentInstance());\n        assertFalse(g1.equals(g2));\n        g2 = new StandardPieToolTipGenerator(\"{0} {1}\", \n                new DecimalFormat(\"#,##0\"), NumberFormat.getPercentInstance());\n        assertTrue(g1.equals(g2));\n\n        g1 = new StandardPieToolTipGenerator(\"{0} {1}\", \n                new DecimalFormat(\"#,##0\"), new DecimalFormat(\"0.000%\"));\n        assertFalse(g1.equals(g2));\n        g2 = new StandardPieToolTipGenerator(\"{0} {1}\", \n                new DecimalFormat(\"#,##0\"), new DecimalFormat(\"0.000%\"));\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 90,
        "end_line": 127,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 75)",
            "(line 92,col 9)-(line 92,col 75)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 98,col 51)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 102,col 51)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 105,col 9)-(line 107,col 51)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 111,col 51)",
            "(line 112,col 9)-(line 112,col 34)",
            "(line 114,col 9)-(line 115,col 79)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 118,col 79)",
            "(line 119,col 9)-(line 119,col 34)",
            "(line 121,col 9)-(line 122,col 73)",
            "(line 123,col 9)-(line 123,col 35)",
            "(line 124,col 9)-(line 125,col 73)",
            "(line 126,col 9)-(line 126,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardPieToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StandardPieToolTipGenerator g1 = new StandardPieToolTipGenerator();\n        StandardPieToolTipGenerator g2 = null;\n        try {\n            g2 = (StandardPieToolTipGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n        assertTrue(g1.getNumberFormat() != g2.getNumberFormat());\n        assertTrue(g1.getPercentFormat() != g2.getPercentFormat());\n    }",
        "begin_line": 132,
        "end_line": 146,
        "comment": "\n     * Some checks for cloning.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 75)",
            "(line 134,col 9)-(line 134,col 46)",
            "(line 135,col 9)-(line 140,col 9)",
            "(line 141,col 9)-(line 141,col 29)",
            "(line 142,col 9)-(line 142,col 51)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 144,col 9)-(line 144,col 65)",
            "(line 145,col 9)-(line 145,col 67)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardPieToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StandardPieToolTipGenerator g1 = new StandardPieToolTipGenerator();\n        StandardPieToolTipGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            g2 = (StandardPieToolTipGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 151,
        "end_line": 172,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 75)",
            "(line 154,col 9)-(line 154,col 46)",
            "(line 156,col 9)-(line 169,col 9)",
            "(line 170,col 9)-(line 170,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategoryItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardCategoryItemLabelGeneratorTests.class);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 76)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategoryItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests.StandardCategoryItemLabelGeneratorTests(java.lang.String)",
        "snippet": "    public StandardCategoryItemLabelGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategoryItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests.testGenerateLabel()",
        "snippet": "    public void testGenerateLabel() {\n        StandardCategoryItemLabelGenerator g \n            = new StandardCategoryItemLabelGenerator(\"{2}\", \n                    new DecimalFormat(\"0.000\"));\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.addValue(1.0, \"R0\", \"C0\");\n        dataset.addValue(2.0, \"R0\", \"C1\");\n        dataset.addValue(3.0, \"R1\", \"C0\");\n        dataset.addValue(null, \"R1\", \"C1\");\n        String s = g.generateLabel(dataset, 0, 0);\n        assertEquals(\"1.000\", s);\n        \n        // try a null value\n        s = g.generateLabel(dataset, 1, 1);\n        assertEquals(\"-\", s);\n    }",
        "begin_line": 89,
        "end_line": 104,
        "comment": "\n     * Some checks for the generalLabel() method.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 92,col 48)",
            "(line 93,col 9)-(line 93,col 70)",
            "(line 94,col 9)-(line 94,col 42)",
            "(line 95,col 9)-(line 95,col 42)",
            "(line 96,col 9)-(line 96,col 42)",
            "(line 97,col 9)-(line 97,col 43)",
            "(line 98,col 9)-(line 98,col 50)",
            "(line 99,col 9)-(line 99,col 33)",
            "(line 102,col 9)-(line 102,col 43)",
            "(line 103,col 9)-(line 103,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategoryItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        StandardCategoryItemLabelGenerator g1 \n            = new StandardCategoryItemLabelGenerator();\n        StandardCategoryItemLabelGenerator g2 \n            = new StandardCategoryItemLabelGenerator();\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new StandardCategoryItemLabelGenerator(\"{0}\", \n                new DecimalFormat(\"0.000\"));\n        assertFalse(g1.equals(g2));\n        g2 = new StandardCategoryItemLabelGenerator(\"{0}\", \n                new DecimalFormat(\"0.000\"));\n        assertTrue(g1.equals(g2));\n\n        g1 = new StandardCategoryItemLabelGenerator(\"{1}\", \n                new DecimalFormat(\"0.000\"));\n        assertFalse(g1.equals(g2));\n        g2 = new StandardCategoryItemLabelGenerator(\"{1}\", \n                new DecimalFormat(\"0.000\"));\n        assertTrue(g1.equals(g2));\n\n        g1 = new StandardCategoryItemLabelGenerator(\"{2}\", \n                new SimpleDateFormat(\"d-MMM\"));\n        assertFalse(g1.equals(g2));\n        g2 = new StandardCategoryItemLabelGenerator(\"{2}\", \n                new SimpleDateFormat(\"d-MMM\"));\n        assertTrue(g1.equals(g2));\n        \n    }",
        "begin_line": 109,
        "end_line": 139,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 112,col 55)",
            "(line 113,col 9)-(line 114,col 55)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 118,col 9)-(line 119,col 44)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 122,col 44)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 125,col 9)-(line 126,col 44)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 129,col 44)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 132,col 9)-(line 133,col 47)",
            "(line 134,col 9)-(line 134,col 35)",
            "(line 135,col 9)-(line 136,col 47)",
            "(line 137,col 9)-(line 137,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategoryItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StandardCategoryItemLabelGenerator g1 \n            = new StandardCategoryItemLabelGenerator();\n        StandardCategoryItemLabelGenerator g2 = null;\n        try {\n            g2 = (StandardCategoryItemLabelGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 144,
        "end_line": 157,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 146,col 55)",
            "(line 147,col 9)-(line 147,col 53)",
            "(line 148,col 9)-(line 153,col 9)",
            "(line 154,col 9)-(line 154,col 29)",
            "(line 155,col 9)-(line 155,col 51)",
            "(line 156,col 9)-(line 156,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategoryItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StandardCategoryItemLabelGenerator g1\n            = new StandardCategoryItemLabelGenerator(\"{2}\", \n                    DateFormat.getInstance());\n        StandardCategoryItemLabelGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            g2 = (StandardCategoryItemLabelGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 162,
        "end_line": 185,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 164,col 9)-(line 166,col 46)",
            "(line 167,col 9)-(line 167,col 53)",
            "(line 169,col 9)-(line 182,col 9)",
            "(line 183,col 9)-(line 183,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategoryItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests.testEquals1481087()",
        "snippet": "    public void testEquals1481087() {\n        StandardCategoryItemLabelGenerator g1 \n            = new StandardCategoryItemLabelGenerator(\"{0}\", \n                    new DecimalFormat(\"0.00\"));\n        StandardCategoryToolTipGenerator g2 \n            = new StandardCategoryToolTipGenerator(\"{0}\", \n                    new DecimalFormat(\"0.00\"));\n        assertFalse(g1.equals(g2));\n    }",
        "begin_line": 190,
        "end_line": 198,
        "comment": "\n     * A test for bug 1481087.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 193,col 47)",
            "(line 194,col 9)-(line 196,col 47)",
            "(line 197,col 9)-(line 197,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardXYToolTipGeneratorTests.class);\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 68)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests.StandardXYToolTipGeneratorTests(java.lang.String)",
        "snippet": "    public StandardXYToolTipGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        // some setup...        \n        String f1 = \"{1}\";\n        String f2 = \"{2}\";\n        NumberFormat xnf1 = new DecimalFormat(\"0.00\");\n        NumberFormat xnf2 = new DecimalFormat(\"0.000\");\n        NumberFormat ynf1 = new DecimalFormat(\"0.00\");\n        NumberFormat ynf2 = new DecimalFormat(\"0.000\");\n\n        StandardXYToolTipGenerator g1 = null;\n        StandardXYToolTipGenerator g2 = null;\n        \n        g1 = new StandardXYToolTipGenerator(f1, xnf1, ynf1);\n        g2 = new StandardXYToolTipGenerator(f1, xnf1, ynf1);\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new StandardXYToolTipGenerator(f2, xnf1, ynf1);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYToolTipGenerator(f2, xnf1, ynf1);\n        assertTrue(g1.equals(g2));\n                \n        g1 = new StandardXYToolTipGenerator(f2, xnf2, ynf1);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYToolTipGenerator(f2, xnf2, ynf1);\n        assertTrue(g1.equals(g2));\n\n        g1 = new StandardXYToolTipGenerator(f2, xnf2, ynf2);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYToolTipGenerator(f2, xnf2, ynf2);\n        assertTrue(g1.equals(g2));\n                \n        DateFormat xdf1 = new SimpleDateFormat(\"d-MMM\");\n        DateFormat xdf2 = new SimpleDateFormat(\"d-MMM-yyyy\");\n        DateFormat ydf1 = new SimpleDateFormat(\"d-MMM\");\n        DateFormat ydf2 = new SimpleDateFormat(\"d-MMM-yyyy\");\n\n        g1 = new StandardXYToolTipGenerator(f1, xdf1, ydf1);\n        g2 = new StandardXYToolTipGenerator(f1, xdf1, ydf1);\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new StandardXYToolTipGenerator(f1, xdf2, ydf1);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYToolTipGenerator(f1, xdf2, ydf1);\n        assertTrue(g1.equals(g2));\n                \n        g1 = new StandardXYToolTipGenerator(f1, xdf2, ydf2);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYToolTipGenerator(f1, xdf2, ydf2);\n        assertTrue(g1.equals(g2));\n\n    }",
        "begin_line": 86,
        "end_line": 139,
        "comment": "\n     * Tests the equals() method.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 26)",
            "(line 90,col 9)-(line 90,col 26)",
            "(line 91,col 9)-(line 91,col 54)",
            "(line 92,col 9)-(line 92,col 55)",
            "(line 93,col 9)-(line 93,col 54)",
            "(line 94,col 9)-(line 94,col 55)",
            "(line 96,col 9)-(line 96,col 45)",
            "(line 97,col 9)-(line 97,col 45)",
            "(line 99,col 9)-(line 99,col 60)",
            "(line 100,col 9)-(line 100,col 60)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 104,col 9)-(line 104,col 60)",
            "(line 105,col 9)-(line 105,col 35)",
            "(line 106,col 9)-(line 106,col 60)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 109,col 9)-(line 109,col 60)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 111,col 60)",
            "(line 112,col 9)-(line 112,col 34)",
            "(line 114,col 9)-(line 114,col 60)",
            "(line 115,col 9)-(line 115,col 35)",
            "(line 116,col 9)-(line 116,col 60)",
            "(line 117,col 9)-(line 117,col 34)",
            "(line 119,col 9)-(line 119,col 56)",
            "(line 120,col 9)-(line 120,col 61)",
            "(line 121,col 9)-(line 121,col 56)",
            "(line 122,col 9)-(line 122,col 61)",
            "(line 124,col 9)-(line 124,col 60)",
            "(line 125,col 9)-(line 125,col 60)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 129,col 9)-(line 129,col 60)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 131,col 60)",
            "(line 132,col 9)-(line 132,col 34)",
            "(line 134,col 9)-(line 134,col 60)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 136,col 60)",
            "(line 137,col 9)-(line 137,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StandardXYToolTipGenerator g1 = new StandardXYToolTipGenerator();\n        StandardXYToolTipGenerator g2 = null;\n        try {\n            g2 = (StandardXYToolTipGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 144,
        "end_line": 156,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 73)",
            "(line 146,col 9)-(line 146,col 45)",
            "(line 147,col 9)-(line 152,col 9)",
            "(line 153,col 9)-(line 153,col 29)",
            "(line 154,col 9)-(line 154,col 51)",
            "(line 155,col 9)-(line 155,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StandardXYToolTipGenerator g1 = new StandardXYToolTipGenerator();\n        StandardXYToolTipGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            g2 = (StandardXYToolTipGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 161,
        "end_line": 183,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 73)",
            "(line 164,col 9)-(line 164,col 45)",
            "(line 166,col 9)-(line 180,col 9)",
            "(line 181,col 9)-(line 181,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BoxAndWhiskerXYToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BoxAndWhiskerXYToolTipGeneratorTests.class);\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BoxAndWhiskerXYToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests.BoxAndWhiskerXYToolTipGeneratorTests(java.lang.String)",
        "snippet": "    public BoxAndWhiskerXYToolTipGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BoxAndWhiskerXYToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        // standard test\n        BoxAndWhiskerXYToolTipGenerator g1 \n            = new BoxAndWhiskerXYToolTipGenerator();\n        BoxAndWhiskerXYToolTipGenerator g2 \n            = new BoxAndWhiskerXYToolTipGenerator();\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        // tooltip format\n        g1 = new BoxAndWhiskerXYToolTipGenerator(\n            \"{0} --> {1} {2}\", \n            new SimpleDateFormat(\"yyyy\"), new DecimalFormat(\"0.0\") \n        );\n        g2 = new BoxAndWhiskerXYToolTipGenerator(\n            \"{1} {2}\", new SimpleDateFormat(\"yyyy\"), new DecimalFormat(\"0.0\")\n        );\n        assertFalse(g1.equals(g2));\n        g2 = new BoxAndWhiskerXYToolTipGenerator(\n            \"{0} --> {1} {2}\", \n            new SimpleDateFormat(\"yyyy\"), new DecimalFormat(\"0.0\")\n        );\n        assertTrue(g1.equals(g2));\n\n        // date format\n        g1 = new BoxAndWhiskerXYToolTipGenerator(\n            \"{0} --> {1} {2}\", \n            new SimpleDateFormat(\"yyyy\"), new DecimalFormat(\"0.0\")\n        );\n        g2 = new BoxAndWhiskerXYToolTipGenerator(\n            \"{0} --> {1} {2}\", \n            new SimpleDateFormat(\"MMM-yyyy\"), new DecimalFormat(\"0.0\")\n        );\n        assertFalse(g1.equals(g2));\n        g2 = new BoxAndWhiskerXYToolTipGenerator(\n            \"{0} --> {1} {2}\", \n            new SimpleDateFormat(\"yyyy\"), new DecimalFormat(\"0.0\")\n        );\n        assertTrue(g1.equals(g2));\n\n        // Y format\n        g1 = new BoxAndWhiskerXYToolTipGenerator(\n            \"{0} --> {1} {2}\", \n            new SimpleDateFormat(\"yyyy\"), new DecimalFormat(\"0.0\")\n        );\n        g2 = new BoxAndWhiskerXYToolTipGenerator(\n            \"{0} --> {1} {2}\", \n            new SimpleDateFormat(\"yyyy\"), new DecimalFormat(\"0.00\")\n        );\n        assertFalse(g1.equals(g2));\n        g2 = new BoxAndWhiskerXYToolTipGenerator(\n            \"{0} --> {1} {2}\", \n            new SimpleDateFormat(\"yyyy\"), new DecimalFormat(\"0.0\")\n        );\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 86,
        "end_line": 142,
        "comment": "\n     * A series of tests for the equals() method.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 90,col 52)",
            "(line 91,col 9)-(line 92,col 52)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 97,col 9)-(line 100,col 10)",
            "(line 101,col 9)-(line 103,col 10)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 108,col 10)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 112,col 9)-(line 115,col 10)",
            "(line 116,col 9)-(line 119,col 10)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 124,col 10)",
            "(line 125,col 9)-(line 125,col 34)",
            "(line 128,col 9)-(line 131,col 10)",
            "(line 132,col 9)-(line 135,col 10)",
            "(line 136,col 9)-(line 136,col 35)",
            "(line 137,col 9)-(line 140,col 10)",
            "(line 141,col 9)-(line 141,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BoxAndWhiskerXYToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        BoxAndWhiskerXYToolTipGenerator g1 \n            = new BoxAndWhiskerXYToolTipGenerator();\n        BoxAndWhiskerXYToolTipGenerator g2 = null;\n        try {\n            g2 = (BoxAndWhiskerXYToolTipGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 147,
        "end_line": 160,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 148,col 9)-(line 149,col 52)",
            "(line 150,col 9)-(line 150,col 50)",
            "(line 151,col 9)-(line 156,col 9)",
            "(line 157,col 9)-(line 157,col 29)",
            "(line 158,col 9)-(line 158,col 51)",
            "(line 159,col 9)-(line 159,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BoxAndWhiskerXYToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        BoxAndWhiskerXYToolTipGenerator g1 \n            = new BoxAndWhiskerXYToolTipGenerator();\n        BoxAndWhiskerXYToolTipGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            g2 = (BoxAndWhiskerXYToolTipGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 165,
        "end_line": 188,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 167,col 9)-(line 168,col 52)",
            "(line 169,col 9)-(line 169,col 50)",
            "(line 171,col 9)-(line 185,col 9)",
            "(line 186,col 9)-(line 186,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYSeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardXYSeriesLabelGeneratorTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 72)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYSeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests.StandardXYSeriesLabelGeneratorTests(java.lang.String)",
        "snippet": "    public StandardXYSeriesLabelGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYSeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests.testGenerateLabel()",
        "snippet": "    public void testGenerateLabel() {\n        StandardXYSeriesLabelGenerator g \n            = new StandardXYSeriesLabelGenerator(\"Series {0}\");\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(new XYSeries(\"1\"));\n        dataset.addSeries(new XYSeries(\"2\"));\n        assertEquals(\"Series 1\", g.generateLabel(dataset, 0));\n        assertEquals(\"Series 2\", g.generateLabel(dataset, 1));\n    }",
        "begin_line": 84,
        "end_line": 92,
        "comment": "\n     * Some checks for the generalLabel() method.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 86,col 63)",
            "(line 87,col 9)-(line 87,col 62)",
            "(line 88,col 9)-(line 88,col 45)",
            "(line 89,col 9)-(line 89,col 45)",
            "(line 90,col 9)-(line 90,col 62)",
            "(line 91,col 9)-(line 91,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYSeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StandardXYSeriesLabelGenerator g1 \n                = new StandardXYSeriesLabelGenerator(\"Series {0}\");\n        StandardXYSeriesLabelGenerator g2 \n                = new StandardXYSeriesLabelGenerator(\"Series {0}\");\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new StandardXYSeriesLabelGenerator(\"{1}\");\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYSeriesLabelGenerator(\"{1}\");\n        assertTrue(g1.equals(g2));        \n    }",
        "begin_line": 97,
        "end_line": 109,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 99,col 67)",
            "(line 100,col 9)-(line 101,col 67)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 105,col 9)-(line 105,col 55)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 107,col 55)",
            "(line 108,col 9)-(line 108,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYSeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StandardXYSeriesLabelGenerator g1 \n                = new StandardXYSeriesLabelGenerator(\"Series {0}\");\n        StandardXYSeriesLabelGenerator g2 = null;\n        try {\n            g2 = (StandardXYSeriesLabelGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 114,
        "end_line": 127,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 116,col 67)",
            "(line 117,col 9)-(line 117,col 49)",
            "(line 118,col 9)-(line 123,col 9)",
            "(line 124,col 9)-(line 124,col 29)",
            "(line 125,col 9)-(line 125,col 51)",
            "(line 126,col 9)-(line 126,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYSeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        StandardXYSeriesLabelGenerator g1 \n                = new StandardXYSeriesLabelGenerator(\"Series {0}\");\n        StandardXYSeriesLabelGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            g2 = (StandardXYSeriesLabelGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(g1, g2);\n    }",
        "begin_line": 132,
        "end_line": 152,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 134,col 67)",
            "(line 135,col 9)-(line 135,col 49)",
            "(line 137,col 9)-(line 150,col 9)",
            "(line 151,col 9)-(line 151,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/CustomXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CustomXYItemLabelGeneratorTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 68)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/CustomXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests.CustomXYItemLabelGeneratorTests(java.lang.String)",
        "snippet": "    public CustomXYItemLabelGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/CustomXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CustomXYToolTipGenerator g1 = new CustomXYToolTipGenerator();\n        CustomXYToolTipGenerator g2 = null;\n        try {\n            g2 = (CustomXYToolTipGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 84,
        "end_line": 96,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 69)",
            "(line 86,col 9)-(line 86,col 43)",
            "(line 87,col 9)-(line 92,col 9)",
            "(line 93,col 9)-(line 93,col 29)",
            "(line 94,col 9)-(line 94,col 51)",
            "(line 95,col 9)-(line 95,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/CustomXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        List t1 = new java.util.ArrayList();\n        t1.add(\"Tooltip A1\");\n        t1.add(\"Tooltip A2\");\n        t1.add(\"Tooltip A3\");\n\n        List t2 = new java.util.ArrayList();\n        t2.add(\"Tooltip B1\");\n        t2.add(\"Tooltip B2\");\n        t2.add(\"Tooltip B3\");\n\n        CustomXYToolTipGenerator g1 = new CustomXYToolTipGenerator();\n        g1.addToolTipSeries(t1);\n        g1.addToolTipSeries(t2);\n        CustomXYToolTipGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            g2 = (CustomXYToolTipGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 101,
        "end_line": 135,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 44)",
            "(line 104,col 9)-(line 104,col 29)",
            "(line 105,col 9)-(line 105,col 29)",
            "(line 106,col 9)-(line 106,col 29)",
            "(line 108,col 9)-(line 108,col 44)",
            "(line 109,col 9)-(line 109,col 29)",
            "(line 110,col 9)-(line 110,col 29)",
            "(line 111,col 9)-(line 111,col 29)",
            "(line 113,col 9)-(line 113,col 69)",
            "(line 114,col 9)-(line 114,col 32)",
            "(line 115,col 9)-(line 115,col 32)",
            "(line 116,col 9)-(line 116,col 43)",
            "(line 118,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 133,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/MultipleXYSeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MultipleXYSeriesLabelGeneratorTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 72)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/MultipleXYSeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests.MultipleXYSeriesLabelGeneratorTests(java.lang.String)",
        "snippet": "    public MultipleXYSeriesLabelGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/MultipleXYSeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        MultipleXYSeriesLabelGenerator g1 \n                = new MultipleXYSeriesLabelGenerator();\n        MultipleXYSeriesLabelGenerator g2 \n                = new MultipleXYSeriesLabelGenerator();\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1)); \n        \n        g1 = new MultipleXYSeriesLabelGenerator(\"Series {0}\");\n        assertFalse(g1.equals(g2));\n        g2 = new MultipleXYSeriesLabelGenerator(\"Series {0}\");\n        assertTrue(g1.equals(g2));\n        \n        g1.addSeriesLabel(1, \"Additional 1\");\n        assertFalse(g1.equals(g2));\n        g2.addSeriesLabel(1, \"Additional 1\");\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 82,
        "end_line": 99,
        "comment": "\n     * A series of tests for the equals() method.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 84,col 55)",
            "(line 85,col 9)-(line 86,col 55)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 90,col 9)-(line 90,col 62)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 92,col 9)-(line 92,col 62)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 95,col 9)-(line 95,col 45)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 45)",
            "(line 98,col 9)-(line 98,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/MultipleXYSeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        MultipleXYSeriesLabelGenerator g1 \n                = new MultipleXYSeriesLabelGenerator();\n        MultipleXYSeriesLabelGenerator g2 = null;\n        try {\n            g2 = (MultipleXYSeriesLabelGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n        \n        // check independence\n        g1.addSeriesLabel(3, \"Add3\");\n        assertFalse(g1.equals(g2));\n        g2.addSeriesLabel(3, \"Add3\");\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 104,
        "end_line": 123,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 106,col 55)",
            "(line 107,col 9)-(line 107,col 49)",
            "(line 108,col 9)-(line 113,col 9)",
            "(line 114,col 9)-(line 114,col 29)",
            "(line 115,col 9)-(line 115,col 51)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 119,col 9)-(line 119,col 37)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 121,col 37)",
            "(line 122,col 9)-(line 122,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/MultipleXYSeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        MultipleXYSeriesLabelGenerator g1 \n                = new MultipleXYSeriesLabelGenerator();\n        g1.addSeriesLabel(0, \"Add0\");\n        g1.addSeriesLabel(0, \"Add0b\");\n        g1.addSeriesLabel(1, \"Add1\");\n        MultipleXYSeriesLabelGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            g2 = (MultipleXYSeriesLabelGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 128,
        "end_line": 153,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 130,col 9)-(line 131,col 55)",
            "(line 132,col 9)-(line 132,col 37)",
            "(line 133,col 9)-(line 133,col 38)",
            "(line 134,col 9)-(line 134,col 37)",
            "(line 135,col 9)-(line 135,col 49)",
            "(line 137,col 9)-(line 150,col 9)",
            "(line 151,col 9)-(line 151,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.ItemLabelAnchorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/ItemLabelAnchorTests.java",
        "signature": "org.jfree.chart.labels.junit.ItemLabelAnchorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ItemLabelAnchorTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.ItemLabelAnchorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/ItemLabelAnchorTests.java",
        "signature": "org.jfree.chart.labels.junit.ItemLabelAnchorTests.ItemLabelAnchorTests(java.lang.String)",
        "snippet": "    public ItemLabelAnchorTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.ItemLabelAnchorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/ItemLabelAnchorTests.java",
        "signature": "org.jfree.chart.labels.junit.ItemLabelAnchorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        assertTrue(ItemLabelAnchor.INSIDE1.equals(ItemLabelAnchor.INSIDE1));\n        assertFalse(ItemLabelAnchor.INSIDE1.equals(ItemLabelAnchor.INSIDE2));\n    }",
        "begin_line": 82,
        "end_line": 85,
        "comment": "\n     * Test the equals() method.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 76)",
            "(line 84,col 9)-(line 84,col 77)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.ItemLabelAnchorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/ItemLabelAnchorTests.java",
        "signature": "org.jfree.chart.labels.junit.ItemLabelAnchorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        ItemLabelAnchor a1 = ItemLabelAnchor.INSIDE1;\n        ItemLabelAnchor a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (ItemLabelAnchor) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertTrue(a1 == a2); \n\n    }",
        "begin_line": 90,
        "end_line": 112,
        "comment": "\n     * Serialize an instance, restore it, and check for identity.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 53)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 95,col 9)-(line 109,col 9)",
            "(line 110,col 9)-(line 110,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/SymbolicXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(SymbolicXYItemLabelGeneratorTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 70)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/SymbolicXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests.SymbolicXYItemLabelGeneratorTests(java.lang.String)",
        "snippet": "    public SymbolicXYItemLabelGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/SymbolicXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        SymbolicXYItemLabelGenerator g1 = new SymbolicXYItemLabelGenerator();\n        SymbolicXYItemLabelGenerator g2 = new SymbolicXYItemLabelGenerator();\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n    }",
        "begin_line": 82,
        "end_line": 87,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 77)",
            "(line 84,col 9)-(line 84,col 77)",
            "(line 85,col 9)-(line 85,col 34)",
            "(line 86,col 9)-(line 86,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/SymbolicXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        SymbolicXYItemLabelGenerator g1 = new SymbolicXYItemLabelGenerator();\n        SymbolicXYItemLabelGenerator g2 = null;\n        try {\n            g2 = (SymbolicXYItemLabelGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 92,
        "end_line": 104,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 77)",
            "(line 94,col 9)-(line 94,col 47)",
            "(line 95,col 9)-(line 100,col 9)",
            "(line 101,col 9)-(line 101,col 29)",
            "(line 102,col 9)-(line 102,col 51)",
            "(line 103,col 9)-(line 103,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/SymbolicXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        SymbolicXYItemLabelGenerator g1 = new SymbolicXYItemLabelGenerator();\n        SymbolicXYItemLabelGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            g2 = (SymbolicXYItemLabelGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n    }",
        "begin_line": 109,
        "end_line": 129,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 77)",
            "(line 111,col 9)-(line 111,col 47)",
            "(line 113,col 9)-(line 127,col 9)",
            "(line 128,col 9)-(line 128,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.LabelsPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/LabelsPackageTests.java",
        "signature": "org.jfree.chart.labels.junit.LabelsPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.chart.labels\");\n        suite.addTestSuite(BoxAndWhiskerToolTipGeneratorTests.class);\n        suite.addTestSuite(BoxAndWhiskerXYToolTipGeneratorTests.class);\n        suite.addTestSuite(BubbleXYItemLabelGeneratorTests.class);\n        suite.addTestSuite(CustomXYItemLabelGeneratorTests.class);\n        suite.addTestSuite(HighLowItemLabelGeneratorTests.class);\n        suite.addTestSuite(IntervalCategoryLabelGeneratorTests.class);\n        suite.addTestSuite(ItemLabelAnchorTests.class);\n        suite.addTestSuite(ItemLabelPositionTests.class);\n        suite.addTestSuite(MultipleXYSeriesLabelGeneratorTests.class);\n        suite.addTestSuite(StandardCategoryItemLabelGeneratorTests.class);\n        suite.addTestSuite(StandardCategorySeriesLabelGeneratorTests.class);\n        suite.addTestSuite(StandardCategoryToolTipGeneratorTests.class);\n        suite.addTestSuite(StandardPieSectionLabelGeneratorTests.class);\n        suite.addTestSuite(StandardPieToolTipGeneratorTests.class);\n        suite.addTestSuite(StandardXYItemLabelGeneratorTests.class);\n        suite.addTestSuite(StandardXYSeriesLabelGeneratorTests.class);\n        suite.addTestSuite(StandardXYToolTipGeneratorTests.class);\n        suite.addTestSuite(StandardXYZToolTipGeneratorTests.class);\n        suite.addTestSuite(SymbolicXYItemLabelGeneratorTests.class);\n        return suite;\n    }",
        "begin_line": 63,
        "end_line": 85,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 66)",
            "(line 65,col 9)-(line 65,col 69)",
            "(line 66,col 9)-(line 66,col 71)",
            "(line 67,col 9)-(line 67,col 66)",
            "(line 68,col 9)-(line 68,col 66)",
            "(line 69,col 9)-(line 69,col 65)",
            "(line 70,col 9)-(line 70,col 70)",
            "(line 71,col 9)-(line 71,col 55)",
            "(line 72,col 9)-(line 72,col 57)",
            "(line 73,col 9)-(line 73,col 70)",
            "(line 74,col 9)-(line 74,col 74)",
            "(line 75,col 9)-(line 75,col 76)",
            "(line 76,col 9)-(line 76,col 72)",
            "(line 77,col 9)-(line 77,col 72)",
            "(line 78,col 9)-(line 78,col 67)",
            "(line 79,col 9)-(line 79,col 68)",
            "(line 80,col 9)-(line 80,col 70)",
            "(line 81,col 9)-(line 81,col 66)",
            "(line 82,col 9)-(line 82,col 67)",
            "(line 83,col 9)-(line 83,col 68)",
            "(line 84,col 9)-(line 84,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.LabelsPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/LabelsPackageTests.java",
        "signature": "org.jfree.chart.labels.junit.LabelsPackageTests.LabelsPackageTests(java.lang.String)",
        "snippet": "    public LabelsPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 92,
        "end_line": 94,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the suite name.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.LabelsPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/LabelsPackageTests.java",
        "signature": "org.jfree.chart.labels.junit.LabelsPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYZToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardXYZToolTipGeneratorTests.class);\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 69)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYZToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests.StandardXYZToolTipGeneratorTests(java.lang.String)",
        "snippet": "    public StandardXYZToolTipGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYZToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n\n        // some setup...        \n        String f1 = \"{1}\";\n        String f2 = \"{2}\";\n        NumberFormat xnf1 = new DecimalFormat(\"0.00\");\n        NumberFormat xnf2 = new DecimalFormat(\"0.000\");\n        NumberFormat ynf1 = new DecimalFormat(\"0.00\");\n        NumberFormat ynf2 = new DecimalFormat(\"0.000\");\n        NumberFormat znf1 = new DecimalFormat(\"0.00\");\n        NumberFormat znf2 = new DecimalFormat(\"0.000\");\n        \n        DateFormat xdf1 = new SimpleDateFormat(\"d-MMM\");\n        DateFormat xdf2 = new SimpleDateFormat(\"d-MMM-yyyy\");\n        DateFormat ydf1 = new SimpleDateFormat(\"d-MMM\");\n        DateFormat ydf2 = new SimpleDateFormat(\"d-MMM-yyyy\");\n        DateFormat zdf1 = new SimpleDateFormat(\"d-MMM\");\n        DateFormat zdf2 = new SimpleDateFormat(\"d-MMM-yyyy\");\n        \n        StandardXYZToolTipGenerator g1 = null;\n        StandardXYZToolTipGenerator g2 = null;\n        \n        g1 = new StandardXYZToolTipGenerator(f1, xnf1, ynf1, znf1);\n        g2 = new StandardXYZToolTipGenerator(f1, xnf1, ynf1, znf1);\n        assertTrue(g1.equals(g2));\n\n        // format string...\n        g1 = new StandardXYZToolTipGenerator(f2, xnf1, ynf1, znf1);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYZToolTipGenerator(f2, xnf1, ynf1, znf1);\n        assertTrue(g1.equals(g2));\n\n        // x number format\n        g1 = new StandardXYZToolTipGenerator(f2, xnf2, ynf1, znf1);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYZToolTipGenerator(f2, xnf2, ynf1, znf1);\n        assertTrue(g1.equals(g2));\n\n        // y number format\n        g1 = new StandardXYZToolTipGenerator(f2, xnf2, ynf2, znf1);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYZToolTipGenerator(f2, xnf2, ynf2, znf1);\n        assertTrue(g1.equals(g2));\n\n        // z number format\n        g1 = new StandardXYZToolTipGenerator(f2, xnf2, ynf2, znf2);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYZToolTipGenerator(f2, xnf2, ynf2, znf2);\n        assertTrue(g1.equals(g2));\n\n        g1 = new StandardXYZToolTipGenerator(f2, xdf1, ydf1, zdf1);\n        g2 = new StandardXYZToolTipGenerator(f2, xdf1, ydf1, zdf1);\n        assertTrue(g1.equals(g2));\n        \n        // x date format\n        g1 = new StandardXYZToolTipGenerator(f2, xdf2, ydf1, zdf1);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYZToolTipGenerator(f2, xdf2, ydf1, zdf1);\n        assertTrue(g1.equals(g2));\n\n        // y date format\n        g1 = new StandardXYZToolTipGenerator(f2, xdf2, ydf2, zdf1);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYZToolTipGenerator(f2, xdf2, ydf2, zdf1);\n        assertTrue(g1.equals(g2));\n\n        // z date format\n        g1 = new StandardXYZToolTipGenerator(f2, xdf2, ydf2, zdf2);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYZToolTipGenerator(f2, xdf2, ydf2, zdf2);\n        assertTrue(g1.equals(g2));\n\n    }",
        "begin_line": 86,
        "end_line": 158,
        "comment": "\n     * Tests that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 26)",
            "(line 90,col 9)-(line 90,col 26)",
            "(line 91,col 9)-(line 91,col 54)",
            "(line 92,col 9)-(line 92,col 55)",
            "(line 93,col 9)-(line 93,col 54)",
            "(line 94,col 9)-(line 94,col 55)",
            "(line 95,col 9)-(line 95,col 54)",
            "(line 96,col 9)-(line 96,col 55)",
            "(line 98,col 9)-(line 98,col 56)",
            "(line 99,col 9)-(line 99,col 61)",
            "(line 100,col 9)-(line 100,col 56)",
            "(line 101,col 9)-(line 101,col 61)",
            "(line 102,col 9)-(line 102,col 56)",
            "(line 103,col 9)-(line 103,col 61)",
            "(line 105,col 9)-(line 105,col 46)",
            "(line 106,col 9)-(line 106,col 46)",
            "(line 108,col 9)-(line 108,col 67)",
            "(line 109,col 9)-(line 109,col 67)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 113,col 9)-(line 113,col 67)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 67)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 119,col 9)-(line 119,col 67)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 121,col 67)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 125,col 9)-(line 125,col 67)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 127,col 67)",
            "(line 128,col 9)-(line 128,col 34)",
            "(line 131,col 9)-(line 131,col 67)",
            "(line 132,col 9)-(line 132,col 35)",
            "(line 133,col 9)-(line 133,col 67)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 136,col 9)-(line 136,col 67)",
            "(line 137,col 9)-(line 137,col 67)",
            "(line 138,col 9)-(line 138,col 34)",
            "(line 141,col 9)-(line 141,col 67)",
            "(line 142,col 9)-(line 142,col 35)",
            "(line 143,col 9)-(line 143,col 67)",
            "(line 144,col 9)-(line 144,col 34)",
            "(line 147,col 9)-(line 147,col 67)",
            "(line 148,col 9)-(line 148,col 35)",
            "(line 149,col 9)-(line 149,col 67)",
            "(line 150,col 9)-(line 150,col 34)",
            "(line 153,col 9)-(line 153,col 67)",
            "(line 154,col 9)-(line 154,col 35)",
            "(line 155,col 9)-(line 155,col 67)",
            "(line 156,col 9)-(line 156,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYZToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StandardXYZToolTipGenerator g1 = new StandardXYZToolTipGenerator();\n        StandardXYZToolTipGenerator g2 = null;\n        try {\n            g2 = (StandardXYZToolTipGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 163,
        "end_line": 175,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 75)",
            "(line 165,col 9)-(line 165,col 46)",
            "(line 166,col 9)-(line 171,col 9)",
            "(line 172,col 9)-(line 172,col 29)",
            "(line 173,col 9)-(line 173,col 51)",
            "(line 174,col 9)-(line 174,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYZToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StandardXYZToolTipGenerator g1 = new StandardXYZToolTipGenerator();\n        StandardXYZToolTipGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            g2 = (StandardXYZToolTipGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 180,
        "end_line": 202,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 75)",
            "(line 183,col 9)-(line 183,col 46)",
            "(line 185,col 9)-(line 199,col 9)",
            "(line 200,col 9)-(line 200,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardPieSectionLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardPieSectionLabelGeneratorTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 74)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardPieSectionLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests.StandardPieSectionLabelGeneratorTests(java.lang.String)",
        "snippet": "    public StandardPieSectionLabelGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardPieSectionLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StandardPieSectionLabelGenerator g1 \n            = new StandardPieSectionLabelGenerator();\n        StandardPieSectionLabelGenerator g2 \n            = new StandardPieSectionLabelGenerator();\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new StandardPieSectionLabelGenerator(\"{0}\", \n                new DecimalFormat(\"#,##0.00\"), \n                NumberFormat.getPercentInstance());\n        assertFalse(g1.equals(g2));\n        g2 = new StandardPieSectionLabelGenerator(\"{0}\", \n                new DecimalFormat(\"#,##0.00\"), \n                NumberFormat.getPercentInstance());\n        assertTrue(g1.equals(g2));\n\n        g1 = new StandardPieSectionLabelGenerator(\"{0} {1}\", \n                new DecimalFormat(\"#,##0.00\"), \n                NumberFormat.getPercentInstance());\n        assertFalse(g1.equals(g2));\n        g2 = new StandardPieSectionLabelGenerator(\"{0} {1}\", \n                new DecimalFormat(\"#,##0.00\"), \n                NumberFormat.getPercentInstance());\n        assertTrue(g1.equals(g2));\n    \n        g1 = new StandardPieSectionLabelGenerator(\"{0} {1}\", \n                new DecimalFormat(\"#,##0\"), NumberFormat.getPercentInstance());\n        assertFalse(g1.equals(g2));\n        g2 = new StandardPieSectionLabelGenerator(\"{0} {1}\", \n                new DecimalFormat(\"#,##0\"), NumberFormat.getPercentInstance());\n        assertTrue(g1.equals(g2));\n\n        g1 = new StandardPieSectionLabelGenerator(\"{0} {1}\", \n                new DecimalFormat(\"#,##0\"), new DecimalFormat(\"0.000%\"));\n        assertFalse(g1.equals(g2));\n        g2 = new StandardPieSectionLabelGenerator(\"{0} {1}\", \n                new DecimalFormat(\"#,##0\"), new DecimalFormat(\"0.000%\"));\n        assertTrue(g1.equals(g2));\n        \n        AttributedString as = new AttributedString(\"XYZ\");\n        g1.setAttributedLabel(0, as);\n        assertFalse(g1.equals(g2));\n        g2.setAttributedLabel(0, as);\n        assertTrue(g1.equals(g2)); \n    }",
        "begin_line": 88,
        "end_line": 133,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 90,col 53)",
            "(line 91,col 9)-(line 92,col 53)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 98,col 51)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 102,col 51)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 105,col 9)-(line 107,col 51)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 111,col 51)",
            "(line 112,col 9)-(line 112,col 34)",
            "(line 114,col 9)-(line 115,col 79)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 118,col 79)",
            "(line 119,col 9)-(line 119,col 34)",
            "(line 121,col 9)-(line 122,col 73)",
            "(line 123,col 9)-(line 123,col 35)",
            "(line 124,col 9)-(line 125,col 73)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 128,col 9)-(line 128,col 58)",
            "(line 129,col 9)-(line 129,col 37)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 131,col 37)",
            "(line 132,col 9)-(line 132,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardPieSectionLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StandardPieSectionLabelGenerator g1 \n                = new StandardPieSectionLabelGenerator();\n        StandardPieSectionLabelGenerator g2 = null;\n        try {\n            g2 = (StandardPieSectionLabelGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 138,
        "end_line": 151,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 139,col 9)-(line 140,col 57)",
            "(line 141,col 9)-(line 141,col 51)",
            "(line 142,col 9)-(line 147,col 9)",
            "(line 148,col 9)-(line 148,col 29)",
            "(line 149,col 9)-(line 149,col 51)",
            "(line 150,col 9)-(line 150,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardPieSectionLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StandardPieSectionLabelGenerator g1 \n                = new StandardPieSectionLabelGenerator();\n        StandardPieSectionLabelGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            g2 = (StandardPieSectionLabelGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 156,
        "end_line": 178,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 159,col 57)",
            "(line 160,col 9)-(line 160,col 51)",
            "(line 162,col 9)-(line 175,col 9)",
            "(line 176,col 9)-(line 176,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardPieSectionLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 185,
        "end_line": 187,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardXYItemLabelGeneratorTests.class);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 70)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests.StandardXYItemLabelGeneratorTests(java.lang.String)",
        "snippet": "    public StandardXYItemLabelGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        // some setup...        \n        String f1 = \"{1}\";\n        String f2 = \"{2}\";\n        NumberFormat xnf1 = new DecimalFormat(\"0.00\");\n        NumberFormat xnf2 = new DecimalFormat(\"0.000\");\n        NumberFormat ynf1 = new DecimalFormat(\"0.00\");\n        NumberFormat ynf2 = new DecimalFormat(\"0.000\");\n\n        StandardXYItemLabelGenerator g1 = null;\n        StandardXYItemLabelGenerator g2 = null;\n        \n        g1 = new StandardXYItemLabelGenerator(f1, xnf1, ynf1);\n        g2 = new StandardXYItemLabelGenerator(f1, xnf1, ynf1);\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new StandardXYItemLabelGenerator(f2, xnf1, ynf1);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYItemLabelGenerator(f2, xnf1, ynf1);\n        assertTrue(g1.equals(g2));\n                \n        g1 = new StandardXYItemLabelGenerator(f2, xnf2, ynf1);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYItemLabelGenerator(f2, xnf2, ynf1);\n        assertTrue(g1.equals(g2));\n\n        g1 = new StandardXYItemLabelGenerator(f2, xnf2, ynf2);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYItemLabelGenerator(f2, xnf2, ynf2);\n        assertTrue(g1.equals(g2));\n                \n        DateFormat xdf1 = new SimpleDateFormat(\"d-MMM\");\n        DateFormat xdf2 = new SimpleDateFormat(\"d-MMM-yyyy\");\n        DateFormat ydf1 = new SimpleDateFormat(\"d-MMM\");\n        DateFormat ydf2 = new SimpleDateFormat(\"d-MMM-yyyy\");\n\n        g1 = new StandardXYItemLabelGenerator(f1, xdf1, ydf1);\n        g2 = new StandardXYItemLabelGenerator(f1, xdf1, ydf1);\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new StandardXYItemLabelGenerator(f1, xdf2, ydf1);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYItemLabelGenerator(f1, xdf2, ydf1);\n        assertTrue(g1.equals(g2));\n                \n        g1 = new StandardXYItemLabelGenerator(f1, xdf2, ydf2);\n        assertFalse(g1.equals(g2));\n        g2 = new StandardXYItemLabelGenerator(f1, xdf2, ydf2);\n        assertTrue(g1.equals(g2));\n\n    }",
        "begin_line": 89,
        "end_line": 142,
        "comment": "\n     * A series of tests for the equals() method.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 26)",
            "(line 93,col 9)-(line 93,col 26)",
            "(line 94,col 9)-(line 94,col 54)",
            "(line 95,col 9)-(line 95,col 55)",
            "(line 96,col 9)-(line 96,col 54)",
            "(line 97,col 9)-(line 97,col 55)",
            "(line 99,col 9)-(line 99,col 47)",
            "(line 100,col 9)-(line 100,col 47)",
            "(line 102,col 9)-(line 102,col 62)",
            "(line 103,col 9)-(line 103,col 62)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 107,col 9)-(line 107,col 62)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 62)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 112,col 9)-(line 112,col 62)",
            "(line 113,col 9)-(line 113,col 35)",
            "(line 114,col 9)-(line 114,col 62)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 117,col 9)-(line 117,col 62)",
            "(line 118,col 9)-(line 118,col 35)",
            "(line 119,col 9)-(line 119,col 62)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 122,col 9)-(line 122,col 56)",
            "(line 123,col 9)-(line 123,col 61)",
            "(line 124,col 9)-(line 124,col 56)",
            "(line 125,col 9)-(line 125,col 61)",
            "(line 127,col 9)-(line 127,col 62)",
            "(line 128,col 9)-(line 128,col 62)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 132,col 9)-(line 132,col 62)",
            "(line 133,col 9)-(line 133,col 35)",
            "(line 134,col 9)-(line 134,col 62)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 137,col 9)-(line 137,col 62)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 62)",
            "(line 140,col 9)-(line 140,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StandardXYItemLabelGenerator g1 = new StandardXYItemLabelGenerator();\n        StandardXYItemLabelGenerator g2 = null;\n        try {\n            g2 = (StandardXYItemLabelGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n        \n        // check independence\n        g1.getXFormat().setMinimumIntegerDigits(2);\n        assertFalse(g1.equals(g2));\n        g2.getXFormat().setMinimumIntegerDigits(2);\n        assertTrue(g1.equals(g2));\n        \n        g1.getYFormat().setMinimumIntegerDigits(2);\n        assertFalse(g1.equals(g2));\n        g2.getYFormat().setMinimumIntegerDigits(2);\n        assertTrue(g1.equals(g2));\n        \n        // another test...\n        g1 = new StandardXYItemLabelGenerator(\"{0} {1} {2}\", \n                DateFormat.getInstance(), DateFormat.getInstance());\n        try {\n            g2 = (StandardXYItemLabelGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n        \n        // check independence\n        g1.getXDateFormat().setNumberFormat(new DecimalFormat(\"0.000\"));\n        assertFalse(g1.equals(g2));\n        g2.getXDateFormat().setNumberFormat(new DecimalFormat(\"0.000\"));\n        assertTrue(g1.equals(g2));\n\n        g1.getYDateFormat().setNumberFormat(new DecimalFormat(\"0.000\"));\n        assertFalse(g1.equals(g2));\n        g2.getYDateFormat().setNumberFormat(new DecimalFormat(\"0.000\"));\n        assertTrue(g1.equals(g2));\n    \n    }",
        "begin_line": 147,
        "end_line": 195,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 77)",
            "(line 149,col 9)-(line 149,col 47)",
            "(line 150,col 9)-(line 155,col 9)",
            "(line 156,col 9)-(line 156,col 29)",
            "(line 157,col 9)-(line 157,col 51)",
            "(line 158,col 9)-(line 158,col 34)",
            "(line 161,col 9)-(line 161,col 51)",
            "(line 162,col 9)-(line 162,col 35)",
            "(line 163,col 9)-(line 163,col 51)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 166,col 9)-(line 166,col 51)",
            "(line 167,col 9)-(line 167,col 35)",
            "(line 168,col 9)-(line 168,col 51)",
            "(line 169,col 9)-(line 169,col 34)",
            "(line 172,col 9)-(line 173,col 68)",
            "(line 174,col 9)-(line 179,col 9)",
            "(line 180,col 9)-(line 180,col 29)",
            "(line 181,col 9)-(line 181,col 51)",
            "(line 182,col 9)-(line 182,col 34)",
            "(line 185,col 9)-(line 185,col 72)",
            "(line 186,col 9)-(line 186,col 35)",
            "(line 187,col 9)-(line 187,col 72)",
            "(line 188,col 9)-(line 188,col 34)",
            "(line 190,col 9)-(line 190,col 72)",
            "(line 191,col 9)-(line 191,col 35)",
            "(line 192,col 9)-(line 192,col 72)",
            "(line 193,col 9)-(line 193,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardXYItemLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StandardXYItemLabelGenerator g1 = new StandardXYItemLabelGenerator();\n        StandardXYItemLabelGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            g2 = (StandardXYItemLabelGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 200,
        "end_line": 221,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 77)",
            "(line 203,col 9)-(line 203,col 47)",
            "(line 205,col 9)-(line 218,col 9)",
            "(line 219,col 9)-(line 219,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BoxAndWhiskerToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BoxAndWhiskerToolTipGeneratorTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 71)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BoxAndWhiskerToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests.BoxAndWhiskerToolTipGeneratorTests(java.lang.String)",
        "snippet": "    public BoxAndWhiskerToolTipGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BoxAndWhiskerToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        // standard test\n        BoxAndWhiskerToolTipGenerator g1 = new BoxAndWhiskerToolTipGenerator();\n        BoxAndWhiskerToolTipGenerator g2 = new BoxAndWhiskerToolTipGenerator();\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        // tooltip format\n        g1 = new BoxAndWhiskerToolTipGenerator(\n            \"{0} --> {1} {2}\", new DecimalFormat(\"0.0\")\n        );\n        g2 = new BoxAndWhiskerToolTipGenerator(\n            \"{1} {2}\", new DecimalFormat(\"0.0\")\n        );\n        assertFalse(g1.equals(g2));\n        g2 = new BoxAndWhiskerToolTipGenerator(\n            \"{0} --> {1} {2}\", new DecimalFormat(\"0.0\")\n        );\n        assertTrue(g1.equals(g2));\n\n        // Y format\n        g1 = new BoxAndWhiskerToolTipGenerator(\n            \"{0} --> {1} {2}\", new DecimalFormat(\"0.0\")\n        );\n        g2 = new BoxAndWhiskerToolTipGenerator(\n            \"{0} --> {1} {2}\", new DecimalFormat(\"0.00\")\n        );\n        assertFalse(g1.equals(g2));\n        g2 = new BoxAndWhiskerToolTipGenerator(\n            \"{0} --> {1} {2}\", new DecimalFormat(\"0.0\")\n        );\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 83,
        "end_line": 116,
        "comment": "\n     * A series of tests for the equals() method.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 79)",
            "(line 87,col 9)-(line 87,col 79)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 92,col 9)-(line 94,col 10)",
            "(line 95,col 9)-(line 97,col 10)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 101,col 10)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 105,col 9)-(line 107,col 10)",
            "(line 108,col 9)-(line 110,col 10)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 114,col 10)",
            "(line 115,col 9)-(line 115,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BoxAndWhiskerToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        BoxAndWhiskerToolTipGenerator g1 = new BoxAndWhiskerToolTipGenerator();\n        BoxAndWhiskerToolTipGenerator g2 = null;\n        try {\n            g2 = (BoxAndWhiskerToolTipGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 121,
        "end_line": 133,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 79)",
            "(line 123,col 9)-(line 123,col 48)",
            "(line 124,col 9)-(line 129,col 9)",
            "(line 130,col 9)-(line 130,col 29)",
            "(line 131,col 9)-(line 131,col 51)",
            "(line 132,col 9)-(line 132,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/BoxAndWhiskerToolTipGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        BoxAndWhiskerToolTipGenerator g1 = new BoxAndWhiskerToolTipGenerator();\n        BoxAndWhiskerToolTipGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            g2 = (BoxAndWhiskerToolTipGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 138,
        "end_line": 160,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 79)",
            "(line 141,col 9)-(line 141,col 48)",
            "(line 143,col 9)-(line 157,col 9)",
            "(line 158,col 9)-(line 158,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategorySeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardCategorySeriesLabelGeneratorTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 78)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategorySeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests.StandardCategorySeriesLabelGeneratorTests(java.lang.String)",
        "snippet": "    public StandardCategorySeriesLabelGeneratorTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategorySeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests.testGenerateLabel()",
        "snippet": "    public void testGenerateLabel() {\n        StandardCategorySeriesLabelGenerator g \n            = new StandardCategorySeriesLabelGenerator(\"{0}\");\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.addValue(1.0, \"R0\", \"C0\");\n        dataset.addValue(2.0, \"R0\", \"C1\");\n        dataset.addValue(3.0, \"R1\", \"C0\");\n        dataset.addValue(null, \"R1\", \"C1\");\n        String s = g.generateLabel(dataset, 0);\n        assertEquals(\"R0\", s);\n    }",
        "begin_line": 83,
        "end_line": 93,
        "comment": "\n     * Some checks for the generalLabel() method.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 85,col 62)",
            "(line 86,col 9)-(line 86,col 70)",
            "(line 87,col 9)-(line 87,col 42)",
            "(line 88,col 9)-(line 88,col 42)",
            "(line 89,col 9)-(line 89,col 42)",
            "(line 90,col 9)-(line 90,col 43)",
            "(line 91,col 9)-(line 91,col 47)",
            "(line 92,col 9)-(line 92,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategorySeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StandardCategorySeriesLabelGenerator g1 \n            = new StandardCategorySeriesLabelGenerator();\n        StandardCategorySeriesLabelGenerator g2 \n            = new StandardCategorySeriesLabelGenerator();\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new StandardCategorySeriesLabelGenerator(\"{1}\");\n        assertFalse(g1.equals(g2));\n        g2 = new StandardCategorySeriesLabelGenerator(\"{1}\");\n        assertTrue(g1.equals(g2));        \n    }",
        "begin_line": 98,
        "end_line": 110,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 100,col 57)",
            "(line 101,col 9)-(line 102,col 57)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 106,col 9)-(line 106,col 61)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 61)",
            "(line 109,col 9)-(line 109,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategorySeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StandardCategorySeriesLabelGenerator g1 \n            = new StandardCategorySeriesLabelGenerator(\"{1}\");\n        StandardCategorySeriesLabelGenerator g2 = null;\n        try {\n            g2 = (StandardCategorySeriesLabelGenerator) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 115,
        "end_line": 128,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 117,col 62)",
            "(line 118,col 9)-(line 118,col 55)",
            "(line 119,col 9)-(line 124,col 9)",
            "(line 125,col 9)-(line 125,col 29)",
            "(line 126,col 9)-(line 126,col 51)",
            "(line 127,col 9)-(line 127,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/labels/junit/StandardCategorySeriesLabelGeneratorTests.java",
        "signature": "org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StandardCategorySeriesLabelGenerator g1\n            = new StandardCategorySeriesLabelGenerator(\"{2}\");\n        StandardCategorySeriesLabelGenerator g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            g2 = (StandardCategorySeriesLabelGenerator) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 133,
        "end_line": 155,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 136,col 62)",
            "(line 137,col 9)-(line 137,col 55)",
            "(line 139,col 9)-(line 152,col 9)",
            "(line 153,col 9)-(line 153,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.LineBorderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/LineBorderTests.java",
        "signature": "org.jfree.chart.block.junit.LineBorderTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LineBorderTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.LineBorderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/LineBorderTests.java",
        "signature": "org.jfree.chart.block.junit.LineBorderTests.LineBorderTests(java.lang.String)",
        "snippet": "    public LineBorderTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.LineBorderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/LineBorderTests.java",
        "signature": "org.jfree.chart.block.junit.LineBorderTests.testEquals()",
        "snippet": "    public void testEquals() {\n        LineBorder b1 = new LineBorder(Color.red, new BasicStroke(1.0f), \n                new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n        LineBorder b2 = new LineBorder(Color.red, new BasicStroke(1.0f), \n                new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b2));\n        \n        b1 = new LineBorder(Color.blue, new BasicStroke(1.0f), \n                new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n        assertFalse(b1.equals(b2));\n        b2 = new LineBorder(Color.blue, new BasicStroke(1.0f), \n                new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n        assertTrue(b1.equals(b2));\n        \n        b1 = new LineBorder(Color.blue, new BasicStroke(1.1f), \n                new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n        assertFalse(b1.equals(b2));\n        b2 = new LineBorder(Color.blue, new BasicStroke(1.1f), \n                new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n        assertTrue(b1.equals(b2));\n\n        b1 = new LineBorder(Color.blue, new BasicStroke(1.1f), \n                new RectangleInsets(1.0, 2.0, 3.0, 4.0));\n        assertFalse(b1.equals(b2));\n        b2 = new LineBorder(Color.blue, new BasicStroke(1.1f), \n                new RectangleInsets(1.0, 2.0, 3.0, 4.0));\n        assertTrue(b1.equals(b2));\n    \n    }",
        "begin_line": 87,
        "end_line": 116,
        "comment": "\n     * Confirm that the equals() method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 89,col 57)",
            "(line 90,col 9)-(line 91,col 57)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 95,col 9)-(line 96,col 57)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 99,col 57)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 103,col 57)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 106,col 57)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 109,col 9)-(line 110,col 57)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 113,col 57)",
            "(line 114,col 9)-(line 114,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.LineBorderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/LineBorderTests.java",
        "signature": "org.jfree.chart.block.junit.LineBorderTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LineBorder b1 = new LineBorder();\n        assertFalse(b1 instanceof Cloneable);\n    }",
        "begin_line": 121,
        "end_line": 124,
        "comment": "\n     * Immutable - cloning not necessary.\n     ",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 41)",
            "(line 123,col 9)-(line 123,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.LineBorderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/LineBorderTests.java",
        "signature": "org.jfree.chart.block.junit.LineBorderTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        LineBorder b1 = new LineBorder(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow), new BasicStroke(1.0f), \n                new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n        LineBorder b2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(b1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            b2 = (LineBorder) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertTrue(b1.equals(b2));\n    }",
        "begin_line": 129,
        "end_line": 149,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 130,col 9)-(line 132,col 57)",
            "(line 133,col 9)-(line 133,col 29)",
            "(line 134,col 9)-(line 147,col 9)",
            "(line 148,col 9)-(line 148,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BlockBorderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BlockBorderTests.java",
        "signature": "org.jfree.chart.block.junit.BlockBorderTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BlockBorderTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BlockBorderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BlockBorderTests.java",
        "signature": "org.jfree.chart.block.junit.BlockBorderTests.BlockBorderTests(java.lang.String)",
        "snippet": "    public BlockBorderTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BlockBorderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BlockBorderTests.java",
        "signature": "org.jfree.chart.block.junit.BlockBorderTests.testEquals()",
        "snippet": "    public void testEquals() {\n        BlockBorder b1 = new BlockBorder(new RectangleInsets(1.0, 2.0, 3.0, \n                4.0), Color.red);\n        BlockBorder b2 = new BlockBorder(new RectangleInsets(1.0, 2.0, 3.0, \n                4.0), Color.red);\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b2));\n        \n        // insets\n        b1 = new BlockBorder(new RectangleInsets(UnitType.RELATIVE, 1.0, 2.0,\n                3.0, 4.0), Color.red);\n        assertFalse(b1.equals(b2));\n        b2 = new BlockBorder(new RectangleInsets(UnitType.RELATIVE, 1.0, 2.0, \n                3.0, 4.0), Color.red);\n        assertTrue(b1.equals(b2));\n        \n        // paint\n        b1 = new BlockBorder(new RectangleInsets(1.0, 2.0, 3.0, 4.0), \n                Color.blue);\n        assertFalse(b1.equals(b2));\n        b2 = new BlockBorder(new RectangleInsets(1.0, 2.0, 3.0, 4.0), \n                Color.blue);\n        assertTrue(b1.equals(b2));\n    }",
        "begin_line": 87,
        "end_line": 110,
        "comment": "\n     * Confirm that the equals() method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 89,col 33)",
            "(line 90,col 9)-(line 91,col 33)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 96,col 9)-(line 97,col 38)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 100,col 38)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 104,col 9)-(line 105,col 28)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 108,col 28)",
            "(line 109,col 9)-(line 109,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BlockBorderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BlockBorderTests.java",
        "signature": "org.jfree.chart.block.junit.BlockBorderTests.testCloning()",
        "snippet": "    public void testCloning() {\n        BlockBorder b1 = new BlockBorder();\n        assertFalse(b1 instanceof Cloneable);\n    }",
        "begin_line": 115,
        "end_line": 118,
        "comment": "\n     * Immutable - cloning not necessary.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 43)",
            "(line 117,col 9)-(line 117,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BlockBorderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BlockBorderTests.java",
        "signature": "org.jfree.chart.block.junit.BlockBorderTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        BlockBorder b1 = new BlockBorder(new RectangleInsets(1.0, 2.0, 3.0, \n                4.0), new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.yellow));\n        BlockBorder b2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(b1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            b2 = (BlockBorder) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertTrue(b1.equals(b2));\n    }",
        "begin_line": 123,
        "end_line": 143,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 126,col 31)",
            "(line 127,col 9)-(line 127,col 30)",
            "(line 128,col 9)-(line 141,col 9)",
            "(line 142,col 9)-(line 142,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.FlowArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/FlowArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.FlowArrangementTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(FlowArrangementTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.FlowArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/FlowArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.FlowArrangementTests.FlowArrangementTests(java.lang.String)",
        "snippet": "    public FlowArrangementTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.FlowArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/FlowArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.FlowArrangementTests.testEquals()",
        "snippet": "    public void testEquals() {\n        FlowArrangement f1 = new FlowArrangement(HorizontalAlignment.LEFT, \n                VerticalAlignment.TOP, 1.0, 2.0);\n        FlowArrangement f2 = new FlowArrangement(HorizontalAlignment.LEFT, \n                VerticalAlignment.TOP, 1.0, 2.0);\n        assertTrue(f1.equals(f2));\n        assertTrue(f2.equals(f1));\n\n        f1 = new FlowArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.TOP, 1.0, 2.0);\n        assertFalse(f1.equals(f2));\n        f2 = new FlowArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.TOP, 1.0, 2.0);\n        assertTrue(f1.equals(f2));\n\n        f1 = new FlowArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.BOTTOM, 1.0, 2.0);\n        assertFalse(f1.equals(f2));\n        f2 = new FlowArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.BOTTOM, 1.0, 2.0);\n        assertTrue(f1.equals(f2));\n    \n        f1 = new FlowArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.BOTTOM, 1.1, 2.0);\n        assertFalse(f1.equals(f2));\n        f2 = new FlowArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.BOTTOM, 1.1, 2.0);\n        assertTrue(f1.equals(f2));\n        \n        f1 = new FlowArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.BOTTOM, 1.1, 2.2);\n        assertFalse(f1.equals(f2));\n        f2 = new FlowArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.BOTTOM, 1.1, 2.2);\n        assertTrue(f1.equals(f2));\n        \n    }",
        "begin_line": 85,
        "end_line": 121,
        "comment": "\n     * Confirm that the equals() method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 87,col 49)",
            "(line 88,col 9)-(line 89,col 49)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 93,col 9)-(line 94,col 49)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 97,col 49)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 100,col 9)-(line 101,col 52)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 104,col 52)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 107,col 9)-(line 108,col 52)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 111,col 52)",
            "(line 112,col 9)-(line 112,col 34)",
            "(line 114,col 9)-(line 115,col 52)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 118,col 52)",
            "(line 119,col 9)-(line 119,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.FlowArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/FlowArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.FlowArrangementTests.testCloning()",
        "snippet": "    public void testCloning() {\n        FlowArrangement f1 = new FlowArrangement();\n        assertFalse(f1 instanceof Cloneable);\n    }",
        "begin_line": 126,
        "end_line": 129,
        "comment": "\n     * Immutable - cloning is not necessary.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 51)",
            "(line 128,col 9)-(line 128,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.FlowArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/FlowArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.FlowArrangementTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        FlowArrangement f1 = new FlowArrangement(HorizontalAlignment.LEFT, \n                VerticalAlignment.TOP, 1.0, 2.0);\n        FlowArrangement f2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(f1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            f2 = (FlowArrangement) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(f1, f2);\n    }",
        "begin_line": 134,
        "end_line": 153,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 136,col 49)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 138,col 9)-(line 151,col 9)",
            "(line 152,col 9)-(line 152,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BlockPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BlockPackageTests.java",
        "signature": "org.jfree.chart.block.junit.BlockPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.chart.block\");\n        suite.addTestSuite(AbstractBlockTests.class);\n        suite.addTestSuite(BlockBorderTests.class);\n        suite.addTestSuite(BlockContainerTests.class);\n        suite.addTestSuite(BorderArrangementTests.class);\n        suite.addTestSuite(ColorBlockTests.class);\n        suite.addTestSuite(ColumnArrangementTests.class);\n        suite.addTestSuite(EmptyBlockTests.class);\n        suite.addTestSuite(FlowArrangementTests.class);\n        suite.addTestSuite(GridArrangementTests.class);\n        suite.addTestSuite(LabelBlockTests.class);\n        suite.addTestSuite(LineBorderTests.class);\n        suite.addTestSuite(RectangleConstraintTests.class);\n        return suite;\n    }",
        "begin_line": 64,
        "end_line": 79,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 65)",
            "(line 66,col 9)-(line 66,col 53)",
            "(line 67,col 9)-(line 67,col 51)",
            "(line 68,col 9)-(line 68,col 54)",
            "(line 69,col 9)-(line 69,col 57)",
            "(line 70,col 9)-(line 70,col 50)",
            "(line 71,col 9)-(line 71,col 57)",
            "(line 72,col 9)-(line 72,col 50)",
            "(line 73,col 9)-(line 73,col 55)",
            "(line 74,col 9)-(line 74,col 55)",
            "(line 75,col 9)-(line 75,col 50)",
            "(line 76,col 9)-(line 76,col 50)",
            "(line 77,col 9)-(line 77,col 59)",
            "(line 78,col 9)-(line 78,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BlockPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BlockPackageTests.java",
        "signature": "org.jfree.chart.block.junit.BlockPackageTests.BlockPackageTests(java.lang.String)",
        "snippet": "    public BlockPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the suite name.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BlockPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BlockPackageTests.java",
        "signature": "org.jfree.chart.block.junit.BlockPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.AbstractBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/AbstractBlockTests.java",
        "signature": "org.jfree.chart.block.junit.AbstractBlockTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(AbstractBlockTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.AbstractBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/AbstractBlockTests.java",
        "signature": "org.jfree.chart.block.junit.AbstractBlockTests.AbstractBlockTests(java.lang.String)",
        "snippet": "    public AbstractBlockTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.AbstractBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/AbstractBlockTests.java",
        "signature": "org.jfree.chart.block.junit.AbstractBlockTests.testEquals()",
        "snippet": "    public void testEquals() {\n        EmptyBlock b1 = new EmptyBlock(1.0, 2.0);\n        EmptyBlock b2 = new EmptyBlock(1.0, 2.0);\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b2));\n        \n        b1.setID(\"Test\");\n        assertFalse(b1.equals(b2));\n        b2.setID(\"Test\");\n        assertTrue(b1.equals(b2));\n        \n        b1.setMargin(new RectangleInsets(1.0, 2.0, 3.0, 4.0));\n        assertFalse(b1.equals(b2));\n        b2.setMargin(new RectangleInsets(1.0, 2.0, 3.0, 4.0));\n        assertTrue(b1.equals(b2));\n        \n        b1.setFrame(new BlockBorder(Color.red));\n        assertFalse(b1.equals(b2));\n        b2.setFrame(new BlockBorder(Color.red));\n        assertTrue(b1.equals(b2));\n        \n        b1.setPadding(new RectangleInsets(2.0, 4.0, 6.0, 8.0));\n        assertFalse(b1.equals(b2));\n        b2.setPadding(new RectangleInsets(2.0, 4.0, 6.0, 8.0));\n        assertTrue(b1.equals(b2));\n        \n        b1.setWidth(1.23);\n        assertFalse(b1.equals(b2));\n        b2.setWidth(1.23);\n        assertTrue(b1.equals(b2));\n        \n        b1.setHeight(4.56);\n        assertFalse(b1.equals(b2));\n        b2.setHeight(4.56);\n        assertTrue(b1.equals(b2));\n        \n        b1.setBounds(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(b1.equals(b2));\n        b2.setBounds(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(b1.equals(b2));\n        \n        b1 = new EmptyBlock(1.1, 2.0);\n        assertFalse(b1.equals(b2));\n        b2 = new EmptyBlock(1.1, 2.0);\n        assertTrue(b1.equals(b2));\n\n        b1 = new EmptyBlock(1.1, 2.2);\n        assertFalse(b1.equals(b2));\n        b2 = new EmptyBlock(1.1, 2.2);\n        assertTrue(b1.equals(b2));    \n    }",
        "begin_line": 88,
        "end_line": 138,
        "comment": "\n     * Confirm that the equals() method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 49)",
            "(line 90,col 9)-(line 90,col 49)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 94,col 25)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 25)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 99,col 9)-(line 99,col 62)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 62)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 104,col 9)-(line 104,col 48)",
            "(line 105,col 9)-(line 105,col 35)",
            "(line 106,col 9)-(line 106,col 48)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 109,col 9)-(line 109,col 63)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 111,col 63)",
            "(line 112,col 9)-(line 112,col 34)",
            "(line 114,col 9)-(line 114,col 26)",
            "(line 115,col 9)-(line 115,col 35)",
            "(line 116,col 9)-(line 116,col 26)",
            "(line 117,col 9)-(line 117,col 34)",
            "(line 119,col 9)-(line 119,col 27)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 121,col 27)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 124,col 9)-(line 124,col 65)",
            "(line 125,col 9)-(line 125,col 35)",
            "(line 126,col 9)-(line 126,col 65)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 129,col 9)-(line 129,col 38)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 131,col 38)",
            "(line 132,col 9)-(line 132,col 34)",
            "(line 134,col 9)-(line 134,col 38)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 136,col 38)",
            "(line 137,col 9)-(line 137,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.AbstractBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/AbstractBlockTests.java",
        "signature": "org.jfree.chart.block.junit.AbstractBlockTests.testCloning()",
        "snippet": "    public void testCloning() {\n        EmptyBlock b1 = new EmptyBlock(1.0, 2.0);\n        Rectangle2D bounds1 = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        b1.setBounds(bounds1);\n        EmptyBlock b2 = null;\n        \n        try {\n            b2 = (EmptyBlock) b1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            fail(e.toString());\n        }\n        assertTrue(b1 != b2);\n        assertTrue(b1.getClass() == b2.getClass());\n        assertTrue(b1.equals(b2));\n        \n        bounds1.setFrame(2.0, 4.0, 6.0, 8.0);\n        assertFalse(b1.equals(b2));\n        b2.setBounds(new Rectangle2D.Double(2.0, 4.0, 6.0, 8.0));\n        assertTrue(b1.equals(b2));\n    }",
        "begin_line": 143,
        "end_line": 163,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 49)",
            "(line 145,col 9)-(line 145,col 73)",
            "(line 146,col 9)-(line 146,col 30)",
            "(line 147,col 9)-(line 147,col 29)",
            "(line 149,col 9)-(line 154,col 9)",
            "(line 155,col 9)-(line 155,col 29)",
            "(line 156,col 9)-(line 156,col 51)",
            "(line 157,col 9)-(line 157,col 34)",
            "(line 159,col 9)-(line 159,col 45)",
            "(line 160,col 9)-(line 160,col 35)",
            "(line 161,col 9)-(line 161,col 65)",
            "(line 162,col 9)-(line 162,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.AbstractBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/AbstractBlockTests.java",
        "signature": "org.jfree.chart.block.junit.AbstractBlockTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        EmptyBlock b1 = new EmptyBlock(1.0, 2.0);\n        EmptyBlock b2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(b1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            b2 = (EmptyBlock) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(b1, b2);\n    }",
        "begin_line": 168,
        "end_line": 186,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 49)",
            "(line 170,col 9)-(line 170,col 29)",
            "(line 171,col 9)-(line 184,col 9)",
            "(line 185,col 9)-(line 185,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BorderArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.BorderArrangementTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BorderArrangementTests.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BorderArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.BorderArrangementTests.BorderArrangementTests(java.lang.String)",
        "snippet": "    public BorderArrangementTests(String name) {\n        super(name);\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BorderArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.BorderArrangementTests.testEquals()",
        "snippet": "    public void testEquals() {\n        BorderArrangement b1 = new BorderArrangement();\n        BorderArrangement b2 = new BorderArrangement();\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b1));\n\n        b1.add(new EmptyBlock(99.0, 99.0), null);\n        assertFalse(b1.equals(b2));\n        b2.add(new EmptyBlock(99.0, 99.0), null);\n        assertTrue(b1.equals(b2));\n\n        b1.add(new EmptyBlock(1.0, 1.0), RectangleEdge.LEFT);\n        assertFalse(b1.equals(b2));\n        b2.add(new EmptyBlock(1.0, 1.0), RectangleEdge.LEFT);\n        assertTrue(b1.equals(b2));\n\n        b1.add(new EmptyBlock(2.0, 2.0), RectangleEdge.RIGHT);\n        assertFalse(b1.equals(b2));\n        b2.add(new EmptyBlock(2.0, 2.0), RectangleEdge.RIGHT);\n        assertTrue(b1.equals(b2));\n\n        b1.add(new EmptyBlock(3.0, 3.0), RectangleEdge.TOP);\n        assertFalse(b1.equals(b2));\n        b2.add(new EmptyBlock(3.0, 3.0), RectangleEdge.TOP);\n        assertTrue(b1.equals(b2));\n\n        b1.add(new EmptyBlock(4.0, 4.0), RectangleEdge.BOTTOM);\n        assertFalse(b1.equals(b2));\n        b2.add(new EmptyBlock(4.0, 4.0), RectangleEdge.BOTTOM);\n        assertTrue(b1.equals(b2));\n    }",
        "begin_line": 95,
        "end_line": 125,
        "comment": "\n     * Confirm that the equals() method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 55)",
            "(line 97,col 9)-(line 97,col 55)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 101,col 49)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 49)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 106,col 9)-(line 106,col 61)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 61)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 111,col 9)-(line 111,col 62)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 113,col 62)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 116,col 9)-(line 116,col 60)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 118,col 60)",
            "(line 119,col 9)-(line 119,col 34)",
            "(line 121,col 9)-(line 121,col 63)",
            "(line 122,col 9)-(line 122,col 35)",
            "(line 123,col 9)-(line 123,col 63)",
            "(line 124,col 9)-(line 124,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BorderArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.BorderArrangementTests.testCloning()",
        "snippet": "    public void testCloning() {\n        BorderArrangement b1 = new BorderArrangement();\n        assertFalse(b1 instanceof Cloneable);\n    }",
        "begin_line": 130,
        "end_line": 133,
        "comment": "\n     * Immutable - cloning is not necessary.\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 55)",
            "(line 132,col 9)-(line 132,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BorderArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.BorderArrangementTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        BorderArrangement b1 = new BorderArrangement();\n        BorderArrangement b2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(b1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            b2 = (BorderArrangement) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(b1, b2);\n    }",
        "begin_line": 138,
        "end_line": 157,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 55)",
            "(line 140,col 9)-(line 140,col 36)",
            "(line 141,col 9)-(line 155,col 9)",
            "(line 156,col 9)-(line 156,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BorderArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.BorderArrangementTests.testSizing()",
        "snippet": "    public void testSizing() {\n        BlockContainer container = new BlockContainer(new BorderArrangement());\n        BufferedImage image = new BufferedImage(\n            200, 100, BufferedImage.TYPE_INT_RGB\n        );\n        Graphics2D g2 = image.createGraphics();\n        \n        // TBLRC\n        // 00000 - no items\n        Size2D size = container.arrange(g2);\n        assertEquals(0.0, size.width, EPSILON);\n        assertEquals(0.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 00001 - center item only\n        container.add(new EmptyBlock(123.4, 567.8));\n        size = container.arrange(g2);\n        assertEquals(123.4, size.width, EPSILON);\n        assertEquals(567.8, size.height, EPSILON);\n\n        // TBLRC\n        // 00010 - right item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00011 - right and center items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2);\n        assertEquals(22.3, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // try case where right item is shorter than center item\n        container.clear();\n        Block rb = new EmptyBlock(12.3, 15.6);\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(rb, RectangleEdge.RIGHT);\n        size = container.arrange(g2);\n        assertEquals(22.3, size.width, EPSILON);\n        assertEquals(20.0, size.height, EPSILON);\n        assertEquals(20.0, rb.getBounds().getHeight(), EPSILON);\n\n        // TBLRC\n        // 00100 - left item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00101 - left and center items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2);\n        assertEquals(22.3, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // try case where left item is shorter than center item\n        container.clear();\n        Block lb = new EmptyBlock(12.3, 15.6);\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(lb, RectangleEdge.LEFT);\n        size = container.arrange(g2);\n        assertEquals(22.3, size.width, EPSILON);\n        assertEquals(20.0, size.height, EPSILON);\n        assertEquals(20.0, lb.getBounds().getHeight(), EPSILON);\n        \n        // TBLRC\n        // 00110 - left and right items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2);\n        assertEquals(22.3, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00111 - left, right and center items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(5.4, 3.2), RectangleEdge.RIGHT);\n        size = container.arrange(g2);\n        assertEquals(27.7, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01000 - bottom item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01001 - bottom and center only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01010 - bottom and right only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01011 - bottom, right and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(31.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01100\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01101 - bottom, left and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(31.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01110 - bottom. left and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(31.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01111\n        container.clear();\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2);\n        assertEquals(21.0, size.width, EPSILON);\n        assertEquals(14.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 10000 - top item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10001 - top and center only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n                \n        // TBLRC\n        // 10010 - right and top only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10011 - top, right and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2);\n        assertEquals(33.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n\n        // TBLRC\n        // 10100 - top and left only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10101 - top, left and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2);\n        assertEquals(33.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10110 - top, left and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2);\n        assertEquals(33.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10111\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2);\n        assertEquals(21.0, size.width, EPSILON);\n        assertEquals(12.0, size.height, EPSILON);\n\n        // TBLRC\n        // 11000 - top and bottom only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 11001\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(21.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n        \n        // TBLRC\n        // 11010 - top, bottom and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(21.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n                \n        // TBLRC\n        // 11011\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2);\n        assertEquals(16.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11100\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(21.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n\n        // TBLRC\n        // 11101\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2);\n        assertEquals(14.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11110\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        size = container.arrange(g2);\n        assertEquals(12.0, size.width, EPSILON);\n        assertEquals(14.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11111 - all\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2);\n        assertEquals(21.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n\n    }",
        "begin_line": 162,
        "end_line": 491,
        "comment": "\n     * Run some checks on sizing.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 79)",
            "(line 164,col 9)-(line 166,col 10)",
            "(line 167,col 9)-(line 167,col 47)",
            "(line 171,col 9)-(line 171,col 44)",
            "(line 172,col 9)-(line 172,col 47)",
            "(line 173,col 9)-(line 173,col 48)",
            "(line 177,col 9)-(line 177,col 52)",
            "(line 178,col 9)-(line 178,col 37)",
            "(line 179,col 9)-(line 179,col 49)",
            "(line 180,col 9)-(line 180,col 50)",
            "(line 184,col 9)-(line 184,col 26)",
            "(line 185,col 9)-(line 185,col 71)",
            "(line 186,col 9)-(line 186,col 37)",
            "(line 187,col 9)-(line 187,col 48)",
            "(line 188,col 9)-(line 188,col 49)",
            "(line 192,col 9)-(line 192,col 26)",
            "(line 193,col 9)-(line 193,col 50)",
            "(line 194,col 9)-(line 194,col 71)",
            "(line 195,col 9)-(line 195,col 37)",
            "(line 196,col 9)-(line 196,col 48)",
            "(line 197,col 9)-(line 197,col 49)",
            "(line 200,col 9)-(line 200,col 26)",
            "(line 201,col 9)-(line 201,col 46)",
            "(line 202,col 9)-(line 202,col 50)",
            "(line 203,col 9)-(line 203,col 47)",
            "(line 204,col 9)-(line 204,col 37)",
            "(line 205,col 9)-(line 205,col 48)",
            "(line 206,col 9)-(line 206,col 49)",
            "(line 207,col 9)-(line 207,col 64)",
            "(line 211,col 9)-(line 211,col 26)",
            "(line 212,col 9)-(line 212,col 70)",
            "(line 213,col 9)-(line 213,col 37)",
            "(line 214,col 9)-(line 214,col 48)",
            "(line 215,col 9)-(line 215,col 49)",
            "(line 219,col 9)-(line 219,col 26)",
            "(line 220,col 9)-(line 220,col 50)",
            "(line 221,col 9)-(line 221,col 70)",
            "(line 222,col 9)-(line 222,col 37)",
            "(line 223,col 9)-(line 223,col 48)",
            "(line 224,col 9)-(line 224,col 49)",
            "(line 227,col 9)-(line 227,col 26)",
            "(line 228,col 9)-(line 228,col 46)",
            "(line 229,col 9)-(line 229,col 50)",
            "(line 230,col 9)-(line 230,col 46)",
            "(line 231,col 9)-(line 231,col 37)",
            "(line 232,col 9)-(line 232,col 48)",
            "(line 233,col 9)-(line 233,col 49)",
            "(line 234,col 9)-(line 234,col 64)",
            "(line 238,col 9)-(line 238,col 26)",
            "(line 239,col 9)-(line 239,col 71)",
            "(line 240,col 9)-(line 240,col 70)",
            "(line 241,col 9)-(line 241,col 37)",
            "(line 242,col 9)-(line 242,col 48)",
            "(line 243,col 9)-(line 243,col 49)",
            "(line 247,col 9)-(line 247,col 26)",
            "(line 248,col 9)-(line 248,col 50)",
            "(line 249,col 9)-(line 249,col 70)",
            "(line 250,col 9)-(line 250,col 69)",
            "(line 251,col 9)-(line 251,col 37)",
            "(line 252,col 9)-(line 252,col 48)",
            "(line 253,col 9)-(line 253,col 49)",
            "(line 257,col 9)-(line 257,col 26)",
            "(line 258,col 9)-(line 258,col 72)",
            "(line 259,col 9)-(line 259,col 37)",
            "(line 260,col 9)-(line 260,col 48)",
            "(line 261,col 9)-(line 261,col 49)",
            "(line 265,col 9)-(line 265,col 26)",
            "(line 266,col 9)-(line 266,col 50)",
            "(line 267,col 9)-(line 267,col 72)",
            "(line 268,col 9)-(line 268,col 37)",
            "(line 269,col 9)-(line 269,col 48)",
            "(line 270,col 9)-(line 270,col 49)",
            "(line 274,col 9)-(line 274,col 26)",
            "(line 275,col 9)-(line 275,col 71)",
            "(line 276,col 9)-(line 276,col 72)",
            "(line 277,col 9)-(line 277,col 37)",
            "(line 278,col 9)-(line 278,col 48)",
            "(line 279,col 9)-(line 279,col 49)",
            "(line 283,col 9)-(line 283,col 26)",
            "(line 284,col 9)-(line 284,col 50)",
            "(line 285,col 9)-(line 285,col 71)",
            "(line 286,col 9)-(line 286,col 72)",
            "(line 287,col 9)-(line 287,col 37)",
            "(line 288,col 9)-(line 288,col 48)",
            "(line 289,col 9)-(line 289,col 49)",
            "(line 293,col 9)-(line 293,col 26)",
            "(line 294,col 9)-(line 294,col 70)",
            "(line 295,col 9)-(line 295,col 72)",
            "(line 296,col 9)-(line 296,col 37)",
            "(line 297,col 9)-(line 297,col 48)",
            "(line 298,col 9)-(line 298,col 49)",
            "(line 302,col 9)-(line 302,col 26)",
            "(line 303,col 9)-(line 303,col 50)",
            "(line 304,col 9)-(line 304,col 70)",
            "(line 305,col 9)-(line 305,col 72)",
            "(line 306,col 9)-(line 306,col 37)",
            "(line 307,col 9)-(line 307,col 48)",
            "(line 308,col 9)-(line 308,col 49)",
            "(line 312,col 9)-(line 312,col 26)",
            "(line 313,col 9)-(line 313,col 71)",
            "(line 314,col 9)-(line 314,col 70)",
            "(line 315,col 9)-(line 315,col 72)",
            "(line 316,col 9)-(line 316,col 37)",
            "(line 317,col 9)-(line 317,col 48)",
            "(line 318,col 9)-(line 318,col 49)",
            "(line 322,col 9)-(line 322,col 26)",
            "(line 323,col 9)-(line 323,col 70)",
            "(line 324,col 9)-(line 324,col 68)",
            "(line 325,col 9)-(line 325,col 69)",
            "(line 326,col 9)-(line 326,col 49)",
            "(line 327,col 9)-(line 327,col 37)",
            "(line 328,col 9)-(line 328,col 48)",
            "(line 329,col 9)-(line 329,col 49)",
            "(line 333,col 9)-(line 333,col 26)",
            "(line 334,col 9)-(line 334,col 69)",
            "(line 335,col 9)-(line 335,col 37)",
            "(line 336,col 9)-(line 336,col 48)",
            "(line 337,col 9)-(line 337,col 49)",
            "(line 341,col 9)-(line 341,col 26)",
            "(line 342,col 9)-(line 342,col 50)",
            "(line 343,col 9)-(line 343,col 69)",
            "(line 344,col 9)-(line 344,col 37)",
            "(line 345,col 9)-(line 345,col 48)",
            "(line 346,col 9)-(line 346,col 49)",
            "(line 350,col 9)-(line 350,col 26)",
            "(line 351,col 9)-(line 351,col 71)",
            "(line 352,col 9)-(line 352,col 69)",
            "(line 353,col 9)-(line 353,col 37)",
            "(line 354,col 9)-(line 354,col 48)",
            "(line 355,col 9)-(line 355,col 49)",
            "(line 359,col 9)-(line 359,col 26)",
            "(line 360,col 9)-(line 360,col 50)",
            "(line 361,col 9)-(line 361,col 69)",
            "(line 362,col 9)-(line 362,col 71)",
            "(line 363,col 9)-(line 363,col 37)",
            "(line 364,col 9)-(line 364,col 48)",
            "(line 365,col 9)-(line 365,col 49)",
            "(line 369,col 9)-(line 369,col 26)",
            "(line 370,col 9)-(line 370,col 70)",
            "(line 371,col 9)-(line 371,col 69)",
            "(line 372,col 9)-(line 372,col 37)",
            "(line 373,col 9)-(line 373,col 48)",
            "(line 374,col 9)-(line 374,col 49)",
            "(line 378,col 9)-(line 378,col 26)",
            "(line 379,col 9)-(line 379,col 50)",
            "(line 380,col 9)-(line 380,col 69)",
            "(line 381,col 9)-(line 381,col 70)",
            "(line 382,col 9)-(line 382,col 37)",
            "(line 383,col 9)-(line 383,col 48)",
            "(line 384,col 9)-(line 384,col 49)",
            "(line 388,col 9)-(line 388,col 26)",
            "(line 389,col 9)-(line 389,col 71)",
            "(line 390,col 9)-(line 390,col 69)",
            "(line 391,col 9)-(line 391,col 70)",
            "(line 392,col 9)-(line 392,col 37)",
            "(line 393,col 9)-(line 393,col 48)",
            "(line 394,col 9)-(line 394,col 49)",
            "(line 398,col 9)-(line 398,col 26)",
            "(line 399,col 9)-(line 399,col 67)",
            "(line 400,col 9)-(line 400,col 68)",
            "(line 401,col 9)-(line 401,col 69)",
            "(line 402,col 9)-(line 402,col 49)",
            "(line 403,col 9)-(line 403,col 37)",
            "(line 404,col 9)-(line 404,col 48)",
            "(line 405,col 9)-(line 405,col 49)",
            "(line 409,col 9)-(line 409,col 26)",
            "(line 410,col 9)-(line 410,col 69)",
            "(line 411,col 9)-(line 411,col 72)",
            "(line 412,col 9)-(line 412,col 37)",
            "(line 413,col 9)-(line 413,col 48)",
            "(line 414,col 9)-(line 414,col 49)",
            "(line 418,col 9)-(line 418,col 26)",
            "(line 419,col 9)-(line 419,col 50)",
            "(line 420,col 9)-(line 420,col 69)",
            "(line 421,col 9)-(line 421,col 72)",
            "(line 422,col 9)-(line 422,col 37)",
            "(line 423,col 9)-(line 423,col 48)",
            "(line 424,col 9)-(line 424,col 49)",
            "(line 428,col 9)-(line 428,col 26)",
            "(line 429,col 9)-(line 429,col 71)",
            "(line 430,col 9)-(line 430,col 69)",
            "(line 431,col 9)-(line 431,col 72)",
            "(line 432,col 9)-(line 432,col 37)",
            "(line 433,col 9)-(line 433,col 48)",
            "(line 434,col 9)-(line 434,col 49)",
            "(line 438,col 9)-(line 438,col 26)",
            "(line 439,col 9)-(line 439,col 67)",
            "(line 440,col 9)-(line 440,col 70)",
            "(line 441,col 9)-(line 441,col 69)",
            "(line 442,col 9)-(line 442,col 49)",
            "(line 443,col 9)-(line 443,col 37)",
            "(line 444,col 9)-(line 444,col 48)",
            "(line 445,col 9)-(line 445,col 49)",
            "(line 449,col 9)-(line 449,col 26)",
            "(line 450,col 9)-(line 450,col 70)",
            "(line 451,col 9)-(line 451,col 69)",
            "(line 452,col 9)-(line 452,col 72)",
            "(line 453,col 9)-(line 453,col 37)",
            "(line 454,col 9)-(line 454,col 48)",
            "(line 455,col 9)-(line 455,col 49)",
            "(line 459,col 9)-(line 459,col 26)",
            "(line 460,col 9)-(line 460,col 67)",
            "(line 461,col 9)-(line 461,col 70)",
            "(line 462,col 9)-(line 462,col 68)",
            "(line 463,col 9)-(line 463,col 49)",
            "(line 464,col 9)-(line 464,col 37)",
            "(line 465,col 9)-(line 465,col 48)",
            "(line 466,col 9)-(line 466,col 49)",
            "(line 470,col 9)-(line 470,col 26)",
            "(line 471,col 9)-(line 471,col 67)",
            "(line 472,col 9)-(line 472,col 70)",
            "(line 473,col 9)-(line 473,col 68)",
            "(line 474,col 9)-(line 474,col 69)",
            "(line 475,col 9)-(line 475,col 37)",
            "(line 476,col 9)-(line 476,col 48)",
            "(line 477,col 9)-(line 477,col 49)",
            "(line 481,col 9)-(line 481,col 26)",
            "(line 482,col 9)-(line 482,col 67)",
            "(line 483,col 9)-(line 483,col 70)",
            "(line 484,col 9)-(line 484,col 68)",
            "(line 485,col 9)-(line 485,col 69)",
            "(line 486,col 9)-(line 486,col 49)",
            "(line 487,col 9)-(line 487,col 37)",
            "(line 488,col 9)-(line 488,col 48)",
            "(line 489,col 9)-(line 489,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BorderArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.BorderArrangementTests.testSizingWithWidthConstraint()",
        "snippet": "    public void testSizingWithWidthConstraint() {\n        RectangleConstraint constraint = new RectangleConstraint(\n            10.0, new Range(10.0, 10.0), LengthConstraintType.FIXED,\n            0.0, new Range(0.0, 0.0), LengthConstraintType.NONE\n        );\n                \n        BlockContainer container = new BlockContainer(new BorderArrangement());\n        BufferedImage image = new BufferedImage(\n            200, 100, BufferedImage.TYPE_INT_RGB\n        );\n        Graphics2D g2 = image.createGraphics();\n        \n        // TBLRC\n        // 00001 - center item only\n        container.add(new EmptyBlock(5.0, 6.0));\n        Size2D size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(6.0, size.height, EPSILON);\n        \n        container.clear();\n        container.add(new EmptyBlock(15.0, 16.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n\n        // TBLRC\n        // 00010 - right item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00011 - right and center items\n        container.clear();\n        container.add(new EmptyBlock(7.0, 20.0));\n        container.add(new EmptyBlock(8.0, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00100 - left item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00101 - left and center items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00110 - left and right items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00111 - left, right and center items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(5.4, 3.2), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01000 - bottom item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01001 - bottom and center only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01010 - bottom and right only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01011 - bottom, right and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01100\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01101 - bottom, left and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01110 - bottom. left and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01111\n        container.clear();\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(14.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 10000 - top item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10001 - top and center only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n                \n        // TBLRC\n        // 10010 - right and top only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10011 - top, right and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n\n        // TBLRC\n        // 10100 - top and left only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10101 - top, left and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10110 - top, left and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10111\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(12.0, size.height, EPSILON);\n\n        // TBLRC\n        // 11000 - top and bottom only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 11001\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n        \n        // TBLRC\n        // 11010 - top, bottom and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n                \n        // TBLRC\n        // 11011\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11100\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n\n        // TBLRC\n        // 11101\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11110\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(14.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11111 - all\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n\n        // TBLRC\n        // 00000 - no items\n        container.clear();\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(0.0, size.height, EPSILON);\n        \n    }",
        "begin_line": 496,
        "end_line": 817,
        "comment": "\n     * Run some checks on sizing when there is a fixed width constraint.\n     ",
        "child_ranges": [
            "(line 497,col 9)-(line 500,col 10)",
            "(line 502,col 9)-(line 502,col 79)",
            "(line 503,col 9)-(line 505,col 10)",
            "(line 506,col 9)-(line 506,col 47)",
            "(line 510,col 9)-(line 510,col 48)",
            "(line 511,col 9)-(line 511,col 56)",
            "(line 512,col 9)-(line 512,col 48)",
            "(line 513,col 9)-(line 513,col 48)",
            "(line 515,col 9)-(line 515,col 26)",
            "(line 516,col 9)-(line 516,col 50)",
            "(line 517,col 9)-(line 517,col 49)",
            "(line 518,col 9)-(line 518,col 48)",
            "(line 519,col 9)-(line 519,col 49)",
            "(line 523,col 9)-(line 523,col 26)",
            "(line 524,col 9)-(line 524,col 71)",
            "(line 525,col 9)-(line 525,col 49)",
            "(line 526,col 9)-(line 526,col 48)",
            "(line 527,col 9)-(line 527,col 49)",
            "(line 531,col 9)-(line 531,col 26)",
            "(line 532,col 9)-(line 532,col 49)",
            "(line 533,col 9)-(line 533,col 70)",
            "(line 534,col 9)-(line 534,col 49)",
            "(line 535,col 9)-(line 535,col 48)",
            "(line 536,col 9)-(line 536,col 49)",
            "(line 540,col 9)-(line 540,col 26)",
            "(line 541,col 9)-(line 541,col 70)",
            "(line 542,col 9)-(line 542,col 49)",
            "(line 543,col 9)-(line 543,col 48)",
            "(line 544,col 9)-(line 544,col 49)",
            "(line 548,col 9)-(line 548,col 26)",
            "(line 549,col 9)-(line 549,col 50)",
            "(line 550,col 9)-(line 550,col 70)",
            "(line 551,col 9)-(line 551,col 49)",
            "(line 552,col 9)-(line 552,col 48)",
            "(line 553,col 9)-(line 553,col 49)",
            "(line 557,col 9)-(line 557,col 26)",
            "(line 558,col 9)-(line 558,col 71)",
            "(line 559,col 9)-(line 559,col 70)",
            "(line 560,col 9)-(line 560,col 49)",
            "(line 561,col 9)-(line 561,col 48)",
            "(line 562,col 9)-(line 562,col 49)",
            "(line 566,col 9)-(line 566,col 26)",
            "(line 567,col 9)-(line 567,col 50)",
            "(line 568,col 9)-(line 568,col 70)",
            "(line 569,col 9)-(line 569,col 69)",
            "(line 570,col 9)-(line 570,col 49)",
            "(line 571,col 9)-(line 571,col 48)",
            "(line 572,col 9)-(line 572,col 49)",
            "(line 576,col 9)-(line 576,col 26)",
            "(line 577,col 9)-(line 577,col 72)",
            "(line 578,col 9)-(line 578,col 49)",
            "(line 579,col 9)-(line 579,col 48)",
            "(line 580,col 9)-(line 580,col 49)",
            "(line 584,col 9)-(line 584,col 26)",
            "(line 585,col 9)-(line 585,col 50)",
            "(line 586,col 9)-(line 586,col 72)",
            "(line 587,col 9)-(line 587,col 49)",
            "(line 588,col 9)-(line 588,col 48)",
            "(line 589,col 9)-(line 589,col 49)",
            "(line 593,col 9)-(line 593,col 26)",
            "(line 594,col 9)-(line 594,col 71)",
            "(line 595,col 9)-(line 595,col 72)",
            "(line 596,col 9)-(line 596,col 49)",
            "(line 597,col 9)-(line 597,col 48)",
            "(line 598,col 9)-(line 598,col 49)",
            "(line 602,col 9)-(line 602,col 26)",
            "(line 603,col 9)-(line 603,col 50)",
            "(line 604,col 9)-(line 604,col 71)",
            "(line 605,col 9)-(line 605,col 72)",
            "(line 606,col 9)-(line 606,col 49)",
            "(line 607,col 9)-(line 607,col 48)",
            "(line 608,col 9)-(line 608,col 49)",
            "(line 612,col 9)-(line 612,col 26)",
            "(line 613,col 9)-(line 613,col 70)",
            "(line 614,col 9)-(line 614,col 72)",
            "(line 615,col 9)-(line 615,col 49)",
            "(line 616,col 9)-(line 616,col 48)",
            "(line 617,col 9)-(line 617,col 49)",
            "(line 621,col 9)-(line 621,col 26)",
            "(line 622,col 9)-(line 622,col 50)",
            "(line 623,col 9)-(line 623,col 70)",
            "(line 624,col 9)-(line 624,col 72)",
            "(line 625,col 9)-(line 625,col 49)",
            "(line 626,col 9)-(line 626,col 48)",
            "(line 627,col 9)-(line 627,col 49)",
            "(line 631,col 9)-(line 631,col 26)",
            "(line 632,col 9)-(line 632,col 71)",
            "(line 633,col 9)-(line 633,col 70)",
            "(line 634,col 9)-(line 634,col 72)",
            "(line 635,col 9)-(line 635,col 49)",
            "(line 636,col 9)-(line 636,col 48)",
            "(line 637,col 9)-(line 637,col 49)",
            "(line 641,col 9)-(line 641,col 26)",
            "(line 642,col 9)-(line 642,col 70)",
            "(line 643,col 9)-(line 643,col 68)",
            "(line 644,col 9)-(line 644,col 69)",
            "(line 645,col 9)-(line 645,col 49)",
            "(line 646,col 9)-(line 646,col 49)",
            "(line 647,col 9)-(line 647,col 48)",
            "(line 648,col 9)-(line 648,col 49)",
            "(line 652,col 9)-(line 652,col 26)",
            "(line 653,col 9)-(line 653,col 69)",
            "(line 654,col 9)-(line 654,col 49)",
            "(line 655,col 9)-(line 655,col 48)",
            "(line 656,col 9)-(line 656,col 49)",
            "(line 660,col 9)-(line 660,col 26)",
            "(line 661,col 9)-(line 661,col 50)",
            "(line 662,col 9)-(line 662,col 69)",
            "(line 663,col 9)-(line 663,col 49)",
            "(line 664,col 9)-(line 664,col 48)",
            "(line 665,col 9)-(line 665,col 49)",
            "(line 669,col 9)-(line 669,col 26)",
            "(line 670,col 9)-(line 670,col 71)",
            "(line 671,col 9)-(line 671,col 69)",
            "(line 672,col 9)-(line 672,col 49)",
            "(line 673,col 9)-(line 673,col 48)",
            "(line 674,col 9)-(line 674,col 49)",
            "(line 678,col 9)-(line 678,col 26)",
            "(line 679,col 9)-(line 679,col 50)",
            "(line 680,col 9)-(line 680,col 69)",
            "(line 681,col 9)-(line 681,col 71)",
            "(line 682,col 9)-(line 682,col 49)",
            "(line 683,col 9)-(line 683,col 48)",
            "(line 684,col 9)-(line 684,col 49)",
            "(line 688,col 9)-(line 688,col 26)",
            "(line 689,col 9)-(line 689,col 70)",
            "(line 690,col 9)-(line 690,col 69)",
            "(line 691,col 9)-(line 691,col 49)",
            "(line 692,col 9)-(line 692,col 48)",
            "(line 693,col 9)-(line 693,col 49)",
            "(line 697,col 9)-(line 697,col 26)",
            "(line 698,col 9)-(line 698,col 50)",
            "(line 699,col 9)-(line 699,col 69)",
            "(line 700,col 9)-(line 700,col 70)",
            "(line 701,col 9)-(line 701,col 49)",
            "(line 702,col 9)-(line 702,col 48)",
            "(line 703,col 9)-(line 703,col 49)",
            "(line 707,col 9)-(line 707,col 26)",
            "(line 708,col 9)-(line 708,col 71)",
            "(line 709,col 9)-(line 709,col 69)",
            "(line 710,col 9)-(line 710,col 70)",
            "(line 711,col 9)-(line 711,col 49)",
            "(line 712,col 9)-(line 712,col 48)",
            "(line 713,col 9)-(line 713,col 49)",
            "(line 717,col 9)-(line 717,col 26)",
            "(line 718,col 9)-(line 718,col 67)",
            "(line 719,col 9)-(line 719,col 68)",
            "(line 720,col 9)-(line 720,col 69)",
            "(line 721,col 9)-(line 721,col 49)",
            "(line 722,col 9)-(line 722,col 49)",
            "(line 723,col 9)-(line 723,col 48)",
            "(line 724,col 9)-(line 724,col 49)",
            "(line 728,col 9)-(line 728,col 26)",
            "(line 729,col 9)-(line 729,col 69)",
            "(line 730,col 9)-(line 730,col 72)",
            "(line 731,col 9)-(line 731,col 49)",
            "(line 732,col 9)-(line 732,col 48)",
            "(line 733,col 9)-(line 733,col 49)",
            "(line 737,col 9)-(line 737,col 26)",
            "(line 738,col 9)-(line 738,col 50)",
            "(line 739,col 9)-(line 739,col 69)",
            "(line 740,col 9)-(line 740,col 72)",
            "(line 741,col 9)-(line 741,col 49)",
            "(line 742,col 9)-(line 742,col 48)",
            "(line 743,col 9)-(line 743,col 49)",
            "(line 747,col 9)-(line 747,col 26)",
            "(line 748,col 9)-(line 748,col 71)",
            "(line 749,col 9)-(line 749,col 69)",
            "(line 750,col 9)-(line 750,col 72)",
            "(line 751,col 9)-(line 751,col 49)",
            "(line 752,col 9)-(line 752,col 48)",
            "(line 753,col 9)-(line 753,col 49)",
            "(line 757,col 9)-(line 757,col 26)",
            "(line 758,col 9)-(line 758,col 67)",
            "(line 759,col 9)-(line 759,col 70)",
            "(line 760,col 9)-(line 760,col 69)",
            "(line 761,col 9)-(line 761,col 49)",
            "(line 762,col 9)-(line 762,col 49)",
            "(line 763,col 9)-(line 763,col 48)",
            "(line 764,col 9)-(line 764,col 49)",
            "(line 768,col 9)-(line 768,col 26)",
            "(line 769,col 9)-(line 769,col 70)",
            "(line 770,col 9)-(line 770,col 69)",
            "(line 771,col 9)-(line 771,col 72)",
            "(line 772,col 9)-(line 772,col 49)",
            "(line 773,col 9)-(line 773,col 48)",
            "(line 774,col 9)-(line 774,col 49)",
            "(line 778,col 9)-(line 778,col 26)",
            "(line 779,col 9)-(line 779,col 67)",
            "(line 780,col 9)-(line 780,col 70)",
            "(line 781,col 9)-(line 781,col 68)",
            "(line 782,col 9)-(line 782,col 49)",
            "(line 783,col 9)-(line 783,col 49)",
            "(line 784,col 9)-(line 784,col 48)",
            "(line 785,col 9)-(line 785,col 49)",
            "(line 789,col 9)-(line 789,col 26)",
            "(line 790,col 9)-(line 790,col 67)",
            "(line 791,col 9)-(line 791,col 70)",
            "(line 792,col 9)-(line 792,col 68)",
            "(line 793,col 9)-(line 793,col 69)",
            "(line 794,col 9)-(line 794,col 49)",
            "(line 795,col 9)-(line 795,col 48)",
            "(line 796,col 9)-(line 796,col 49)",
            "(line 800,col 9)-(line 800,col 26)",
            "(line 801,col 9)-(line 801,col 67)",
            "(line 802,col 9)-(line 802,col 70)",
            "(line 803,col 9)-(line 803,col 68)",
            "(line 804,col 9)-(line 804,col 69)",
            "(line 805,col 9)-(line 805,col 49)",
            "(line 806,col 9)-(line 806,col 49)",
            "(line 807,col 9)-(line 807,col 48)",
            "(line 808,col 9)-(line 808,col 49)",
            "(line 812,col 9)-(line 812,col 26)",
            "(line 813,col 9)-(line 813,col 49)",
            "(line 814,col 9)-(line 814,col 48)",
            "(line 815,col 9)-(line 815,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.ColumnArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/ColumnArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.ColumnArrangementTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ColumnArrangementTests.class);\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.ColumnArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/ColumnArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.ColumnArrangementTests.ColumnArrangementTests(java.lang.String)",
        "snippet": "    public ColumnArrangementTests(String name) {\n        super(name);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.ColumnArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/ColumnArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.ColumnArrangementTests.testEquals()",
        "snippet": "    public void testEquals() {\n        ColumnArrangement c1 = new ColumnArrangement(HorizontalAlignment.LEFT, \n                VerticalAlignment.TOP, 1.0, 2.0);\n        ColumnArrangement c2 = new ColumnArrangement(HorizontalAlignment.LEFT, \n                VerticalAlignment.TOP, 1.0, 2.0);\n        assertTrue(c1.equals(c2));\n        assertTrue(c2.equals(c1));\n\n        c1 = new ColumnArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.TOP, 1.0, 2.0);\n        assertFalse(c1.equals(c2));\n        c2 = new ColumnArrangement(HorizontalAlignment.RIGHT,\n                VerticalAlignment.TOP, 1.0, 2.0);\n        assertTrue(c1.equals(c2));\n\n        c1 = new ColumnArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.BOTTOM, 1.0, 2.0);\n        assertFalse(c1.equals(c2));\n        c2 = new ColumnArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.BOTTOM, 1.0, 2.0);\n        assertTrue(c1.equals(c2));\n    \n        c1 = new ColumnArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.BOTTOM, 1.1, 2.0);\n        assertFalse(c1.equals(c2));\n        c2 = new ColumnArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.BOTTOM, 1.1, 2.0);\n        assertTrue(c1.equals(c2));\n        \n        c1 = new ColumnArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.BOTTOM, 1.1, 2.2);\n        assertFalse(c1.equals(c2));\n        c2 = new ColumnArrangement(HorizontalAlignment.RIGHT, \n                VerticalAlignment.BOTTOM, 1.1, 2.2);\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 86,
        "end_line": 121,
        "comment": "\n     * Confirm that the equals() method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 88,col 49)",
            "(line 89,col 9)-(line 90,col 49)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 95,col 49)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 98,col 49)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 102,col 52)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 105,col 52)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 108,col 9)-(line 109,col 52)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 112,col 52)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 115,col 9)-(line 116,col 52)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 119,col 52)",
            "(line 120,col 9)-(line 120,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.ColumnArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/ColumnArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.ColumnArrangementTests.testCloning()",
        "snippet": "    public void testCloning() {\n        FlowArrangement f1 = new FlowArrangement();\n        assertFalse(f1 instanceof Cloneable);\n    }",
        "begin_line": 126,
        "end_line": 129,
        "comment": "\n     * Immutable - cloning is not necessary.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 51)",
            "(line 128,col 9)-(line 128,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.ColumnArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/ColumnArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.ColumnArrangementTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        FlowArrangement f1 = new FlowArrangement(HorizontalAlignment.LEFT, \n                VerticalAlignment.TOP, 1.0, 2.0);\n        FlowArrangement f2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(f1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            f2 = (FlowArrangement) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(f1, f2);\n    }",
        "begin_line": 134,
        "end_line": 153,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 136,col 49)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 138,col 9)-(line 151,col 9)",
            "(line 152,col 9)-(line 152,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.LabelBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/LabelBlockTests.java",
        "signature": "org.jfree.chart.block.junit.LabelBlockTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LabelBlockTests.class);\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.LabelBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/LabelBlockTests.java",
        "signature": "org.jfree.chart.block.junit.LabelBlockTests.LabelBlockTests(java.lang.String)",
        "snippet": "    public LabelBlockTests(String name) {\n        super(name);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.LabelBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/LabelBlockTests.java",
        "signature": "org.jfree.chart.block.junit.LabelBlockTests.testEquals()",
        "snippet": "    public void testEquals() {\n        LabelBlock b1 = new LabelBlock(\"ABC\", new Font(\"Dialog\", \n                Font.PLAIN, 12), Color.red);\n        LabelBlock b2 = new LabelBlock(\"ABC\", new Font(\"Dialog\", \n                Font.PLAIN, 12), Color.red);\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b2));\n        \n        b1 = new LabelBlock(\"XYZ\", new Font(\"Dialog\", Font.PLAIN, 12), \n                Color.red);\n        assertFalse(b1.equals(b2));\n        b2 = new LabelBlock(\"XYZ\", new Font(\"Dialog\", Font.PLAIN, 12), \n                Color.red);\n        assertTrue(b1.equals(b2));\n\n        b1 = new LabelBlock(\"XYZ\", new Font(\"Dialog\", Font.BOLD, 12), \n                Color.red);\n        assertFalse(b1.equals(b2));\n        b2 = new LabelBlock(\"XYZ\", new Font(\"Dialog\", Font.BOLD, 12), \n                Color.red);\n        assertTrue(b1.equals(b2));    \n\n        b1 = new LabelBlock(\"XYZ\", new Font(\"Dialog\", Font.BOLD, 12), \n                Color.blue);\n        assertFalse(b1.equals(b2));\n        b2 = new LabelBlock(\"XYZ\", new Font(\"Dialog\", Font.BOLD, 12), \n                Color.blue);\n        assertTrue(b1.equals(b2));\n        \n        b1.setToolTipText(\"Tooltip\");\n        assertFalse(b1.equals(b2));\n        b2.setToolTipText(\"Tooltip\");\n        assertTrue(b1.equals(b2));\n        \n        b1.setURLText(\"URL\");\n        assertFalse(b1.equals(b2));\n        b2.setURLText(\"URL\");\n        assertTrue(b1.equals(b2));\n    }",
        "begin_line": 86,
        "end_line": 124,
        "comment": "\n     * Confirm that the equals() method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 88,col 44)",
            "(line 89,col 9)-(line 90,col 44)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 95,col 27)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 98,col 27)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 102,col 27)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 105,col 27)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 108,col 9)-(line 109,col 28)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 112,col 28)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 115,col 9)-(line 115,col 37)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 117,col 37)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 120,col 9)-(line 120,col 29)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 29)",
            "(line 123,col 9)-(line 123,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.LabelBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/LabelBlockTests.java",
        "signature": "org.jfree.chart.block.junit.LabelBlockTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LabelBlock b1 = new LabelBlock(\"ABC\", new Font(\"Dialog\", \n                Font.PLAIN, 12), Color.red);\n        LabelBlock b2 = null;\n        \n        try {\n            b2 = (LabelBlock) b1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(b1 != b2);\n        assertTrue(b1.getClass() == b2.getClass());\n        assertTrue(b1.equals(b2));\n    }",
        "begin_line": 129,
        "end_line": 143,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 130,col 9)-(line 131,col 44)",
            "(line 132,col 9)-(line 132,col 29)",
            "(line 134,col 9)-(line 139,col 9)",
            "(line 140,col 9)-(line 140,col 29)",
            "(line 141,col 9)-(line 141,col 51)",
            "(line 142,col 9)-(line 142,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.LabelBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/LabelBlockTests.java",
        "signature": "org.jfree.chart.block.junit.LabelBlockTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        GradientPaint gp = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.blue);\n        LabelBlock b1 = new LabelBlock(\"ABC\", new Font(\"Dialog\", \n                Font.PLAIN, 12), gp);\n        LabelBlock b2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(b1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            b2 = (LabelBlock) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(b1, b2);\n    }",
        "begin_line": 148,
        "end_line": 169,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 149,col 9)-(line 150,col 28)",
            "(line 151,col 9)-(line 152,col 37)",
            "(line 153,col 9)-(line 153,col 29)",
            "(line 154,col 9)-(line 167,col 9)",
            "(line 168,col 9)-(line 168,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.EmptyBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/EmptyBlockTests.java",
        "signature": "org.jfree.chart.block.junit.EmptyBlockTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(EmptyBlockTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.EmptyBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/EmptyBlockTests.java",
        "signature": "org.jfree.chart.block.junit.EmptyBlockTests.EmptyBlockTests(java.lang.String)",
        "snippet": "    public EmptyBlockTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.EmptyBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/EmptyBlockTests.java",
        "signature": "org.jfree.chart.block.junit.EmptyBlockTests.testEquals()",
        "snippet": "    public void testEquals() {\n        EmptyBlock b1 = new EmptyBlock(1.0, 2.0);\n        EmptyBlock b2 = new EmptyBlock(1.0, 2.0);\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b2));\n        \n        b1 = new EmptyBlock(1.1, 2.0);\n        assertFalse(b1.equals(b2));\n        b2 = new EmptyBlock(1.1, 2.0);\n        assertTrue(b1.equals(b2));\n\n        b1 = new EmptyBlock(1.1, 2.2);\n        assertFalse(b1.equals(b2));\n        b2 = new EmptyBlock(1.1, 2.2);\n        assertTrue(b1.equals(b2));    \n    }",
        "begin_line": 82,
        "end_line": 97,
        "comment": "\n     * Confirm that the equals() method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 49)",
            "(line 84,col 9)-(line 84,col 49)",
            "(line 85,col 9)-(line 85,col 34)",
            "(line 86,col 9)-(line 86,col 34)",
            "(line 88,col 9)-(line 88,col 38)",
            "(line 89,col 9)-(line 89,col 35)",
            "(line 90,col 9)-(line 90,col 38)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 93,col 9)-(line 93,col 38)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 95,col 38)",
            "(line 96,col 9)-(line 96,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.EmptyBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/EmptyBlockTests.java",
        "signature": "org.jfree.chart.block.junit.EmptyBlockTests.testCloning()",
        "snippet": "    public void testCloning() {\n        EmptyBlock b1 = new EmptyBlock(1.0, 2.0);\n        EmptyBlock b2 = null;\n        \n        try {\n            b2 = (EmptyBlock) b1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            fail(e.toString());\n        }\n        assertTrue(b1 != b2);\n        assertTrue(b1.getClass() == b2.getClass());\n        assertTrue(b1.equals(b2));\n    }",
        "begin_line": 102,
        "end_line": 115,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 49)",
            "(line 104,col 9)-(line 104,col 29)",
            "(line 106,col 9)-(line 111,col 9)",
            "(line 112,col 9)-(line 112,col 29)",
            "(line 113,col 9)-(line 113,col 51)",
            "(line 114,col 9)-(line 114,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.EmptyBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/EmptyBlockTests.java",
        "signature": "org.jfree.chart.block.junit.EmptyBlockTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        EmptyBlock b1 = new EmptyBlock(1.0, 2.0);\n        EmptyBlock b2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(b1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            b2 = (EmptyBlock) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(b1, b2);\n    }",
        "begin_line": 120,
        "end_line": 138,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 49)",
            "(line 122,col 9)-(line 122,col 29)",
            "(line 123,col 9)-(line 136,col 9)",
            "(line 137,col 9)-(line 137,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.GridArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/GridArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.GridArrangementTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(GridArrangementTests.class);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.GridArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/GridArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.GridArrangementTests.GridArrangementTests(java.lang.String)",
        "snippet": "    public GridArrangementTests(String name) {\n        super(name);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.GridArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/GridArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.GridArrangementTests.testEquals()",
        "snippet": "    public void testEquals() {\n        GridArrangement f1 = new GridArrangement(11, 22);\n        GridArrangement f2 = new GridArrangement(11, 22);\n        assertTrue(f1.equals(f2));\n        assertTrue(f2.equals(f1));\n\n        f1 = new GridArrangement(33, 22);\n        assertFalse(f1.equals(f2));\n        f2 = new GridArrangement(33, 22);\n        assertTrue(f1.equals(f2));\n\n        f1 = new GridArrangement(33, 44);\n        assertFalse(f1.equals(f2));\n        f2 = new GridArrangement(33, 44);\n        assertTrue(f1.equals(f2));   \n    }",
        "begin_line": 89,
        "end_line": 104,
        "comment": "\n     * Confirm that the equals() method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 57)",
            "(line 91,col 9)-(line 91,col 57)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 95,col 9)-(line 95,col 41)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 41)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 100,col 9)-(line 100,col 41)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 41)",
            "(line 103,col 9)-(line 103,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.GridArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/GridArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.GridArrangementTests.testCloning()",
        "snippet": "    public void testCloning() {\n        GridArrangement f1 = new GridArrangement(1, 2);\n        assertFalse(f1 instanceof Cloneable);\n    }",
        "begin_line": 109,
        "end_line": 112,
        "comment": "\n     * Immutable - cloning is not necessary.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 55)",
            "(line 111,col 9)-(line 111,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.GridArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/GridArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.GridArrangementTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        GridArrangement f1 = new GridArrangement(33, 44);\n        GridArrangement f2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(f1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            f2 = (GridArrangement) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(f1, f2);\n    }",
        "begin_line": 117,
        "end_line": 136,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 57)",
            "(line 119,col 9)-(line 119,col 34)",
            "(line 120,col 9)-(line 134,col 9)",
            "(line 135,col 9)-(line 135,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.GridArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/GridArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.GridArrangementTests.testNN()",
        "snippet": "    public void testNN() {\n        BlockContainer c = createTestContainer1();\n        Size2D s = c.arrange(null, RectangleConstraint.NONE);\n        assertEquals(90.0, s.width, EPSILON);\n        assertEquals(33.0, s.height, EPSILON);\n    }",
        "begin_line": 143,
        "end_line": 148,
        "comment": "\n     * Test arrangement with no constraints.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 50)",
            "(line 145,col 9)-(line 145,col 61)",
            "(line 146,col 9)-(line 146,col 45)",
            "(line 147,col 9)-(line 147,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.GridArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/GridArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.GridArrangementTests.testFN()",
        "snippet": "    public void testFN() {\n        BlockContainer c = createTestContainer1();\n        RectangleConstraint constraint = new RectangleConstraint(\n            100.0, null, LengthConstraintType.FIXED, \n            0.0, null, LengthConstraintType.NONE\n        );\n        Size2D s = c.arrange(null, constraint);\n        assertEquals(100.0, s.width, EPSILON);\n        assertEquals(33.0, s.height, EPSILON);\n    }",
        "begin_line": 153,
        "end_line": 162,
        "comment": "\n     * Test arrangement with no constraints.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 50)",
            "(line 155,col 9)-(line 158,col 10)",
            "(line 159,col 9)-(line 159,col 47)",
            "(line 160,col 9)-(line 160,col 46)",
            "(line 161,col 9)-(line 161,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.GridArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/GridArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.GridArrangementTests.createTestContainer1()",
        "snippet": "    private BlockContainer createTestContainer1() {\n        Block b1 = new EmptyBlock(10, 11);\n        Block b2 = new EmptyBlock(20, 22);\n        Block b3 = new EmptyBlock(30, 33);\n        BlockContainer result = new BlockContainer(new GridArrangement(1, 3));\n        result.add(b1);\n        result.add(b2);\n        result.add(b3);\n        return result;\n    }",
        "begin_line": 164,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 42)",
            "(line 166,col 9)-(line 166,col 42)",
            "(line 167,col 9)-(line 167,col 42)",
            "(line 168,col 9)-(line 168,col 78)",
            "(line 169,col 9)-(line 169,col 23)",
            "(line 170,col 9)-(line 170,col 23)",
            "(line 171,col 9)-(line 171,col 23)",
            "(line 172,col 9)-(line 172,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.RectangleConstraintTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/RectangleConstraintTests.java",
        "signature": "org.jfree.chart.block.junit.RectangleConstraintTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(RectangleConstraintTests.class);\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.RectangleConstraintTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/RectangleConstraintTests.java",
        "signature": "org.jfree.chart.block.junit.RectangleConstraintTests.RectangleConstraintTests(java.lang.String)",
        "snippet": "    public RectangleConstraintTests(String name) {\n        super(name);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.RectangleConstraintTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/RectangleConstraintTests.java",
        "signature": "org.jfree.chart.block.junit.RectangleConstraintTests.testCalculateConstrainedSize()",
        "snippet": "    public void testCalculateConstrainedSize() {\n        Size2D s;\n        \n        // NONE / NONE\n        RectangleConstraint c1 = RectangleConstraint.NONE;\n        s = c1.calculateConstrainedSize(new Size2D(1.2, 3.4));\n        assertEquals(s.width, 1.2, EPSILON);\n        assertEquals(s.height, 3.4, EPSILON);\n        \n        // NONE / RANGE\n        RectangleConstraint c2 = new RectangleConstraint(\n            0.0, new Range(0.0, 0.0), LengthConstraintType.NONE, \n            0.0, new Range(2.0, 3.0), LengthConstraintType.RANGE\n        );\n        s = c2.calculateConstrainedSize(new Size2D(1.2, 3.4));\n        assertEquals(s.width, 1.2, EPSILON);\n        assertEquals(s.height, 3.0, EPSILON);\n\n        // NONE / FIXED\n        RectangleConstraint c3 = new RectangleConstraint(\n            0.0, null, LengthConstraintType.NONE, \n            9.9, null, LengthConstraintType.FIXED\n        );\n        s = c3.calculateConstrainedSize(new Size2D(1.2, 3.4));\n        assertEquals(s.width, 1.2, EPSILON);\n        assertEquals(s.height, 9.9, EPSILON);\n\n        // RANGE / NONE\n        RectangleConstraint c4 = new RectangleConstraint(\n            0.0, new Range(2.0, 3.0), LengthConstraintType.RANGE, \n            0.0, new Range(0.0, 0.0), LengthConstraintType.NONE\n        );\n        s = c4.calculateConstrainedSize(new Size2D(1.2, 3.4));\n        assertEquals(s.width, 2.0, EPSILON);\n        assertEquals(s.height, 3.4, EPSILON);\n        \n        // RANGE / RANGE\n        RectangleConstraint c5 = new RectangleConstraint(\n            0.0, new Range(2.0, 3.0), LengthConstraintType.RANGE, \n            0.0, new Range(2.0, 3.0), LengthConstraintType.RANGE\n        );\n        s = c5.calculateConstrainedSize(new Size2D(1.2, 3.4));\n        assertEquals(s.width, 2.0, EPSILON);\n        assertEquals(s.height, 3.0, EPSILON);\n\n        // RANGE / FIXED\n        RectangleConstraint c6 = new RectangleConstraint(\n            0.0, null, LengthConstraintType.NONE, \n            9.9, null, LengthConstraintType.FIXED\n        );\n        s = c6.calculateConstrainedSize(new Size2D(1.2, 3.4));\n        assertEquals(s.width, 1.2, EPSILON);\n        assertEquals(s.height, 9.9, EPSILON);\n        \n        // FIXED / NONE\n        RectangleConstraint c7 = RectangleConstraint.NONE;\n        s = c7.calculateConstrainedSize(new Size2D(1.2, 3.4));\n        assertEquals(s.width, 1.2, EPSILON);\n        assertEquals(s.height, 3.4, EPSILON);\n        \n        // FIXED / RANGE\n        RectangleConstraint c8 = new RectangleConstraint(\n            0.0, new Range(0.0, 0.0), LengthConstraintType.NONE, \n            0.0, new Range(2.0, 3.0), LengthConstraintType.RANGE\n        );\n        s = c8.calculateConstrainedSize(new Size2D(1.2, 3.4));\n        assertEquals(s.width, 1.2, EPSILON);\n        assertEquals(s.height, 3.0, EPSILON);\n\n        // FIXED / FIXED\n        RectangleConstraint c9 = new RectangleConstraint(\n            0.0, null, LengthConstraintType.NONE, \n            9.9, null, LengthConstraintType.FIXED\n        );\n        s = c9.calculateConstrainedSize(new Size2D(1.2, 3.4));\n        assertEquals(s.width, 1.2, EPSILON);\n        assertEquals(s.height, 9.9, EPSILON);\n       \n    }",
        "begin_line": 81,
        "end_line": 159,
        "comment": "\n     * Run some checks on the constrained size calculation.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 17)",
            "(line 85,col 9)-(line 85,col 58)",
            "(line 86,col 9)-(line 86,col 62)",
            "(line 87,col 9)-(line 87,col 44)",
            "(line 88,col 9)-(line 88,col 45)",
            "(line 91,col 9)-(line 94,col 10)",
            "(line 95,col 9)-(line 95,col 62)",
            "(line 96,col 9)-(line 96,col 44)",
            "(line 97,col 9)-(line 97,col 45)",
            "(line 100,col 9)-(line 103,col 10)",
            "(line 104,col 9)-(line 104,col 62)",
            "(line 105,col 9)-(line 105,col 44)",
            "(line 106,col 9)-(line 106,col 45)",
            "(line 109,col 9)-(line 112,col 10)",
            "(line 113,col 9)-(line 113,col 62)",
            "(line 114,col 9)-(line 114,col 44)",
            "(line 115,col 9)-(line 115,col 45)",
            "(line 118,col 9)-(line 121,col 10)",
            "(line 122,col 9)-(line 122,col 62)",
            "(line 123,col 9)-(line 123,col 44)",
            "(line 124,col 9)-(line 124,col 45)",
            "(line 127,col 9)-(line 130,col 10)",
            "(line 131,col 9)-(line 131,col 62)",
            "(line 132,col 9)-(line 132,col 44)",
            "(line 133,col 9)-(line 133,col 45)",
            "(line 136,col 9)-(line 136,col 58)",
            "(line 137,col 9)-(line 137,col 62)",
            "(line 138,col 9)-(line 138,col 44)",
            "(line 139,col 9)-(line 139,col 45)",
            "(line 142,col 9)-(line 145,col 10)",
            "(line 146,col 9)-(line 146,col 62)",
            "(line 147,col 9)-(line 147,col 44)",
            "(line 148,col 9)-(line 148,col 45)",
            "(line 151,col 9)-(line 154,col 10)",
            "(line 155,col 9)-(line 155,col 62)",
            "(line 156,col 9)-(line 156,col 44)",
            "(line 157,col 9)-(line 157,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BlockContainerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BlockContainerTests.java",
        "signature": "org.jfree.chart.block.junit.BlockContainerTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BlockContainerTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BlockContainerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BlockContainerTests.java",
        "signature": "org.jfree.chart.block.junit.BlockContainerTests.BlockContainerTests(java.lang.String)",
        "snippet": "    public BlockContainerTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BlockContainerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BlockContainerTests.java",
        "signature": "org.jfree.chart.block.junit.BlockContainerTests.testEquals()",
        "snippet": "    public void testEquals() {\n        BlockContainer c1 = new BlockContainer(new FlowArrangement());\n        BlockContainer c2 = new BlockContainer(new FlowArrangement());\n        assertTrue(c1.equals(c2));\n        assertTrue(c2.equals(c2));\n        \n        c1.setArrangement(new ColumnArrangement());\n        assertFalse(c1.equals(c2));\n        c2.setArrangement(new ColumnArrangement());\n        assertTrue(c1.equals(c2));\n        \n        c1.add(new EmptyBlock(1.2, 3.4));\n        assertFalse(c1.equals(c2));\n        c2.add(new EmptyBlock(1.2, 3.4));\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 85,
        "end_line": 100,
        "comment": "\n     * Confirm that the equals() method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 70)",
            "(line 87,col 9)-(line 87,col 70)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 91,col 9)-(line 91,col 51)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 51)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 96,col 41)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 41)",
            "(line 99,col 9)-(line 99,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BlockContainerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BlockContainerTests.java",
        "signature": "org.jfree.chart.block.junit.BlockContainerTests.testCloning()",
        "snippet": "    public void testCloning() {\n        BlockContainer c1 = new BlockContainer(new FlowArrangement());\n        c1.add(new EmptyBlock(1.2, 3.4));\n        \n        BlockContainer c2 = null;\n        \n        try {\n            c2 = (BlockContainer) c1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 105,
        "end_line": 120,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 70)",
            "(line 107,col 9)-(line 107,col 41)",
            "(line 109,col 9)-(line 109,col 33)",
            "(line 111,col 9)-(line 116,col 9)",
            "(line 117,col 9)-(line 117,col 29)",
            "(line 118,col 9)-(line 118,col 51)",
            "(line 119,col 9)-(line 119,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BlockContainerTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BlockContainerTests.java",
        "signature": "org.jfree.chart.block.junit.BlockContainerTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        BlockContainer c1 = new BlockContainer();\n        c1.add(new EmptyBlock(1.2, 3.4));\n        BlockContainer c2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            c2 = (BlockContainer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(c1, c2);\n    }",
        "begin_line": 125,
        "end_line": 145,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 49)",
            "(line 127,col 9)-(line 127,col 41)",
            "(line 128,col 9)-(line 128,col 33)",
            "(line 129,col 9)-(line 143,col 9)",
            "(line 144,col 9)-(line 144,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.ColorBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/ColorBlockTests.java",
        "signature": "org.jfree.chart.block.junit.ColorBlockTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ColorBlockTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.ColorBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/ColorBlockTests.java",
        "signature": "org.jfree.chart.block.junit.ColorBlockTests.ColorBlockTests(java.lang.String)",
        "snippet": "    public ColorBlockTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.ColorBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/ColorBlockTests.java",
        "signature": "org.jfree.chart.block.junit.ColorBlockTests.testEquals()",
        "snippet": "    public void testEquals() {\n        ColorBlock b1 = new ColorBlock(Color.red, 1.0, 2.0);\n        ColorBlock b2 = new ColorBlock(Color.red, 1.0, 2.0);\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b2));\n        \n        b1 = new ColorBlock(Color.blue, 1.0, 2.0);\n        assertFalse(b1.equals(b2));\n        b2 = new ColorBlock(Color.blue, 1.0, 2.0);\n        assertTrue(b1.equals(b2));\n        \n        b1 = new ColorBlock(Color.blue, 1.1, 2.0);\n        assertFalse(b1.equals(b2));\n        b2 = new ColorBlock(Color.blue, 1.1, 2.0);\n        assertTrue(b1.equals(b2));\n        \n        b1 = new ColorBlock(Color.blue, 1.1, 2.2);\n        assertFalse(b1.equals(b2));\n        b2 = new ColorBlock(Color.blue, 1.1, 2.2);\n        assertTrue(b1.equals(b2));\n    }",
        "begin_line": 85,
        "end_line": 105,
        "comment": "\n     * Confirm that the equals() method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 60)",
            "(line 87,col 9)-(line 87,col 60)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 91,col 9)-(line 91,col 50)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 50)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 96,col 50)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 50)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 101,col 50)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 50)",
            "(line 104,col 9)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.ColorBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/ColorBlockTests.java",
        "signature": "org.jfree.chart.block.junit.ColorBlockTests.testCloning()",
        "snippet": "    public void testCloning() {\n        GradientPaint gp = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f,\n                Color.blue);\n        Rectangle2D bounds1 = new Rectangle2D.Double(10.0, 20.0, 30.0, 40.0);\n        ColorBlock b1 = new ColorBlock(gp, 1.0, 2.0);\n        b1.setBounds(bounds1);\n        ColorBlock b2 = null;\n        \n        try {\n            b2 = (ColorBlock) b1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            fail(e.toString());\n        }\n        assertTrue(b1 != b2);\n        assertTrue(b1.getClass() == b2.getClass());\n        assertTrue(b1.equals(b2));\n        \n        // check independence\n        bounds1.setRect(1.0, 2.0, 3.0, 4.0);\n        assertFalse(b1.equals(b2));\n        b2.setBounds(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(b1.equals(b2));\n    }",
        "begin_line": 110,
        "end_line": 133,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 112,col 28)",
            "(line 113,col 9)-(line 113,col 77)",
            "(line 114,col 9)-(line 114,col 53)",
            "(line 115,col 9)-(line 115,col 30)",
            "(line 116,col 9)-(line 116,col 29)",
            "(line 118,col 9)-(line 123,col 9)",
            "(line 124,col 9)-(line 124,col 29)",
            "(line 125,col 9)-(line 125,col 51)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 129,col 9)-(line 129,col 44)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 131,col 65)",
            "(line 132,col 9)-(line 132,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.ColorBlockTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/ColorBlockTests.java",
        "signature": "org.jfree.chart.block.junit.ColorBlockTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        GradientPaint gp = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f,\n                Color.blue);\n        ColorBlock b1 = new ColorBlock(gp, 1.0, 2.0);\n        ColorBlock b2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(b1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            b2 = (ColorBlock) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(b1, b2);\n    }",
        "begin_line": 138,
        "end_line": 158,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 139,col 9)-(line 140,col 28)",
            "(line 141,col 9)-(line 141,col 53)",
            "(line 142,col 9)-(line 142,col 29)",
            "(line 143,col 9)-(line 156,col 9)",
            "(line 157,col 9)-(line 157,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/DefaultPolarItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultPolarItemRendererTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 66)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/DefaultPolarItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests.DefaultPolarItemRendererTests(java.lang.String)",
        "snippet": "    public DefaultPolarItemRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/DefaultPolarItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultPolarItemRenderer r1 = new DefaultPolarItemRenderer();\n        DefaultPolarItemRenderer r2 = new DefaultPolarItemRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setSeriesFilled(1, true);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFilled(1, true);\n        assertTrue(r1.equals(r2));\n        \n    }",
        "begin_line": 83,
        "end_line": 93,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 69)",
            "(line 85,col 9)-(line 85,col 69)",
            "(line 86,col 9)-(line 86,col 29)",
            "(line 88,col 9)-(line 88,col 36)",
            "(line 89,col 9)-(line 89,col 35)",
            "(line 90,col 9)-(line 90,col 36)",
            "(line 91,col 9)-(line 91,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/DefaultPolarItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        DefaultPolarItemRenderer r1 = new DefaultPolarItemRenderer();\n        DefaultPolarItemRenderer r2 = new DefaultPolarItemRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 98,
        "end_line": 105,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 69)",
            "(line 100,col 9)-(line 100,col 69)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 102,col 9)-(line 102,col 31)",
            "(line 103,col 9)-(line 103,col 31)",
            "(line 104,col 9)-(line 104,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/DefaultPolarItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultPolarItemRenderer r1 = new DefaultPolarItemRenderer();\n        DefaultPolarItemRenderer r2 = null;\n        try {\n            r2 = (DefaultPolarItemRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesFilled(1, true);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFilled(1, true);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 110,
        "end_line": 127,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 69)",
            "(line 112,col 9)-(line 112,col 43)",
            "(line 113,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 29)",
            "(line 120,col 9)-(line 120,col 51)",
            "(line 121,col 9)-(line 121,col 34)",
            "(line 123,col 9)-(line 123,col 36)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 125,col 36)",
            "(line 126,col 9)-(line 126,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/DefaultPolarItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        DefaultPolarItemRenderer r1 = new DefaultPolarItemRenderer();\n        DefaultPolarItemRenderer r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (DefaultPolarItemRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 132,
        "end_line": 150,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 69)",
            "(line 134,col 9)-(line 134,col 43)",
            "(line 135,col 9)-(line 148,col 9)",
            "(line 149,col 9)-(line 149,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java",
        "signature": "org.jfree.chart.renderer.junit.RendererUtilitiesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(RendererUtilitiesTests.class);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java",
        "signature": "org.jfree.chart.renderer.junit.RendererUtilitiesTests.RendererUtilitiesTests(java.lang.String)",
        "snippet": "    public RendererUtilitiesTests(String name) {\n        super(name);\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java",
        "signature": "org.jfree.chart.renderer.junit.RendererUtilitiesTests.testFindLiveItemsLowerBoundUnordered()",
        "snippet": "    public void testFindLiveItemsLowerBoundUnordered() {\n        DefaultXYDataset d = new DefaultXYDataset();\n        \n        // check a series with no items\n        d.addSeries(\"S1\", new double[][] {{}, {}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 0, 10.0, \n                11.0));\n        \n        // check a series with one item\n        d.addSeries(\"S2\", new double[][] {{1.0}, {2.0}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 1, 0.0, \n                1.1));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 1, 2.0, \n                3.3));\n        \n        // check a series with two items\n        d.addSeries(\"S3\", new double[][] {{1.0, 2.0}, {2.0, 2.0}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 0.0, \n                1.1));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 1.0, \n                2.2));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 2.0, \n                3.3));\n        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 2, 3.0, \n                4.4));\n        \n        // check a series with three items\n        d.addSeries(\"S4\", new double[][] {{1.0, 2.0, 1.5}, {2.0, 2.0, 2.0}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 0.0, \n                1.1));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 1.0, \n                2.2));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 2.0, \n                3.3));\n        assertEquals(2, RendererUtilities.findLiveItemsLowerBound(d, 3, 3.0, \n                4.4));\n        \n        // check a series with four items\n        d.addSeries(\"S5\", new double[][] {{1.0, 2.0, 1.5, 1.8}, {2.0, 2.0, \n                2.0, 2.0}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 0.0, \n                1.1));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 1.0, \n                2.2));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 2.0, \n                3.3));\n        assertEquals(3, RendererUtilities.findLiveItemsLowerBound(d, 4, 3.0, \n                4.4));\n        assertEquals(3, RendererUtilities.findLiveItemsLowerBound(d, 4, 4.0, \n                5.5));\n    }",
        "begin_line": 78,
        "end_line": 128,
        "comment": "\n     * Some checks for the findLiveItemsLowerBound() method when the dataset is\n     * unordered.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 52)",
            "(line 82,col 9)-(line 82,col 51)",
            "(line 83,col 9)-(line 84,col 23)",
            "(line 87,col 9)-(line 87,col 57)",
            "(line 88,col 9)-(line 89,col 22)",
            "(line 90,col 9)-(line 91,col 22)",
            "(line 94,col 9)-(line 94,col 67)",
            "(line 95,col 9)-(line 96,col 22)",
            "(line 97,col 9)-(line 98,col 22)",
            "(line 99,col 9)-(line 100,col 22)",
            "(line 101,col 9)-(line 102,col 22)",
            "(line 105,col 9)-(line 105,col 77)",
            "(line 106,col 9)-(line 107,col 22)",
            "(line 108,col 9)-(line 109,col 22)",
            "(line 110,col 9)-(line 111,col 22)",
            "(line 112,col 9)-(line 113,col 22)",
            "(line 116,col 9)-(line 117,col 28)",
            "(line 118,col 9)-(line 119,col 22)",
            "(line 120,col 9)-(line 121,col 22)",
            "(line 122,col 9)-(line 123,col 22)",
            "(line 124,col 9)-(line 125,col 22)",
            "(line 126,col 9)-(line 127,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java",
        "signature": "org.jfree.chart.renderer.junit.RendererUtilitiesTests.testFindLiveItemsLowerBoundAscending()",
        "snippet": "    public void testFindLiveItemsLowerBoundAscending() {\n        DefaultXYDataset d = new DefaultXYDataset() {\n            public DomainOrder getDomainOrder() {\n                // we're doing this for testing only, and make sure that we \n                // only add data in ascending order by x-value\n                return DomainOrder.ASCENDING;\n            }\n        };\n        // check a series with no items\n        d.addSeries(\"S1\", new double[][] {{}, {}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 0, 10.0, \n                11.1));\n        \n        // check a series with one item\n        d.addSeries(\"S2\", new double[][] {{1.0}, {2.0}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 1, 0.0, \n                1.1));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 1, 2.0, \n                2.2));\n        \n        // check a series with two items\n        d.addSeries(\"S3\", new double[][] {{1.0, 2.0}, {2.0, 2.0}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 0.0, \n                1.1));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 1.0, \n                2.2));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 2.0, \n                3.3));\n        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 2, 3.0, \n                4.4));\n        \n        // check a series with three items\n        d.addSeries(\"S4\", new double[][] {{1.0, 2.0, 3.0}, {2.0, 2.0, 2.0}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 0.0, \n                1.1));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 1.0, \n                2.2));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 2.0, \n                3.3));\n        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 3, 3.0, \n                4.4));\n        \n        // check a series with four items\n        d.addSeries(\"S5\", new double[][] {{1.0, 2.0, 3.0, 4.0}, {2.0, 2.0, \n                2.0, 2.0}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 0.0, \n                1.1));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 1.0, \n                2.2));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 2.0, \n                3.3));\n        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 4, 3.0, \n                4.4));\n        assertEquals(2, RendererUtilities.findLiveItemsLowerBound(d, 4, 4.0, \n                5.5));\n        \n    }",
        "begin_line": 134,
        "end_line": 190,
        "comment": "\n     * Some checks for the findLiveItemsLowerBound() method when the dataset is\n     * ASCENDING.\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 141,col 10)",
            "(line 143,col 9)-(line 143,col 51)",
            "(line 144,col 9)-(line 145,col 23)",
            "(line 148,col 9)-(line 148,col 57)",
            "(line 149,col 9)-(line 150,col 22)",
            "(line 151,col 9)-(line 152,col 22)",
            "(line 155,col 9)-(line 155,col 67)",
            "(line 156,col 9)-(line 157,col 22)",
            "(line 158,col 9)-(line 159,col 22)",
            "(line 160,col 9)-(line 161,col 22)",
            "(line 162,col 9)-(line 163,col 22)",
            "(line 166,col 9)-(line 166,col 77)",
            "(line 167,col 9)-(line 168,col 22)",
            "(line 169,col 9)-(line 170,col 22)",
            "(line 171,col 9)-(line 172,col 22)",
            "(line 173,col 9)-(line 174,col 22)",
            "(line 177,col 9)-(line 178,col 28)",
            "(line 179,col 9)-(line 180,col 22)",
            "(line 181,col 9)-(line 182,col 22)",
            "(line 183,col 9)-(line 184,col 22)",
            "(line 185,col 9)-(line 186,col 22)",
            "(line 187,col 9)-(line 188,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java",
        "signature": "org.jfree.chart.renderer.junit.RendererUtilitiesTests.Anonymous-b8e47bbf-0695-45a7-9ff2-b83fd5458c0e.getDomainOrder()",
        "snippet": "            public DomainOrder getDomainOrder() {\n                // we're doing this for testing only, and make sure that we \n                // only add data in ascending order by x-value\n                return DomainOrder.ASCENDING;\n            }",
        "begin_line": 136,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 139,col 17)-(line 139,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java",
        "signature": "org.jfree.chart.renderer.junit.RendererUtilitiesTests.testFindLiveItemsLowerBoundDescending()",
        "snippet": "    public void testFindLiveItemsLowerBoundDescending() {\n        DefaultXYDataset d = new DefaultXYDataset() {\n            public DomainOrder getDomainOrder() {\n                // we're doing this for testing only, and make sure that we \n                // only add data in ascending order by x-value\n                return DomainOrder.DESCENDING;\n            }\n        };\n        // check a series with no items\n        d.addSeries(\"S1\", new double[][] {{}, {}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 0, 10.0, \n                11.0));\n        \n        // check a series with one item\n        d.addSeries(\"S2\", new double[][] {{1.0}, {2.0}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 1, 0.0, \n                1.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 1, 1.1, \n                2.0));\n        \n        // check a series with two items\n        d.addSeries(\"S3\", new double[][] {{2.0, 1.0}, {2.0, 2.0}});\n        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 2, 0.1, \n                0.5));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 0.1, \n                1.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 1.1, \n                2.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 2.2, \n                3.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 3.3, \n                4.0));\n        \n        // check a series with three items\n        d.addSeries(\"S4\", new double[][] {{3.0, 2.0, 1.0}, {2.0, 2.0, 2.0}});\n        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 3, 0.0, \n                1.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 1.0, \n                2.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 2.0, \n                3.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 3.0, \n                4.0));\n        \n        // check a series with four items\n        d.addSeries(\"S5\", new double[][] {{4.0, 3.0, 2.0, 1.0}, {2.0, 2.0, \n                2.0, 2.0}});\n        assertEquals(3, RendererUtilities.findLiveItemsLowerBound(d, 4, 0.1, \n                0.5));\n        assertEquals(2, RendererUtilities.findLiveItemsLowerBound(d, 4, 0.1, \n                1.0));\n        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 4, 1.1, \n                2.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 2.2, \n                3.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 3.3, \n                4.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 4.4,\n                5.0));\n    }",
        "begin_line": 196,
        "end_line": 255,
        "comment": "\n     * Some checks for the findLiveItemsLowerBound() method when the dataset is\n     * DESCENDING.\n     ",
        "child_ranges": [
            "(line 197,col 9)-(line 203,col 10)",
            "(line 205,col 9)-(line 205,col 51)",
            "(line 206,col 9)-(line 207,col 23)",
            "(line 210,col 9)-(line 210,col 57)",
            "(line 211,col 9)-(line 212,col 22)",
            "(line 213,col 9)-(line 214,col 22)",
            "(line 217,col 9)-(line 217,col 67)",
            "(line 218,col 9)-(line 219,col 22)",
            "(line 220,col 9)-(line 221,col 22)",
            "(line 222,col 9)-(line 223,col 22)",
            "(line 224,col 9)-(line 225,col 22)",
            "(line 226,col 9)-(line 227,col 22)",
            "(line 230,col 9)-(line 230,col 77)",
            "(line 231,col 9)-(line 232,col 22)",
            "(line 233,col 9)-(line 234,col 22)",
            "(line 235,col 9)-(line 236,col 22)",
            "(line 237,col 9)-(line 238,col 22)",
            "(line 241,col 9)-(line 242,col 28)",
            "(line 243,col 9)-(line 244,col 22)",
            "(line 245,col 9)-(line 246,col 22)",
            "(line 247,col 9)-(line 248,col 22)",
            "(line 249,col 9)-(line 250,col 22)",
            "(line 251,col 9)-(line 252,col 22)",
            "(line 253,col 9)-(line 254,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java",
        "signature": "org.jfree.chart.renderer.junit.RendererUtilitiesTests.Anonymous-ddd287f5-91bf-4e9c-8639-e0bc2e022050.getDomainOrder()",
        "snippet": "            public DomainOrder getDomainOrder() {\n                // we're doing this for testing only, and make sure that we \n                // only add data in ascending order by x-value\n                return DomainOrder.DESCENDING;\n            }",
        "begin_line": 198,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 201,col 17)-(line 201,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java",
        "signature": "org.jfree.chart.renderer.junit.RendererUtilitiesTests.testFindLiveItemsUpperBoundUnordered()",
        "snippet": "    public void testFindLiveItemsUpperBoundUnordered() {\n        DefaultXYDataset d = new DefaultXYDataset();\n        \n        // check a series with no items\n        d.addSeries(\"S1\", new double[][] {{}, {}});\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 0, 10.0, \n                11.0));\n        \n        // check a series with one item\n        d.addSeries(\"S2\", new double[][] {{1.0}, {2.0}});\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 1, 0.0, \n                1.1));\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 1, 2.0, \n                3.3));\n        \n        // check a series with two items\n        d.addSeries(\"S3\", new double[][] {{1.0, 2.0}, {2.0, 2.0}});\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 0.0, \n                1.1));\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 1.0, \n                2.2));\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 2.0, \n                3.3));\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 3.0, \n                4.4));\n        \n        // check a series with three items\n        d.addSeries(\"S4\", new double[][] {{1.0, 2.0, 1.5}, {2.0, 2.0, 2.0}});\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 3, 0.0, \n                1.1));\n        assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 1.0, \n                2.2));\n        assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 2.0, \n                3.3));\n        assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 3.0, \n                4.4));\n        \n        // check a series with four items\n        d.addSeries(\"S5\", new double[][] {{1.0, 2.0, 1.5, 1.8}, {2.0, 2.0, \n                2.0, 2.0}});\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.0, \n                1.1));\n        assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 1.0, \n                2.2));\n        assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 2.0, \n                3.3));\n        assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 3.0, \n                4.4));\n        assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 4.0, \n                5.5));\n    }",
        "begin_line": 261,
        "end_line": 311,
        "comment": "\n     * Some checks for the findLiveItemsUpperBound() method when the dataset is\n     * unordered.\n     ",
        "child_ranges": [
            "(line 262,col 9)-(line 262,col 52)",
            "(line 265,col 9)-(line 265,col 51)",
            "(line 266,col 9)-(line 267,col 23)",
            "(line 270,col 9)-(line 270,col 57)",
            "(line 271,col 9)-(line 272,col 22)",
            "(line 273,col 9)-(line 274,col 22)",
            "(line 277,col 9)-(line 277,col 67)",
            "(line 278,col 9)-(line 279,col 22)",
            "(line 280,col 9)-(line 281,col 22)",
            "(line 282,col 9)-(line 283,col 22)",
            "(line 284,col 9)-(line 285,col 22)",
            "(line 288,col 9)-(line 288,col 77)",
            "(line 289,col 9)-(line 290,col 22)",
            "(line 291,col 9)-(line 292,col 22)",
            "(line 293,col 9)-(line 294,col 22)",
            "(line 295,col 9)-(line 296,col 22)",
            "(line 299,col 9)-(line 300,col 28)",
            "(line 301,col 9)-(line 302,col 22)",
            "(line 303,col 9)-(line 304,col 22)",
            "(line 305,col 9)-(line 306,col 22)",
            "(line 307,col 9)-(line 308,col 22)",
            "(line 309,col 9)-(line 310,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java",
        "signature": "org.jfree.chart.renderer.junit.RendererUtilitiesTests.testFindLiveItemsUpperBoundAscending()",
        "snippet": "    public void testFindLiveItemsUpperBoundAscending() {\n        DefaultXYDataset d = new DefaultXYDataset() {\n            public DomainOrder getDomainOrder() {\n                // we're doing this for testing only, and make sure that we \n                // only add data in ascending order by x-value\n                return DomainOrder.ASCENDING;\n            }\n        };\n        // check a series with no items\n        d.addSeries(\"S1\", new double[][] {{}, {}});\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 0, 10.0, \n                11.1));\n        \n        // check a series with one item\n        d.addSeries(\"S2\", new double[][] {{1.0}, {2.0}});\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 1, 0.0, \n                1.1));\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 1, 2.0, \n                2.2));\n        \n        // check a series with two items\n        d.addSeries(\"S3\", new double[][] {{1.0, 2.0}, {2.0, 2.0}});\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 0.0, \n                1.0));\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 1.0, \n                2.2));\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 2.0, \n                3.3));\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 3.0, \n                4.4));\n        \n        // check a series with three items\n        d.addSeries(\"S4\", new double[][] {{1.0, 2.0, 3.0}, {2.0, 2.0, 2.0}});\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 3, 0.0, \n                1.1));\n        assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 1.0, \n                2.2));\n        assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 2.0, \n                3.3));\n        assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 3.0, \n                4.4));\n        \n        // check a series with four items\n        d.addSeries(\"S5\", new double[][] {{1.0, 2.0, 3.0, 4.0}, {2.0, 2.0, \n                2.0, 2.0}});\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.0, \n                1.1));\n        assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 4, 1.0, \n                2.2));\n        assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 2.0, \n                3.3));\n        assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 3.0, \n                4.4));\n        assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 4.0, \n                5.5));\n        \n    }",
        "begin_line": 317,
        "end_line": 373,
        "comment": "\n     * Some checks for the findLiveItemsUpperBound() method when the dataset is\n     * ASCENDING.\n     ",
        "child_ranges": [
            "(line 318,col 9)-(line 324,col 10)",
            "(line 326,col 9)-(line 326,col 51)",
            "(line 327,col 9)-(line 328,col 23)",
            "(line 331,col 9)-(line 331,col 57)",
            "(line 332,col 9)-(line 333,col 22)",
            "(line 334,col 9)-(line 335,col 22)",
            "(line 338,col 9)-(line 338,col 67)",
            "(line 339,col 9)-(line 340,col 22)",
            "(line 341,col 9)-(line 342,col 22)",
            "(line 343,col 9)-(line 344,col 22)",
            "(line 345,col 9)-(line 346,col 22)",
            "(line 349,col 9)-(line 349,col 77)",
            "(line 350,col 9)-(line 351,col 22)",
            "(line 352,col 9)-(line 353,col 22)",
            "(line 354,col 9)-(line 355,col 22)",
            "(line 356,col 9)-(line 357,col 22)",
            "(line 360,col 9)-(line 361,col 28)",
            "(line 362,col 9)-(line 363,col 22)",
            "(line 364,col 9)-(line 365,col 22)",
            "(line 366,col 9)-(line 367,col 22)",
            "(line 368,col 9)-(line 369,col 22)",
            "(line 370,col 9)-(line 371,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java",
        "signature": "org.jfree.chart.renderer.junit.RendererUtilitiesTests.Anonymous-170ca797-7ffc-4f7a-80cc-eca40352c056.getDomainOrder()",
        "snippet": "            public DomainOrder getDomainOrder() {\n                // we're doing this for testing only, and make sure that we \n                // only add data in ascending order by x-value\n                return DomainOrder.ASCENDING;\n            }",
        "begin_line": 319,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 322,col 17)-(line 322,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java",
        "signature": "org.jfree.chart.renderer.junit.RendererUtilitiesTests.testFindLiveItemsUpperBoundDescending()",
        "snippet": "    public void testFindLiveItemsUpperBoundDescending() {\n        DefaultXYDataset d = new DefaultXYDataset() {\n            public DomainOrder getDomainOrder() {\n                // we're doing this for testing only, and make sure that we \n                // only add data in ascending order by x-value\n                return DomainOrder.DESCENDING;\n            }\n        };\n        // check a series with no items\n        d.addSeries(\"S1\", new double[][] {{}, {}});\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 0, 10.0, \n                11.0));\n        \n        // check a series with one item\n        d.addSeries(\"S2\", new double[][] {{1.0}, {2.0}});\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 1, 0.0, \n                1.0));\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 1, 1.1, \n                2.0));\n        \n        // check a series with two items\n        d.addSeries(\"S3\", new double[][] {{2.0, 1.0}, {2.0, 2.0}});\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 0.1, \n                0.5));\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 0.1, \n                1.0));\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 2, 1.1, \n                2.0));\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 2, 2.2, \n                3.0));\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 2, 3.3, \n                4.0));\n        \n        // check a series with three items\n        d.addSeries(\"S4\", new double[][] {{3.0, 2.0, 1.0}, {2.0, 2.0, 2.0}});\n        assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 0.0, \n                1.0));\n        assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 1.0, \n                2.0));\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 3, 2.0, \n                3.0));\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 3, 3.0, \n                4.0));\n        \n        // check a series with four items\n        d.addSeries(\"S5\", new double[][] {{4.0, 3.0, 2.0, 1.0}, {2.0, 2.0, \n                2.0, 2.0}});\n        assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.1, \n                0.5));\n        assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.1, \n                1.0));\n        assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 4, 1.1, \n                2.0));\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 4, 2.2, \n                3.0));\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 4, 3.3, \n                4.0));\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 4, 4.4,\n                5.0));\n    }",
        "begin_line": 379,
        "end_line": 438,
        "comment": "\n     * Some checks for the findLiveItemsUpperBound() method when the dataset is\n     * DESCENDING.\n     ",
        "child_ranges": [
            "(line 380,col 9)-(line 386,col 10)",
            "(line 388,col 9)-(line 388,col 51)",
            "(line 389,col 9)-(line 390,col 23)",
            "(line 393,col 9)-(line 393,col 57)",
            "(line 394,col 9)-(line 395,col 22)",
            "(line 396,col 9)-(line 397,col 22)",
            "(line 400,col 9)-(line 400,col 67)",
            "(line 401,col 9)-(line 402,col 22)",
            "(line 403,col 9)-(line 404,col 22)",
            "(line 405,col 9)-(line 406,col 22)",
            "(line 407,col 9)-(line 408,col 22)",
            "(line 409,col 9)-(line 410,col 22)",
            "(line 413,col 9)-(line 413,col 77)",
            "(line 414,col 9)-(line 415,col 22)",
            "(line 416,col 9)-(line 417,col 22)",
            "(line 418,col 9)-(line 419,col 22)",
            "(line 420,col 9)-(line 421,col 22)",
            "(line 424,col 9)-(line 425,col 28)",
            "(line 426,col 9)-(line 427,col 22)",
            "(line 428,col 9)-(line 429,col 22)",
            "(line 430,col 9)-(line 431,col 22)",
            "(line 432,col 9)-(line 433,col 22)",
            "(line 434,col 9)-(line 435,col 22)",
            "(line 436,col 9)-(line 437,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java",
        "signature": "org.jfree.chart.renderer.junit.RendererUtilitiesTests.Anonymous-4eccd7e1-dd2d-4783-a72e-3994dbd580d3.getDomainOrder()",
        "snippet": "            public DomainOrder getDomainOrder() {\n                // we're doing this for testing only, and make sure that we \n                // only add data in ascending order by x-value\n                return DomainOrder.DESCENDING;\n            }",
        "begin_line": 381,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 384,col 17)-(line 384,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererChangeDetector",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererChangeDetector.java",
        "signature": "org.jfree.chart.renderer.junit.RendererChangeDetector.RendererChangeDetector()",
        "snippet": "    public RendererChangeDetector() {\n        this.notified = false;\n    }",
        "begin_line": 58,
        "end_line": 60,
        "comment": "\n     * Creates a new detector.\n     ",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererChangeDetector",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererChangeDetector.java",
        "signature": "org.jfree.chart.renderer.junit.RendererChangeDetector.getNotified()",
        "snippet": "    public boolean getNotified() {\n        return this.notified;\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the flag that indicates whether or not a change event has been \n     * received.\n     * \n     * @return The flag.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererChangeDetector",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererChangeDetector.java",
        "signature": "org.jfree.chart.renderer.junit.RendererChangeDetector.setNotified(boolean)",
        "snippet": "    public void setNotified(boolean notified) {\n        this.notified = notified;\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Sets the flag that indicates whether or not a change event has been \n     * received.\n     * \n     * @param notified  the new value of the flag.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererChangeDetector",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererChangeDetector.java",
        "signature": "org.jfree.chart.renderer.junit.RendererChangeDetector.rendererChanged(org.jfree.chart.event.RendererChangeEvent)",
        "snippet": "    public void rendererChanged(RendererChangeEvent event) {\n        this.notified = true;\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Receives a {@link RendererChangeEvent} from a renderer.\n     * \n     * @param event  the event.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AbstractRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.AbstractRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(AbstractRendererTests.class);\n    }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AbstractRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.AbstractRendererTests.AbstractRendererTests(java.lang.String)",
        "snippet": "    public AbstractRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AbstractRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.AbstractRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        // have to use a concrete subclass...\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        // seriesVisibleList\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n        \n        // baseSeriesVisible\n        r1.setBaseSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n        \n        // seriesVisibleInLegendList\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n        \n        // baseSeriesVisibleInLegend\n        r1.setBaseSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n        \n        // paintList\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.white));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.white));\n        assertTrue(r1.equals(r2));\n        \n        // basePaint\n        r1.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n        \n        // fillPaintList\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n        \n        // baseFillPaint\n        r1.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n        \n        // outlinePaintList\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n        \n        // baseOutlinePaint\n        r1.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n        \n        // strokeList\n        Stroke s = new BasicStroke(3.21f);\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        // baseStroke\n        r1.setBaseStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseStroke(s);\n        assertTrue(r1.equals(r2));\n        \n        // outlineStrokeList\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        // baseOutlineStroke\n        r1.setBaseOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n        \n        // shapeList\n        r1.setSeriesShape(1, new Rectangle(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Rectangle(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        // baseShape\n        r1.setBaseShape(new Rectangle(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Rectangle(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n        \n        // itemLabelsVisibleList\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n        \n        // baseItemLabelsVisible\n        r1.setBaseItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n        \n        // itemLabelFontList\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n        \n        // baseItemLabelFont\n        r1.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n        \n        // itemLabelPaintList\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.gray));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.gray));\n        assertTrue(r1.equals(r2));\n\n        // baseItemLabelPaint\n        r1.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.gray));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.gray));\n        assertTrue(r1.equals(r2));\n        \n        // positiveItemLabelPositionList;\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        // basePositiveItemLabelPosition;\n        r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n        \n        // negativeItemLabelPositionList;\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        // baseNegativeItemLabelPosition;\n        r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        // itemLabelAnchorOffset\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        // createEntitiesList;\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n        \n        // baseCreateEntities;\n        r1.setBaseCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n    }",
        "begin_line": 105,
        "end_line": 310,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 43)",
            "(line 109,col 9)-(line 109,col 43)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 114,col 9)-(line 114,col 45)",
            "(line 115,col 9)-(line 115,col 35)",
            "(line 116,col 9)-(line 116,col 45)",
            "(line 117,col 9)-(line 117,col 34)",
            "(line 120,col 9)-(line 120,col 39)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 39)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 126,col 9)-(line 126,col 53)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 128,col 53)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 132,col 9)-(line 132,col 47)",
            "(line 133,col 9)-(line 133,col 35)",
            "(line 134,col 9)-(line 134,col 47)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 138,col 9)-(line 139,col 42)",
            "(line 140,col 9)-(line 140,col 35)",
            "(line 141,col 9)-(line 142,col 42)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 146,col 9)-(line 147,col 40)",
            "(line 148,col 9)-(line 148,col 35)",
            "(line 149,col 9)-(line 150,col 40)",
            "(line 151,col 9)-(line 151,col 34)",
            "(line 154,col 9)-(line 155,col 40)",
            "(line 156,col 9)-(line 156,col 35)",
            "(line 157,col 9)-(line 158,col 40)",
            "(line 159,col 9)-(line 159,col 34)",
            "(line 162,col 9)-(line 163,col 40)",
            "(line 164,col 9)-(line 164,col 35)",
            "(line 165,col 9)-(line 166,col 40)",
            "(line 167,col 9)-(line 167,col 34)",
            "(line 170,col 9)-(line 171,col 40)",
            "(line 172,col 9)-(line 172,col 35)",
            "(line 173,col 9)-(line 174,col 40)",
            "(line 175,col 9)-(line 175,col 34)",
            "(line 178,col 9)-(line 179,col 40)",
            "(line 180,col 9)-(line 180,col 35)",
            "(line 181,col 9)-(line 182,col 40)",
            "(line 183,col 9)-(line 183,col 34)",
            "(line 186,col 9)-(line 186,col 42)",
            "(line 187,col 9)-(line 187,col 33)",
            "(line 188,col 9)-(line 188,col 35)",
            "(line 189,col 9)-(line 189,col 33)",
            "(line 190,col 9)-(line 190,col 34)",
            "(line 193,col 9)-(line 193,col 28)",
            "(line 194,col 9)-(line 194,col 35)",
            "(line 195,col 9)-(line 195,col 28)",
            "(line 196,col 9)-(line 196,col 34)",
            "(line 199,col 9)-(line 199,col 40)",
            "(line 200,col 9)-(line 200,col 35)",
            "(line 201,col 9)-(line 201,col 40)",
            "(line 202,col 9)-(line 202,col 34)",
            "(line 205,col 9)-(line 205,col 35)",
            "(line 206,col 9)-(line 206,col 35)",
            "(line 207,col 9)-(line 207,col 35)",
            "(line 208,col 9)-(line 208,col 34)",
            "(line 211,col 9)-(line 211,col 56)",
            "(line 212,col 9)-(line 212,col 35)",
            "(line 213,col 9)-(line 213,col 56)",
            "(line 214,col 9)-(line 214,col 34)",
            "(line 217,col 9)-(line 217,col 51)",
            "(line 218,col 9)-(line 218,col 35)",
            "(line 219,col 9)-(line 219,col 51)",
            "(line 220,col 9)-(line 220,col 34)",
            "(line 223,col 9)-(line 223,col 55)",
            "(line 224,col 9)-(line 224,col 35)",
            "(line 225,col 9)-(line 225,col 55)",
            "(line 226,col 9)-(line 226,col 34)",
            "(line 229,col 9)-(line 229,col 42)",
            "(line 230,col 9)-(line 230,col 35)",
            "(line 231,col 9)-(line 231,col 42)",
            "(line 232,col 9)-(line 232,col 34)",
            "(line 235,col 9)-(line 235,col 70)",
            "(line 236,col 9)-(line 236,col 35)",
            "(line 237,col 9)-(line 237,col 70)",
            "(line 238,col 9)-(line 238,col 34)",
            "(line 241,col 9)-(line 241,col 67)",
            "(line 242,col 9)-(line 242,col 35)",
            "(line 243,col 9)-(line 243,col 67)",
            "(line 244,col 9)-(line 244,col 34)",
            "(line 247,col 9)-(line 248,col 41)",
            "(line 249,col 9)-(line 249,col 35)",
            "(line 250,col 9)-(line 251,col 41)",
            "(line 252,col 9)-(line 252,col 34)",
            "(line 255,col 9)-(line 256,col 41)",
            "(line 257,col 9)-(line 257,col 35)",
            "(line 258,col 9)-(line 259,col 41)",
            "(line 260,col 9)-(line 260,col 34)",
            "(line 263,col 9)-(line 263,col 74)",
            "(line 264,col 9)-(line 264,col 35)",
            "(line 265,col 9)-(line 265,col 74)",
            "(line 266,col 9)-(line 266,col 34)",
            "(line 269,col 9)-(line 270,col 70)",
            "(line 271,col 9)-(line 271,col 35)",
            "(line 272,col 9)-(line 273,col 70)",
            "(line 274,col 9)-(line 274,col 34)",
            "(line 277,col 9)-(line 278,col 70)",
            "(line 279,col 9)-(line 279,col 35)",
            "(line 280,col 9)-(line 281,col 70)",
            "(line 282,col 9)-(line 282,col 34)",
            "(line 285,col 9)-(line 286,col 70)",
            "(line 287,col 9)-(line 287,col 35)",
            "(line 288,col 9)-(line 289,col 70)",
            "(line 290,col 9)-(line 290,col 34)",
            "(line 293,col 9)-(line 293,col 41)",
            "(line 294,col 9)-(line 294,col 35)",
            "(line 295,col 9)-(line 295,col 41)",
            "(line 296,col 9)-(line 296,col 34)",
            "(line 299,col 9)-(line 299,col 52)",
            "(line 300,col 9)-(line 300,col 35)",
            "(line 301,col 9)-(line 301,col 52)",
            "(line 302,col 9)-(line 302,col 34)",
            "(line 305,col 9)-(line 305,col 40)",
            "(line 306,col 9)-(line 306,col 35)",
            "(line 307,col 9)-(line 307,col 40)",
            "(line 308,col 9)-(line 308,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AbstractRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.AbstractRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setBaseShape(baseShape);\n        \n        LineAndShapeRenderer r2 = null;\n        try {\n            r2 = (LineAndShapeRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPaint(0, Color.black);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.black);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesFillPaint(0, Color.yellow);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.yellow);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.yellow);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.yellow);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n    \n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n        \n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesItemLabelPaint(0, Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.red);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 315,
        "end_line": 400,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 61)",
            "(line 317,col 9)-(line 317,col 79)",
            "(line 318,col 9)-(line 318,col 35)",
            "(line 320,col 9)-(line 320,col 39)",
            "(line 321,col 9)-(line 326,col 9)",
            "(line 327,col 9)-(line 327,col 29)",
            "(line 328,col 9)-(line 328,col 51)",
            "(line 329,col 9)-(line 329,col 34)",
            "(line 331,col 9)-(line 331,col 46)",
            "(line 332,col 9)-(line 332,col 35)",
            "(line 333,col 9)-(line 333,col 46)",
            "(line 334,col 9)-(line 334,col 34)",
            "(line 336,col 9)-(line 336,col 54)",
            "(line 337,col 9)-(line 337,col 35)",
            "(line 338,col 9)-(line 338,col 54)",
            "(line 339,col 9)-(line 339,col 34)",
            "(line 341,col 9)-(line 341,col 42)",
            "(line 342,col 9)-(line 342,col 35)",
            "(line 343,col 9)-(line 343,col 42)",
            "(line 344,col 9)-(line 344,col 34)",
            "(line 346,col 9)-(line 346,col 47)",
            "(line 347,col 9)-(line 347,col 35)",
            "(line 348,col 9)-(line 348,col 47)",
            "(line 349,col 9)-(line 349,col 34)",
            "(line 351,col 9)-(line 351,col 50)",
            "(line 352,col 9)-(line 352,col 35)",
            "(line 353,col 9)-(line 353,col 50)",
            "(line 354,col 9)-(line 354,col 34)",
            "(line 356,col 9)-(line 356,col 53)",
            "(line 357,col 9)-(line 357,col 35)",
            "(line 358,col 9)-(line 358,col 53)",
            "(line 359,col 9)-(line 359,col 34)",
            "(line 361,col 9)-(line 361,col 60)",
            "(line 362,col 9)-(line 362,col 35)",
            "(line 363,col 9)-(line 363,col 60)",
            "(line 364,col 9)-(line 364,col 34)",
            "(line 366,col 9)-(line 366,col 46)",
            "(line 367,col 9)-(line 367,col 35)",
            "(line 368,col 9)-(line 368,col 68)",
            "(line 369,col 9)-(line 369,col 34)",
            "(line 371,col 9)-(line 371,col 73)",
            "(line 372,col 9)-(line 372,col 35)",
            "(line 373,col 9)-(line 373,col 73)",
            "(line 374,col 9)-(line 374,col 34)",
            "(line 376,col 9)-(line 376,col 55)",
            "(line 377,col 9)-(line 377,col 35)",
            "(line 378,col 9)-(line 378,col 55)",
            "(line 379,col 9)-(line 379,col 34)",
            "(line 381,col 9)-(line 381,col 49)",
            "(line 382,col 9)-(line 382,col 35)",
            "(line 383,col 9)-(line 383,col 49)",
            "(line 384,col 9)-(line 384,col 34)",
            "(line 386,col 9)-(line 386,col 74)",
            "(line 387,col 9)-(line 387,col 35)",
            "(line 388,col 9)-(line 388,col 74)",
            "(line 389,col 9)-(line 389,col 34)",
            "(line 391,col 9)-(line 391,col 74)",
            "(line 392,col 9)-(line 392,col 35)",
            "(line 393,col 9)-(line 393,col 74)",
            "(line 394,col 9)-(line 394,col 34)",
            "(line 396,col 9)-(line 396,col 53)",
            "(line 397,col 9)-(line 397,col 35)",
            "(line 398,col 9)-(line 398,col 53)",
            "(line 399,col 9)-(line 399,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AbstractRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.AbstractRendererTests.MyRendererChangeListener.MyRendererChangeListener()",
        "snippet": "        public MyRendererChangeListener() {\n            this.lastEvent = null;\n        }",
        "begin_line": 413,
        "end_line": 415,
        "comment": "\n         * Creates a new instance.\n         ",
        "child_ranges": [
            "(line 414,col 13)-(line 414,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AbstractRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.AbstractRendererTests.MyRendererChangeListener.rendererChanged(org.jfree.chart.event.RendererChangeEvent)",
        "snippet": "        public void rendererChanged(RendererChangeEvent event) {\n            this.lastEvent = event;\n        }",
        "begin_line": 416,
        "end_line": 418,
        "comment": "",
        "child_ranges": [
            "(line 417,col 13)-(line 417,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AbstractRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.AbstractRendererTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        r1.setBasePaint(Color.blue);\n        LineAndShapeRenderer r2 = null;\n        try {\n            r2 = (LineAndShapeRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        MyRendererChangeListener listener = new MyRendererChangeListener();\n        r2.addChangeListener(listener);\n        r2.setBasePaint(Color.red);\n        assertTrue(listener.lastEvent.getRenderer() == r2);\n        assertFalse(r1.hasListener(listener));\n    }",
        "begin_line": 424,
        "end_line": 443,
        "comment": "\n     * A check for cloning.\n     ",
        "child_ranges": [
            "(line 425,col 9)-(line 425,col 61)",
            "(line 426,col 9)-(line 426,col 36)",
            "(line 427,col 9)-(line 427,col 39)",
            "(line 428,col 9)-(line 433,col 9)",
            "(line 434,col 9)-(line 434,col 29)",
            "(line 435,col 9)-(line 435,col 51)",
            "(line 436,col 9)-(line 436,col 34)",
            "(line 438,col 9)-(line 438,col 75)",
            "(line 439,col 9)-(line 439,col 39)",
            "(line 440,col 9)-(line 440,col 35)",
            "(line 441,col 9)-(line 441,col 59)",
            "(line 442,col 9)-(line 442,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AbstractRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.AbstractRendererTests.testEventNotification()",
        "snippet": "    public void testEventNotification() {\n        \n        RendererChangeDetector detector = new RendererChangeDetector();\n        BarRenderer r1 = new BarRenderer();  // have to use a subclass of \n                                             // AbstractRenderer\n        r1.addChangeListener(detector);\n        \n        // PAINT\n        detector.setNotified(false);\n        r1.setSeriesPaint(0, Color.red);\n        assertTrue(detector.getNotified());\n\n        detector.setNotified(false);\n        r1.setBasePaint(Color.red);\n        assertTrue(detector.getNotified());\n\n        // OUTLINE PAINT\n        detector.setNotified(false);\n        r1.setSeriesOutlinePaint(0, Color.red);\n        assertTrue(detector.getNotified());\n\n        detector.setNotified(false);\n        r1.setBaseOutlinePaint(Color.red);\n        assertTrue(detector.getNotified());\n        \n        // STROKE\n        detector.setNotified(false);\n        r1.setSeriesStroke(0, new BasicStroke(1.0f));\n        assertTrue(detector.getNotified());\n\n        detector.setNotified(false);\n        r1.setBaseStroke(new BasicStroke(1.0f));\n        assertTrue(detector.getNotified());\n\n        // OUTLINE STROKE\n        detector.setNotified(false);\n        r1.setSeriesOutlineStroke(0, new BasicStroke(1.0f));\n        assertTrue(detector.getNotified());\n\n        detector.setNotified(false);\n        r1.setBaseOutlineStroke(new BasicStroke(1.0f));\n        assertTrue(detector.getNotified());\n\n        // SHAPE\n        detector.setNotified(false);\n        r1.setSeriesShape(0, new Rectangle2D.Float());\n        assertTrue(detector.getNotified());\n\n        detector.setNotified(false);\n        r1.setBaseShape(new Rectangle2D.Float());\n        assertTrue(detector.getNotified());\n\n        // ITEM_LABELS_VISIBLE\n        detector.setNotified(false);\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(detector.getNotified());\n\n        detector.setNotified(false);\n        r1.setBaseItemLabelsVisible(true);\n        assertTrue(detector.getNotified());\n        \n        // ITEM_LABEL_FONT\n        detector.setNotified(false);\n        r1.setSeriesItemLabelFont(0, new Font(\"Serif\", Font.PLAIN, 12));\n        assertTrue(detector.getNotified());\n\n        detector.setNotified(false);\n        r1.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 12));\n        assertTrue(detector.getNotified());\n        \n        // ITEM_LABEL_PAINT\n        detector.setNotified(false);\n        r1.setSeriesItemLabelPaint(0, Color.blue);\n        assertTrue(detector.getNotified());\n\n        detector.setNotified(false);\n        r1.setBaseItemLabelPaint(Color.blue);\n        assertTrue(detector.getNotified());\n        \n        // POSITIVE ITEM LABEL POSITION\n        detector.setNotified(false);\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        assertTrue(detector.getNotified());\n\n        detector.setNotified(false);\n        r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        assertTrue(detector.getNotified());\n\n        // NEGATIVE ITEM LABEL ANCHOR\n        detector.setNotified(false);\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        assertTrue(detector.getNotified());\n\n        detector.setNotified(false);\n        r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        assertTrue(detector.getNotified());\n\n    }",
        "begin_line": 448,
        "end_line": 549,
        "comment": "\n     * Tests each setter method to ensure that it sends an event notification.\n     ",
        "child_ranges": [
            "(line 450,col 9)-(line 450,col 71)",
            "(line 451,col 9)-(line 451,col 43)",
            "(line 453,col 9)-(line 453,col 39)",
            "(line 456,col 9)-(line 456,col 36)",
            "(line 457,col 9)-(line 457,col 40)",
            "(line 458,col 9)-(line 458,col 43)",
            "(line 460,col 9)-(line 460,col 36)",
            "(line 461,col 9)-(line 461,col 35)",
            "(line 462,col 9)-(line 462,col 43)",
            "(line 465,col 9)-(line 465,col 36)",
            "(line 466,col 9)-(line 466,col 47)",
            "(line 467,col 9)-(line 467,col 43)",
            "(line 469,col 9)-(line 469,col 36)",
            "(line 470,col 9)-(line 470,col 42)",
            "(line 471,col 9)-(line 471,col 43)",
            "(line 474,col 9)-(line 474,col 36)",
            "(line 475,col 9)-(line 475,col 53)",
            "(line 476,col 9)-(line 476,col 43)",
            "(line 478,col 9)-(line 478,col 36)",
            "(line 479,col 9)-(line 479,col 48)",
            "(line 480,col 9)-(line 480,col 43)",
            "(line 483,col 9)-(line 483,col 36)",
            "(line 484,col 9)-(line 484,col 60)",
            "(line 485,col 9)-(line 485,col 43)",
            "(line 487,col 9)-(line 487,col 36)",
            "(line 488,col 9)-(line 488,col 55)",
            "(line 489,col 9)-(line 489,col 43)",
            "(line 492,col 9)-(line 492,col 36)",
            "(line 493,col 9)-(line 493,col 54)",
            "(line 494,col 9)-(line 494,col 43)",
            "(line 496,col 9)-(line 496,col 36)",
            "(line 497,col 9)-(line 497,col 49)",
            "(line 498,col 9)-(line 498,col 43)",
            "(line 501,col 9)-(line 501,col 36)",
            "(line 502,col 9)-(line 502,col 55)",
            "(line 503,col 9)-(line 503,col 43)",
            "(line 505,col 9)-(line 505,col 36)",
            "(line 506,col 9)-(line 506,col 42)",
            "(line 507,col 9)-(line 507,col 43)",
            "(line 510,col 9)-(line 510,col 36)",
            "(line 511,col 9)-(line 511,col 72)",
            "(line 512,col 9)-(line 512,col 43)",
            "(line 514,col 9)-(line 514,col 36)",
            "(line 515,col 9)-(line 515,col 67)",
            "(line 516,col 9)-(line 516,col 43)",
            "(line 519,col 9)-(line 519,col 36)",
            "(line 520,col 9)-(line 520,col 50)",
            "(line 521,col 9)-(line 521,col 43)",
            "(line 523,col 9)-(line 523,col 36)",
            "(line 524,col 9)-(line 524,col 45)",
            "(line 525,col 9)-(line 525,col 43)",
            "(line 528,col 9)-(line 528,col 36)",
            "(line 529,col 9)-(line 530,col 60)",
            "(line 531,col 9)-(line 531,col 43)",
            "(line 533,col 9)-(line 533,col 36)",
            "(line 534,col 9)-(line 535,col 60)",
            "(line 536,col 9)-(line 536,col 43)",
            "(line 539,col 9)-(line 539,col 36)",
            "(line 540,col 9)-(line 541,col 60)",
            "(line 542,col 9)-(line 542,col 43)",
            "(line 544,col 9)-(line 544,col 36)",
            "(line 545,col 9)-(line 546,col 60)",
            "(line 547,col 9)-(line 547,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AbstractRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.AbstractRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        BarRenderer r1 = new BarRenderer();  \n        BarRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (BarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n        try {\n            r2.notifyListeners(new RendererChangeEvent(r2));\n        }\n        catch (NullPointerException e) {\n            assertTrue(false);  // failed   \n        }\n\n    }",
        "begin_line": 556,
        "end_line": 583,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.  In addition,\n     * test for a bug that was reported where the listener list is 'null' after \n     * deserialization.\n     ",
        "child_ranges": [
            "(line 558,col 9)-(line 558,col 43)",
            "(line 559,col 9)-(line 559,col 30)",
            "(line 561,col 9)-(line 574,col 9)",
            "(line 575,col 9)-(line 575,col 29)",
            "(line 576,col 9)-(line 581,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AbstractRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.AbstractRendererTests.testAutoPopulateFlagDefaults()",
        "snippet": "    public void testAutoPopulateFlagDefaults() {\n        BarRenderer r = new BarRenderer();\n        assertEquals(true, r.getAutoPopulateSeriesPaint());\n        assertEquals(false, r.getAutoPopulateSeriesFillPaint());\n        assertEquals(false, r.getAutoPopulateSeriesOutlinePaint());\n        assertEquals(false, r.getAutoPopulateSeriesStroke());\n        assertEquals(false, r.getAutoPopulateSeriesOutlineStroke());\n        assertEquals(true, r.getAutoPopulateSeriesShape());\n    }",
        "begin_line": 588,
        "end_line": 596,
        "comment": "\n     * Some checks for the autoPopulate flag default values.\n     ",
        "child_ranges": [
            "(line 589,col 9)-(line 589,col 42)",
            "(line 590,col 9)-(line 590,col 59)",
            "(line 591,col 9)-(line 591,col 64)",
            "(line 592,col 9)-(line 592,col 67)",
            "(line 593,col 9)-(line 593,col 61)",
            "(line 594,col 9)-(line 594,col 68)",
            "(line 595,col 9)-(line 595,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AbstractRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.AbstractRendererTests.testPaintLookup()",
        "snippet": "    public void testPaintLookup() {\n        BarRenderer r = new BarRenderer();\n        assertEquals(Color.blue, r.getBasePaint());\n        \n        // first check that autoPopulate==false works as expected\n        r.setAutoPopulateSeriesPaint(false);\n        assertEquals(Color.blue, r.lookupSeriesPaint(0));\n        assertNull(r.getSeriesPaint(0));\n        \n        // now check autoPopulate==true\n        r.setAutoPopulateSeriesPaint(true);\n        /*CategoryPlot plot =*/ new CategoryPlot(null, new CategoryAxis(\n                \"Category\"), new NumberAxis(\"Value\"), r);\n        assertEquals(DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE[0], \n                r.lookupSeriesPaint(0));\n        assertNotNull(r.getSeriesPaint(0));\n    }",
        "begin_line": 601,
        "end_line": 617,
        "comment": "\n     * Some checks for the paint lookup mechanism.\n     ",
        "child_ranges": [
            "(line 602,col 9)-(line 602,col 42)",
            "(line 603,col 9)-(line 603,col 51)",
            "(line 606,col 9)-(line 606,col 44)",
            "(line 607,col 9)-(line 607,col 57)",
            "(line 608,col 9)-(line 608,col 40)",
            "(line 611,col 9)-(line 611,col 43)",
            "(line 612,col 33)-(line 613,col 57)",
            "(line 614,col 9)-(line 615,col 40)",
            "(line 616,col 9)-(line 616,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AbstractRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.AbstractRendererTests.testFillPaintLookup()",
        "snippet": "    public void testFillPaintLookup() {\n        BarRenderer r = new BarRenderer();\n        assertEquals(Color.white, r.getBaseFillPaint());\n        \n        // first check that autoPopulate==false works as expected\n        r.setAutoPopulateSeriesFillPaint(false);\n        assertEquals(Color.white, r.lookupSeriesFillPaint(0));\n        assertNull(r.getSeriesFillPaint(0));\n        \n        // now check autoPopulate==true\n        r.setAutoPopulateSeriesFillPaint(true);\n        /*CategoryPlot plot =*/ new CategoryPlot(null, new CategoryAxis(\n                \"Category\"), new NumberAxis(\"Value\"), r);\n        assertEquals(DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE[0], \n                r.lookupSeriesFillPaint(0));\n        assertNotNull(r.getSeriesFillPaint(0));\n    }",
        "begin_line": 622,
        "end_line": 638,
        "comment": "\n     * Some checks for the fill paint lookup mechanism.\n     ",
        "child_ranges": [
            "(line 623,col 9)-(line 623,col 42)",
            "(line 624,col 9)-(line 624,col 56)",
            "(line 627,col 9)-(line 627,col 48)",
            "(line 628,col 9)-(line 628,col 62)",
            "(line 629,col 9)-(line 629,col 44)",
            "(line 632,col 9)-(line 632,col 47)",
            "(line 633,col 33)-(line 634,col 57)",
            "(line 635,col 9)-(line 636,col 44)",
            "(line 637,col 9)-(line 637,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AbstractRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.AbstractRendererTests.testOutlinePaintLookup()",
        "snippet": "    public void testOutlinePaintLookup() {\n        BarRenderer r = new BarRenderer();\n        assertEquals(Color.gray, r.getBaseOutlinePaint());\n        \n        // first check that autoPopulate==false works as expected\n        r.setAutoPopulateSeriesOutlinePaint(false);\n        assertEquals(Color.gray, r.lookupSeriesOutlinePaint(0));\n        assertNull(r.getSeriesOutlinePaint(0));\n        \n        // now check autoPopulate==true\n        r.setAutoPopulateSeriesOutlinePaint(true);\n        /*CategoryPlot plot =*/ new CategoryPlot(null, new CategoryAxis(\n                \"Category\"), new NumberAxis(\"Value\"), r);\n        assertEquals(DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE[0], \n                r.lookupSeriesOutlinePaint(0));\n        assertNotNull(r.getSeriesOutlinePaint(0));\n    }",
        "begin_line": 643,
        "end_line": 659,
        "comment": "\n     * Some checks for the outline paint lookup mechanism.\n     ",
        "child_ranges": [
            "(line 644,col 9)-(line 644,col 42)",
            "(line 645,col 9)-(line 645,col 58)",
            "(line 648,col 9)-(line 648,col 51)",
            "(line 649,col 9)-(line 649,col 64)",
            "(line 650,col 9)-(line 650,col 47)",
            "(line 653,col 9)-(line 653,col 50)",
            "(line 654,col 33)-(line 655,col 57)",
            "(line 656,col 9)-(line 657,col 47)",
            "(line 658,col 9)-(line 658,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AbstractRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java",
        "signature": "org.jfree.chart.renderer.junit.AbstractRendererTests.testHashCode()",
        "snippet": "    public void testHashCode() {}",
        "begin_line": 664,
        "end_line": 664,
        "comment": "\n     * Some checks for the hashCode() method.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AreaRendererEndTypeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AreaRendererEndTypeTests.java",
        "signature": "org.jfree.chart.renderer.junit.AreaRendererEndTypeTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(AreaRendererEndTypeTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AreaRendererEndTypeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AreaRendererEndTypeTests.java",
        "signature": "org.jfree.chart.renderer.junit.AreaRendererEndTypeTests.AreaRendererEndTypeTests(java.lang.String)",
        "snippet": "    public AreaRendererEndTypeTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AreaRendererEndTypeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AreaRendererEndTypeTests.java",
        "signature": "org.jfree.chart.renderer.junit.AreaRendererEndTypeTests.testEquals()",
        "snippet": "    public void testEquals() {\n        assertEquals(AreaRendererEndType.LEVEL, AreaRendererEndType.LEVEL);\n        assertEquals(AreaRendererEndType.TAPER, AreaRendererEndType.TAPER);\n        assertEquals(\n            AreaRendererEndType.TRUNCATE, AreaRendererEndType.TRUNCATE\n        );\n    }",
        "begin_line": 82,
        "end_line": 88,
        "comment": "\n     * A test for the equals() method.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 75)",
            "(line 84,col 9)-(line 84,col 75)",
            "(line 85,col 9)-(line 87,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.AreaRendererEndTypeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/AreaRendererEndTypeTests.java",
        "signature": "org.jfree.chart.renderer.junit.AreaRendererEndTypeTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        AreaRendererEndType t1 = AreaRendererEndType.TAPER;\n        AreaRendererEndType t2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(t1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            t2 = (AreaRendererEndType) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(t1, t2);\n        boolean same = t1 == t2;\n        assertEquals(true, same);        \n    }",
        "begin_line": 93,
        "end_line": 116,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 59)",
            "(line 96,col 9)-(line 96,col 38)",
            "(line 98,col 9)-(line 112,col 9)",
            "(line 113,col 9)-(line 113,col 29)",
            "(line 114,col 9)-(line 114,col 32)",
            "(line 115,col 9)-(line 115,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.LookupPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/LookupPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.LookupPaintScaleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LookupPaintScaleTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.LookupPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/LookupPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.LookupPaintScaleTests.LookupPaintScaleTests(java.lang.String)",
        "snippet": "    public LookupPaintScaleTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.LookupPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/LookupPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.LookupPaintScaleTests.testEquals()",
        "snippet": "    public void testEquals() {\n        LookupPaintScale g1 = new LookupPaintScale();\n        LookupPaintScale g2 = new LookupPaintScale();\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new LookupPaintScale(1.0, 2.0, Color.red);\n        assertFalse(g1.equals(g2));\n        g2 = new LookupPaintScale(1.0, 2.0, Color.red);\n        assertTrue(g1.equals(g2));\n        \n        g1.add(1.5, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.blue));\n        assertFalse(g1.equals(g2));\n        g2.add(1.5, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.blue));\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 88,
        "end_line": 105,
        "comment": "\n     * A test for the equals() method.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 53)",
            "(line 90,col 9)-(line 90,col 53)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 94,col 55)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 55)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 99,col 9)-(line 100,col 29)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 103,col 29)",
            "(line 104,col 9)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.LookupPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/LookupPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.LookupPaintScaleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LookupPaintScale g1 = new LookupPaintScale();\n        LookupPaintScale g2 = null;\n        try {\n            g2 = (LookupPaintScale) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n        \n        // check independence\n        g1.add(0.5, Color.red);\n        assertFalse(g1.equals(g2));\n        g2.add(0.5, Color.red);\n        assertTrue(g1.equals(g2));\n        \n        // try with gradient paint\n        g1 = new LookupPaintScale(1.0, 2.0, new GradientPaint(1.0f, 2.0f, \n                Color.red, 3.0f, 4.0f, Color.green));\n        g1.add(1.5, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.blue));\n        g2 = null;\n        try {\n            g2 = (LookupPaintScale) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 110,
        "end_line": 144,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 53)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 29)",
            "(line 120,col 9)-(line 120,col 51)",
            "(line 121,col 9)-(line 121,col 34)",
            "(line 124,col 9)-(line 124,col 31)",
            "(line 125,col 9)-(line 125,col 35)",
            "(line 126,col 9)-(line 126,col 31)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 130,col 9)-(line 131,col 53)",
            "(line 132,col 9)-(line 133,col 29)",
            "(line 134,col 9)-(line 134,col 18)",
            "(line 135,col 9)-(line 140,col 9)",
            "(line 141,col 9)-(line 141,col 29)",
            "(line 142,col 9)-(line 142,col 51)",
            "(line 143,col 9)-(line 143,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.LookupPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/LookupPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.LookupPaintScaleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        LookupPaintScale g1 = new LookupPaintScale();\n        LookupPaintScale g2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            g2 = (LookupPaintScale) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(g1, g2);       \n        \n        g1 = new LookupPaintScale(1.0, 2.0, new GradientPaint(1.0f, 2.0f, \n                Color.red, 3.0f, 4.0f, Color.yellow));\n        g1.add(1.5, new GradientPaint(1.1f, 2.2f, Color.red, 3.3f, \n                4.4f, Color.blue));\n        g2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            g2 = (LookupPaintScale) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(g1, g2);   \n    }",
        "begin_line": 149,
        "end_line": 188,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 53)",
            "(line 151,col 9)-(line 151,col 35)",
            "(line 152,col 9)-(line 165,col 9)",
            "(line 166,col 9)-(line 166,col 29)",
            "(line 168,col 9)-(line 169,col 54)",
            "(line 170,col 9)-(line 171,col 35)",
            "(line 172,col 9)-(line 172,col 18)",
            "(line 173,col 9)-(line 186,col 9)",
            "(line 187,col 9)-(line 187,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.LookupPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/LookupPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.LookupPaintScaleTests.testConstructor1()",
        "snippet": "    public void testConstructor1() {\n        LookupPaintScale s = new LookupPaintScale();\n        assertEquals(0.0, s.getLowerBound(), EPSILON);\n        assertEquals(1.0, s.getUpperBound(), EPSILON);\n    }",
        "begin_line": 195,
        "end_line": 199,
        "comment": "\n     * Some checks for the default constructor.\n     ",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 52)",
            "(line 197,col 9)-(line 197,col 54)",
            "(line 198,col 9)-(line 198,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.LookupPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/LookupPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.LookupPaintScaleTests.testConstructor2()",
        "snippet": "    public void testConstructor2() {\n        LookupPaintScale s = new LookupPaintScale(1.0, 2.0, Color.red);\n        assertEquals(1.0, s.getLowerBound(), EPSILON);\n        assertEquals(2.0, s.getUpperBound(), EPSILON);\n        assertEquals(Color.red, s.getDefaultPaint());\n    }",
        "begin_line": 204,
        "end_line": 209,
        "comment": "\n     * Some checks for the other constructor.\n     ",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 71)",
            "(line 206,col 9)-(line 206,col 54)",
            "(line 207,col 9)-(line 207,col 54)",
            "(line 208,col 9)-(line 208,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.LookupPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/LookupPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.LookupPaintScaleTests.testGeneral()",
        "snippet": "    public void testGeneral() {\n        \n        LookupPaintScale s = new LookupPaintScale(0.0, 100.0, Color.black);\n        assertEquals(Color.black, s.getPaint(-1.0));\n        assertEquals(Color.black, s.getPaint(0.0));\n        assertEquals(Color.black, s.getPaint(50.0));\n        assertEquals(Color.black, s.getPaint(100.0));\n        assertEquals(Color.black, s.getPaint(101.0));\n        \n        s.add(50.0, Color.blue);\n        assertEquals(Color.black, s.getPaint(-1.0));\n        assertEquals(Color.black, s.getPaint(0.0));\n        assertEquals(Color.blue, s.getPaint(50.0));\n        assertEquals(Color.blue, s.getPaint(100.0));\n        assertEquals(Color.black, s.getPaint(101.0));\n        \n        s.add(50.0, Color.red);\n        assertEquals(Color.black, s.getPaint(-1.0));\n        assertEquals(Color.black, s.getPaint(0.0));\n        assertEquals(Color.red, s.getPaint(50.0));\n        assertEquals(Color.red, s.getPaint(100.0));\n        assertEquals(Color.black, s.getPaint(101.0));\n        \n        s.add(25.0, Color.green);\n        assertEquals(Color.black, s.getPaint(-1.0));\n        assertEquals(Color.black, s.getPaint(0.0));\n        assertEquals(Color.green, s.getPaint(25.0));\n        assertEquals(Color.red, s.getPaint(50.0));\n        assertEquals(Color.red, s.getPaint(100.0));\n        assertEquals(Color.black, s.getPaint(101.0));\n        \n        s.add(75.0, Color.yellow);\n        assertEquals(Color.black, s.getPaint(-1.0));\n        assertEquals(Color.black, s.getPaint(0.0));\n        assertEquals(Color.green, s.getPaint(25.0));\n        assertEquals(Color.red, s.getPaint(50.0));\n        assertEquals(Color.yellow, s.getPaint(75.0));\n        assertEquals(Color.yellow, s.getPaint(100.0));\n        assertEquals(Color.black, s.getPaint(101.0));\n    }",
        "begin_line": 214,
        "end_line": 253,
        "comment": "\n     * Some general checks for the lookup table.\n     ",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 75)",
            "(line 217,col 9)-(line 217,col 52)",
            "(line 218,col 9)-(line 218,col 51)",
            "(line 219,col 9)-(line 219,col 52)",
            "(line 220,col 9)-(line 220,col 53)",
            "(line 221,col 9)-(line 221,col 53)",
            "(line 223,col 9)-(line 223,col 32)",
            "(line 224,col 9)-(line 224,col 52)",
            "(line 225,col 9)-(line 225,col 51)",
            "(line 226,col 9)-(line 226,col 51)",
            "(line 227,col 9)-(line 227,col 52)",
            "(line 228,col 9)-(line 228,col 53)",
            "(line 230,col 9)-(line 230,col 31)",
            "(line 231,col 9)-(line 231,col 52)",
            "(line 232,col 9)-(line 232,col 51)",
            "(line 233,col 9)-(line 233,col 50)",
            "(line 234,col 9)-(line 234,col 51)",
            "(line 235,col 9)-(line 235,col 53)",
            "(line 237,col 9)-(line 237,col 33)",
            "(line 238,col 9)-(line 238,col 52)",
            "(line 239,col 9)-(line 239,col 51)",
            "(line 240,col 9)-(line 240,col 52)",
            "(line 241,col 9)-(line 241,col 50)",
            "(line 242,col 9)-(line 242,col 51)",
            "(line 243,col 9)-(line 243,col 53)",
            "(line 245,col 9)-(line 245,col 34)",
            "(line 246,col 9)-(line 246,col 52)",
            "(line 247,col 9)-(line 247,col 51)",
            "(line 248,col 9)-(line 248,col 52)",
            "(line 249,col 9)-(line 249,col 50)",
            "(line 250,col 9)-(line 250,col 53)",
            "(line 251,col 9)-(line 251,col 54)",
            "(line 252,col 9)-(line 252,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.OutlierTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/OutlierTests.java",
        "signature": "org.jfree.chart.renderer.junit.OutlierTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(OutlierTests.class);\n    }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.OutlierTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/OutlierTests.java",
        "signature": "org.jfree.chart.renderer.junit.OutlierTests.OutlierTests(java.lang.String)",
        "snippet": "    public OutlierTests(String name) {\n        super(name);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.OutlierTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/OutlierTests.java",
        "signature": "org.jfree.chart.renderer.junit.OutlierTests.testConstructor()",
        "snippet": "    public void testConstructor() {\n        Outlier out = new Outlier(1.0, 2.0, 3.0);\n        assertEquals(-2.0, out.getX(), EPSILON);\n        assertEquals(-1.0, out.getY(), EPSILON);\n        assertEquals(3.0, out.getRadius(), EPSILON);\n    }",
        "begin_line": 81,
        "end_line": 86,
        "comment": " \n     * Simple check for the default constructor.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 49)",
            "(line 83,col 9)-(line 83,col 48)",
            "(line 84,col 9)-(line 84,col 48)",
            "(line 85,col 9)-(line 85,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.OutlierTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/OutlierTests.java",
        "signature": "org.jfree.chart.renderer.junit.OutlierTests.testEquals()",
        "snippet": "    public void testEquals() {\n        Outlier out1 = new Outlier(1.0, 2.0, 3.0);\n        Outlier out2 = new Outlier(1.0, 2.0, 3.0);\n        assertTrue(out1.equals(out2));\n        assertTrue(out2.equals(out1));\n        \n        out1.setPoint(new Point2D.Double(2.0, 2.0));\n        assertFalse(out1.equals(out2));\n        out2.setPoint(new Point2D.Double(2.0, 2.0));\n        assertTrue(out1.equals(out2));\n\n        out1.setPoint(new Point2D.Double(2.0, 3.0));\n        assertFalse(out1.equals(out2));\n        out2.setPoint(new Point2D.Double(2.0, 3.0));\n        assertTrue(out1.equals(out2));\n\n        out1.setRadius(4.0);\n        assertFalse(out1.equals(out2));\n        out2.setRadius(4.0);\n        assertTrue(out1.equals(out2));\n    }",
        "begin_line": 91,
        "end_line": 111,
        "comment": "\n     * A test for the equals() method.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 50)",
            "(line 93,col 9)-(line 93,col 50)",
            "(line 94,col 9)-(line 94,col 38)",
            "(line 95,col 9)-(line 95,col 38)",
            "(line 97,col 9)-(line 97,col 52)",
            "(line 98,col 9)-(line 98,col 39)",
            "(line 99,col 9)-(line 99,col 52)",
            "(line 100,col 9)-(line 100,col 38)",
            "(line 102,col 9)-(line 102,col 52)",
            "(line 103,col 9)-(line 103,col 39)",
            "(line 104,col 9)-(line 104,col 52)",
            "(line 105,col 9)-(line 105,col 38)",
            "(line 107,col 9)-(line 107,col 28)",
            "(line 108,col 9)-(line 108,col 39)",
            "(line 109,col 9)-(line 109,col 28)",
            "(line 110,col 9)-(line 110,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.OutlierTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/OutlierTests.java",
        "signature": "org.jfree.chart.renderer.junit.OutlierTests.testCloning()",
        "snippet": "    public void testCloning() {\n        Outlier out1 = new Outlier(1.0, 2.0, 3.0);\n        assertFalse(out1 instanceof Cloneable);\n    }",
        "begin_line": 116,
        "end_line": 119,
        "comment": "\n     * Confirm that cloning is not implemented.\n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 50)",
            "(line 118,col 9)-(line 118,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.OutlierTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/OutlierTests.java",
        "signature": "org.jfree.chart.renderer.junit.OutlierTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        Outlier out1 = new Outlier(1.0, 2.0, 3.0);\n        assertFalse(out1 instanceof Serializable);\n    }",
        "begin_line": 124,
        "end_line": 127,
        "comment": "\n     * Confirm that serialization is not implemented.\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 50)",
            "(line 126,col 9)-(line 126,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererPackageTests.java",
        "signature": "org.jfree.chart.renderer.junit.RendererPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.chart.renderer\");\n        suite.addTestSuite(AbstractRendererTests.class);\n        suite.addTestSuite(AreaRendererEndTypeTests.class);\n        suite.addTestSuite(DefaultPolarItemRendererTests.class);\n        suite.addTestSuite(GrayPaintScaleTests.class);\n        suite.addTestSuite(LookupPaintScaleTests.class);\n        suite.addTestSuite(OutlierTests.class);\n        suite.addTestSuite(RendererUtilitiesTests.class);\n        return suite;\n    }",
        "begin_line": 63,
        "end_line": 73,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 68)",
            "(line 65,col 9)-(line 65,col 56)",
            "(line 66,col 9)-(line 66,col 59)",
            "(line 67,col 9)-(line 67,col 64)",
            "(line 68,col 9)-(line 68,col 54)",
            "(line 69,col 9)-(line 69,col 56)",
            "(line 70,col 9)-(line 70,col 47)",
            "(line 71,col 9)-(line 71,col 57)",
            "(line 72,col 9)-(line 72,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.RendererPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/RendererPackageTests.java",
        "signature": "org.jfree.chart.renderer.junit.RendererPackageTests.RendererPackageTests(java.lang.String)",
        "snippet": "    public RendererPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the suite name.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.GrayPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/GrayPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.GrayPaintScaleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(GrayPaintScaleTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.GrayPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/GrayPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.GrayPaintScaleTests.GrayPaintScaleTests(java.lang.String)",
        "snippet": "    public GrayPaintScaleTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.GrayPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/GrayPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.GrayPaintScaleTests.testConstructor()",
        "snippet": "    public void testConstructor() {\n        GrayPaintScale gps = new GrayPaintScale();\n        assertEquals(0.0, gps.getLowerBound(), EPSILON);\n        assertEquals(1.0, gps.getUpperBound(), EPSILON);\n    }",
        "begin_line": 87,
        "end_line": 91,
        "comment": " \n     * Simple check for the default constructor.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 50)",
            "(line 89,col 9)-(line 89,col 56)",
            "(line 90,col 9)-(line 90,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.GrayPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/GrayPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.GrayPaintScaleTests.testGetPaint()",
        "snippet": "    public void testGetPaint() {\n        GrayPaintScale gps = new GrayPaintScale();\n        Color c = (Color) gps.getPaint(0.0);\n        assertTrue(c.equals(Color.black));\n        c = (Color) gps.getPaint(1.0);\n        assertTrue(c.equals(Color.white));\n        \n        // check lookup values that are outside the bounds - see bug report\n        // 1767315\n        c = (Color) gps.getPaint(-0.5);\n        assertTrue(c.equals(Color.black));\n        c = (Color) gps.getPaint(1.5);\n        assertTrue(c.equals(Color.white));\n    }",
        "begin_line": 96,
        "end_line": 109,
        "comment": "\n     * Some checks for the getPaint() method.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 50)",
            "(line 98,col 9)-(line 98,col 44)",
            "(line 99,col 9)-(line 99,col 42)",
            "(line 100,col 9)-(line 100,col 38)",
            "(line 101,col 9)-(line 101,col 42)",
            "(line 105,col 9)-(line 105,col 39)",
            "(line 106,col 9)-(line 106,col 42)",
            "(line 107,col 9)-(line 107,col 38)",
            "(line 108,col 9)-(line 108,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.GrayPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/GrayPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.GrayPaintScaleTests.testEquals()",
        "snippet": "    public void testEquals() {\n        GrayPaintScale g1 = new GrayPaintScale();\n        GrayPaintScale g2 = new GrayPaintScale();\n        assertTrue(g1.equals(g2));\n        assertTrue(g2.equals(g1));\n        \n        g1 = new GrayPaintScale(0.0, 1.0);\n        g2 = new GrayPaintScale(0.0, 1.0);\n        assertTrue(g1.equals(g2));\n        g1 = new GrayPaintScale(0.1, 1.0);\n        assertFalse(g1.equals(g2));\n        g2 = new GrayPaintScale(0.1, 1.0);\n        assertTrue(g1.equals(g2));\n        \n        g1 = new GrayPaintScale(0.1, 0.9);\n        assertFalse(g1.equals(g2));\n        g2 = new GrayPaintScale(0.1, 0.9);\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 114,
        "end_line": 132,
        "comment": "\n     * A test for the equals() method.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 49)",
            "(line 116,col 9)-(line 116,col 49)",
            "(line 117,col 9)-(line 117,col 34)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 120,col 9)-(line 120,col 42)",
            "(line 121,col 9)-(line 121,col 42)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 123,col 9)-(line 123,col 42)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 125,col 42)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 128,col 9)-(line 128,col 42)",
            "(line 129,col 9)-(line 129,col 35)",
            "(line 130,col 9)-(line 130,col 42)",
            "(line 131,col 9)-(line 131,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.GrayPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/GrayPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.GrayPaintScaleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        GrayPaintScale g1 = new GrayPaintScale();\n        GrayPaintScale g2 = null;\n        try {\n            g2 = (GrayPaintScale) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n    }",
        "begin_line": 137,
        "end_line": 149,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 49)",
            "(line 139,col 9)-(line 139,col 33)",
            "(line 140,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 146,col 29)",
            "(line 147,col 9)-(line 147,col 51)",
            "(line 148,col 9)-(line 148,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.junit.GrayPaintScaleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/junit/GrayPaintScaleTests.java",
        "signature": "org.jfree.chart.renderer.junit.GrayPaintScaleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        GrayPaintScale g1 = new GrayPaintScale();\n        GrayPaintScale g2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            g2 = (GrayPaintScale) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(g1, g2);       \n    }",
        "begin_line": 154,
        "end_line": 172,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 49)",
            "(line 156,col 9)-(line 156,col 33)",
            "(line 157,col 9)-(line 170,col 9)",
            "(line 171,col 9)-(line 171,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BarRendererTests.class);\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRendererTests.BarRendererTests(java.lang.String)",
        "snippet": "    public BarRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        // base value\n        r1.setBase(0.123);\n        assertFalse(r1.equals(r2));\n        r2.setBase(0.123);\n        assertTrue(r1.equals(r2));\n        \n        // itemMargin\n        r1.setItemMargin(0.22);\n        assertFalse(r1.equals(r2));\n        r2.setItemMargin(0.22);\n        assertTrue(r1.equals(r2));\n        \n        // drawBarOutline\n        r1.setDrawBarOutline(!r1.isDrawBarOutline());\n        assertFalse(r1.equals(r2));\n        r2.setDrawBarOutline(!r2.isDrawBarOutline());\n        assertTrue(r1.equals(r2));\n        \n        // maximumBarWidth\n        r1.setMaximumBarWidth(0.11);\n        assertFalse(r1.equals(r2));\n        r2.setMaximumBarWidth(0.11);\n        assertTrue(r1.equals(r2));\n        \n        // minimumBarLength\n        r1.setMinimumBarLength(0.04);\n        assertFalse(r1.equals(r2));\n        r2.setMinimumBarLength(0.04);\n        assertTrue(r1.equals(r2));\n        \n        // gradientPaintTransformer\n        r1.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        assertFalse(r1.equals(r2));\n        r2.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        assertTrue(r1.equals(r2));\n        \n        // positiveItemLabelPositionFallback\n        r1.setPositiveItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertFalse(r1.equals(r2));\n        r2.setPositiveItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertTrue(r1.equals(r2));\n\n        // negativeItemLabelPositionFallback\n        r1.setNegativeItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertFalse(r1.equals(r2));\n        r2.setNegativeItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertTrue(r1.equals(r2));\n\n    }",
        "begin_line": 102,
        "end_line": 162,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 43)",
            "(line 104,col 9)-(line 104,col 43)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 109,col 9)-(line 109,col 26)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 111,col 26)",
            "(line 112,col 9)-(line 112,col 34)",
            "(line 115,col 9)-(line 115,col 31)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 117,col 31)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 121,col 9)-(line 121,col 53)",
            "(line 122,col 9)-(line 122,col 35)",
            "(line 123,col 9)-(line 123,col 53)",
            "(line 124,col 9)-(line 124,col 34)",
            "(line 127,col 9)-(line 127,col 36)",
            "(line 128,col 9)-(line 128,col 35)",
            "(line 129,col 9)-(line 129,col 36)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 133,col 9)-(line 133,col 37)",
            "(line 134,col 9)-(line 134,col 35)",
            "(line 135,col 9)-(line 135,col 37)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 139,col 9)-(line 140,col 61)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 143,col 61)",
            "(line 144,col 9)-(line 144,col 34)",
            "(line 147,col 9)-(line 148,col 61)",
            "(line 149,col 9)-(line 149,col 35)",
            "(line 150,col 9)-(line 151,col 61)",
            "(line 152,col 9)-(line 152,col 34)",
            "(line 155,col 9)-(line 156,col 61)",
            "(line 157,col 9)-(line 157,col 35)",
            "(line 158,col 9)-(line 159,col 61)",
            "(line 160,col 9)-(line 160,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 167,
        "end_line": 174,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 43)",
            "(line 169,col 9)-(line 169,col 43)",
            "(line 170,col 9)-(line 170,col 34)",
            "(line 171,col 9)-(line 171,col 31)",
            "(line 172,col 9)-(line 172,col 31)",
            "(line 173,col 9)-(line 173,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        BarRenderer r1 = new BarRenderer();\n        r1.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());\n        BarRenderer r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 179,
        "end_line": 192,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 43)",
            "(line 181,col 9)-(line 181,col 79)",
            "(line 182,col 9)-(line 182,col 30)",
            "(line 183,col 9)-(line 188,col 9)",
            "(line 189,col 9)-(line 189,col 29)",
            "(line 190,col 9)-(line 190,col 51)",
            "(line 191,col 9)-(line 191,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            r2 = (BarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 197,
        "end_line": 218,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 43)",
            "(line 200,col 9)-(line 200,col 30)",
            "(line 202,col 9)-(line 215,col 9)",
            "(line 216,col 9)-(line 216,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRendererTests.testEventNotification()",
        "snippet": "    public void testEventNotification() {\n        \n        RendererChangeDetector detector = new RendererChangeDetector();\n        BarRenderer r1 = new BarRenderer();\n        r1.addChangeListener(detector);\n        \n        detector.setNotified(false);\n        r1.setBasePaint(Color.red);\n        assertTrue(detector.getNotified());\n\n    }",
        "begin_line": 223,
        "end_line": 233,
        "comment": "\n     * Tests each setter method to ensure that it sends an event notification.\n     ",
        "child_ranges": [
            "(line 225,col 9)-(line 225,col 71)",
            "(line 226,col 9)-(line 226,col 43)",
            "(line 227,col 9)-(line 227,col 39)",
            "(line 229,col 9)-(line 229,col 36)",
            "(line 230,col 9)-(line 230,col 35)",
            "(line 231,col 9)-(line 231,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRendererTests.testGetLegendItem()",
        "snippet": "    public void testGetLegendItem() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.addValue(21.0, \"R1\", \"C1\");\n        BarRenderer r = new BarRenderer();\n        CategoryPlot plot = new CategoryPlot(dataset, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(0, 0);\n        assertNotNull(li);\n        r.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        li = r.getLegendItem(0, 0);\n        assertNull(li);\n    }",
        "begin_line": 238,
        "end_line": 250,
        "comment": "\n     * Some checks for the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 239,col 9)-(line 239,col 70)",
            "(line 240,col 9)-(line 240,col 43)",
            "(line 241,col 9)-(line 241,col 42)",
            "(line 242,col 9)-(line 243,col 40)",
            "(line 244,col 32)-(line 244,col 52)",
            "(line 245,col 9)-(line 245,col 46)",
            "(line 246,col 9)-(line 246,col 26)",
            "(line 247,col 9)-(line 247,col 53)",
            "(line 248,col 9)-(line 248,col 35)",
            "(line 249,col 9)-(line 249,col 23)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        DefaultCategoryDataset dataset0 = new DefaultCategoryDataset();\n        dataset0.addValue(21.0, \"R1\", \"C1\");\n        dataset0.addValue(22.0, \"R2\", \"C1\");        \n        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n        dataset1.addValue(23.0, \"R3\", \"C1\");\n        dataset1.addValue(24.0, \"R4\", \"C1\");        \n        dataset1.addValue(25.0, \"R5\", \"C1\");        \n        BarRenderer r = new BarRenderer();\n        CategoryPlot plot = new CategoryPlot(dataset0, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, dataset1);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"R5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 256,
        "end_line": 273,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 257,col 9)-(line 257,col 71)",
            "(line 258,col 9)-(line 258,col 44)",
            "(line 259,col 9)-(line 259,col 44)",
            "(line 260,col 9)-(line 260,col 71)",
            "(line 261,col 9)-(line 261,col 44)",
            "(line 262,col 9)-(line 262,col 44)",
            "(line 263,col 9)-(line 263,col 44)",
            "(line 264,col 9)-(line 264,col 42)",
            "(line 265,col 9)-(line 266,col 40)",
            "(line 267,col 9)-(line 267,col 37)",
            "(line 268,col 32)-(line 268,col 52)",
            "(line 269,col 9)-(line 269,col 46)",
            "(line 270,col 9)-(line 270,col 42)",
            "(line 271,col 9)-(line 271,col 46)",
            "(line 272,col 9)-(line 272,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LineAndShapeRendererTests.class);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests.LineAndShapeRendererTests(java.lang.String)",
        "snippet": "    public LineAndShapeRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        LineAndShapeRenderer r2 = new LineAndShapeRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setBaseLinesVisible(!r1.getBaseLinesVisible());\n        assertFalse(r1.equals(r2));\n        r2.setBaseLinesVisible(r1.getBaseLinesVisible());\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesLinesVisible(1, true);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesLinesVisible(1, true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setBaseShapesVisible(!r1.getBaseShapesVisible());\n        assertFalse(r1.equals(r2));\n        r2.setBaseShapesVisible(r1.getBaseShapesVisible());\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesShapesVisible(1, true);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShapesVisible(1, true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesShapesFilled(1, true);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShapesFilled(1, true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setBaseShapesFilled(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShapesFilled(false);\n        assertTrue(r1.equals(r2));\n        \n        r1.setUseOutlinePaint(true);\n        assertFalse(r1.equals(r2));\n        r2.setUseOutlinePaint(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setUseSeriesOffset(true);\n        assertFalse(r1.equals(r2));\n        r2.setUseSeriesOffset(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setItemMargin(0.14);\n        assertFalse(r1.equals(r2));\n        r2.setItemMargin(0.14);\n        assertTrue(r1.equals(r2));\n        \n    }",
        "begin_line": 90,
        "end_line": 141,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 61)",
            "(line 93,col 9)-(line 93,col 61)",
            "(line 94,col 9)-(line 94,col 29)",
            "(line 96,col 9)-(line 96,col 58)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 57)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 101,col 42)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 42)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 106,col 9)-(line 106,col 60)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 59)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 111,col 9)-(line 111,col 43)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 113,col 43)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 116,col 9)-(line 116,col 42)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 118,col 42)",
            "(line 119,col 9)-(line 119,col 34)",
            "(line 121,col 9)-(line 121,col 38)",
            "(line 122,col 9)-(line 122,col 35)",
            "(line 123,col 9)-(line 123,col 38)",
            "(line 124,col 9)-(line 124,col 34)",
            "(line 126,col 9)-(line 126,col 36)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 128,col 36)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 131,col 9)-(line 131,col 36)",
            "(line 132,col 9)-(line 132,col 35)",
            "(line 133,col 9)-(line 133,col 36)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 136,col 9)-(line 136,col 31)",
            "(line 137,col 9)-(line 137,col 35)",
            "(line 138,col 9)-(line 138,col 31)",
            "(line 139,col 9)-(line 139,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        LineAndShapeRenderer r2 = new LineAndShapeRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 146,
        "end_line": 153,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 61)",
            "(line 148,col 9)-(line 148,col 61)",
            "(line 149,col 9)-(line 149,col 34)",
            "(line 150,col 9)-(line 150,col 31)",
            "(line 151,col 9)-(line 151,col 31)",
            "(line 152,col 9)-(line 152,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        LineAndShapeRenderer r2 = null;\n        try {\n            r2 = (LineAndShapeRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        assertTrue(checkIndependence(r1, r2));\n        \n    }",
        "begin_line": 158,
        "end_line": 173,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 61)",
            "(line 160,col 9)-(line 160,col 39)",
            "(line 161,col 9)-(line 166,col 9)",
            "(line 167,col 9)-(line 167,col 29)",
            "(line 168,col 9)-(line 168,col 51)",
            "(line 169,col 9)-(line 169,col 34)",
            "(line 171,col 9)-(line 171,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests.checkIndependence(org.jfree.chart.renderer.category.LineAndShapeRenderer, org.jfree.chart.renderer.category.LineAndShapeRenderer)",
        "snippet": "    private boolean checkIndependence(LineAndShapeRenderer r1, \n                                      LineAndShapeRenderer r2) {\n\n        // should be equal...\n        if (!r1.equals(r2)) {\n            return false;\n        }\n        \n        // and independent...        \n        r1.setBaseLinesVisible(!r1.getBaseLinesVisible());\n        if (r1.equals(r2)) {\n            return false;\n        }\n        r2.setBaseLinesVisible(r1.getBaseLinesVisible());\n        if (!r1.equals(r2)) {\n            return false;\n        }\n\n        r1.setSeriesLinesVisible(1, true);\n        if (r1.equals(r2)) {\n            return false;\n        }\n        r2.setSeriesLinesVisible(1, true);\n        if (!r1.equals(r2)) {\n            return false;\n        }\n        \n        r1.setBaseShapesVisible(!r1.getBaseShapesVisible());\n        if (r1.equals(r2)) {\n            return false;\n        }\n        r2.setBaseShapesVisible(r1.getBaseShapesVisible());\n        if (!r1.equals(r2)) {\n            return false;\n        }\n\n        r1.setSeriesShapesVisible(1, true);\n        if (r1.equals(r2)) {\n            return false;\n        }\n        r2.setSeriesShapesVisible(1, true);\n        if (!r1.equals(r2)) {\n            return false;\n        }\n\n        r1.setSeriesShapesFilled(0, false);\n        r2.setSeriesShapesFilled(0, true);\n        if (r1.equals(r2)) {\n            return false;\n        }\n        r2.setSeriesShapesFilled(0, false);\n        if (!r1.equals(r2)) {\n            return false;\n        }\n        \n        r1.setBaseShapesFilled(false);\n        r2.setBaseShapesFilled(true);\n        if (r1.equals(r2)) {\n            return false;\n        }\n        r2.setBaseShapesFilled(false);\n        if (!r1.equals(r2)) {\n            return false;\n        }\n        return true;\n    \n    }",
        "begin_line": 183,
        "end_line": 249,
        "comment": "\n     * Checks that the two renderers are equal but independent of one another.\n     * \n     * @param r1  renderer 1.\n     * @param r2  renderer 2.\n     * \n     * @return A boolean.\n     ",
        "child_ranges": [
            "(line 187,col 9)-(line 189,col 9)",
            "(line 192,col 9)-(line 192,col 58)",
            "(line 193,col 9)-(line 195,col 9)",
            "(line 196,col 9)-(line 196,col 57)",
            "(line 197,col 9)-(line 199,col 9)",
            "(line 201,col 9)-(line 201,col 42)",
            "(line 202,col 9)-(line 204,col 9)",
            "(line 205,col 9)-(line 205,col 42)",
            "(line 206,col 9)-(line 208,col 9)",
            "(line 210,col 9)-(line 210,col 60)",
            "(line 211,col 9)-(line 213,col 9)",
            "(line 214,col 9)-(line 214,col 59)",
            "(line 215,col 9)-(line 217,col 9)",
            "(line 219,col 9)-(line 219,col 43)",
            "(line 220,col 9)-(line 222,col 9)",
            "(line 223,col 9)-(line 223,col 43)",
            "(line 224,col 9)-(line 226,col 9)",
            "(line 228,col 9)-(line 228,col 43)",
            "(line 229,col 9)-(line 229,col 42)",
            "(line 230,col 9)-(line 232,col 9)",
            "(line 233,col 9)-(line 233,col 43)",
            "(line 234,col 9)-(line 236,col 9)",
            "(line 238,col 9)-(line 238,col 38)",
            "(line 239,col 9)-(line 239,col 37)",
            "(line 240,col 9)-(line 242,col 9)",
            "(line 243,col 9)-(line 243,col 38)",
            "(line 244,col 9)-(line 246,col 9)",
            "(line 247,col 9)-(line 247,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        LineAndShapeRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (LineAndShapeRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 254,
        "end_line": 275,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 61)",
            "(line 257,col 9)-(line 257,col 39)",
            "(line 259,col 9)-(line 272,col 9)",
            "(line 273,col 9)-(line 273,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        DefaultCategoryDataset dataset0 = new DefaultCategoryDataset();\n        dataset0.addValue(21.0, \"R1\", \"C1\");\n        dataset0.addValue(22.0, \"R2\", \"C1\");        \n        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n        dataset1.addValue(23.0, \"R3\", \"C1\");\n        dataset1.addValue(24.0, \"R4\", \"C1\");        \n        dataset1.addValue(25.0, \"R5\", \"C1\");        \n        LineAndShapeRenderer r = new LineAndShapeRenderer();\n        CategoryPlot plot = new CategoryPlot(dataset0, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, dataset1);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"R5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 281,
        "end_line": 298,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 71)",
            "(line 283,col 9)-(line 283,col 44)",
            "(line 284,col 9)-(line 284,col 44)",
            "(line 285,col 9)-(line 285,col 71)",
            "(line 286,col 9)-(line 286,col 44)",
            "(line 287,col 9)-(line 287,col 44)",
            "(line 288,col 9)-(line 288,col 44)",
            "(line 289,col 9)-(line 289,col 60)",
            "(line 290,col 9)-(line 291,col 40)",
            "(line 292,col 9)-(line 292,col 37)",
            "(line 293,col 32)-(line 293,col 52)",
            "(line 294,col 9)-(line 294,col 46)",
            "(line 295,col 9)-(line 295,col 42)",
            "(line 296,col 9)-(line 296,col 46)",
            "(line 297,col 9)-(line 297,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/WaterfallBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(WaterfallBarRendererTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/WaterfallBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests.WaterfallBarRendererTests(java.lang.String)",
        "snippet": "    public WaterfallBarRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/WaterfallBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        WaterfallBarRenderer r1 = new WaterfallBarRenderer();\n        WaterfallBarRenderer r2 = new WaterfallBarRenderer();\n        assertEquals(r1, r2);\n                \n        // firstBarPaint;\n        r1.setFirstBarPaint(Color.cyan);\n        assertFalse(r1.equals(r2));\n        r2.setFirstBarPaint(Color.cyan);\n        assertTrue(r1.equals(r2));\n        \n        // lastBarPaint;\n        r1.setLastBarPaint(Color.cyan);\n        assertFalse(r1.equals(r2));\n        r2.setLastBarPaint(Color.cyan);\n        assertTrue(r1.equals(r2));\n\n        // positiveBarPaint;\n        r1.setPositiveBarPaint(Color.cyan);\n        assertFalse(r1.equals(r2));\n        r2.setPositiveBarPaint(Color.cyan);\n        assertTrue(r1.equals(r2));\n\n        //private Paint negativeBarPaint;\n        r1.setNegativeBarPaint(Color.cyan);\n        assertFalse(r1.equals(r2));\n        r2.setNegativeBarPaint(Color.cyan);\n        assertTrue(r1.equals(r2));\n\n    }",
        "begin_line": 83,
        "end_line": 112,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 61)",
            "(line 85,col 9)-(line 85,col 61)",
            "(line 86,col 9)-(line 86,col 29)",
            "(line 89,col 9)-(line 89,col 40)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 40)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 95,col 9)-(line 95,col 39)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 39)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 101,col 9)-(line 101,col 43)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 43)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 107,col 9)-(line 107,col 43)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 43)",
            "(line 110,col 9)-(line 110,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/WaterfallBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        WaterfallBarRenderer r1 = new WaterfallBarRenderer();\n        WaterfallBarRenderer r2 = new WaterfallBarRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 117,
        "end_line": 124,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 61)",
            "(line 119,col 9)-(line 119,col 61)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 121,col 9)-(line 121,col 31)",
            "(line 122,col 9)-(line 122,col 31)",
            "(line 123,col 9)-(line 123,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/WaterfallBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        WaterfallBarRenderer r1 = new WaterfallBarRenderer();\n        WaterfallBarRenderer r2 = null;\n        try {\n            r2 = (WaterfallBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // quick check for independence\n        r1.setFirstBarPaint(Color.yellow);\n        assertFalse(r1.equals(r2));\n        r2.setFirstBarPaint(Color.yellow);\n        assertTrue(r1.equals(r2));\n        \n    }",
        "begin_line": 129,
        "end_line": 148,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 61)",
            "(line 131,col 9)-(line 131,col 39)",
            "(line 132,col 9)-(line 137,col 9)",
            "(line 138,col 9)-(line 138,col 29)",
            "(line 139,col 9)-(line 139,col 51)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 143,col 9)-(line 143,col 42)",
            "(line 144,col 9)-(line 144,col 35)",
            "(line 145,col 9)-(line 145,col 42)",
            "(line 146,col 9)-(line 146,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/WaterfallBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        WaterfallBarRenderer r1 = new WaterfallBarRenderer();\n        WaterfallBarRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (WaterfallBarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 153,
        "end_line": 175,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 61)",
            "(line 156,col 9)-(line 156,col 39)",
            "(line 158,col 9)-(line 172,col 9)",
            "(line 173,col 9)-(line 173,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LevelRendererTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.LevelRendererTests(java.lang.String)",
        "snippet": "    public LevelRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        LevelRenderer r1 = new LevelRenderer();\n        LevelRenderer r2 = new LevelRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        r1.setItemMargin(0.123);\n        assertFalse(r1.equals(r2));\n        r2.setItemMargin(0.123);\n        assertTrue(r1.equals(r2));\n\n        r1.setMaximumItemWidth(0.234);\n        assertFalse(r1.equals(r2));\n        r2.setMaximumItemWidth(0.234);\n        assertTrue(r1.equals(r2));\n    \n    }",
        "begin_line": 88,
        "end_line": 104,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 47)",
            "(line 90,col 9)-(line 90,col 47)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 94,col 32)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 32)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 99,col 9)-(line 99,col 38)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 38)",
            "(line 102,col 9)-(line 102,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        LevelRenderer r1 = new LevelRenderer();\n        LevelRenderer r2 = new LevelRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 109,
        "end_line": 116,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 47)",
            "(line 111,col 9)-(line 111,col 47)",
            "(line 112,col 9)-(line 112,col 34)",
            "(line 113,col 9)-(line 113,col 31)",
            "(line 114,col 9)-(line 114,col 31)",
            "(line 115,col 9)-(line 115,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LevelRenderer r1 = new LevelRenderer();\n        r1.setItemMargin(0.123);\n        r1.setMaximumItemWidth(0.234);\n        LevelRenderer r2 = null;\n        try {\n            r2 = (LevelRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        assertTrue(checkIndependence(r1, r2));\n        \n    }",
        "begin_line": 121,
        "end_line": 138,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 47)",
            "(line 123,col 9)-(line 123,col 32)",
            "(line 124,col 9)-(line 124,col 38)",
            "(line 125,col 9)-(line 125,col 32)",
            "(line 126,col 9)-(line 131,col 9)",
            "(line 132,col 9)-(line 132,col 29)",
            "(line 133,col 9)-(line 133,col 51)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 136,col 9)-(line 136,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.checkIndependence(org.jfree.chart.renderer.category.LevelRenderer, org.jfree.chart.renderer.category.LevelRenderer)",
        "snippet": "    private boolean checkIndependence(LevelRenderer r1, LevelRenderer r2) {\n\n        // should be equal...\n        boolean b0 = r1.equals(r2);\n        \n        // and independent...\n        r1.setItemMargin(0.0);\n        boolean b1 = !r1.equals(r2);\n        r2.setItemMargin(0.0);\n        boolean b2 = r1.equals(r2);\n        \n        return b0 && b1 && b2;\n    \n    }",
        "begin_line": 148,
        "end_line": 161,
        "comment": "\n     * Checks that the two renderers are equal but independent of one another.\n     * \n     * @param r1  renderer 1.\n     * @param r2  renderer 2.\n     * \n     * @return A boolean.\n     ",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 35)",
            "(line 154,col 9)-(line 154,col 30)",
            "(line 155,col 9)-(line 155,col 36)",
            "(line 156,col 9)-(line 156,col 30)",
            "(line 157,col 9)-(line 157,col 35)",
            "(line 159,col 9)-(line 159,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        LevelRenderer r1 = new LevelRenderer();\n        LevelRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (LevelRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 166,
        "end_line": 188,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 47)",
            "(line 169,col 9)-(line 169,col 32)",
            "(line 171,col 9)-(line 185,col 9)",
            "(line 186,col 9)-(line 186,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n            dataset.addValue(1.0, \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new LevelRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 194,
        "end_line": 212,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 32)",
            "(line 196,col 9)-(line 210,col 9)",
            "(line 211,col 9)-(line 211,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        DefaultCategoryDataset dataset0 = new DefaultCategoryDataset();\n        dataset0.addValue(21.0, \"R1\", \"C1\");\n        dataset0.addValue(22.0, \"R2\", \"C1\");        \n        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n        dataset1.addValue(23.0, \"R3\", \"C1\");\n        dataset1.addValue(24.0, \"R4\", \"C1\");        \n        dataset1.addValue(25.0, \"R5\", \"C1\");        \n        LevelRenderer r = new LevelRenderer();\n        CategoryPlot plot = new CategoryPlot(dataset0, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, dataset1);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"R5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 218,
        "end_line": 235,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 71)",
            "(line 220,col 9)-(line 220,col 44)",
            "(line 221,col 9)-(line 221,col 44)",
            "(line 222,col 9)-(line 222,col 71)",
            "(line 223,col 9)-(line 223,col 44)",
            "(line 224,col 9)-(line 224,col 44)",
            "(line 225,col 9)-(line 225,col 44)",
            "(line 226,col 9)-(line 226,col 46)",
            "(line 227,col 9)-(line 228,col 40)",
            "(line 229,col 9)-(line 229,col 37)",
            "(line 230,col 32)-(line 230,col 52)",
            "(line 231,col 9)-(line 231,col 46)",
            "(line 232,col 9)-(line 232,col 42)",
            "(line 233,col 9)-(line 233,col 46)",
            "(line 234,col 9)-(line 234,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(GroupedStackedBarRendererTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 67)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.GroupedStackedBarRendererTests(java.lang.String)",
        "snippet": "    public GroupedStackedBarRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        GroupedStackedBarRenderer r1 = new GroupedStackedBarRenderer();\n        GroupedStackedBarRenderer r2 = new GroupedStackedBarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        // map\n        KeyToGroupMap m1 = new KeyToGroupMap(\"G1\");\n        m1.mapKeyToGroup(\"S1\", \"G2\");\n        r1.setSeriesToGroupMap(m1);\n        assertFalse(r1.equals(r2));\n        KeyToGroupMap m2 = new KeyToGroupMap(\"G1\");\n        m2.mapKeyToGroup(\"S1\", \"G2\");\n        r2.setSeriesToGroupMap(m2);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 88,
        "end_line": 103,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 71)",
            "(line 90,col 9)-(line 90,col 71)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 95,col 9)-(line 95,col 51)",
            "(line 96,col 9)-(line 96,col 37)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 51)",
            "(line 100,col 9)-(line 100,col 37)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        GroupedStackedBarRenderer r1 = new GroupedStackedBarRenderer();\n        GroupedStackedBarRenderer r2 = null;\n        try {\n            r2 = (GroupedStackedBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 108,
        "end_line": 120,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 71)",
            "(line 110,col 9)-(line 110,col 44)",
            "(line 111,col 9)-(line 116,col 9)",
            "(line 117,col 9)-(line 117,col 29)",
            "(line 118,col 9)-(line 118,col 51)",
            "(line 119,col 9)-(line 119,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        GroupedStackedBarRenderer r1 = new GroupedStackedBarRenderer();\n        GroupedStackedBarRenderer r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (GroupedStackedBarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 125,
        "end_line": 146,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 71)",
            "(line 128,col 9)-(line 128,col 44)",
            "(line 129,col 9)-(line 143,col 9)",
            "(line 144,col 9)-(line 144,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n            dataset.addValue(1.0, \"S1\", \"C1\");\n            dataset.addValue(2.0, \"S1\", \"C2\");\n            dataset.addValue(3.0, \"S2\", \"C1\");\n            dataset.addValue(4.0, \"S2\", \"C2\");\n            GroupedStackedBarRenderer renderer \n                = new GroupedStackedBarRenderer();\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    renderer);\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 152,
        "end_line": 175,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 32)",
            "(line 154,col 9)-(line 173,col 9)",
            "(line 174,col 9)-(line 174,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedAreaRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StackedAreaRendererTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedAreaRendererTests.StackedAreaRendererTests(java.lang.String)",
        "snippet": "    public StackedAreaRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedAreaRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StackedAreaRenderer r1 = new StackedAreaRenderer();\n        StackedAreaRenderer r2 = new StackedAreaRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setRenderAsPercentages(true);\n        assertFalse(r1.equals(r2));\n        r2.setRenderAsPercentages(true);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 82,
        "end_line": 91,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 59)",
            "(line 84,col 9)-(line 84,col 59)",
            "(line 85,col 9)-(line 85,col 29)",
            "(line 87,col 9)-(line 87,col 40)",
            "(line 88,col 9)-(line 88,col 35)",
            "(line 89,col 9)-(line 89,col 40)",
            "(line 90,col 9)-(line 90,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedAreaRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        StackedAreaRenderer r1 = new StackedAreaRenderer();\n        StackedAreaRenderer r2 = new StackedAreaRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 96,
        "end_line": 103,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 59)",
            "(line 98,col 9)-(line 98,col 59)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 100,col 9)-(line 100,col 31)",
            "(line 101,col 9)-(line 101,col 31)",
            "(line 102,col 9)-(line 102,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedAreaRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StackedAreaRenderer r1 = new StackedAreaRenderer();\n        StackedAreaRenderer r2 = null;\n        try {\n            r2 = (StackedAreaRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n    }",
        "begin_line": 108,
        "end_line": 121,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 59)",
            "(line 110,col 9)-(line 110,col 38)",
            "(line 111,col 9)-(line 116,col 9)",
            "(line 117,col 9)-(line 117,col 29)",
            "(line 118,col 9)-(line 118,col 51)",
            "(line 119,col 9)-(line 119,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedAreaRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StackedAreaRenderer r1 = new StackedAreaRenderer();\n        StackedAreaRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (StackedAreaRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 126,
        "end_line": 147,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 59)",
            "(line 129,col 9)-(line 129,col 38)",
            "(line 131,col 9)-(line 144,col 9)",
            "(line 145,col 9)-(line 145,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.ScatterRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/ScatterRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.ScatterRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ScatterRendererTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.ScatterRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/ScatterRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.ScatterRendererTests.ScatterRendererTests(java.lang.String)",
        "snippet": "    public ScatterRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.ScatterRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/ScatterRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.ScatterRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        ScatterRenderer r1 = new ScatterRenderer();\n        ScatterRenderer r2 = new ScatterRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setSeriesShapesFilled(1, true);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShapesFilled(1, true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setBaseShapesFilled(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShapesFilled(false);\n        assertTrue(r1.equals(r2));\n        \n        r1.setUseFillPaint(true);\n        assertFalse(r1.equals(r2));\n        r2.setUseFillPaint(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setDrawOutlines(true);\n        assertFalse(r1.equals(r2));\n        r2.setDrawOutlines(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setUseOutlinePaint(true);\n        assertFalse(r1.equals(r2));\n        r2.setUseOutlinePaint(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setUseSeriesOffset(false);\n        assertFalse(r1.equals(r2));\n        r2.setUseSeriesOffset(false);\n        assertTrue(r1.equals(r2));\n        \n    }",
        "begin_line": 83,
        "end_line": 119,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 51)",
            "(line 86,col 9)-(line 86,col 51)",
            "(line 87,col 9)-(line 87,col 29)",
            "(line 89,col 9)-(line 89,col 42)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 42)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 94,col 38)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 38)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 99,col 9)-(line 99,col 33)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 33)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 104,col 9)-(line 104,col 33)",
            "(line 105,col 9)-(line 105,col 35)",
            "(line 106,col 9)-(line 106,col 33)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 109,col 9)-(line 109,col 36)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 111,col 36)",
            "(line 112,col 9)-(line 112,col 34)",
            "(line 114,col 9)-(line 114,col 37)",
            "(line 115,col 9)-(line 115,col 35)",
            "(line 116,col 9)-(line 116,col 37)",
            "(line 117,col 9)-(line 117,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.ScatterRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/ScatterRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.ScatterRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        ScatterRenderer r1 = new ScatterRenderer();\n        ScatterRenderer r2 = new ScatterRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 124,
        "end_line": 131,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 51)",
            "(line 126,col 9)-(line 126,col 51)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 128,col 9)-(line 128,col 31)",
            "(line 129,col 9)-(line 129,col 31)",
            "(line 130,col 9)-(line 130,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.ScatterRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/ScatterRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.ScatterRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        ScatterRenderer r1 = new ScatterRenderer();\n        ScatterRenderer r2 = null;\n        try {\n            r2 = (ScatterRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        assertTrue(checkIndependence(r1, r2));\n        \n    }",
        "begin_line": 136,
        "end_line": 151,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 51)",
            "(line 138,col 9)-(line 138,col 34)",
            "(line 139,col 9)-(line 144,col 9)",
            "(line 145,col 9)-(line 145,col 29)",
            "(line 146,col 9)-(line 146,col 51)",
            "(line 147,col 9)-(line 147,col 34)",
            "(line 149,col 9)-(line 149,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.ScatterRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/ScatterRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.ScatterRendererTests.checkIndependence(org.jfree.chart.renderer.category.ScatterRenderer, org.jfree.chart.renderer.category.ScatterRenderer)",
        "snippet": "    private boolean checkIndependence(ScatterRenderer r1, \n            ScatterRenderer r2) {\n\n        // should be equal...\n        if (!r1.equals(r2)) {\n            return false;\n        }\n        \n        // and independent...\n        r1.setSeriesShapesFilled(1, true);\n        if (r1.equals(r2)) {\n            return false;\n        }\n        r2.setSeriesShapesFilled(1, true);\n        if (!r1.equals(r2)) {\n            return false;\n        }\n        \n        r1.setBaseShapesFilled(false);\n        r2.setBaseShapesFilled(true);\n        if (r1.equals(r2)) {\n            return false;\n        }\n        r2.setBaseShapesFilled(false);\n        if (!r1.equals(r2)) {\n            return false;\n        }\n        return true;\n    \n    }",
        "begin_line": 161,
        "end_line": 190,
        "comment": "\n     * Checks that the two renderers are equal but independent of one another.\n     * \n     * @param r1  renderer 1.\n     * @param r2  renderer 2.\n     * \n     * @return A boolean.\n     ",
        "child_ranges": [
            "(line 165,col 9)-(line 167,col 9)",
            "(line 170,col 9)-(line 170,col 42)",
            "(line 171,col 9)-(line 173,col 9)",
            "(line 174,col 9)-(line 174,col 42)",
            "(line 175,col 9)-(line 177,col 9)",
            "(line 179,col 9)-(line 179,col 38)",
            "(line 180,col 9)-(line 180,col 37)",
            "(line 181,col 9)-(line 183,col 9)",
            "(line 184,col 9)-(line 184,col 38)",
            "(line 185,col 9)-(line 187,col 9)",
            "(line 188,col 9)-(line 188,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.ScatterRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/ScatterRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.ScatterRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        ScatterRenderer r1 = new ScatterRenderer();\n        ScatterRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (ScatterRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 195,
        "end_line": 216,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 51)",
            "(line 198,col 9)-(line 198,col 34)",
            "(line 200,col 9)-(line 213,col 9)",
            "(line 214,col 9)-(line 214,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(AbstractCategoryItemRendererTests.class);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 70)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertEquals(r1, r2);\n        \n        // the plot field is NOT tested\n        \n        // toolTipGeneratorList\n        r1.setSeriesToolTipGenerator(1, new StandardCategoryToolTipGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesToolTipGenerator(1, new StandardCategoryToolTipGenerator());\n        assertTrue(r1.equals(r2));\n        \n        // baseToolTipGenerator\n        r1.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator(\"{2}\", \n                NumberFormat.getInstance()));\n        assertFalse(r1.equals(r2));\n        r2.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator(\"{2}\", \n                NumberFormat.getInstance()));\n        assertTrue(r1.equals(r2));\n        \n        // itemLabelGeneratorList\n        r1.setSeriesItemLabelGenerator(1, \n                new StandardCategoryItemLabelGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelGenerator(1, \n                new StandardCategoryItemLabelGenerator());\n        assertTrue(r1.equals(r2));\n        \n        // baseItemLabelGenerator\n        r1.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator(\n                \"{2}\", NumberFormat.getInstance()));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator(\n                \"{2}\", NumberFormat.getInstance()));\n        assertTrue(r1.equals(r2));\n        \n        // urlGeneratorList\n        r1.setSeriesURLGenerator(1, new StandardCategoryURLGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesURLGenerator(1, new StandardCategoryURLGenerator());\n        assertTrue(r1.equals(r2));\n        \n        // baseItemURLGenerator\n        r1.setBaseURLGenerator(new StandardCategoryURLGenerator(\n                \"abc.html\"));\n        assertFalse(r1.equals(r2));\n        r2.setBaseURLGenerator(new StandardCategoryURLGenerator(\n                \"abc.html\"));\n        assertTrue(r1.equals(r2));\n        \n        // legendItemLabelGenerator\n        r1.setLegendItemLabelGenerator(new StandardCategorySeriesLabelGenerator(\n                \"XYZ\"));\n        assertFalse(r1.equals(r2));\n        r2.setLegendItemLabelGenerator(new StandardCategorySeriesLabelGenerator(\n                \"XYZ\"));\n        assertTrue(r1.equals(r2));\n        \n        // legendItemToolTipGenerator\n        r1.setLegendItemToolTipGenerator(\n                new StandardCategorySeriesLabelGenerator(\"ToolTip\"));\n        assertFalse(r1.equals(r2));\n        r2.setLegendItemToolTipGenerator(\n                new StandardCategorySeriesLabelGenerator(\"ToolTip\"));\n        assertTrue(r1.equals(r2));\n\n        // legendItemURLGenerator\n        r1.setLegendItemURLGenerator(\n                new StandardCategorySeriesLabelGenerator(\"URL\"));\n        assertFalse(r1.equals(r2));\n        r2.setLegendItemURLGenerator(\n                new StandardCategorySeriesLabelGenerator(\"URL\"));\n        assertTrue(r1.equals(r2));\n        \n        // background annotation\n        r1.addAnnotation(new CategoryTextAnnotation(\"ABC\", \"A\", 2.0), \n                Layer.BACKGROUND);\n        assertFalse(r1.equals(r2));\n        r2.addAnnotation(new CategoryTextAnnotation(\"ABC\", \"A\", 2.0), \n                Layer.BACKGROUND);\n        assertTrue(r1.equals(r2));\n        \n        // foreground annotation\n        r1.addAnnotation(new CategoryTextAnnotation(\"DEF\", \"B\", 4.0),\n                Layer.FOREGROUND);\n        assertFalse(r1.equals(r2));\n        r2.addAnnotation(new CategoryTextAnnotation(\"DEF\", \"B\", 4.0), \n                Layer.FOREGROUND);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 80,
        "end_line": 170,
        "comment": "\n     * Checks that all fields are distinguished.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 43)",
            "(line 82,col 9)-(line 82,col 43)",
            "(line 83,col 9)-(line 83,col 29)",
            "(line 88,col 9)-(line 88,col 80)",
            "(line 89,col 9)-(line 89,col 35)",
            "(line 90,col 9)-(line 90,col 80)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 94,col 9)-(line 95,col 45)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 98,col 45)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 102,col 9)-(line 103,col 58)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 106,col 58)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 110,col 9)-(line 111,col 52)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 114,col 52)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 118,col 9)-(line 118,col 72)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 120,col 72)",
            "(line 121,col 9)-(line 121,col 34)",
            "(line 124,col 9)-(line 125,col 29)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 128,col 29)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 132,col 9)-(line 133,col 24)",
            "(line 134,col 9)-(line 134,col 35)",
            "(line 135,col 9)-(line 136,col 24)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 140,col 9)-(line 141,col 69)",
            "(line 142,col 9)-(line 142,col 35)",
            "(line 143,col 9)-(line 144,col 69)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 148,col 9)-(line 149,col 65)",
            "(line 150,col 9)-(line 150,col 35)",
            "(line 151,col 9)-(line 152,col 65)",
            "(line 153,col 9)-(line 153,col 34)",
            "(line 156,col 9)-(line 157,col 34)",
            "(line 158,col 9)-(line 158,col 35)",
            "(line 159,col 9)-(line 160,col 34)",
            "(line 161,col 9)-(line 161,col 34)",
            "(line 164,col 9)-(line 165,col 34)",
            "(line 166,col 9)-(line 166,col 35)",
            "(line 167,col 9)-(line 168,col 34)",
            "(line 169,col 9)-(line 169,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning1()",
        "snippet": "    public void testCloning1() {\n        AbstractCategoryItemRenderer r1 = new BarRenderer();\n        r1.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());\n        AbstractCategoryItemRenderer r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        r1 = new BarRenderer();\n        r1.setSeriesItemLabelGenerator(0, \n                new StandardCategoryItemLabelGenerator());\n        r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 175,
        "end_line": 202,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 60)",
            "(line 177,col 9)-(line 177,col 79)",
            "(line 178,col 9)-(line 178,col 47)",
            "(line 179,col 9)-(line 184,col 9)",
            "(line 185,col 9)-(line 185,col 29)",
            "(line 186,col 9)-(line 186,col 51)",
            "(line 187,col 9)-(line 187,col 34)",
            "(line 189,col 9)-(line 189,col 31)",
            "(line 190,col 9)-(line 191,col 58)",
            "(line 192,col 9)-(line 192,col 18)",
            "(line 193,col 9)-(line 198,col 9)",
            "(line 199,col 9)-(line 199,col 29)",
            "(line 200,col 9)-(line 200,col 51)",
            "(line 201,col 9)-(line 201,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n        BarRenderer r1 = new BarRenderer();\n        r1.setBaseItemLabelGenerator(new IntervalCategoryItemLabelGenerator());\n        BarRenderer r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        r1 = new BarRenderer();\n        r1.setSeriesItemLabelGenerator(0, \n                new IntervalCategoryItemLabelGenerator());\n        r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 207,
        "end_line": 234,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 43)",
            "(line 209,col 9)-(line 209,col 79)",
            "(line 210,col 9)-(line 210,col 30)",
            "(line 211,col 9)-(line 216,col 9)",
            "(line 217,col 9)-(line 217,col 29)",
            "(line 218,col 9)-(line 218,col 51)",
            "(line 219,col 9)-(line 219,col 34)",
            "(line 221,col 9)-(line 221,col 31)",
            "(line 222,col 9)-(line 223,col 58)",
            "(line 224,col 9)-(line 224,col 18)",
            "(line 225,col 9)-(line 230,col 9)",
            "(line 231,col 9)-(line 231,col 29)",
            "(line 232,col 9)-(line 232,col 51)",
            "(line 233,col 9)-(line 233,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning_LegendItemLabelGenerator()",
        "snippet": "    public void testCloning_LegendItemLabelGenerator() {\n        StandardCategorySeriesLabelGenerator generator \n                = new StandardCategorySeriesLabelGenerator(\"Series {0}\");\n        BarRenderer r1 = new BarRenderer();\n        r1.setLegendItemLabelGenerator(generator);\n        BarRenderer r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check that the generator has been cloned\n        assertTrue(r1.getLegendItemLabelGenerator() \n                != r2.getLegendItemLabelGenerator());\n    }",
        "begin_line": 239,
        "end_line": 258,
        "comment": "\n     * Check that the legendItemLabelGenerator is cloned.\n     ",
        "child_ranges": [
            "(line 240,col 9)-(line 241,col 73)",
            "(line 242,col 9)-(line 242,col 43)",
            "(line 243,col 9)-(line 243,col 50)",
            "(line 244,col 9)-(line 244,col 30)",
            "(line 245,col 9)-(line 250,col 9)",
            "(line 251,col 9)-(line 251,col 29)",
            "(line 252,col 9)-(line 252,col 51)",
            "(line 253,col 9)-(line 253,col 34)",
            "(line 256,col 9)-(line 257,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning_LegendItemToolTipGenerator()",
        "snippet": "    public void testCloning_LegendItemToolTipGenerator() {\n        StandardCategorySeriesLabelGenerator generator \n                = new StandardCategorySeriesLabelGenerator(\"Series {0}\");\n        BarRenderer r1 = new BarRenderer();\n        r1.setLegendItemToolTipGenerator(generator);\n        BarRenderer r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check that the generator has been cloned\n        assertTrue(r1.getLegendItemToolTipGenerator() \n                != r2.getLegendItemToolTipGenerator());\n    }",
        "begin_line": 263,
        "end_line": 282,
        "comment": "\n     * Check that the legendItemToolTipGenerator is cloned.\n     ",
        "child_ranges": [
            "(line 264,col 9)-(line 265,col 73)",
            "(line 266,col 9)-(line 266,col 43)",
            "(line 267,col 9)-(line 267,col 52)",
            "(line 268,col 9)-(line 268,col 30)",
            "(line 269,col 9)-(line 274,col 9)",
            "(line 275,col 9)-(line 275,col 29)",
            "(line 276,col 9)-(line 276,col 51)",
            "(line 277,col 9)-(line 277,col 34)",
            "(line 280,col 9)-(line 281,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning_LegendItemURLGenerator()",
        "snippet": "    public void testCloning_LegendItemURLGenerator() {\n        StandardCategorySeriesLabelGenerator generator \n                = new StandardCategorySeriesLabelGenerator(\"Series {0}\");\n        BarRenderer r1 = new BarRenderer();\n        r1.setLegendItemURLGenerator(generator);\n        BarRenderer r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check that the generator has been cloned\n        assertTrue(r1.getLegendItemURLGenerator() \n                != r2.getLegendItemURLGenerator());\n    }",
        "begin_line": 287,
        "end_line": 306,
        "comment": "\n     * Check that the legendItemURLGenerator is cloned.\n     ",
        "child_ranges": [
            "(line 288,col 9)-(line 289,col 73)",
            "(line 290,col 9)-(line 290,col 43)",
            "(line 291,col 9)-(line 291,col 48)",
            "(line 292,col 9)-(line 292,col 30)",
            "(line 293,col 9)-(line 298,col 9)",
            "(line 299,col 9)-(line 299,col 29)",
            "(line 300,col 9)-(line 300,col 51)",
            "(line 301,col 9)-(line 301,col 34)",
            "(line 304,col 9)-(line 305,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testGetSeriesItemLabelGenerator()",
        "snippet": "    public void testGetSeriesItemLabelGenerator() {\n        CategoryItemRenderer r = new BarRenderer();\n        assertNull(r.getSeriesItemLabelGenerator(2));\n        r.setSeriesItemLabelGenerator(2, \n                new StandardCategoryItemLabelGenerator());\n        assertNotNull(r.getSeriesItemLabelGenerator(2));\n        r.setSeriesItemLabelGenerator(2, null);\n        assertNull(r.getSeriesItemLabelGenerator(2));\n        r.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());\n        assertNull(r.getSeriesItemLabelGenerator(2));\n    }",
        "begin_line": 312,
        "end_line": 322,
        "comment": "\n     * Check that the getSeriesItemLabelGenerator() method behaves as \n     * expected.\n     ",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 51)",
            "(line 314,col 9)-(line 314,col 53)",
            "(line 315,col 9)-(line 316,col 58)",
            "(line 317,col 9)-(line 317,col 56)",
            "(line 318,col 9)-(line 318,col 47)",
            "(line 319,col 9)-(line 319,col 53)",
            "(line 320,col 9)-(line 320,col 78)",
            "(line 321,col 9)-(line 321,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testGetSeriesURLGenerator()",
        "snippet": "    public void testGetSeriesURLGenerator() {\n        CategoryItemRenderer r = new BarRenderer();\n        assertNull(r.getSeriesURLGenerator(2));\n        r.setSeriesURLGenerator(2, new StandardCategoryURLGenerator());\n        assertNotNull(r.getSeriesURLGenerator(2));\n        r.setSeriesURLGenerator(2, null);\n        assertNull(r.getSeriesURLGenerator(2));\n        r.setBaseURLGenerator(new StandardCategoryURLGenerator());\n        assertNull(r.getSeriesURLGenerator(2));\n    }",
        "begin_line": 327,
        "end_line": 336,
        "comment": "\n     * Check that the getSeriesURLGenerator() method behaves as expected.\n     ",
        "child_ranges": [
            "(line 328,col 9)-(line 328,col 51)",
            "(line 329,col 9)-(line 329,col 47)",
            "(line 330,col 9)-(line 330,col 71)",
            "(line 331,col 9)-(line 331,col 50)",
            "(line 332,col 9)-(line 332,col 41)",
            "(line 333,col 9)-(line 333,col 47)",
            "(line 334,col 9)-(line 334,col 66)",
            "(line 335,col 9)-(line 335,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/DefaultCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultCategoryItemRendererTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 69)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/DefaultCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests.DefaultCategoryItemRendererTests(java.lang.String)",
        "snippet": "    public DefaultCategoryItemRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/DefaultCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultCategoryItemRenderer r1 = new DefaultCategoryItemRenderer();\n        DefaultCategoryItemRenderer r2 = new DefaultCategoryItemRenderer();\n        assertEquals(r1, r2);\n    }",
        "begin_line": 83,
        "end_line": 87,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 75)",
            "(line 85,col 9)-(line 85,col 75)",
            "(line 86,col 9)-(line 86,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/DefaultCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        DefaultCategoryItemRenderer r1 = new DefaultCategoryItemRenderer();\n        DefaultCategoryItemRenderer r2 = new DefaultCategoryItemRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 92,
        "end_line": 99,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 75)",
            "(line 94,col 9)-(line 94,col 75)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 96,col 9)-(line 96,col 31)",
            "(line 97,col 9)-(line 97,col 31)",
            "(line 98,col 9)-(line 98,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/DefaultCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultCategoryItemRenderer r1 = new DefaultCategoryItemRenderer();\n        DefaultCategoryItemRenderer r2 = null;\n        try {\n            r2 = (DefaultCategoryItemRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 104,
        "end_line": 116,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 75)",
            "(line 106,col 9)-(line 106,col 46)",
            "(line 107,col 9)-(line 112,col 9)",
            "(line 113,col 9)-(line 113,col 29)",
            "(line 114,col 9)-(line 114,col 51)",
            "(line 115,col 9)-(line 115,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/DefaultCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultCategoryItemRenderer r1 = new DefaultCategoryItemRenderer();\n        DefaultCategoryItemRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (DefaultCategoryItemRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 121,
        "end_line": 143,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 75)",
            "(line 124,col 9)-(line 124,col 46)",
            "(line 126,col 9)-(line 140,col 9)",
            "(line 141,col 9)-(line 141,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineRenderer3DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LineRenderer3DTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineRenderer3DTests.LineRenderer3DTests(java.lang.String)",
        "snippet": "    public LineRenderer3DTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineRenderer3DTests.testEquals()",
        "snippet": "    public void testEquals() {\n        LineRenderer3D r1 = new LineRenderer3D();\n        LineRenderer3D r2 = new LineRenderer3D();\n        assertEquals(r1, r2);\n        \n        r1.setXOffset(99.9);\n        assertFalse(r1.equals(r2));\n        r2.setXOffset(99.9);\n        assertTrue(r1.equals(r2));\n        \n        r1.setYOffset(111.1);\n        assertFalse(r1.equals(r2));\n        r2.setYOffset(111.1);\n        assertTrue(r1.equals(r2));\n        \n        r1.setWallPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.blue));\n        assertFalse(r1.equals(r2));\n        r2.setWallPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.blue));\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 84,
        "end_line": 105,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 49)",
            "(line 86,col 9)-(line 86,col 49)",
            "(line 87,col 9)-(line 87,col 29)",
            "(line 89,col 9)-(line 89,col 28)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 28)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 94,col 29)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 29)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 99,col 9)-(line 100,col 29)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 103,col 29)",
            "(line 104,col 9)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineRenderer3DTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        LineRenderer3D r1 = new LineRenderer3D();\n        LineRenderer3D r2 = new LineRenderer3D();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 110,
        "end_line": 117,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 49)",
            "(line 112,col 9)-(line 112,col 49)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 114,col 9)-(line 114,col 31)",
            "(line 115,col 9)-(line 115,col 31)",
            "(line 116,col 9)-(line 116,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineRenderer3DTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LineRenderer3D r1 = new LineRenderer3D();\n        LineRenderer3D r2 = null;\n        try {\n            r2 = (LineRenderer3D) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        assertTrue(checkIndependence(r1, r2));\n        \n    }",
        "begin_line": 122,
        "end_line": 137,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 49)",
            "(line 124,col 9)-(line 124,col 33)",
            "(line 125,col 9)-(line 130,col 9)",
            "(line 131,col 9)-(line 131,col 29)",
            "(line 132,col 9)-(line 132,col 51)",
            "(line 133,col 9)-(line 133,col 34)",
            "(line 135,col 9)-(line 135,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineRenderer3DTests.checkIndependence(org.jfree.chart.renderer.category.LineRenderer3D, org.jfree.chart.renderer.category.LineRenderer3D)",
        "snippet": "    private boolean checkIndependence(LineRenderer3D r1, LineRenderer3D r2) {\n\n        // should be equal...\n        boolean b0 = r1.equals(r2);\n        \n        // and independent...\n        r1.setBaseLinesVisible(!r1.getBaseLinesVisible());\n        if (r1.equals(r2)) {\n            return false;\n        }\n        r2.setBaseLinesVisible(r1.getBaseLinesVisible());\n        if (!r1.equals(r2)) {\n            return false;\n        }\n\n        r1.setSeriesLinesVisible(1, true);\n        if (r1.equals(r2)) {\n            return false;\n        }\n        r2.setSeriesLinesVisible(1, true);\n        if (!r1.equals(r2)) {\n            return false;\n        }\n                \n        r1.setBaseShapesVisible(!r1.getBaseShapesVisible());\n        if (r1.equals(r2)) {\n            return false;\n        }\n        r2.setBaseShapesVisible(r1.getBaseShapesVisible());\n        if (!r1.equals(r2)) {\n            return false;\n        }\n\n        r1.setSeriesShapesVisible(1, true);\n        if (r1.equals(r2)) {\n            return false;\n        }\n        r2.setSeriesShapesVisible(1, true);\n        if (!r1.equals(r2)) {\n            return false;\n        }\n\n        r1.setSeriesShapesFilled(0, false);\n        r2.setSeriesShapesFilled(0, true);\n        boolean b7 = !r1.equals(r2);\n        r2.setSeriesShapesFilled(0, false);\n        boolean b8 = (r1.equals(r2));\n        \n        r1.setBaseShapesFilled(false);\n        r2.setBaseShapesFilled(true);\n        boolean b9 = !r1.equals(r2);\n        r2.setBaseShapesFilled(false);\n        boolean b10 = (r1.equals(r2));\n        \n        return b0 && b7 && b8 && b9 && b10;\n    \n    }",
        "begin_line": 147,
        "end_line": 203,
        "comment": "\n     * Checks that the two renderers are equal but independent of one another.\n     * \n     * @param r1  renderer 1.\n     * @param r2  renderer 2.\n     * \n     * @return A boolean.\n     ",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 35)",
            "(line 153,col 9)-(line 153,col 58)",
            "(line 154,col 9)-(line 156,col 9)",
            "(line 157,col 9)-(line 157,col 57)",
            "(line 158,col 9)-(line 160,col 9)",
            "(line 162,col 9)-(line 162,col 42)",
            "(line 163,col 9)-(line 165,col 9)",
            "(line 166,col 9)-(line 166,col 42)",
            "(line 167,col 9)-(line 169,col 9)",
            "(line 171,col 9)-(line 171,col 60)",
            "(line 172,col 9)-(line 174,col 9)",
            "(line 175,col 9)-(line 175,col 59)",
            "(line 176,col 9)-(line 178,col 9)",
            "(line 180,col 9)-(line 180,col 43)",
            "(line 181,col 9)-(line 183,col 9)",
            "(line 184,col 9)-(line 184,col 43)",
            "(line 185,col 9)-(line 187,col 9)",
            "(line 189,col 9)-(line 189,col 43)",
            "(line 190,col 9)-(line 190,col 42)",
            "(line 191,col 9)-(line 191,col 36)",
            "(line 192,col 9)-(line 192,col 43)",
            "(line 193,col 9)-(line 193,col 37)",
            "(line 195,col 9)-(line 195,col 38)",
            "(line 196,col 9)-(line 196,col 37)",
            "(line 197,col 9)-(line 197,col 36)",
            "(line 198,col 9)-(line 198,col 38)",
            "(line 199,col 9)-(line 199,col 38)",
            "(line 201,col 9)-(line 201,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LineRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LineRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LineRenderer3DTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        LineRenderer3D r1 = new LineRenderer3D();\n        LineRenderer3D r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            r2 = (LineRenderer3D) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 208,
        "end_line": 226,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 49)",
            "(line 210,col 9)-(line 210,col 33)",
            "(line 211,col 9)-(line 224,col 9)",
            "(line 225,col 9)-(line 225,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.CategoryStepRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/CategoryStepRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.CategoryStepRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryStepRendererTests.class);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.CategoryStepRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/CategoryStepRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.CategoryStepRendererTests.CategoryStepRendererTests(java.lang.String)",
        "snippet": "    public CategoryStepRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.CategoryStepRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/CategoryStepRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.CategoryStepRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        CategoryStepRenderer r1 = new CategoryStepRenderer(false);\n        CategoryStepRenderer r2 = new CategoryStepRenderer(false);\n        assertEquals(r1, r2);\n        \n        r1 = new CategoryStepRenderer(true);\n        assertFalse(r1.equals(r2));\n        r2 = new CategoryStepRenderer(true);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 90,
        "end_line": 99,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 66)",
            "(line 92,col 9)-(line 92,col 66)",
            "(line 93,col 9)-(line 93,col 29)",
            "(line 95,col 9)-(line 95,col 44)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 44)",
            "(line 98,col 9)-(line 98,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.CategoryStepRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/CategoryStepRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.CategoryStepRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CategoryStepRenderer r1 = new CategoryStepRenderer(false);\n        CategoryStepRenderer r2 = null;\n        try {\n            r2 = (CategoryStepRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 104,
        "end_line": 116,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 66)",
            "(line 106,col 9)-(line 106,col 39)",
            "(line 107,col 9)-(line 112,col 9)",
            "(line 113,col 9)-(line 113,col 29)",
            "(line 114,col 9)-(line 114,col 51)",
            "(line 115,col 9)-(line 115,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.CategoryStepRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/CategoryStepRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.CategoryStepRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CategoryStepRenderer r1 = new CategoryStepRenderer();\n        CategoryStepRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (CategoryStepRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 121,
        "end_line": 142,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 61)",
            "(line 124,col 9)-(line 124,col 39)",
            "(line 126,col 9)-(line 139,col 9)",
            "(line 140,col 9)-(line 140,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.CategoryStepRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/CategoryStepRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.CategoryStepRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        DefaultCategoryDataset dataset0 = new DefaultCategoryDataset();\n        dataset0.addValue(21.0, \"R1\", \"C1\");\n        dataset0.addValue(22.0, \"R2\", \"C1\");        \n        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n        dataset1.addValue(23.0, \"R3\", \"C1\");\n        dataset1.addValue(24.0, \"R4\", \"C1\");        \n        dataset1.addValue(25.0, \"R5\", \"C1\");        \n        CategoryStepRenderer r = new CategoryStepRenderer();\n        CategoryPlot plot = new CategoryPlot(dataset0, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, dataset1);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"R5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 148,
        "end_line": 165,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 71)",
            "(line 150,col 9)-(line 150,col 44)",
            "(line 151,col 9)-(line 151,col 44)",
            "(line 152,col 9)-(line 152,col 71)",
            "(line 153,col 9)-(line 153,col 44)",
            "(line 154,col 9)-(line 154,col 44)",
            "(line 155,col 9)-(line 155,col 44)",
            "(line 156,col 9)-(line 156,col 60)",
            "(line 157,col 9)-(line 158,col 40)",
            "(line 159,col 9)-(line 159,col 37)",
            "(line 160,col 32)-(line 160,col 52)",
            "(line 161,col 9)-(line 161,col 46)",
            "(line 162,col 9)-(line 162,col 42)",
            "(line 163,col 9)-(line 163,col 46)",
            "(line 164,col 9)-(line 164,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StatisticalBarRendererTests.class);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.StatisticalBarRendererTests(java.lang.String)",
        "snippet": "    public StatisticalBarRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StatisticalBarRenderer r1 = new StatisticalBarRenderer();\n        StatisticalBarRenderer r2 = new StatisticalBarRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setErrorIndicatorPaint(Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setErrorIndicatorPaint(Color.red);\n        assertTrue(r2.equals(r1));\n    }",
        "begin_line": 90,
        "end_line": 99,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 65)",
            "(line 92,col 9)-(line 92,col 65)",
            "(line 93,col 9)-(line 93,col 29)",
            "(line 95,col 9)-(line 95,col 45)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 45)",
            "(line 98,col 9)-(line 98,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        StatisticalBarRenderer r1 = new StatisticalBarRenderer();\n        StatisticalBarRenderer r2 = new StatisticalBarRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 104,
        "end_line": 111,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 65)",
            "(line 106,col 9)-(line 106,col 65)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 108,col 9)-(line 108,col 31)",
            "(line 109,col 9)-(line 109,col 31)",
            "(line 110,col 9)-(line 110,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StatisticalBarRenderer r1 = new StatisticalBarRenderer();\n        StatisticalBarRenderer r2 = null;\n        try {\n            r2 = (StatisticalBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 116,
        "end_line": 128,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 65)",
            "(line 118,col 9)-(line 118,col 41)",
            "(line 119,col 9)-(line 124,col 9)",
            "(line 125,col 9)-(line 125,col 29)",
            "(line 126,col 9)-(line 126,col 51)",
            "(line 127,col 9)-(line 127,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StatisticalBarRenderer r1 = new StatisticalBarRenderer();\n        StatisticalBarRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            r2 = (StatisticalBarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 133,
        "end_line": 154,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 65)",
            "(line 136,col 9)-(line 136,col 41)",
            "(line 138,col 9)-(line 151,col 9)",
            "(line 152,col 9)-(line 152,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultStatisticalCategoryDataset dataset \n                    = new DefaultStatisticalCategoryDataset();\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n            dataset.add(3.0, 4.0, \"S1\", \"C2\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new StatisticalBarRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 160,
        "end_line": 180,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 32)",
            "(line 162,col 9)-(line 178,col 9)",
            "(line 179,col 9)-(line 179,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullMeanVertical()",
        "snippet": "    public void testDrawWithNullMeanVertical() {\n        boolean success = false;\n        try {\n            DefaultStatisticalCategoryDataset dataset \n                    = new DefaultStatisticalCategoryDataset();\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n            dataset.add(null, new Double(4.0), \"S1\", \"C2\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new StatisticalBarRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 187,
        "end_line": 207,
        "comment": "\n     * Draws the chart with a <code>null</code> mean value to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).  See\n     * bug report 1779941.\n     ",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 32)",
            "(line 189,col 9)-(line 205,col 9)",
            "(line 206,col 9)-(line 206,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullMeanHorizontal()",
        "snippet": "    public void testDrawWithNullMeanHorizontal() {\n        boolean success = false;\n        try {\n            DefaultStatisticalCategoryDataset dataset \n                    = new DefaultStatisticalCategoryDataset();\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n            dataset.add(null, new Double(4.0), \"S1\", \"C2\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new StatisticalBarRenderer());\n            plot.setOrientation(PlotOrientation.HORIZONTAL);\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 214,
        "end_line": 235,
        "comment": "\n     * Draws the chart with a <code>null</code> mean value to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).  See\n     * bug report 1779941.\n     ",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 32)",
            "(line 216,col 9)-(line 233,col 9)",
            "(line 234,col 9)-(line 234,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullDeviationVertical()",
        "snippet": "    public void testDrawWithNullDeviationVertical() {\n        boolean success = false;\n        try {\n            DefaultStatisticalCategoryDataset dataset \n                    = new DefaultStatisticalCategoryDataset();\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n            dataset.add(new Double(4.0), null, \"S1\", \"C2\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new StatisticalBarRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 242,
        "end_line": 262,
        "comment": "\n     * Draws the chart with a <code>null</code> standard deviation to make sure \n     * that no exceptions are thrown (particularly by code in the renderer).  \n     * See bug report 1779941.\n     ",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 32)",
            "(line 244,col 9)-(line 260,col 9)",
            "(line 261,col 9)-(line 261,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullDeviationHorizontal()",
        "snippet": "    public void testDrawWithNullDeviationHorizontal() {\n        boolean success = false;\n        try {\n            DefaultStatisticalCategoryDataset dataset \n                    = new DefaultStatisticalCategoryDataset();\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n            dataset.add(new Double(4.0), null, \"S1\", \"C2\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new StatisticalBarRenderer());\n            plot.setOrientation(PlotOrientation.HORIZONTAL);\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 269,
        "end_line": 290,
        "comment": "\n     * Draws the chart with a <code>null</code> standard deviation to make sure \n     * that no exceptions are thrown (particularly by code in the renderer).  \n     * See bug report 1779941.\n     ",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 32)",
            "(line 271,col 9)-(line 288,col 9)",
            "(line 289,col 9)-(line 289,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LayeredBarRendererTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.LayeredBarRendererTests(java.lang.String)",
        "snippet": "    public LayeredBarRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        LayeredBarRenderer r1 = new LayeredBarRenderer();\n        LayeredBarRenderer r2 = new LayeredBarRenderer();\n        assertEquals(r1, r2);\n    }",
        "begin_line": 87,
        "end_line": 91,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 57)",
            "(line 89,col 9)-(line 89,col 57)",
            "(line 90,col 9)-(line 90,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        LayeredBarRenderer r1 = new LayeredBarRenderer();\n        LayeredBarRenderer r2 = new LayeredBarRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 96,
        "end_line": 103,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 57)",
            "(line 98,col 9)-(line 98,col 57)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 100,col 9)-(line 100,col 31)",
            "(line 101,col 9)-(line 101,col 31)",
            "(line 102,col 9)-(line 102,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LayeredBarRenderer r1 = new LayeredBarRenderer();\n        LayeredBarRenderer r2 = null;\n        try {\n            r2 = (LayeredBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 108,
        "end_line": 120,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 57)",
            "(line 110,col 9)-(line 110,col 37)",
            "(line 111,col 9)-(line 116,col 9)",
            "(line 117,col 9)-(line 117,col 29)",
            "(line 118,col 9)-(line 118,col 51)",
            "(line 119,col 9)-(line 119,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        LayeredBarRenderer r1 = new LayeredBarRenderer();\n        LayeredBarRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (LayeredBarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 125,
        "end_line": 147,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 57)",
            "(line 128,col 9)-(line 128,col 37)",
            "(line 130,col 9)-(line 144,col 9)",
            "(line 145,col 9)-(line 145,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n            dataset.addValue(1.0, \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new LayeredBarRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 153,
        "end_line": 171,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 32)",
            "(line 155,col 9)-(line 169,col 9)",
            "(line 170,col 9)-(line 170,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AreaRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(AreaRendererTests.class);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AreaRendererTests.AreaRendererTests(java.lang.String)",
        "snippet": "    public AreaRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AreaRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        AreaRenderer r1 = new AreaRenderer();\n        AreaRenderer r2 = new AreaRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setEndType(AreaRendererEndType.LEVEL);\n        assertFalse(r1.equals(r2));\n        r2.setEndType(AreaRendererEndType.LEVEL);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 92,
        "end_line": 101,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 45)",
            "(line 94,col 9)-(line 94,col 45)",
            "(line 95,col 9)-(line 95,col 29)",
            "(line 97,col 9)-(line 97,col 49)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 49)",
            "(line 100,col 9)-(line 100,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AreaRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        AreaRenderer r1 = new AreaRenderer();\n        AreaRenderer r2 = new AreaRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 106,
        "end_line": 113,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 45)",
            "(line 108,col 9)-(line 108,col 45)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 110,col 9)-(line 110,col 31)",
            "(line 111,col 9)-(line 111,col 31)",
            "(line 112,col 9)-(line 112,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AreaRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        AreaRenderer r1 = new AreaRenderer();\n        AreaRenderer r2 = null;\n        try {\n            r2 = (AreaRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 118,
        "end_line": 130,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 45)",
            "(line 120,col 9)-(line 120,col 31)",
            "(line 121,col 9)-(line 126,col 9)",
            "(line 127,col 9)-(line 127,col 29)",
            "(line 128,col 9)-(line 128,col 51)",
            "(line 129,col 9)-(line 129,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AreaRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        AreaRenderer r1 = new AreaRenderer();\n        AreaRenderer r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (AreaRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 135,
        "end_line": 153,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 45)",
            "(line 137,col 9)-(line 137,col 31)",
            "(line 138,col 9)-(line 151,col 9)",
            "(line 152,col 9)-(line 152,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AreaRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        DefaultCategoryDataset dataset0 = new DefaultCategoryDataset();\n        dataset0.addValue(21.0, \"R1\", \"C1\");\n        dataset0.addValue(22.0, \"R2\", \"C1\");        \n        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n        dataset1.addValue(23.0, \"R3\", \"C1\");\n        dataset1.addValue(24.0, \"R4\", \"C1\");        \n        dataset1.addValue(25.0, \"R5\", \"C1\");        \n        AreaRenderer r = new AreaRenderer();\n        CategoryPlot plot = new CategoryPlot(dataset0, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, dataset1);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"R5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 159,
        "end_line": 176,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 71)",
            "(line 161,col 9)-(line 161,col 44)",
            "(line 162,col 9)-(line 162,col 44)",
            "(line 163,col 9)-(line 163,col 71)",
            "(line 164,col 9)-(line 164,col 44)",
            "(line 165,col 9)-(line 165,col 44)",
            "(line 166,col 9)-(line 166,col 44)",
            "(line 167,col 9)-(line 167,col 44)",
            "(line 168,col 9)-(line 169,col 40)",
            "(line 170,col 9)-(line 170,col 37)",
            "(line 171,col 32)-(line 171,col 52)",
            "(line 172,col 9)-(line 172,col 46)",
            "(line 173,col 9)-(line 173,col 42)",
            "(line 174,col 9)-(line 174,col 46)",
            "(line 175,col 9)-(line 175,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StackedBarRendererTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRendererTests.StackedBarRendererTests(java.lang.String)",
        "snippet": "    public StackedBarRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StackedBarRenderer r1 = new StackedBarRenderer();\n        StackedBarRenderer r2 = new StackedBarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        r1.setRenderAsPercentages(true);\n        assertFalse(r1.equals(r2));\n        r2.setRenderAsPercentages(true);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 82,
        "end_line": 92,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 57)",
            "(line 84,col 9)-(line 84,col 57)",
            "(line 85,col 9)-(line 85,col 34)",
            "(line 86,col 9)-(line 86,col 34)",
            "(line 88,col 9)-(line 88,col 40)",
            "(line 89,col 9)-(line 89,col 35)",
            "(line 90,col 9)-(line 90,col 40)",
            "(line 91,col 9)-(line 91,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRendererTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        StackedBarRenderer r1 = new StackedBarRenderer();\n        StackedBarRenderer r2 = new StackedBarRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 97,
        "end_line": 104,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 57)",
            "(line 99,col 9)-(line 99,col 57)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 101,col 9)-(line 101,col 31)",
            "(line 102,col 9)-(line 102,col 31)",
            "(line 103,col 9)-(line 103,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StackedBarRenderer r1 = new StackedBarRenderer();\n        StackedBarRenderer r2 = null;\n        try {\n            r2 = (StackedBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 109,
        "end_line": 121,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 57)",
            "(line 111,col 9)-(line 111,col 37)",
            "(line 112,col 9)-(line 117,col 9)",
            "(line 118,col 9)-(line 118,col 29)",
            "(line 119,col 9)-(line 119,col 51)",
            "(line 120,col 9)-(line 120,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StackedBarRenderer r1 = new StackedBarRenderer();\n        StackedBarRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (StackedBarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 126,
        "end_line": 148,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 57)",
            "(line 129,col 9)-(line 129,col 37)",
            "(line 131,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 146,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MinMaxCategoryRendererTests.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.MinMaxCategoryRendererTests(java.lang.String)",
        "snippet": "    public MinMaxCategoryRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();\n        MinMaxCategoryRenderer r2 = new MinMaxCategoryRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setDrawLines(true);\n        assertFalse(r1.equals(r2));\n        r2.setDrawLines(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setGroupPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.yellow));\n        assertFalse(r1.equals(r2));\n        r2.setGroupPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.yellow));\n        assertTrue(r1.equals(r2));\n        \n        r1.setGroupStroke(new BasicStroke(1.2f));\n        assertFalse(r1.equals(r2));\n        r2.setGroupStroke(new BasicStroke(1.2f));\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 91,
        "end_line": 112,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 65)",
            "(line 93,col 9)-(line 93,col 65)",
            "(line 94,col 9)-(line 94,col 29)",
            "(line 96,col 9)-(line 96,col 30)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 30)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 102,col 31)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 105,col 31)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 108,col 9)-(line 108,col 49)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 110,col 49)",
            "(line 111,col 9)-(line 111,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();\n        MinMaxCategoryRenderer r2 = new MinMaxCategoryRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 117,
        "end_line": 124,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 65)",
            "(line 119,col 9)-(line 119,col 65)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 121,col 9)-(line 121,col 31)",
            "(line 122,col 9)-(line 122,col 31)",
            "(line 123,col 9)-(line 123,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();\n        MinMaxCategoryRenderer r2 = null;\n        try {\n            r2 = (MinMaxCategoryRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 129,
        "end_line": 141,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 65)",
            "(line 131,col 9)-(line 131,col 41)",
            "(line 132,col 9)-(line 137,col 9)",
            "(line 138,col 9)-(line 138,col 29)",
            "(line 139,col 9)-(line 139,col 51)",
            "(line 140,col 9)-(line 140,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();\n        MinMaxCategoryRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (MinMaxCategoryRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 146,
        "end_line": 167,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 65)",
            "(line 149,col 9)-(line 149,col 41)",
            "(line 151,col 9)-(line 164,col 9)",
            "(line 165,col 9)-(line 165,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n            dataset.addValue(1.0, \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new MinMaxCategoryRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 173,
        "end_line": 191,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 32)",
            "(line 175,col 9)-(line 189,col 9)",
            "(line 190,col 9)-(line 190,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRenderer3DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BarRenderer3DTests.class);\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRenderer3DTests.BarRenderer3DTests(java.lang.String)",
        "snippet": "    public BarRenderer3DTests(String name) {\n        super(name);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRenderer3DTests.testEquals()",
        "snippet": "    public void testEquals() {\n        BarRenderer3D r1 = new BarRenderer3D(1.0, 2.0);\n        BarRenderer3D r2 = new BarRenderer3D(1.0, 2.0);\n        assertEquals(r1, r2);\n        \n        r1 = new BarRenderer3D(1.1, 2.0);\n        assertFalse(r1.equals(r2));\n        r2 = new BarRenderer3D(1.1, 2.0);\n        assertTrue(r1.equals(r2));\n        \n        r1 = new BarRenderer3D(1.1, 2.2);\n        assertFalse(r1.equals(r2));\n        r2 = new BarRenderer3D(1.1, 2.2);\n        assertTrue(r1.equals(r2));\n\n        r1.setWallPaint(new GradientPaint(1.0f, 2.0f, Color.red, 4.0f, 3.0f, \n                Color.blue));\n        assertFalse(r1.equals(r2));\n        r2.setWallPaint(new GradientPaint(1.0f, 2.0f, Color.red, 4.0f, 3.0f, \n                Color.blue));\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 86,
        "end_line": 107,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 55)",
            "(line 88,col 9)-(line 88,col 55)",
            "(line 89,col 9)-(line 89,col 29)",
            "(line 91,col 9)-(line 91,col 41)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 41)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 96,col 41)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 41)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 102,col 29)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 105,col 29)",
            "(line 106,col 9)-(line 106,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRenderer3DTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        BarRenderer3D r1 = new BarRenderer3D();\n        BarRenderer3D r2 = new BarRenderer3D();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 112,
        "end_line": 119,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 47)",
            "(line 114,col 9)-(line 114,col 47)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 116,col 9)-(line 116,col 31)",
            "(line 117,col 9)-(line 117,col 31)",
            "(line 118,col 9)-(line 118,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRenderer3DTests.testCloning()",
        "snippet": "    public void testCloning() {\n        BarRenderer3D r1 = new BarRenderer3D();\n        BarRenderer3D r2 = null;\n        try {\n            r2 = (BarRenderer3D) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 124,
        "end_line": 136,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 47)",
            "(line 126,col 9)-(line 126,col 32)",
            "(line 127,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 133,col 29)",
            "(line 134,col 9)-(line 134,col 51)",
            "(line 135,col 9)-(line 135,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BarRenderer3DTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        BarRenderer3D r1 = new BarRenderer3D();\n        r1.setWallPaint(new GradientPaint(1.0f, 2.0f, Color.red, 4.0f, 3.0f, \n                Color.blue));\n        BarRenderer3D r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (BarRenderer3D) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 141,
        "end_line": 161,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 47)",
            "(line 143,col 9)-(line 144,col 29)",
            "(line 145,col 9)-(line 145,col 32)",
            "(line 146,col 9)-(line 159,col 9)",
            "(line 160,col 9)-(line 160,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GanttRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GanttRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GanttRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(GanttRendererTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GanttRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GanttRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GanttRendererTests.GanttRendererTests(java.lang.String)",
        "snippet": "    public GanttRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GanttRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GanttRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GanttRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        GanttRenderer r1 = new GanttRenderer();\n        GanttRenderer r2 = new GanttRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setCompletePaint(Color.yellow);\n        assertFalse(r1.equals(r2));\n        r2.setCompletePaint(Color.yellow);\n        assertTrue(r1.equals(r2));\n        \n        r1.setIncompletePaint(Color.green);\n        assertFalse(r1.equals(r2));\n        r2.setIncompletePaint(Color.green);\n        assertTrue(r1.equals(r2));\n\n        r1.setStartPercent(0.11);\n        assertFalse(r1.equals(r2));\n        r2.setStartPercent(0.11);\n        assertTrue(r1.equals(r2));\n\n        r1.setEndPercent(0.88);\n        assertFalse(r1.equals(r2));\n        r2.setEndPercent(0.88);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 85,
        "end_line": 109,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 47)",
            "(line 87,col 9)-(line 87,col 47)",
            "(line 88,col 9)-(line 88,col 29)",
            "(line 90,col 9)-(line 90,col 42)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 92,col 9)-(line 92,col 42)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 95,col 9)-(line 95,col 43)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 43)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 100,col 9)-(line 100,col 33)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 33)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 105,col 9)-(line 105,col 31)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 107,col 31)",
            "(line 108,col 9)-(line 108,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GanttRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GanttRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GanttRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        GanttRenderer r1 = new GanttRenderer();\n        GanttRenderer r2 = new GanttRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 114,
        "end_line": 121,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 47)",
            "(line 116,col 9)-(line 116,col 47)",
            "(line 117,col 9)-(line 117,col 34)",
            "(line 118,col 9)-(line 118,col 31)",
            "(line 119,col 9)-(line 119,col 31)",
            "(line 120,col 9)-(line 120,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GanttRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GanttRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GanttRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        GanttRenderer r1 = new GanttRenderer();\n        GanttRenderer r2 = null;\n        try {\n            r2 = (GanttRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 126,
        "end_line": 138,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 47)",
            "(line 128,col 9)-(line 128,col 32)",
            "(line 129,col 9)-(line 134,col 9)",
            "(line 135,col 9)-(line 135,col 29)",
            "(line 136,col 9)-(line 136,col 51)",
            "(line 137,col 9)-(line 137,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GanttRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GanttRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GanttRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        GanttRenderer r1 = new GanttRenderer();\n        r1.setCompletePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.blue));\n        r1.setIncompletePaint(new GradientPaint(4.0f, 3.0f, Color.red, 2.0f, \n                1.0f, Color.blue));\n        GanttRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (GanttRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 143,
        "end_line": 168,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 47)",
            "(line 146,col 9)-(line 147,col 35)",
            "(line 148,col 9)-(line 149,col 35)",
            "(line 150,col 9)-(line 150,col 32)",
            "(line 152,col 9)-(line 165,col 9)",
            "(line 166,col 9)-(line 166,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BoxAndWhiskerRendererTests.class);\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.BoxAndWhiskerRendererTests(java.lang.String)",
        "snippet": "    public BoxAndWhiskerRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        BoxAndWhiskerRenderer r1 = new BoxAndWhiskerRenderer();\n        BoxAndWhiskerRenderer r2 = new BoxAndWhiskerRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setArtifactPaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.blue));\n        assertFalse(r1.equals(r2));\n        r2.setArtifactPaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.blue));\n        assertEquals(r1, r2);\n        \n        r1.setFillBox(!r1.getFillBox());\n        assertFalse(r1.equals(r2));\n        r2.setFillBox(!r2.getFillBox());\n        assertEquals(r1, r2);\n        \n        r1.setItemMargin(0.11);\n        assertFalse(r1.equals(r2));\n        r2.setItemMargin(0.11);\n        assertEquals(r1, r2);\n        \n    }",
        "begin_line": 104,
        "end_line": 126,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 63)",
            "(line 106,col 9)-(line 106,col 63)",
            "(line 107,col 9)-(line 107,col 29)",
            "(line 109,col 9)-(line 110,col 41)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 114,col 29)",
            "(line 116,col 9)-(line 116,col 40)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 118,col 40)",
            "(line 119,col 9)-(line 119,col 29)",
            "(line 121,col 9)-(line 121,col 31)",
            "(line 122,col 9)-(line 122,col 35)",
            "(line 123,col 9)-(line 123,col 31)",
            "(line 124,col 9)-(line 124,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        BoxAndWhiskerRenderer r1 = new BoxAndWhiskerRenderer();\n        BoxAndWhiskerRenderer r2 = new BoxAndWhiskerRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 131,
        "end_line": 138,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 63)",
            "(line 133,col 9)-(line 133,col 63)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 135,col 9)-(line 135,col 31)",
            "(line 136,col 9)-(line 136,col 31)",
            "(line 137,col 9)-(line 137,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        BoxAndWhiskerRenderer r1 = new BoxAndWhiskerRenderer();\n        BoxAndWhiskerRenderer r2 = null;\n        try {\n            r2 = (BoxAndWhiskerRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 143,
        "end_line": 155,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 63)",
            "(line 145,col 9)-(line 145,col 40)",
            "(line 146,col 9)-(line 151,col 9)",
            "(line 152,col 9)-(line 152,col 29)",
            "(line 153,col 9)-(line 153,col 51)",
            "(line 154,col 9)-(line 154,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        BoxAndWhiskerRenderer r1 = new BoxAndWhiskerRenderer();\n        BoxAndWhiskerRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (BoxAndWhiskerRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 160,
        "end_line": 181,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 63)",
            "(line 163,col 9)-(line 163,col 40)",
            "(line 165,col 9)-(line 178,col 9)",
            "(line 179,col 9)-(line 179,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset();\n            dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0),\n                    new Double(0.0), new Double(4.0), new Double(0.5), \n                    new Double(4.5), new Double(-0.5), new Double(5.5), \n                    null), \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new BoxAndWhiskerRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 187,
        "end_line": 208,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 32)",
            "(line 189,col 9)-(line 206,col 9)",
            "(line 207,col 9)-(line 207,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testBug1572478Vertical()",
        "snippet": "    public void testBug1572478Vertical() {\n        DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset() {\n                \n            public Number getQ1Value(int row, int column) {\n                return null;\n            }\n\n            public Number getQ1Value(Comparable rowKey, Comparable columnKey) {\n                return null;\n            }\n        };\n        List values = new ArrayList();\n        values.add(new Double(1.0));\n        values.add(new Double(10.0));\n        values.add(new Double(100.0));\n        dataset.add(values, \"row\", \"column\");\n        CategoryPlot plot = new CategoryPlot(dataset, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), new BoxAndWhiskerRenderer());\n        JFreeChart chart = new JFreeChart(plot);\n        boolean success = false;\n\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    new ChartRenderingInfo());\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n\n        assertTrue(success);\n\n    }",
        "begin_line": 213,
        "end_line": 250,
        "comment": "\n     * A check for bug 1572478 (for the vertical orientation).\n     ",
        "child_ranges": [
            "(line 214,col 9)-(line 224,col 10)",
            "(line 225,col 9)-(line 225,col 38)",
            "(line 226,col 9)-(line 226,col 36)",
            "(line 227,col 9)-(line 227,col 37)",
            "(line 228,col 9)-(line 228,col 38)",
            "(line 229,col 9)-(line 229,col 45)",
            "(line 230,col 9)-(line 231,col 66)",
            "(line 232,col 9)-(line 232,col 48)",
            "(line 233,col 9)-(line 233,col 32)",
            "(line 235,col 9)-(line 246,col 9)",
            "(line 248,col 9)-(line 248,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.Anonymous-1706cc4f-9719-4b59-927e-b28d531f4f44.getQ1Value(int, int)",
        "snippet": "            public Number getQ1Value(int row, int column) {\n                return null;\n            }",
        "begin_line": 217,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 218,col 17)-(line 218,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.Anonymous-f7c4536f-330c-4f88-88cb-b5a47eeda24b.getQ1Value(java.lang.Comparable, java.lang.Comparable)",
        "snippet": "            public Number getQ1Value(Comparable rowKey, Comparable columnKey) {\n                return null;\n            }",
        "begin_line": 221,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 222,col 17)-(line 222,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testBug1572478Horizontal()",
        "snippet": "    public void testBug1572478Horizontal() {\n        DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset() {\n                \n            public Number getQ1Value(int row, int column) {\n                return null;\n            }\n\n            public Number getQ1Value(Comparable rowKey, Comparable columnKey) {\n                return null;\n            }\n        };\n        List values = new ArrayList();\n        values.add(new Double(1.0));\n        values.add(new Double(10.0));\n        values.add(new Double(100.0));\n        dataset.add(values, \"row\", \"column\");\n        CategoryPlot plot = new CategoryPlot(dataset, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), new BoxAndWhiskerRenderer());\n        plot.setOrientation(PlotOrientation.HORIZONTAL);\n        JFreeChart chart = new JFreeChart(plot);\n        boolean success = false;\n\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    new ChartRenderingInfo());\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n\n        assertTrue(success);\n\n    }",
        "begin_line": 255,
        "end_line": 293,
        "comment": "\n     * A check for bug 1572478 (for the horizontal orientation).\n     ",
        "child_ranges": [
            "(line 256,col 9)-(line 266,col 10)",
            "(line 267,col 9)-(line 267,col 38)",
            "(line 268,col 9)-(line 268,col 36)",
            "(line 269,col 9)-(line 269,col 37)",
            "(line 270,col 9)-(line 270,col 38)",
            "(line 271,col 9)-(line 271,col 45)",
            "(line 272,col 9)-(line 273,col 66)",
            "(line 274,col 9)-(line 274,col 56)",
            "(line 275,col 9)-(line 275,col 48)",
            "(line 276,col 9)-(line 276,col 32)",
            "(line 278,col 9)-(line 289,col 9)",
            "(line 291,col 9)-(line 291,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.Anonymous-091a9003-8f25-4956-acd0-3a6e42513467.getQ1Value(int, int)",
        "snippet": "            public Number getQ1Value(int row, int column) {\n                return null;\n            }",
        "begin_line": 259,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 260,col 17)-(line 260,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.Anonymous-2648c998-c250-4b92-af98-76dd98fedca2.getQ1Value(java.lang.Comparable, java.lang.Comparable)",
        "snippet": "            public Number getQ1Value(Comparable rowKey, Comparable columnKey) {\n                return null;\n            }",
        "begin_line": 263,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 264,col 17)-(line 264,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testGetLegendItem()",
        "snippet": "    public void testGetLegendItem() {\n        DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        List values = new ArrayList();\n        values.add(new Double(1.10));\n        values.add(new Double(1.45));\n        values.add(new Double(1.33));\n        values.add(new Double(1.23));\n        dataset.add(values, \"R1\", \"C1\");\n        BoxAndWhiskerRenderer r = new BoxAndWhiskerRenderer();\n        CategoryPlot plot = new CategoryPlot(dataset, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(0, 0);\n        assertNotNull(li);\n        r.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        li = r.getLegendItem(0, 0);\n        assertNull(li);\n    }",
        "begin_line": 298,
        "end_line": 316,
        "comment": "\n     * Some checks for the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 299,col 9)-(line 300,col 60)",
            "(line 301,col 9)-(line 301,col 38)",
            "(line 302,col 9)-(line 302,col 37)",
            "(line 303,col 9)-(line 303,col 37)",
            "(line 304,col 9)-(line 304,col 37)",
            "(line 305,col 9)-(line 305,col 37)",
            "(line 306,col 9)-(line 306,col 40)",
            "(line 307,col 9)-(line 307,col 62)",
            "(line 308,col 9)-(line 309,col 40)",
            "(line 310,col 32)-(line 310,col 52)",
            "(line 311,col 9)-(line 311,col 46)",
            "(line 312,col 9)-(line 312,col 26)",
            "(line 313,col 9)-(line 313,col 53)",
            "(line 314,col 9)-(line 314,col 35)",
            "(line 315,col 9)-(line 315,col 23)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        DefaultCategoryDataset dataset0 = new DefaultCategoryDataset();\n        dataset0.addValue(21.0, \"R1\", \"C1\");\n        dataset0.addValue(22.0, \"R2\", \"C1\");        \n        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n        dataset1.addValue(23.0, \"R3\", \"C1\");\n        dataset1.addValue(24.0, \"R4\", \"C1\");        \n        dataset1.addValue(25.0, \"R5\", \"C1\");        \n        BoxAndWhiskerRenderer r = new BoxAndWhiskerRenderer();\n        CategoryPlot plot = new CategoryPlot(dataset0, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, dataset1);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"R5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 322,
        "end_line": 339,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 323,col 9)-(line 323,col 71)",
            "(line 324,col 9)-(line 324,col 44)",
            "(line 325,col 9)-(line 325,col 44)",
            "(line 326,col 9)-(line 326,col 71)",
            "(line 327,col 9)-(line 327,col 44)",
            "(line 328,col 9)-(line 328,col 44)",
            "(line 329,col 9)-(line 329,col 44)",
            "(line 330,col 9)-(line 330,col 62)",
            "(line 331,col 9)-(line 332,col 40)",
            "(line 333,col 9)-(line 333,col 37)",
            "(line 334,col 32)-(line 334,col 52)",
            "(line 335,col 9)-(line 335,col 46)",
            "(line 336,col 9)-(line 336,col 42)",
            "(line 337,col 9)-(line 337,col 46)",
            "(line 338,col 9)-(line 338,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullMean()",
        "snippet": "    public void testDrawWithNullMean() {\n        boolean success = false;\n        try {\n            DefaultBoxAndWhiskerCategoryDataset dataset \n                    = new DefaultBoxAndWhiskerCategoryDataset();\n            dataset.add(new BoxAndWhiskerItem(null, new Double(2.0),\n                    new Double(0.0), new Double(4.0), new Double(0.5), \n                    new Double(4.5), new Double(-0.5), new Double(5.5), \n                    null), \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new BoxAndWhiskerRenderer());\n            ChartRenderingInfo info = new ChartRenderingInfo();\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    info);\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 344,
        "end_line": 366,
        "comment": "\n     * Draws a chart where the dataset contains a null mean value.\n     ",
        "child_ranges": [
            "(line 345,col 9)-(line 345,col 32)",
            "(line 346,col 9)-(line 364,col 9)",
            "(line 365,col 9)-(line 365,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullMedian()",
        "snippet": "    public void testDrawWithNullMedian() {\n        boolean success = false;\n        try {\n            DefaultBoxAndWhiskerCategoryDataset dataset \n                    = new DefaultBoxAndWhiskerCategoryDataset();\n            dataset.add(new BoxAndWhiskerItem(new Double(1.0), null,\n                    new Double(0.0), new Double(4.0), new Double(0.5), \n                    new Double(4.5), new Double(-0.5), new Double(5.5), \n                    null), \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new BoxAndWhiskerRenderer());\n            ChartRenderingInfo info = new ChartRenderingInfo();\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    info);\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 371,
        "end_line": 393,
        "comment": "\n     * Draws a chart where the dataset contains a null median value.\n     ",
        "child_ranges": [
            "(line 372,col 9)-(line 372,col 32)",
            "(line 373,col 9)-(line 391,col 9)",
            "(line 392,col 9)-(line 392,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullQ1()",
        "snippet": "    public void testDrawWithNullQ1() {\n        boolean success = false;\n        try {\n            DefaultBoxAndWhiskerCategoryDataset dataset \n                    = new DefaultBoxAndWhiskerCategoryDataset();\n            dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0),\n                    null, new Double(4.0), new Double(0.5), \n                    new Double(4.5), new Double(-0.5), new Double(5.5), \n                    null), \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new BoxAndWhiskerRenderer());\n            ChartRenderingInfo info = new ChartRenderingInfo();\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    info);\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 398,
        "end_line": 420,
        "comment": "\n     * Draws a chart where the dataset contains a null Q1 value.\n     ",
        "child_ranges": [
            "(line 399,col 9)-(line 399,col 32)",
            "(line 400,col 9)-(line 418,col 9)",
            "(line 419,col 9)-(line 419,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullQ3()",
        "snippet": "    public void testDrawWithNullQ3() {\n        boolean success = false;\n        try {\n            DefaultBoxAndWhiskerCategoryDataset dataset \n                    = new DefaultBoxAndWhiskerCategoryDataset();\n            dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0),\n                    new Double(3.0), null, new Double(0.5), \n                    new Double(4.5), new Double(-0.5), new Double(5.5), \n                    null), \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new BoxAndWhiskerRenderer());\n            ChartRenderingInfo info = new ChartRenderingInfo();\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    info);\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 425,
        "end_line": 447,
        "comment": "\n     * Draws a chart where the dataset contains a null Q3 value.\n     ",
        "child_ranges": [
            "(line 426,col 9)-(line 426,col 32)",
            "(line 427,col 9)-(line 445,col 9)",
            "(line 446,col 9)-(line 446,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullMinRegular()",
        "snippet": "    public void testDrawWithNullMinRegular() {\n        boolean success = false;\n        try {\n            DefaultBoxAndWhiskerCategoryDataset dataset \n                    = new DefaultBoxAndWhiskerCategoryDataset();\n            dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0),\n                    new Double(3.0), new Double(4.0), null, \n                    new Double(4.5), new Double(-0.5), new Double(5.5), \n                    null), \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new BoxAndWhiskerRenderer());\n            ChartRenderingInfo info = new ChartRenderingInfo();\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    info);\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 452,
        "end_line": 474,
        "comment": "\n     * Draws a chart where the dataset contains a null min regular value.\n     ",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 32)",
            "(line 454,col 9)-(line 472,col 9)",
            "(line 473,col 9)-(line 473,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullMaxRegular()",
        "snippet": "    public void testDrawWithNullMaxRegular() {\n        boolean success = false;\n        try {\n            DefaultBoxAndWhiskerCategoryDataset dataset \n                    = new DefaultBoxAndWhiskerCategoryDataset();\n            dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0),\n                    new Double(3.0), new Double(4.0), new Double(0.5), \n                    null, new Double(-0.5), new Double(5.5), \n                    null), \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new BoxAndWhiskerRenderer());\n            ChartRenderingInfo info = new ChartRenderingInfo();\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    info);\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 479,
        "end_line": 501,
        "comment": "\n     * Draws a chart where the dataset contains a null max regular value.\n     ",
        "child_ranges": [
            "(line 480,col 9)-(line 480,col 32)",
            "(line 481,col 9)-(line 499,col 9)",
            "(line 500,col 9)-(line 500,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullMinOutlier()",
        "snippet": "    public void testDrawWithNullMinOutlier() {\n        boolean success = false;\n        try {\n            DefaultBoxAndWhiskerCategoryDataset dataset \n                    = new DefaultBoxAndWhiskerCategoryDataset();\n            dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0),\n                    new Double(3.0), new Double(4.0), new Double(0.5), \n                    new Double(4.5), null, new Double(5.5), \n                    null), \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new BoxAndWhiskerRenderer());\n            ChartRenderingInfo info = new ChartRenderingInfo();\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    info);\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 506,
        "end_line": 528,
        "comment": "\n     * Draws a chart where the dataset contains a null min outlier value.\n     ",
        "child_ranges": [
            "(line 507,col 9)-(line 507,col 32)",
            "(line 508,col 9)-(line 526,col 9)",
            "(line 527,col 9)-(line 527,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullMaxOutlier()",
        "snippet": "    public void testDrawWithNullMaxOutlier() {\n        boolean success = false;\n        try {\n            DefaultBoxAndWhiskerCategoryDataset dataset \n                    = new DefaultBoxAndWhiskerCategoryDataset();\n            dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0),\n                    new Double(3.0), new Double(4.0), new Double(0.5), \n                    new Double(4.5), new Double(-0.5), null, \n                    new java.util.ArrayList()), \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new BoxAndWhiskerRenderer());\n            ChartRenderingInfo info = new ChartRenderingInfo();\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    info);\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 533,
        "end_line": 555,
        "comment": "\n     * Draws a chart where the dataset contains a null max outlier value.\n     ",
        "child_ranges": [
            "(line 534,col 9)-(line 534,col 32)",
            "(line 535,col 9)-(line 553,col 9)",
            "(line 554,col 9)-(line 554,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StatisticalLineAndShapeRendererTests.class);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.StatisticalLineAndShapeRendererTests(java.lang.String)",
        "snippet": "    public StatisticalLineAndShapeRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StatisticalLineAndShapeRenderer r1 \n            = new StatisticalLineAndShapeRenderer();\n        StatisticalLineAndShapeRenderer r2 \n            = new StatisticalLineAndShapeRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        r1.setErrorIndicatorPaint(Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setErrorIndicatorPaint(Color.red);\n        assertTrue(r2.equals(r1));\n    }",
        "begin_line": 89,
        "end_line": 101,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 91,col 52)",
            "(line 92,col 9)-(line 93,col 52)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 97,col 9)-(line 97,col 45)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 45)",
            "(line 100,col 9)-(line 100,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        StatisticalLineAndShapeRenderer r1 \n            = new StatisticalLineAndShapeRenderer();\n        StatisticalLineAndShapeRenderer r2 \n            = new StatisticalLineAndShapeRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 106,
        "end_line": 115,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 108,col 52)",
            "(line 109,col 9)-(line 110,col 52)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 112,col 9)-(line 112,col 31)",
            "(line 113,col 9)-(line 113,col 31)",
            "(line 114,col 9)-(line 114,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StatisticalLineAndShapeRenderer r1 \n            = new StatisticalLineAndShapeRenderer();\n        StatisticalLineAndShapeRenderer r2 = null;\n        try {\n            r2 = (StatisticalLineAndShapeRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 120,
        "end_line": 133,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 122,col 52)",
            "(line 123,col 9)-(line 123,col 50)",
            "(line 124,col 9)-(line 129,col 9)",
            "(line 130,col 9)-(line 130,col 29)",
            "(line 131,col 9)-(line 131,col 51)",
            "(line 132,col 9)-(line 132,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StatisticalLineAndShapeRenderer r1 \n            = new StatisticalLineAndShapeRenderer();\n        StatisticalLineAndShapeRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (StatisticalLineAndShapeRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 138,
        "end_line": 160,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 140,col 9)-(line 141,col 52)",
            "(line 142,col 9)-(line 142,col 50)",
            "(line 144,col 9)-(line 157,col 9)",
            "(line 158,col 9)-(line 158,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultStatisticalCategoryDataset dataset \n                = new DefaultStatisticalCategoryDataset();\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n            dataset.add(3.0, 4.0, \"S1\", \"C2\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new StatisticalLineAndShapeRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 166,
        "end_line": 186,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 32)",
            "(line 168,col 9)-(line 184,col 9)",
            "(line 185,col 9)-(line 185,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.test1562759()",
        "snippet": "    public void test1562759() {\n        StatisticalLineAndShapeRenderer r \n            = new StatisticalLineAndShapeRenderer(true, false);\n        assertTrue(r.getBaseLinesVisible());\n        assertFalse(r.getBaseShapesVisible());\n        \n        r = new StatisticalLineAndShapeRenderer(false, true);\n        assertFalse(r.getBaseLinesVisible());\n        assertTrue(r.getBaseShapesVisible());\n    }",
        "begin_line": 191,
        "end_line": 200,
        "comment": "\n     * A simple test for bug report 1562759.\n     ",
        "child_ranges": [
            "(line 192,col 9)-(line 193,col 63)",
            "(line 194,col 9)-(line 194,col 44)",
            "(line 195,col 9)-(line 195,col 46)",
            "(line 197,col 9)-(line 197,col 61)",
            "(line 198,col 9)-(line 198,col 45)",
            "(line 199,col 9)-(line 199,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.MyRenderer.createStackedValueList(org.jfree.data.category.CategoryDataset, java.lang.Comparable, double, boolean)",
        "snippet": "        public List createStackedValueList(CategoryDataset dataset, \n            Comparable category, double base, boolean asPercentages) {\n            return super.createStackedValueList(dataset, category, base, \n                    asPercentages);\n        }",
        "begin_line": 69,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 71,col 13)-(line 72,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StackedBarRenderer3DTests.class);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.StackedBarRenderer3DTests(java.lang.String)",
        "snippet": "    public StackedBarRenderer3DTests(String name) {\n        super(name);\n    }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StackedBarRenderer3D r1 = new StackedBarRenderer3D();\n        StackedBarRenderer3D r2 = new StackedBarRenderer3D();\n        assertEquals(r1, r2);\n    }",
        "begin_line": 97,
        "end_line": 101,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 61)",
            "(line 99,col 9)-(line 99,col 61)",
            "(line 100,col 9)-(line 100,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        StackedBarRenderer3D r1 = new StackedBarRenderer3D();\n        StackedBarRenderer3D r2 = new StackedBarRenderer3D();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 106,
        "end_line": 113,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 61)",
            "(line 108,col 9)-(line 108,col 61)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 110,col 9)-(line 110,col 31)",
            "(line 111,col 9)-(line 111,col 31)",
            "(line 112,col 9)-(line 112,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StackedBarRenderer3D r1 = new StackedBarRenderer3D();\n        StackedBarRenderer3D r2 = null;\n        try {\n            r2 = (StackedBarRenderer3D) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 118,
        "end_line": 130,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 61)",
            "(line 120,col 9)-(line 120,col 39)",
            "(line 121,col 9)-(line 126,col 9)",
            "(line 127,col 9)-(line 127,col 29)",
            "(line 128,col 9)-(line 128,col 51)",
            "(line 129,col 9)-(line 129,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StackedBarRenderer3D r1 = new StackedBarRenderer3D();\n        StackedBarRenderer3D r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (StackedBarRenderer3D) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 135,
        "end_line": 156,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 61)",
            "(line 138,col 9)-(line 138,col 39)",
            "(line 140,col 9)-(line 153,col 9)",
            "(line 154,col 9)-(line 154,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList1()",
        "snippet": "    public void testCreateStackedValueList1() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(1.0, \"s0\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(2, l.size());\n        assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(1.0), ((Object[]) l.get(1))[1]);\n    }",
        "begin_line": 161,
        "end_line": 169,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 64)",
            "(line 163,col 9)-(line 163,col 36)",
            "(line 164,col 9)-(line 164,col 40)",
            "(line 165,col 9)-(line 165,col 63)",
            "(line 166,col 9)-(line 166,col 34)",
            "(line 167,col 9)-(line 167,col 64)",
            "(line 168,col 9)-(line 168,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList2()",
        "snippet": "    public void testCreateStackedValueList2() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(-1.0, \"s0\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(2, l.size());\n        assertEquals(new Double(-1.0), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]);\n    }",
        "begin_line": 174,
        "end_line": 182,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 64)",
            "(line 176,col 9)-(line 176,col 37)",
            "(line 177,col 9)-(line 177,col 40)",
            "(line 178,col 9)-(line 178,col 63)",
            "(line 179,col 9)-(line 179,col 34)",
            "(line 180,col 9)-(line 180,col 65)",
            "(line 181,col 9)-(line 181,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList3()",
        "snippet": "    public void testCreateStackedValueList3() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(0.0, \"s0\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(2, l.size());\n        assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]);\n    }",
        "begin_line": 187,
        "end_line": 195,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 64)",
            "(line 189,col 9)-(line 189,col 36)",
            "(line 190,col 9)-(line 190,col 40)",
            "(line 191,col 9)-(line 191,col 63)",
            "(line 192,col 9)-(line 192,col 34)",
            "(line 193,col 9)-(line 193,col 64)",
            "(line 194,col 9)-(line 194,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList4()",
        "snippet": "    public void testCreateStackedValueList4() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(null, \"s0\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(0, l.size());\n    }",
        "begin_line": 200,
        "end_line": 206,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 64)",
            "(line 202,col 9)-(line 202,col 37)",
            "(line 203,col 9)-(line 203,col 40)",
            "(line 204,col 9)-(line 204,col 63)",
            "(line 205,col 9)-(line 205,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList1a()",
        "snippet": "    public void testCreateStackedValueList1a() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(1.0, \"s0\", \"c0\");\n        d.addValue(1.1, \"s1\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(3, l.size());\n        assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(1.0), ((Object[]) l.get(1))[1]);\n        assertEquals(new Double(2.1), ((Object[]) l.get(2))[1]);\n    }",
        "begin_line": 211,
        "end_line": 221,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 64)",
            "(line 213,col 9)-(line 213,col 36)",
            "(line 214,col 9)-(line 214,col 36)",
            "(line 215,col 9)-(line 215,col 40)",
            "(line 216,col 9)-(line 216,col 63)",
            "(line 217,col 9)-(line 217,col 34)",
            "(line 218,col 9)-(line 218,col 64)",
            "(line 219,col 9)-(line 219,col 64)",
            "(line 220,col 9)-(line 220,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList1b()",
        "snippet": "    public void testCreateStackedValueList1b() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(1.0, \"s0\", \"c0\");\n        d.addValue(-1.1, \"s1\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(3, l.size());\n        assertEquals(new Double(-1.1), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]);\n        assertEquals(new Double(1.0), ((Object[]) l.get(2))[1]);\n    }",
        "begin_line": 226,
        "end_line": 236,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 64)",
            "(line 228,col 9)-(line 228,col 36)",
            "(line 229,col 9)-(line 229,col 37)",
            "(line 230,col 9)-(line 230,col 40)",
            "(line 231,col 9)-(line 231,col 63)",
            "(line 232,col 9)-(line 232,col 34)",
            "(line 233,col 9)-(line 233,col 65)",
            "(line 234,col 9)-(line 234,col 64)",
            "(line 235,col 9)-(line 235,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList1c()",
        "snippet": "    public void testCreateStackedValueList1c() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(1.0, \"s0\", \"c0\");\n        d.addValue(0.0, \"s1\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(3, l.size());\n        assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(1.0), ((Object[]) l.get(1))[1]);\n        assertEquals(new Double(1.0), ((Object[]) l.get(2))[1]);\n    }",
        "begin_line": 241,
        "end_line": 251,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 64)",
            "(line 243,col 9)-(line 243,col 36)",
            "(line 244,col 9)-(line 244,col 36)",
            "(line 245,col 9)-(line 245,col 40)",
            "(line 246,col 9)-(line 246,col 63)",
            "(line 247,col 9)-(line 247,col 34)",
            "(line 248,col 9)-(line 248,col 64)",
            "(line 249,col 9)-(line 249,col 64)",
            "(line 250,col 9)-(line 250,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList1d()",
        "snippet": "    public void testCreateStackedValueList1d() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(1.0, \"s0\", \"c0\");\n        d.addValue(null, \"s1\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(2, l.size());\n        assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(1.0), ((Object[]) l.get(1))[1]);\n    }",
        "begin_line": 256,
        "end_line": 265,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 257,col 9)-(line 257,col 64)",
            "(line 258,col 9)-(line 258,col 36)",
            "(line 259,col 9)-(line 259,col 37)",
            "(line 260,col 9)-(line 260,col 40)",
            "(line 261,col 9)-(line 261,col 63)",
            "(line 262,col 9)-(line 262,col 34)",
            "(line 263,col 9)-(line 263,col 64)",
            "(line 264,col 9)-(line 264,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList2a()",
        "snippet": "    public void testCreateStackedValueList2a() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(-1.0, \"s0\", \"c0\");\n        d.addValue(1.1, \"s1\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(3, l.size());\n        assertEquals(new Double(-1.0), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]);\n        assertEquals(new Double(1.1), ((Object[]) l.get(2))[1]);\n    }",
        "begin_line": 270,
        "end_line": 280,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 64)",
            "(line 272,col 9)-(line 272,col 37)",
            "(line 273,col 9)-(line 273,col 36)",
            "(line 274,col 9)-(line 274,col 40)",
            "(line 275,col 9)-(line 275,col 63)",
            "(line 276,col 9)-(line 276,col 34)",
            "(line 277,col 9)-(line 277,col 65)",
            "(line 278,col 9)-(line 278,col 64)",
            "(line 279,col 9)-(line 279,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList2b()",
        "snippet": "    public void testCreateStackedValueList2b() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(-1.0, \"s0\", \"c0\");\n        d.addValue(-1.1, \"s1\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(3, l.size());\n        assertEquals(new Double(-2.1), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(-1.0), ((Object[]) l.get(1))[1]);\n        assertEquals(new Double(0.0), ((Object[]) l.get(2))[1]);\n    }",
        "begin_line": 285,
        "end_line": 295,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 286,col 9)-(line 286,col 64)",
            "(line 287,col 9)-(line 287,col 37)",
            "(line 288,col 9)-(line 288,col 37)",
            "(line 289,col 9)-(line 289,col 40)",
            "(line 290,col 9)-(line 290,col 63)",
            "(line 291,col 9)-(line 291,col 34)",
            "(line 292,col 9)-(line 292,col 65)",
            "(line 293,col 9)-(line 293,col 65)",
            "(line 294,col 9)-(line 294,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList2c()",
        "snippet": "    public void testCreateStackedValueList2c() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(-1.0, \"s0\", \"c0\");\n        d.addValue(0.0, \"s1\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(3, l.size());\n        assertEquals(new Double(-1.0), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]);\n        assertEquals(new Double(0.0), ((Object[]) l.get(2))[1]);\n    }",
        "begin_line": 300,
        "end_line": 310,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 64)",
            "(line 302,col 9)-(line 302,col 37)",
            "(line 303,col 9)-(line 303,col 36)",
            "(line 304,col 9)-(line 304,col 40)",
            "(line 305,col 9)-(line 305,col 63)",
            "(line 306,col 9)-(line 306,col 34)",
            "(line 307,col 9)-(line 307,col 65)",
            "(line 308,col 9)-(line 308,col 64)",
            "(line 309,col 9)-(line 309,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList2d()",
        "snippet": "    public void testCreateStackedValueList2d() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(-1.0, \"s0\", \"c0\");\n        d.addValue(null, \"s1\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(2, l.size());\n        assertEquals(new Double(-1.0), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]);\n    }",
        "begin_line": 315,
        "end_line": 324,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 64)",
            "(line 317,col 9)-(line 317,col 37)",
            "(line 318,col 9)-(line 318,col 37)",
            "(line 319,col 9)-(line 319,col 40)",
            "(line 320,col 9)-(line 320,col 63)",
            "(line 321,col 9)-(line 321,col 34)",
            "(line 322,col 9)-(line 322,col 65)",
            "(line 323,col 9)-(line 323,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList3a()",
        "snippet": "    public void testCreateStackedValueList3a() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(0.0, \"s0\", \"c0\");\n        d.addValue(1.1, \"s1\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(3, l.size());\n        assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]);\n        assertEquals(new Double(1.1), ((Object[]) l.get(2))[1]);\n    }",
        "begin_line": 329,
        "end_line": 339,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 330,col 9)-(line 330,col 64)",
            "(line 331,col 9)-(line 331,col 36)",
            "(line 332,col 9)-(line 332,col 36)",
            "(line 333,col 9)-(line 333,col 40)",
            "(line 334,col 9)-(line 334,col 63)",
            "(line 335,col 9)-(line 335,col 34)",
            "(line 336,col 9)-(line 336,col 64)",
            "(line 337,col 9)-(line 337,col 64)",
            "(line 338,col 9)-(line 338,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList3b()",
        "snippet": "    public void testCreateStackedValueList3b() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(0.0, \"s0\", \"c0\");\n        d.addValue(-1.1, \"s1\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(3, l.size());\n        assertEquals(new Double(-1.1), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]);\n        assertEquals(new Double(0.0), ((Object[]) l.get(2))[1]);\n    }",
        "begin_line": 344,
        "end_line": 354,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 345,col 9)-(line 345,col 64)",
            "(line 346,col 9)-(line 346,col 36)",
            "(line 347,col 9)-(line 347,col 37)",
            "(line 348,col 9)-(line 348,col 40)",
            "(line 349,col 9)-(line 349,col 63)",
            "(line 350,col 9)-(line 350,col 34)",
            "(line 351,col 9)-(line 351,col 65)",
            "(line 352,col 9)-(line 352,col 64)",
            "(line 353,col 9)-(line 353,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList3c()",
        "snippet": "    public void testCreateStackedValueList3c() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(0.0, \"s0\", \"c0\");\n        d.addValue(0.0, \"s1\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(3, l.size());\n        assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]);\n        assertEquals(new Double(0.0), ((Object[]) l.get(2))[1]);\n    }",
        "begin_line": 359,
        "end_line": 369,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 64)",
            "(line 361,col 9)-(line 361,col 36)",
            "(line 362,col 9)-(line 362,col 36)",
            "(line 363,col 9)-(line 363,col 40)",
            "(line 364,col 9)-(line 364,col 63)",
            "(line 365,col 9)-(line 365,col 34)",
            "(line 366,col 9)-(line 366,col 64)",
            "(line 367,col 9)-(line 367,col 64)",
            "(line 368,col 9)-(line 368,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList3d()",
        "snippet": "    public void testCreateStackedValueList3d() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(0.0, \"s0\", \"c0\");\n        d.addValue(null, \"s1\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(2, l.size());\n        assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]);\n    }",
        "begin_line": 374,
        "end_line": 383,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 375,col 9)-(line 375,col 64)",
            "(line 376,col 9)-(line 376,col 36)",
            "(line 377,col 9)-(line 377,col 37)",
            "(line 378,col 9)-(line 378,col 40)",
            "(line 379,col 9)-(line 379,col 63)",
            "(line 380,col 9)-(line 380,col 34)",
            "(line 381,col 9)-(line 381,col 64)",
            "(line 382,col 9)-(line 382,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList5()",
        "snippet": "    public void testCreateStackedValueList5() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(1.0, \"s0\", \"c0\");\n        d.addValue(null, \"s1\", \"c0\");\n        d.addValue(2.0, \"s2\", \"c0\");\n        MyRenderer r = new MyRenderer();\n        List l = r.createStackedValueList(d, \"c0\", 0.0, false);\n        assertEquals(3, l.size());\n        assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]);\n        assertEquals(new Double(1.0), ((Object[]) l.get(1))[1]);\n        assertEquals(new Double(3.0), ((Object[]) l.get(2))[1]);\n    }",
        "begin_line": 388,
        "end_line": 399,
        "comment": "\n     * A test for the createStackedValueList() method.\n     ",
        "child_ranges": [
            "(line 389,col 9)-(line 389,col 64)",
            "(line 390,col 9)-(line 390,col 36)",
            "(line 391,col 9)-(line 391,col 37)",
            "(line 392,col 9)-(line 392,col 36)",
            "(line 393,col 9)-(line 393,col 40)",
            "(line 394,col 9)-(line 394,col 63)",
            "(line 395,col 9)-(line 395,col 34)",
            "(line 396,col 9)-(line 396,col 64)",
            "(line 397,col 9)-(line 397,col 64)",
            "(line 398,col 9)-(line 398,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/RendererCategoryPackageTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.chart.renderer.category\");\n        suite.addTestSuite(AbstractCategoryItemRendererTests.class);\n        suite.addTestSuite(AreaRendererTests.class);\n        suite.addTestSuite(BarRendererTests.class);\n        suite.addTestSuite(BarRenderer3DTests.class);\n        suite.addTestSuite(BoxAndWhiskerRendererTests.class);\n        suite.addTestSuite(CategoryStepRendererTests.class);\n        suite.addTestSuite(DefaultCategoryItemRendererTests.class);\n        suite.addTestSuite(GanttRendererTests.class);\n        suite.addTestSuite(GroupedStackedBarRendererTests.class);\n        suite.addTestSuite(IntervalBarRendererTests.class);\n        suite.addTestSuite(LayeredBarRendererTests.class);\n        suite.addTestSuite(LevelRendererTests.class);\n        suite.addTestSuite(LineAndShapeRendererTests.class);\n        suite.addTestSuite(LineRenderer3DTests.class);\n        suite.addTestSuite(MinMaxCategoryRendererTests.class);\n        suite.addTestSuite(ScatterRendererTests.class);\n        suite.addTestSuite(StackedAreaRendererTests.class);\n        suite.addTestSuite(StackedBarRendererTests.class);\n        suite.addTestSuite(StackedBarRenderer3DTests.class);\n        suite.addTestSuite(StatisticalBarRendererTests.class);\n        suite.addTestSuite(StatisticalLineAndShapeRendererTests.class);\n        suite.addTestSuite(WaterfallBarRendererTests.class);\n        return suite;\n    }",
        "begin_line": 63,
        "end_line": 88,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 77)",
            "(line 65,col 9)-(line 65,col 68)",
            "(line 66,col 9)-(line 66,col 52)",
            "(line 67,col 9)-(line 67,col 51)",
            "(line 68,col 9)-(line 68,col 53)",
            "(line 69,col 9)-(line 69,col 61)",
            "(line 70,col 9)-(line 70,col 60)",
            "(line 71,col 9)-(line 71,col 67)",
            "(line 72,col 9)-(line 72,col 53)",
            "(line 73,col 9)-(line 73,col 65)",
            "(line 74,col 9)-(line 74,col 59)",
            "(line 75,col 9)-(line 75,col 58)",
            "(line 76,col 9)-(line 76,col 53)",
            "(line 77,col 9)-(line 77,col 60)",
            "(line 78,col 9)-(line 78,col 54)",
            "(line 79,col 9)-(line 79,col 62)",
            "(line 80,col 9)-(line 80,col 55)",
            "(line 81,col 9)-(line 81,col 59)",
            "(line 82,col 9)-(line 82,col 58)",
            "(line 83,col 9)-(line 83,col 60)",
            "(line 84,col 9)-(line 84,col 62)",
            "(line 85,col 9)-(line 85,col 71)",
            "(line 86,col 9)-(line 86,col 60)",
            "(line 87,col 9)-(line 87,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/RendererCategoryPackageTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests.RendererCategoryPackageTests(java.lang.String)",
        "snippet": "    public RendererCategoryPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the suite name.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/RendererCategoryPackageTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(IntervalBarRendererTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.IntervalBarRendererTests(java.lang.String)",
        "snippet": "    public IntervalBarRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        IntervalBarRenderer r1 = new IntervalBarRenderer();\n        IntervalBarRenderer r2 = new IntervalBarRenderer();\n        assertEquals(r1, r2);\n    }",
        "begin_line": 87,
        "end_line": 91,
        "comment": "\n     * Problem that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 59)",
            "(line 89,col 9)-(line 89,col 59)",
            "(line 90,col 9)-(line 90,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        IntervalBarRenderer r1 = new IntervalBarRenderer();\n        IntervalBarRenderer r2 = new IntervalBarRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 96,
        "end_line": 103,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 59)",
            "(line 98,col 9)-(line 98,col 59)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 100,col 9)-(line 100,col 31)",
            "(line 101,col 9)-(line 101,col 31)",
            "(line 102,col 9)-(line 102,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        IntervalBarRenderer r1 = new IntervalBarRenderer();\n        IntervalBarRenderer r2 = null;\n        try {\n            r2 = (IntervalBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 108,
        "end_line": 120,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 59)",
            "(line 110,col 9)-(line 110,col 38)",
            "(line 111,col 9)-(line 116,col 9)",
            "(line 117,col 9)-(line 117,col 29)",
            "(line 118,col 9)-(line 118,col 51)",
            "(line 119,col 9)-(line 119,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        IntervalBarRenderer r1 = new IntervalBarRenderer();\n        IntervalBarRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (IntervalBarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 125,
        "end_line": 147,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 59)",
            "(line 128,col 9)-(line 128,col 38)",
            "(line 130,col 9)-(line 144,col 9)",
            "(line 145,col 9)-(line 145,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            double[][] starts = new double[][] {{0.1, 0.2, 0.3}, \n                    {0.3, 0.4, 0.5}};\n            double[][] ends = new double[][] {{0.5, 0.6, 0.7}, {0.7, 0.8, 0.9}};\n            DefaultIntervalCategoryDataset dataset \n                = new DefaultIntervalCategoryDataset(starts, ends);        \n            IntervalBarRenderer renderer = new IntervalBarRenderer();\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    renderer);\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 153,
        "end_line": 175,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 32)",
            "(line 155,col 9)-(line 173,col 9)",
            "(line 174,col 9)-(line 174,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StackedXYBarRendererTests.class);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests.StackedXYBarRendererTests(java.lang.String)",
        "snippet": "    public StackedXYBarRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StackedXYBarRenderer r1 = new StackedXYBarRenderer();\n        StackedXYBarRenderer r2 = new StackedXYBarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        r1.setRenderAsPercentages(true);\n        assertFalse(r1.equals(r2));\n        r2.setRenderAsPercentages(true);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 93,
        "end_line": 103,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 61)",
            "(line 95,col 9)-(line 95,col 61)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 99,col 9)-(line 99,col 40)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 40)",
            "(line 102,col 9)-(line 102,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        StackedXYBarRenderer r1 = new StackedXYBarRenderer();\n        StackedXYBarRenderer r2 = new StackedXYBarRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n        \n        r1.setRenderAsPercentages(true);\n        h1 = r1.hashCode();\n        h2 = r2.hashCode();\n        assertFalse(h1 == h2);\n    }",
        "begin_line": 108,
        "end_line": 120,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 61)",
            "(line 110,col 9)-(line 110,col 61)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 112,col 9)-(line 112,col 31)",
            "(line 113,col 9)-(line 113,col 31)",
            "(line 114,col 9)-(line 114,col 29)",
            "(line 116,col 9)-(line 116,col 40)",
            "(line 117,col 9)-(line 117,col 27)",
            "(line 118,col 9)-(line 118,col 27)",
            "(line 119,col 9)-(line 119,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StackedXYBarRenderer r1 = new StackedXYBarRenderer();\n        StackedXYBarRenderer r2 = null;\n        try {\n            r2 = (StackedXYBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 125,
        "end_line": 137,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 61)",
            "(line 127,col 9)-(line 127,col 39)",
            "(line 128,col 9)-(line 133,col 9)",
            "(line 134,col 9)-(line 134,col 29)",
            "(line 135,col 9)-(line 135,col 51)",
            "(line 136,col 9)-(line 136,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        StackedXYBarRenderer r1 = new StackedXYBarRenderer();\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.yellow));\n        StackedXYBarRenderer r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (StackedXYBarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 142,
        "end_line": 162,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 61)",
            "(line 144,col 9)-(line 145,col 37)",
            "(line 146,col 9)-(line 146,col 39)",
            "(line 147,col 9)-(line 160,col 9)",
            "(line 161,col 9)-(line 161,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests.testFindDomainBounds()",
        "snippet": "    public void testFindDomainBounds() {\n        TableXYDataset dataset \n                = RendererXYPackageTests.createTestTableXYDataset();\n        JFreeChart chart = ChartFactory.createStackedXYAreaChart(\n                \"Test Chart\", \"X\", \"Y\", dataset, \n                PlotOrientation.VERTICAL, false, false, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        plot.setRenderer(new StackedXYBarRenderer());\n        NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();\n        domainAxis.setAutoRangeIncludesZero(false);\n        Range bounds = domainAxis.getRange();\n        assertFalse(bounds.contains(0.3));\n        assertTrue(bounds.contains(0.5));\n        assertTrue(bounds.contains(2.5));\n        assertFalse(bounds.contains(2.8));\n    }",
        "begin_line": 167,
        "end_line": 182,
        "comment": "\n     * Check that the renderer is calculating the domain bounds correctly.\n     ",
        "child_ranges": [
            "(line 168,col 9)-(line 169,col 68)",
            "(line 170,col 9)-(line 172,col 63)",
            "(line 173,col 9)-(line 173,col 47)",
            "(line 174,col 9)-(line 174,col 53)",
            "(line 175,col 9)-(line 175,col 66)",
            "(line 176,col 9)-(line 176,col 51)",
            "(line 177,col 9)-(line 177,col 45)",
            "(line 178,col 9)-(line 178,col 42)",
            "(line 179,col 9)-(line 179,col 41)",
            "(line 180,col 9)-(line 180,col 41)",
            "(line 181,col 9)-(line 181,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests.testFindRangeBounds()",
        "snippet": "    public void testFindRangeBounds() {\n        TableXYDataset dataset \n                = RendererXYPackageTests.createTestTableXYDataset();\n        JFreeChart chart = ChartFactory.createStackedXYAreaChart(\n                \"Test Chart\", \"X\", \"Y\", dataset, \n                PlotOrientation.VERTICAL, false, false, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        plot.setRenderer(new StackedXYBarRenderer());\n        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        Range bounds = rangeAxis.getRange();\n        assertTrue(bounds.contains(6.0));\n        assertTrue(bounds.contains(8.0));\n    }",
        "begin_line": 187,
        "end_line": 199,
        "comment": "\n     * Check that the renderer is calculating the range bounds correctly.\n     ",
        "child_ranges": [
            "(line 188,col 9)-(line 189,col 68)",
            "(line 190,col 9)-(line 192,col 63)",
            "(line 193,col 9)-(line 193,col 47)",
            "(line 194,col 9)-(line 194,col 53)",
            "(line 195,col 9)-(line 195,col 64)",
            "(line 196,col 9)-(line 196,col 44)",
            "(line 197,col 9)-(line 197,col 41)",
            "(line 198,col 9)-(line 198,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.HighLowRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/HighLowRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.HighLowRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(HighLowRendererTests.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.HighLowRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/HighLowRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.HighLowRendererTests.HighLowRendererTests(java.lang.String)",
        "snippet": "    public HighLowRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.HighLowRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/HighLowRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.HighLowRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        HighLowRenderer r1 = new HighLowRenderer();\n        HighLowRenderer r2 = new HighLowRenderer();\n        assertEquals(r1, r2);\n        \n        // drawOpenTicks\n        r1.setDrawOpenTicks(false);\n        assertFalse(r1.equals(r2));\n        r2.setDrawOpenTicks(false);\n        assertTrue(r1.equals(r2));\n        \n        // drawCloseTicks\n        r1.setDrawCloseTicks(false);\n        assertFalse(r1.equals(r2));\n        r2.setDrawCloseTicks(false);\n        assertTrue(r1.equals(r2));\n        \n        // openTickPaint\n        r1.setOpenTickPaint(Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setOpenTickPaint(Color.red);\n        assertTrue(r1.equals(r2));\n        \n        // closeTickPaint\n        r1.setCloseTickPaint(Color.blue);\n        assertFalse(r1.equals(r2));\n        r2.setCloseTickPaint(Color.blue);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 91,
        "end_line": 119,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 51)",
            "(line 93,col 9)-(line 93,col 51)",
            "(line 94,col 9)-(line 94,col 29)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 103,col 9)-(line 103,col 36)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 105,col 36)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 109,col 9)-(line 109,col 39)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 111,col 39)",
            "(line 112,col 9)-(line 112,col 34)",
            "(line 115,col 9)-(line 115,col 41)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 117,col 41)",
            "(line 118,col 9)-(line 118,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.HighLowRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/HighLowRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.HighLowRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        HighLowRenderer r1 = new HighLowRenderer();\n        HighLowRenderer r2 = new HighLowRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 124,
        "end_line": 131,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 51)",
            "(line 126,col 9)-(line 126,col 51)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 128,col 9)-(line 128,col 31)",
            "(line 129,col 9)-(line 129,col 31)",
            "(line 130,col 9)-(line 130,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.HighLowRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/HighLowRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.HighLowRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        HighLowRenderer r1 = new HighLowRenderer();\n        r1.setCloseTickPaint(Color.green);\n        HighLowRenderer r2 = null;\n        try {\n            r2 = (HighLowRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 136,
        "end_line": 149,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 51)",
            "(line 138,col 9)-(line 138,col 42)",
            "(line 139,col 9)-(line 139,col 34)",
            "(line 140,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 146,col 29)",
            "(line 147,col 9)-(line 147,col 51)",
            "(line 148,col 9)-(line 148,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.HighLowRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/HighLowRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.HighLowRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        HighLowRenderer r1 = new HighLowRenderer();\n        r1.setCloseTickPaint(Color.green);\n        HighLowRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (HighLowRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 154,
        "end_line": 177,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 51)",
            "(line 157,col 9)-(line 157,col 42)",
            "(line 158,col 9)-(line 158,col 34)",
            "(line 160,col 9)-(line 174,col 9)",
            "(line 175,col 9)-(line 175,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.HighLowRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/HighLowRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.HighLowRendererTests.testFindRangeBounds()",
        "snippet": "    public void testFindRangeBounds() {}",
        "begin_line": 182,
        "end_line": 182,
        "comment": "\n     * Some checks for the findRangeBounds() method.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYStepRendererTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests.XYStepRendererTests(java.lang.String)",
        "snippet": "    public XYStepRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYStepRenderer r1 = new XYStepRenderer();\n        XYStepRenderer r2 = new XYStepRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setStepPoint(0.44);\n        assertFalse(r1.equals(r2));\n        r2.setStepPoint(0.44);\n        assertTrue(r1.equals(r2));\n        \n        // try something from the base class\n        r1.setBaseCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseCreateEntities(false);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 88,
        "end_line": 103,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 49)",
            "(line 90,col 9)-(line 90,col 49)",
            "(line 91,col 9)-(line 91,col 29)",
            "(line 93,col 9)-(line 93,col 30)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 95,col 30)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 99,col 9)-(line 99,col 40)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 40)",
            "(line 102,col 9)-(line 102,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYStepRenderer r1 = new XYStepRenderer();\n        r1.setStepPoint(0.123);\n        XYStepRenderer r2 = new XYStepRenderer();\n        r2.setStepPoint(0.123);\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 108,
        "end_line": 117,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 49)",
            "(line 110,col 9)-(line 110,col 31)",
            "(line 111,col 9)-(line 111,col 49)",
            "(line 112,col 9)-(line 112,col 31)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 114,col 9)-(line 114,col 31)",
            "(line 115,col 9)-(line 115,col 31)",
            "(line 116,col 9)-(line 116,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYStepRenderer r1 = new XYStepRenderer();\n        XYStepRenderer r2 = null;\n        try {\n            r2 = (XYStepRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 122,
        "end_line": 134,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 49)",
            "(line 124,col 9)-(line 124,col 33)",
            "(line 125,col 9)-(line 130,col 9)",
            "(line 131,col 9)-(line 131,col 29)",
            "(line 132,col 9)-(line 132,col 51)",
            "(line 133,col 9)-(line 133,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        XYStepRenderer r1 = new XYStepRenderer();\n        r1.setStepPoint(0.123);\n        XYStepRenderer r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (XYStepRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 139,
        "end_line": 158,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 49)",
            "(line 141,col 9)-(line 141,col 31)",
            "(line 142,col 9)-(line 142,col 33)",
            "(line 143,col 9)-(line 156,col 9)",
            "(line 157,col 9)-(line 157,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultTableXYDataset dataset = new DefaultTableXYDataset();\n        \n            XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n            s1.add(5.0, 5.0);\n            s1.add(10.0, 15.5);\n            s1.add(15.0, 9.5);\n            s1.add(20.0, 7.5);\n            dataset.addSeries(s1);\n        \n            XYSeries s2 = new XYSeries(\"Series 2\", true, false);\n            s2.add(5.0, 5.0);\n            s2.add(10.0, 15.5);\n            s2.add(15.0, 9.5);\n            s2.add(20.0, 3.5);\n            dataset.addSeries(s2);\n            XYPlot plot = new XYPlot(dataset, \n                    new NumberAxis(\"X\"), new NumberAxis(\"Y\"), \n                    new XYStepRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 164,
        "end_line": 195,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 32)",
            "(line 166,col 9)-(line 193,col 9)",
            "(line 194,col 9)-(line 194,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepRendererTests.testDrawWithNullValue()",
        "snippet": "    public void testDrawWithNullValue() {\n        boolean success = false;\n        try {\n            DefaultTableXYDataset dataset = new DefaultTableXYDataset();\n        \n            XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n            s1.add(5.0, 5.0);\n            s1.add(10.0, null);\n            s1.add(15.0, 9.5);\n            s1.add(20.0, 7.5);\n            dataset.addSeries(s1);\n        \n            XYSeries s2 = new XYSeries(\"Series 2\", true, false);\n            s2.add(5.0, 5.0);\n            s2.add(10.0, 15.5);\n            s2.add(15.0, null);\n            s2.add(20.0, null);\n            dataset.addSeries(s2);\n            XYPlot plot = new XYPlot(dataset, \n                    new NumberAxis(\"X\"), new NumberAxis(\"Y\"), \n                    new XYStepRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 201,
        "end_line": 232,
        "comment": "\n     * Draws the chart with a <code>null</code> value in the dataset to make \n     * sure that no exceptions are thrown.\n     ",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 32)",
            "(line 203,col 9)-(line 230,col 9)",
            "(line 231,col 9)-(line 231,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYBoxAndWhiskerRendererTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 65)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests.XYBoxAndWhiskerRendererTests(java.lang.String)",
        "snippet": "    public XYBoxAndWhiskerRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        XYBoxAndWhiskerRenderer r1 = new XYBoxAndWhiskerRenderer();\n        XYBoxAndWhiskerRenderer r2 = new XYBoxAndWhiskerRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setArtifactPaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setArtifactPaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.red));\n        assertEquals(r1, r2);\n        \n        r1.setBoxWidth(0.55);\n        assertFalse(r1.equals(r2));\n        r2.setBoxWidth(0.55);\n        assertEquals(r1, r2);\n        \n        r1.setFillBox(!r1.getFillBox());\n        assertFalse(r1.equals(r2));\n        r2.setFillBox(!r2.getFillBox());\n        assertEquals(r1, r2);\n        \n    }",
        "begin_line": 85,
        "end_line": 108,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 67)",
            "(line 88,col 9)-(line 88,col 67)",
            "(line 89,col 9)-(line 89,col 29)",
            "(line 91,col 9)-(line 92,col 40)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 95,col 40)",
            "(line 96,col 9)-(line 96,col 29)",
            "(line 98,col 9)-(line 98,col 29)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 100,col 29)",
            "(line 101,col 9)-(line 101,col 29)",
            "(line 103,col 9)-(line 103,col 40)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 105,col 40)",
            "(line 106,col 9)-(line 106,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYBoxAndWhiskerRenderer r1 = new XYBoxAndWhiskerRenderer();\n        XYBoxAndWhiskerRenderer r2 = new XYBoxAndWhiskerRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 113,
        "end_line": 120,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 67)",
            "(line 115,col 9)-(line 115,col 67)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 117,col 9)-(line 117,col 31)",
            "(line 118,col 9)-(line 118,col 31)",
            "(line 119,col 9)-(line 119,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYBoxAndWhiskerRenderer r1 = new XYBoxAndWhiskerRenderer();\n        XYBoxAndWhiskerRenderer r2 = null;\n        try {\n            r2 = (XYBoxAndWhiskerRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 125,
        "end_line": 137,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 67)",
            "(line 127,col 9)-(line 127,col 42)",
            "(line 128,col 9)-(line 133,col 9)",
            "(line 134,col 9)-(line 134,col 29)",
            "(line 135,col 9)-(line 135,col 51)",
            "(line 136,col 9)-(line 136,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYBoxAndWhiskerRenderer r1 = new XYBoxAndWhiskerRenderer();\n        XYBoxAndWhiskerRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (XYBoxAndWhiskerRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 142,
        "end_line": 164,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 67)",
            "(line 145,col 9)-(line 145,col 42)",
            "(line 147,col 9)-(line 161,col 9)",
            "(line 162,col 9)-(line 162,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYStepAreaRendererTests.class);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests.XYStepAreaRendererTests(java.lang.String)",
        "snippet": "    public XYStepAreaRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYStepAreaRenderer r1 = new XYStepAreaRenderer();\n        XYStepAreaRenderer r2 = new XYStepAreaRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setOutline(true);\n        assertFalse(r1.equals(r2));\n        r2.setOutline(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setShapesVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setShapesVisible(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setShapesFilled(true);\n        assertFalse(r1.equals(r2));\n        r2.setShapesFilled(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setPlotArea(false);\n        assertFalse(r1.equals(r2));\n        r2.setPlotArea(false);\n        assertTrue(r1.equals(r2));\n        \n        r1.setRangeBase(-1.0);\n        assertFalse(r1.equals(r2));\n        r2.setRangeBase(-1.0);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 90,
        "end_line": 119,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 57)",
            "(line 92,col 9)-(line 92,col 57)",
            "(line 93,col 9)-(line 93,col 29)",
            "(line 95,col 9)-(line 95,col 28)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 28)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 105,col 9)-(line 105,col 33)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 107,col 33)",
            "(line 108,col 9)-(line 108,col 34)",
            "(line 110,col 9)-(line 110,col 30)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 30)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 115,col 9)-(line 115,col 30)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 117,col 30)",
            "(line 118,col 9)-(line 118,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYStepAreaRenderer r1 = new XYStepAreaRenderer();\n        XYStepAreaRenderer r2 = new XYStepAreaRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 124,
        "end_line": 131,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 57)",
            "(line 126,col 9)-(line 126,col 57)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 128,col 9)-(line 128,col 31)",
            "(line 129,col 9)-(line 129,col 31)",
            "(line 130,col 9)-(line 130,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYStepAreaRenderer r1 = new XYStepAreaRenderer();\n        XYStepAreaRenderer r2 = null;\n        try {\n            r2 = (XYStepAreaRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 136,
        "end_line": 148,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 57)",
            "(line 138,col 9)-(line 138,col 37)",
            "(line 139,col 9)-(line 144,col 9)",
            "(line 145,col 9)-(line 145,col 29)",
            "(line 146,col 9)-(line 146,col 51)",
            "(line 147,col 9)-(line 147,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYStepAreaRenderer r1 = new XYStepAreaRenderer();\n        XYStepAreaRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (XYStepAreaRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 153,
        "end_line": 173,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 57)",
            "(line 156,col 9)-(line 156,col 37)",
            "(line 158,col 9)-(line 171,col 9)",
            "(line 172,col 9)-(line 172,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYStepAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultTableXYDataset dataset = new DefaultTableXYDataset();\n        \n            XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n            s1.add(5.0, 5.0);\n            s1.add(10.0, 15.5);\n            s1.add(15.0, 9.5);\n            s1.add(20.0, 7.5);\n            dataset.addSeries(s1);\n        \n            XYSeries s2 = new XYSeries(\"Series 2\", true, false);\n            s2.add(5.0, 5.0);\n            s2.add(10.0, 15.5);\n            s2.add(15.0, 9.5);\n            s2.add(20.0, 3.5);\n            dataset.addSeries(s2);\n            XYPlot plot = new XYPlot(dataset, \n                    new NumberAxis(\"X\"), new NumberAxis(\"Y\"), \n                    new XYStepAreaRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 179,
        "end_line": 210,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 32)",
            "(line 181,col 9)-(line 208,col 9)",
            "(line 209,col 9)-(line 209,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYAreaRendererTests.class);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests.XYAreaRendererTests(java.lang.String)",
        "snippet": "    public XYAreaRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYAreaRenderer r1 = new XYAreaRenderer();\n        XYAreaRenderer r2 = new XYAreaRenderer();\n        assertEquals(r1, r2);\n        \n        r1 = new XYAreaRenderer(XYAreaRenderer.AREA_AND_SHAPES);\n        assertFalse(r1.equals(r2));\n        r2 = new XYAreaRenderer(XYAreaRenderer.AREA_AND_SHAPES);\n        assertTrue(r1.equals(r2));\n\n        r1 = new XYAreaRenderer(XYAreaRenderer.AREA);\n        assertFalse(r1.equals(r2));\n        r2 = new XYAreaRenderer(XYAreaRenderer.AREA);\n        assertTrue(r1.equals(r2));\n\n        r1 = new XYAreaRenderer(XYAreaRenderer.LINES);\n        assertFalse(r1.equals(r2));\n        r2 = new XYAreaRenderer(XYAreaRenderer.LINES);\n        assertTrue(r1.equals(r2));\n\n        r1 = new XYAreaRenderer(XYAreaRenderer.SHAPES);\n        assertFalse(r1.equals(r2));\n        r2 = new XYAreaRenderer(XYAreaRenderer.SHAPES);\n        assertTrue(r1.equals(r2));\n\n        r1 = new XYAreaRenderer(XYAreaRenderer.SHAPES_AND_LINES);\n        assertFalse(r1.equals(r2));\n        r2 = new XYAreaRenderer(XYAreaRenderer.SHAPES_AND_LINES);\n        assertTrue(r1.equals(r2));\n\n        r1.setOutline(true);\n        assertFalse(r1.equals(r2));\n        r2.setOutline(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setLegendArea(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendArea(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 93,
        "end_line": 132,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 49)",
            "(line 95,col 9)-(line 95,col 49)",
            "(line 96,col 9)-(line 96,col 29)",
            "(line 98,col 9)-(line 98,col 64)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 100,col 64)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 103,col 9)-(line 103,col 53)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 105,col 53)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 108,col 9)-(line 108,col 54)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 110,col 54)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 113,col 9)-(line 113,col 55)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 55)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 118,col 9)-(line 118,col 65)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 120,col 65)",
            "(line 121,col 9)-(line 121,col 34)",
            "(line 123,col 9)-(line 123,col 28)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 125,col 28)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 128,col 9)-(line 128,col 69)",
            "(line 129,col 9)-(line 129,col 35)",
            "(line 130,col 9)-(line 130,col 69)",
            "(line 131,col 9)-(line 131,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYAreaRenderer r1 = new XYAreaRenderer();\n        XYAreaRenderer r2 = new XYAreaRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 137,
        "end_line": 144,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 49)",
            "(line 139,col 9)-(line 139,col 49)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 141,col 9)-(line 141,col 31)",
            "(line 142,col 9)-(line 142,col 31)",
            "(line 143,col 9)-(line 143,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYAreaRenderer r1 = new XYAreaRenderer();\n        Rectangle2D rect1 = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        r1.setLegendArea(rect1);\n        XYAreaRenderer r2 = null;\n        try {\n            r2 = (XYAreaRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check independence\n        rect1.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setLegendArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 149,
        "end_line": 169,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 49)",
            "(line 151,col 9)-(line 151,col 71)",
            "(line 152,col 9)-(line 152,col 32)",
            "(line 153,col 9)-(line 153,col 33)",
            "(line 154,col 9)-(line 159,col 9)",
            "(line 160,col 9)-(line 160,col 29)",
            "(line 161,col 9)-(line 161,col 51)",
            "(line 162,col 9)-(line 162,col 34)",
            "(line 165,col 9)-(line 165,col 42)",
            "(line 166,col 9)-(line 166,col 35)",
            "(line 167,col 9)-(line 167,col 69)",
            "(line 168,col 9)-(line 168,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYAreaRenderer r1 = new XYAreaRenderer();\n        XYAreaRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (XYAreaRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 174,
        "end_line": 196,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 49)",
            "(line 177,col 9)-(line 177,col 33)",
            "(line 179,col 9)-(line 193,col 9)",
            "(line 194,col 9)-(line 194,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultTableXYDataset dataset = new DefaultTableXYDataset();\n        \n            XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n            s1.add(5.0, 5.0);\n            s1.add(10.0, 15.5);\n            s1.add(15.0, 9.5);\n            s1.add(20.0, 7.5);\n            dataset.addSeries(s1);\n        \n            XYSeries s2 = new XYSeries(\"Series 2\", true, false);\n            s2.add(5.0, 5.0);\n            s2.add(10.0, 15.5);\n            s2.add(15.0, 9.5);\n            s2.add(20.0, 3.5);\n            dataset.addSeries(s2);\n            XYPlot plot = new XYPlot(dataset, \n                    new NumberAxis(\"X\"), new NumberAxis(\"Y\"), \n                    new XYAreaRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 202,
        "end_line": 233,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 32)",
            "(line 204,col 9)-(line 231,col 9)",
            "(line 232,col 9)-(line 232,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        XYSeriesCollection d1 = new XYSeriesCollection();\n        XYSeries s1 = new XYSeries(\"S1\");\n        s1.add(1.0, 1.1);\n        XYSeries s2 = new XYSeries(\"S2\");\n        s2.add(1.0, 1.1);\n        d1.addSeries(s1);\n        d1.addSeries(s2);\n        \n        XYSeriesCollection d2 = new XYSeriesCollection();\n        XYSeries s3 = new XYSeries(\"S3\");\n        s3.add(1.0, 1.1);\n        XYSeries s4 = new XYSeries(\"S4\");\n        s4.add(1.0, 1.1);\n        XYSeries s5 = new XYSeries(\"S5\");\n        s5.add(1.0, 1.1);\n        d2.addSeries(s3);\n        d2.addSeries(s4);\n        d2.addSeries(s5);\n\n        XYAreaRenderer r = new XYAreaRenderer();\n        XYPlot plot = new XYPlot(d1, new NumberAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, d2);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"S5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 239,
        "end_line": 268,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 240,col 9)-(line 240,col 57)",
            "(line 241,col 9)-(line 241,col 41)",
            "(line 242,col 9)-(line 242,col 25)",
            "(line 243,col 9)-(line 243,col 41)",
            "(line 244,col 9)-(line 244,col 25)",
            "(line 245,col 9)-(line 245,col 25)",
            "(line 246,col 9)-(line 246,col 25)",
            "(line 248,col 9)-(line 248,col 57)",
            "(line 249,col 9)-(line 249,col 41)",
            "(line 250,col 9)-(line 250,col 25)",
            "(line 251,col 9)-(line 251,col 41)",
            "(line 252,col 9)-(line 252,col 25)",
            "(line 253,col 9)-(line 253,col 41)",
            "(line 254,col 9)-(line 254,col 25)",
            "(line 255,col 9)-(line 255,col 25)",
            "(line 256,col 9)-(line 256,col 25)",
            "(line 257,col 9)-(line 257,col 25)",
            "(line 259,col 9)-(line 259,col 48)",
            "(line 260,col 9)-(line 261,col 40)",
            "(line 262,col 9)-(line 262,col 31)",
            "(line 263,col 32)-(line 263,col 52)",
            "(line 264,col 9)-(line 264,col 46)",
            "(line 265,col 9)-(line 265,col 42)",
            "(line 266,col 9)-(line 266,col 46)",
            "(line 267,col 9)-(line 267,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.WindItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/WindItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.WindItemRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(WindItemRendererTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.WindItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/WindItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.WindItemRendererTests.WindItemRendererTests(java.lang.String)",
        "snippet": "    public WindItemRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.WindItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/WindItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.WindItemRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        WindItemRenderer r1 = new WindItemRenderer();\n        WindItemRenderer r2 = new WindItemRenderer();\n        assertEquals(r1, r2);\n    }",
        "begin_line": 82,
        "end_line": 86,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 53)",
            "(line 84,col 9)-(line 84,col 53)",
            "(line 85,col 9)-(line 85,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.WindItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/WindItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.WindItemRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        WindItemRenderer r1 = new WindItemRenderer();\n        WindItemRenderer r2 = new WindItemRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 91,
        "end_line": 98,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 53)",
            "(line 93,col 9)-(line 93,col 53)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 95,col 9)-(line 95,col 31)",
            "(line 96,col 9)-(line 96,col 31)",
            "(line 97,col 9)-(line 97,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.WindItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/WindItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.WindItemRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        WindItemRenderer r1 = new WindItemRenderer();\n        WindItemRenderer r2 = null;\n        try {\n            r2 = (WindItemRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 103,
        "end_line": 115,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 53)",
            "(line 105,col 9)-(line 105,col 35)",
            "(line 106,col 9)-(line 111,col 9)",
            "(line 112,col 9)-(line 112,col 29)",
            "(line 113,col 9)-(line 113,col 51)",
            "(line 114,col 9)-(line 114,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.WindItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/WindItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.WindItemRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        WindItemRenderer r1 = new WindItemRenderer();\n        WindItemRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (WindItemRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 120,
        "end_line": 142,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 53)",
            "(line 123,col 9)-(line 123,col 35)",
            "(line 125,col 9)-(line 139,col 9)",
            "(line 140,col 9)-(line 140,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StackedXYAreaRendererTests.class);\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.StackedXYAreaRendererTests(java.lang.String)",
        "snippet": "    public StackedXYAreaRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StackedXYAreaRenderer r1 = new StackedXYAreaRenderer();\n        StackedXYAreaRenderer r2 = new StackedXYAreaRenderer();\n        assertEquals(r1, r2);\n        assertEquals(r2, r1);\n        \n        r1.setShapePaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.green));\n        assertFalse(r1.equals(r2));\n        r2.setShapePaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.green));\n        assertTrue(r1.equals(r2));\n        \n        Stroke s = new BasicStroke(1.23f);\n        r1.setShapeStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setShapeStroke(s);\n        assertTrue(r1.equals(r2)); \n    }",
        "begin_line": 100,
        "end_line": 118,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 63)",
            "(line 102,col 9)-(line 102,col 63)",
            "(line 103,col 9)-(line 103,col 29)",
            "(line 104,col 9)-(line 104,col 29)",
            "(line 106,col 9)-(line 107,col 42)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 110,col 42)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 113,col 9)-(line 113,col 42)",
            "(line 114,col 9)-(line 114,col 29)",
            "(line 115,col 9)-(line 115,col 35)",
            "(line 116,col 9)-(line 116,col 29)",
            "(line 117,col 9)-(line 117,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        StackedXYAreaRenderer r1 = new StackedXYAreaRenderer();\n        StackedXYAreaRenderer r2 = new StackedXYAreaRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 123,
        "end_line": 130,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 63)",
            "(line 125,col 9)-(line 125,col 63)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 127,col 9)-(line 127,col 31)",
            "(line 128,col 9)-(line 128,col 31)",
            "(line 129,col 9)-(line 129,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StackedXYAreaRenderer r1 = new StackedXYAreaRenderer();\n        StackedXYAreaRenderer r2 = null;\n        try {\n            r2 = (StackedXYAreaRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 135,
        "end_line": 147,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 63)",
            "(line 137,col 9)-(line 137,col 40)",
            "(line 138,col 9)-(line 143,col 9)",
            "(line 144,col 9)-(line 144,col 29)",
            "(line 145,col 9)-(line 145,col 51)",
            "(line 146,col 9)-(line 146,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        StackedXYAreaRenderer r1 = new StackedXYAreaRenderer();\n        r1.setShapePaint(Color.red);\n        r1.setShapeStroke(new BasicStroke(1.23f));\n        StackedXYAreaRenderer r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (StackedXYAreaRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 152,
        "end_line": 172,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 63)",
            "(line 154,col 9)-(line 154,col 36)",
            "(line 155,col 9)-(line 155,col 50)",
            "(line 156,col 9)-(line 156,col 40)",
            "(line 157,col 9)-(line 170,col 9)",
            "(line 171,col 9)-(line 171,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.testFindRangeBounds()",
        "snippet": "    public void testFindRangeBounds() {\n        TableXYDataset dataset \n                = RendererXYPackageTests.createTestTableXYDataset();\n        JFreeChart chart = ChartFactory.createStackedXYAreaChart(\n                \"Test Chart\", \"X\", \"Y\", dataset, PlotOrientation.VERTICAL, \n                false, false, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        Range bounds = rangeAxis.getRange();\n        assertTrue(bounds.contains(6.0));\n        assertTrue(bounds.contains(8.0));\n    }",
        "begin_line": 177,
        "end_line": 188,
        "comment": "\n     * Check that the renderer is calculating the range bounds correctly.\n     ",
        "child_ranges": [
            "(line 178,col 9)-(line 179,col 68)",
            "(line 180,col 9)-(line 182,col 37)",
            "(line 183,col 9)-(line 183,col 47)",
            "(line 184,col 9)-(line 184,col 64)",
            "(line 185,col 9)-(line 185,col 44)",
            "(line 186,col 9)-(line 186,col 41)",
            "(line 187,col 9)-(line 187,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultTableXYDataset dataset = new DefaultTableXYDataset();\n        \n            XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n            s1.add(5.0, 5.0);\n            s1.add(10.0, 15.5);\n            s1.add(15.0, 9.5);\n            s1.add(20.0, 7.5);\n            dataset.addSeries(s1);\n        \n            XYSeries s2 = new XYSeries(\"Series 2\", true, false);\n            s2.add(5.0, 5.0);\n            s2.add(10.0, 15.5);\n            s2.add(15.0, 9.5);\n            s2.add(20.0, 3.5);\n            dataset.addSeries(s2);\n            XYPlot plot = new XYPlot(dataset, \n                    new NumberAxis(\"X\"), new NumberAxis(\"Y\"), \n                    new StackedXYAreaRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 194,
        "end_line": 225,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 32)",
            "(line 196,col 9)-(line 223,col 9)",
            "(line 224,col 9)-(line 224,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.testBug1593156()",
        "snippet": "    public void testBug1593156() {\n        boolean success = false;\n        try {\n            DefaultTableXYDataset dataset = new DefaultTableXYDataset();\n        \n            XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n            s1.add(5.0, 5.0);\n            s1.add(10.0, 15.5);\n            s1.add(15.0, 9.5);\n            s1.add(20.0, 7.5);\n            dataset.addSeries(s1);\n        \n            XYSeries s2 = new XYSeries(\"Series 2\", true, false);\n            s2.add(5.0, 5.0);\n            s2.add(10.0, 15.5);\n            s2.add(15.0, 9.5);\n            s2.add(20.0, 3.5);\n            dataset.addSeries(s2);\n            StackedXYAreaRenderer renderer = new StackedXYAreaRenderer(\n                    XYAreaRenderer.LINES);\n            XYPlot plot = new XYPlot(dataset, \n                    new NumberAxis(\"X\"), new NumberAxis(\"Y\"), \n                    renderer);\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 230,
        "end_line": 263,
        "comment": "\n     * A test for bug 1593156.\n     ",
        "child_ranges": [
            "(line 231,col 9)-(line 231,col 32)",
            "(line 232,col 9)-(line 261,col 9)",
            "(line 262,col 9)-(line 262,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBlockRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYBlockRendererTests.class);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBlockRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests.XYBlockRendererTests(java.lang.String)",
        "snippet": "    public XYBlockRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBlockRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        // default instances\n        XYBlockRenderer r1 = new XYBlockRenderer();\n        XYBlockRenderer r2 = new XYBlockRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        // blockHeight\n        r1.setBlockHeight(2.0);\n        assertFalse(r1.equals(r2));\n        r2.setBlockHeight(2.0);\n        assertTrue(r1.equals(r2));\n\n        // blockWidth\n        r1.setBlockWidth(2.0);\n        assertFalse(r1.equals(r2));\n        r2.setBlockWidth(2.0);\n        assertTrue(r1.equals(r2));\n        \n        // paintScale\n        r1.setPaintScale(new GrayPaintScale(0.0, 1.0));\n        assertFalse(r1.equals(r2));\n        r2.setPaintScale(new GrayPaintScale(0.0, 1.0));\n        assertTrue(r1.equals(r2));\n        \n    }",
        "begin_line": 89,
        "end_line": 115,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 51)",
            "(line 93,col 9)-(line 93,col 51)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 98,col 9)-(line 98,col 31)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 100,col 31)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 104,col 9)-(line 104,col 30)",
            "(line 105,col 9)-(line 105,col 35)",
            "(line 106,col 9)-(line 106,col 30)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 110,col 9)-(line 110,col 55)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 55)",
            "(line 113,col 9)-(line 113,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBlockRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYBlockRenderer r1 = new XYBlockRenderer();\n        XYBlockRenderer r2 = new XYBlockRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 120,
        "end_line": 127,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 51)",
            "(line 122,col 9)-(line 122,col 51)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 124,col 9)-(line 124,col 31)",
            "(line 125,col 9)-(line 125,col 31)",
            "(line 126,col 9)-(line 126,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBlockRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYBlockRenderer r1 = new XYBlockRenderer();\n        LookupPaintScale scale1 = new LookupPaintScale();\n        r1.setPaintScale(scale1);\n        XYBlockRenderer r2 = null;\n        try {\n            r2 = (XYBlockRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check independence\n        scale1.add(0.5, Color.red);\n        assertFalse(r1.equals(r2));\n        LookupPaintScale scale2 = (LookupPaintScale) r2.getPaintScale();\n        scale2.add(0.5, Color.red);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 132,
        "end_line": 153,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 51)",
            "(line 134,col 9)-(line 134,col 57)",
            "(line 135,col 9)-(line 135,col 33)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 137,col 9)-(line 142,col 9)",
            "(line 143,col 9)-(line 143,col 29)",
            "(line 144,col 9)-(line 144,col 51)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 148,col 9)-(line 148,col 35)",
            "(line 149,col 9)-(line 149,col 35)",
            "(line 150,col 9)-(line 150,col 72)",
            "(line 151,col 9)-(line 151,col 35)",
            "(line 152,col 9)-(line 152,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBlockRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        XYBlockRenderer r1 = new XYBlockRenderer();\n        XYBlockRenderer r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (XYBlockRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 158,
        "end_line": 176,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 51)",
            "(line 160,col 9)-(line 160,col 34)",
            "(line 161,col 9)-(line 174,col 9)",
            "(line 175,col 9)-(line 175,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBlockRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests.testBug1766646A()",
        "snippet": "    public void testBug1766646A() {\n        XYBlockRenderer r = new XYBlockRenderer();\n        Range range = r.findDomainBounds(null);\n        assertTrue(range == null);\n        DefaultXYZDataset emptyDataset = new DefaultXYZDataset();\n        range = r.findDomainBounds(emptyDataset);\n        assertTrue(range == null);\n    }",
        "begin_line": 181,
        "end_line": 188,
        "comment": "\n     * A simple test for bug 1766646.\n     ",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 50)",
            "(line 183,col 9)-(line 183,col 47)",
            "(line 184,col 9)-(line 184,col 34)",
            "(line 185,col 9)-(line 185,col 65)",
            "(line 186,col 9)-(line 186,col 49)",
            "(line 187,col 9)-(line 187,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBlockRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBlockRendererTests.testBug1766646B()",
        "snippet": "    public void testBug1766646B() {\n        XYBlockRenderer r = new XYBlockRenderer();\n        Range range = r.findRangeBounds(null);\n        assertTrue(range == null);\n        DefaultXYZDataset emptyDataset = new DefaultXYZDataset();\n        range = r.findRangeBounds(emptyDataset);\n        assertTrue(range == null);\n    }",
        "begin_line": 193,
        "end_line": 200,
        "comment": "\n     * A simple test for bug 1766646.\n     ",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 50)",
            "(line 195,col 9)-(line 195,col 46)",
            "(line 196,col 9)-(line 196,col 34)",
            "(line 197,col 9)-(line 197,col 65)",
            "(line 198,col 9)-(line 198,col 48)",
            "(line 199,col 9)-(line 199,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLine3DRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYLine3DRendererTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLine3DRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests.XYLine3DRendererTests(java.lang.String)",
        "snippet": "    public XYLine3DRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLine3DRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYLine3DRenderer r1 = new XYLine3DRenderer();\n        XYLine3DRenderer r2 = new XYLine3DRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setXOffset(11.1);\n        assertFalse(r1.equals(r2));\n        r2.setXOffset(11.1);\n        assertTrue(r1.equals(r2));\n\n        r1.setYOffset(11.1);\n        assertFalse(r1.equals(r2));\n        r2.setYOffset(11.1);\n        assertTrue(r1.equals(r2));\n        \n        r1.setWallPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.blue));\n        assertFalse(r1.equals(r2));\n        r2.setWallPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.blue));\n        assertTrue(r1.equals(r2));   \n    }",
        "begin_line": 84,
        "end_line": 105,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 53)",
            "(line 86,col 9)-(line 86,col 53)",
            "(line 87,col 9)-(line 87,col 29)",
            "(line 89,col 9)-(line 89,col 28)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 28)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 94,col 28)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 28)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 99,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLine3DRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYLine3DRenderer r1 = new XYLine3DRenderer();\n        XYLine3DRenderer r2 = new XYLine3DRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 110,
        "end_line": 117,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 53)",
            "(line 112,col 9)-(line 112,col 53)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 114,col 9)-(line 114,col 31)",
            "(line 115,col 9)-(line 115,col 31)",
            "(line 116,col 9)-(line 116,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLine3DRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYLine3DRenderer r1 = new XYLine3DRenderer();\n        r1.setWallPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f,\n                Color.blue));\n        XYLine3DRenderer r2 = null;\n        try {\n            r2 = (XYLine3DRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 122,
        "end_line": 136,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 53)",
            "(line 124,col 9)-(line 125,col 29)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 133,col 29)",
            "(line 134,col 9)-(line 134,col 51)",
            "(line 135,col 9)-(line 135,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLine3DRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYLine3DRenderer r1 = new XYLine3DRenderer();\n        r1.setWallPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f,\n                Color.blue));\n        XYLine3DRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (XYLine3DRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 141,
        "end_line": 164,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 53)",
            "(line 144,col 9)-(line 145,col 29)",
            "(line 146,col 9)-(line 146,col 35)",
            "(line 148,col 9)-(line 161,col 9)",
            "(line 162,col 9)-(line 162,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYErrorRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYErrorRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYErrorRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYErrorRendererTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYErrorRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYErrorRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYErrorRendererTests.XYErrorRendererTests(java.lang.String)",
        "snippet": "    public XYErrorRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYErrorRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYErrorRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYErrorRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYErrorRenderer r1 = new XYErrorRenderer();\n        XYErrorRenderer r2 = new XYErrorRenderer();\n        assertEquals(r1, r2);\n        \n        // drawXError\n        r1.setDrawXError(false);\n        assertFalse(r1.equals(r2));\n        r2.setDrawXError(false);\n        assertTrue(r1.equals(r2));\n        \n        // drawYError\n        r1.setDrawYError(false);\n        assertFalse(r1.equals(r2));\n        r2.setDrawYError(false);\n        assertTrue(r1.equals(r2));\n        \n        // capLength\n        r1.setCapLength(9.0);\n        assertFalse(r1.equals(r2));\n        r2.setCapLength(9.0);\n        assertTrue(r1.equals(r2));\n        \n        // errorPaint\n        r1.setErrorPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.green));\n        assertFalse(r1.equals(r2));\n        r2.setErrorPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.green));\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 84,
        "end_line": 114,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 51)",
            "(line 86,col 9)-(line 86,col 51)",
            "(line 87,col 9)-(line 87,col 29)",
            "(line 90,col 9)-(line 90,col 32)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 92,col 9)-(line 92,col 32)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 96,col 9)-(line 96,col 32)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 32)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 102,col 9)-(line 102,col 29)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 29)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 108,col 9)-(line 109,col 30)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 112,col 30)",
            "(line 113,col 9)-(line 113,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYErrorRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYErrorRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYErrorRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYErrorRenderer r1 = new XYErrorRenderer();\n        XYErrorRenderer r2 = new XYErrorRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 119,
        "end_line": 126,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 51)",
            "(line 121,col 9)-(line 121,col 51)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 123,col 9)-(line 123,col 31)",
            "(line 124,col 9)-(line 124,col 31)",
            "(line 125,col 9)-(line 125,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYErrorRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYErrorRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYErrorRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYErrorRenderer r1 = new XYErrorRenderer();\n        r1.setErrorPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.white));\n        XYErrorRenderer r2 = null;\n        try {\n            r2 = (XYErrorRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 131,
        "end_line": 145,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 51)",
            "(line 133,col 9)-(line 134,col 30)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 136,col 9)-(line 141,col 9)",
            "(line 142,col 9)-(line 142,col 29)",
            "(line 143,col 9)-(line 143,col 51)",
            "(line 144,col 9)-(line 144,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYErrorRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYErrorRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYErrorRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYErrorRenderer r1 = new XYErrorRenderer();\n        r1.setErrorPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.white));\n        XYErrorRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (XYErrorRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 150,
        "end_line": 173,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 51)",
            "(line 153,col 9)-(line 154,col 30)",
            "(line 155,col 9)-(line 155,col 34)",
            "(line 157,col 9)-(line 170,col 9)",
            "(line 171,col 9)-(line 171,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.DeviationRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/DeviationRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.DeviationRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DeviationRendererTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.DeviationRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/DeviationRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.DeviationRendererTests.DeviationRendererTests(java.lang.String)",
        "snippet": "    public DeviationRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.DeviationRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/DeviationRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.DeviationRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        // default instances\n        DeviationRenderer r1 = new DeviationRenderer();\n        DeviationRenderer r2 = new DeviationRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        r1.setAlpha(0.1f);\n        assertFalse(r1.equals(r2));\n        r2.setAlpha(0.1f);\n        assertTrue(r1.equals(r2));\n\n    }",
        "begin_line": 82,
        "end_line": 95,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 55)",
            "(line 86,col 9)-(line 86,col 55)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 90,col 9)-(line 90,col 26)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 92,col 9)-(line 92,col 26)",
            "(line 93,col 9)-(line 93,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.DeviationRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/DeviationRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.DeviationRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        DeviationRenderer r1 = new DeviationRenderer();\n        DeviationRenderer r2 = new DeviationRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 100,
        "end_line": 107,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 55)",
            "(line 102,col 9)-(line 102,col 55)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 104,col 9)-(line 104,col 31)",
            "(line 105,col 9)-(line 105,col 31)",
            "(line 106,col 9)-(line 106,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.DeviationRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/DeviationRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.DeviationRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DeviationRenderer r1 = new DeviationRenderer();\n        DeviationRenderer r2 = null;\n        try {\n            r2 = (DeviationRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check independence\n        \n    }",
        "begin_line": 112,
        "end_line": 127,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 55)",
            "(line 114,col 9)-(line 114,col 36)",
            "(line 115,col 9)-(line 120,col 9)",
            "(line 121,col 9)-(line 121,col 29)",
            "(line 122,col 9)-(line 122,col 51)",
            "(line 123,col 9)-(line 123,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.DeviationRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/DeviationRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.DeviationRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DeviationRenderer r1 = new DeviationRenderer();\n        DeviationRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (DeviationRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 132,
        "end_line": 153,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 55)",
            "(line 135,col 9)-(line 135,col 36)",
            "(line 137,col 9)-(line 150,col 9)",
            "(line 151,col 9)-(line 151,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYAreaRenderer2Tests.class);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests.XYAreaRenderer2Tests(java.lang.String)",
        "snippet": "    public XYAreaRenderer2Tests(String name) {\n        super(name);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYAreaRenderer2 r1 = new XYAreaRenderer2();\n        XYAreaRenderer2 r2 = new XYAreaRenderer2();\n        assertEquals(r1, r2);\n        \n        r1.setOutline(!r1.isOutline());\n        assertFalse(r1.equals(r2));\n        r2.setOutline(r1.isOutline());\n        assertTrue(r1.equals(r2));\n        \n        r1.setLegendArea(new Rectangle(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendArea(new Rectangle(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 92,
        "end_line": 106,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 51)",
            "(line 94,col 9)-(line 94,col 51)",
            "(line 95,col 9)-(line 95,col 29)",
            "(line 97,col 9)-(line 97,col 39)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 38)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 102,col 52)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 52)",
            "(line 105,col 9)-(line 105,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYAreaRenderer2 r1 = new XYAreaRenderer2();\n        XYAreaRenderer2 r2 = new XYAreaRenderer2();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 111,
        "end_line": 118,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 51)",
            "(line 113,col 9)-(line 113,col 51)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 115,col 9)-(line 115,col 31)",
            "(line 116,col 9)-(line 116,col 31)",
            "(line 117,col 9)-(line 117,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYAreaRenderer2 r1 = new XYAreaRenderer2();\n        Rectangle rect = new Rectangle(1, 2, 3, 4);\n        r1.setLegendArea(rect);\n        XYAreaRenderer2 r2 = null;\n        try {\n            r2 = (XYAreaRenderer2) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check independence\n        rect.setBounds(99, 99, 99, 99);\n        assertFalse(r1.equals(r2));\n    }",
        "begin_line": 123,
        "end_line": 141,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 51)",
            "(line 125,col 9)-(line 125,col 51)",
            "(line 126,col 9)-(line 126,col 31)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 128,col 9)-(line 133,col 9)",
            "(line 134,col 9)-(line 134,col 29)",
            "(line 135,col 9)-(line 135,col 51)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 139,col 9)-(line 139,col 39)",
            "(line 140,col 9)-(line 140,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYAreaRenderer2 r1 = new XYAreaRenderer2();\n        XYAreaRenderer2 r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (XYAreaRenderer2) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 146,
        "end_line": 168,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 51)",
            "(line 149,col 9)-(line 149,col 34)",
            "(line 151,col 9)-(line 165,col 9)",
            "(line 166,col 9)-(line 166,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultTableXYDataset dataset = new DefaultTableXYDataset();\n        \n            XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n            s1.add(5.0, 5.0);\n            s1.add(10.0, 15.5);\n            s1.add(15.0, 9.5);\n            s1.add(20.0, 7.5);\n            dataset.addSeries(s1);\n        \n            XYSeries s2 = new XYSeries(\"Series 2\", true, false);\n            s2.add(5.0, 5.0);\n            s2.add(10.0, 15.5);\n            s2.add(15.0, 9.5);\n            s2.add(20.0, 3.5);\n            dataset.addSeries(s2);\n            XYPlot plot = new XYPlot(dataset, \n                    new NumberAxis(\"X\"), new NumberAxis(\"Y\"), \n                    new XYAreaRenderer2());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 174,
        "end_line": 205,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 32)",
            "(line 176,col 9)-(line 203,col 9)",
            "(line 204,col 9)-(line 204,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        XYSeriesCollection d1 = new XYSeriesCollection();\n        XYSeries s1 = new XYSeries(\"S1\");\n        s1.add(1.0, 1.1);\n        XYSeries s2 = new XYSeries(\"S2\");\n        s2.add(1.0, 1.1);\n        d1.addSeries(s1);\n        d1.addSeries(s2);\n        \n        XYSeriesCollection d2 = new XYSeriesCollection();\n        XYSeries s3 = new XYSeries(\"S3\");\n        s3.add(1.0, 1.1);\n        XYSeries s4 = new XYSeries(\"S4\");\n        s4.add(1.0, 1.1);\n        XYSeries s5 = new XYSeries(\"S5\");\n        s5.add(1.0, 1.1);\n        d2.addSeries(s3);\n        d2.addSeries(s4);\n        d2.addSeries(s5);\n\n        XYAreaRenderer2 r = new XYAreaRenderer2();\n        XYPlot plot = new XYPlot(d1, new NumberAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, d2);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"S5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 211,
        "end_line": 240,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 57)",
            "(line 213,col 9)-(line 213,col 41)",
            "(line 214,col 9)-(line 214,col 25)",
            "(line 215,col 9)-(line 215,col 41)",
            "(line 216,col 9)-(line 216,col 25)",
            "(line 217,col 9)-(line 217,col 25)",
            "(line 218,col 9)-(line 218,col 25)",
            "(line 220,col 9)-(line 220,col 57)",
            "(line 221,col 9)-(line 221,col 41)",
            "(line 222,col 9)-(line 222,col 25)",
            "(line 223,col 9)-(line 223,col 41)",
            "(line 224,col 9)-(line 224,col 25)",
            "(line 225,col 9)-(line 225,col 41)",
            "(line 226,col 9)-(line 226,col 25)",
            "(line 227,col 9)-(line 227,col 25)",
            "(line 228,col 9)-(line 228,col 25)",
            "(line 229,col 9)-(line 229,col 25)",
            "(line 231,col 9)-(line 231,col 50)",
            "(line 232,col 9)-(line 233,col 40)",
            "(line 234,col 9)-(line 234,col 31)",
            "(line 235,col 32)-(line 235,col 52)",
            "(line 236,col 9)-(line 236,col 46)",
            "(line 237,col 9)-(line 237,col 42)",
            "(line 238,col 9)-(line 238,col 46)",
            "(line 239,col 9)-(line 239,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.RendererXYPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/RendererXYPackageTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.RendererXYPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.chart.renderer.xy\");\n        suite.addTestSuite(AbstractXYItemRendererTests.class);\n        suite.addTestSuite(CandlestickRendererTests.class);\n        suite.addTestSuite(ClusteredXYBarRendererTests.class);\n        suite.addTestSuite(DeviationRendererTests.class);\n        suite.addTestSuite(HighLowRendererTests.class);\n        suite.addTestSuite(StackedXYAreaRendererTests.class);\n        suite.addTestSuite(StackedXYAreaRenderer2Tests.class);\n        suite.addTestSuite(StackedXYBarRendererTests.class);\n        suite.addTestSuite(StandardXYItemRendererTests.class);\n        suite.addTestSuite(VectorRendererTests.class);\n        suite.addTestSuite(WindItemRendererTests.class);\n        suite.addTestSuite(XYAreaRendererTests.class);\n        suite.addTestSuite(XYAreaRenderer2Tests.class);\n        suite.addTestSuite(XYBarRendererTests.class);\n        suite.addTestSuite(XYBlockRendererTests.class);\n        suite.addTestSuite(XYBoxAndWhiskerRendererTests.class);\n        suite.addTestSuite(XYBubbleRendererTests.class);\n        suite.addTestSuite(XYDifferenceRendererTests.class);\n        suite.addTestSuite(XYDotRendererTests.class);\n        suite.addTestSuite(XYErrorRendererTests.class);\n        suite.addTestSuite(XYLineAndShapeRendererTests.class);\n        suite.addTestSuite(XYLine3DRendererTests.class);\n\t\tsuite.addTestSuite(XYSplineAndShapeRendererTests.class);\n        suite.addTestSuite(XYStepRendererTests.class);\n        suite.addTestSuite(XYStepAreaRendererTests.class);\n        suite.addTestSuite(YIntervalRendererTests.class);\n        return suite;\n    }",
        "begin_line": 73,
        "end_line": 102,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 71)",
            "(line 75,col 9)-(line 75,col 62)",
            "(line 76,col 9)-(line 76,col 59)",
            "(line 77,col 9)-(line 77,col 62)",
            "(line 78,col 9)-(line 78,col 57)",
            "(line 79,col 9)-(line 79,col 55)",
            "(line 80,col 9)-(line 80,col 61)",
            "(line 81,col 9)-(line 81,col 62)",
            "(line 82,col 9)-(line 82,col 60)",
            "(line 83,col 9)-(line 83,col 62)",
            "(line 84,col 9)-(line 84,col 54)",
            "(line 85,col 9)-(line 85,col 56)",
            "(line 86,col 9)-(line 86,col 54)",
            "(line 87,col 9)-(line 87,col 55)",
            "(line 88,col 9)-(line 88,col 53)",
            "(line 89,col 9)-(line 89,col 55)",
            "(line 90,col 9)-(line 90,col 63)",
            "(line 91,col 9)-(line 91,col 56)",
            "(line 92,col 9)-(line 92,col 60)",
            "(line 93,col 9)-(line 93,col 53)",
            "(line 94,col 9)-(line 94,col 55)",
            "(line 95,col 9)-(line 95,col 62)",
            "(line 96,col 9)-(line 96,col 56)",
            "(line 97,col 3)-(line 97,col 58)",
            "(line 98,col 9)-(line 98,col 54)",
            "(line 99,col 9)-(line 99,col 58)",
            "(line 100,col 9)-(line 100,col 57)",
            "(line 101,col 9)-(line 101,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.RendererXYPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/RendererXYPackageTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.RendererXYPackageTests.RendererXYPackageTests(java.lang.String)",
        "snippet": "    public RendererXYPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the suite name.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.RendererXYPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/RendererXYPackageTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.RendererXYPackageTests.createTestXYSeriesCollection()",
        "snippet": "    public static XYSeriesCollection createTestXYSeriesCollection() {\n        XYSeriesCollection result = new XYSeriesCollection();\n        XYSeries series1 = new XYSeries(\"Series 1\", false, false);\n        series1.add(1.0, 2.0);\n        series1.add(2.0, 5.0);\n        XYSeries series2 = new XYSeries(\"Series 2\", false, false);\n        series2.add(1.0, 4.0);\n        series2.add(2.0, 3.0);\n        result.addSeries(series1);\n        result.addSeries(series2);\n        return result;\n    }",
        "begin_line": 118,
        "end_line": 129,
        "comment": "\n     * Creates and returns a sample dataset for testing purposes.\n     * \n     * @return A sample dataset.\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 61)",
            "(line 120,col 9)-(line 120,col 66)",
            "(line 121,col 9)-(line 121,col 30)",
            "(line 122,col 9)-(line 122,col 30)",
            "(line 123,col 9)-(line 123,col 66)",
            "(line 124,col 9)-(line 124,col 30)",
            "(line 125,col 9)-(line 125,col 30)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 128,col 9)-(line 128,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.RendererXYPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/RendererXYPackageTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.RendererXYPackageTests.createTestTableXYDataset()",
        "snippet": "    public static TableXYDataset createTestTableXYDataset() {\n        DefaultTableXYDataset result = new DefaultTableXYDataset();\n        XYSeries series1 = new XYSeries(\"Series 1\", false, false);\n        series1.add(1.0, 2.0);\n        series1.add(2.0, 5.0);\n        XYSeries series2 = new XYSeries(\"Series 2\", false, false);\n        series2.add(1.0, 4.0);\n        series2.add(2.0, 3.0);\n        result.addSeries(series1);\n        result.addSeries(series2);\n        return result;\n    }",
        "begin_line": 136,
        "end_line": 147,
        "comment": "\n     * Creates and returns a sample dataset for testing purposes.\n     * \n     * @return A sample dataset.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 67)",
            "(line 138,col 9)-(line 138,col 66)",
            "(line 139,col 9)-(line 139,col 30)",
            "(line 140,col 9)-(line 140,col 30)",
            "(line 141,col 9)-(line 141,col 66)",
            "(line 142,col 9)-(line 142,col 30)",
            "(line 143,col 9)-(line 143,col 30)",
            "(line 144,col 9)-(line 144,col 34)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 146,col 9)-(line 146,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.RendererXYPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/RendererXYPackageTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.RendererXYPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 154,
        "end_line": 156,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.YIntervalRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/YIntervalRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.YIntervalRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(YIntervalRendererTests.class);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.YIntervalRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/YIntervalRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.YIntervalRendererTests.YIntervalRendererTests(java.lang.String)",
        "snippet": "    public YIntervalRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.YIntervalRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/YIntervalRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.YIntervalRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        YIntervalRenderer r1 = new YIntervalRenderer();\n        YIntervalRenderer r2 = new YIntervalRenderer();\n        assertEquals(r1, r2);\n        \n        // the following fields are inherited from the AbstractXYItemRenderer\n        r1.setSeriesItemLabelGenerator(0, new StandardXYItemLabelGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelGenerator(0, new StandardXYItemLabelGenerator());\n        assertTrue(r1.equals(r2));\n        \n        r1.setBaseItemLabelGenerator(new StandardXYItemLabelGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelGenerator(new StandardXYItemLabelGenerator());\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesToolTipGenerator(0, new StandardXYToolTipGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesToolTipGenerator(0, new StandardXYToolTipGenerator());\n        assertTrue(r1.equals(r2));\n        \n        r1.setBaseToolTipGenerator(new StandardXYToolTipGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setBaseToolTipGenerator(new StandardXYToolTipGenerator());\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesURLGenerator(0, new StandardXYURLGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesURLGenerator(0, new StandardXYURLGenerator());\n        assertTrue(r1.equals(r2));\n        \n        r1.setBaseURLGenerator(new StandardXYURLGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setBaseURLGenerator(new StandardXYURLGenerator());\n        assertTrue(r1.equals(r2));\n        \n        r1.addAnnotation(new XYTextAnnotation(\"X\", 1.0, 2.0), Layer.FOREGROUND);\n        assertFalse(r1.equals(r2));\n        r2.addAnnotation(new XYTextAnnotation(\"X\", 1.0, 2.0), Layer.FOREGROUND);\n        assertTrue(r1.equals(r2));\n        \n        r1.addAnnotation(new XYTextAnnotation(\"X\", 1.0, 2.0), Layer.BACKGROUND);\n        assertFalse(r1.equals(r2));\n        r2.addAnnotation(new XYTextAnnotation(\"X\", 1.0, 2.0), Layer.BACKGROUND);\n        assertTrue(r1.equals(r2));\n        \n        r1.setDefaultEntityRadius(99);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultEntityRadius(99);\n        assertTrue(r1.equals(r2));\n        \n        r1.setLegendItemLabelGenerator(new StandardXYSeriesLabelGenerator(\n                \"{0} {1}\"));\n        assertFalse(r1.equals(r2));\n        r2.setLegendItemLabelGenerator(new StandardXYSeriesLabelGenerator(\n                \"{0} {1}\"));\n        assertTrue(r1.equals(r2));\n        \n        r1.setLegendItemToolTipGenerator(new StandardXYSeriesLabelGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setLegendItemToolTipGenerator(new StandardXYSeriesLabelGenerator());\n        assertTrue(r1.equals(r2));\n        \n        r1.setLegendItemURLGenerator(new StandardXYSeriesLabelGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setLegendItemURLGenerator(new StandardXYSeriesLabelGenerator());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 96,
        "end_line": 163,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 55)",
            "(line 98,col 9)-(line 98,col 55)",
            "(line 99,col 9)-(line 99,col 29)",
            "(line 102,col 9)-(line 102,col 78)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 78)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 107,col 9)-(line 107,col 73)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 73)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 112,col 9)-(line 112,col 74)",
            "(line 113,col 9)-(line 113,col 35)",
            "(line 114,col 9)-(line 114,col 74)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 117,col 9)-(line 117,col 69)",
            "(line 118,col 9)-(line 118,col 35)",
            "(line 119,col 9)-(line 119,col 69)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 122,col 9)-(line 122,col 66)",
            "(line 123,col 9)-(line 123,col 35)",
            "(line 124,col 9)-(line 124,col 66)",
            "(line 125,col 9)-(line 125,col 34)",
            "(line 127,col 9)-(line 127,col 61)",
            "(line 128,col 9)-(line 128,col 35)",
            "(line 129,col 9)-(line 129,col 61)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 132,col 9)-(line 132,col 80)",
            "(line 133,col 9)-(line 133,col 35)",
            "(line 134,col 9)-(line 134,col 80)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 137,col 9)-(line 137,col 80)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 80)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 142,col 9)-(line 142,col 38)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 144,col 38)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 147,col 9)-(line 148,col 28)",
            "(line 149,col 9)-(line 149,col 35)",
            "(line 150,col 9)-(line 151,col 28)",
            "(line 152,col 9)-(line 152,col 34)",
            "(line 154,col 9)-(line 154,col 79)",
            "(line 155,col 9)-(line 155,col 35)",
            "(line 156,col 9)-(line 156,col 79)",
            "(line 157,col 9)-(line 157,col 34)",
            "(line 159,col 9)-(line 159,col 75)",
            "(line 160,col 9)-(line 160,col 35)",
            "(line 161,col 9)-(line 161,col 75)",
            "(line 162,col 9)-(line 162,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.YIntervalRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/YIntervalRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.YIntervalRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        YIntervalRenderer r1 = new YIntervalRenderer();\n        YIntervalRenderer r2 = new YIntervalRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 168,
        "end_line": 175,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 55)",
            "(line 170,col 9)-(line 170,col 55)",
            "(line 171,col 9)-(line 171,col 34)",
            "(line 172,col 9)-(line 172,col 31)",
            "(line 173,col 9)-(line 173,col 31)",
            "(line 174,col 9)-(line 174,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.YIntervalRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/YIntervalRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.YIntervalRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        YIntervalRenderer r1 = new YIntervalRenderer();\n        YIntervalRenderer r2 = null;\n        try {\n            r2 = (YIntervalRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check independence\n        r1.setSeriesItemLabelGenerator(0, new StandardXYItemLabelGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelGenerator(0, new StandardXYItemLabelGenerator());\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesToolTipGenerator(0, new StandardXYToolTipGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesToolTipGenerator(0, new StandardXYToolTipGenerator());\n        assertTrue(r1.equals(r2));\n        \n        r1.addAnnotation(new XYTextAnnotation(\"ABC\", 1.0, 2.0), \n                Layer.FOREGROUND);\n        assertFalse(r1.equals(r2));\n        r2.addAnnotation(new XYTextAnnotation(\"ABC\", 1.0, 2.0), \n                Layer.FOREGROUND);\n        assertTrue(r1.equals(r2));\n        \n        r1.addAnnotation(new XYTextAnnotation(\"ABC\", 1.0, 2.0), \n                Layer.BACKGROUND);\n        assertFalse(r1.equals(r2));\n        r2.addAnnotation(new XYTextAnnotation(\"ABC\", 1.0, 2.0), \n                Layer.BACKGROUND);\n        assertTrue(r1.equals(r2));\n\n    }",
        "begin_line": 180,
        "end_line": 218,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 55)",
            "(line 182,col 9)-(line 182,col 36)",
            "(line 183,col 9)-(line 188,col 9)",
            "(line 189,col 9)-(line 189,col 29)",
            "(line 190,col 9)-(line 190,col 51)",
            "(line 191,col 9)-(line 191,col 34)",
            "(line 194,col 9)-(line 194,col 78)",
            "(line 195,col 9)-(line 195,col 35)",
            "(line 196,col 9)-(line 196,col 78)",
            "(line 197,col 9)-(line 197,col 34)",
            "(line 199,col 9)-(line 199,col 74)",
            "(line 200,col 9)-(line 200,col 35)",
            "(line 201,col 9)-(line 201,col 74)",
            "(line 202,col 9)-(line 202,col 34)",
            "(line 204,col 9)-(line 205,col 34)",
            "(line 206,col 9)-(line 206,col 35)",
            "(line 207,col 9)-(line 208,col 34)",
            "(line 209,col 9)-(line 209,col 34)",
            "(line 211,col 9)-(line 212,col 34)",
            "(line 213,col 9)-(line 213,col 35)",
            "(line 214,col 9)-(line 215,col 34)",
            "(line 216,col 9)-(line 216,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.YIntervalRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/YIntervalRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.YIntervalRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        YIntervalRenderer r1 = new YIntervalRenderer();\n        YIntervalRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (YIntervalRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 223,
        "end_line": 244,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 225,col 9)-(line 225,col 55)",
            "(line 226,col 9)-(line 226,col 36)",
            "(line 228,col 9)-(line 241,col 9)",
            "(line 242,col 9)-(line 242,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.YIntervalRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/YIntervalRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.YIntervalRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        YIntervalSeriesCollection d1 = new YIntervalSeriesCollection();\n        YIntervalSeries s1 = new YIntervalSeries(\"S1\");\n        s1.add(1.0, 1.1, 1.2, 1.3);\n        YIntervalSeries s2 = new YIntervalSeries(\"S2\");\n        s2.add(1.0, 1.1, 1.2, 1.3);\n        d1.addSeries(s1);\n        d1.addSeries(s2);\n        \n        YIntervalSeriesCollection d2 = new YIntervalSeriesCollection();\n        YIntervalSeries s3 = new YIntervalSeries(\"S3\");\n        s3.add(1.0, 1.1, 1.2, 1.3);\n        YIntervalSeries s4 = new YIntervalSeries(\"S4\");\n        s4.add(1.0, 1.1, 1.2, 1.3);\n        YIntervalSeries s5 = new YIntervalSeries(\"S5\");\n        s5.add(1.0, 1.1, 1.2, 1.3);\n        d2.addSeries(s3);\n        d2.addSeries(s4);\n        d2.addSeries(s5);\n\n        YIntervalRenderer r = new YIntervalRenderer();\n        XYPlot plot = new XYPlot(d1, new NumberAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, d2);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"S5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 250,
        "end_line": 279,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 71)",
            "(line 252,col 9)-(line 252,col 55)",
            "(line 253,col 9)-(line 253,col 35)",
            "(line 254,col 9)-(line 254,col 55)",
            "(line 255,col 9)-(line 255,col 35)",
            "(line 256,col 9)-(line 256,col 25)",
            "(line 257,col 9)-(line 257,col 25)",
            "(line 259,col 9)-(line 259,col 71)",
            "(line 260,col 9)-(line 260,col 55)",
            "(line 261,col 9)-(line 261,col 35)",
            "(line 262,col 9)-(line 262,col 55)",
            "(line 263,col 9)-(line 263,col 35)",
            "(line 264,col 9)-(line 264,col 55)",
            "(line 265,col 9)-(line 265,col 35)",
            "(line 266,col 9)-(line 266,col 25)",
            "(line 267,col 9)-(line 267,col 25)",
            "(line 268,col 9)-(line 268,col 25)",
            "(line 270,col 9)-(line 270,col 54)",
            "(line 271,col 9)-(line 272,col 40)",
            "(line 273,col 9)-(line 273,col 31)",
            "(line 274,col 32)-(line 274,col 52)",
            "(line 275,col 9)-(line 275,col 46)",
            "(line 276,col 9)-(line 276,col 42)",
            "(line 277,col 9)-(line 277,col 46)",
            "(line 278,col 9)-(line 278,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYDotRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYDotRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYDotRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYDotRendererTests.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYDotRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYDotRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYDotRendererTests.XYDotRendererTests(java.lang.String)",
        "snippet": "    public XYDotRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYDotRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYDotRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYDotRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYDotRenderer r1 = new XYDotRenderer();\n        XYDotRenderer r2 = new XYDotRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setDotWidth(11);\n        assertFalse(r1.equals(r2));\n        r2.setDotWidth(11);\n        assertTrue(r1.equals(r2));\n        \n        r1.setDotHeight(12);\n        assertFalse(r1.equals(r2));\n        r2.setDotHeight(12);\n        assertTrue(r1.equals(r2));\n        \n        r1.setLegendShape(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 91,
        "end_line": 110,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 47)",
            "(line 93,col 9)-(line 93,col 47)",
            "(line 94,col 9)-(line 94,col 29)",
            "(line 96,col 9)-(line 96,col 27)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 27)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 101,col 28)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 28)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 106,col 9)-(line 106,col 70)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 70)",
            "(line 109,col 9)-(line 109,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYDotRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYDotRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYDotRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYDotRenderer r1 = new XYDotRenderer();\n        XYDotRenderer r2 = new XYDotRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n        \n        r1.setDotHeight(12);\n        r2.setDotHeight(12);\n        assertTrue(r1.equals(r2));\n        h1 = r1.hashCode();\n        h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 115,
        "end_line": 129,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 47)",
            "(line 117,col 9)-(line 117,col 47)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 119,col 9)-(line 119,col 31)",
            "(line 120,col 9)-(line 120,col 31)",
            "(line 121,col 9)-(line 121,col 29)",
            "(line 123,col 9)-(line 123,col 28)",
            "(line 124,col 9)-(line 124,col 28)",
            "(line 125,col 9)-(line 125,col 34)",
            "(line 126,col 9)-(line 126,col 27)",
            "(line 127,col 9)-(line 127,col 27)",
            "(line 128,col 9)-(line 128,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYDotRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYDotRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYDotRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYDotRenderer r1 = new XYDotRenderer();\n        XYDotRenderer r2 = null;\n        try {\n            r2 = (XYDotRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 134,
        "end_line": 146,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 47)",
            "(line 136,col 9)-(line 136,col 32)",
            "(line 137,col 9)-(line 142,col 9)",
            "(line 143,col 9)-(line 143,col 29)",
            "(line 144,col 9)-(line 144,col 51)",
            "(line 145,col 9)-(line 145,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYDotRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYDotRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYDotRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYDotRenderer r1 = new XYDotRenderer();\n        XYDotRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (XYDotRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 151,
        "end_line": 172,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 47)",
            "(line 154,col 9)-(line 154,col 32)",
            "(line 156,col 9)-(line 169,col 9)",
            "(line 170,col 9)-(line 170,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYDotRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYDotRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYDotRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        XYSeriesCollection d1 = new XYSeriesCollection();\n        XYSeries s1 = new XYSeries(\"S1\");\n        s1.add(1.0, 1.1);\n        XYSeries s2 = new XYSeries(\"S2\");\n        s2.add(1.0, 1.1);\n        d1.addSeries(s1);\n        d1.addSeries(s2);\n        \n        XYSeriesCollection d2 = new XYSeriesCollection();\n        XYSeries s3 = new XYSeries(\"S3\");\n        s3.add(1.0, 1.1);\n        XYSeries s4 = new XYSeries(\"S4\");\n        s4.add(1.0, 1.1);\n        XYSeries s5 = new XYSeries(\"S5\");\n        s5.add(1.0, 1.1);\n        d2.addSeries(s3);\n        d2.addSeries(s4);\n        d2.addSeries(s5);\n\n        XYDotRenderer r = new XYDotRenderer();\n        XYPlot plot = new XYPlot(d1, new NumberAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, d2);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"S5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 178,
        "end_line": 207,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 57)",
            "(line 180,col 9)-(line 180,col 41)",
            "(line 181,col 9)-(line 181,col 25)",
            "(line 182,col 9)-(line 182,col 41)",
            "(line 183,col 9)-(line 183,col 25)",
            "(line 184,col 9)-(line 184,col 25)",
            "(line 185,col 9)-(line 185,col 25)",
            "(line 187,col 9)-(line 187,col 57)",
            "(line 188,col 9)-(line 188,col 41)",
            "(line 189,col 9)-(line 189,col 25)",
            "(line 190,col 9)-(line 190,col 41)",
            "(line 191,col 9)-(line 191,col 25)",
            "(line 192,col 9)-(line 192,col 41)",
            "(line 193,col 9)-(line 193,col 25)",
            "(line 194,col 9)-(line 194,col 25)",
            "(line 195,col 9)-(line 195,col 25)",
            "(line 196,col 9)-(line 196,col 25)",
            "(line 198,col 9)-(line 198,col 46)",
            "(line 199,col 9)-(line 200,col 40)",
            "(line 201,col 9)-(line 201,col 31)",
            "(line 202,col 32)-(line 202,col 52)",
            "(line 203,col 9)-(line 203,col 46)",
            "(line 204,col 9)-(line 204,col 42)",
            "(line 205,col 9)-(line 205,col 46)",
            "(line 206,col 9)-(line 206,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYBarRendererTests.class);\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests.XYBarRendererTests(java.lang.String)",
        "snippet": "    public XYBarRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        // default instances\n        XYBarRenderer r1 = new XYBarRenderer();\n        XYBarRenderer r2 = new XYBarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        // setBase()\n        r1.setBase(1.0);\n        assertFalse(r1.equals(r2));\n        r2.setBase(1.0);\n        assertTrue(r1.equals(r2));\n        \n        // setUseYInterval\n        r1.setUseYInterval(!r1.getUseYInterval());\n        assertFalse(r1.equals(r2));\n        r2.setUseYInterval(!r2.getUseYInterval());\n        assertTrue(r1.equals(r2));\n        \n        // setMargin()\n        r1.setMargin(0.10);\n        assertFalse(r1.equals(r2));\n        r2.setMargin(0.10);\n        assertTrue(r1.equals(r2));\n        \n        // setDrawBarOutline()\n        r1.setDrawBarOutline(!r1.isDrawBarOutline());\n        assertFalse(r1.equals(r2));\n        r2.setDrawBarOutline(!r2.isDrawBarOutline());\n        assertTrue(r1.equals(r2));\n        \n        // setGradientPaintTransformer()\n        r1.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_HORIZONTAL));\n        assertFalse(r1.equals(r2));\n        r2.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_HORIZONTAL));\n        assertTrue(r1.equals(r2));\n        \n        // legendBar\n        r1.setLegendBar(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendBar(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n        \n        // positiveItemLabelFallbackPosition\n        r1.setPositiveItemLabelPositionFallback(new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setPositiveItemLabelPositionFallback(new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        // negativeItemLabelFallbackPosition\n        r1.setNegativeItemLabelPositionFallback(new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setNegativeItemLabelPositionFallback(new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 100,
        "end_line": 157,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 47)",
            "(line 104,col 9)-(line 104,col 47)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 109,col 9)-(line 109,col 24)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 111,col 24)",
            "(line 112,col 9)-(line 112,col 34)",
            "(line 115,col 9)-(line 115,col 50)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 117,col 50)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 121,col 9)-(line 121,col 27)",
            "(line 122,col 9)-(line 122,col 35)",
            "(line 123,col 9)-(line 123,col 27)",
            "(line 124,col 9)-(line 124,col 34)",
            "(line 127,col 9)-(line 127,col 53)",
            "(line 128,col 9)-(line 128,col 35)",
            "(line 129,col 9)-(line 129,col 53)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 133,col 9)-(line 134,col 63)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 137,col 63)",
            "(line 138,col 9)-(line 138,col 34)",
            "(line 141,col 9)-(line 141,col 68)",
            "(line 142,col 9)-(line 142,col 35)",
            "(line 143,col 9)-(line 143,col 68)",
            "(line 144,col 9)-(line 144,col 34)",
            "(line 147,col 9)-(line 147,col 73)",
            "(line 148,col 9)-(line 148,col 35)",
            "(line 149,col 9)-(line 149,col 73)",
            "(line 150,col 9)-(line 150,col 34)",
            "(line 153,col 9)-(line 153,col 73)",
            "(line 154,col 9)-(line 154,col 35)",
            "(line 155,col 9)-(line 155,col 73)",
            "(line 156,col 9)-(line 156,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYBarRenderer r1 = new XYBarRenderer();\n        XYBarRenderer r2 = new XYBarRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 162,
        "end_line": 169,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 47)",
            "(line 164,col 9)-(line 164,col 47)",
            "(line 165,col 9)-(line 165,col 34)",
            "(line 166,col 9)-(line 166,col 31)",
            "(line 167,col 9)-(line 167,col 31)",
            "(line 168,col 9)-(line 168,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYBarRenderer r1 = new XYBarRenderer();\n        Rectangle2D rect = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        r1.setLegendBar(rect);\n        XYBarRenderer r2 = null;\n        try {\n            r2 = (XYBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check independence\n        rect.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setLegendBar(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 174,
        "end_line": 194,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 47)",
            "(line 176,col 9)-(line 176,col 70)",
            "(line 177,col 9)-(line 177,col 30)",
            "(line 178,col 9)-(line 178,col 32)",
            "(line 179,col 9)-(line 184,col 9)",
            "(line 185,col 9)-(line 185,col 29)",
            "(line 186,col 9)-(line 186,col 51)",
            "(line 187,col 9)-(line 187,col 34)",
            "(line 190,col 9)-(line 190,col 41)",
            "(line 191,col 9)-(line 191,col 35)",
            "(line 192,col 9)-(line 192,col 68)",
            "(line 193,col 9)-(line 193,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYBarRenderer r1 = new XYBarRenderer();\n        XYBarRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (XYBarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 199,
        "end_line": 221,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 47)",
            "(line 202,col 9)-(line 202,col 32)",
            "(line 204,col 9)-(line 218,col 9)",
            "(line 219,col 9)-(line 219,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n\n        XYBarRenderer r1 = new XYBarRenderer();\n        r1.setPositiveItemLabelPositionFallback(new ItemLabelPosition());\n        XYBarRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (XYBarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 226,
        "end_line": 248,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 47)",
            "(line 229,col 9)-(line 229,col 73)",
            "(line 230,col 9)-(line 230,col 32)",
            "(line 232,col 9)-(line 245,col 9)",
            "(line 246,col 9)-(line 246,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests.testFindDomainBounds()",
        "snippet": "    public void testFindDomainBounds() {\n        XYSeriesCollection dataset \n                = RendererXYPackageTests.createTestXYSeriesCollection();\n        JFreeChart chart = ChartFactory.createXYBarChart(\"Test Chart\", \"X\", \n                false, \"Y\", dataset, PlotOrientation.VERTICAL, false, false, \n                false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();\n        domainAxis.setAutoRangeIncludesZero(false);\n        Range bounds = domainAxis.getRange();\n        assertFalse(bounds.contains(0.3));\n        assertTrue(bounds.contains(0.5));\n        assertTrue(bounds.contains(2.5));\n        assertFalse(bounds.contains(2.8));\n    }",
        "begin_line": 253,
        "end_line": 267,
        "comment": "\n     * Check that the renderer is calculating the domain bounds correctly.\n     ",
        "child_ranges": [
            "(line 254,col 9)-(line 255,col 72)",
            "(line 256,col 9)-(line 258,col 23)",
            "(line 259,col 9)-(line 259,col 47)",
            "(line 260,col 9)-(line 260,col 66)",
            "(line 261,col 9)-(line 261,col 51)",
            "(line 262,col 9)-(line 262,col 45)",
            "(line 263,col 9)-(line 263,col 42)",
            "(line 264,col 9)-(line 264,col 41)",
            "(line 265,col 9)-(line 265,col 41)",
            "(line 266,col 9)-(line 266,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBarRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        XYSeriesCollection d1 = new XYSeriesCollection();\n        XYSeries s1 = new XYSeries(\"S1\");\n        s1.add(1.0, 1.1);\n        XYSeries s2 = new XYSeries(\"S2\");\n        s2.add(1.0, 1.1);\n        d1.addSeries(s1);\n        d1.addSeries(s2);\n        \n        XYSeriesCollection d2 = new XYSeriesCollection();\n        XYSeries s3 = new XYSeries(\"S3\");\n        s3.add(1.0, 1.1);\n        XYSeries s4 = new XYSeries(\"S4\");\n        s4.add(1.0, 1.1);\n        XYSeries s5 = new XYSeries(\"S5\");\n        s5.add(1.0, 1.1);\n        d2.addSeries(s3);\n        d2.addSeries(s4);\n        d2.addSeries(s5);\n\n        XYBarRenderer r = new XYBarRenderer();\n        XYPlot plot = new XYPlot(new XYBarDataset(d1, 1.0), new NumberAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, new XYBarDataset(d2, 2.0));\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"S5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 273,
        "end_line": 302,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 57)",
            "(line 275,col 9)-(line 275,col 41)",
            "(line 276,col 9)-(line 276,col 25)",
            "(line 277,col 9)-(line 277,col 41)",
            "(line 278,col 9)-(line 278,col 25)",
            "(line 279,col 9)-(line 279,col 25)",
            "(line 280,col 9)-(line 280,col 25)",
            "(line 282,col 9)-(line 282,col 57)",
            "(line 283,col 9)-(line 283,col 41)",
            "(line 284,col 9)-(line 284,col 25)",
            "(line 285,col 9)-(line 285,col 41)",
            "(line 286,col 9)-(line 286,col 25)",
            "(line 287,col 9)-(line 287,col 41)",
            "(line 288,col 9)-(line 288,col 25)",
            "(line 289,col 9)-(line 289,col 25)",
            "(line 290,col 9)-(line 290,col 25)",
            "(line 291,col 9)-(line 291,col 25)",
            "(line 293,col 9)-(line 293,col 46)",
            "(line 294,col 9)-(line 295,col 40)",
            "(line 296,col 9)-(line 296,col 54)",
            "(line 297,col 32)-(line 297,col 52)",
            "(line 298,col 9)-(line 298,col 46)",
            "(line 299,col 9)-(line 299,col 42)",
            "(line 300,col 9)-(line 300,col 46)",
            "(line 301,col 9)-(line 301,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StackedXYAreaRenderer2Tests.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests.StackedXYAreaRenderer2Tests(java.lang.String)",
        "snippet": "    public StackedXYAreaRenderer2Tests(String name) {\n        super(name);\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests.testDrawWithEmptyDataset()",
        "snippet": "    public void testDrawWithEmptyDataset() {\n        boolean success = false;\n        JFreeChart chart = ChartFactory.createStackedXYAreaChart(\"title\", \"x\",\n                \"y\", new DefaultTableXYDataset(), PlotOrientation.VERTICAL,\n                true, false, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        plot.setRenderer(new StackedXYAreaRenderer2());\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
        "begin_line": 96,
        "end_line": 115,
        "comment": "\n     * Test chart drawing with an empty dataset to ensure that this special\n     * case doesn't cause any exceptions.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 32)",
            "(line 98,col 9)-(line 100,col 36)",
            "(line 101,col 9)-(line 101,col 47)",
            "(line 102,col 9)-(line 102,col 55)",
            "(line 103,col 9)-(line 113,col 9)",
            "(line 114,col 9)-(line 114,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests.testEquals()",
        "snippet": "    public void testEquals() {\n        StackedXYAreaRenderer2 r1 = new StackedXYAreaRenderer2();\n        StackedXYAreaRenderer2 r2 = new StackedXYAreaRenderer2();\n        assertEquals(r1, r2);\n        assertEquals(r2, r1);\n        \n        r1.setRoundXCoordinates(!r1.getRoundXCoordinates());\n        assertFalse(r1.equals(r2));\n        r2.setRoundXCoordinates(r1.getRoundXCoordinates());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 120,
        "end_line": 130,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 65)",
            "(line 122,col 9)-(line 122,col 65)",
            "(line 123,col 9)-(line 123,col 29)",
            "(line 124,col 9)-(line 124,col 29)",
            "(line 126,col 9)-(line 126,col 60)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 128,col 59)",
            "(line 129,col 9)-(line 129,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        StackedXYAreaRenderer2 r1 = new StackedXYAreaRenderer2();\n        StackedXYAreaRenderer2 r2 = new StackedXYAreaRenderer2();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 135,
        "end_line": 142,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 65)",
            "(line 137,col 9)-(line 137,col 65)",
            "(line 138,col 9)-(line 138,col 34)",
            "(line 139,col 9)-(line 139,col 31)",
            "(line 140,col 9)-(line 140,col 31)",
            "(line 141,col 9)-(line 141,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests.testCloning()",
        "snippet": "    public void testCloning() {\n        StackedXYAreaRenderer2 r1 = new StackedXYAreaRenderer2();\n        StackedXYAreaRenderer2 r2 = null;\n        try {\n            r2 = (StackedXYAreaRenderer2) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 147,
        "end_line": 159,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 65)",
            "(line 149,col 9)-(line 149,col 41)",
            "(line 150,col 9)-(line 155,col 9)",
            "(line 156,col 9)-(line 156,col 29)",
            "(line 157,col 9)-(line 157,col 51)",
            "(line 158,col 9)-(line 158,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        StackedXYAreaRenderer2 r1 = new StackedXYAreaRenderer2();\n        StackedXYAreaRenderer2 r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (StackedXYAreaRenderer2) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 164,
        "end_line": 182,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 65)",
            "(line 166,col 9)-(line 166,col 41)",
            "(line 167,col 9)-(line 180,col 9)",
            "(line 181,col 9)-(line 181,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRenderer2Tests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests.testFindRangeBounds()",
        "snippet": "    public void testFindRangeBounds() {\n        TableXYDataset dataset \n                = RendererXYPackageTests.createTestTableXYDataset();\n        JFreeChart chart = ChartFactory.createStackedXYAreaChart(\n                \"Test Chart\", \"X\", \"Y\", dataset, PlotOrientation.VERTICAL, \n                false, false, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        StackedXYAreaRenderer2 renderer = new StackedXYAreaRenderer2();\n        plot.setRenderer(renderer);\n        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        Range bounds = rangeAxis.getRange();\n        assertTrue(bounds.contains(6.0));\n        assertTrue(bounds.contains(8.0));\n        \n        // try null argument\n        assertNull(renderer.findRangeBounds(null));\n        \n        // try empty dataset\n        assertNull(renderer.findRangeBounds(new DefaultTableXYDataset()));\n    }",
        "begin_line": 187,
        "end_line": 206,
        "comment": "\n     * Check that the renderer is calculating the range bounds correctly.\n     ",
        "child_ranges": [
            "(line 188,col 9)-(line 189,col 68)",
            "(line 190,col 9)-(line 192,col 37)",
            "(line 193,col 9)-(line 193,col 47)",
            "(line 194,col 9)-(line 194,col 71)",
            "(line 195,col 9)-(line 195,col 35)",
            "(line 196,col 9)-(line 196,col 64)",
            "(line 197,col 9)-(line 197,col 44)",
            "(line 198,col 9)-(line 198,col 41)",
            "(line 199,col 9)-(line 199,col 41)",
            "(line 202,col 9)-(line 202,col 51)",
            "(line 205,col 9)-(line 205,col 74)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBubbleRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYBubbleRendererTests.class);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBubbleRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests.XYBubbleRendererTests(java.lang.String)",
        "snippet": "    public XYBubbleRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBubbleRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYBubbleRenderer r1 = new XYBubbleRenderer();\n        XYBubbleRenderer r2 = new XYBubbleRenderer();\n        assertEquals(r1, r2);\n        \n        r1 = new XYBubbleRenderer(XYBubbleRenderer.SCALE_ON_RANGE_AXIS);\n        assertFalse(r1.equals(r2));\n        r2 = new XYBubbleRenderer(XYBubbleRenderer.SCALE_ON_RANGE_AXIS);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 89,
        "end_line": 98,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 53)",
            "(line 91,col 9)-(line 91,col 53)",
            "(line 92,col 9)-(line 92,col 29)",
            "(line 94,col 9)-(line 94,col 72)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 72)",
            "(line 97,col 9)-(line 97,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBubbleRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYBubbleRenderer r1 = new XYBubbleRenderer();\n        XYBubbleRenderer r2 = new XYBubbleRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 103,
        "end_line": 110,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 53)",
            "(line 105,col 9)-(line 105,col 53)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 107,col 9)-(line 107,col 31)",
            "(line 108,col 9)-(line 108,col 31)",
            "(line 109,col 9)-(line 109,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBubbleRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYBubbleRenderer r1 = new XYBubbleRenderer();\n        XYBubbleRenderer r2 = null;\n        try {\n            r2 = (XYBubbleRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 115,
        "end_line": 127,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 53)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 123,col 9)",
            "(line 124,col 9)-(line 124,col 29)",
            "(line 125,col 9)-(line 125,col 51)",
            "(line 126,col 9)-(line 126,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBubbleRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        XYBubbleRenderer r1 = new XYBubbleRenderer();\n        XYBubbleRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (XYBubbleRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 132,
        "end_line": 151,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 53)",
            "(line 134,col 9)-(line 134,col 35)",
            "(line 136,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 150,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYBubbleRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        DefaultXYZDataset d1 = new DefaultXYZDataset(); \n        double[] x = {2.1, 2.3, 2.3, 2.2, 2.2, 1.8, 1.8, 1.9, 2.3, 3.8};\n        double[] y = {14.1, 11.1, 10.0, 8.8, 8.7, 8.4, 5.4, 4.1, 4.1, 25};\n        double[] z = {2.4, 2.7, 2.7, 2.2, 2.2, 2.2, 2.1, 2.2, 1.6, 4};\n        double[][] s1 = new double[][] { x, y, z };\n        d1.addSeries(\"S1\", s1);\n        x = new double[] {2.1};\n        y = new double[] {14.1};\n        z = new double[] {2.4};\n        double[][] s2 = new double[][] { x, y, z };\n        d1.addSeries(\"S2\", s2);\n        \n        DefaultXYZDataset d2 = new DefaultXYZDataset(); \n        x = new double[] {2.1};\n        y = new double[] {14.1};\n        z = new double[] {2.4};\n        double[][] s3 = new double[][] { x, y, z };\n        d2.addSeries(\"S3\", s3);\n        x = new double[] {2.1};\n        y = new double[] {14.1};\n        z = new double[] {2.4};\n        double[][] s4 = new double[][] { x, y, z };\n        d2.addSeries(\"S4\", s4);\n        x = new double[] {2.1};\n        y = new double[] {14.1};\n        z = new double[] {2.4};\n        double[][] s5 = new double[][] { x, y, z };\n        d2.addSeries(\"S5\", s5);\n\n        XYBubbleRenderer r = new XYBubbleRenderer();\n        XYPlot plot = new XYPlot(d1, new NumberAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, d2);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"S5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 157,
        "end_line": 196,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 55)",
            "(line 159,col 9)-(line 159,col 72)",
            "(line 160,col 9)-(line 160,col 74)",
            "(line 161,col 9)-(line 161,col 70)",
            "(line 162,col 9)-(line 162,col 51)",
            "(line 163,col 9)-(line 163,col 31)",
            "(line 164,col 9)-(line 164,col 31)",
            "(line 165,col 9)-(line 165,col 32)",
            "(line 166,col 9)-(line 166,col 31)",
            "(line 167,col 9)-(line 167,col 51)",
            "(line 168,col 9)-(line 168,col 31)",
            "(line 170,col 9)-(line 170,col 55)",
            "(line 171,col 9)-(line 171,col 31)",
            "(line 172,col 9)-(line 172,col 32)",
            "(line 173,col 9)-(line 173,col 31)",
            "(line 174,col 9)-(line 174,col 51)",
            "(line 175,col 9)-(line 175,col 31)",
            "(line 176,col 9)-(line 176,col 31)",
            "(line 177,col 9)-(line 177,col 32)",
            "(line 178,col 9)-(line 178,col 31)",
            "(line 179,col 9)-(line 179,col 51)",
            "(line 180,col 9)-(line 180,col 31)",
            "(line 181,col 9)-(line 181,col 31)",
            "(line 182,col 9)-(line 182,col 32)",
            "(line 183,col 9)-(line 183,col 31)",
            "(line 184,col 9)-(line 184,col 51)",
            "(line 185,col 9)-(line 185,col 31)",
            "(line 187,col 9)-(line 187,col 52)",
            "(line 188,col 9)-(line 189,col 40)",
            "(line 190,col 9)-(line 190,col 31)",
            "(line 191,col 32)-(line 191,col 52)",
            "(line 192,col 9)-(line 192,col 46)",
            "(line 193,col 9)-(line 193,col 42)",
            "(line 194,col 9)-(line 194,col 46)",
            "(line 195,col 9)-(line 195,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYSplineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYSplineAndShapeRendererTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 66)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYSplineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests.XYSplineAndShapeRendererTests(java.lang.String)",
        "snippet": "    public XYSplineAndShapeRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYSplineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        XYSplineAndShapeRenderer r1 = new XYSplineAndShapeRenderer();\n        XYSplineAndShapeRenderer r2 = new XYSplineAndShapeRenderer();\n        assertEquals(r1, r2);\n        assertEquals(r2, r1);\n    \n        r1.setPrecision(9);\n        assertFalse(r1.equals(r2));\n        r2.setPrecision(9);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 83,
        "end_line": 94,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 69)",
            "(line 86,col 9)-(line 86,col 69)",
            "(line 87,col 9)-(line 87,col 29)",
            "(line 88,col 9)-(line 88,col 29)",
            "(line 90,col 9)-(line 90,col 27)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 92,col 9)-(line 92,col 27)",
            "(line 93,col 9)-(line 93,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYSplineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYSplineAndShapeRenderer r1 = new XYSplineAndShapeRenderer();\n        XYSplineAndShapeRenderer r2 = new XYSplineAndShapeRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 99,
        "end_line": 106,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 69)",
            "(line 101,col 9)-(line 101,col 69)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 103,col 9)-(line 103,col 31)",
            "(line 104,col 9)-(line 104,col 31)",
            "(line 105,col 9)-(line 105,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYSplineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        Rectangle2D legendShape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        XYSplineAndShapeRenderer r1 = new XYSplineAndShapeRenderer();\n        r1.setLegendLine(legendShape);\n        XYSplineAndShapeRenderer r2 = null;\n        try {\n            r2 = (XYSplineAndShapeRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 111,
        "end_line": 125,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 77)",
            "(line 113,col 9)-(line 113,col 69)",
            "(line 114,col 9)-(line 114,col 38)",
            "(line 115,col 9)-(line 115,col 43)",
            "(line 116,col 9)-(line 121,col 9)",
            "(line 122,col 9)-(line 122,col 29)",
            "(line 123,col 9)-(line 123,col 51)",
            "(line 124,col 9)-(line 124,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYSplineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYSplineAndShapeRenderer r1 = new XYSplineAndShapeRenderer();\n        XYSplineAndShapeRenderer r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (XYSplineAndShapeRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 130,
        "end_line": 150,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 69)",
            "(line 133,col 9)-(line 133,col 43)",
            "(line 134,col 9)-(line 147,col 9)",
            "(line 148,col 9)-(line 148,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/AbstractXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(AbstractXYItemRendererTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/AbstractXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.AbstractXYItemRendererTests(java.lang.String)",
        "snippet": "    public AbstractXYItemRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/AbstractXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.createDataset1()",
        "snippet": "    private XYDataset createDataset1() {\n        XYSeries series = new XYSeries(\"Series\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        return dataset;\n    }",
        "begin_line": 87,
        "end_line": 95,
        "comment": "\n     * Creates a test dataset.\n     * \n     * @return A test dataset.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 49)",
            "(line 89,col 9)-(line 89,col 29)",
            "(line 90,col 9)-(line 90,col 29)",
            "(line 91,col 9)-(line 91,col 29)",
            "(line 92,col 9)-(line 92,col 62)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 94,col 9)-(line 94,col 23)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/AbstractXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.testFindDomainBounds()",
        "snippet": "    public void testFindDomainBounds() {\n        AbstractXYItemRenderer renderer = new StandardXYItemRenderer();\n        \n        // check the bounds of a simple dataset\n        XYDataset dataset = createDataset1();\n        Range r = renderer.findDomainBounds(dataset);\n        assertEquals(1.0, r.getLowerBound(), EPSILON);\n        assertEquals(3.0, r.getUpperBound(), EPSILON);\n        \n        // check that a null dataset returns null bounds\n        assertTrue(renderer.findDomainBounds(null) == null);\n    }",
        "begin_line": 102,
        "end_line": 113,
        "comment": "\n     * Some checks for the findDomainBounds() method.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 71)",
            "(line 106,col 9)-(line 106,col 45)",
            "(line 107,col 9)-(line 107,col 53)",
            "(line 108,col 9)-(line 108,col 54)",
            "(line 109,col 9)-(line 109,col 54)",
            "(line 112,col 9)-(line 112,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/AbstractXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.testFindRangeBounds()",
        "snippet": "    public void testFindRangeBounds() {\n        AbstractXYItemRenderer renderer = new StandardXYItemRenderer();\n        // check that a null dataset returns null bounds\n        assertTrue(renderer.findRangeBounds(null) == null);\n    }",
        "begin_line": 118,
        "end_line": 122,
        "comment": "\n     * Some checks for the findRangeBounds() method.\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 71)",
            "(line 121,col 9)-(line 121,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/AbstractXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.testCloning_LegendItemLabelGenerator()",
        "snippet": "    public void testCloning_LegendItemLabelGenerator() {\n        StandardXYSeriesLabelGenerator generator \n                = new StandardXYSeriesLabelGenerator(\"Series {0}\");\n        XYBarRenderer r1 = new XYBarRenderer();\n        r1.setLegendItemLabelGenerator(generator);\n        XYBarRenderer r2 = null;\n        try {\n            r2 = (XYBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check that the generator has been cloned\n        assertTrue(r1.getLegendItemLabelGenerator() \n                != r2.getLegendItemLabelGenerator());\n    }",
        "begin_line": 127,
        "end_line": 146,
        "comment": "\n     * Check that the legendItemLabelGenerator is cloned.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 129,col 67)",
            "(line 130,col 9)-(line 130,col 47)",
            "(line 131,col 9)-(line 131,col 50)",
            "(line 132,col 9)-(line 132,col 32)",
            "(line 133,col 9)-(line 138,col 9)",
            "(line 139,col 9)-(line 139,col 29)",
            "(line 140,col 9)-(line 140,col 51)",
            "(line 141,col 9)-(line 141,col 34)",
            "(line 144,col 9)-(line 145,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/AbstractXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.testCloning_LegendItemToolTipGenerator()",
        "snippet": "    public void testCloning_LegendItemToolTipGenerator() {\n        StandardXYSeriesLabelGenerator generator \n                = new StandardXYSeriesLabelGenerator(\"Series {0}\");\n        XYBarRenderer r1 = new XYBarRenderer();\n        r1.setLegendItemToolTipGenerator(generator);\n        XYBarRenderer r2 = null;\n        try {\n            r2 = (XYBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check that the generator has been cloned\n        assertTrue(r1.getLegendItemToolTipGenerator() \n                != r2.getLegendItemToolTipGenerator());\n    }",
        "begin_line": 151,
        "end_line": 170,
        "comment": "\n     * Check that the legendItemToolTipGenerator is cloned.\n     ",
        "child_ranges": [
            "(line 152,col 9)-(line 153,col 67)",
            "(line 154,col 9)-(line 154,col 47)",
            "(line 155,col 9)-(line 155,col 52)",
            "(line 156,col 9)-(line 156,col 32)",
            "(line 157,col 9)-(line 162,col 9)",
            "(line 163,col 9)-(line 163,col 29)",
            "(line 164,col 9)-(line 164,col 51)",
            "(line 165,col 9)-(line 165,col 34)",
            "(line 168,col 9)-(line 169,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/AbstractXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.testCloning_LegendItemURLGenerator()",
        "snippet": "    public void testCloning_LegendItemURLGenerator() {\n        StandardXYSeriesLabelGenerator generator \n                = new StandardXYSeriesLabelGenerator(\"Series {0}\");\n        XYBarRenderer r1 = new XYBarRenderer();\n        r1.setLegendItemURLGenerator(generator);\n        XYBarRenderer r2 = null;\n        try {\n            r2 = (XYBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check that the generator has been cloned\n        assertTrue(r1.getLegendItemURLGenerator() \n                != r2.getLegendItemURLGenerator());\n    }",
        "begin_line": 175,
        "end_line": 194,
        "comment": "\n     * Check that the legendItemURLGenerator is cloned.\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 177,col 67)",
            "(line 178,col 9)-(line 178,col 47)",
            "(line 179,col 9)-(line 179,col 48)",
            "(line 180,col 9)-(line 180,col 32)",
            "(line 181,col 9)-(line 186,col 9)",
            "(line 187,col 9)-(line 187,col 29)",
            "(line 188,col 9)-(line 188,col 51)",
            "(line 189,col 9)-(line 189,col 34)",
            "(line 192,col 9)-(line 193,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/AbstractXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYBarRenderer r1 = new XYBarRenderer();\n        XYBarRenderer r2 = new XYBarRenderer();\n        assertTrue(r1.equals(r2));\n        \n        // background annotation\n        r1.addAnnotation(new XYTextAnnotation(\"ABC\", 1.0, 2.0), \n                Layer.BACKGROUND);\n        assertFalse(r1.equals(r2));\n        r2.addAnnotation(new XYTextAnnotation(\"ABC\", 1.0, 2.0), \n                Layer.BACKGROUND);\n        assertTrue(r1.equals(r2));\n        \n        // foreground annotation\n        r1.addAnnotation(new XYTextAnnotation(\"DEF\", 3.0, 4.0),\n                Layer.FOREGROUND);\n        assertFalse(r1.equals(r2));\n        r2.addAnnotation(new XYTextAnnotation(\"DEF\", 3.0, 4.0), \n                Layer.FOREGROUND);\n        assertTrue(r1.equals(r2));\n        \n        // default entity radius\n        r1.setDefaultEntityRadius(99);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultEntityRadius(99);\n        assertTrue(r1.equals(r2));\n        \n        // legend item label generator\n        r1.setLegendItemLabelGenerator(new StandardXYSeriesLabelGenerator(\n                \"X:{0}\"));\n        assertFalse(r1.equals(r2));\n        r2.setLegendItemLabelGenerator(new StandardXYSeriesLabelGenerator(\n                \"X:{0}\"));\n        assertTrue(r1.equals(r2));\n\n        // legend item tool tip generator\n        r1.setLegendItemToolTipGenerator(new StandardXYSeriesLabelGenerator(\n                \"X:{0}\"));\n        assertFalse(r1.equals(r2));\n        r2.setLegendItemToolTipGenerator(new StandardXYSeriesLabelGenerator(\n                \"X:{0}\"));\n        assertTrue(r1.equals(r2));\n    \n        // legend item URL generator\n        r1.setLegendItemURLGenerator(new StandardXYSeriesLabelGenerator(\n                \"X:{0}\"));\n        assertFalse(r1.equals(r2));\n        r2.setLegendItemURLGenerator(new StandardXYSeriesLabelGenerator(\n                \"X:{0}\"));\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 199,
        "end_line": 249,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 47)",
            "(line 201,col 9)-(line 201,col 47)",
            "(line 202,col 9)-(line 202,col 34)",
            "(line 205,col 9)-(line 206,col 34)",
            "(line 207,col 9)-(line 207,col 35)",
            "(line 208,col 9)-(line 209,col 34)",
            "(line 210,col 9)-(line 210,col 34)",
            "(line 213,col 9)-(line 214,col 34)",
            "(line 215,col 9)-(line 215,col 35)",
            "(line 216,col 9)-(line 217,col 34)",
            "(line 218,col 9)-(line 218,col 34)",
            "(line 221,col 9)-(line 221,col 38)",
            "(line 222,col 9)-(line 222,col 35)",
            "(line 223,col 9)-(line 223,col 38)",
            "(line 224,col 9)-(line 224,col 34)",
            "(line 227,col 9)-(line 228,col 26)",
            "(line 229,col 9)-(line 229,col 35)",
            "(line 230,col 9)-(line 231,col 26)",
            "(line 232,col 9)-(line 232,col 34)",
            "(line 235,col 9)-(line 236,col 26)",
            "(line 237,col 9)-(line 237,col 35)",
            "(line 238,col 9)-(line 239,col 26)",
            "(line 240,col 9)-(line 240,col 34)",
            "(line 243,col 9)-(line 244,col 26)",
            "(line 245,col 9)-(line 245,col 35)",
            "(line 246,col 9)-(line 247,col 26)",
            "(line 248,col 9)-(line 248,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StandardXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StandardXYItemRendererTests.class);\n    }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StandardXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests.StandardXYItemRendererTests(java.lang.String)",
        "snippet": "    public StandardXYItemRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StandardXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StandardXYItemRenderer r1 = new StandardXYItemRenderer();\n        StandardXYItemRenderer r2 = new StandardXYItemRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setBaseShapesVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShapesVisible(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setPlotLines(false);\n        assertFalse(r1.equals(r2));\n        r2.setPlotLines(false);\n        assertTrue(r1.equals(r2));\n\n        r1.setPlotImages(true);\n        assertFalse(r1.equals(r2));\n        r2.setPlotImages(true);\n        assertTrue(r1.equals(r2));\n\n        r1.setPlotDiscontinuous(true);\n        assertFalse(r1.equals(r2));\n        r2.setPlotDiscontinuous(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setGapThresholdType(UnitType.ABSOLUTE);\n        assertFalse(r1.equals(r2));\n        r2.setGapThresholdType(UnitType.ABSOLUTE);\n        assertTrue(r1.equals(r2));\n        \n        r1.setGapThreshold(1.23);\n        assertFalse(r1.equals(r2));\n        r2.setGapThreshold(1.23);\n        assertTrue(r1.equals(r2));\n        \n        r1.setLegendLine(new Line2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendLine(new Line2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesShapesFilled(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShapesFilled(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n        \n        r1.setBaseShapesFilled(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShapesFilled(false);\n        assertTrue(r1.equals(r2));\n        \n        r1.setDrawSeriesLineAsPath(true);\n        assertFalse(r1.equals(r2));\n        r2.setDrawSeriesLineAsPath(true);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 105,
        "end_line": 159,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 65)",
            "(line 107,col 9)-(line 107,col 65)",
            "(line 108,col 9)-(line 108,col 29)",
            "(line 110,col 9)-(line 110,col 38)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 38)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 115,col 9)-(line 115,col 31)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 117,col 31)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 120,col 9)-(line 120,col 31)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 31)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 125,col 9)-(line 125,col 38)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 127,col 38)",
            "(line 128,col 9)-(line 128,col 34)",
            "(line 130,col 9)-(line 130,col 50)",
            "(line 131,col 9)-(line 131,col 35)",
            "(line 132,col 9)-(line 132,col 50)",
            "(line 133,col 9)-(line 133,col 34)",
            "(line 135,col 9)-(line 135,col 33)",
            "(line 136,col 9)-(line 136,col 35)",
            "(line 137,col 9)-(line 137,col 33)",
            "(line 138,col 9)-(line 138,col 34)",
            "(line 140,col 9)-(line 140,col 64)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 64)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 145,col 9)-(line 145,col 50)",
            "(line 146,col 9)-(line 146,col 35)",
            "(line 147,col 9)-(line 147,col 50)",
            "(line 148,col 9)-(line 148,col 34)",
            "(line 150,col 9)-(line 150,col 38)",
            "(line 151,col 9)-(line 151,col 35)",
            "(line 152,col 9)-(line 152,col 38)",
            "(line 153,col 9)-(line 153,col 34)",
            "(line 155,col 9)-(line 155,col 41)",
            "(line 156,col 9)-(line 156,col 35)",
            "(line 157,col 9)-(line 157,col 41)",
            "(line 158,col 9)-(line 158,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StandardXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        StandardXYItemRenderer r1 = new StandardXYItemRenderer();\n        StandardXYItemRenderer r2 = new StandardXYItemRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 164,
        "end_line": 171,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 65)",
            "(line 166,col 9)-(line 166,col 65)",
            "(line 167,col 9)-(line 167,col 34)",
            "(line 168,col 9)-(line 168,col 31)",
            "(line 169,col 9)-(line 169,col 31)",
            "(line 170,col 9)-(line 170,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StandardXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StandardXYItemRenderer r1 = new StandardXYItemRenderer();\n        Rectangle2D rect1 = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        r1.setLegendLine(rect1);\n        StandardXYItemRenderer r2 = null;\n        try {\n            r2 = (StandardXYItemRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check independence\n        rect1.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setLegendLine(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesShapesFilled(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShapesFilled(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n        \n    }",
        "begin_line": 176,
        "end_line": 202,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 65)",
            "(line 178,col 9)-(line 178,col 71)",
            "(line 179,col 9)-(line 179,col 32)",
            "(line 180,col 9)-(line 180,col 41)",
            "(line 181,col 9)-(line 186,col 9)",
            "(line 187,col 9)-(line 187,col 29)",
            "(line 188,col 9)-(line 188,col 51)",
            "(line 189,col 9)-(line 189,col 34)",
            "(line 192,col 9)-(line 192,col 42)",
            "(line 193,col 9)-(line 193,col 35)",
            "(line 194,col 9)-(line 194,col 69)",
            "(line 195,col 9)-(line 195,col 34)",
            "(line 197,col 9)-(line 197,col 50)",
            "(line 198,col 9)-(line 198,col 35)",
            "(line 199,col 9)-(line 199,col 50)",
            "(line 200,col 9)-(line 200,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StandardXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        StandardXYItemRenderer r1 = new StandardXYItemRenderer();\n        StandardXYItemRenderer r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (StandardXYItemRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 207,
        "end_line": 225,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 65)",
            "(line 209,col 9)-(line 209,col 41)",
            "(line 210,col 9)-(line 223,col 9)",
            "(line 224,col 9)-(line 224,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StandardXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        XYSeriesCollection d1 = new XYSeriesCollection();\n        XYSeries s1 = new XYSeries(\"S1\");\n        s1.add(1.0, 1.1);\n        XYSeries s2 = new XYSeries(\"S2\");\n        s2.add(1.0, 1.1);\n        d1.addSeries(s1);\n        d1.addSeries(s2);\n        \n        XYSeriesCollection d2 = new XYSeriesCollection();\n        XYSeries s3 = new XYSeries(\"S3\");\n        s3.add(1.0, 1.1);\n        XYSeries s4 = new XYSeries(\"S4\");\n        s4.add(1.0, 1.1);\n        XYSeries s5 = new XYSeries(\"S5\");\n        s5.add(1.0, 1.1);\n        d2.addSeries(s3);\n        d2.addSeries(s4);\n        d2.addSeries(s5);\n\n        StandardXYItemRenderer r = new StandardXYItemRenderer();\n        XYPlot plot = new XYPlot(d1, new NumberAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, d2);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"S5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 231,
        "end_line": 260,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 57)",
            "(line 233,col 9)-(line 233,col 41)",
            "(line 234,col 9)-(line 234,col 25)",
            "(line 235,col 9)-(line 235,col 41)",
            "(line 236,col 9)-(line 236,col 25)",
            "(line 237,col 9)-(line 237,col 25)",
            "(line 238,col 9)-(line 238,col 25)",
            "(line 240,col 9)-(line 240,col 57)",
            "(line 241,col 9)-(line 241,col 41)",
            "(line 242,col 9)-(line 242,col 25)",
            "(line 243,col 9)-(line 243,col 41)",
            "(line 244,col 9)-(line 244,col 25)",
            "(line 245,col 9)-(line 245,col 41)",
            "(line 246,col 9)-(line 246,col 25)",
            "(line 247,col 9)-(line 247,col 25)",
            "(line 248,col 9)-(line 248,col 25)",
            "(line 249,col 9)-(line 249,col 25)",
            "(line 251,col 9)-(line 251,col 64)",
            "(line 252,col 9)-(line 253,col 40)",
            "(line 254,col 9)-(line 254,col 31)",
            "(line 255,col 32)-(line 255,col 52)",
            "(line 256,col 9)-(line 256,col 46)",
            "(line 257,col 9)-(line 257,col 42)",
            "(line 258,col 9)-(line 258,col 46)",
            "(line 259,col 9)-(line 259,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/StandardXYItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests.testNoDisplayedItem()",
        "snippet": "    public void testNoDisplayedItem() {\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        XYSeries s1 = new XYSeries(\"S1\");\n        s1.add(10.0, 10.0);\n        dataset.addSeries(s1);\n        JFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\", \n                dataset, PlotOrientation.VERTICAL, false, true, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        plot.setRenderer(new StandardXYItemRenderer());\n        NumberAxis xAxis = (NumberAxis) plot.getDomainAxis();\n        xAxis.setRange(0.0, 5.0);\n        NumberAxis yAxis = (NumberAxis) plot.getRangeAxis();\n        yAxis.setRange(0.0, 5.0);\n        BufferedImage image = new BufferedImage(200 , 100, \n                BufferedImage.TYPE_INT_RGB);\n        Graphics2D g2 = image.createGraphics();\n        ChartRenderingInfo info = new ChartRenderingInfo();\n        chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, info);\n        g2.dispose();\n        EntityCollection ec = info.getEntityCollection();\n        assertFalse(TestUtilities.containsInstanceOf(ec.getEntities(), \n                XYItemEntity.class));\n    }",
        "begin_line": 266,
        "end_line": 288,
        "comment": "\n     * A check to ensure that an item that falls outside the plot's data area\n     * does NOT generate an item entity.\n     ",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 62)",
            "(line 268,col 9)-(line 268,col 41)",
            "(line 269,col 9)-(line 269,col 27)",
            "(line 270,col 9)-(line 270,col 30)",
            "(line 271,col 9)-(line 272,col 71)",
            "(line 273,col 9)-(line 273,col 47)",
            "(line 274,col 9)-(line 274,col 55)",
            "(line 275,col 9)-(line 275,col 61)",
            "(line 276,col 9)-(line 276,col 33)",
            "(line 277,col 9)-(line 277,col 60)",
            "(line 278,col 9)-(line 278,col 33)",
            "(line 279,col 9)-(line 280,col 44)",
            "(line 281,col 9)-(line 281,col 47)",
            "(line 282,col 9)-(line 282,col 59)",
            "(line 283,col 9)-(line 283,col 75)",
            "(line 284,col 9)-(line 284,col 21)",
            "(line 285,col 9)-(line 285,col 57)",
            "(line 286,col 9)-(line 287,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/ClusteredXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ClusteredXYBarRendererTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/ClusteredXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests.ClusteredXYBarRendererTests(java.lang.String)",
        "snippet": "    public ClusteredXYBarRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/ClusteredXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        ClusteredXYBarRenderer r1 = new ClusteredXYBarRenderer();\n        ClusteredXYBarRenderer r2 = new ClusteredXYBarRenderer();\n        assertEquals(r1, r2);\n        assertEquals(r2, r1);\n        \n        r1 = new ClusteredXYBarRenderer(1.2, false);\n        assertFalse(r1.equals(r2));\n        r2 = new ClusteredXYBarRenderer(1.2, false);\n        assertTrue(r1.equals(r2));\n        \n        r1 = new ClusteredXYBarRenderer(1.2, true);\n        assertFalse(r1.equals(r2));\n        r2 = new ClusteredXYBarRenderer(1.2, true);\n        assertTrue(r1.equals(r2));        \n    }",
        "begin_line": 87,
        "end_line": 102,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 65)",
            "(line 89,col 9)-(line 89,col 65)",
            "(line 90,col 9)-(line 90,col 29)",
            "(line 91,col 9)-(line 91,col 29)",
            "(line 93,col 9)-(line 93,col 52)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 95,col 52)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 98,col 9)-(line 98,col 51)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 100,col 51)",
            "(line 101,col 9)-(line 101,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/ClusteredXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        ClusteredXYBarRenderer r1 = new ClusteredXYBarRenderer();\n        ClusteredXYBarRenderer r2 = new ClusteredXYBarRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 107,
        "end_line": 114,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 65)",
            "(line 109,col 9)-(line 109,col 65)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 111,col 9)-(line 111,col 31)",
            "(line 112,col 9)-(line 112,col 31)",
            "(line 113,col 9)-(line 113,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/ClusteredXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        ClusteredXYBarRenderer r1 = new ClusteredXYBarRenderer();\n        ClusteredXYBarRenderer r2 = null;\n        try {\n            r2 = (ClusteredXYBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 119,
        "end_line": 131,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 65)",
            "(line 121,col 9)-(line 121,col 41)",
            "(line 122,col 9)-(line 127,col 9)",
            "(line 128,col 9)-(line 128,col 29)",
            "(line 129,col 9)-(line 129,col 51)",
            "(line 130,col 9)-(line 130,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/ClusteredXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        ClusteredXYBarRenderer r1 = new ClusteredXYBarRenderer();\n        ClusteredXYBarRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (ClusteredXYBarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 136,
        "end_line": 157,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 65)",
            "(line 139,col 9)-(line 139,col 41)",
            "(line 141,col 9)-(line 154,col 9)",
            "(line 155,col 9)-(line 155,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/ClusteredXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests.testFindDomainBounds()",
        "snippet": "    public void testFindDomainBounds() {\n        AbstractXYItemRenderer renderer = new ClusteredXYBarRenderer();\n        XYDataset dataset = createSampleDataset1();\n        Range r = renderer.findDomainBounds(dataset);\n        assertEquals(0.9, r.getLowerBound(), EPSILON);\n        assertEquals(13.1, r.getUpperBound(), EPSILON);\n        \n        renderer = new ClusteredXYBarRenderer(0.0, true);\n        r = renderer.findDomainBounds(dataset);\n        assertEquals(0.8, r.getLowerBound(), EPSILON);\n        assertEquals(13.0, r.getUpperBound(), EPSILON);\n        \n        // check that a null dataset returns null bounds\n        assertTrue(renderer.findDomainBounds(null) == null);\n    }    ",
        "begin_line": 165,
        "end_line": 179,
        "comment": "\n     * Some checks for the findDomainBounds() method (which requires special\n     * handling when the centerBarAtStartValue flag is set to true).\n     ",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 71)",
            "(line 167,col 9)-(line 167,col 51)",
            "(line 168,col 9)-(line 168,col 53)",
            "(line 169,col 9)-(line 169,col 54)",
            "(line 170,col 9)-(line 170,col 55)",
            "(line 172,col 9)-(line 172,col 57)",
            "(line 173,col 9)-(line 173,col 47)",
            "(line 174,col 9)-(line 174,col 54)",
            "(line 175,col 9)-(line 175,col 55)",
            "(line 178,col 9)-(line 178,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/ClusteredXYBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests.createSampleDataset1()",
        "snippet": "    public DefaultIntervalXYDataset createSampleDataset1() {\n        DefaultIntervalXYDataset d = new DefaultIntervalXYDataset();\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] x1Start = new double[] {0.9, 1.9, 2.9};\n        double[] x1End = new double[] {1.1, 2.1, 3.1};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[] y1Start = new double[] {1.09, 2.09, 3.09};\n        double[] y1End = new double[] {1.11, 2.11, 3.11};\n        double[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start, \n                y1End};\n        d.addSeries(\"S1\", data1);\n        \n        double[] x2 = new double[] {11.0, 12.0, 13.0};\n        double[] x2Start = new double[] {10.9, 11.9, 12.9};\n        double[] x2End = new double[] {11.1, 12.1, 13.1};\n        double[] y2 = new double[] {14.0, 15.0, 16.0};\n        double[] y2Start = new double[] {11.09, 12.09, 13.09};\n        double[] y2End = new double[] {11.11, 12.11, 13.11};\n        double[][] data2 = new double[][] {x2, x2Start, x2End, y2, y2Start, \n                y2End};\n        d.addSeries(\"S2\", data2);\n        return d;\n    }",
        "begin_line": 186,
        "end_line": 208,
        "comment": "\n     * Creates a sample dataset for testing.\n     * \n     * @return A sample dataset.\n     ",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 68)",
            "(line 188,col 9)-(line 188,col 51)",
            "(line 189,col 9)-(line 189,col 56)",
            "(line 190,col 9)-(line 190,col 54)",
            "(line 191,col 9)-(line 191,col 51)",
            "(line 192,col 9)-(line 192,col 59)",
            "(line 193,col 9)-(line 193,col 57)",
            "(line 194,col 9)-(line 195,col 23)",
            "(line 196,col 9)-(line 196,col 33)",
            "(line 198,col 9)-(line 198,col 54)",
            "(line 199,col 9)-(line 199,col 59)",
            "(line 200,col 9)-(line 200,col 57)",
            "(line 201,col 9)-(line 201,col 54)",
            "(line 202,col 9)-(line 202,col 62)",
            "(line 203,col 9)-(line 203,col 60)",
            "(line 204,col 9)-(line 205,col 23)",
            "(line 206,col 9)-(line 206,col 33)",
            "(line 207,col 9)-(line 207,col 17)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYDifferenceRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYDifferenceRendererTests.class);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYDifferenceRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests.XYDifferenceRendererTests(java.lang.String)",
        "snippet": "    public XYDifferenceRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYDifferenceRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYDifferenceRenderer r1 = new XYDifferenceRenderer(\n                Color.red, Color.blue, false);\n        XYDifferenceRenderer r2 = new XYDifferenceRenderer(\n                Color.red, Color.blue, false);\n        assertEquals(r1, r2);\n        \n        // positive paint\n        r1.setPositivePaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue));\n        assertFalse(r1.equals(r2));\n        r2.setPositivePaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue));\n        assertTrue(r1.equals(r2));\n        \n        // negative paint\n        r1.setNegativePaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.blue));\n        assertFalse(r1.equals(r2));\n        r2.setNegativePaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.blue));\n        assertTrue(r1.equals(r2));\n        \n        // shapesVisible\n        r1 = new XYDifferenceRenderer(Color.green, Color.yellow, true);\n        assertFalse(r1.equals(r2));\n        r2 = new XYDifferenceRenderer(Color.green, Color.yellow, true);\n        assertTrue(r1.equals(r2));\n        \n        // legendLine\n        r1.setLegendLine(new Line2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendLine(new Line2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n        \n        // roundXCoordinates\n        r1.setRoundXCoordinates(true);\n        assertFalse(r1.equals(r2));\n        r2.setRoundXCoordinates(true);\n        assertTrue(r1.equals(r2));\n        \n        assertFalse(r1.equals(null));\n    }",
        "begin_line": 96,
        "end_line": 138,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 98,col 46)",
            "(line 99,col 9)-(line 100,col 46)",
            "(line 101,col 9)-(line 101,col 29)",
            "(line 104,col 9)-(line 105,col 41)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 108,col 41)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 112,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 116,col 41)",
            "(line 117,col 9)-(line 117,col 34)",
            "(line 120,col 9)-(line 120,col 71)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 71)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 126,col 9)-(line 126,col 64)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 128,col 64)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 132,col 9)-(line 132,col 38)",
            "(line 133,col 9)-(line 133,col 35)",
            "(line 134,col 9)-(line 134,col 38)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 137,col 9)-(line 137,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYDifferenceRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYDifferenceRenderer r1 \n            = new XYDifferenceRenderer(Color.red, Color.blue, false);\n        XYDifferenceRenderer r2 \n            = new XYDifferenceRenderer(Color.red, Color.blue, false);\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 143,
        "end_line": 152,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 145,col 69)",
            "(line 146,col 9)-(line 147,col 69)",
            "(line 148,col 9)-(line 148,col 34)",
            "(line 149,col 9)-(line 149,col 31)",
            "(line 150,col 9)-(line 150,col 31)",
            "(line 151,col 9)-(line 151,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYDifferenceRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYDifferenceRenderer r1 = new XYDifferenceRenderer(Color.red, \n                Color.blue, false);\n        XYDifferenceRenderer r2 = null;\n        try {\n            r2 = (XYDifferenceRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        // check independence\n        Shape s = r1.getLegendLine();\n        if (s instanceof Line2D) {\n            Line2D l = (Line2D) s;\n            l.setLine(1.0, 2.0, 3.0, 4.0);\n            assertFalse(r1.equals(r2));\n        }\n    }",
        "begin_line": 157,
        "end_line": 178,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 159,col 35)",
            "(line 160,col 9)-(line 160,col 39)",
            "(line 161,col 9)-(line 166,col 9)",
            "(line 167,col 9)-(line 167,col 29)",
            "(line 168,col 9)-(line 168,col 51)",
            "(line 169,col 9)-(line 169,col 34)",
            "(line 172,col 9)-(line 172,col 37)",
            "(line 173,col 9)-(line 177,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYDifferenceRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYDifferenceRenderer r1 = new XYDifferenceRenderer(Color.red, \n                Color.blue, false);\n        XYDifferenceRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (XYDifferenceRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 183,
        "end_line": 205,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 185,col 9)-(line 186,col 35)",
            "(line 187,col 9)-(line 187,col 39)",
            "(line 189,col 9)-(line 202,col 9)",
            "(line 203,col 9)-(line 203,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYDifferenceRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        XYSeriesCollection d1 = new XYSeriesCollection();\n        XYSeries s1 = new XYSeries(\"S1\");\n        s1.add(1.0, 1.1);\n        XYSeries s2 = new XYSeries(\"S2\");\n        s2.add(1.0, 1.1);\n        d1.addSeries(s1);\n        d1.addSeries(s2);\n        \n        XYSeriesCollection d2 = new XYSeriesCollection();\n        XYSeries s3 = new XYSeries(\"S3\");\n        s3.add(1.0, 1.1);\n        XYSeries s4 = new XYSeries(\"S4\");\n        s4.add(1.0, 1.1);\n        XYSeries s5 = new XYSeries(\"S5\");\n        s5.add(1.0, 1.1);\n        d2.addSeries(s3);\n        d2.addSeries(s4);\n        d2.addSeries(s5);\n\n        XYDifferenceRenderer r = new XYDifferenceRenderer();\n        XYPlot plot = new XYPlot(d1, new NumberAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, d2);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"S5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 211,
        "end_line": 240,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 57)",
            "(line 213,col 9)-(line 213,col 41)",
            "(line 214,col 9)-(line 214,col 25)",
            "(line 215,col 9)-(line 215,col 41)",
            "(line 216,col 9)-(line 216,col 25)",
            "(line 217,col 9)-(line 217,col 25)",
            "(line 218,col 9)-(line 218,col 25)",
            "(line 220,col 9)-(line 220,col 57)",
            "(line 221,col 9)-(line 221,col 41)",
            "(line 222,col 9)-(line 222,col 25)",
            "(line 223,col 9)-(line 223,col 41)",
            "(line 224,col 9)-(line 224,col 25)",
            "(line 225,col 9)-(line 225,col 41)",
            "(line 226,col 9)-(line 226,col 25)",
            "(line 227,col 9)-(line 227,col 25)",
            "(line 228,col 9)-(line 228,col 25)",
            "(line 229,col 9)-(line 229,col 25)",
            "(line 231,col 9)-(line 231,col 60)",
            "(line 232,col 9)-(line 233,col 40)",
            "(line 234,col 9)-(line 234,col 31)",
            "(line 235,col 32)-(line 235,col 52)",
            "(line 236,col 9)-(line 236,col 46)",
            "(line 237,col 9)-(line 237,col 42)",
            "(line 238,col 9)-(line 238,col 46)",
            "(line 239,col 9)-(line 239,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/CandlestickRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CandlestickRendererTests.class);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/CandlestickRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests.CandlestickRendererTests(java.lang.String)",
        "snippet": "    public CandlestickRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/CandlestickRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests.testConstructor()",
        "snippet": "    public void testConstructor() {\n        CandlestickRenderer r1 = new CandlestickRenderer();\n        \n        // check defaults\n        assertEquals(Color.green, r1.getUpPaint());\n        assertEquals(Color.red, r1.getDownPaint());\n        assertFalse(r1.getUseOutlinePaint());\n        assertTrue(r1.getDrawVolume());\n        assertEquals(Color.gray, r1.getVolumePaint());\n        assertEquals(-1.0, r1.getCandleWidth(), EPSILON);\n    }",
        "begin_line": 96,
        "end_line": 106,
        "comment": "\n     * Some checks for the constructor.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 59)",
            "(line 100,col 9)-(line 100,col 51)",
            "(line 101,col 9)-(line 101,col 51)",
            "(line 102,col 9)-(line 102,col 45)",
            "(line 103,col 9)-(line 103,col 39)",
            "(line 104,col 9)-(line 104,col 54)",
            "(line 105,col 9)-(line 105,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/CandlestickRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        CandlestickRenderer r1 = new CandlestickRenderer();\n        CandlestickRenderer r2 = new CandlestickRenderer();\n        assertEquals(r1, r2);\n        \n        // upPaint\n        r1.setUpPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.white));\n        assertFalse(r1.equals(r2));\n        r2.setUpPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.white));\n        assertTrue(r1.equals(r2));\n        \n        // downPaint\n        r1.setDownPaint(new GradientPaint(5.0f, 6.0f, Color.green, 7.0f, 8.0f, \n                Color.yellow));\n        assertFalse(r1.equals(r2));\n        r2.setDownPaint(new GradientPaint(5.0f, 6.0f, Color.green, 7.0f, 8.0f, \n                Color.yellow));\n        assertTrue(r1.equals(r2));\n        \n        // drawVolume\n        r1.setDrawVolume(false);\n        assertFalse(r1.equals(r2));\n        r2.setDrawVolume(false);\n        assertTrue(r1.equals(r2));\n        \n        // candleWidth\n        r1.setCandleWidth(3.3);\n        assertFalse(r1.equals(r2));\n        r2.setCandleWidth(3.3);\n        assertTrue(r1.equals(r2));\n        \n        // maxCandleWidthInMilliseconds\n        r1.setMaxCandleWidthInMilliseconds(123);\n        assertFalse(r1.equals(r2));\n        r2.setMaxCandleWidthInMilliseconds(123);\n        assertTrue(r1.equals(r2));\n        \n        // autoWidthMethod\n        r1.setAutoWidthMethod(CandlestickRenderer.WIDTHMETHOD_SMALLEST);\n        assertFalse(r1.equals(r2));\n        r2.setAutoWidthMethod(CandlestickRenderer.WIDTHMETHOD_SMALLEST);\n        assertTrue(r1.equals(r2));\n        \n        // autoWidthFactor\n        r1.setAutoWidthFactor(0.22);\n        assertFalse(r1.equals(r2));\n        r2.setAutoWidthFactor(0.22);\n        assertTrue(r1.equals(r2));\n        \n        // autoWidthGap\n        r1.setAutoWidthGap(1.1);\n        assertFalse(r1.equals(r2));\n        r2.setAutoWidthGap(1.1);\n        assertTrue(r1.equals(r2));\n        \n        r1.setUseOutlinePaint(true);\n        assertFalse(r1.equals(r2));\n        r2.setUseOutlinePaint(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setVolumePaint(Color.blue);\n        assertFalse(r1.equals(r2));\n        r2.setVolumePaint(Color.blue);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 111,
        "end_line": 177,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 59)",
            "(line 113,col 9)-(line 113,col 59)",
            "(line 114,col 9)-(line 114,col 29)",
            "(line 117,col 9)-(line 118,col 30)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 121,col 30)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 125,col 9)-(line 126,col 31)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 129,col 31)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 133,col 9)-(line 133,col 32)",
            "(line 134,col 9)-(line 134,col 35)",
            "(line 135,col 9)-(line 135,col 32)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 139,col 9)-(line 139,col 31)",
            "(line 140,col 9)-(line 140,col 35)",
            "(line 141,col 9)-(line 141,col 31)",
            "(line 142,col 9)-(line 142,col 34)",
            "(line 145,col 9)-(line 145,col 48)",
            "(line 146,col 9)-(line 146,col 35)",
            "(line 147,col 9)-(line 147,col 48)",
            "(line 148,col 9)-(line 148,col 34)",
            "(line 151,col 9)-(line 151,col 72)",
            "(line 152,col 9)-(line 152,col 35)",
            "(line 153,col 9)-(line 153,col 72)",
            "(line 154,col 9)-(line 154,col 34)",
            "(line 157,col 9)-(line 157,col 36)",
            "(line 158,col 9)-(line 158,col 35)",
            "(line 159,col 9)-(line 159,col 36)",
            "(line 160,col 9)-(line 160,col 34)",
            "(line 163,col 9)-(line 163,col 32)",
            "(line 164,col 9)-(line 164,col 35)",
            "(line 165,col 9)-(line 165,col 32)",
            "(line 166,col 9)-(line 166,col 34)",
            "(line 168,col 9)-(line 168,col 36)",
            "(line 169,col 9)-(line 169,col 35)",
            "(line 170,col 9)-(line 170,col 36)",
            "(line 171,col 9)-(line 171,col 34)",
            "(line 173,col 9)-(line 173,col 38)",
            "(line 174,col 9)-(line 174,col 35)",
            "(line 175,col 9)-(line 175,col 38)",
            "(line 176,col 9)-(line 176,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/CandlestickRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        CandlestickRenderer r1 = new CandlestickRenderer();\n        CandlestickRenderer r2 = new CandlestickRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 182,
        "end_line": 189,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 59)",
            "(line 184,col 9)-(line 184,col 59)",
            "(line 185,col 9)-(line 185,col 34)",
            "(line 186,col 9)-(line 186,col 31)",
            "(line 187,col 9)-(line 187,col 31)",
            "(line 188,col 9)-(line 188,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/CandlestickRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CandlestickRenderer r1 = new CandlestickRenderer();\n        CandlestickRenderer r2 = null;\n        try {\n            r2 = (CandlestickRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 194,
        "end_line": 206,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 59)",
            "(line 196,col 9)-(line 196,col 38)",
            "(line 197,col 9)-(line 202,col 9)",
            "(line 203,col 9)-(line 203,col 29)",
            "(line 204,col 9)-(line 204,col 51)",
            "(line 205,col 9)-(line 205,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/CandlestickRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CandlestickRenderer r1 = new CandlestickRenderer();\n        CandlestickRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (CandlestickRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 211,
        "end_line": 232,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 59)",
            "(line 214,col 9)-(line 214,col 38)",
            "(line 216,col 9)-(line 229,col 9)",
            "(line 230,col 9)-(line 230,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/CandlestickRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.CandlestickRendererTests.testFindRangeBounds()",
        "snippet": "    public void testFindRangeBounds() {}",
        "begin_line": 237,
        "end_line": 237,
        "comment": "\n     * Some checks for the findRangeBounds() method.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.VectorRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/VectorRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.VectorRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(VectorRendererTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.VectorRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/VectorRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.VectorRendererTests.VectorRendererTests(java.lang.String)",
        "snippet": "    public VectorRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.VectorRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/VectorRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.VectorRendererTests.testEquals()",
        "snippet": "    public void testEquals() {        \n        // default instances\n        VectorRenderer r1 = new VectorRenderer();\n        VectorRenderer r2 = new VectorRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        // check that super class fields are being looked at...\n        r1.setSeriesFillPaint(0, Color.green);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.green);\n        assertTrue(r1.equals(r2));   \n    }",
        "begin_line": 83,
        "end_line": 95,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 49)",
            "(line 86,col 9)-(line 86,col 49)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 91,col 9)-(line 91,col 46)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 46)",
            "(line 94,col 9)-(line 94,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.VectorRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/VectorRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.VectorRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        VectorRenderer r1 = new VectorRenderer();\n        VectorRenderer r2 = new VectorRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 100,
        "end_line": 107,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 49)",
            "(line 102,col 9)-(line 102,col 49)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 104,col 9)-(line 104,col 31)",
            "(line 105,col 9)-(line 105,col 31)",
            "(line 106,col 9)-(line 106,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.VectorRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/VectorRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.VectorRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        VectorRenderer r1 = new VectorRenderer();\n        VectorRenderer r2 = null;\n        try {\n            r2 = (VectorRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 112,
        "end_line": 124,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 49)",
            "(line 114,col 9)-(line 114,col 33)",
            "(line 115,col 9)-(line 120,col 9)",
            "(line 121,col 9)-(line 121,col 29)",
            "(line 122,col 9)-(line 122,col 51)",
            "(line 123,col 9)-(line 123,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.VectorRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/VectorRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.VectorRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        VectorRenderer r1 = new VectorRenderer();\n        VectorRenderer r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (VectorRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 129,
        "end_line": 147,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 49)",
            "(line 131,col 9)-(line 131,col 33)",
            "(line 132,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 146,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYLineAndShapeRendererTests.class);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.XYLineAndShapeRendererTests(java.lang.String)",
        "snippet": "    public XYLineAndShapeRendererTests(String name) {\n        super(name);\n    }",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer();\n        XYLineAndShapeRenderer r2 = new XYLineAndShapeRenderer();\n        assertEquals(r1, r2);\n        assertEquals(r2, r1);\n        \n        r1.setSeriesLinesVisible(3, true);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesLinesVisible(3, true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setBaseLinesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseLinesVisible(false);\n        assertTrue(r1.equals(r2));\n        \n        r1.setLegendLine(new Line2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendLine(new Line2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesShapesVisible(3, true);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShapesVisible(3, true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setBaseShapesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShapesVisible(false);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesShapesFilled(3, true);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShapesFilled(3, true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setBaseShapesFilled(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShapesFilled(false);\n        assertTrue(r1.equals(r2));\n    \n        r1.setDrawOutlines(!r1.getDrawOutlines());\n        assertFalse(r1.equals(r2));\n        r2.setDrawOutlines(r1.getDrawOutlines());\n        assertTrue(r1.equals(r2));\n    \n        r1.setUseOutlinePaint(true);\n        assertFalse(r1.equals(r2));\n        r2.setUseOutlinePaint(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setUseFillPaint(true);\n        assertFalse(r1.equals(r2));\n        r2.setUseFillPaint(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setDrawSeriesLineAsPath(true);\n        assertFalse(r1.equals(r2));\n        r2.setDrawSeriesLineAsPath(true);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 98,
        "end_line": 159,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 65)",
            "(line 101,col 9)-(line 101,col 65)",
            "(line 102,col 9)-(line 102,col 29)",
            "(line 103,col 9)-(line 103,col 29)",
            "(line 105,col 9)-(line 105,col 42)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 107,col 42)",
            "(line 108,col 9)-(line 108,col 34)",
            "(line 110,col 9)-(line 110,col 38)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 38)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 115,col 9)-(line 115,col 64)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 117,col 64)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 120,col 9)-(line 120,col 43)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 43)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 125,col 9)-(line 125,col 39)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 127,col 39)",
            "(line 128,col 9)-(line 128,col 34)",
            "(line 130,col 9)-(line 130,col 42)",
            "(line 131,col 9)-(line 131,col 35)",
            "(line 132,col 9)-(line 132,col 42)",
            "(line 133,col 9)-(line 133,col 34)",
            "(line 135,col 9)-(line 135,col 38)",
            "(line 136,col 9)-(line 136,col 35)",
            "(line 137,col 9)-(line 137,col 38)",
            "(line 138,col 9)-(line 138,col 34)",
            "(line 140,col 9)-(line 140,col 50)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 49)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 145,col 9)-(line 145,col 36)",
            "(line 146,col 9)-(line 146,col 35)",
            "(line 147,col 9)-(line 147,col 36)",
            "(line 148,col 9)-(line 148,col 34)",
            "(line 150,col 9)-(line 150,col 33)",
            "(line 151,col 9)-(line 151,col 35)",
            "(line 152,col 9)-(line 152,col 33)",
            "(line 153,col 9)-(line 153,col 34)",
            "(line 155,col 9)-(line 155,col 41)",
            "(line 156,col 9)-(line 156,col 35)",
            "(line 157,col 9)-(line 157,col 41)",
            "(line 158,col 9)-(line 158,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testEquals2()",
        "snippet": "    public void testEquals2() {\n        XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer();\n        XYLineAndShapeRenderer r2 = new XYLineAndShapeRenderer();\n        assertEquals(r1, r2);\n        assertEquals(r2, r1);\n    \n        r1.setBaseURLGenerator(new TimeSeriesURLGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setBaseURLGenerator(new TimeSeriesURLGenerator());\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 164,
        "end_line": 174,
        "comment": "\n     * Test that the equals() method works for a TimeSeriesURLGenerator.\n     ",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 65)",
            "(line 166,col 9)-(line 166,col 65)",
            "(line 167,col 9)-(line 167,col 29)",
            "(line 168,col 9)-(line 168,col 29)",
            "(line 170,col 9)-(line 170,col 61)",
            "(line 171,col 9)-(line 171,col 35)",
            "(line 172,col 9)-(line 172,col 61)",
            "(line 173,col 9)-(line 173,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer();\n        XYLineAndShapeRenderer r2 = new XYLineAndShapeRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 180,
        "end_line": 187,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 65)",
            "(line 182,col 9)-(line 182,col 65)",
            "(line 183,col 9)-(line 183,col 34)",
            "(line 184,col 9)-(line 184,col 31)",
            "(line 185,col 9)-(line 185,col 31)",
            "(line 186,col 9)-(line 186,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        Rectangle2D legendShape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer();\n        r1.setLegendLine(legendShape);\n        XYLineAndShapeRenderer r2 = null;\n        try {\n            r2 = (XYLineAndShapeRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesLinesVisible(0, false);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesLinesVisible(0, false);\n        assertTrue(r1.equals(r2));\n        \n        legendShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setLegendLine(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesShapesVisible(1, true);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShapesVisible(1, true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesShapesFilled(1, true);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShapesFilled(1, true);\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 192,
        "end_line": 226,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 77)",
            "(line 194,col 9)-(line 194,col 65)",
            "(line 195,col 9)-(line 195,col 38)",
            "(line 196,col 9)-(line 196,col 41)",
            "(line 197,col 9)-(line 202,col 9)",
            "(line 203,col 9)-(line 203,col 29)",
            "(line 204,col 9)-(line 204,col 51)",
            "(line 205,col 9)-(line 205,col 34)",
            "(line 207,col 9)-(line 207,col 43)",
            "(line 208,col 9)-(line 208,col 35)",
            "(line 209,col 9)-(line 209,col 43)",
            "(line 210,col 9)-(line 210,col 34)",
            "(line 212,col 9)-(line 212,col 48)",
            "(line 213,col 9)-(line 213,col 35)",
            "(line 214,col 9)-(line 214,col 69)",
            "(line 215,col 9)-(line 215,col 34)",
            "(line 217,col 9)-(line 217,col 43)",
            "(line 218,col 9)-(line 218,col 35)",
            "(line 219,col 9)-(line 219,col 43)",
            "(line 220,col 9)-(line 220,col 34)",
            "(line 222,col 9)-(line 222,col 42)",
            "(line 223,col 9)-(line 223,col 35)",
            "(line 224,col 9)-(line 224,col 42)",
            "(line 225,col 9)-(line 225,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer();\n        XYLineAndShapeRenderer r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (XYLineAndShapeRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 231,
        "end_line": 251,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 65)",
            "(line 234,col 9)-(line 234,col 41)",
            "(line 235,col 9)-(line 248,col 9)",
            "(line 249,col 9)-(line 249,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testFindDomainBounds()",
        "snippet": "    public void testFindDomainBounds() {\n        XYSeriesCollection dataset \n                = RendererXYPackageTests.createTestXYSeriesCollection();\n        JFreeChart chart = ChartFactory.createXYLineChart(\n                \"Test Chart\", \"X\", \"Y\", dataset, PlotOrientation.VERTICAL, \n                false, false, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();\n        domainAxis.setAutoRangeIncludesZero(false);\n        Range bounds = domainAxis.getRange();\n        assertFalse(bounds.contains(0.9));\n        assertTrue(bounds.contains(1.0));\n        assertTrue(bounds.contains(2.0));\n        assertFalse(bounds.contains(2.10));\n    }",
        "begin_line": 256,
        "end_line": 270,
        "comment": "\n     * Check that the renderer is calculating the domain bounds correctly.\n     ",
        "child_ranges": [
            "(line 257,col 9)-(line 258,col 72)",
            "(line 259,col 9)-(line 261,col 37)",
            "(line 262,col 9)-(line 262,col 47)",
            "(line 263,col 9)-(line 263,col 66)",
            "(line 264,col 9)-(line 264,col 51)",
            "(line 265,col 9)-(line 265,col 45)",
            "(line 266,col 9)-(line 266,col 42)",
            "(line 267,col 9)-(line 267,col 41)",
            "(line 268,col 9)-(line 268,col 41)",
            "(line 269,col 9)-(line 269,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testFindRangeBounds()",
        "snippet": "    public void testFindRangeBounds() {\n        TableXYDataset dataset \n                = RendererXYPackageTests.createTestTableXYDataset();\n        JFreeChart chart = ChartFactory.createXYLineChart(\n                \"Test Chart\", \"X\", \"Y\", dataset, PlotOrientation.VERTICAL, \n                false, false, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        rangeAxis.setAutoRangeIncludesZero(false);\n        Range bounds = rangeAxis.getRange();\n        assertFalse(bounds.contains(1.0));\n        assertTrue(bounds.contains(2.0));\n        assertTrue(bounds.contains(5.0));\n        assertFalse(bounds.contains(6.0));\n    }",
        "begin_line": 275,
        "end_line": 289,
        "comment": "\n     * Check that the renderer is calculating the range bounds correctly.\n     ",
        "child_ranges": [
            "(line 276,col 9)-(line 277,col 68)",
            "(line 278,col 9)-(line 280,col 37)",
            "(line 281,col 9)-(line 281,col 47)",
            "(line 282,col 9)-(line 282,col 64)",
            "(line 283,col 9)-(line 283,col 50)",
            "(line 284,col 9)-(line 284,col 44)",
            "(line 285,col 9)-(line 285,col 42)",
            "(line 286,col 9)-(line 286,col 41)",
            "(line 287,col 9)-(line 287,col 41)",
            "(line 288,col 9)-(line 288,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        XYSeriesCollection d1 = new XYSeriesCollection();\n        XYSeries s1 = new XYSeries(\"S1\");\n        s1.add(1.0, 1.1);\n        XYSeries s2 = new XYSeries(\"S2\");\n        s2.add(1.0, 1.1);\n        d1.addSeries(s1);\n        d1.addSeries(s2);\n        \n        XYSeriesCollection d2 = new XYSeriesCollection();\n        XYSeries s3 = new XYSeries(\"S3\");\n        s3.add(1.0, 1.1);\n        XYSeries s4 = new XYSeries(\"S4\");\n        s4.add(1.0, 1.1);\n        XYSeries s5 = new XYSeries(\"S5\");\n        s5.add(1.0, 1.1);\n        d2.addSeries(s3);\n        d2.addSeries(s4);\n        d2.addSeries(s5);\n\n        XYLineAndShapeRenderer r = new XYLineAndShapeRenderer();\n        XYPlot plot = new XYPlot(d1, new NumberAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, d2);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"S5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }",
        "begin_line": 295,
        "end_line": 324,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 57)",
            "(line 297,col 9)-(line 297,col 41)",
            "(line 298,col 9)-(line 298,col 25)",
            "(line 299,col 9)-(line 299,col 41)",
            "(line 300,col 9)-(line 300,col 25)",
            "(line 301,col 9)-(line 301,col 25)",
            "(line 302,col 9)-(line 302,col 25)",
            "(line 304,col 9)-(line 304,col 57)",
            "(line 305,col 9)-(line 305,col 41)",
            "(line 306,col 9)-(line 306,col 25)",
            "(line 307,col 9)-(line 307,col 41)",
            "(line 308,col 9)-(line 308,col 25)",
            "(line 309,col 9)-(line 309,col 41)",
            "(line 310,col 9)-(line 310,col 25)",
            "(line 311,col 9)-(line 311,col 25)",
            "(line 312,col 9)-(line 312,col 25)",
            "(line 313,col 9)-(line 313,col 25)",
            "(line 315,col 9)-(line 315,col 64)",
            "(line 316,col 9)-(line 317,col 40)",
            "(line 318,col 9)-(line 318,col 31)",
            "(line 319,col 32)-(line 319,col 52)",
            "(line 320,col 9)-(line 320,col 46)",
            "(line 321,col 9)-(line 321,col 42)",
            "(line 322,col 9)-(line 322,col 46)",
            "(line 323,col 9)-(line 323,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PlumNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PlumNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PlumNeedleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PlumNeedleTests.class);\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PlumNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PlumNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PlumNeedleTests.PlumNeedleTests(java.lang.String)",
        "snippet": "    public PlumNeedleTests(String name) {\n        super(name);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PlumNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PlumNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PlumNeedleTests.testEquals()",
        "snippet": "    public void testEquals() {\n       PlumNeedle n1 = new PlumNeedle();\n       PlumNeedle n2 = new PlumNeedle();\n       assertTrue(n1.equals(n2));\n       assertTrue(n2.equals(n1));\n    }",
        "begin_line": 81,
        "end_line": 86,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 82,col 8)-(line 82,col 40)",
            "(line 83,col 8)-(line 83,col 40)",
            "(line 84,col 8)-(line 84,col 33)",
            "(line 85,col 8)-(line 85,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PlumNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PlumNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PlumNeedleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        PlumNeedle n1 = new PlumNeedle();\n        PlumNeedle n2 = null;\n        try {\n            n2 = (PlumNeedle) n1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(n1 != n2);\n        assertTrue(n1.getClass() == n2.getClass());\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 91,
        "end_line": 104,
        "comment": "\n     * Check that cloning works.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 41)",
            "(line 93,col 9)-(line 93,col 29)",
            "(line 94,col 9)-(line 100,col 9)",
            "(line 101,col 9)-(line 101,col 29)",
            "(line 102,col 9)-(line 102,col 51)",
            "(line 103,col 9)-(line 103,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PlumNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PlumNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PlumNeedleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        PlumNeedle n1 = new PlumNeedle();\n        PlumNeedle n2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(n1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            n2 = (PlumNeedle) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 109,
        "end_line": 127,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 41)",
            "(line 111,col 9)-(line 111,col 29)",
            "(line 112,col 9)-(line 125,col 9)",
            "(line 126,col 9)-(line 126,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.LongNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/LongNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.LongNeedleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LongNeedleTests.class);\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.LongNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/LongNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.LongNeedleTests.LongNeedleTests(java.lang.String)",
        "snippet": "    public LongNeedleTests(String name) {\n        super(name);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.LongNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/LongNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.LongNeedleTests.testEquals()",
        "snippet": "    public void testEquals() {\n       LongNeedle n1 = new LongNeedle();\n       LongNeedle n2 = new LongNeedle();\n       assertTrue(n1.equals(n2));\n       assertTrue(n2.equals(n1));\n    }",
        "begin_line": 81,
        "end_line": 86,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 82,col 8)-(line 82,col 40)",
            "(line 83,col 8)-(line 83,col 40)",
            "(line 84,col 8)-(line 84,col 33)",
            "(line 85,col 8)-(line 85,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.LongNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/LongNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.LongNeedleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LongNeedle n1 = new LongNeedle();\n        LongNeedle n2 = null;\n        try {\n            n2 = (LongNeedle) n1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(n1 != n2);\n        assertTrue(n1.getClass() == n2.getClass());\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 91,
        "end_line": 104,
        "comment": "\n     * Check that cloning works.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 41)",
            "(line 93,col 9)-(line 93,col 29)",
            "(line 94,col 9)-(line 100,col 9)",
            "(line 101,col 9)-(line 101,col 29)",
            "(line 102,col 9)-(line 102,col 51)",
            "(line 103,col 9)-(line 103,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.LongNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/LongNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.LongNeedleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        LongNeedle n1 = new LongNeedle();\n        LongNeedle n2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(n1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            n2 = (LongNeedle) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 109,
        "end_line": 127,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 41)",
            "(line 111,col 9)-(line 111,col 29)",
            "(line 112,col 9)-(line 125,col 9)",
            "(line 126,col 9)-(line 126,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.WindNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/WindNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.WindNeedleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(WindNeedleTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.WindNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/WindNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.WindNeedleTests.WindNeedleTests(java.lang.String)",
        "snippet": "    public WindNeedleTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.WindNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/WindNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.WindNeedleTests.testEquals()",
        "snippet": "    public void testEquals() {\n       WindNeedle n1 = new WindNeedle();\n       WindNeedle n2 = new WindNeedle();\n       assertTrue(n1.equals(n2));\n       assertTrue(n2.equals(n1));\n    }",
        "begin_line": 82,
        "end_line": 87,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 83,col 8)-(line 83,col 40)",
            "(line 84,col 8)-(line 84,col 40)",
            "(line 85,col 8)-(line 85,col 33)",
            "(line 86,col 8)-(line 86,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.WindNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/WindNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.WindNeedleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        WindNeedle n1 = new WindNeedle();\n        WindNeedle n2 = null;\n        try {\n            n2 = (WindNeedle) n1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(n1 != n2);\n        assertTrue(n1.getClass() == n2.getClass());\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 92,
        "end_line": 105,
        "comment": "\n     * Check that cloning works.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 41)",
            "(line 94,col 9)-(line 94,col 29)",
            "(line 95,col 9)-(line 101,col 9)",
            "(line 102,col 9)-(line 102,col 29)",
            "(line 103,col 9)-(line 103,col 51)",
            "(line 104,col 9)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.WindNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/WindNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.WindNeedleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        WindNeedle n1 = new WindNeedle();\n        WindNeedle n2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(n1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            n2 = (WindNeedle) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 110,
        "end_line": 128,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 41)",
            "(line 112,col 9)-(line 112,col 29)",
            "(line 113,col 9)-(line 126,col 9)",
            "(line 127,col 9)-(line 127,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.LineNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/LineNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.LineNeedleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LineNeedleTests.class);\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.LineNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/LineNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.LineNeedleTests.LineNeedleTests(java.lang.String)",
        "snippet": "    public LineNeedleTests(String name) {\n        super(name);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.LineNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/LineNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.LineNeedleTests.testEquals()",
        "snippet": "    public void testEquals() {\n       LineNeedle n1 = new LineNeedle();\n       LineNeedle n2 = new LineNeedle();\n       assertTrue(n1.equals(n2));\n       assertTrue(n2.equals(n1));\n    }",
        "begin_line": 81,
        "end_line": 86,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 82,col 8)-(line 82,col 40)",
            "(line 83,col 8)-(line 83,col 40)",
            "(line 84,col 8)-(line 84,col 33)",
            "(line 85,col 8)-(line 85,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.LineNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/LineNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.LineNeedleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LineNeedle n1 = new LineNeedle();\n        LineNeedle n2 = null;\n        try {\n            n2 = (LineNeedle) n1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(n1 != n2);\n        assertTrue(n1.getClass() == n2.getClass());\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 91,
        "end_line": 104,
        "comment": "\n     * Check that cloning works.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 41)",
            "(line 93,col 9)-(line 93,col 29)",
            "(line 94,col 9)-(line 100,col 9)",
            "(line 101,col 9)-(line 101,col 29)",
            "(line 102,col 9)-(line 102,col 51)",
            "(line 103,col 9)-(line 103,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.LineNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/LineNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.LineNeedleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        LineNeedle n1 = new LineNeedle();\n        LineNeedle n2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(n1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            n2 = (LineNeedle) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 109,
        "end_line": 127,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 41)",
            "(line 111,col 9)-(line 111,col 29)",
            "(line 112,col 9)-(line 125,col 9)",
            "(line 126,col 9)-(line 126,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PointerNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PointerNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PointerNeedleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PointerNeedleTests.class);\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PointerNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PointerNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PointerNeedleTests.PointerNeedleTests(java.lang.String)",
        "snippet": "    public PointerNeedleTests(String name) {\n        super(name);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PointerNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PointerNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PointerNeedleTests.testEquals()",
        "snippet": "    public void testEquals() {\n       PointerNeedle n1 = new PointerNeedle();\n       PointerNeedle n2 = new PointerNeedle();\n       assertTrue(n1.equals(n2));\n       assertTrue(n2.equals(n1));\n    }",
        "begin_line": 81,
        "end_line": 86,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 82,col 8)-(line 82,col 46)",
            "(line 83,col 8)-(line 83,col 46)",
            "(line 84,col 8)-(line 84,col 33)",
            "(line 85,col 8)-(line 85,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PointerNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PointerNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PointerNeedleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        PointerNeedle n1 = new PointerNeedle();\n        PointerNeedle n2 = null;\n        try {\n            n2 = (PointerNeedle) n1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(n1 != n2);\n        assertTrue(n1.getClass() == n2.getClass());\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 91,
        "end_line": 104,
        "comment": "\n     * Check that cloning works.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 47)",
            "(line 93,col 9)-(line 93,col 32)",
            "(line 94,col 9)-(line 100,col 9)",
            "(line 101,col 9)-(line 101,col 29)",
            "(line 102,col 9)-(line 102,col 51)",
            "(line 103,col 9)-(line 103,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PointerNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PointerNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PointerNeedleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        PointerNeedle n1 = new PointerNeedle();\n        PointerNeedle n2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(n1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            n2 = (PointerNeedle) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 109,
        "end_line": 127,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 47)",
            "(line 111,col 9)-(line 111,col 32)",
            "(line 112,col 9)-(line 125,col 9)",
            "(line 126,col 9)-(line 126,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.NeedlePackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/NeedlePackageTests.java",
        "signature": "org.jfree.chart.needle.junit.NeedlePackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.chart.needle\");\n        suite.addTestSuite(ArrowNeedleTests.class);\n        suite.addTestSuite(LineNeedleTests.class);\n        suite.addTestSuite(LongNeedleTests.class);\n        suite.addTestSuite(MeterNeedleTests.class);\n        suite.addTestSuite(MiddlePinNeedleTests.class);\n        suite.addTestSuite(PinNeedleTests.class);\n        suite.addTestSuite(PlumNeedleTests.class);\n        suite.addTestSuite(PointerNeedleTests.class);\n        suite.addTestSuite(ShipNeedleTests.class);\n        suite.addTestSuite(WindNeedleTests.class);\n        return suite;\n    }",
        "begin_line": 59,
        "end_line": 72,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 66)",
            "(line 61,col 9)-(line 61,col 51)",
            "(line 62,col 9)-(line 62,col 50)",
            "(line 63,col 9)-(line 63,col 50)",
            "(line 64,col 9)-(line 64,col 51)",
            "(line 65,col 9)-(line 65,col 55)",
            "(line 66,col 9)-(line 66,col 49)",
            "(line 67,col 9)-(line 67,col 50)",
            "(line 68,col 9)-(line 68,col 53)",
            "(line 69,col 9)-(line 69,col 50)",
            "(line 70,col 9)-(line 70,col 50)",
            "(line 71,col 9)-(line 71,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.NeedlePackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/NeedlePackageTests.java",
        "signature": "org.jfree.chart.needle.junit.NeedlePackageTests.NeedlePackageTests(java.lang.String)",
        "snippet": "    public NeedlePackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the suite name.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.NeedlePackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/NeedlePackageTests.java",
        "signature": "org.jfree.chart.needle.junit.NeedlePackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PinNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PinNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PinNeedleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PinNeedleTests.class);\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PinNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PinNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PinNeedleTests.PinNeedleTests(java.lang.String)",
        "snippet": "    public PinNeedleTests(String name) {\n        super(name);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PinNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PinNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PinNeedleTests.testEquals()",
        "snippet": "    public void testEquals() {\n       PinNeedle n1 = new PinNeedle();\n       PinNeedle n2 = new PinNeedle();\n       assertTrue(n1.equals(n2));\n       assertTrue(n2.equals(n1));\n    }",
        "begin_line": 81,
        "end_line": 86,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 82,col 8)-(line 82,col 38)",
            "(line 83,col 8)-(line 83,col 38)",
            "(line 84,col 8)-(line 84,col 33)",
            "(line 85,col 8)-(line 85,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PinNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PinNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PinNeedleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        PinNeedle n1 = new PinNeedle();\n        PinNeedle n2 = null;\n        try {\n            n2 = (PinNeedle) n1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(n1 != n2);\n        assertTrue(n1.getClass() == n2.getClass());\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 91,
        "end_line": 104,
        "comment": "\n     * Check that cloning works.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 39)",
            "(line 93,col 9)-(line 93,col 28)",
            "(line 94,col 9)-(line 100,col 9)",
            "(line 101,col 9)-(line 101,col 29)",
            "(line 102,col 9)-(line 102,col 51)",
            "(line 103,col 9)-(line 103,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.PinNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/PinNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.PinNeedleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        PinNeedle n1 = new PinNeedle();\n        PinNeedle n2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(n1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            n2 = (PinNeedle) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 109,
        "end_line": 127,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 39)",
            "(line 111,col 9)-(line 111,col 28)",
            "(line 112,col 9)-(line 125,col 9)",
            "(line 126,col 9)-(line 126,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.ArrowNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/ArrowNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.ArrowNeedleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ArrowNeedleTests.class);\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.ArrowNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/ArrowNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.ArrowNeedleTests.ArrowNeedleTests(java.lang.String)",
        "snippet": "    public ArrowNeedleTests(String name) {\n        super(name);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.ArrowNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/ArrowNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.ArrowNeedleTests.testEquals()",
        "snippet": "    public void testEquals() {\n       ArrowNeedle n1 = new ArrowNeedle(false);\n       ArrowNeedle n2 = new ArrowNeedle(false);\n       assertTrue(n1.equals(n2));\n       assertTrue(n2.equals(n1));\n       \n       n1 = new ArrowNeedle(true);\n       assertFalse(n1.equals(n2));\n       n2 = new ArrowNeedle(true);\n       assertTrue(n1.equals(n2));       \n    }",
        "begin_line": 81,
        "end_line": 91,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 82,col 8)-(line 82,col 47)",
            "(line 83,col 8)-(line 83,col 47)",
            "(line 84,col 8)-(line 84,col 33)",
            "(line 85,col 8)-(line 85,col 33)",
            "(line 87,col 8)-(line 87,col 34)",
            "(line 88,col 8)-(line 88,col 34)",
            "(line 89,col 8)-(line 89,col 34)",
            "(line 90,col 8)-(line 90,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.ArrowNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/ArrowNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.ArrowNeedleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        ArrowNeedle n1 = new ArrowNeedle(false);\n        ArrowNeedle n2 = null;\n        try {\n            n2 = (ArrowNeedle) n1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(n1 != n2);\n        assertTrue(n1.getClass() == n2.getClass());\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 96,
        "end_line": 109,
        "comment": "\n     * Check that cloning works.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 48)",
            "(line 98,col 9)-(line 98,col 30)",
            "(line 99,col 9)-(line 105,col 9)",
            "(line 106,col 9)-(line 106,col 29)",
            "(line 107,col 9)-(line 107,col 51)",
            "(line 108,col 9)-(line 108,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.ArrowNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/ArrowNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.ArrowNeedleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        ArrowNeedle n1 = new ArrowNeedle(false);\n        ArrowNeedle n2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(n1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            n2 = (ArrowNeedle) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 114,
        "end_line": 132,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 48)",
            "(line 116,col 9)-(line 116,col 30)",
            "(line 117,col 9)-(line 130,col 9)",
            "(line 131,col 9)-(line 131,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.MiddlePinNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/MiddlePinNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.MiddlePinNeedleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MiddlePinNeedleTests.class);\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.MiddlePinNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/MiddlePinNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.MiddlePinNeedleTests.MiddlePinNeedleTests(java.lang.String)",
        "snippet": "    public MiddlePinNeedleTests(String name) {\n        super(name);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.MiddlePinNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/MiddlePinNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.MiddlePinNeedleTests.testEquals()",
        "snippet": "    public void testEquals() {\n       MiddlePinNeedle n1 = new MiddlePinNeedle();\n       MiddlePinNeedle n2 = new MiddlePinNeedle();\n       assertTrue(n1.equals(n2));\n       assertTrue(n2.equals(n1));\n    }",
        "begin_line": 81,
        "end_line": 86,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 82,col 8)-(line 82,col 50)",
            "(line 83,col 8)-(line 83,col 50)",
            "(line 84,col 8)-(line 84,col 33)",
            "(line 85,col 8)-(line 85,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.MiddlePinNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/MiddlePinNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.MiddlePinNeedleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        MiddlePinNeedle n1 = new MiddlePinNeedle();\n        MiddlePinNeedle n2 = null;\n        try {\n            n2 = (MiddlePinNeedle) n1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(n1 != n2);\n        assertTrue(n1.getClass() == n2.getClass());\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 91,
        "end_line": 104,
        "comment": "\n     * Check that cloning works.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 51)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 94,col 9)-(line 100,col 9)",
            "(line 101,col 9)-(line 101,col 29)",
            "(line 102,col 9)-(line 102,col 51)",
            "(line 103,col 9)-(line 103,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.MiddlePinNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/MiddlePinNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.MiddlePinNeedleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        MiddlePinNeedle n1 = new MiddlePinNeedle();\n        MiddlePinNeedle n2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(n1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            n2 = (MiddlePinNeedle) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 109,
        "end_line": 127,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 51)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 112,col 9)-(line 125,col 9)",
            "(line 126,col 9)-(line 126,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.MeterNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/MeterNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.MeterNeedleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MeterNeedleTests.class);\n    }",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.MeterNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/MeterNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.MeterNeedleTests.MeterNeedleTests(java.lang.String)",
        "snippet": "    public MeterNeedleTests(String name) {\n        super(name);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.MeterNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/MeterNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.MeterNeedleTests.testEquals()",
        "snippet": "    public void testEquals() {\n        MeterNeedle n1 = new LineNeedle();\n        MeterNeedle n2 = new LineNeedle();\n        assertTrue(n1.equals(n2));\n        \n        n1.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue));\n        assertFalse(n1.equals(n2));\n        n2.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue));\n        assertTrue(n1.equals(n2));\n        \n        n1.setOutlinePaint(new GradientPaint(5.0f, 6.0f, Color.red, 7.0f, 8.0f, Color.blue));\n        assertFalse(n1.equals(n2));\n        n2.setOutlinePaint(new GradientPaint(5.0f, 6.0f, Color.red, 7.0f, 8.0f, Color.blue));\n        assertTrue(n1.equals(n2));\n\n        n1.setHighlightPaint(new GradientPaint(9.0f, 0.0f, Color.red, 1.0f, 2.0f, Color.blue));\n        assertFalse(n1.equals(n2));\n        n2.setHighlightPaint(new GradientPaint(9.0f, 0.0f, Color.red, 1.0f, 2.0f, Color.blue));\n        assertTrue(n1.equals(n2));\n        \n        Stroke s = new BasicStroke(1.23f);\n        n1.setOutlineStroke(s);\n        assertFalse(n1.equals(n2));\n        n2.setOutlineStroke(s);\n        assertTrue(n1.equals(n2));\n        \n        n1.setRotateX(1.23);\n        assertFalse(n1.equals(n2));\n        n2.setRotateX(1.23);\n        assertTrue(n1.equals(n2));\n        \n        n1.setRotateY(4.56);\n        assertFalse(n1.equals(n2));\n        n2.setRotateY(4.56);\n        assertTrue(n1.equals(n2));\n        \n        n1.setSize(11);\n        assertFalse(n1.equals(n2));\n        n2.setSize(11);\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 80,
        "end_line": 120,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 42)",
            "(line 82,col 9)-(line 82,col 42)",
            "(line 83,col 9)-(line 83,col 34)",
            "(line 85,col 9)-(line 85,col 90)",
            "(line 86,col 9)-(line 86,col 35)",
            "(line 87,col 9)-(line 87,col 90)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 90,col 9)-(line 90,col 93)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 92,col 9)-(line 92,col 93)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 95,col 9)-(line 95,col 95)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 95)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 100,col 9)-(line 100,col 42)",
            "(line 101,col 9)-(line 101,col 31)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 31)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 106,col 9)-(line 106,col 28)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 28)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 111,col 9)-(line 111,col 28)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 113,col 28)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 116,col 9)-(line 116,col 23)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 118,col 23)",
            "(line 119,col 9)-(line 119,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.ShipNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/ShipNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.ShipNeedleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ShipNeedleTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.ShipNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/ShipNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.ShipNeedleTests.ShipNeedleTests(java.lang.String)",
        "snippet": "    public ShipNeedleTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.ShipNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/ShipNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.ShipNeedleTests.testEquals()",
        "snippet": "    public void testEquals() {\n       ShipNeedle n1 = new ShipNeedle();\n       ShipNeedle n2 = new ShipNeedle();\n       assertTrue(n1.equals(n2));\n       assertTrue(n2.equals(n1));\n    }",
        "begin_line": 82,
        "end_line": 87,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 83,col 8)-(line 83,col 40)",
            "(line 84,col 8)-(line 84,col 40)",
            "(line 85,col 8)-(line 85,col 33)",
            "(line 86,col 8)-(line 86,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.ShipNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/ShipNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.ShipNeedleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        ShipNeedle n1 = new ShipNeedle();\n        ShipNeedle n2 = null;\n        try {\n            n2 = (ShipNeedle) n1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(n1 != n2);\n        assertTrue(n1.getClass() == n2.getClass());\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 92,
        "end_line": 105,
        "comment": "\n     * Check that cloning works.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 41)",
            "(line 94,col 9)-(line 94,col 29)",
            "(line 95,col 9)-(line 101,col 9)",
            "(line 102,col 9)-(line 102,col 29)",
            "(line 103,col 9)-(line 103,col 51)",
            "(line 104,col 9)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.needle.junit.ShipNeedleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/needle/junit/ShipNeedleTests.java",
        "signature": "org.jfree.chart.needle.junit.ShipNeedleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        ShipNeedle n1 = new ShipNeedle();\n        ShipNeedle n2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(n1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            n2 = (ShipNeedle) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(n1.equals(n2));\n    }",
        "begin_line": 110,
        "end_line": 128,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 41)",
            "(line 112,col 9)-(line 112,col 29)",
            "(line 113,col 9)-(line 126,col 9)",
            "(line 127,col 9)-(line 127,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.LegendGraphicTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/LegendGraphicTests.java",
        "signature": "org.jfree.chart.title.junit.LegendGraphicTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LegendGraphicTests.class);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.LegendGraphicTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/LegendGraphicTests.java",
        "signature": "org.jfree.chart.title.junit.LegendGraphicTests.LegendGraphicTests(java.lang.String)",
        "snippet": "    public LegendGraphicTests(String name) {\n        super(name);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.LegendGraphicTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/LegendGraphicTests.java",
        "signature": "org.jfree.chart.title.junit.LegendGraphicTests.testEquals()",
        "snippet": "    public void testEquals() {\n        LegendGraphic g1 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, \n                3.0, 4.0), Color.black);\n        LegendGraphic g2 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, \n                3.0, 4.0), Color.black);\n        assertEquals(g1, g2);\n        assertEquals(g2, g1);\n        \n        // shapeVisible\n        g1.setShapeVisible(!g1.isShapeVisible());\n        assertFalse(g1.equals(g2));\n        g2.setShapeVisible(!g2.isShapeVisible());\n        assertTrue(g1.equals(g2));\n        \n        // shape\n        g1.setShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertFalse(g1.equals(g2));\n        g2.setShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(g1.equals(g2));\n\n        // shapeFilled\n        g1.setShapeFilled(!g1.isShapeFilled());\n        assertFalse(g1.equals(g2));\n        g2.setShapeFilled(!g2.isShapeFilled());\n        assertTrue(g1.equals(g2));\n        \n        // fillPaint\n        g1.setFillPaint(Color.green);\n        assertFalse(g1.equals(g2));\n        g2.setFillPaint(Color.green);\n        assertTrue(g1.equals(g2));\n        \n        // shapeOutlineVisible\n        g1.setShapeOutlineVisible(!g1.isShapeOutlineVisible());\n        assertFalse(g1.equals(g2));\n        g2.setShapeOutlineVisible(!g2.isShapeOutlineVisible());\n        assertTrue(g1.equals(g2));\n\n        // outlinePaint\n        g1.setOutlinePaint(Color.green);\n        assertFalse(g1.equals(g2));\n        g2.setOutlinePaint(Color.green);\n        assertTrue(g1.equals(g2));\n\n        // outlineStroke\n        g1.setOutlineStroke(new BasicStroke(1.23f));\n        assertFalse(g1.equals(g2));\n        g2.setOutlineStroke(new BasicStroke(1.23f));\n        assertTrue(g1.equals(g2));\n        \n        // shapeAnchor\n        g1.setShapeAnchor(RectangleAnchor.BOTTOM_RIGHT);\n        assertFalse(g1.equals(g2));\n        g2.setShapeAnchor(RectangleAnchor.BOTTOM_RIGHT);\n        assertTrue(g1.equals(g2));\n        \n        // shapeLocation\n        g1.setShapeLocation(RectangleAnchor.BOTTOM_RIGHT);\n        assertFalse(g1.equals(g2));\n        g2.setShapeLocation(RectangleAnchor.BOTTOM_RIGHT);\n        assertTrue(g1.equals(g2));\n        \n        // lineVisible\n        g1.setLineVisible(!g1.isLineVisible());\n        assertFalse(g1.equals(g2));\n        g2.setLineVisible(!g2.isLineVisible());\n        assertTrue(g1.equals(g2));\n        \n        // line\n        g1.setLine(new Line2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(g1.equals(g2));\n        g2.setLine(new Line2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(g1.equals(g2));\n        \n        // linePaint\n        g1.setLinePaint(Color.green);\n        assertFalse(g1.equals(g2));\n        g2.setLinePaint(Color.green);\n        assertTrue(g1.equals(g2));\n        \n        // lineStroke\n        g1.setLineStroke(new BasicStroke(1.23f));\n        assertFalse(g1.equals(g2));\n        g2.setLineStroke(new BasicStroke(1.23f));\n        assertTrue(g1.equals(g2));\n        \n        // fillPaintTransformer\n        g1.setFillPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_HORIZONTAL));\n        assertFalse(g1.equals(g2));\n        g2.setFillPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_HORIZONTAL));\n        assertTrue(g1.equals(g2));\n\n    }",
        "begin_line": 92,
        "end_line": 186,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 94,col 40)",
            "(line 95,col 9)-(line 96,col 40)",
            "(line 97,col 9)-(line 97,col 29)",
            "(line 98,col 9)-(line 98,col 29)",
            "(line 101,col 9)-(line 101,col 49)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 49)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 107,col 9)-(line 107,col 64)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 64)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 113,col 9)-(line 113,col 47)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 47)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 119,col 9)-(line 119,col 37)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 121,col 37)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 125,col 9)-(line 125,col 63)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 127,col 63)",
            "(line 128,col 9)-(line 128,col 34)",
            "(line 131,col 9)-(line 131,col 40)",
            "(line 132,col 9)-(line 132,col 35)",
            "(line 133,col 9)-(line 133,col 40)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 137,col 9)-(line 137,col 52)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 52)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 143,col 9)-(line 143,col 56)",
            "(line 144,col 9)-(line 144,col 35)",
            "(line 145,col 9)-(line 145,col 56)",
            "(line 146,col 9)-(line 146,col 34)",
            "(line 149,col 9)-(line 149,col 58)",
            "(line 150,col 9)-(line 150,col 35)",
            "(line 151,col 9)-(line 151,col 58)",
            "(line 152,col 9)-(line 152,col 34)",
            "(line 155,col 9)-(line 155,col 47)",
            "(line 156,col 9)-(line 156,col 35)",
            "(line 157,col 9)-(line 157,col 47)",
            "(line 158,col 9)-(line 158,col 34)",
            "(line 161,col 9)-(line 161,col 58)",
            "(line 162,col 9)-(line 162,col 35)",
            "(line 163,col 9)-(line 163,col 58)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 167,col 9)-(line 167,col 37)",
            "(line 168,col 9)-(line 168,col 35)",
            "(line 169,col 9)-(line 169,col 37)",
            "(line 170,col 9)-(line 170,col 34)",
            "(line 173,col 9)-(line 173,col 49)",
            "(line 174,col 9)-(line 174,col 35)",
            "(line 175,col 9)-(line 175,col 49)",
            "(line 176,col 9)-(line 176,col 34)",
            "(line 179,col 9)-(line 180,col 63)",
            "(line 181,col 9)-(line 181,col 35)",
            "(line 182,col 9)-(line 183,col 63)",
            "(line 184,col 9)-(line 184,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.LegendGraphicTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/LegendGraphicTests.java",
        "signature": "org.jfree.chart.title.junit.LegendGraphicTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        LegendGraphic g1 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, \n                3.0, 4.0), Color.black);\n        LegendGraphic g2 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, \n                3.0, 4.0), Color.black);\n        assertTrue(g1.equals(g2));\n        int h1 = g1.hashCode();\n        int h2 = g2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 191,
        "end_line": 200,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 192,col 9)-(line 193,col 40)",
            "(line 194,col 9)-(line 195,col 40)",
            "(line 196,col 9)-(line 196,col 34)",
            "(line 197,col 9)-(line 197,col 31)",
            "(line 198,col 9)-(line 198,col 31)",
            "(line 199,col 9)-(line 199,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.LegendGraphicTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/LegendGraphicTests.java",
        "signature": "org.jfree.chart.title.junit.LegendGraphicTests.testCloning()",
        "snippet": "    public void testCloning() {\n        Rectangle r = new Rectangle(1, 2, 3, 4);\n        LegendGraphic g1 = new LegendGraphic(r, Color.black);\n        LegendGraphic g2 = null;\n        try {\n            g2 = (LegendGraphic) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n        \n        // check independence\n        r.setBounds(4, 3, 2, 1);\n        assertFalse(g1.equals(g2));\n    }",
        "begin_line": 205,
        "end_line": 222,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 48)",
            "(line 207,col 9)-(line 207,col 61)",
            "(line 208,col 9)-(line 208,col 32)",
            "(line 209,col 9)-(line 214,col 9)",
            "(line 215,col 9)-(line 215,col 29)",
            "(line 216,col 9)-(line 216,col 51)",
            "(line 217,col 9)-(line 217,col 34)",
            "(line 220,col 9)-(line 220,col 32)",
            "(line 221,col 9)-(line 221,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.LegendGraphicTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/LegendGraphicTests.java",
        "signature": "org.jfree.chart.title.junit.LegendGraphicTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n        Rectangle r = new Rectangle(1, 2, 3, 4);\n        LegendGraphic g1 = new LegendGraphic(r, Color.black);\n        Line2D l = new Line2D.Double(1.0, 2.0, 3.0, 4.0);\n        g1.setLine(l);\n        LegendGraphic g2 = null;\n        try {\n            g2 = (LegendGraphic) g1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(g1 != g2);\n        assertTrue(g1.getClass() == g2.getClass());\n        assertTrue(g1.equals(g2));\n        \n        // check independence\n        l.setLine(4.0, 3.0, 2.0, 1.0);\n        assertFalse(g1.equals(g2));\n       \n    }",
        "begin_line": 227,
        "end_line": 247,
        "comment": "\n     * A test for cloning - checks that the line shape is cloned correctly.\n     ",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 48)",
            "(line 229,col 9)-(line 229,col 61)",
            "(line 230,col 9)-(line 230,col 57)",
            "(line 231,col 9)-(line 231,col 22)",
            "(line 232,col 9)-(line 232,col 32)",
            "(line 233,col 9)-(line 238,col 9)",
            "(line 239,col 9)-(line 239,col 29)",
            "(line 240,col 9)-(line 240,col 51)",
            "(line 241,col 9)-(line 241,col 34)",
            "(line 244,col 9)-(line 244,col 38)",
            "(line 245,col 9)-(line 245,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.LegendGraphicTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/LegendGraphicTests.java",
        "signature": "org.jfree.chart.title.junit.LegendGraphicTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        Stroke s = new BasicStroke(1.23f);\n        LegendGraphic g1 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.black);\n        g1.setOutlineStroke(s);\n        LegendGraphic g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            g2 = (LegendGraphic) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertTrue(g1.equals(g2));\n\n    }",
        "begin_line": 252,
        "end_line": 276,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 42)",
            "(line 255,col 9)-(line 255,col 102)",
            "(line 256,col 9)-(line 256,col 31)",
            "(line 257,col 9)-(line 257,col 32)",
            "(line 259,col 9)-(line 273,col 9)",
            "(line 274,col 9)-(line 274,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.LegendTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/LegendTitleTests.java",
        "signature": "org.jfree.chart.title.junit.LegendTitleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LegendTitleTests.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.LegendTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/LegendTitleTests.java",
        "signature": "org.jfree.chart.title.junit.LegendTitleTests.LegendTitleTests(java.lang.String)",
        "snippet": "    public LegendTitleTests(String name) {\n        super(name);\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.LegendTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/LegendTitleTests.java",
        "signature": "org.jfree.chart.title.junit.LegendTitleTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYPlot plot1 = new XYPlot();\n        LegendTitle t1 = new LegendTitle(plot1);\n        LegendTitle t2 = new LegendTitle(plot1);\n        assertEquals(t1, t2);\n        \n        t1.setBackgroundPaint(\n            new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow)\n        );\n        assertFalse(t1.equals(t2));\n        t2.setBackgroundPaint(\n            new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow)\n        );\n        assertTrue(t1.equals(t2));\n        \n        t1.setLegendItemGraphicEdge(RectangleEdge.BOTTOM);\n        assertFalse(t1.equals(t2));\n        t2.setLegendItemGraphicEdge(RectangleEdge.BOTTOM);\n        assertTrue(t1.equals(t2));\n        \n        t1.setLegendItemGraphicAnchor(RectangleAnchor.BOTTOM_LEFT);\n        assertFalse(t1.equals(t2));\n        t2.setLegendItemGraphicAnchor(RectangleAnchor.BOTTOM_LEFT);\n        assertTrue(t1.equals(t2));\n        \n        t1.setLegendItemGraphicLocation(RectangleAnchor.TOP_LEFT);\n        assertFalse(t1.equals(t2));\n        t2.setLegendItemGraphicLocation(RectangleAnchor.TOP_LEFT);\n        assertTrue(t1.equals(t2));\n        \n        t1.setItemFont(new Font(\"Dialog\", Font.PLAIN, 19));\n        assertFalse(t1.equals(t2));\n        t2.setItemFont(new Font(\"Dialog\", Font.PLAIN, 19));\n        assertTrue(t1.equals(t2));\n    }",
        "begin_line": 91,
        "end_line": 125,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 36)",
            "(line 93,col 9)-(line 93,col 48)",
            "(line 94,col 9)-(line 94,col 48)",
            "(line 95,col 9)-(line 95,col 29)",
            "(line 97,col 9)-(line 99,col 10)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 103,col 10)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 106,col 9)-(line 106,col 58)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 58)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 111,col 9)-(line 111,col 67)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 113,col 67)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 116,col 9)-(line 116,col 66)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 118,col 66)",
            "(line 119,col 9)-(line 119,col 34)",
            "(line 121,col 9)-(line 121,col 59)",
            "(line 122,col 9)-(line 122,col 35)",
            "(line 123,col 9)-(line 123,col 59)",
            "(line 124,col 9)-(line 124,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.LegendTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/LegendTitleTests.java",
        "signature": "org.jfree.chart.title.junit.LegendTitleTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYPlot plot1 = new XYPlot();\n        LegendTitle t1 = new LegendTitle(plot1);\n        LegendTitle t2 = new LegendTitle(plot1);\n        assertTrue(t1.equals(t2));\n        int h1 = t1.hashCode();\n        int h2 = t2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 130,
        "end_line": 138,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 36)",
            "(line 132,col 9)-(line 132,col 48)",
            "(line 133,col 9)-(line 133,col 48)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 135,col 9)-(line 135,col 31)",
            "(line 136,col 9)-(line 136,col 31)",
            "(line 137,col 9)-(line 137,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.LegendTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/LegendTitleTests.java",
        "signature": "org.jfree.chart.title.junit.LegendTitleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYPlot plot = new XYPlot();\n        Rectangle2D bounds1 = new Rectangle2D.Double(10.0, 20.0, 30.0, 40.0);\n        LegendTitle t1 = new LegendTitle(plot);\n        t1.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, \n                4.0f, Color.yellow));\n        t1.setBounds(bounds1);\n        LegendTitle t2 = null;\n        try {\n            t2 = (LegendTitle) t1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(t1 != t2);\n        assertTrue(t1.getClass() == t2.getClass());\n        assertTrue(t1.equals(t2));\n        \n        // check independence\n        bounds1.setFrame(40.0, 30.0, 20.0, 10.0);\n        assertFalse(t1.equals(t2));\n        t2.setBounds(new Rectangle2D.Double(40.0, 30.0, 20.0, 10.0));\n        assertTrue(t1.equals(t2));\n    }",
        "begin_line": 143,
        "end_line": 166,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 35)",
            "(line 145,col 9)-(line 145,col 77)",
            "(line 146,col 9)-(line 146,col 47)",
            "(line 147,col 9)-(line 148,col 37)",
            "(line 149,col 9)-(line 149,col 30)",
            "(line 150,col 9)-(line 150,col 30)",
            "(line 151,col 9)-(line 156,col 9)",
            "(line 157,col 9)-(line 157,col 29)",
            "(line 158,col 9)-(line 158,col 51)",
            "(line 159,col 9)-(line 159,col 34)",
            "(line 162,col 9)-(line 162,col 49)",
            "(line 163,col 9)-(line 163,col 35)",
            "(line 164,col 9)-(line 164,col 69)",
            "(line 165,col 9)-(line 165,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.LegendTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/LegendTitleTests.java",
        "signature": "org.jfree.chart.title.junit.LegendTitleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYPlot plot = new XYPlot();\n        LegendTitle t1 = new LegendTitle(plot);\n        LegendTitle t2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(t1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            t2 = (LegendTitle) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertTrue(t1.equals(t2));\n        assertTrue(t2.getSources()[0].equals(plot));\n    }",
        "begin_line": 171,
        "end_line": 194,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 35)",
            "(line 174,col 9)-(line 174,col 47)",
            "(line 175,col 9)-(line 175,col 30)",
            "(line 177,col 9)-(line 191,col 9)",
            "(line 192,col 9)-(line 192,col 34)",
            "(line 193,col 9)-(line 193,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.PaintScaleLegendTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/PaintScaleLegendTests.java",
        "signature": "org.jfree.chart.title.junit.PaintScaleLegendTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PaintScaleLegendTests.class);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.PaintScaleLegendTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/PaintScaleLegendTests.java",
        "signature": "org.jfree.chart.title.junit.PaintScaleLegendTests.PaintScaleLegendTests(java.lang.String)",
        "snippet": "    public PaintScaleLegendTests(String name) {\n        super(name);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.PaintScaleLegendTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/PaintScaleLegendTests.java",
        "signature": "org.jfree.chart.title.junit.PaintScaleLegendTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        // default instances\n        PaintScaleLegend l1 = new PaintScaleLegend(new GrayPaintScale(), \n                new NumberAxis(\"X\"));\n        PaintScaleLegend l2 = new PaintScaleLegend(new GrayPaintScale(), \n                new NumberAxis(\"X\"));\n        assertTrue(l1.equals(l2));\n        assertTrue(l2.equals(l1));\n        \n        // paintScale\n        l1.setScale(new LookupPaintScale());\n        assertFalse(l1.equals(l2));\n        l2.setScale(new LookupPaintScale());\n        assertTrue(l1.equals(l2));\n        \n        // axis\n        l1.setAxis(new NumberAxis(\"Axis 2\"));\n        assertFalse(l1.equals(l2));\n        l2.setAxis(new NumberAxis(\"Axis 2\"));\n        assertTrue(l1.equals(l2));\n        \n        // axisLocation\n        l1.setAxisLocation(AxisLocation.BOTTOM_OR_RIGHT);\n        assertFalse(l1.equals(l2));\n        l2.setAxisLocation(AxisLocation.BOTTOM_OR_RIGHT);\n        assertTrue(l1.equals(l2));\n        \n        // axisOffset\n        l1.setAxisOffset(99.0);\n        assertFalse(l1.equals(l2));\n        l2.setAxisOffset(99.0);\n        assertTrue(l1.equals(l2));\n        \n        // stripWidth\n        l1.setStripWidth(99.0);\n        assertFalse(l1.equals(l2));\n        l2.setStripWidth(99.0);\n        assertTrue(l1.equals(l2));\n        \n        // stripOutlineVisible\n        l1.setStripOutlineVisible(!l1.isStripOutlineVisible());\n        assertFalse(l1.equals(l2));\n        l2.setStripOutlineVisible(l1.isStripOutlineVisible());\n        assertTrue(l1.equals(l2));\n        \n        // stripOutlinePaint\n        l1.setStripOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertFalse(l1.equals(l2));\n        l2.setStripOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(l1.equals(l2));\n        \n        // stripOutlineStroke\n        l1.setStripOutlineStroke(new BasicStroke(1.1f));\n        assertFalse(l1.equals(l2));\n        l2.setStripOutlineStroke(new BasicStroke(1.1f));\n        assertTrue(l1.equals(l2));\n        \n        // backgroundPaint\n        l1.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertFalse(l1.equals(l2));\n        l2.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(l1.equals(l2));\n            \n    }",
        "begin_line": 89,
        "end_line": 157,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 93,col 37)",
            "(line 94,col 9)-(line 95,col 37)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 100,col 9)-(line 100,col 44)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 44)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 106,col 9)-(line 106,col 45)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 45)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 112,col 9)-(line 112,col 57)",
            "(line 113,col 9)-(line 113,col 35)",
            "(line 114,col 9)-(line 114,col 57)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 118,col 9)-(line 118,col 31)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 120,col 31)",
            "(line 121,col 9)-(line 121,col 34)",
            "(line 124,col 9)-(line 124,col 31)",
            "(line 125,col 9)-(line 125,col 35)",
            "(line 126,col 9)-(line 126,col 31)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 130,col 9)-(line 130,col 63)",
            "(line 131,col 9)-(line 131,col 35)",
            "(line 132,col 9)-(line 132,col 62)",
            "(line 133,col 9)-(line 133,col 34)",
            "(line 136,col 9)-(line 137,col 41)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 140,col 41)",
            "(line 141,col 9)-(line 141,col 34)",
            "(line 144,col 9)-(line 144,col 56)",
            "(line 145,col 9)-(line 145,col 35)",
            "(line 146,col 9)-(line 146,col 56)",
            "(line 147,col 9)-(line 147,col 34)",
            "(line 150,col 9)-(line 151,col 41)",
            "(line 152,col 9)-(line 152,col 35)",
            "(line 153,col 9)-(line 154,col 41)",
            "(line 155,col 9)-(line 155,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.PaintScaleLegendTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/PaintScaleLegendTests.java",
        "signature": "org.jfree.chart.title.junit.PaintScaleLegendTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        PaintScaleLegend l1 = new PaintScaleLegend(new GrayPaintScale(), \n                new NumberAxis(\"X\"));\n        PaintScaleLegend l2 = new PaintScaleLegend(new GrayPaintScale(), \n                new NumberAxis(\"X\"));\n        assertTrue(l1.equals(l2));\n        int h1 = l1.hashCode();\n        int h2 = l2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 162,
        "end_line": 171,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 164,col 37)",
            "(line 165,col 9)-(line 166,col 37)",
            "(line 167,col 9)-(line 167,col 34)",
            "(line 168,col 9)-(line 168,col 31)",
            "(line 169,col 9)-(line 169,col 31)",
            "(line 170,col 9)-(line 170,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.PaintScaleLegendTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/PaintScaleLegendTests.java",
        "signature": "org.jfree.chart.title.junit.PaintScaleLegendTests.testCloning()",
        "snippet": "    public void testCloning() {\n        PaintScaleLegend l1 = new PaintScaleLegend(new GrayPaintScale(), \n                new NumberAxis(\"X\"));\n        PaintScaleLegend l2 = null;\n        try {\n            l2 = (PaintScaleLegend) l1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(l1 != l2);\n        assertTrue(l1.getClass() == l2.getClass());\n        assertTrue(l1.equals(l2));\n    }",
        "begin_line": 176,
        "end_line": 189,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 177,col 9)-(line 178,col 37)",
            "(line 179,col 9)-(line 179,col 35)",
            "(line 180,col 9)-(line 185,col 9)",
            "(line 186,col 9)-(line 186,col 29)",
            "(line 187,col 9)-(line 187,col 51)",
            "(line 188,col 9)-(line 188,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.PaintScaleLegendTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/PaintScaleLegendTests.java",
        "signature": "org.jfree.chart.title.junit.PaintScaleLegendTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        PaintScaleLegend l1 = new PaintScaleLegend(new GrayPaintScale(), \n                new NumberAxis(\"X\"));\n        PaintScaleLegend l2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(l1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            l2 = (PaintScaleLegend) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(l1, l2);\n    }",
        "begin_line": 194,
        "end_line": 213,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 195,col 9)-(line 196,col 37)",
            "(line 197,col 9)-(line 197,col 35)",
            "(line 198,col 9)-(line 211,col 9)",
            "(line 212,col 9)-(line 212,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.DateTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/DateTitleTests.java",
        "signature": "org.jfree.chart.title.junit.DateTitleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DateTitleTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.DateTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/DateTitleTests.java",
        "signature": "org.jfree.chart.title.junit.DateTitleTests.DateTitleTests(java.lang.String)",
        "snippet": "    public DateTitleTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.DateTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/DateTitleTests.java",
        "signature": "org.jfree.chart.title.junit.DateTitleTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DateTitle t1 = new DateTitle();\n        DateTitle t2 = new DateTitle();\n        assertEquals(t1, t2);\n        \n        t1.setText(\"Test 1\");\n        assertFalse(t1.equals(t2));\n        t2.setText(\"Test 1\");\n        assertTrue(t1.equals(t2));\n        \n        Font f = new Font(\"SansSerif\", Font.PLAIN, 15);\n        t1.setFont(f);\n        assertFalse(t1.equals(t2));\n        t2.setFont(f);\n        assertTrue(t1.equals(t2));\n        \n        t1.setPaint(Color.blue);\n        assertFalse(t1.equals(t2));\n        t2.setPaint(Color.blue);\n        assertTrue(t1.equals(t2));\n        \n        t1.setBackgroundPaint(Color.blue);\n        assertFalse(t1.equals(t2));\n        t2.setBackgroundPaint(Color.blue);\n        assertTrue(t1.equals(t2));\n        \n    }",
        "begin_line": 84,
        "end_line": 110,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 39)",
            "(line 86,col 9)-(line 86,col 39)",
            "(line 87,col 9)-(line 87,col 29)",
            "(line 89,col 9)-(line 89,col 29)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 29)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 94,col 55)",
            "(line 95,col 9)-(line 95,col 22)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 22)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 100,col 9)-(line 100,col 32)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 32)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 105,col 9)-(line 105,col 42)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 107,col 42)",
            "(line 108,col 9)-(line 108,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.DateTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/DateTitleTests.java",
        "signature": "org.jfree.chart.title.junit.DateTitleTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        DateTitle t1 = new DateTitle();\n        DateTitle t2 = new DateTitle();\n        assertTrue(t1.equals(t2));\n        int h1 = t1.hashCode();\n        int h2 = t2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 115,
        "end_line": 122,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 39)",
            "(line 117,col 9)-(line 117,col 39)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 119,col 9)-(line 119,col 31)",
            "(line 120,col 9)-(line 120,col 31)",
            "(line 121,col 9)-(line 121,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.DateTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/DateTitleTests.java",
        "signature": "org.jfree.chart.title.junit.DateTitleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DateTitle t1 = new DateTitle();\n        DateTitle t2 = null;\n        try {\n            t2 = (DateTitle) t1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"DateTitleTests.testCloning: failed to clone.\");\n        }\n        assertTrue(t1 != t2);\n        assertTrue(t1.getClass() == t2.getClass());\n        assertTrue(t1.equals(t2));\n    }",
        "begin_line": 127,
        "end_line": 139,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 39)",
            "(line 129,col 9)-(line 129,col 28)",
            "(line 130,col 9)-(line 135,col 9)",
            "(line 136,col 9)-(line 136,col 29)",
            "(line 137,col 9)-(line 137,col 51)",
            "(line 138,col 9)-(line 138,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.DateTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/DateTitleTests.java",
        "signature": "org.jfree.chart.title.junit.DateTitleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DateTitle t1 = new DateTitle();\n        DateTitle t2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(t1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            t2 = (DateTitle) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(t1, t2);\n\n    }",
        "begin_line": 144,
        "end_line": 166,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 39)",
            "(line 147,col 9)-(line 147,col 28)",
            "(line 149,col 9)-(line 163,col 9)",
            "(line 164,col 9)-(line 164,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.ImageTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/ImageTitleTests.java",
        "signature": "org.jfree.chart.title.junit.ImageTitleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ImageTitleTests.class);\n    }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.ImageTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/ImageTitleTests.java",
        "signature": "org.jfree.chart.title.junit.ImageTitleTests.ImageTitleTests(java.lang.String)",
        "snippet": "    public ImageTitleTests(String name) {\n        super(name);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.ImageTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/ImageTitleTests.java",
        "signature": "org.jfree.chart.title.junit.ImageTitleTests.testEquals()",
        "snippet": "    public void testEquals() {\n        ImageTitle t1 = new ImageTitle(JFreeChart.INFO.getLogo());\n        ImageTitle t2 = new ImageTitle(JFreeChart.INFO.getLogo());\n        assertEquals(t1, t2);        \n    }",
        "begin_line": 76,
        "end_line": 80,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 66)",
            "(line 78,col 9)-(line 78,col 66)",
            "(line 79,col 9)-(line 79,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.ImageTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/ImageTitleTests.java",
        "signature": "org.jfree.chart.title.junit.ImageTitleTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        ImageTitle t1 = new ImageTitle(JFreeChart.INFO.getLogo());\n        ImageTitle t2 = new ImageTitle(JFreeChart.INFO.getLogo());\n        assertTrue(t1.equals(t2));\n        int h1 = t1.hashCode();\n        int h2 = t2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 85,
        "end_line": 92,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 66)",
            "(line 87,col 9)-(line 87,col 66)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 89,col 9)-(line 89,col 31)",
            "(line 90,col 9)-(line 90,col 31)",
            "(line 91,col 9)-(line 91,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.ImageTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/ImageTitleTests.java",
        "signature": "org.jfree.chart.title.junit.ImageTitleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        ImageTitle t1 = new ImageTitle(JFreeChart.INFO.getLogo());\n        ImageTitle t2 = null;\n        try {\n            t2 = (ImageTitle) t1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"ImageTitleTests.testCloning: failed to clone.\");\n        }\n        assertTrue(t1 != t2);\n        assertTrue(t1.getClass() == t2.getClass());\n        assertTrue(t1.equals(t2));\n    }",
        "begin_line": 97,
        "end_line": 109,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 66)",
            "(line 99,col 9)-(line 99,col 29)",
            "(line 100,col 9)-(line 105,col 9)",
            "(line 106,col 9)-(line 106,col 29)",
            "(line 107,col 9)-(line 107,col 51)",
            "(line 108,col 9)-(line 108,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.ImageTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/ImageTitleTests.java",
        "signature": "org.jfree.chart.title.junit.ImageTitleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        // TODO: add serialization support for images\n\n    }",
        "begin_line": 114,
        "end_line": 118,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.chart.title.junit.ImageTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/ImageTitleTests.java",
        "signature": "org.jfree.chart.title.junit.ImageTitleTests.testWidthAndHeight()",
        "snippet": "    public void testWidthAndHeight() {\n        ImageTitle t1 = new ImageTitle(JFreeChart.INFO.getLogo());\n        assertEquals(100, t1.getWidth(), EPSILON);\n        assertEquals(100, t1.getHeight(), EPSILON);\n    }",
        "begin_line": 125,
        "end_line": 129,
        "comment": "\n     * Check the width and height.\n     ",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 66)",
            "(line 127,col 9)-(line 127,col 50)",
            "(line 128,col 9)-(line 128,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.TitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/TitleTests.java",
        "signature": "org.jfree.chart.title.junit.TitleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TitleTests.class);\n    }",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.TitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/TitleTests.java",
        "signature": "org.jfree.chart.title.junit.TitleTests.TitleTests(java.lang.String)",
        "snippet": "    public TitleTests(String name) {\n        super(name);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.TitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/TitleTests.java",
        "signature": "org.jfree.chart.title.junit.TitleTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        // use the TextTitle class because it is a concrete subclass\n        Title t1 = new TextTitle();\n        Title t2 = new TextTitle();\n        assertEquals(t1, t2);\n        \n        t1.setPosition(RectangleEdge.LEFT);\n        assertFalse(t1.equals(t2));\n        t2.setPosition(RectangleEdge.LEFT);\n        assertTrue(t1.equals(t2));\n        \n        t1.setHorizontalAlignment(HorizontalAlignment.RIGHT);\n        assertFalse(t1.equals(t2));\n        t2.setHorizontalAlignment(HorizontalAlignment.RIGHT);\n        assertTrue(t1.equals(t2));\n        \n        t1.setVerticalAlignment(VerticalAlignment.BOTTOM);\n        assertFalse(t1.equals(t2));\n        t2.setVerticalAlignment(VerticalAlignment.BOTTOM);\n        assertTrue(t1.equals(t2));\n        \n    }",
        "begin_line": 80,
        "end_line": 102,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 35)",
            "(line 84,col 9)-(line 84,col 35)",
            "(line 85,col 9)-(line 85,col 29)",
            "(line 87,col 9)-(line 87,col 43)",
            "(line 88,col 9)-(line 88,col 35)",
            "(line 89,col 9)-(line 89,col 43)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 92,col 9)-(line 92,col 61)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 94,col 61)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 97,col 9)-(line 97,col 58)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 58)",
            "(line 100,col 9)-(line 100,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.TitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/TitleTests.java",
        "signature": "org.jfree.chart.title.junit.TitleTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        TextTitle t1 = new TextTitle();\n        TextTitle t2 = new TextTitle();\n        assertTrue(t1.equals(t2));\n        int h1 = t1.hashCode();\n        int h2 = t2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 107,
        "end_line": 114,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 39)",
            "(line 109,col 9)-(line 109,col 39)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 111,col 9)-(line 111,col 31)",
            "(line 112,col 9)-(line 112,col 31)",
            "(line 113,col 9)-(line 113,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.TitlePackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/TitlePackageTests.java",
        "signature": "org.jfree.chart.title.junit.TitlePackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.chart.title\");\n        suite.addTestSuite(CompositeTitleTests.class);\n        suite.addTestSuite(DateTitleTests.class);\n        suite.addTestSuite(ImageTitleTests.class);\n        suite.addTestSuite(LegendGraphicTests.class);\n        suite.addTestSuite(LegendTitleTests.class);\n        suite.addTestSuite(PaintScaleLegendTests.class);\n        suite.addTestSuite(TextTitleTests.class);\n        suite.addTestSuite(TitleTests.class);\n        return suite;\n    }",
        "begin_line": 62,
        "end_line": 73,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 65)",
            "(line 64,col 9)-(line 64,col 54)",
            "(line 65,col 9)-(line 65,col 49)",
            "(line 66,col 9)-(line 66,col 50)",
            "(line 67,col 9)-(line 67,col 53)",
            "(line 68,col 9)-(line 68,col 51)",
            "(line 69,col 9)-(line 69,col 56)",
            "(line 70,col 9)-(line 70,col 49)",
            "(line 71,col 9)-(line 71,col 45)",
            "(line 72,col 9)-(line 72,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.TitlePackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/TitlePackageTests.java",
        "signature": "org.jfree.chart.title.junit.TitlePackageTests.TitlePackageTests(java.lang.String)",
        "snippet": "    public TitlePackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the suite name.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.TitlePackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/TitlePackageTests.java",
        "signature": "org.jfree.chart.title.junit.TitlePackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.TextTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/TextTitleTests.java",
        "signature": "org.jfree.chart.title.junit.TextTitleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TextTitleTests.class);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.TextTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/TextTitleTests.java",
        "signature": "org.jfree.chart.title.junit.TextTitleTests.TextTitleTests(java.lang.String)",
        "snippet": "    public TextTitleTests(String name) {\n        super(name);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.TextTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/TextTitleTests.java",
        "signature": "org.jfree.chart.title.junit.TextTitleTests.testEquals()",
        "snippet": "    public void testEquals() {\n        TextTitle t1 = new TextTitle();\n        TextTitle t2 = new TextTitle();\n        assertEquals(t1, t2);\n        \n        t1.setText(\"Test 1\");\n        assertFalse(t1.equals(t2));\n        t2.setText(\"Test 1\");\n        assertTrue(t1.equals(t2));\n        \n        Font f = new Font(\"SansSerif\", Font.PLAIN, 15);\n        t1.setFont(f);\n        assertFalse(t1.equals(t2));\n        t2.setFont(f);\n        assertTrue(t1.equals(t2));\n        \n        t1.setTextAlignment(HorizontalAlignment.RIGHT);\n        assertFalse(t1.equals(t2));\n        t2.setTextAlignment(HorizontalAlignment.RIGHT);\n        assertTrue(t1.equals(t2));\n        \n        // paint\n        t1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue));\n        assertFalse(t1.equals(t2));\n        t2.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue));\n        assertTrue(t1.equals(t2));\n        \n        // backgroundPaint\n        t1.setBackgroundPaint(new GradientPaint(4.0f, 3.0f, Color.red, \n                2.0f, 1.0f, Color.blue));\n        assertFalse(t1.equals(t2));\n        t2.setBackgroundPaint(new GradientPaint(4.0f, 3.0f, Color.red, \n                2.0f, 1.0f, Color.blue));\n        assertTrue(t1.equals(t2));\n        \n    }",
        "begin_line": 89,
        "end_line": 126,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 39)",
            "(line 91,col 9)-(line 91,col 39)",
            "(line 92,col 9)-(line 92,col 29)",
            "(line 94,col 9)-(line 94,col 29)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 29)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 99,col 9)-(line 99,col 55)",
            "(line 100,col 9)-(line 100,col 22)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 22)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 105,col 9)-(line 105,col 55)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 107,col 55)",
            "(line 108,col 9)-(line 108,col 34)",
            "(line 111,col 9)-(line 112,col 41)",
            "(line 113,col 9)-(line 113,col 35)",
            "(line 114,col 9)-(line 115,col 41)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 119,col 9)-(line 120,col 41)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 123,col 41)",
            "(line 124,col 9)-(line 124,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.TextTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/TextTitleTests.java",
        "signature": "org.jfree.chart.title.junit.TextTitleTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        TextTitle t1 = new TextTitle();\n        TextTitle t2 = new TextTitle();\n        assertTrue(t1.equals(t2));\n        int h1 = t1.hashCode();\n        int h2 = t2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 131,
        "end_line": 138,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 39)",
            "(line 133,col 9)-(line 133,col 39)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 135,col 9)-(line 135,col 31)",
            "(line 136,col 9)-(line 136,col 31)",
            "(line 137,col 9)-(line 137,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.TextTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/TextTitleTests.java",
        "signature": "org.jfree.chart.title.junit.TextTitleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        TextTitle t1 = new TextTitle();\n        TextTitle t2 = null;\n        try {\n            t2 = (TextTitle) t1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"TextTitleTests.testCloning: failed to clone.\");\n        }\n        assertTrue(t1 != t2);\n        assertTrue(t1.getClass() == t2.getClass());\n        assertTrue(t1.equals(t2));\n    }",
        "begin_line": 143,
        "end_line": 155,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 39)",
            "(line 145,col 9)-(line 145,col 28)",
            "(line 146,col 9)-(line 151,col 9)",
            "(line 152,col 9)-(line 152,col 29)",
            "(line 153,col 9)-(line 153,col 51)",
            "(line 154,col 9)-(line 154,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.TextTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/TextTitleTests.java",
        "signature": "org.jfree.chart.title.junit.TextTitleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        TextTitle t1 = new TextTitle(\"Test\");\n        TextTitle t2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(t1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            t2 = (TextTitle) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(t1, t2);\n\n    }",
        "begin_line": 160,
        "end_line": 182,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 45)",
            "(line 163,col 9)-(line 163,col 28)",
            "(line 165,col 9)-(line 179,col 9)",
            "(line 180,col 9)-(line 180,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.CompositeTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/CompositeTitleTests.java",
        "signature": "org.jfree.chart.title.junit.CompositeTitleTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CompositeTitleTests.class);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.CompositeTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/CompositeTitleTests.java",
        "signature": "org.jfree.chart.title.junit.CompositeTitleTests.CompositeTitleTests(java.lang.String)",
        "snippet": "    public CompositeTitleTests(String name) {\n        super(name);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.CompositeTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/CompositeTitleTests.java",
        "signature": "org.jfree.chart.title.junit.CompositeTitleTests.testEquals()",
        "snippet": "    public void testEquals() {\n        CompositeTitle t1 = new CompositeTitle(new BlockContainer());\n        CompositeTitle t2 = new CompositeTitle(new BlockContainer());\n        assertEquals(t1, t2);\n        assertEquals(t2, t1);\n        \n        // margin\n        t1.setMargin(new RectangleInsets(1.0, 2.0, 3.0, 4.0));\n        assertFalse(t1.equals(t2));\n        t2.setMargin(new RectangleInsets(1.0, 2.0, 3.0, 4.0));\n        assertTrue(t1.equals(t2));\n        \n        // frame\n        t1.setFrame(new BlockBorder(Color.red));\n        assertFalse(t1.equals(t2));\n        t2.setFrame(new BlockBorder(Color.red));\n        assertTrue(t1.equals(t2));\n       \n        // padding\n        t1.setPadding(new RectangleInsets(1.0, 2.0, 3.0, 4.0));\n        assertFalse(t1.equals(t2));\n        t2.setPadding(new RectangleInsets(1.0, 2.0, 3.0, 4.0));\n        assertTrue(t1.equals(t2));\n        \n        // contained titles\n        t1.getContainer().add(new TextTitle(\"T1\"));\n        assertFalse(t1.equals(t2));\n        t2.getContainer().add(new TextTitle(\"T1\"));\n        assertTrue(t1.equals(t2));\n        \n    }",
        "begin_line": 89,
        "end_line": 119,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 69)",
            "(line 91,col 9)-(line 91,col 69)",
            "(line 92,col 9)-(line 92,col 29)",
            "(line 93,col 9)-(line 93,col 29)",
            "(line 96,col 9)-(line 96,col 62)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 62)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 102,col 9)-(line 102,col 48)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 48)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 108,col 9)-(line 108,col 63)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 110,col 63)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 114,col 9)-(line 114,col 51)",
            "(line 115,col 9)-(line 115,col 35)",
            "(line 116,col 9)-(line 116,col 51)",
            "(line 117,col 9)-(line 117,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.CompositeTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/CompositeTitleTests.java",
        "signature": "org.jfree.chart.title.junit.CompositeTitleTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        CompositeTitle t1 = new CompositeTitle(new BlockContainer());\n        t1.getContainer().add(new TextTitle(\"T1\"));\n        CompositeTitle t2 = new CompositeTitle(new BlockContainer());\n        t2.getContainer().add(new TextTitle(\"T1\"));\n        assertTrue(t1.equals(t2));\n        int h1 = t1.hashCode();\n        int h2 = t2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 124,
        "end_line": 133,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 69)",
            "(line 126,col 9)-(line 126,col 51)",
            "(line 127,col 9)-(line 127,col 69)",
            "(line 128,col 9)-(line 128,col 51)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 130,col 9)-(line 130,col 31)",
            "(line 131,col 9)-(line 131,col 31)",
            "(line 132,col 9)-(line 132,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.CompositeTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/CompositeTitleTests.java",
        "signature": "org.jfree.chart.title.junit.CompositeTitleTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CompositeTitle t1 = new CompositeTitle(new BlockContainer());\n        t1.getContainer().add(new TextTitle(\"T1\"));\n        CompositeTitle t2 = null;\n        try {\n            t2 = (CompositeTitle) t1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            fail(e.toString());\n        }\n        assertTrue(t1 != t2);\n        assertTrue(t1.getClass() == t2.getClass());\n        assertTrue(t1.equals(t2));\n    }",
        "begin_line": 138,
        "end_line": 151,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 69)",
            "(line 140,col 9)-(line 140,col 51)",
            "(line 141,col 9)-(line 141,col 33)",
            "(line 142,col 9)-(line 147,col 9)",
            "(line 148,col 9)-(line 148,col 29)",
            "(line 149,col 9)-(line 149,col 51)",
            "(line 150,col 9)-(line 150,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.title.junit.CompositeTitleTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/title/junit/CompositeTitleTests.java",
        "signature": "org.jfree.chart.title.junit.CompositeTitleTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        CompositeTitle t1 = new CompositeTitle(new BlockContainer());\n        t1.getContainer().add(new TextTitle(\"T1\"));\n        CompositeTitle t2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(t1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            t2 = (CompositeTitle) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(t1, t2);\n    }",
        "begin_line": 156,
        "end_line": 176,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 69)",
            "(line 158,col 9)-(line 158,col 51)",
            "(line 159,col 9)-(line 159,col 33)",
            "(line 160,col 9)-(line 174,col 9)",
            "(line 175,col 9)-(line 175,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.StatisticsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/StatisticsTests.java",
        "signature": "org.jfree.data.statistics.junit.StatisticsTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StatisticsTests.class);\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.StatisticsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/StatisticsTests.java",
        "signature": "org.jfree.data.statistics.junit.StatisticsTests.StatisticsTests(java.lang.String)",
        "snippet": "    public StatisticsTests(String name) {\n        super(name);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.StatisticsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/StatisticsTests.java",
        "signature": "org.jfree.data.statistics.junit.StatisticsTests.testCalculateMean_Array()",
        "snippet": "    public void testCalculateMean_Array() {\n        \n        // try null array\n        boolean pass = false;\n        try {\n            Statistics.calculateMean((Number[]) null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            Statistics.calculateMean((Number[]) null, false);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try an array containing no items\n        assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0])));\n        assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0], \n                false)));\n        \n        // try an array containing a single Number\n        Number[] values = new Number[] { new Double(1.0) };\n        assertEquals(1.0, Statistics.calculateMean(values), EPSILON);\n        assertEquals(1.0, Statistics.calculateMean(values, true), EPSILON);\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n        \n        // try an array containing a single Number and a null\n        values = new Number[] { new Double(1.0), null };\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n\n        // try an array containing a single Number and a NaN\n        values = new Number[] { new Double(1.0), new Double(Double.NaN) };\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n    }",
        "begin_line": 82,
        "end_line": 125,
        "comment": "\n     * Some checks for the calculateMean(Number[]) and \n     * calculateMean(Number[], boolean) methods.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 29)",
            "(line 86,col 9)-(line 91,col 9)",
            "(line 92,col 9)-(line 92,col 25)",
            "(line 94,col 9)-(line 94,col 21)",
            "(line 95,col 9)-(line 100,col 9)",
            "(line 101,col 9)-(line 101,col 25)",
            "(line 104,col 9)-(line 104,col 74)",
            "(line 105,col 9)-(line 106,col 25)",
            "(line 109,col 9)-(line 109,col 59)",
            "(line 110,col 9)-(line 110,col 69)",
            "(line 111,col 9)-(line 111,col 75)",
            "(line 112,col 9)-(line 112,col 76)",
            "(line 115,col 9)-(line 115,col 56)",
            "(line 116,col 9)-(line 116,col 67)",
            "(line 117,col 9)-(line 117,col 73)",
            "(line 118,col 9)-(line 118,col 76)",
            "(line 121,col 9)-(line 121,col 74)",
            "(line 122,col 9)-(line 122,col 67)",
            "(line 123,col 9)-(line 123,col 73)",
            "(line 124,col 9)-(line 124,col 76)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.StatisticsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/StatisticsTests.java",
        "signature": "org.jfree.data.statistics.junit.StatisticsTests.testCalculateMean_Collection()",
        "snippet": "    public void testCalculateMean_Collection() {\n        \n        // try a null collection\n        boolean pass = false;\n        try {\n            Statistics.calculateMean((Collection) null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            Statistics.calculateMean((Collection) null, false);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try an empty collection\n        List values = new ArrayList();\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, false)));\n        \n        // try a collection with a single number\n        values.add(new Double(9.0));\n        assertEquals(9.0, Statistics.calculateMean(values), EPSILON);\n        assertEquals(9.0, Statistics.calculateMean(values, true), EPSILON);\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n        \n        // try a collection with a single number plus a null\n        values.add(null);\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n\n        // try a collection with a single number plus a NaN\n        values.clear();\n        values.add(new Double(9.0));\n        values.add(new Double(Double.NaN));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n\n        // try a collection with several numbers\n        values = new ArrayList();\n        values.add(new Double(9.0));\n        values.add(new Double(3.0));\n        values.add(new Double(2.0));\n        values.add(new Double(2.0));\n        double mean = Statistics.calculateMean(values);\n        assertEquals(4.0, mean, EPSILON);\n        \n        // a Collection containing a NaN will return Double.NaN for the result\n        values.add(new Double(Double.NaN));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n    }",
        "begin_line": 131,
        "end_line": 190,
        "comment": "\n     * Some checks for the calculateMean(Collection) and \n     * calculateMean(Collection, boolean) methods.\n     ",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 29)",
            "(line 135,col 9)-(line 140,col 9)",
            "(line 141,col 9)-(line 141,col 25)",
            "(line 143,col 9)-(line 143,col 21)",
            "(line 144,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 150,col 25)",
            "(line 153,col 9)-(line 153,col 38)",
            "(line 154,col 9)-(line 154,col 67)",
            "(line 155,col 9)-(line 155,col 73)",
            "(line 156,col 9)-(line 156,col 74)",
            "(line 159,col 9)-(line 159,col 36)",
            "(line 160,col 9)-(line 160,col 69)",
            "(line 161,col 9)-(line 161,col 75)",
            "(line 162,col 9)-(line 162,col 76)",
            "(line 165,col 9)-(line 165,col 25)",
            "(line 166,col 9)-(line 166,col 67)",
            "(line 167,col 9)-(line 167,col 73)",
            "(line 168,col 9)-(line 168,col 76)",
            "(line 171,col 9)-(line 171,col 23)",
            "(line 172,col 9)-(line 172,col 36)",
            "(line 173,col 9)-(line 173,col 43)",
            "(line 174,col 9)-(line 174,col 67)",
            "(line 175,col 9)-(line 175,col 73)",
            "(line 176,col 9)-(line 176,col 76)",
            "(line 179,col 9)-(line 179,col 33)",
            "(line 180,col 9)-(line 180,col 36)",
            "(line 181,col 9)-(line 181,col 36)",
            "(line 182,col 9)-(line 182,col 36)",
            "(line 183,col 9)-(line 183,col 36)",
            "(line 184,col 9)-(line 184,col 55)",
            "(line 185,col 9)-(line 185,col 41)",
            "(line 188,col 9)-(line 188,col 43)",
            "(line 189,col 9)-(line 189,col 67)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.StatisticsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/StatisticsTests.java",
        "signature": "org.jfree.data.statistics.junit.StatisticsTests.testCalculateMedian()",
        "snippet": "    public void testCalculateMedian() {\n        \n        // check null list\n        assertTrue(Double.isNaN(Statistics.calculateMedian(null, false)));\n        assertTrue(Double.isNaN(Statistics.calculateMedian(null, true)));\n        \n        // check empty list\n        List list = new ArrayList();\n        assertTrue(Double.isNaN(Statistics.calculateMedian(list, false)));\n        assertTrue(Double.isNaN(Statistics.calculateMedian(list, true)));\n        \n        // check list containing null\n        list.add(null);\n        boolean pass = false;\n        try {\n            Statistics.calculateMedian(list, false);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            Statistics.calculateMedian(list, true);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        // check a list containing a non-Number object\n        list.clear();\n        list.add(\"Not a number\");\n        pass = false;\n        try {\n            Statistics.calculateMedian(list, false);\n        }\n        catch (ClassCastException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            Statistics.calculateMedian(list, true);\n        }\n        catch (ClassCastException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n    }",
        "begin_line": 197,
        "end_line": 249,
        "comment": "\n     * Some checks for the calculateMedian(List, boolean) method.\n     ",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 74)",
            "(line 201,col 9)-(line 201,col 73)",
            "(line 204,col 9)-(line 204,col 36)",
            "(line 205,col 9)-(line 205,col 74)",
            "(line 206,col 9)-(line 206,col 73)",
            "(line 209,col 9)-(line 209,col 23)",
            "(line 210,col 9)-(line 210,col 29)",
            "(line 211,col 9)-(line 216,col 9)",
            "(line 217,col 9)-(line 217,col 25)",
            "(line 219,col 9)-(line 219,col 21)",
            "(line 220,col 9)-(line 225,col 9)",
            "(line 226,col 9)-(line 226,col 25)",
            "(line 229,col 9)-(line 229,col 21)",
            "(line 230,col 9)-(line 230,col 33)",
            "(line 231,col 9)-(line 231,col 21)",
            "(line 232,col 9)-(line 237,col 9)",
            "(line 238,col 9)-(line 238,col 25)",
            "(line 240,col 9)-(line 240,col 21)",
            "(line 241,col 9)-(line 246,col 9)",
            "(line 247,col 9)-(line 247,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.StatisticsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/StatisticsTests.java",
        "signature": "org.jfree.data.statistics.junit.StatisticsTests.testCalculateMedian1()",
        "snippet": "    public void testCalculateMedian1() {\n        List values = new ArrayList();\n        values.add(new Double(1.0));\n        double median = Statistics.calculateMedian(values);\n        assertEquals(1.0, median, 0.0000001);\n    }",
        "begin_line": 254,
        "end_line": 259,
        "comment": "\n     * A test for the calculateMedian() method.\n     ",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 38)",
            "(line 256,col 9)-(line 256,col 36)",
            "(line 257,col 9)-(line 257,col 59)",
            "(line 258,col 9)-(line 258,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.StatisticsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/StatisticsTests.java",
        "signature": "org.jfree.data.statistics.junit.StatisticsTests.testCalculateMedian2()",
        "snippet": "    public void testCalculateMedian2() {\n        List values = new ArrayList();\n        values.add(new Double(2.0));\n        values.add(new Double(1.0));\n        double median = Statistics.calculateMedian(values);\n        assertEquals(1.5, median, 0.0000001);\n    }",
        "begin_line": 264,
        "end_line": 270,
        "comment": "\n     * A test for the calculateMedian() method.\n     ",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 38)",
            "(line 266,col 9)-(line 266,col 36)",
            "(line 267,col 9)-(line 267,col 36)",
            "(line 268,col 9)-(line 268,col 59)",
            "(line 269,col 9)-(line 269,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.StatisticsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/StatisticsTests.java",
        "signature": "org.jfree.data.statistics.junit.StatisticsTests.testCalculateMedian3()",
        "snippet": "    public void testCalculateMedian3() {\n        List values = new ArrayList();\n        values.add(new Double(1.0));\n        values.add(new Double(2.0));\n        values.add(new Double(3.0));\n        values.add(new Double(6.0));\n        values.add(new Double(5.0));\n        values.add(new Double(4.0));\n        double median = Statistics.calculateMedian(values);\n        assertEquals(3.5, median, 0.0000001);\n    }",
        "begin_line": 275,
        "end_line": 285,
        "comment": "\n     * A test for the calculateMedian() method.\n     ",
        "child_ranges": [
            "(line 276,col 9)-(line 276,col 38)",
            "(line 277,col 9)-(line 277,col 36)",
            "(line 278,col 9)-(line 278,col 36)",
            "(line 279,col 9)-(line 279,col 36)",
            "(line 280,col 9)-(line 280,col 36)",
            "(line 281,col 9)-(line 281,col 36)",
            "(line 282,col 9)-(line 282,col 36)",
            "(line 283,col 9)-(line 283,col 59)",
            "(line 284,col 9)-(line 284,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.StatisticsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/StatisticsTests.java",
        "signature": "org.jfree.data.statistics.junit.StatisticsTests.testCalculateMedian4()",
        "snippet": "    public void testCalculateMedian4() {\n        List values = new ArrayList();\n        values.add(new Double(7.0));\n        values.add(new Double(2.0));\n        values.add(new Double(3.0));\n        values.add(new Double(5.0));\n        values.add(new Double(4.0));\n        values.add(new Double(6.0));\n        values.add(new Double(1.0));\n        double median = Statistics.calculateMedian(values);\n        assertEquals(4.0, median, 0.0000001);\n    }",
        "begin_line": 290,
        "end_line": 301,
        "comment": "\n     * A test for the calculateMedian() method.\n     ",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 38)",
            "(line 292,col 9)-(line 292,col 36)",
            "(line 293,col 9)-(line 293,col 36)",
            "(line 294,col 9)-(line 294,col 36)",
            "(line 295,col 9)-(line 295,col 36)",
            "(line 296,col 9)-(line 296,col 36)",
            "(line 297,col 9)-(line 297,col 36)",
            "(line 298,col 9)-(line 298,col 36)",
            "(line 299,col 9)-(line 299,col 59)",
            "(line 300,col 9)-(line 300,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.StatisticsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/StatisticsTests.java",
        "signature": "org.jfree.data.statistics.junit.StatisticsTests.testCalculateMedian5()",
        "snippet": "    public void testCalculateMedian5() {\n        List values = new ArrayList();\n        values.add(new Double(11.228692993861783));\n        values.add(new Double(11.30823353859889));\n        values.add(new Double(11.75312904769314));\n        values.add(new Double(11.825102897465314));\n        values.add(new Double(10.184252778401783));\n        values.add(new Double(12.207951828057766));\n        values.add(new Double(10.68841994040566));\n        values.add(new Double(12.099522004479438));\n        values.add(new Double(11.508874945056881));\n        values.add(new Double(12.052517729558513));\n        values.add(new Double(12.401481645578734));\n        values.add(new Double(12.185377793028543));\n        values.add(new Double(10.666372951930315));\n        values.add(new Double(11.680978041499548));\n        values.add(new Double(11.06528277406718));\n        values.add(new Double(11.36876492904596));\n        values.add(new Double(11.927565516175939));\n        values.add(new Double(11.39307785978655));\n        values.add(new Double(11.989603679523857));\n        values.add(new Double(12.009834360354864));\n        values.add(new Double(10.653351822461559));\n        values.add(new Double(11.851776254376754));\n        values.add(new Double(11.045441544755946));\n        values.add(new Double(11.993674040560624));\n        values.add(new Double(12.898219965238944));\n        values.add(new Double(11.97095782819647));\n        values.add(new Double(11.73234406745488));\n        values.add(new Double(11.649006017243991));\n        values.add(new Double(12.20549704915365));\n        values.add(new Double(11.799723639384919));\n        values.add(new Double(11.896208658005628));\n        values.add(new Double(12.164149111823424));\n        values.add(new Double(12.042795103513766));\n        values.add(new Double(12.114839532596426));\n        values.add(new Double(12.166609097075824));\n        values.add(new Double(12.183017546225935));\n        values.add(new Double(11.622009125845342));\n        values.add(new Double(11.289365786738633));\n        values.add(new Double(12.462984323671568));\n        values.add(new Double(11.573494921030598));\n        values.add(new Double(10.862867940485804));\n        values.add(new Double(12.018186939664872));\n        values.add(new Double(10.418046849313018));\n        values.add(new Double(11.326344465881341));\n        double median = Statistics.calculateMedian(values, true);\n        assertEquals(11.812413268425116, median, 0.000001);\n        Collections.sort(values);\n        double median2 = Statistics.calculateMedian(values, false);\n        assertEquals(11.812413268425116, median2, 0.000001);\n    }",
        "begin_line": 306,
        "end_line": 357,
        "comment": "\n     * A test using some real data that caused a problem at one point.\n     ",
        "child_ranges": [
            "(line 307,col 9)-(line 307,col 38)",
            "(line 308,col 9)-(line 308,col 51)",
            "(line 309,col 9)-(line 309,col 50)",
            "(line 310,col 9)-(line 310,col 50)",
            "(line 311,col 9)-(line 311,col 51)",
            "(line 312,col 9)-(line 312,col 51)",
            "(line 313,col 9)-(line 313,col 51)",
            "(line 314,col 9)-(line 314,col 50)",
            "(line 315,col 9)-(line 315,col 51)",
            "(line 316,col 9)-(line 316,col 51)",
            "(line 317,col 9)-(line 317,col 51)",
            "(line 318,col 9)-(line 318,col 51)",
            "(line 319,col 9)-(line 319,col 51)",
            "(line 320,col 9)-(line 320,col 51)",
            "(line 321,col 9)-(line 321,col 51)",
            "(line 322,col 9)-(line 322,col 50)",
            "(line 323,col 9)-(line 323,col 50)",
            "(line 324,col 9)-(line 324,col 51)",
            "(line 325,col 9)-(line 325,col 50)",
            "(line 326,col 9)-(line 326,col 51)",
            "(line 327,col 9)-(line 327,col 51)",
            "(line 328,col 9)-(line 328,col 51)",
            "(line 329,col 9)-(line 329,col 51)",
            "(line 330,col 9)-(line 330,col 51)",
            "(line 331,col 9)-(line 331,col 51)",
            "(line 332,col 9)-(line 332,col 51)",
            "(line 333,col 9)-(line 333,col 50)",
            "(line 334,col 9)-(line 334,col 50)",
            "(line 335,col 9)-(line 335,col 51)",
            "(line 336,col 9)-(line 336,col 50)",
            "(line 337,col 9)-(line 337,col 51)",
            "(line 338,col 9)-(line 338,col 51)",
            "(line 339,col 9)-(line 339,col 51)",
            "(line 340,col 9)-(line 340,col 51)",
            "(line 341,col 9)-(line 341,col 51)",
            "(line 342,col 9)-(line 342,col 51)",
            "(line 343,col 9)-(line 343,col 51)",
            "(line 344,col 9)-(line 344,col 51)",
            "(line 345,col 9)-(line 345,col 51)",
            "(line 346,col 9)-(line 346,col 51)",
            "(line 347,col 9)-(line 347,col 51)",
            "(line 348,col 9)-(line 348,col 51)",
            "(line 349,col 9)-(line 349,col 51)",
            "(line 350,col 9)-(line 350,col 51)",
            "(line 351,col 9)-(line 351,col 51)",
            "(line 352,col 9)-(line 352,col 65)",
            "(line 353,col 9)-(line 353,col 59)",
            "(line 354,col 9)-(line 354,col 33)",
            "(line 355,col 9)-(line 355,col 67)",
            "(line 356,col 9)-(line 356,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.StatisticsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/StatisticsTests.java",
        "signature": "org.jfree.data.statistics.junit.StatisticsTests.testCalculateMedian6()",
        "snippet": "    public void testCalculateMedian6() {\n        List values = new ArrayList();\n        values.add(new Double(7.0));\n        values.add(new Double(2.0));\n        values.add(new Double(3.0));\n        values.add(new Double(5.0));\n        values.add(new Double(4.0));\n        values.add(new Double(6.0));\n        values.add(new Double(1.0));\n        double median = Statistics.calculateMedian(values, 0, 2);\n        assertEquals(3.0, median, 0.0000001);\n    }",
        "begin_line": 362,
        "end_line": 373,
        "comment": "\n     * A test for the calculateMedian() method.\n     ",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 38)",
            "(line 364,col 9)-(line 364,col 36)",
            "(line 365,col 9)-(line 365,col 36)",
            "(line 366,col 9)-(line 366,col 36)",
            "(line 367,col 9)-(line 367,col 36)",
            "(line 368,col 9)-(line 368,col 36)",
            "(line 369,col 9)-(line 369,col 36)",
            "(line 370,col 9)-(line 370,col 36)",
            "(line 371,col 9)-(line 371,col 65)",
            "(line 372,col 9)-(line 372,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.StatisticsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/StatisticsTests.java",
        "signature": "org.jfree.data.statistics.junit.StatisticsTests.testCorrelation1()",
        "snippet": "    public void testCorrelation1() {\n        Number[] data1 = new Number[3];\n        data1[0] = new Double(1);\n        data1[1] = new Double(2);\n        data1[2] = new Double(3);        \n        Number[] data2 = new Number[3];\n        data2[0] = new Double(1);\n        data2[1] = new Double(2);\n        data2[2] = new Double(3);    \n        double r = Statistics.getCorrelation(data1, data2);\n        assertEquals(1.0, r, 0.00000001);        \n    }",
        "begin_line": 378,
        "end_line": 389,
        "comment": "\n     * A simple test for the correlation calculation.\n     ",
        "child_ranges": [
            "(line 379,col 9)-(line 379,col 39)",
            "(line 380,col 9)-(line 380,col 33)",
            "(line 381,col 9)-(line 381,col 33)",
            "(line 382,col 9)-(line 382,col 33)",
            "(line 383,col 9)-(line 383,col 39)",
            "(line 384,col 9)-(line 384,col 33)",
            "(line 385,col 9)-(line 385,col 33)",
            "(line 386,col 9)-(line 386,col 33)",
            "(line 387,col 9)-(line 387,col 59)",
            "(line 388,col 9)-(line 388,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.StatisticsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/StatisticsTests.java",
        "signature": "org.jfree.data.statistics.junit.StatisticsTests.testCorrelation2()",
        "snippet": "    public void testCorrelation2() {\n        Number[] data1 = new Number[20];\n        data1[0] = new Double(68);\n        data1[1] = new Double(71);\n        data1[2] = new Double(62);        \n        data1[3] = new Double(75);        \n        data1[4] = new Double(58);        \n        data1[5] = new Double(60);        \n        data1[6] = new Double(67);        \n        data1[7] = new Double(68);        \n        data1[8] = new Double(71);        \n        data1[9] = new Double(69);        \n        data1[10] = new Double(68);        \n        data1[11] = new Double(67);        \n        data1[12] = new Double(63);        \n        data1[13] = new Double(62);        \n        data1[14] = new Double(60);        \n        data1[15] = new Double(63);        \n        data1[16] = new Double(65);        \n        data1[17] = new Double(67);        \n        data1[18] = new Double(63);        \n        data1[19] = new Double(61);        \n        Number[] data2 = new Number[20];\n        data2[0] = new Double(4.1);\n        data2[1] = new Double(4.6);\n        data2[2] = new Double(3.8);    \n        data2[3] = new Double(4.4);    \n        data2[4] = new Double(3.2);    \n        data2[5] = new Double(3.1);    \n        data2[6] = new Double(3.8);    \n        data2[7] = new Double(4.1);    \n        data2[8] = new Double(4.3);    \n        data2[9] = new Double(3.7);    \n        data2[10] = new Double(3.5);    \n        data2[11] = new Double(3.2);    \n        data2[12] = new Double(3.7);    \n        data2[13] = new Double(3.3);    \n        data2[14] = new Double(3.4);    \n        data2[15] = new Double(4.0);    \n        data2[16] = new Double(4.1);    \n        data2[17] = new Double(3.8);    \n        data2[18] = new Double(3.4);    \n        data2[19] = new Double(3.6);    \n        double r = Statistics.getCorrelation(data1, data2);\n        assertEquals(0.7306356862792885, r, 0.000000000001);        \n    }",
        "begin_line": 396,
        "end_line": 441,
        "comment": "\n     * A simple test for the correlation calculation.\n     * \n     * http://trochim.human.cornell.edu/kb/statcorr.htm\n     ",
        "child_ranges": [
            "(line 397,col 9)-(line 397,col 40)",
            "(line 398,col 9)-(line 398,col 34)",
            "(line 399,col 9)-(line 399,col 34)",
            "(line 400,col 9)-(line 400,col 34)",
            "(line 401,col 9)-(line 401,col 34)",
            "(line 402,col 9)-(line 402,col 34)",
            "(line 403,col 9)-(line 403,col 34)",
            "(line 404,col 9)-(line 404,col 34)",
            "(line 405,col 9)-(line 405,col 34)",
            "(line 406,col 9)-(line 406,col 34)",
            "(line 407,col 9)-(line 407,col 34)",
            "(line 408,col 9)-(line 408,col 35)",
            "(line 409,col 9)-(line 409,col 35)",
            "(line 410,col 9)-(line 410,col 35)",
            "(line 411,col 9)-(line 411,col 35)",
            "(line 412,col 9)-(line 412,col 35)",
            "(line 413,col 9)-(line 413,col 35)",
            "(line 414,col 9)-(line 414,col 35)",
            "(line 415,col 9)-(line 415,col 35)",
            "(line 416,col 9)-(line 416,col 35)",
            "(line 417,col 9)-(line 417,col 35)",
            "(line 418,col 9)-(line 418,col 40)",
            "(line 419,col 9)-(line 419,col 35)",
            "(line 420,col 9)-(line 420,col 35)",
            "(line 421,col 9)-(line 421,col 35)",
            "(line 422,col 9)-(line 422,col 35)",
            "(line 423,col 9)-(line 423,col 35)",
            "(line 424,col 9)-(line 424,col 35)",
            "(line 425,col 9)-(line 425,col 35)",
            "(line 426,col 9)-(line 426,col 35)",
            "(line 427,col 9)-(line 427,col 35)",
            "(line 428,col 9)-(line 428,col 35)",
            "(line 429,col 9)-(line 429,col 36)",
            "(line 430,col 9)-(line 430,col 36)",
            "(line 431,col 9)-(line 431,col 36)",
            "(line 432,col 9)-(line 432,col 36)",
            "(line 433,col 9)-(line 433,col 36)",
            "(line 434,col 9)-(line 434,col 36)",
            "(line 435,col 9)-(line 435,col 36)",
            "(line 436,col 9)-(line 436,col 36)",
            "(line 437,col 9)-(line 437,col 36)",
            "(line 438,col 9)-(line 438,col 36)",
            "(line 439,col 9)-(line 439,col 59)",
            "(line 440,col 9)-(line 440,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.StatisticsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/StatisticsTests.java",
        "signature": "org.jfree.data.statistics.junit.StatisticsTests.testGetStdDev()",
        "snippet": "    public void testGetStdDev() {\n        \n        // try null argument\n        boolean pass = false;\n        try {\n            Statistics.getStdDev(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try zero length array\n        pass = false;\n        try {\n            Statistics.getStdDev(new Double[0]);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try single value\n        assertTrue(Double.isNaN(Statistics.getStdDev(new Double[] \n                {new Double(1.0)})));\n    }",
        "begin_line": 446,
        "end_line": 471,
        "comment": "\n     * Some checks for the getStdDev() method.\n     ",
        "child_ranges": [
            "(line 449,col 9)-(line 449,col 29)",
            "(line 450,col 9)-(line 455,col 9)",
            "(line 456,col 9)-(line 456,col 25)",
            "(line 459,col 9)-(line 459,col 21)",
            "(line 460,col 9)-(line 465,col 9)",
            "(line 466,col 9)-(line 466,col 25)",
            "(line 469,col 9)-(line 470,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.SimpleHistogramBinTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/SimpleHistogramBinTests.java",
        "signature": "org.jfree.data.statistics.junit.SimpleHistogramBinTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(SimpleHistogramBinTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.SimpleHistogramBinTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/SimpleHistogramBinTests.java",
        "signature": "org.jfree.data.statistics.junit.SimpleHistogramBinTests.SimpleHistogramBinTests(java.lang.String)",
        "snippet": "    public SimpleHistogramBinTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.SimpleHistogramBinTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/SimpleHistogramBinTests.java",
        "signature": "org.jfree.data.statistics.junit.SimpleHistogramBinTests.testAccepts()",
        "snippet": "    public void testAccepts() {\n        SimpleHistogramBin bin1 = new SimpleHistogramBin(1.0, 2.0);\n        assertFalse(bin1.accepts(0.0));\n        assertTrue(bin1.accepts(1.0));\n        assertTrue(bin1.accepts(1.5));\n        assertTrue(bin1.accepts(2.0));\n        assertFalse(bin1.accepts(2.1));\n        assertFalse(bin1.accepts(Double.NaN));\n\n        SimpleHistogramBin bin2 \n            = new SimpleHistogramBin(1.0, 2.0, false, false);\n        assertFalse(bin2.accepts(0.0));\n        assertFalse(bin2.accepts(1.0));\n        assertTrue(bin2.accepts(1.5));\n        assertFalse(bin2.accepts(2.0));\n        assertFalse(bin2.accepts(2.1));\n        assertFalse(bin2.accepts(Double.NaN));\n    }",
        "begin_line": 82,
        "end_line": 99,
        "comment": "\n     * Some checks for the accepts() method.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 67)",
            "(line 84,col 9)-(line 84,col 39)",
            "(line 85,col 9)-(line 85,col 38)",
            "(line 86,col 9)-(line 86,col 38)",
            "(line 87,col 9)-(line 87,col 38)",
            "(line 88,col 9)-(line 88,col 39)",
            "(line 89,col 9)-(line 89,col 46)",
            "(line 91,col 9)-(line 92,col 61)",
            "(line 93,col 9)-(line 93,col 39)",
            "(line 94,col 9)-(line 94,col 39)",
            "(line 95,col 9)-(line 95,col 38)",
            "(line 96,col 9)-(line 96,col 39)",
            "(line 97,col 9)-(line 97,col 39)",
            "(line 98,col 9)-(line 98,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.SimpleHistogramBinTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/SimpleHistogramBinTests.java",
        "signature": "org.jfree.data.statistics.junit.SimpleHistogramBinTests.testOverlapsWidth()",
        "snippet": "    public void testOverlapsWidth() {\n        SimpleHistogramBin b1 = new SimpleHistogramBin(1.0, 2.0);\n        SimpleHistogramBin b2 = new SimpleHistogramBin(2.0, 3.0);\n        SimpleHistogramBin b3 = new SimpleHistogramBin(3.0, 4.0);\n        SimpleHistogramBin b4 = new SimpleHistogramBin(0.0, 5.0);\n        SimpleHistogramBin b5 = new SimpleHistogramBin(2.0, 3.0, false, true);\n        SimpleHistogramBin b6 = new SimpleHistogramBin(2.0, 3.0, true, false);\n        assertTrue(b1.overlapsWith(b2));\n        assertTrue(b2.overlapsWith(b1));\n        assertFalse(b1.overlapsWith(b3));\n        assertFalse(b3.overlapsWith(b1));\n        assertTrue(b1.overlapsWith(b4));\n        assertTrue(b4.overlapsWith(b1));\n        assertFalse(b1.overlapsWith(b5));\n        assertFalse(b5.overlapsWith(b1));\n        assertTrue(b1.overlapsWith(b6));\n        assertTrue(b6.overlapsWith(b1));\n    }",
        "begin_line": 104,
        "end_line": 121,
        "comment": "\n     * Some checks for the overlapsWith() method.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 65)",
            "(line 106,col 9)-(line 106,col 65)",
            "(line 107,col 9)-(line 107,col 65)",
            "(line 108,col 9)-(line 108,col 65)",
            "(line 109,col 9)-(line 109,col 78)",
            "(line 110,col 9)-(line 110,col 78)",
            "(line 111,col 9)-(line 111,col 40)",
            "(line 112,col 9)-(line 112,col 40)",
            "(line 113,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 114,col 41)",
            "(line 115,col 9)-(line 115,col 40)",
            "(line 116,col 9)-(line 116,col 40)",
            "(line 117,col 9)-(line 117,col 41)",
            "(line 118,col 9)-(line 118,col 41)",
            "(line 119,col 9)-(line 119,col 40)",
            "(line 120,col 9)-(line 120,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.SimpleHistogramBinTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/SimpleHistogramBinTests.java",
        "signature": "org.jfree.data.statistics.junit.SimpleHistogramBinTests.testEquals()",
        "snippet": "    public void testEquals() {\n        SimpleHistogramBin b1 = new SimpleHistogramBin(1.0, 2.0);\n        SimpleHistogramBin b2 = new SimpleHistogramBin(1.0, 2.0);\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b1));\n        \n        b1 = new SimpleHistogramBin(1.1, 2.0, true, true);\n        assertFalse(b1.equals(b2));\n        b2 = new SimpleHistogramBin(1.1, 2.0, true, true);\n        assertTrue(b1.equals(b2));\n        \n        b1 = new SimpleHistogramBin(1.1, 2.2, true, true);\n        assertFalse(b1.equals(b2));\n        b2 = new SimpleHistogramBin(1.1, 2.2, true, true);\n        assertTrue(b1.equals(b2));\n\n        b1 = new SimpleHistogramBin(1.1, 2.2, false, true);\n        assertFalse(b1.equals(b2));\n        b2 = new SimpleHistogramBin(1.1, 2.2, false, true);\n        assertTrue(b1.equals(b2));\n\n        b1 = new SimpleHistogramBin(1.1, 2.2, false, false);\n        assertFalse(b1.equals(b2));\n        b2 = new SimpleHistogramBin(1.1, 2.2, false, false);\n        assertTrue(b1.equals(b2));\n        \n        b1.setItemCount(99);\n        assertFalse(b1.equals(b2));\n        b2.setItemCount(99);\n        assertTrue(b1.equals(b2));\n    }",
        "begin_line": 126,
        "end_line": 156,
        "comment": "\n     * Ensure that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 65)",
            "(line 128,col 9)-(line 128,col 65)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 130,col 9)-(line 130,col 34)",
            "(line 132,col 9)-(line 132,col 58)",
            "(line 133,col 9)-(line 133,col 35)",
            "(line 134,col 9)-(line 134,col 58)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 137,col 9)-(line 137,col 58)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 58)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 142,col 9)-(line 142,col 59)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 144,col 59)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 147,col 9)-(line 147,col 60)",
            "(line 148,col 9)-(line 148,col 35)",
            "(line 149,col 9)-(line 149,col 60)",
            "(line 150,col 9)-(line 150,col 34)",
            "(line 152,col 9)-(line 152,col 28)",
            "(line 153,col 9)-(line 153,col 35)",
            "(line 154,col 9)-(line 154,col 28)",
            "(line 155,col 9)-(line 155,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.SimpleHistogramBinTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/SimpleHistogramBinTests.java",
        "signature": "org.jfree.data.statistics.junit.SimpleHistogramBinTests.testCloning()",
        "snippet": "    public void testCloning() {\n        SimpleHistogramBin b1 = new SimpleHistogramBin(1.1, 2.2, false, true);\n        b1.setItemCount(99);\n        SimpleHistogramBin b2 = null;\n        try {\n            b2 = (SimpleHistogramBin) b1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(b1 != b2);\n        assertTrue(b1.getClass() == b2.getClass());\n        assertTrue(b1.equals(b2));\n        \n        // check that clone is independent of the original\n        b2.setItemCount(111);\n        assertFalse(b1.equals(b2));\n    }",
        "begin_line": 161,
        "end_line": 178,
        "comment": "\n     * Some checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 78)",
            "(line 163,col 9)-(line 163,col 28)",
            "(line 164,col 9)-(line 164,col 37)",
            "(line 165,col 9)-(line 170,col 9)",
            "(line 171,col 9)-(line 171,col 29)",
            "(line 172,col 9)-(line 172,col 51)",
            "(line 173,col 9)-(line 173,col 34)",
            "(line 176,col 9)-(line 176,col 29)",
            "(line 177,col 9)-(line 177,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.SimpleHistogramBinTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/SimpleHistogramBinTests.java",
        "signature": "org.jfree.data.statistics.junit.SimpleHistogramBinTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        SimpleHistogramBin b1 = new SimpleHistogramBin(1.0, 2.0, false, true);\n        b1.setItemCount(123);\n        SimpleHistogramBin b2 = null;        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(b1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            b2 = (SimpleHistogramBin) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(b1, b2);\n    }",
        "begin_line": 183,
        "end_line": 203,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 78)",
            "(line 186,col 9)-(line 186,col 29)",
            "(line 187,col 9)-(line 187,col 37)",
            "(line 188,col 9)-(line 201,col 9)",
            "(line 202,col 9)-(line 202,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.MeanAndStandardDeviationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/MeanAndStandardDeviationTests.java",
        "signature": "org.jfree.data.statistics.junit.MeanAndStandardDeviationTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MeanAndStandardDeviationTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 66)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.MeanAndStandardDeviationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/MeanAndStandardDeviationTests.java",
        "signature": "org.jfree.data.statistics.junit.MeanAndStandardDeviationTests.MeanAndStandardDeviationTests(java.lang.String)",
        "snippet": "    public MeanAndStandardDeviationTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.MeanAndStandardDeviationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/MeanAndStandardDeviationTests.java",
        "signature": "org.jfree.data.statistics.junit.MeanAndStandardDeviationTests.testEquals()",
        "snippet": "    public void testEquals() {\n        MeanAndStandardDeviation m1 = new MeanAndStandardDeviation(1.2, 3.4);\n        MeanAndStandardDeviation m2 = new MeanAndStandardDeviation(1.2, 3.4);\n        assertTrue(m1.equals(m2));\n        assertTrue(m2.equals(m1));\n\n        m1 = new MeanAndStandardDeviation(1.0, 3.4);\n        assertFalse(m1.equals(m2));\n        m2 = new MeanAndStandardDeviation(1.0, 3.4);\n        assertTrue(m1.equals(m2));\n\n        m1 = new MeanAndStandardDeviation(1.0, 3.0);\n        assertFalse(m1.equals(m2));\n        m2 = new MeanAndStandardDeviation(1.0, 3.0);\n        assertTrue(m1.equals(m2));\n    }",
        "begin_line": 82,
        "end_line": 97,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 77)",
            "(line 84,col 9)-(line 84,col 77)",
            "(line 85,col 9)-(line 85,col 34)",
            "(line 86,col 9)-(line 86,col 34)",
            "(line 88,col 9)-(line 88,col 52)",
            "(line 89,col 9)-(line 89,col 35)",
            "(line 90,col 9)-(line 90,col 52)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 93,col 9)-(line 93,col 52)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 95,col 52)",
            "(line 96,col 9)-(line 96,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.MeanAndStandardDeviationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/MeanAndStandardDeviationTests.java",
        "signature": "org.jfree.data.statistics.junit.MeanAndStandardDeviationTests.testCloning()",
        "snippet": "    public void testCloning() {\n        MeanAndStandardDeviation m1 = new MeanAndStandardDeviation(1.2, 3.4);\n        assertFalse(m1 instanceof Cloneable);\n    }",
        "begin_line": 102,
        "end_line": 105,
        "comment": "\n     * Immutable class - should not be cloneable.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 77)",
            "(line 104,col 9)-(line 104,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.MeanAndStandardDeviationTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/MeanAndStandardDeviationTests.java",
        "signature": "org.jfree.data.statistics.junit.MeanAndStandardDeviationTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        MeanAndStandardDeviation m1 = new MeanAndStandardDeviation(1.2, 3.4);\n        MeanAndStandardDeviation m2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            m2 = (MeanAndStandardDeviation) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(m1, m2);\n\n    }",
        "begin_line": 110,
        "end_line": 131,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 77)",
            "(line 112,col 9)-(line 112,col 43)",
            "(line 114,col 9)-(line 128,col 9)",
            "(line 129,col 9)-(line 129,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(HistogramDatasetTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramDatasetTests.HistogramDatasetTests(java.lang.String)",
        "snippet": "    public HistogramDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramDatasetTests.testBins()",
        "snippet": "    public void testBins() {\n        double[] values = {1.0, 2.0, 3.0, 4.0, 6.0, 12.0, 5.0, 6.3, 4.5};\n        HistogramDataset hd = new HistogramDataset();\n        hd.addSeries(\"Series 1\", values, 5);\n        assertEquals(hd.getYValue(0, 0), 3.0, EPSILON);        \n        assertEquals(hd.getYValue(0, 1), 3.0, EPSILON);        \n        assertEquals(hd.getYValue(0, 2), 2.0, EPSILON);        \n        assertEquals(hd.getYValue(0, 3), 0.0, EPSILON);        \n        assertEquals(hd.getYValue(0, 4), 1.0, EPSILON);        \n    }",
        "begin_line": 86,
        "end_line": 95,
        "comment": "\n     * Some checks that the correct values are assigned to bins.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 73)",
            "(line 88,col 9)-(line 88,col 53)",
            "(line 89,col 9)-(line 89,col 44)",
            "(line 90,col 9)-(line 90,col 55)",
            "(line 91,col 9)-(line 91,col 55)",
            "(line 92,col 9)-(line 92,col 55)",
            "(line 93,col 9)-(line 93,col 55)",
            "(line 94,col 9)-(line 94,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        double[] values = {1.0, 2.0, 3.0, 4.0, 6.0, 12.0, 5.0, 6.3, 4.5};\n        HistogramDataset d1 = new HistogramDataset();\n        d1.addSeries(\"Series 1\", values, 5);\n        HistogramDataset d2 = new HistogramDataset();\n        d2.addSeries(\"Series 1\", values, 5);\n        \n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n\n    }",
        "begin_line": 100,
        "end_line": 111,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 73)",
            "(line 103,col 9)-(line 103,col 53)",
            "(line 104,col 9)-(line 104,col 44)",
            "(line 105,col 9)-(line 105,col 53)",
            "(line 106,col 9)-(line 106,col 44)",
            "(line 108,col 9)-(line 108,col 34)",
            "(line 109,col 9)-(line 109,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        double[] values = {1.0, 2.0, 3.0, 4.0, 6.0, 12.0, 5.0, 6.3, 4.5};\n        HistogramDataset d1 = new HistogramDataset();\n        d1.addSeries(\"Series 1\", values, 5);\n        HistogramDataset d2 = null;\n        try {\n            d2 = (HistogramDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 116,
        "end_line": 130,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 73)",
            "(line 118,col 9)-(line 118,col 53)",
            "(line 119,col 9)-(line 119,col 44)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 126,col 9)",
            "(line 127,col 9)-(line 127,col 29)",
            "(line 128,col 9)-(line 128,col 51)",
            "(line 129,col 9)-(line 129,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        double[] values = {1.0, 2.0, 3.0, 4.0, 6.0, 12.0, 5.0, 6.3, 4.5};\n        HistogramDataset d1 = new HistogramDataset();\n        d1.addSeries(\"Series 1\", values, 5);\n        HistogramDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (HistogramDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(d1, d2);\n    }",
        "begin_line": 135,
        "end_line": 157,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 73)",
            "(line 137,col 9)-(line 137,col 53)",
            "(line 138,col 9)-(line 138,col 44)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 141,col 9)-(line 155,col 9)",
            "(line 156,col 9)-(line 156,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramDatasetTests.testGetSeriesKey()",
        "snippet": "    public void testGetSeriesKey() {\n        double[] values = {1.0, 2.0, 3.0, 4.0, 6.0, 12.0, 5.0, 6.3, 4.5};\n        HistogramDataset d1 = new HistogramDataset();\n        d1.addSeries(\"Series 1\", values, 5);   \n        assertEquals(\"Series 1\", d1.getSeriesKey(0));\n    }",
        "begin_line": 163,
        "end_line": 168,
        "comment": "\n     * A test for a bug reported in the forum where the series name isn't being\n     * returned correctly.\n     ",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 73)",
            "(line 165,col 9)-(line 165,col 53)",
            "(line 166,col 9)-(line 166,col 44)",
            "(line 167,col 9)-(line 167,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramDatasetTests.testAddSeries()",
        "snippet": "    public void testAddSeries() {\n        double[] values = {-1.0, 0.0, 0.1, 0.9, 1.0, 1.1, 1.9, 2.0, 3.0};\n        HistogramDataset d = new HistogramDataset();\n        d.addSeries(\"S1\", values, 2, 0.0, 2.0);\n        assertEquals(0.0, d.getStartXValue(0, 0), EPSILON);\n        assertEquals(1.0, d.getEndXValue(0, 0), EPSILON);\n        assertEquals(4.0, d.getYValue(0, 0), EPSILON);\n        \n        assertEquals(1.0, d.getStartXValue(0, 1), EPSILON);\n        assertEquals(2.0, d.getEndXValue(0, 1), EPSILON);\n        assertEquals(5.0, d.getYValue(0, 1), EPSILON);\n    }",
        "begin_line": 173,
        "end_line": 184,
        "comment": "\n     * Some checks for the addSeries() method.\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 73)",
            "(line 175,col 9)-(line 175,col 52)",
            "(line 176,col 9)-(line 176,col 47)",
            "(line 177,col 9)-(line 177,col 59)",
            "(line 178,col 9)-(line 178,col 57)",
            "(line 179,col 9)-(line 179,col 54)",
            "(line 181,col 9)-(line 181,col 59)",
            "(line 182,col 9)-(line 182,col 57)",
            "(line 183,col 9)-(line 183,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramDatasetTests.testBinBoundaries()",
        "snippet": "    public void testBinBoundaries() {\n        double[] values = { -5.000000000000286E-5 };\n        int bins = 1260;\n        double minimum = -0.06307522528160199;\n        double maximum = 0.06297522528160199;\n        HistogramDataset d = new HistogramDataset();\n        d.addSeries(\"S1\", values, bins, minimum, maximum);\n        assertEquals(0.0, d.getYValue(0, 629), EPSILON);\n        assertEquals(1.0, d.getYValue(0, 630), EPSILON);\n        assertEquals(0.0, d.getYValue(0, 631), EPSILON);\n        assertTrue(values[0] > d.getStartXValue(0, 630));\n        assertTrue(values[0] < d.getEndXValue(0, 630));        \n    }",
        "begin_line": 189,
        "end_line": 201,
        "comment": "\n     * This test is derived from a reported bug.\n     ",
        "child_ranges": [
            "(line 190,col 9)-(line 190,col 52)",
            "(line 191,col 9)-(line 191,col 24)",
            "(line 192,col 9)-(line 192,col 46)",
            "(line 193,col 9)-(line 193,col 45)",
            "(line 194,col 9)-(line 194,col 52)",
            "(line 195,col 9)-(line 195,col 58)",
            "(line 196,col 9)-(line 196,col 56)",
            "(line 197,col 9)-(line 197,col 56)",
            "(line 198,col 9)-(line 198,col 56)",
            "(line 199,col 9)-(line 199,col 57)",
            "(line 200,col 9)-(line 200,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramDatasetTests.test1553088()",
        "snippet": "    public void test1553088() {\n        double[] values = {-1.0, 0.0, -Double.MIN_VALUE, 3.0};\n        HistogramDataset d = new HistogramDataset();\n        d.addSeries(\"S1\", values, 2, -1.0, 0.0);\n        assertEquals(-1.0, d.getStartXValue(0, 0), EPSILON);\n        assertEquals(-0.5, d.getEndXValue(0, 0), EPSILON);\n        assertEquals(1.0, d.getYValue(0, 0), EPSILON);\n        \n        assertEquals(-0.5, d.getStartXValue(0, 1), EPSILON);\n        assertEquals(0.0, d.getEndXValue(0, 1), EPSILON);\n        assertEquals(3.0, d.getYValue(0, 1), EPSILON);\n    }    ",
        "begin_line": 207,
        "end_line": 218,
        "comment": "\n     * Some checks for bug 1553088.  An IndexOutOfBoundsException is thrown \n     * when a data value is *very* close to the upper limit of the last bin.\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 62)",
            "(line 209,col 9)-(line 209,col 52)",
            "(line 210,col 9)-(line 210,col 48)",
            "(line 211,col 9)-(line 211,col 60)",
            "(line 212,col 9)-(line 212,col 58)",
            "(line 213,col 9)-(line 213,col 54)",
            "(line 215,col 9)-(line 215,col 60)",
            "(line 216,col 9)-(line 216,col 57)",
            "(line 217,col 9)-(line 217,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.BoxAndWhiskerItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/BoxAndWhiskerItemTests.java",
        "signature": "org.jfree.data.statistics.junit.BoxAndWhiskerItemTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BoxAndWhiskerItemTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.BoxAndWhiskerItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/BoxAndWhiskerItemTests.java",
        "signature": "org.jfree.data.statistics.junit.BoxAndWhiskerItemTests.BoxAndWhiskerItemTests(java.lang.String)",
        "snippet": "    public BoxAndWhiskerItemTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.BoxAndWhiskerItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/BoxAndWhiskerItemTests.java",
        "signature": "org.jfree.data.statistics.junit.BoxAndWhiskerItemTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        BoxAndWhiskerItem i1 = new BoxAndWhiskerItem(\n            new Double(1.0), new Double(2.0), new Double(3.0), new Double(4.0), \n            new Double(5.0), new Double(6.0), new Double(7.0), new Double(8.0), \n            new ArrayList()\n        );\n        BoxAndWhiskerItem i2 = new BoxAndWhiskerItem(\n            new Double(1.0), new Double(2.0), new Double(3.0), new Double(4.0), \n            new Double(5.0), new Double(6.0), new Double(7.0), new Double(8.0), \n            new ArrayList()\n        );\n        assertTrue(i1.equals(i2));\n        assertTrue(i2.equals(i1));\n\n    }",
        "begin_line": 83,
        "end_line": 98,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 89,col 10)",
            "(line 90,col 9)-(line 94,col 10)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 96,col 9)-(line 96,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.BoxAndWhiskerItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/BoxAndWhiskerItemTests.java",
        "signature": "org.jfree.data.statistics.junit.BoxAndWhiskerItemTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        BoxAndWhiskerItem i1 = new BoxAndWhiskerItem(\n            new Double(1.0), new Double(2.0), new Double(3.0), new Double(4.0), \n            new Double(5.0), new Double(6.0), new Double(7.0), new Double(8.0), \n            new ArrayList()\n        );\n        BoxAndWhiskerItem i2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(i1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            i2 = (BoxAndWhiskerItem) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(i1, i2);\n\n    }",
        "begin_line": 103,
        "end_line": 129,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 109,col 10)",
            "(line 110,col 9)-(line 110,col 36)",
            "(line 112,col 9)-(line 126,col 9)",
            "(line 127,col 9)-(line 127,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultBoxAndWhiskerCategoryDatasetTests.class);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 77)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.DefaultBoxAndWhiskerCategoryDatasetTests(java.lang.String)",
        "snippet": "    public DefaultBoxAndWhiskerCategoryDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), \n                new Double(3.0), new Double(4.0), new Double(5.0), \n                new Double(6.0), new Double(7.0), new Double(8.0), \n                new ArrayList()), \"ROW1\", \"COLUMN1\");\n        DefaultBoxAndWhiskerCategoryDataset d2 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d2.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), \n                new Double(3.0), new Double(4.0), new Double(5.0), \n                new Double(6.0), new Double(7.0), new Double(8.0),\n                new ArrayList()), \"ROW1\", \"COLUMN1\");\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n    }",
        "begin_line": 90,
        "end_line": 105,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 92,col 60)",
            "(line 93,col 9)-(line 96,col 53)",
            "(line 97,col 9)-(line 98,col 60)",
            "(line 99,col 9)-(line 102,col 53)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 104,col 9)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), \n                new Double(3.0), new Double(4.0), new Double(5.0), \n                new Double(6.0), new Double(7.0), new Double(8.0),\n                new ArrayList()), \"ROW1\", \"COLUMN1\");\n        DefaultBoxAndWhiskerCategoryDataset d2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            d2 = (DefaultBoxAndWhiskerCategoryDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n    }",
        "begin_line": 110,
        "end_line": 136,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 113,col 60)",
            "(line 114,col 9)-(line 117,col 53)",
            "(line 118,col 9)-(line 118,col 54)",
            "(line 120,col 9)-(line 133,col 9)",
            "(line 134,col 9)-(line 134,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), \n                new Double(3.0), new Double(4.0), new Double(5.0), \n                new Double(6.0), new Double(7.0), new Double(8.0),\n                new ArrayList()), \"ROW1\", \"COLUMN1\");\n        DefaultBoxAndWhiskerCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultBoxAndWhiskerCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // test independence\n        d1.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), \n                new Double(3.0), new Double(4.0), new Double(5.0), \n                new Double(6.0), new Double(7.0), new Double(8.0),\n                new ArrayList()), \"ROW2\", \"COLUMN1\");\n        assertFalse(d1.equals(d2));\n    }",
        "begin_line": 141,
        "end_line": 165,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 143,col 60)",
            "(line 144,col 9)-(line 147,col 53)",
            "(line 148,col 9)-(line 148,col 54)",
            "(line 149,col 9)-(line 154,col 9)",
            "(line 155,col 9)-(line 155,col 29)",
            "(line 156,col 9)-(line 156,col 51)",
            "(line 157,col 9)-(line 157,col 34)",
            "(line 160,col 9)-(line 163,col 53)",
            "(line 164,col 9)-(line 164,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.test1701822()",
        "snippet": "    public void test1701822() {\n        DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        try {\n            dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), \n                    new Double(3.0), new Double(4.0), new Double(5.0), \n                    new Double(6.0), null, new Double(8.0),\n                    new ArrayList()), \"ROW1\", \"COLUMN1\");\n            dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), \n                    new Double(3.0), new Double(4.0), new Double(5.0), \n                    new Double(6.0), new Double(7.0), null,\n                    new ArrayList()), \"ROW1\", \"COLUMN2\");\n        }\n        catch (NullPointerException e) {\n            assertTrue(false);\n        }\n        \n    }",
        "begin_line": 170,
        "end_line": 187,
        "comment": "\n     * A simple test for bug report 1701822.\n     ",
        "child_ranges": [
            "(line 171,col 9)-(line 172,col 60)",
            "(line 173,col 9)-(line 185,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testAdd()",
        "snippet": "    public void testAdd() {\n        DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, \n                5.0, 6.0, 7.0, 8.0, new ArrayList());\n        dataset.add(item1, \"R1\", \"C1\");\n       \n        assertEquals(2.0, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.0, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(2.0, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(3.0, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(4.0, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(5.0, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(6.0, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.0, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(8.0, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(new Range(7.0, 8.0), dataset.getRangeBounds(false));\n    }",
        "begin_line": 194,
        "end_line": 219,
        "comment": "\n     * Some checks for the add() method.\n     ",
        "child_ranges": [
            "(line 195,col 9)-(line 196,col 60)",
            "(line 197,col 9)-(line 198,col 53)",
            "(line 199,col 9)-(line 199,col 39)",
            "(line 201,col 9)-(line 201,col 79)",
            "(line 202,col 9)-(line 203,col 25)",
            "(line 204,col 9)-(line 205,col 25)",
            "(line 206,col 9)-(line 207,col 25)",
            "(line 208,col 9)-(line 209,col 25)",
            "(line 210,col 9)-(line 211,col 25)",
            "(line 212,col 9)-(line 213,col 25)",
            "(line 214,col 9)-(line 215,col 25)",
            "(line 216,col 9)-(line 217,col 25)",
            "(line 218,col 9)-(line 218,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testAddUpdatesCachedRange()",
        "snippet": "    public void testAddUpdatesCachedRange() {\n        DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, \n                5.0, 6.0, 7.0, 8.0, new ArrayList());\n        dataset.add(item1, \"R1\", \"C1\");\n       \n        // now overwrite this item with another\n        BoxAndWhiskerItem item2 = new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, \n                5.5, 6.5, 7.5, 8.5, new ArrayList());\n        dataset.add(item2, \"R1\", \"C1\");\n\n        assertEquals(2.5, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.5, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(2.5, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(3.5, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(4.5, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(5.5, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(6.5, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.5, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(8.5, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(new Range(7.5, 8.5), dataset.getRangeBounds(false));\n    }",
        "begin_line": 224,
        "end_line": 254,
        "comment": "\n     * Some checks for the add() method.\n     ",
        "child_ranges": [
            "(line 225,col 9)-(line 226,col 60)",
            "(line 227,col 9)-(line 228,col 53)",
            "(line 229,col 9)-(line 229,col 39)",
            "(line 232,col 9)-(line 233,col 53)",
            "(line 234,col 9)-(line 234,col 39)",
            "(line 236,col 9)-(line 236,col 79)",
            "(line 237,col 9)-(line 238,col 25)",
            "(line 239,col 9)-(line 240,col 25)",
            "(line 241,col 9)-(line 242,col 25)",
            "(line 243,col 9)-(line 244,col 25)",
            "(line 245,col 9)-(line 246,col 25)",
            "(line 247,col 9)-(line 248,col 25)",
            "(line 249,col 9)-(line 250,col 25)",
            "(line 251,col 9)-(line 252,col 25)",
            "(line 253,col 9)-(line 253,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testConstructor()",
        "snippet": "    public void testConstructor() {\n        DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        assertEquals(0, dataset.getColumnCount());\n        assertEquals(0, dataset.getRowCount());\n        assertTrue(Double.isNaN(dataset.getRangeLowerBound(false)));\n        assertTrue(Double.isNaN(dataset.getRangeUpperBound(false)));\n    }",
        "begin_line": 259,
        "end_line": 266,
        "comment": "\n     * Some basic checks for the constructor.\n     ",
        "child_ranges": [
            "(line 260,col 9)-(line 261,col 60)",
            "(line 262,col 9)-(line 262,col 50)",
            "(line 263,col 9)-(line 263,col 47)",
            "(line 264,col 9)-(line 264,col 68)",
            "(line 265,col 9)-(line 265,col 68)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testGetRangeBounds()",
        "snippet": "    public void testGetRangeBounds() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));\n        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));\n        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));\n        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));\n        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));\n    }",
        "begin_line": 271,
        "end_line": 295,
        "comment": "\n     * Some checks for the getRangeBounds() method.\n     ",
        "child_ranges": [
            "(line 272,col 9)-(line 273,col 60)",
            "(line 274,col 9)-(line 275,col 46)",
            "(line 276,col 9)-(line 276,col 68)",
            "(line 277,col 9)-(line 277,col 67)",
            "(line 279,col 9)-(line 280,col 46)",
            "(line 281,col 9)-(line 281,col 68)",
            "(line 282,col 9)-(line 282,col 67)",
            "(line 284,col 9)-(line 285,col 46)",
            "(line 286,col 9)-(line 286,col 68)",
            "(line 287,col 9)-(line 287,col 67)",
            "(line 291,col 9)-(line 292,col 46)",
            "(line 293,col 9)-(line 293,col 68)",
            "(line 294,col 9)-(line 294,col 67)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testRemove()",
        "snippet": "    public void testRemove() {\n        DefaultBoxAndWhiskerCategoryDataset data\n                = new DefaultBoxAndWhiskerCategoryDataset();\n        \n        boolean pass = false;\n        try {\n            data.remove(\"R1\", \"R2\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        data.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(7.0, 8.0), data.getRangeBounds(false));\n        assertEquals(new Range(7.0, 8.0), data.getRangeBounds(true));\n        \n        data.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        assertEquals(new Range(7.0, 9.5), data.getRangeBounds(false));\n        assertEquals(new Range(7.0, 9.5), data.getRangeBounds(true));\n        \n        data.remove(\"R1\", \"C1\");\n        assertEquals(new Range(8.5, 9.5), data.getRangeBounds(false));\n        assertEquals(new Range(8.5, 9.5), data.getRangeBounds(true));\n    }",
        "begin_line": 300,
        "end_line": 325,
        "comment": "\n     * Some checks for the remove method.\n     ",
        "child_ranges": [
            "(line 301,col 9)-(line 302,col 60)",
            "(line 304,col 9)-(line 304,col 29)",
            "(line 305,col 9)-(line 310,col 9)",
            "(line 311,col 9)-(line 311,col 25)",
            "(line 312,col 9)-(line 313,col 46)",
            "(line 314,col 9)-(line 314,col 70)",
            "(line 315,col 9)-(line 315,col 69)",
            "(line 317,col 9)-(line 318,col 46)",
            "(line 319,col 9)-(line 319,col 70)",
            "(line 320,col 9)-(line 320,col 69)",
            "(line 322,col 9)-(line 322,col 32)",
            "(line 323,col 9)-(line 323,col 70)",
            "(line 324,col 9)-(line 324,col 69)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultMultiValueCategoryDatasetTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 74)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.DefaultMultiValueCategoryDatasetTests(java.lang.String)",
        "snippet": "    public DefaultMultiValueCategoryDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testGetValue()",
        "snippet": "    public void testGetValue() {\n        DefaultMultiValueCategoryDataset d \n                = new DefaultMultiValueCategoryDataset();\n        List values = new ArrayList();\n        values.add(new Integer(1));\n        values.add(new Integer(2));\n        d.add(values, \"R1\", \"C1\");\n        assertEquals(new Double(1.5), d.getValue(\"R1\", \"C1\"));\n        boolean pass = false;\n        try {\n            d.getValue(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            d.getValue(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n    }",
        "begin_line": 85,
        "end_line": 110,
        "comment": "\n     * Some checks for the getValue() method.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 87,col 57)",
            "(line 88,col 9)-(line 88,col 38)",
            "(line 89,col 9)-(line 89,col 35)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 62)",
            "(line 93,col 9)-(line 93,col 29)",
            "(line 94,col 9)-(line 99,col 9)",
            "(line 100,col 9)-(line 100,col 25)",
            "(line 102,col 9)-(line 102,col 21)",
            "(line 103,col 9)-(line 108,col 9)",
            "(line 109,col 9)-(line 109,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testGetValue2()",
        "snippet": "    public void testGetValue2() {\n        DefaultMultiValueCategoryDataset d \n                = new DefaultMultiValueCategoryDataset();\n        boolean pass = false;\n        try {\n            /* Number n =*/ d.getValue(0, 0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 115,
        "end_line": 126,
        "comment": "\n     * A simple check for the getValue(int, int) method.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 117,col 57)",
            "(line 118,col 9)-(line 118,col 29)",
            "(line 119,col 9)-(line 124,col 9)",
            "(line 125,col 9)-(line 125,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testGetRowCount()",
        "snippet": "    public void testGetRowCount() {\n        DefaultMultiValueCategoryDataset d \n                = new DefaultMultiValueCategoryDataset();\n        assertTrue(d.getRowCount() == 0);\n        List values = new ArrayList();\n        d.add(values, \"R1\", \"C1\");\n        assertTrue(d.getRowCount() == 1);\n        \n        d.add(values, \"R2\", \"C1\");\n        assertTrue(d.getRowCount() == 2);\n        \n        d.add(values, \"R2\", \"C1\");\n        assertTrue(d.getRowCount() == 2);\n    }",
        "begin_line": 131,
        "end_line": 144,
        "comment": "\n     * Some tests for the getRowCount() method.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 133,col 57)",
            "(line 134,col 9)-(line 134,col 41)",
            "(line 135,col 9)-(line 135,col 38)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 137,col 9)-(line 137,col 41)",
            "(line 139,col 9)-(line 139,col 34)",
            "(line 140,col 9)-(line 140,col 41)",
            "(line 142,col 9)-(line 142,col 34)",
            "(line 143,col 9)-(line 143,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testGetColumnCount()",
        "snippet": "    public void testGetColumnCount() {\n        DefaultMultiValueCategoryDataset d \n                = new DefaultMultiValueCategoryDataset();\n        assertTrue(d.getColumnCount() == 0);\n        \n        List values = new ArrayList();\n        d.add(values, \"R1\", \"C1\");\n        assertTrue(d.getColumnCount() == 1);\n        \n        d.add(values, \"R1\", \"C2\");\n        assertTrue(d.getColumnCount() == 2);\n        \n        d.add(values, \"R1\", \"C2\");\n        assertTrue(d.getColumnCount() == 2);\n\n    }",
        "begin_line": 149,
        "end_line": 164,
        "comment": "\n     * Some tests for the getColumnCount() method.\n     ",
        "child_ranges": [
            "(line 150,col 9)-(line 151,col 57)",
            "(line 152,col 9)-(line 152,col 44)",
            "(line 154,col 9)-(line 154,col 38)",
            "(line 155,col 9)-(line 155,col 34)",
            "(line 156,col 9)-(line 156,col 44)",
            "(line 158,col 9)-(line 158,col 34)",
            "(line 159,col 9)-(line 159,col 44)",
            "(line 161,col 9)-(line 161,col 34)",
            "(line 162,col 9)-(line 162,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultMultiValueCategoryDataset d1 \n                = new DefaultMultiValueCategoryDataset();\n        DefaultMultiValueCategoryDataset d2 \n                = new DefaultMultiValueCategoryDataset();\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n        \n        List values = new ArrayList();\n        d1.add(values, \"R1\", \"C1\");\n        assertFalse(d1.equals(d2));\n        d2.add(values, \"R1\", \"C1\");\n        assertTrue(d1.equals(d2));\n        \n        values.add(new Integer(99));\n        d1.add(values, \"R1\", \"C1\");\n        assertFalse(d1.equals(d2));\n        d2.add(values, \"R1\", \"C1\");\n        assertTrue(d1.equals(d2));\n        \n        values.add(new Integer(99));\n        d1.add(values, \"R1\", \"C2\");\n        assertFalse(d1.equals(d2));\n        d2.add(values, \"R1\", \"C2\");\n        assertTrue(d1.equals(d2));        \n    }",
        "begin_line": 169,
        "end_line": 194,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 171,col 57)",
            "(line 172,col 9)-(line 173,col 57)",
            "(line 174,col 9)-(line 174,col 34)",
            "(line 175,col 9)-(line 175,col 34)",
            "(line 177,col 9)-(line 177,col 38)",
            "(line 178,col 9)-(line 178,col 35)",
            "(line 179,col 9)-(line 179,col 35)",
            "(line 180,col 9)-(line 180,col 35)",
            "(line 181,col 9)-(line 181,col 34)",
            "(line 183,col 9)-(line 183,col 36)",
            "(line 184,col 9)-(line 184,col 35)",
            "(line 185,col 9)-(line 185,col 35)",
            "(line 186,col 9)-(line 186,col 35)",
            "(line 187,col 9)-(line 187,col 34)",
            "(line 189,col 9)-(line 189,col 36)",
            "(line 190,col 9)-(line 190,col 35)",
            "(line 191,col 9)-(line 191,col 35)",
            "(line 192,col 9)-(line 192,col 35)",
            "(line 193,col 9)-(line 193,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultMultiValueCategoryDataset d1 \n                = new DefaultMultiValueCategoryDataset();\n        DefaultMultiValueCategoryDataset d2 \n                = new DefaultMultiValueCategoryDataset();\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            d2 = (DefaultMultiValueCategoryDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n    }",
        "begin_line": 199,
        "end_line": 222,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 201,col 9)-(line 202,col 57)",
            "(line 203,col 9)-(line 204,col 57)",
            "(line 206,col 9)-(line 219,col 9)",
            "(line 220,col 9)-(line 220,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testAddValue()",
        "snippet": "    public void testAddValue() {\n        DefaultMultiValueCategoryDataset d1 \n                = new DefaultMultiValueCategoryDataset();\n        \n        boolean pass = false;\n        try {\n            d1.add(null, \"R1\", \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n            \n        List values = new ArrayList();\n        d1.add(values, \"R2\", \"C1\");\n        assertEquals(values, d1.getValues(\"R2\", \"C1\"));\n        \n        pass = false;\n        try {\n            d1.add(values, null, \"C2\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 227,
        "end_line": 252,
        "comment": "\n     * Some checks for the add() method.\n     ",
        "child_ranges": [
            "(line 228,col 9)-(line 229,col 57)",
            "(line 231,col 9)-(line 231,col 29)",
            "(line 232,col 9)-(line 237,col 9)",
            "(line 238,col 9)-(line 238,col 25)",
            "(line 240,col 9)-(line 240,col 38)",
            "(line 241,col 9)-(line 241,col 35)",
            "(line 242,col 9)-(line 242,col 55)",
            "(line 244,col 9)-(line 244,col 21)",
            "(line 245,col 9)-(line 250,col 9)",
            "(line 251,col 9)-(line 251,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultMultiValueCategoryDataset d1 \n                = new DefaultMultiValueCategoryDataset();\n        DefaultMultiValueCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultMultiValueCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // try a dataset with some content...\n        List values = new ArrayList();\n        values.add(new Integer(99));\n        d1.add(values, \"R1\", \"C1\");\n        try {\n            d2 = (DefaultMultiValueCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // check that the clone doesn't share the same underlying arrays.\n        List values2 = new ArrayList();\n        values2.add(new Integer(111));\n        d1.add(values2, \"R2\", \"C2\");\n        assertFalse(d1.equals(d2));\n        d2.add(values2, \"R2\", \"C2\");\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 257,
        "end_line": 292,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 258,col 9)-(line 259,col 57)",
            "(line 260,col 9)-(line 260,col 51)",
            "(line 261,col 9)-(line 266,col 9)",
            "(line 267,col 9)-(line 267,col 29)",
            "(line 268,col 9)-(line 268,col 51)",
            "(line 269,col 9)-(line 269,col 34)",
            "(line 272,col 9)-(line 272,col 38)",
            "(line 273,col 9)-(line 273,col 36)",
            "(line 274,col 9)-(line 274,col 35)",
            "(line 275,col 9)-(line 280,col 9)",
            "(line 281,col 9)-(line 281,col 29)",
            "(line 282,col 9)-(line 282,col 51)",
            "(line 283,col 9)-(line 283,col 34)",
            "(line 286,col 9)-(line 286,col 39)",
            "(line 287,col 9)-(line 287,col 38)",
            "(line 288,col 9)-(line 288,col 36)",
            "(line 289,col 9)-(line 289,col 35)",
            "(line 290,col 9)-(line 290,col 36)",
            "(line 291,col 9)-(line 291,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/BoxAndWhiskerCalculatorTests.java",
        "signature": "org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BoxAndWhiskerCalculatorTests.class);\n    }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 65)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/BoxAndWhiskerCalculatorTests.java",
        "signature": "org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests.BoxAndWhiskerCalculatorTests(java.lang.String)",
        "snippet": "    public BoxAndWhiskerCalculatorTests(String name) {\n        super(name);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/BoxAndWhiskerCalculatorTests.java",
        "signature": "org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests.testCalculateBoxAndWhiskerStatistics()",
        "snippet": "    public void testCalculateBoxAndWhiskerStatistics() {\n        \n        // try null list\n        boolean pass = false;\n        try {\n            BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n                \n        // try a list containing a single value\n        List values = new ArrayList();\n        values.add(new Double(1.1));\n        BoxAndWhiskerItem item \n            = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(values);\n        assertEquals(1.1, item.getMean().doubleValue(), EPSILON);\n        assertEquals(1.1, item.getMedian().doubleValue(), EPSILON);\n        assertEquals(1.1, item.getQ1().doubleValue(), EPSILON);\n        assertEquals(1.1, item.getQ3().doubleValue(), EPSILON);       \n    }",
        "begin_line": 79,
        "end_line": 100,
        "comment": "\n     * Some checks for the calculateBoxAndWhiskerStatistics() method.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 29)",
            "(line 83,col 9)-(line 88,col 9)",
            "(line 89,col 9)-(line 89,col 25)",
            "(line 92,col 9)-(line 92,col 38)",
            "(line 93,col 9)-(line 93,col 36)",
            "(line 94,col 9)-(line 95,col 79)",
            "(line 96,col 9)-(line 96,col 65)",
            "(line 97,col 9)-(line 97,col 67)",
            "(line 98,col 9)-(line 98,col 63)",
            "(line 99,col 9)-(line 99,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/BoxAndWhiskerCalculatorTests.java",
        "signature": "org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests.testCalculateQ1()",
        "snippet": "    public void testCalculateQ1() {\n        \n        // try null argument\n        boolean pass = false;\n        try {\n            BoxAndWhiskerCalculator.calculateQ1(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        List values = new ArrayList();\n        double q1 = BoxAndWhiskerCalculator.calculateQ1(values);\n        assertTrue(Double.isNaN(q1));\n        values.add(new Double(1.0));\n        q1 = BoxAndWhiskerCalculator.calculateQ1(values);\n        assertEquals(q1, 1.0, EPSILON);\n        values.add(new Double(2.0));\n        q1 = BoxAndWhiskerCalculator.calculateQ1(values);\n        assertEquals(q1, 1.0, EPSILON);\n        values.add(new Double(3.0));\n        q1 = BoxAndWhiskerCalculator.calculateQ1(values);\n        assertEquals(q1, 1.5, EPSILON);\n        values.add(new Double(4.0));\n        q1 = BoxAndWhiskerCalculator.calculateQ1(values);\n        assertEquals(q1, 1.5, EPSILON);\n    }",
        "begin_line": 107,
        "end_line": 134,
        "comment": "\n     * Tests the Q1 calculation.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 29)",
            "(line 111,col 9)-(line 116,col 9)",
            "(line 117,col 9)-(line 117,col 25)",
            "(line 119,col 9)-(line 119,col 38)",
            "(line 120,col 9)-(line 120,col 64)",
            "(line 121,col 9)-(line 121,col 37)",
            "(line 122,col 9)-(line 122,col 36)",
            "(line 123,col 9)-(line 123,col 57)",
            "(line 124,col 9)-(line 124,col 39)",
            "(line 125,col 9)-(line 125,col 36)",
            "(line 126,col 9)-(line 126,col 57)",
            "(line 127,col 9)-(line 127,col 39)",
            "(line 128,col 9)-(line 128,col 36)",
            "(line 129,col 9)-(line 129,col 57)",
            "(line 130,col 9)-(line 130,col 39)",
            "(line 131,col 9)-(line 131,col 36)",
            "(line 132,col 9)-(line 132,col 57)",
            "(line 133,col 9)-(line 133,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/BoxAndWhiskerCalculatorTests.java",
        "signature": "org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests.testCalculateQ3()",
        "snippet": "    public void testCalculateQ3() {\n        // try null argument\n        boolean pass = false;\n        try {\n            BoxAndWhiskerCalculator.calculateQ3(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        List values = new ArrayList();\n        double q3 = BoxAndWhiskerCalculator.calculateQ3(values);\n        assertTrue(Double.isNaN(q3));\n        values.add(new Double(1.0));\n        q3 = BoxAndWhiskerCalculator.calculateQ3(values);\n        assertEquals(q3, 1.0, EPSILON);\n        values.add(new Double(2.0));\n        q3 = BoxAndWhiskerCalculator.calculateQ3(values);\n        assertEquals(q3, 2.0, EPSILON);\n        values.add(new Double(3.0));\n        q3 = BoxAndWhiskerCalculator.calculateQ3(values);\n        assertEquals(q3, 2.5, EPSILON);\n        values.add(new Double(4.0));\n        q3 = BoxAndWhiskerCalculator.calculateQ3(values);\n        assertEquals(q3, 3.5, EPSILON);\n    }",
        "begin_line": 139,
        "end_line": 165,
        "comment": "\n     * Tests the Q3 calculation.\n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 29)",
            "(line 142,col 9)-(line 147,col 9)",
            "(line 148,col 9)-(line 148,col 25)",
            "(line 150,col 9)-(line 150,col 38)",
            "(line 151,col 9)-(line 151,col 64)",
            "(line 152,col 9)-(line 152,col 37)",
            "(line 153,col 9)-(line 153,col 36)",
            "(line 154,col 9)-(line 154,col 57)",
            "(line 155,col 9)-(line 155,col 39)",
            "(line 156,col 9)-(line 156,col 36)",
            "(line 157,col 9)-(line 157,col 57)",
            "(line 158,col 9)-(line 158,col 39)",
            "(line 159,col 9)-(line 159,col 36)",
            "(line 160,col 9)-(line 160,col 57)",
            "(line 161,col 9)-(line 161,col 39)",
            "(line 162,col 9)-(line 162,col 36)",
            "(line 163,col 9)-(line 163,col 57)",
            "(line 164,col 9)-(line 164,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/BoxAndWhiskerCalculatorTests.java",
        "signature": "org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests.test1593149()",
        "snippet": "    public void test1593149() {\n        ArrayList theList = new ArrayList(5);\n        theList.add(0, new Double(1.0));\n        theList.add(1, new Double(2.0));\n        theList.add(2, new Double(Double.NaN));\n        theList.add(3, new Double(3.0));\n        theList.add(4, new Double(4.0));\n        BoxAndWhiskerItem theItem =\n            BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(theList);\n        assertEquals(1.0, theItem.getMinRegularValue().doubleValue(), EPSILON);\n        assertEquals(4.0, theItem.getMaxRegularValue().doubleValue(), EPSILON);\n    }",
        "begin_line": 170,
        "end_line": 181,
        "comment": "\n     * The test case included in bug report 1593149.\n     ",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 45)",
            "(line 172,col 9)-(line 172,col 40)",
            "(line 173,col 9)-(line 173,col 40)",
            "(line 174,col 9)-(line 174,col 47)",
            "(line 175,col 9)-(line 175,col 40)",
            "(line 176,col 9)-(line 176,col 40)",
            "(line 177,col 9)-(line 178,col 78)",
            "(line 179,col 9)-(line 179,col 79)",
            "(line 180,col 9)-(line 180,col 79)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramBinTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramBinTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramBinTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(HistogramBinTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramBinTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramBinTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramBinTests.HistogramBinTests(java.lang.String)",
        "snippet": "    public HistogramBinTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramBinTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramBinTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramBinTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        double start = 10.0;\n        double end = 20.0;\n        HistogramBin b1 = new HistogramBin(start, end);\n        HistogramBin b2 = new HistogramBin(start, end);\n        \n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b1));\n\n    }",
        "begin_line": 82,
        "end_line": 92,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 28)",
            "(line 85,col 9)-(line 85,col 26)",
            "(line 86,col 9)-(line 86,col 55)",
            "(line 87,col 9)-(line 87,col 55)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 90,col 9)-(line 90,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramBinTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramBinTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramBinTests.testCloning()",
        "snippet": "    public void testCloning() {\n        double start = 10.0;\n        double end = 20.0;\n        HistogramBin b1 = new HistogramBin(start, end);\n        HistogramBin b2 = null;\n        try {\n            b2 = (HistogramBin) b1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(b1 != b2);\n        assertTrue(b1.getClass() == b2.getClass());\n        assertTrue(b1.equals(b2));\n    }",
        "begin_line": 97,
        "end_line": 111,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 28)",
            "(line 99,col 9)-(line 99,col 26)",
            "(line 100,col 9)-(line 100,col 55)",
            "(line 101,col 9)-(line 101,col 31)",
            "(line 102,col 9)-(line 107,col 9)",
            "(line 108,col 9)-(line 108,col 29)",
            "(line 109,col 9)-(line 109,col 51)",
            "(line 110,col 9)-(line 110,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.HistogramBinTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/HistogramBinTests.java",
        "signature": "org.jfree.data.statistics.junit.HistogramBinTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        double start = 10.0;\n        double end = 20.0;\n        HistogramBin b1 = new HistogramBin(start, end);\n        HistogramBin b2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(b1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            b2 = (HistogramBin) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(b1, b2);\n\n    }",
        "begin_line": 116,
        "end_line": 140,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 28)",
            "(line 119,col 9)-(line 119,col 26)",
            "(line 120,col 9)-(line 120,col 55)",
            "(line 121,col 9)-(line 121,col 31)",
            "(line 123,col 9)-(line 137,col 9)",
            "(line 138,col 9)-(line 138,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.SimpleHistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/SimpleHistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.SimpleHistogramDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(SimpleHistogramDatasetTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.SimpleHistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/SimpleHistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.SimpleHistogramDatasetTests.SimpleHistogramDatasetTests(java.lang.String)",
        "snippet": "    public SimpleHistogramDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.SimpleHistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/SimpleHistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.SimpleHistogramDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        SimpleHistogramDataset d1 = new SimpleHistogramDataset(\"Dataset 1\");\n        SimpleHistogramDataset d2 = new SimpleHistogramDataset(\"Dataset 1\");\n        assertTrue(d1.equals(d2));\n        \n        d1.addBin(new SimpleHistogramBin(1.0, 2.0));\n        assertFalse(d1.equals(d2));\n        d2.addBin(new SimpleHistogramBin(1.0, 2.0));\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 84,
        "end_line": 93,
        "comment": "\n     * Ensure that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 76)",
            "(line 86,col 9)-(line 86,col 76)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 89,col 9)-(line 89,col 52)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 52)",
            "(line 92,col 9)-(line 92,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.SimpleHistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/SimpleHistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.SimpleHistogramDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        SimpleHistogramDataset d1 = new SimpleHistogramDataset(\"Dataset 1\");\n        SimpleHistogramDataset d2 = null;\n        try {\n            d2 = (SimpleHistogramDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // check that clone is independent of the original\n        d2.addBin(new SimpleHistogramBin(2.0, 3.0));\n        d2.addObservation(2.3);\n        assertFalse(d1.equals(d2));\n    }",
        "begin_line": 98,
        "end_line": 115,
        "comment": "\n     * Some checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 76)",
            "(line 100,col 9)-(line 100,col 41)",
            "(line 101,col 9)-(line 106,col 9)",
            "(line 107,col 9)-(line 107,col 29)",
            "(line 108,col 9)-(line 108,col 51)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 112,col 9)-(line 112,col 52)",
            "(line 113,col 9)-(line 113,col 31)",
            "(line 114,col 9)-(line 114,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.SimpleHistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/SimpleHistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.SimpleHistogramDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        SimpleHistogramDataset d1 = new SimpleHistogramDataset(\"D1\");\n        SimpleHistogramDataset d2 = null;        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            d2 = (SimpleHistogramDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n    }",
        "begin_line": 120,
        "end_line": 137,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 69)",
            "(line 122,col 9)-(line 122,col 41)",
            "(line 123,col 9)-(line 135,col 9)",
            "(line 136,col 9)-(line 136,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.SimpleHistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/SimpleHistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.SimpleHistogramDatasetTests.testClearObservations()",
        "snippet": "    public void testClearObservations() {\n        SimpleHistogramDataset d1 = new SimpleHistogramDataset(\"D1\");\n        d1.clearObservations();\n        assertEquals(0, d1.getItemCount(0));\n        d1.addBin(new SimpleHistogramBin(0.0, 1.0));\n        d1.addObservation(0.5);\n        assertEquals(1.0, d1.getYValue(0, 0), EPSILON);\n    }",
        "begin_line": 144,
        "end_line": 151,
        "comment": "\n     * Some checks for the clearObservations() method.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 69)",
            "(line 146,col 9)-(line 146,col 31)",
            "(line 147,col 9)-(line 147,col 44)",
            "(line 148,col 9)-(line 148,col 52)",
            "(line 149,col 9)-(line 149,col 31)",
            "(line 150,col 9)-(line 150,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.SimpleHistogramDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/SimpleHistogramDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.SimpleHistogramDatasetTests.testRemoveAllBins()",
        "snippet": "    public void testRemoveAllBins() {\n        SimpleHistogramDataset d1 = new SimpleHistogramDataset(\"D1\");\n        d1.addBin(new SimpleHistogramBin(0.0, 1.0));\n        d1.addObservation(0.5);\n        d1.addBin(new SimpleHistogramBin(2.0, 3.0));\n        assertEquals(2, d1.getItemCount(0));\n        d1.removeAllBins();\n        assertEquals(0, d1.getItemCount(0));\n    }",
        "begin_line": 156,
        "end_line": 164,
        "comment": "\n     * Some checks for the removeAllBins() method.\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 69)",
            "(line 158,col 9)-(line 158,col 52)",
            "(line 159,col 9)-(line 159,col 31)",
            "(line 160,col 9)-(line 160,col 52)",
            "(line 161,col 9)-(line 161,col 44)",
            "(line 162,col 9)-(line 162,col 27)",
            "(line 163,col 9)-(line 163,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DataStatisticsPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DataStatisticsPackageTests.java",
        "signature": "org.jfree.data.statistics.junit.DataStatisticsPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.data.statistics\");\n        suite.addTestSuite(BoxAndWhiskerCalculatorTests.class);\n        suite.addTestSuite(BoxAndWhiskerItemTests.class);\n        suite.addTestSuite(DefaultBoxAndWhiskerCategoryDatasetTests.class);\n        suite.addTestSuite(DefaultMultiValueCategoryDatasetTests.class);\n        suite.addTestSuite(DefaultStatisticalCategoryDatasetTests.class);\n        suite.addTestSuite(HistogramBinTests.class);\n        suite.addTestSuite(HistogramDatasetTests.class);\n        suite.addTestSuite(MeanAndStandardDeviationTests.class);\n        suite.addTestSuite(RegressionTests.class);\n        suite.addTestSuite(SimpleHistogramBinTests.class);\n        suite.addTestSuite(SimpleHistogramDatasetTests.class);\n        suite.addTestSuite(StatisticsTests.class);\n        return suite;\n    }",
        "begin_line": 64,
        "end_line": 79,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 69)",
            "(line 66,col 9)-(line 66,col 63)",
            "(line 67,col 9)-(line 67,col 57)",
            "(line 68,col 9)-(line 68,col 75)",
            "(line 69,col 9)-(line 69,col 72)",
            "(line 70,col 9)-(line 70,col 73)",
            "(line 71,col 9)-(line 71,col 52)",
            "(line 72,col 9)-(line 72,col 56)",
            "(line 73,col 9)-(line 73,col 64)",
            "(line 74,col 9)-(line 74,col 50)",
            "(line 75,col 9)-(line 75,col 58)",
            "(line 76,col 9)-(line 76,col 62)",
            "(line 77,col 9)-(line 77,col 50)",
            "(line 78,col 9)-(line 78,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DataStatisticsPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DataStatisticsPackageTests.java",
        "signature": "org.jfree.data.statistics.junit.DataStatisticsPackageTests.DataStatisticsPackageTests(java.lang.String)",
        "snippet": "    public DataStatisticsPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the test suite name.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DataStatisticsPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DataStatisticsPackageTests.java",
        "signature": "org.jfree.data.statistics.junit.DataStatisticsPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultStatisticalCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultStatisticalCategoryDatasetTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 75)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultStatisticalCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.DefaultStatisticalCategoryDatasetTests(java.lang.String)",
        "snippet": "    public DefaultStatisticalCategoryDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultStatisticalCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testGetRangeBounds()",
        "snippet": "    public void testGetRangeBounds() {\n        DefaultStatisticalCategoryDataset d \n                = new DefaultStatisticalCategoryDataset();\n        \n        // an empty dataset should return null for bounds\n        assertNull(d.getRangeBounds(true));\n        \n        // try a dataset with a single value\n        d.add(4.5, 1.0, \"R1\", \"C1\");\n        assertEquals(new Range(4.5, 4.5), d.getRangeBounds(false));\n        assertEquals(new Range(3.5, 5.5), d.getRangeBounds(true));\n        \n        // try a dataset with two values\n        d.add(0.5, 2.0, \"R1\", \"C2\");\n        assertEquals(new Range(0.5, 4.5), d.getRangeBounds(false));\n        assertEquals(new Range(-1.5, 5.5), d.getRangeBounds(true));\n        \n        // try a Double.NaN\n        d.add(Double.NaN, 0.0, \"R1\", \"C3\");\n        assertEquals(new Range(0.5, 4.5), d.getRangeBounds(false));\n        assertEquals(new Range(-1.5, 5.5), d.getRangeBounds(true));\n\n        // try a Double.NEGATIVE_INFINITY\n        d.add(Double.NEGATIVE_INFINITY, 0.0, \"R1\", \"C3\");\n        assertEquals(new Range(Double.NEGATIVE_INFINITY, 4.5), \n                d.getRangeBounds(false));\n        assertEquals(new Range(Double.NEGATIVE_INFINITY, 5.5), \n                d.getRangeBounds(true));\n\n        // try a Double.POSITIVE_INFINITY\n        d.add(Double.POSITIVE_INFINITY, 0.0, \"R1\", \"C3\");\n        assertEquals(new Range(0.5, Double.POSITIVE_INFINITY), \n                d.getRangeBounds(false));\n        assertEquals(new Range(-1.5, Double.POSITIVE_INFINITY), \n                d.getRangeBounds(true));\n    }",
        "begin_line": 88,
        "end_line": 123,
        "comment": "\n     * Some checks for the getRangeBounds() method.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 90,col 58)",
            "(line 93,col 9)-(line 93,col 43)",
            "(line 96,col 9)-(line 96,col 36)",
            "(line 97,col 9)-(line 97,col 67)",
            "(line 98,col 9)-(line 98,col 66)",
            "(line 101,col 9)-(line 101,col 36)",
            "(line 102,col 9)-(line 102,col 67)",
            "(line 103,col 9)-(line 103,col 67)",
            "(line 106,col 9)-(line 106,col 43)",
            "(line 107,col 9)-(line 107,col 67)",
            "(line 108,col 9)-(line 108,col 67)",
            "(line 111,col 9)-(line 111,col 57)",
            "(line 112,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 115,col 40)",
            "(line 118,col 9)-(line 118,col 57)",
            "(line 119,col 9)-(line 120,col 41)",
            "(line 121,col 9)-(line 122,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultStatisticalCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultStatisticalCategoryDataset d1 \n                = new DefaultStatisticalCategoryDataset();\n        DefaultStatisticalCategoryDataset d2 \n                = new DefaultStatisticalCategoryDataset();\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n\n    }",
        "begin_line": 128,
        "end_line": 136,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 130,col 58)",
            "(line 131,col 9)-(line 132,col 58)",
            "(line 133,col 9)-(line 133,col 34)",
            "(line 134,col 9)-(line 134,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultStatisticalCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultStatisticalCategoryDataset d1 \n                = new DefaultStatisticalCategoryDataset();\n        d1.add(1.1, 2.2, \"R1\", \"C1\");\n        d1.add(3.3, 4.4, \"R1\", \"C2\");\n        d1.add(null, new Double(5.5), \"R1\", \"C3\");\n        d1.add(new Double(6.6), null, \"R2\", \"C3\");\n        DefaultStatisticalCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultStatisticalCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            fail(e.toString());\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // check independence\n        d1.add(1.1, 2.2, \"R3\", \"C1\");\n        assertFalse(d1.equals(d2));\n    }",
        "begin_line": 141,
        "end_line": 162,
        "comment": "\n     * Some checks for cloning.\n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 143,col 58)",
            "(line 144,col 9)-(line 144,col 37)",
            "(line 145,col 9)-(line 145,col 37)",
            "(line 146,col 9)-(line 146,col 50)",
            "(line 147,col 9)-(line 147,col 50)",
            "(line 148,col 9)-(line 148,col 52)",
            "(line 149,col 9)-(line 154,col 9)",
            "(line 155,col 9)-(line 155,col 29)",
            "(line 156,col 9)-(line 156,col 51)",
            "(line 157,col 9)-(line 157,col 34)",
            "(line 160,col 9)-(line 160,col 37)",
            "(line 161,col 9)-(line 161,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultStatisticalCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testSerialization1()",
        "snippet": "    public void testSerialization1() {\n        DefaultStatisticalCategoryDataset d1 \n            = new DefaultStatisticalCategoryDataset();\n        d1.add(1.1, 2.2, \"R1\", \"C1\");\n        d1.add(3.3, 4.4, \"R1\", \"C2\");\n        d1.add(null, new Double(5.5), \"R1\", \"C3\");\n        d1.add(new Double(6.6), null, \"R2\", \"C3\");\n        DefaultStatisticalCategoryDataset d2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            d2 = (DefaultStatisticalCategoryDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(d1, d2);\n    }",
        "begin_line": 167,
        "end_line": 190,
        "comment": "\n     * Check serialization of a default instance.\n     ",
        "child_ranges": [
            "(line 168,col 9)-(line 169,col 54)",
            "(line 170,col 9)-(line 170,col 37)",
            "(line 171,col 9)-(line 171,col 37)",
            "(line 172,col 9)-(line 172,col 50)",
            "(line 173,col 9)-(line 173,col 50)",
            "(line 174,col 9)-(line 174,col 52)",
            "(line 175,col 9)-(line 188,col 9)",
            "(line 189,col 9)-(line 189,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultStatisticalCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n        DefaultStatisticalCategoryDataset d1 \n            = new DefaultStatisticalCategoryDataset();\n        d1.add(1.2, 3.4, \"Row 1\", \"Column 1\");\n        DefaultStatisticalCategoryDataset d2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            d2 = (DefaultStatisticalCategoryDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(d1, d2);\n    }",
        "begin_line": 195,
        "end_line": 215,
        "comment": "\n     * Check serialization of a more complex instance.\n     ",
        "child_ranges": [
            "(line 196,col 9)-(line 197,col 54)",
            "(line 198,col 9)-(line 198,col 46)",
            "(line 199,col 9)-(line 199,col 52)",
            "(line 200,col 9)-(line 213,col 9)",
            "(line 214,col 9)-(line 214,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultStatisticalCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testAdd()",
        "snippet": "    public void testAdd() {\n        DefaultStatisticalCategoryDataset d1 \n                = new DefaultStatisticalCategoryDataset();\n        d1.add(1.0, 2.0, \"R1\", \"C1\");\n        assertEquals(1.0, d1.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(2.0, d1.getStdDevValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        \n        // overwrite the value\n        d1.add(10.0, 20.0, \"R1\", \"C1\");\n        assertEquals(10.0, d1.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(20.0, d1.getStdDevValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n    }",
        "begin_line": 222,
        "end_line": 233,
        "comment": "\n     * Some checks for the add() method.\n     ",
        "child_ranges": [
            "(line 223,col 9)-(line 224,col 58)",
            "(line 225,col 9)-(line 225,col 37)",
            "(line 226,col 9)-(line 226,col 74)",
            "(line 227,col 9)-(line 227,col 80)",
            "(line 230,col 9)-(line 230,col 39)",
            "(line 231,col 9)-(line 231,col 75)",
            "(line 232,col 9)-(line 232,col 81)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultStatisticalCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testGetRangeLowerBound()",
        "snippet": "    public void testGetRangeLowerBound() {\n        DefaultStatisticalCategoryDataset d1 \n                = new DefaultStatisticalCategoryDataset();\n        d1.add(1.0, 2.0, \"R1\", \"C1\");\n        assertEquals(1.0, d1.getRangeLowerBound(false), EPSILON);\n        assertEquals(-1.0, d1.getRangeLowerBound(true), EPSILON);\n    }",
        "begin_line": 238,
        "end_line": 244,
        "comment": "\n     * Some checks for the getRangeLowerBound() method.\n     ",
        "child_ranges": [
            "(line 239,col 9)-(line 240,col 58)",
            "(line 241,col 9)-(line 241,col 37)",
            "(line 242,col 9)-(line 242,col 65)",
            "(line 243,col 9)-(line 243,col 65)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultStatisticalCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testGetRangeUpperBound()",
        "snippet": "    public void testGetRangeUpperBound() {\n        DefaultStatisticalCategoryDataset d1 \n                = new DefaultStatisticalCategoryDataset();\n        d1.add(1.0, 2.0, \"R1\", \"C1\");\n        assertEquals(1.0, d1.getRangeUpperBound(false), EPSILON);\n        assertEquals(3.0, d1.getRangeUpperBound(true), EPSILON);\n    }",
        "begin_line": 249,
        "end_line": 255,
        "comment": "\n     * Some checks for the getRangeUpperBound() method.\n     ",
        "child_ranges": [
            "(line 250,col 9)-(line 251,col 58)",
            "(line 252,col 9)-(line 252,col 37)",
            "(line 253,col 9)-(line 253,col 65)",
            "(line 254,col 9)-(line 254,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultStatisticalCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testGetRangeBounds2()",
        "snippet": "    public void testGetRangeBounds2() {\n        DefaultStatisticalCategoryDataset d1 \n                = new DefaultStatisticalCategoryDataset();\n        d1.add(1.0, 2.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0), d1.getRangeBounds(false));\n        assertEquals(new Range(-1.0, 3.0), d1.getRangeBounds(true));\n        \n        d1.add(10.0, 20.0, \"R1\", \"C1\");\n        assertEquals(new Range(10.0, 10.0), d1.getRangeBounds(false));\n        assertEquals(new Range(-10.0, 30.0), d1.getRangeBounds(true));\n    }",
        "begin_line": 260,
        "end_line": 270,
        "comment": "\n     * Some checks for the getRangeBounds() method.\n     ",
        "child_ranges": [
            "(line 261,col 9)-(line 262,col 58)",
            "(line 263,col 9)-(line 263,col 37)",
            "(line 264,col 9)-(line 264,col 68)",
            "(line 265,col 9)-(line 265,col 68)",
            "(line 267,col 9)-(line 267,col 39)",
            "(line 268,col 9)-(line 268,col 70)",
            "(line 269,col 9)-(line 269,col 70)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultStatisticalCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testRemove()",
        "snippet": "    public void testRemove() {\n        DefaultStatisticalCategoryDataset data\n                = new DefaultStatisticalCategoryDataset();\n        \n        boolean pass = false;\n        try {\n            data.remove(\"R1\", \"R2\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        data.add(1.0, 0.5, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0), data.getRangeBounds(false));\n        assertEquals(new Range(0.5, 1.5), data.getRangeBounds(true));\n        \n        data.add(1.4, 0.2, \"R2\", \"C1\");\n        \n        assertEquals(1.0, data.getRangeLowerBound(false), EPSILON);\n        assertEquals(1.4, data.getRangeUpperBound(false), EPSILON);\n        assertEquals(0.5, data.getRangeLowerBound(true), EPSILON);\n        assertEquals(1.6, data.getRangeUpperBound(true), EPSILON);\n        \n        data.remove(\"R1\", \"C1\");\n\n        assertEquals(1.4, data.getRangeLowerBound(false), EPSILON);\n        assertEquals(1.4, data.getRangeUpperBound(false), EPSILON);\n        assertEquals(1.2, data.getRangeLowerBound(true), EPSILON);\n        assertEquals(1.6, data.getRangeUpperBound(true), EPSILON);\n    }",
        "begin_line": 275,
        "end_line": 304,
        "comment": "\n     * Some checks for the remove method.\n     ",
        "child_ranges": [
            "(line 276,col 9)-(line 277,col 58)",
            "(line 279,col 9)-(line 279,col 29)",
            "(line 280,col 9)-(line 285,col 9)",
            "(line 286,col 9)-(line 286,col 25)",
            "(line 287,col 9)-(line 287,col 39)",
            "(line 288,col 9)-(line 288,col 70)",
            "(line 289,col 9)-(line 289,col 69)",
            "(line 291,col 9)-(line 291,col 39)",
            "(line 293,col 9)-(line 293,col 67)",
            "(line 294,col 9)-(line 294,col 67)",
            "(line 295,col 9)-(line 295,col 66)",
            "(line 296,col 9)-(line 296,col 66)",
            "(line 298,col 9)-(line 298,col 32)",
            "(line 300,col 9)-(line 300,col 67)",
            "(line 301,col 9)-(line 301,col 67)",
            "(line 302,col 9)-(line 302,col 66)",
            "(line 303,col 9)-(line 303,col 66)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.RegressionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/RegressionTests.java",
        "signature": "org.jfree.data.statistics.junit.RegressionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(RegressionTests.class);\n    }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.RegressionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/RegressionTests.java",
        "signature": "org.jfree.data.statistics.junit.RegressionTests.RegressionTests(java.lang.String)",
        "snippet": "    public RegressionTests(String name) {\n        super(name);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.RegressionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/RegressionTests.java",
        "signature": "org.jfree.data.statistics.junit.RegressionTests.testOLSRegression1a()",
        "snippet": "    public void testOLSRegression1a() {\n\n        double[][] data = createSampleData1();\n        double[] result1 = Regression.getOLSRegression(data);\n        assertEquals(.25680930, result1[0], 0.0000001);\n        assertEquals(0.72792106, result1[1], 0.0000001);\n\n    }",
        "begin_line": 79,
        "end_line": 86,
        "comment": "\n     * Checks the results of an OLS regression on sample dataset 1.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 46)",
            "(line 82,col 9)-(line 82,col 61)",
            "(line 83,col 9)-(line 83,col 55)",
            "(line 84,col 9)-(line 84,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.RegressionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/RegressionTests.java",
        "signature": "org.jfree.data.statistics.junit.RegressionTests.testOLSRegression1b()",
        "snippet": "    public void testOLSRegression1b() {\n\n        double[][] data = createSampleData1();\n\n        XYSeries series = new XYSeries(\"Test\");\n        for (int i = 0; i < 11; i++) {\n            series.add(data[i][0], data[i][1]);\n        }\n        XYDataset ds = new XYSeriesCollection(series);\n        double[] result2 = Regression.getOLSRegression(ds, 0);\n\n        assertEquals(.25680930, result2[0], 0.0000001);\n        assertEquals(0.72792106, result2[1], 0.0000001);\n\n    }",
        "begin_line": 92,
        "end_line": 106,
        "comment": "\n     * Checks the results of an OLS regression on sample dataset 1 AFTER \n     * converting it to an XYSeries.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 46)",
            "(line 96,col 9)-(line 96,col 47)",
            "(line 97,col 9)-(line 99,col 9)",
            "(line 100,col 9)-(line 100,col 54)",
            "(line 101,col 9)-(line 101,col 62)",
            "(line 103,col 9)-(line 103,col 55)",
            "(line 104,col 9)-(line 104,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.RegressionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/RegressionTests.java",
        "signature": "org.jfree.data.statistics.junit.RegressionTests.testPowerRegression1a()",
        "snippet": "    public void testPowerRegression1a() {\n\n        double[][] data = createSampleData1();\n        double[] result = Regression.getPowerRegression(data);\n        assertEquals(0.91045813, result[0], 0.0000001);\n        assertEquals(0.88918346, result[1], 0.0000001);\n\n    }",
        "begin_line": 111,
        "end_line": 118,
        "comment": "\n     * Checks the results of a power regression on sample dataset 1.\n     ",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 46)",
            "(line 114,col 9)-(line 114,col 62)",
            "(line 115,col 9)-(line 115,col 55)",
            "(line 116,col 9)-(line 116,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.RegressionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/RegressionTests.java",
        "signature": "org.jfree.data.statistics.junit.RegressionTests.testPowerRegression1b()",
        "snippet": "    public void testPowerRegression1b() {\n\n        double[][] data = createSampleData1();\n\n        XYSeries series = new XYSeries(\"Test\");\n        for (int i = 0; i < 11; i++) {\n            series.add(data[i][0], data[i][1]);\n        }\n        XYDataset ds = new XYSeriesCollection(series);\n        double[] result = Regression.getPowerRegression(ds, 0);\n\n        assertEquals(0.91045813, result[0], 0.0000001);\n        assertEquals(0.88918346, result[1], 0.0000001);\n\n    }",
        "begin_line": 124,
        "end_line": 138,
        "comment": "\n     * Checks the results of a power regression on sample dataset 1 AFTER \n     * converting it to an XYSeries.\n     ",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 46)",
            "(line 128,col 9)-(line 128,col 47)",
            "(line 129,col 9)-(line 131,col 9)",
            "(line 132,col 9)-(line 132,col 54)",
            "(line 133,col 9)-(line 133,col 63)",
            "(line 135,col 9)-(line 135,col 55)",
            "(line 136,col 9)-(line 136,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.RegressionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/RegressionTests.java",
        "signature": "org.jfree.data.statistics.junit.RegressionTests.testOLSRegression2a()",
        "snippet": "    public void testOLSRegression2a() {\n\n        double[][] data = createSampleData2();\n        double[] result = Regression.getOLSRegression(data);\n        assertEquals(53.9729697, result[0], 0.0000001);\n        assertEquals(-4.1823030, result[1], 0.0000001);\n\n    }",
        "begin_line": 143,
        "end_line": 150,
        "comment": "\n     * Checks the results of an OLS regression on sample dataset 2.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 46)",
            "(line 146,col 9)-(line 146,col 60)",
            "(line 147,col 9)-(line 147,col 55)",
            "(line 148,col 9)-(line 148,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.RegressionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/RegressionTests.java",
        "signature": "org.jfree.data.statistics.junit.RegressionTests.testOLSRegression2b()",
        "snippet": "    public void testOLSRegression2b() {\n\n        double[][] data = createSampleData2();\n\n        XYSeries series = new XYSeries(\"Test\");\n        for (int i = 0; i < 10; i++) {\n            series.add(data[i][0], data[i][1]);\n        }\n        XYDataset ds = new XYSeriesCollection(series);\n        double[] result = Regression.getOLSRegression(ds, 0);\n\n        assertEquals(53.9729697, result[0], 0.0000001);\n        assertEquals(-4.1823030, result[1], 0.0000001);\n\n    }",
        "begin_line": 156,
        "end_line": 170,
        "comment": "\n     * Checks the results of an OLS regression on sample dataset 2 AFTER \n     * converting it to an XYSeries.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 46)",
            "(line 160,col 9)-(line 160,col 47)",
            "(line 161,col 9)-(line 163,col 9)",
            "(line 164,col 9)-(line 164,col 54)",
            "(line 165,col 9)-(line 165,col 61)",
            "(line 167,col 9)-(line 167,col 55)",
            "(line 168,col 9)-(line 168,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.RegressionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/RegressionTests.java",
        "signature": "org.jfree.data.statistics.junit.RegressionTests.testPowerRegression2a()",
        "snippet": "    public void testPowerRegression2a() {\n\n        double[][] data = createSampleData2();\n        double[] result = Regression.getPowerRegression(data);\n        assertEquals(106.1241681, result[0], 0.0000001);\n        assertEquals(-0.8466615, result[1], 0.0000001);\n\n    }",
        "begin_line": 175,
        "end_line": 182,
        "comment": "\n     * Checks the results of a power regression on sample dataset 2.\n     ",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 46)",
            "(line 178,col 9)-(line 178,col 62)",
            "(line 179,col 9)-(line 179,col 56)",
            "(line 180,col 9)-(line 180,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.RegressionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/RegressionTests.java",
        "signature": "org.jfree.data.statistics.junit.RegressionTests.testPowerRegression2b()",
        "snippet": "    public void testPowerRegression2b() {\n\n        double[][] data = createSampleData2();\n\n        XYSeries series = new XYSeries(\"Test\");\n        for (int i = 0; i < 10; i++) {\n            series.add(data[i][0], data[i][1]);\n        }\n        XYDataset ds = new XYSeriesCollection(series);\n        double[] result = Regression.getPowerRegression(ds, 0);\n\n        assertEquals(106.1241681, result[0], 0.0000001);\n        assertEquals(-0.8466615, result[1], 0.0000001);\n\n    }",
        "begin_line": 188,
        "end_line": 202,
        "comment": "\n     * Checks the results of a power regression on sample dataset 2 AFTER \n     * converting it to an XYSeries.\n     ",
        "child_ranges": [
            "(line 190,col 9)-(line 190,col 46)",
            "(line 192,col 9)-(line 192,col 47)",
            "(line 193,col 9)-(line 195,col 9)",
            "(line 196,col 9)-(line 196,col 54)",
            "(line 197,col 9)-(line 197,col 63)",
            "(line 199,col 9)-(line 199,col 56)",
            "(line 200,col 9)-(line 200,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.RegressionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/RegressionTests.java",
        "signature": "org.jfree.data.statistics.junit.RegressionTests.createSampleData1()",
        "snippet": "    private double[][] createSampleData1() {\n\n        double[][] result = new double[11][2];\n\n        result[0][0] = 2.00;\n        result[0][1] = 1.60;\n        result[1][0] = 2.25;\n        result[1][1] = 2.00;\n        result[2][0] = 2.60;\n        result[2][1] = 1.80;\n        result[3][0] = 2.65;\n        result[3][1] = 2.80;\n        result[4][0] = 2.80;\n        result[4][1] = 2.10;\n        result[5][0] = 3.10;\n        result[5][1] = 2.00;\n        result[6][0] = 2.90;\n        result[6][1] = 2.65;\n        result[7][0] = 3.25;\n        result[7][1] = 2.25;\n        result[8][0] = 3.30;\n        result[8][1] = 2.60;\n        result[9][0] = 3.60;\n        result[9][1] = 3.00;\n        result[10][0] = 3.25;\n        result[10][1] = 3.10;\n\n        return result;\n\n    }",
        "begin_line": 212,
        "end_line": 241,
        "comment": "\n     * Creates and returns a sample dataset.\n     * <P>\n     * The data is taken from Table 11.2, page 313 of \"Understanding Statistics\"\n     * by Ott and Mendenhall (Duxbury Press).\n     *\n     * @return The sample data.\n     ",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 46)",
            "(line 216,col 9)-(line 216,col 28)",
            "(line 217,col 9)-(line 217,col 28)",
            "(line 218,col 9)-(line 218,col 28)",
            "(line 219,col 9)-(line 219,col 28)",
            "(line 220,col 9)-(line 220,col 28)",
            "(line 221,col 9)-(line 221,col 28)",
            "(line 222,col 9)-(line 222,col 28)",
            "(line 223,col 9)-(line 223,col 28)",
            "(line 224,col 9)-(line 224,col 28)",
            "(line 225,col 9)-(line 225,col 28)",
            "(line 226,col 9)-(line 226,col 28)",
            "(line 227,col 9)-(line 227,col 28)",
            "(line 228,col 9)-(line 228,col 28)",
            "(line 229,col 9)-(line 229,col 28)",
            "(line 230,col 9)-(line 230,col 28)",
            "(line 231,col 9)-(line 231,col 28)",
            "(line 232,col 9)-(line 232,col 28)",
            "(line 233,col 9)-(line 233,col 28)",
            "(line 234,col 9)-(line 234,col 28)",
            "(line 235,col 9)-(line 235,col 28)",
            "(line 236,col 9)-(line 236,col 29)",
            "(line 237,col 9)-(line 237,col 29)",
            "(line 239,col 9)-(line 239,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.RegressionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/RegressionTests.java",
        "signature": "org.jfree.data.statistics.junit.RegressionTests.createSampleData2()",
        "snippet": "    private double[][] createSampleData2() {\n\n        double[][] result = new double[10][2];\n\n        result[0][0] = 2;\n        result[0][1] = 56.27;\n        result[1][0] = 3;\n        result[1][1] = 41.32;\n        result[2][0] = 4;\n        result[2][1] = 31.45;\n        result[3][0] = 5;\n        result[3][1] = 30.05;\n        result[4][0] = 6;\n        result[4][1] = 24.69;\n        result[5][0] = 7;\n        result[5][1] = 19.78;\n        result[6][0] = 8;\n        result[6][1] = 20.94;\n        result[7][0] = 9;\n        result[7][1] = 16.73;\n        result[8][0] = 10;\n        result[8][1] = 14.21;\n        result[9][0] = 11;\n        result[9][1] = 12.44;\n\n        return result;\n\n    }",
        "begin_line": 248,
        "end_line": 275,
        "comment": "\n     * Creates a sample data set.\n     *\n     * @return The sample data.\n     ",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 46)",
            "(line 252,col 9)-(line 252,col 25)",
            "(line 253,col 9)-(line 253,col 29)",
            "(line 254,col 9)-(line 254,col 25)",
            "(line 255,col 9)-(line 255,col 29)",
            "(line 256,col 9)-(line 256,col 25)",
            "(line 257,col 9)-(line 257,col 29)",
            "(line 258,col 9)-(line 258,col 25)",
            "(line 259,col 9)-(line 259,col 29)",
            "(line 260,col 9)-(line 260,col 25)",
            "(line 261,col 9)-(line 261,col 29)",
            "(line 262,col 9)-(line 262,col 25)",
            "(line 263,col 9)-(line 263,col 29)",
            "(line 264,col 9)-(line 264,col 25)",
            "(line 265,col 9)-(line 265,col 29)",
            "(line 266,col 9)-(line 266,col 25)",
            "(line 267,col 9)-(line 267,col 29)",
            "(line 268,col 9)-(line 268,col 26)",
            "(line 269,col 9)-(line 269,col 29)",
            "(line 270,col 9)-(line 270,col 26)",
            "(line 271,col 9)-(line 271,col 29)",
            "(line 273,col 9)-(line 273,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.RangeTypeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/RangeTypeTests.java",
        "signature": "org.jfree.data.junit.RangeTypeTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(RangeTypeTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.RangeTypeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/RangeTypeTests.java",
        "signature": "org.jfree.data.junit.RangeTypeTests.RangeTypeTests(java.lang.String)",
        "snippet": "    public RangeTypeTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.RangeTypeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/RangeTypeTests.java",
        "signature": "org.jfree.data.junit.RangeTypeTests.testEquals()",
        "snippet": "    public void testEquals() {\n        assertEquals(RangeType.FULL, RangeType.FULL);\n        assertEquals(RangeType.NEGATIVE, RangeType.NEGATIVE);\n        assertEquals(RangeType.POSITIVE, RangeType.POSITIVE);\n        assertFalse(RangeType.FULL.equals(RangeType.NEGATIVE));\n        assertFalse(RangeType.FULL.equals(RangeType.POSITIVE));\n        assertFalse(RangeType.FULL.equals(null));\n        assertFalse(RangeType.NEGATIVE.equals(RangeType.FULL));\n        assertFalse(RangeType.NEGATIVE.equals(RangeType.POSITIVE));\n        assertFalse(RangeType.NEGATIVE.equals(null));\n        assertFalse(RangeType.POSITIVE.equals(RangeType.NEGATIVE));\n        assertFalse(RangeType.POSITIVE.equals(RangeType.FULL));\n        assertFalse(RangeType.POSITIVE.equals(null));\n    }",
        "begin_line": 82,
        "end_line": 95,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 53)",
            "(line 84,col 9)-(line 84,col 61)",
            "(line 85,col 9)-(line 85,col 61)",
            "(line 86,col 9)-(line 86,col 63)",
            "(line 87,col 9)-(line 87,col 63)",
            "(line 88,col 9)-(line 88,col 49)",
            "(line 89,col 9)-(line 89,col 63)",
            "(line 90,col 9)-(line 90,col 67)",
            "(line 91,col 9)-(line 91,col 53)",
            "(line 92,col 9)-(line 92,col 67)",
            "(line 93,col 9)-(line 93,col 63)",
            "(line 94,col 9)-(line 94,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.RangeTypeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/RangeTypeTests.java",
        "signature": "org.jfree.data.junit.RangeTypeTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        RangeType r1 = RangeType.FULL;\n        RangeType r2 = RangeType.FULL;\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 100,
        "end_line": 107,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 38)",
            "(line 102,col 9)-(line 102,col 38)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 104,col 9)-(line 104,col 31)",
            "(line 105,col 9)-(line 105,col 31)",
            "(line 106,col 9)-(line 106,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.RangeTypeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/RangeTypeTests.java",
        "signature": "org.jfree.data.junit.RangeTypeTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        RangeType r1 = RangeType.FULL;\n        RangeType r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (RangeType) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n        boolean same = r1 == r2;\n        assertEquals(true, same);        \n    }",
        "begin_line": 112,
        "end_line": 133,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 38)",
            "(line 114,col 9)-(line 114,col 28)",
            "(line 115,col 9)-(line 129,col 9)",
            "(line 130,col 9)-(line 130,col 29)",
            "(line 131,col 9)-(line 131,col 32)",
            "(line 132,col 9)-(line 132,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultKeyedValuesTests.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.DefaultKeyedValuesTests(java.lang.String)",
        "snippet": "    public DefaultKeyedValuesTests(String name) {\n        super(name);\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.setUp()",
        "snippet": "    protected void setUp() {\n        // no setup required\n    }",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testConstructor()",
        "snippet": "    public void testConstructor() {\n        DefaultKeyedValues d = new DefaultKeyedValues();\n        assertEquals(0, d.getItemCount());\n    }",
        "begin_line": 98,
        "end_line": 101,
        "comment": "\n     * Checks that a new instance is empty.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 56)",
            "(line 100,col 9)-(line 100,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testGetItemCount()",
        "snippet": "    public void testGetItemCount() {\n        DefaultKeyedValues d = new DefaultKeyedValues();\n        assertEquals(0, d.getItemCount());\n        d.addValue(\"A\", 1.0);\n        assertEquals(1, d.getItemCount());\n        d.addValue(\"B\", 2.0);\n        assertEquals(2, d.getItemCount());\n        d.clear();\n        assertEquals(0, d.getItemCount());        \n    }",
        "begin_line": 106,
        "end_line": 115,
        "comment": "\n     * Some checks for the getItemCount() method.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 56)",
            "(line 108,col 9)-(line 108,col 42)",
            "(line 109,col 9)-(line 109,col 29)",
            "(line 110,col 9)-(line 110,col 42)",
            "(line 111,col 9)-(line 111,col 29)",
            "(line 112,col 9)-(line 112,col 42)",
            "(line 113,col 9)-(line 113,col 18)",
            "(line 114,col 9)-(line 114,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testGetKeys()",
        "snippet": "    public void testGetKeys() {\n        DefaultKeyedValues d = new DefaultKeyedValues();\n        List keys = d.getKeys();\n        assertTrue(keys.isEmpty());\n        d.addValue(\"A\", 1.0);\n        keys = d.getKeys();\n        assertEquals(1, keys.size());\n        assertTrue(keys.contains(\"A\"));\n        d.addValue(\"B\", 2.0);\n        keys = d.getKeys();\n        assertEquals(2, keys.size());\n        assertTrue(keys.contains(\"A\"));\n        assertTrue(keys.contains(\"B\"));\n        d.clear();\n        keys = d.getKeys();\n        assertEquals(0, keys.size());        \n    }",
        "begin_line": 120,
        "end_line": 136,
        "comment": "\n     * Some checks for the getKeys() method.\n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 56)",
            "(line 122,col 9)-(line 122,col 32)",
            "(line 123,col 9)-(line 123,col 35)",
            "(line 124,col 9)-(line 124,col 29)",
            "(line 125,col 9)-(line 125,col 27)",
            "(line 126,col 9)-(line 126,col 37)",
            "(line 127,col 9)-(line 127,col 39)",
            "(line 128,col 9)-(line 128,col 29)",
            "(line 129,col 9)-(line 129,col 27)",
            "(line 130,col 9)-(line 130,col 37)",
            "(line 131,col 9)-(line 131,col 39)",
            "(line 132,col 9)-(line 132,col 39)",
            "(line 133,col 9)-(line 133,col 18)",
            "(line 134,col 9)-(line 134,col 27)",
            "(line 135,col 9)-(line 135,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testClear()",
        "snippet": "    public void testClear() {\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        v1.addValue(\"A\", 1.0);\n        v1.addValue(\"B\", 2.0);\n        assertEquals(2, v1.getItemCount());\n        v1.clear();\n        assertEquals(0, v1.getItemCount());\n    }",
        "begin_line": 141,
        "end_line": 148,
        "comment": "\n     * A simple test for the clear() method.\n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 57)",
            "(line 143,col 9)-(line 143,col 30)",
            "(line 144,col 9)-(line 144,col 30)",
            "(line 145,col 9)-(line 145,col 43)",
            "(line 146,col 9)-(line 146,col 19)",
            "(line 147,col 9)-(line 147,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testGetValue()",
        "snippet": "    public void testGetValue() {\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        try {\n            /* Number n = */ v1.getValue(-1);\n            assertTrue(false);\n        }\n        catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            /* Number n = */ v1.getValue(0);\n            assertTrue(false);\n        }\n        catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        DefaultKeyedValues v2 = new DefaultKeyedValues();\n        v2.addValue(\"K1\", new Integer(1));\n        v2.addValue(\"K2\", new Integer(2));\n        v2.addValue(\"K3\", new Integer(3));\n        assertEquals(new Integer(3), v2.getValue(2));\n        \n        boolean pass = false;\n        try {\n            /* Number n = */ v2.getValue(\"KK\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 153,
        "end_line": 183,
        "comment": "\n     * Some checks for the getValue() methods.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 57)",
            "(line 155,col 9)-(line 161,col 9)",
            "(line 162,col 9)-(line 168,col 9)",
            "(line 169,col 9)-(line 169,col 57)",
            "(line 170,col 9)-(line 170,col 42)",
            "(line 171,col 9)-(line 171,col 42)",
            "(line 172,col 9)-(line 172,col 42)",
            "(line 173,col 9)-(line 173,col 53)",
            "(line 175,col 9)-(line 175,col 29)",
            "(line 176,col 9)-(line 181,col 9)",
            "(line 182,col 9)-(line 182,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testGetKey()",
        "snippet": "    public void testGetKey() {\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        try {\n            /* Comparable k = */ v1.getKey(-1);\n            assertTrue(false);\n        }\n        catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            /* Comparable k = */ v1.getKey(0);\n            assertTrue(false);\n        }\n        catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        DefaultKeyedValues v2 = new DefaultKeyedValues();\n        v2.addValue(\"K1\", new Integer(1));\n        v2.addValue(\"K2\", new Integer(2));\n        v2.addValue(\"K3\", new Integer(3));\n        assertEquals(\"K2\", v2.getKey(1));\n    }",
        "begin_line": 188,
        "end_line": 209,
        "comment": "\n     * Some checks for the getKey() methods.\n     ",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 57)",
            "(line 190,col 9)-(line 196,col 9)",
            "(line 197,col 9)-(line 203,col 9)",
            "(line 204,col 9)-(line 204,col 57)",
            "(line 205,col 9)-(line 205,col 42)",
            "(line 206,col 9)-(line 206,col 42)",
            "(line 207,col 9)-(line 207,col 42)",
            "(line 208,col 9)-(line 208,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testGetIndex()",
        "snippet": "    public void testGetIndex() {\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        assertEquals(-1, v1.getIndex(\"K1\"));\n\n        DefaultKeyedValues v2 = new DefaultKeyedValues();\n        v2.addValue(\"K1\", new Integer(1));\n        v2.addValue(\"K2\", new Integer(2));\n        v2.addValue(\"K3\", new Integer(3));\n        assertEquals(2, v2.getIndex(\"K3\"));\n        \n        // try null\n        boolean pass = false;\n        try {\n            v2.getIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 214,
        "end_line": 233,
        "comment": "\n     * Some checks for the getIndex() methods.\n     ",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 57)",
            "(line 216,col 9)-(line 216,col 44)",
            "(line 218,col 9)-(line 218,col 57)",
            "(line 219,col 9)-(line 219,col 42)",
            "(line 220,col 9)-(line 220,col 42)",
            "(line 221,col 9)-(line 221,col 42)",
            "(line 222,col 9)-(line 222,col 43)",
            "(line 225,col 9)-(line 225,col 29)",
            "(line 226,col 9)-(line 231,col 9)",
            "(line 232,col 9)-(line 232,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testGetIndex2()",
        "snippet": "    public void testGetIndex2() {\n    \tDefaultKeyedValues v = new DefaultKeyedValues();\n    \tassertEquals(-1, v.getIndex(\"K1\"));\n    \tv.addValue(\"K1\", 1.0);\n    \tassertEquals(0, v.getIndex(\"K1\"));\n    \tv.removeValue(\"K1\");\n    \tassertEquals(-1, v.getIndex(\"K1\"));\n    }",
        "begin_line": 238,
        "end_line": 245,
        "comment": "\n     * Another check for the getIndex(Comparable) method.\n     ",
        "child_ranges": [
            "(line 239,col 6)-(line 239,col 53)",
            "(line 240,col 6)-(line 240,col 40)",
            "(line 241,col 6)-(line 241,col 27)",
            "(line 242,col 6)-(line 242,col 39)",
            "(line 243,col 6)-(line 243,col 25)",
            "(line 244,col 6)-(line 244,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testAddValue()",
        "snippet": "    public void testAddValue() {\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        v1.addValue(\"A\", 1.0);\n        assertEquals(new Double(1.0), v1.getValue(\"A\"));\n        v1.addValue(\"B\", 2.0);\n        assertEquals(new Double(2.0), v1.getValue(\"B\"));\n        v1.addValue(\"B\", 3.0);\n        assertEquals(new Double(3.0), v1.getValue(\"B\"));\n        assertEquals(2, v1.getItemCount());\n        v1.addValue(\"A\", null);\n        assertNull(v1.getValue(\"A\"));\n        assertEquals(2, v1.getItemCount());\n        \n        boolean pass = false;\n        try {\n            v1.addValue(null, 99.9);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 250,
        "end_line": 271,
        "comment": "\n     * Some checks for the addValue() method.\n     ",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 57)",
            "(line 252,col 9)-(line 252,col 30)",
            "(line 253,col 9)-(line 253,col 56)",
            "(line 254,col 9)-(line 254,col 30)",
            "(line 255,col 9)-(line 255,col 56)",
            "(line 256,col 9)-(line 256,col 30)",
            "(line 257,col 9)-(line 257,col 56)",
            "(line 258,col 9)-(line 258,col 43)",
            "(line 259,col 9)-(line 259,col 31)",
            "(line 260,col 9)-(line 260,col 37)",
            "(line 261,col 9)-(line 261,col 43)",
            "(line 263,col 9)-(line 263,col 29)",
            "(line 264,col 9)-(line 269,col 9)",
            "(line 270,col 9)-(line 270,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testInsertValue()",
        "snippet": "    public void testInsertValue() {\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        v1.insertValue(0, \"A\", 1.0);\n        assertEquals(new Double(1.0), v1.getValue(0));\n        v1.insertValue(0, \"B\", 2.0);\n        assertEquals(new Double(2.0), v1.getValue(0));\n        assertEquals(new Double(1.0), v1.getValue(1));\n        \n        // it's OK to use an index equal to the size of the list\n        v1.insertValue(2, \"C\", 3.0);\n        assertEquals(new Double(2.0), v1.getValue(0));\n        assertEquals(new Double(1.0), v1.getValue(1));\n        assertEquals(new Double(3.0), v1.getValue(2));\n        \n        // try replacing an existing value\n        v1.insertValue(2, \"B\", 4.0);\n        assertEquals(new Double(1.0), v1.getValue(0));\n        assertEquals(new Double(3.0), v1.getValue(1));\n        assertEquals(new Double(4.0), v1.getValue(2));\n    }",
        "begin_line": 276,
        "end_line": 295,
        "comment": "\n     * Some checks for the insertValue() method.\n     ",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 57)",
            "(line 278,col 9)-(line 278,col 36)",
            "(line 279,col 9)-(line 279,col 54)",
            "(line 280,col 9)-(line 280,col 36)",
            "(line 281,col 9)-(line 281,col 54)",
            "(line 282,col 9)-(line 282,col 54)",
            "(line 285,col 9)-(line 285,col 36)",
            "(line 286,col 9)-(line 286,col 54)",
            "(line 287,col 9)-(line 287,col 54)",
            "(line 288,col 9)-(line 288,col 54)",
            "(line 291,col 9)-(line 291,col 36)",
            "(line 292,col 9)-(line 292,col 54)",
            "(line 293,col 9)-(line 293,col 54)",
            "(line 294,col 9)-(line 294,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        v1.addValue(\"V1\", new Integer(1));\n        v1.addValue(\"V2\", null);\n        v1.addValue(\"V3\", new Integer(3));\n        DefaultKeyedValues v2 = null;\n        try {\n            v2 = (DefaultKeyedValues) v1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(v1 != v2);\n        assertTrue(v1.getClass() == v2.getClass());\n        assertTrue(v1.equals(v2));\n        \n        // confirm that the clone is independent of the original\n        v2.setValue(\"V1\", new Integer(44));\n        assertFalse(v1.equals(v2));\n    }",
        "begin_line": 300,
        "end_line": 319,
        "comment": "\n     * Some checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 57)",
            "(line 302,col 9)-(line 302,col 42)",
            "(line 303,col 9)-(line 303,col 32)",
            "(line 304,col 9)-(line 304,col 42)",
            "(line 305,col 9)-(line 305,col 37)",
            "(line 306,col 9)-(line 311,col 9)",
            "(line 312,col 9)-(line 312,col 29)",
            "(line 313,col 9)-(line 313,col 51)",
            "(line 314,col 9)-(line 314,col 34)",
            "(line 317,col 9)-(line 317,col 43)",
            "(line 318,col 9)-(line 318,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testInsertAndRetrieve()",
        "snippet": "    public void testInsertAndRetrieve() {\n\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"A\", new Double(1.0));\n        data.addValue(\"B\", new Double(2.0));\n        data.addValue(\"C\", new Double(3.0));\n        data.addValue(\"D\", null);\n\n        // check key order\n        assertEquals(data.getKey(0), \"A\");\n        assertEquals(data.getKey(1), \"B\");\n        assertEquals(data.getKey(2), \"C\");\n        assertEquals(data.getKey(3), \"D\");\n\n        // check retrieve value by key\n        assertEquals(data.getValue(\"A\"), new Double(1.0));\n        assertEquals(data.getValue(\"B\"), new Double(2.0));\n        assertEquals(data.getValue(\"C\"), new Double(3.0));\n        assertEquals(data.getValue(\"D\"), null);\n\n        // check retrieve value by index\n        assertEquals(data.getValue(0), new Double(1.0));\n        assertEquals(data.getValue(1), new Double(2.0));\n        assertEquals(data.getValue(2), new Double(3.0));\n        assertEquals(data.getValue(3), null);\n\n    }",
        "begin_line": 324,
        "end_line": 350,
        "comment": "\n     * Check that inserting and retrieving values works as expected.\n     ",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 59)",
            "(line 327,col 9)-(line 327,col 44)",
            "(line 328,col 9)-(line 328,col 44)",
            "(line 329,col 9)-(line 329,col 44)",
            "(line 330,col 9)-(line 330,col 33)",
            "(line 333,col 9)-(line 333,col 42)",
            "(line 334,col 9)-(line 334,col 42)",
            "(line 335,col 9)-(line 335,col 42)",
            "(line 336,col 9)-(line 336,col 42)",
            "(line 339,col 9)-(line 339,col 58)",
            "(line 340,col 9)-(line 340,col 58)",
            "(line 341,col 9)-(line 341,col 58)",
            "(line 342,col 9)-(line 342,col 47)",
            "(line 345,col 9)-(line 345,col 56)",
            "(line 346,col 9)-(line 346,col 56)",
            "(line 347,col 9)-(line 347,col 56)",
            "(line 348,col 9)-(line 348,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testRemoveValue()",
        "snippet": "    public void testRemoveValue() {\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"A\", new Double(1.0));\n        data.addValue(\"B\", null);\n        data.addValue(\"C\", new Double(3.0));\n        data.addValue(\"D\", new Double(2.0));\n        assertEquals(1, data.getIndex(\"B\"));\n        data.removeValue(\"B\");\n        assertEquals(-1, data.getIndex(\"B\"));\n        \n        boolean pass = false;\n        try {\n            data.removeValue(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n    }",
        "begin_line": 355,
        "end_line": 373,
        "comment": "\n     * Some tests for the removeValue() method.\n     ",
        "child_ranges": [
            "(line 356,col 9)-(line 356,col 59)",
            "(line 357,col 9)-(line 357,col 44)",
            "(line 358,col 9)-(line 358,col 33)",
            "(line 359,col 9)-(line 359,col 44)",
            "(line 360,col 9)-(line 360,col 44)",
            "(line 361,col 9)-(line 361,col 44)",
            "(line 362,col 9)-(line 362,col 30)",
            "(line 363,col 9)-(line 363,col 45)",
            "(line 365,col 9)-(line 365,col 29)",
            "(line 366,col 9)-(line 371,col 9)",
            "(line 372,col 9)-(line 372,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testSortByKeyAscending()",
        "snippet": "    public void testSortByKeyAscending() {\n\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"C\", new Double(1.0));\n        data.addValue(\"B\", null);\n        data.addValue(\"D\", new Double(3.0));\n        data.addValue(\"A\", new Double(2.0));\n\n        data.sortByKeys(SortOrder.ASCENDING);\n\n        // check key order\n        assertEquals(data.getKey(0), \"A\");\n        assertEquals(data.getKey(1), \"B\");\n        assertEquals(data.getKey(2), \"C\");\n        assertEquals(data.getKey(3), \"D\");\n\n        // check retrieve value by key\n        assertEquals(data.getValue(\"A\"), new Double(2.0));\n        assertEquals(data.getValue(\"B\"), null);\n        assertEquals(data.getValue(\"C\"), new Double(1.0));\n        assertEquals(data.getValue(\"D\"), new Double(3.0));\n\n        // check retrieve value by index\n        assertEquals(data.getValue(0), new Double(2.0));\n        assertEquals(data.getValue(1), null);\n        assertEquals(data.getValue(2), new Double(1.0));\n        assertEquals(data.getValue(3), new Double(3.0));\n\n    }",
        "begin_line": 378,
        "end_line": 406,
        "comment": "\n     * Tests sorting of data by key (ascending).\n     ",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 59)",
            "(line 381,col 9)-(line 381,col 44)",
            "(line 382,col 9)-(line 382,col 33)",
            "(line 383,col 9)-(line 383,col 44)",
            "(line 384,col 9)-(line 384,col 44)",
            "(line 386,col 9)-(line 386,col 45)",
            "(line 389,col 9)-(line 389,col 42)",
            "(line 390,col 9)-(line 390,col 42)",
            "(line 391,col 9)-(line 391,col 42)",
            "(line 392,col 9)-(line 392,col 42)",
            "(line 395,col 9)-(line 395,col 58)",
            "(line 396,col 9)-(line 396,col 47)",
            "(line 397,col 9)-(line 397,col 58)",
            "(line 398,col 9)-(line 398,col 58)",
            "(line 401,col 9)-(line 401,col 56)",
            "(line 402,col 9)-(line 402,col 45)",
            "(line 403,col 9)-(line 403,col 56)",
            "(line 404,col 9)-(line 404,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testSortByKeyDescending()",
        "snippet": "    public void testSortByKeyDescending() {\n\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"C\", new Double(1.0));\n        data.addValue(\"B\", null);\n        data.addValue(\"D\", new Double(3.0));\n        data.addValue(\"A\", new Double(2.0));\n\n        data.sortByKeys(SortOrder.DESCENDING);\n\n        // check key order\n        assertEquals(data.getKey(0), \"D\");\n        assertEquals(data.getKey(1), \"C\");\n        assertEquals(data.getKey(2), \"B\");\n        assertEquals(data.getKey(3), \"A\");\n\n        // check retrieve value by key\n        assertEquals(data.getValue(\"A\"), new Double(2.0));\n        assertEquals(data.getValue(\"B\"), null);\n        assertEquals(data.getValue(\"C\"), new Double(1.0));\n        assertEquals(data.getValue(\"D\"), new Double(3.0));\n\n        // check retrieve value by index\n        assertEquals(data.getValue(0), new Double(3.0));\n        assertEquals(data.getValue(1), new Double(1.0));\n        assertEquals(data.getValue(2), null);\n        assertEquals(data.getValue(3), new Double(2.0));\n\n    }",
        "begin_line": 411,
        "end_line": 439,
        "comment": "\n     * Tests sorting of data by key (descending).\n     ",
        "child_ranges": [
            "(line 413,col 9)-(line 413,col 59)",
            "(line 414,col 9)-(line 414,col 44)",
            "(line 415,col 9)-(line 415,col 33)",
            "(line 416,col 9)-(line 416,col 44)",
            "(line 417,col 9)-(line 417,col 44)",
            "(line 419,col 9)-(line 419,col 46)",
            "(line 422,col 9)-(line 422,col 42)",
            "(line 423,col 9)-(line 423,col 42)",
            "(line 424,col 9)-(line 424,col 42)",
            "(line 425,col 9)-(line 425,col 42)",
            "(line 428,col 9)-(line 428,col 58)",
            "(line 429,col 9)-(line 429,col 47)",
            "(line 430,col 9)-(line 430,col 58)",
            "(line 431,col 9)-(line 431,col 58)",
            "(line 434,col 9)-(line 434,col 56)",
            "(line 435,col 9)-(line 435,col 56)",
            "(line 436,col 9)-(line 436,col 45)",
            "(line 437,col 9)-(line 437,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testSortByValueAscending()",
        "snippet": "    public void testSortByValueAscending() {\n\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"C\", new Double(1.0));\n        data.addValue(\"B\", null);\n        data.addValue(\"D\", new Double(3.0));\n        data.addValue(\"A\", new Double(2.0));\n\n        data.sortByValues(SortOrder.ASCENDING);\n\n        // check key order\n        assertEquals(data.getKey(0), \"C\");\n        assertEquals(data.getKey(1), \"A\");\n        assertEquals(data.getKey(2), \"D\");\n        assertEquals(data.getKey(3), \"B\");\n\n        // check retrieve value by key\n        assertEquals(data.getValue(\"A\"), new Double(2.0));\n        assertEquals(data.getValue(\"B\"), null);\n        assertEquals(data.getValue(\"C\"), new Double(1.0));\n        assertEquals(data.getValue(\"D\"), new Double(3.0));\n\n        // check retrieve value by index\n        assertEquals(data.getValue(0), new Double(1.0));\n        assertEquals(data.getValue(1), new Double(2.0));\n        assertEquals(data.getValue(2), new Double(3.0));\n        assertEquals(data.getValue(3), null);\n\n    }",
        "begin_line": 444,
        "end_line": 472,
        "comment": "\n     * Tests sorting of data by value (ascending).\n     ",
        "child_ranges": [
            "(line 446,col 9)-(line 446,col 59)",
            "(line 447,col 9)-(line 447,col 44)",
            "(line 448,col 9)-(line 448,col 33)",
            "(line 449,col 9)-(line 449,col 44)",
            "(line 450,col 9)-(line 450,col 44)",
            "(line 452,col 9)-(line 452,col 47)",
            "(line 455,col 9)-(line 455,col 42)",
            "(line 456,col 9)-(line 456,col 42)",
            "(line 457,col 9)-(line 457,col 42)",
            "(line 458,col 9)-(line 458,col 42)",
            "(line 461,col 9)-(line 461,col 58)",
            "(line 462,col 9)-(line 462,col 47)",
            "(line 463,col 9)-(line 463,col 58)",
            "(line 464,col 9)-(line 464,col 58)",
            "(line 467,col 9)-(line 467,col 56)",
            "(line 468,col 9)-(line 468,col 56)",
            "(line 469,col 9)-(line 469,col 56)",
            "(line 470,col 9)-(line 470,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testSortByValueDescending()",
        "snippet": "    public void testSortByValueDescending() {\n\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"C\", new Double(1.0));\n        data.addValue(\"B\", null);\n        data.addValue(\"D\", new Double(3.0));\n        data.addValue(\"A\", new Double(2.0));\n\n        data.sortByValues(SortOrder.DESCENDING);\n\n        // check key order\n        assertEquals(data.getKey(0), \"D\");\n        assertEquals(data.getKey(1), \"A\");\n        assertEquals(data.getKey(2), \"C\");\n        assertEquals(data.getKey(3), \"B\");\n\n        // check retrieve value by key\n        assertEquals(data.getValue(\"A\"), new Double(2.0));\n        assertEquals(data.getValue(\"B\"), null);\n        assertEquals(data.getValue(\"C\"), new Double(1.0));\n        assertEquals(data.getValue(\"D\"), new Double(3.0));\n\n        // check retrieve value by index\n        assertEquals(data.getValue(0), new Double(3.0));\n        assertEquals(data.getValue(1), new Double(2.0));\n        assertEquals(data.getValue(2), new Double(1.0));\n        assertEquals(data.getValue(3), null);\n\n    }",
        "begin_line": 477,
        "end_line": 505,
        "comment": "\n     * Tests sorting of data by key (descending).\n     ",
        "child_ranges": [
            "(line 479,col 9)-(line 479,col 59)",
            "(line 480,col 9)-(line 480,col 44)",
            "(line 481,col 9)-(line 481,col 33)",
            "(line 482,col 9)-(line 482,col 44)",
            "(line 483,col 9)-(line 483,col 44)",
            "(line 485,col 9)-(line 485,col 48)",
            "(line 488,col 9)-(line 488,col 42)",
            "(line 489,col 9)-(line 489,col 42)",
            "(line 490,col 9)-(line 490,col 42)",
            "(line 491,col 9)-(line 491,col 42)",
            "(line 494,col 9)-(line 494,col 58)",
            "(line 495,col 9)-(line 495,col 47)",
            "(line 496,col 9)-(line 496,col 58)",
            "(line 497,col 9)-(line 497,col 58)",
            "(line 500,col 9)-(line 500,col 56)",
            "(line 501,col 9)-(line 501,col 56)",
            "(line 502,col 9)-(line 502,col 56)",
            "(line 503,col 9)-(line 503,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        v1.addValue(\"Key 1\", new Double(23));\n        v1.addValue(\"Key 2\", null);\n        v1.addValue(\"Key 3\", new Double(42));\n\n        DefaultKeyedValues v2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(v1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            v2 = (DefaultKeyedValues) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(v1, v2);\n\n    }",
        "begin_line": 510,
        "end_line": 536,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 512,col 9)-(line 512,col 57)",
            "(line 513,col 9)-(line 513,col 45)",
            "(line 514,col 9)-(line 514,col 35)",
            "(line 515,col 9)-(line 515,col 45)",
            "(line 517,col 9)-(line 517,col 37)",
            "(line 519,col 9)-(line 533,col 9)",
            "(line 534,col 9)-(line 534,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DomainOrderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DomainOrderTests.java",
        "signature": "org.jfree.data.junit.DomainOrderTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DomainOrderTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DomainOrderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DomainOrderTests.java",
        "signature": "org.jfree.data.junit.DomainOrderTests.DomainOrderTests(java.lang.String)",
        "snippet": "    public DomainOrderTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DomainOrderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DomainOrderTests.java",
        "signature": "org.jfree.data.junit.DomainOrderTests.testEquals()",
        "snippet": "    public void testEquals() {\n        assertEquals(DomainOrder.NONE, DomainOrder.NONE);\n        assertEquals(DomainOrder.ASCENDING, DomainOrder.ASCENDING);\n        assertEquals(DomainOrder.DESCENDING, DomainOrder.DESCENDING);\n        assertFalse(DomainOrder.NONE.equals(DomainOrder.ASCENDING));\n        assertFalse(DomainOrder.NONE.equals(DomainOrder.DESCENDING));\n        assertFalse(DomainOrder.NONE.equals(null));\n        assertFalse(DomainOrder.ASCENDING.equals(DomainOrder.NONE));\n        assertFalse(DomainOrder.ASCENDING.equals(DomainOrder.DESCENDING));\n        assertFalse(DomainOrder.ASCENDING.equals(null));\n        assertFalse(DomainOrder.DESCENDING.equals(DomainOrder.NONE));\n        assertFalse(DomainOrder.DESCENDING.equals(DomainOrder.ASCENDING));\n        assertFalse(DomainOrder.DESCENDING.equals(null));\n    }",
        "begin_line": 82,
        "end_line": 95,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 57)",
            "(line 84,col 9)-(line 84,col 67)",
            "(line 85,col 9)-(line 85,col 69)",
            "(line 86,col 9)-(line 86,col 68)",
            "(line 87,col 9)-(line 87,col 69)",
            "(line 88,col 9)-(line 88,col 51)",
            "(line 89,col 9)-(line 89,col 68)",
            "(line 90,col 9)-(line 90,col 74)",
            "(line 91,col 9)-(line 91,col 56)",
            "(line 92,col 9)-(line 92,col 69)",
            "(line 93,col 9)-(line 93,col 74)",
            "(line 94,col 9)-(line 94,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DomainOrderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DomainOrderTests.java",
        "signature": "org.jfree.data.junit.DomainOrderTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        DomainOrder d1 = DomainOrder.ASCENDING;\n        DomainOrder d2 = DomainOrder.ASCENDING;\n        assertTrue(d1.equals(d2));\n        int h1 = d1.hashCode();\n        int h2 = d2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 100,
        "end_line": 107,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 47)",
            "(line 102,col 9)-(line 102,col 47)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 104,col 9)-(line 104,col 31)",
            "(line 105,col 9)-(line 105,col 31)",
            "(line 106,col 9)-(line 106,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DomainOrderTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DomainOrderTests.java",
        "signature": "org.jfree.data.junit.DomainOrderTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        DomainOrder d1 = DomainOrder.ASCENDING;\n        DomainOrder d2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (DomainOrder) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(d1, d2);\n        boolean same = d1 == d2;\n        assertEquals(true, same);        \n    }",
        "begin_line": 112,
        "end_line": 133,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 47)",
            "(line 114,col 9)-(line 114,col 30)",
            "(line 115,col 9)-(line 129,col 9)",
            "(line 130,col 9)-(line 130,col 29)",
            "(line 131,col 9)-(line 131,col 32)",
            "(line 132,col 9)-(line 132,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyToGroupMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyToGroupMapTests.java",
        "signature": "org.jfree.data.junit.KeyToGroupMapTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(KeyToGroupMapTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyToGroupMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyToGroupMapTests.java",
        "signature": "org.jfree.data.junit.KeyToGroupMapTests.KeyToGroupMapTests(java.lang.String)",
        "snippet": "    public KeyToGroupMapTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyToGroupMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyToGroupMapTests.java",
        "signature": "org.jfree.data.junit.KeyToGroupMapTests.testMapKeyToGroup()",
        "snippet": "    public void testMapKeyToGroup() {\n        KeyToGroupMap m1 = new KeyToGroupMap(\"G1\");\n        \n        // map a key to the default group\n        m1.mapKeyToGroup(\"K1\", \"G1\");\n        assertEquals(\"G1\", m1.getGroup(\"K1\"));\n        \n        // map a key to a new group\n        m1.mapKeyToGroup(\"K2\", \"G2\");\n        assertEquals(\"G2\", m1.getGroup(\"K2\"));\n        \n        // clear a mapping\n        m1.mapKeyToGroup(\"K2\", null);\n        assertEquals(\"G1\", m1.getGroup(\"K2\"));  // after clearing, reverts to \n                                                // default group\n        \n        // check handling of null key\n        boolean pass = false;\n        try {\n            m1.mapKeyToGroup(null, \"G1\");   \n        }\n        catch (IllegalArgumentException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n    }",
        "begin_line": 82,
        "end_line": 107,
        "comment": "\n     * Tests the mapKeyToGroup() method.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 51)",
            "(line 86,col 9)-(line 86,col 37)",
            "(line 87,col 9)-(line 87,col 46)",
            "(line 90,col 9)-(line 90,col 37)",
            "(line 91,col 9)-(line 91,col 46)",
            "(line 94,col 9)-(line 94,col 37)",
            "(line 95,col 9)-(line 95,col 46)",
            "(line 99,col 9)-(line 99,col 29)",
            "(line 100,col 9)-(line 105,col 9)",
            "(line 106,col 9)-(line 106,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyToGroupMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyToGroupMapTests.java",
        "signature": "org.jfree.data.junit.KeyToGroupMapTests.testGroupCount()",
        "snippet": "    public void testGroupCount() {\n        KeyToGroupMap m1 = new KeyToGroupMap(\"Default Group\");\n        \n        // a new map always has 1 group (the default group)\n        assertEquals(1, m1.getGroupCount());\n        \n        // if the default group is not mapped to, it should still count towards\n        // the group count...\n        m1.mapKeyToGroup(\"C1\", \"G1\");\n        assertEquals(2, m1.getGroupCount());\n        \n        // now when the default group is mapped to, it shouldn't increase the\n        // group count...\n        m1.mapKeyToGroup(\"C2\", \"Default Group\");\n        assertEquals(2, m1.getGroupCount());\n    \n        // complicate things a little...\n        m1.mapKeyToGroup(\"C3\", \"Default Group\");\n        m1.mapKeyToGroup(\"C4\", \"G2\");\n        m1.mapKeyToGroup(\"C5\", \"G2\");\n        m1.mapKeyToGroup(\"C6\", \"Default Group\");\n        assertEquals(3, m1.getGroupCount());\n        \n        // now overwrite group \"G2\"...\n        m1.mapKeyToGroup(\"C4\", \"G1\");\n        m1.mapKeyToGroup(\"C5\", \"G1\");\n        assertEquals(2, m1.getGroupCount()); \n    }",
        "begin_line": 113,
        "end_line": 140,
        "comment": "\n     * Tests that the getGroupCount() method returns the correct values under \n     * various circumstances.\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 62)",
            "(line 117,col 9)-(line 117,col 44)",
            "(line 121,col 9)-(line 121,col 37)",
            "(line 122,col 9)-(line 122,col 44)",
            "(line 126,col 9)-(line 126,col 48)",
            "(line 127,col 9)-(line 127,col 44)",
            "(line 130,col 9)-(line 130,col 48)",
            "(line 131,col 9)-(line 131,col 37)",
            "(line 132,col 9)-(line 132,col 37)",
            "(line 133,col 9)-(line 133,col 48)",
            "(line 134,col 9)-(line 134,col 44)",
            "(line 137,col 9)-(line 137,col 37)",
            "(line 138,col 9)-(line 138,col 37)",
            "(line 139,col 9)-(line 139,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyToGroupMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyToGroupMapTests.java",
        "signature": "org.jfree.data.junit.KeyToGroupMapTests.testKeyCount()",
        "snippet": "    public void testKeyCount() {\n        KeyToGroupMap m1 = new KeyToGroupMap(\"Default Group\");\n        \n        // a new map always has 1 group (the default group)\n        assertEquals(0, m1.getKeyCount(\"Default Group\"));\n        \n        // simple case\n        m1.mapKeyToGroup(\"K1\", \"G1\");\n        assertEquals(1, m1.getKeyCount(\"G1\"));\n        m1.mapKeyToGroup(\"K1\", null);\n        assertEquals(0, m1.getKeyCount(\"G1\"));\n        \n        // if there is an explicit mapping to the default group, it is counted\n        m1.mapKeyToGroup(\"K2\", \"Default Group\");\n        assertEquals(1, m1.getKeyCount(\"Default Group\"));\n    \n        // complicate things a little...\n        m1.mapKeyToGroup(\"K3\", \"Default Group\");\n        m1.mapKeyToGroup(\"K4\", \"G2\");\n        m1.mapKeyToGroup(\"K5\", \"G2\");\n        m1.mapKeyToGroup(\"K6\", \"Default Group\");\n        assertEquals(3, m1.getKeyCount(\"Default Group\"));\n        assertEquals(2, m1.getKeyCount(\"G2\"));\n        \n        // now overwrite group \"G2\"...\n        m1.mapKeyToGroup(\"K4\", \"G1\");\n        m1.mapKeyToGroup(\"K5\", \"G1\");\n        assertEquals(2, m1.getKeyCount(\"G1\")); \n        assertEquals(0, m1.getKeyCount(\"G2\")); \n    }",
        "begin_line": 146,
        "end_line": 175,
        "comment": "\n     * Tests that the getKeyCount() method returns the correct values under \n     * various circumstances.\n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 62)",
            "(line 150,col 9)-(line 150,col 57)",
            "(line 153,col 9)-(line 153,col 37)",
            "(line 154,col 9)-(line 154,col 46)",
            "(line 155,col 9)-(line 155,col 37)",
            "(line 156,col 9)-(line 156,col 46)",
            "(line 159,col 9)-(line 159,col 48)",
            "(line 160,col 9)-(line 160,col 57)",
            "(line 163,col 9)-(line 163,col 48)",
            "(line 164,col 9)-(line 164,col 37)",
            "(line 165,col 9)-(line 165,col 37)",
            "(line 166,col 9)-(line 166,col 48)",
            "(line 167,col 9)-(line 167,col 57)",
            "(line 168,col 9)-(line 168,col 46)",
            "(line 171,col 9)-(line 171,col 37)",
            "(line 172,col 9)-(line 172,col 37)",
            "(line 173,col 9)-(line 173,col 46)",
            "(line 174,col 9)-(line 174,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyToGroupMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyToGroupMapTests.java",
        "signature": "org.jfree.data.junit.KeyToGroupMapTests.testGetGroupIndex()",
        "snippet": "    public void testGetGroupIndex() {\n        KeyToGroupMap m1 = new KeyToGroupMap(\"Default Group\");\n       \n        // the default group is always at index 0\n        assertEquals(0, m1.getGroupIndex(\"Default Group\"));\n        \n        // a non-existent group should return -1\n        assertEquals(-1, m1.getGroupIndex(\"G3\"));\n        \n        // indices are assigned in the order that groups are originally mapped\n        m1.mapKeyToGroup(\"K3\", \"G3\");\n        m1.mapKeyToGroup(\"K1\", \"G1\");\n        m1.mapKeyToGroup(\"K2\", \"G2\");\n        assertEquals(1, m1.getGroupIndex(\"G3\"));\n        assertEquals(2, m1.getGroupIndex(\"G1\"));\n        assertEquals(3, m1.getGroupIndex(\"G2\"));\n    }",
        "begin_line": 180,
        "end_line": 196,
        "comment": "\n     * Tests the getGroupIndex() method.\n     ",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 62)",
            "(line 184,col 9)-(line 184,col 59)",
            "(line 187,col 9)-(line 187,col 49)",
            "(line 190,col 9)-(line 190,col 37)",
            "(line 191,col 9)-(line 191,col 37)",
            "(line 192,col 9)-(line 192,col 37)",
            "(line 193,col 9)-(line 193,col 48)",
            "(line 194,col 9)-(line 194,col 48)",
            "(line 195,col 9)-(line 195,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyToGroupMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyToGroupMapTests.java",
        "signature": "org.jfree.data.junit.KeyToGroupMapTests.testGetGroup()",
        "snippet": "    public void testGetGroup() {\n        KeyToGroupMap m1 = new KeyToGroupMap(\"Default Group\");\n        \n        // a key that hasn't been mapped should return the default group\n        assertEquals(\"Default Group\", m1.getGroup(\"K1\"));\n        \n        m1.mapKeyToGroup(\"K1\", \"G1\");\n        assertEquals(\"G1\", m1.getGroup(\"K1\"));\n        m1.mapKeyToGroup(\"K1\", \"G2\");\n        assertEquals(\"G2\", m1.getGroup(\"K1\"));\n        m1.mapKeyToGroup(\"K1\", null);\n        assertEquals(\"Default Group\", m1.getGroup(\"K1\"));\n        \n        // a null argument should throw an exception\n        boolean pass = false;\n        try {\n            Comparable g = m1.getGroup(null); \n            System.out.println(g);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n    }",
        "begin_line": 201,
        "end_line": 224,
        "comment": "\n     * Tests the getGroup() method.\n     ",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 62)",
            "(line 205,col 9)-(line 205,col 57)",
            "(line 207,col 9)-(line 207,col 37)",
            "(line 208,col 9)-(line 208,col 46)",
            "(line 209,col 9)-(line 209,col 37)",
            "(line 210,col 9)-(line 210,col 46)",
            "(line 211,col 9)-(line 211,col 37)",
            "(line 212,col 9)-(line 212,col 57)",
            "(line 215,col 9)-(line 215,col 29)",
            "(line 216,col 9)-(line 222,col 9)",
            "(line 223,col 9)-(line 223,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyToGroupMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyToGroupMapTests.java",
        "signature": "org.jfree.data.junit.KeyToGroupMapTests.testEquals()",
        "snippet": "    public void testEquals() {     \n        KeyToGroupMap m1 = new KeyToGroupMap(\"Default Group\");\n        KeyToGroupMap m2 = new KeyToGroupMap(\"Default Group\");\n        assertTrue(m1.equals(m2));\n        assertTrue(m2.equals(m1));\n        \n        m1.mapKeyToGroup(\"K1\", \"G1\");\n        assertFalse(m1.equals(m2));\n        m2.mapKeyToGroup(\"K1\", \"G1\");\n        assertTrue(m1.equals(m2));\n    }",
        "begin_line": 229,
        "end_line": 239,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 62)",
            "(line 231,col 9)-(line 231,col 62)",
            "(line 232,col 9)-(line 232,col 34)",
            "(line 233,col 9)-(line 233,col 34)",
            "(line 235,col 9)-(line 235,col 37)",
            "(line 236,col 9)-(line 236,col 35)",
            "(line 237,col 9)-(line 237,col 37)",
            "(line 238,col 9)-(line 238,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyToGroupMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyToGroupMapTests.java",
        "signature": "org.jfree.data.junit.KeyToGroupMapTests.testCloning()",
        "snippet": "    public void testCloning() {\n        KeyToGroupMap m1 = new KeyToGroupMap(\"Test\");\n        m1.mapKeyToGroup(\"K1\", \"G1\");\n        KeyToGroupMap m2 = null;\n        try {\n            m2 = (KeyToGroupMap) m1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(m1 != m2);\n        assertTrue(m1.getClass() == m2.getClass());\n        assertTrue(m1.equals(m2));\n        \n        // a small check for independence\n        m1.mapKeyToGroup(\"K1\", \"G2\");\n        assertFalse(m1.equals(m2));\n        m2.mapKeyToGroup(\"K1\", \"G2\");\n        assertTrue(m1.equals(m2));\n    }",
        "begin_line": 244,
        "end_line": 263,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 53)",
            "(line 246,col 9)-(line 246,col 37)",
            "(line 247,col 9)-(line 247,col 32)",
            "(line 248,col 9)-(line 253,col 9)",
            "(line 254,col 9)-(line 254,col 29)",
            "(line 255,col 9)-(line 255,col 51)",
            "(line 256,col 9)-(line 256,col 34)",
            "(line 259,col 9)-(line 259,col 37)",
            "(line 260,col 9)-(line 260,col 35)",
            "(line 261,col 9)-(line 261,col 37)",
            "(line 262,col 9)-(line 262,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyToGroupMapTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyToGroupMapTests.java",
        "signature": "org.jfree.data.junit.KeyToGroupMapTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        KeyToGroupMap m1 = new KeyToGroupMap(\"Test\");\n        KeyToGroupMap m2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            m2 = (KeyToGroupMap) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(m1, m2);\n\n    }",
        "begin_line": 268,
        "end_line": 290,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 53)",
            "(line 271,col 9)-(line 271,col 32)",
            "(line 273,col 9)-(line 287,col 9)",
            "(line 288,col 9)-(line 288,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DataPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DataPackageTests.java",
        "signature": "org.jfree.data.junit.DataPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.data\");\n        suite.addTestSuite(ComparableObjectItemTests.class);\n        suite.addTestSuite(ComparableObjectSeriesTests.class);\n        suite.addTestSuite(DataUtilitiesTests.class);\n        suite.addTestSuite(DefaultKeyedValueTests.class);\n        suite.addTestSuite(DefaultKeyedValuesTests.class);\n        suite.addTestSuite(DefaultKeyedValues2DTests.class);\n        suite.addTestSuite(DomainOrderTests.class);\n        suite.addTestSuite(KeyedObjectTests.class);\n        suite.addTestSuite(KeyedObjectsTests.class);\n        suite.addTestSuite(KeyedObjects2DTests.class);\n        suite.addTestSuite(KeyToGroupMapTests.class);\n        suite.addTestSuite(RangeTests.class);\n        suite.addTestSuite(RangeTypeTests.class);\n        return suite;\n    }",
        "begin_line": 69,
        "end_line": 85,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 58)",
            "(line 71,col 9)-(line 71,col 60)",
            "(line 72,col 9)-(line 72,col 62)",
            "(line 73,col 9)-(line 73,col 53)",
            "(line 74,col 9)-(line 74,col 57)",
            "(line 75,col 9)-(line 75,col 58)",
            "(line 76,col 9)-(line 76,col 60)",
            "(line 77,col 9)-(line 77,col 51)",
            "(line 78,col 9)-(line 78,col 51)",
            "(line 79,col 9)-(line 79,col 52)",
            "(line 80,col 9)-(line 80,col 54)",
            "(line 81,col 9)-(line 81,col 53)",
            "(line 82,col 9)-(line 82,col 45)",
            "(line 83,col 9)-(line 83,col 49)",
            "(line 84,col 9)-(line 84,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DataPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DataPackageTests.java",
        "signature": "org.jfree.data.junit.DataPackageTests.DataPackageTests(java.lang.String)",
        "snippet": "    public DataPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 92,
        "end_line": 94,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the test suite name.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DataPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DataPackageTests.java",
        "signature": "org.jfree.data.junit.DataPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValueTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValueTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValueTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultKeyedValueTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValueTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValueTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValueTests.DefaultKeyedValueTests(java.lang.String)",
        "snippet": "    public DefaultKeyedValueTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValueTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValueTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValueTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        DefaultKeyedValue v1 = new DefaultKeyedValue(\"Test\", new Double(45.5));\n        DefaultKeyedValue v2 = new DefaultKeyedValue(\"Test\", new Double(45.5));\n        assertTrue(v1.equals(v2));\n        assertTrue(v2.equals(v1));\n\n        v1 = new DefaultKeyedValue(\"Test 1\", new Double(45.5));\n        v2 = new DefaultKeyedValue(\"Test 2\", new Double(45.5));\n        assertFalse(v1.equals(v2));\n\n        v1 = new DefaultKeyedValue(\"Test\", new Double(45.5));\n        v2 = new DefaultKeyedValue(\"Test\", new Double(45.6));\n        assertFalse(v1.equals(v2));\n\n    }",
        "begin_line": 82,
        "end_line": 97,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 79)",
            "(line 85,col 9)-(line 85,col 79)",
            "(line 86,col 9)-(line 86,col 34)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 89,col 9)-(line 89,col 63)",
            "(line 90,col 9)-(line 90,col 63)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 93,col 9)-(line 93,col 61)",
            "(line 94,col 9)-(line 94,col 61)",
            "(line 95,col 9)-(line 95,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValueTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValueTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValueTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultKeyedValue v1 = new DefaultKeyedValue(\"Test\", new Double(45.5));\n        DefaultKeyedValue v2 = null;\n        try {\n            v2 = (DefaultKeyedValue) v1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(v1 != v2);\n        assertTrue(v1.getClass() == v2.getClass());\n        assertTrue(v1.equals(v2));\n        \n        // confirm that the clone is independent of the original\n        v2.setValue(new Double(12.3));\n        assertFalse(v1.equals(v2));\n    }",
        "begin_line": 102,
        "end_line": 118,
        "comment": "\n     * Some checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 79)",
            "(line 104,col 9)-(line 104,col 36)",
            "(line 105,col 9)-(line 110,col 9)",
            "(line 111,col 9)-(line 111,col 29)",
            "(line 112,col 9)-(line 112,col 51)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 116,col 9)-(line 116,col 38)",
            "(line 117,col 9)-(line 117,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValueTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValueTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValueTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultKeyedValue v1 = new DefaultKeyedValue(\"Test\", new Double(25.3));\n        DefaultKeyedValue v2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(v1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            v2 = (DefaultKeyedValue) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(v1, v2);\n\n    }",
        "begin_line": 123,
        "end_line": 145,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 79)",
            "(line 126,col 9)-(line 126,col 36)",
            "(line 128,col 9)-(line 142,col 9)",
            "(line 143,col 9)-(line 143,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectItemTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectItemTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ComparableObjectItemTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectItemTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectItemTests.ComparableObjectItemTests(java.lang.String)",
        "snippet": "    public ComparableObjectItemTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectItemTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectItemTests.testConstructor()",
        "snippet": "    public void testConstructor() {\n        // check null argument 1\n        boolean pass = false;\n        try {\n            /* ComparableObjectItem item1 = */ new ComparableObjectItem(null, \n                    \"XYZ\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 82,
        "end_line": 93,
        "comment": "\n     * Some checks for the constructor.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 29)",
            "(line 85,col 9)-(line 91,col 9)",
            "(line 92,col 9)-(line 92,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectItemTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectItemTests.testEquals()",
        "snippet": "    public void testEquals() {\n        ComparableObjectItem item1 = new ComparableObjectItem(new Integer(1), \n                \"XYZ\");\n        ComparableObjectItem item2 = new ComparableObjectItem(new Integer(1), \n                \"XYZ\");\n        assertTrue(item1.equals(item2));\n        assertTrue(item2.equals(item1));\n\n        item1 = new ComparableObjectItem(new Integer(2), \"XYZ\");\n        assertFalse(item1.equals(item2));\n        item2 = new ComparableObjectItem(new Integer(2), \"XYZ\");\n        assertTrue(item1.equals(item2));\n        \n        item1 = new ComparableObjectItem(new Integer(2), null);\n        assertFalse(item1.equals(item2));\n        item2 = new ComparableObjectItem(new Integer(2), null);\n        assertTrue(item1.equals(item2));        \n    }",
        "begin_line": 98,
        "end_line": 115,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 100,col 23)",
            "(line 101,col 9)-(line 102,col 23)",
            "(line 103,col 9)-(line 103,col 40)",
            "(line 104,col 9)-(line 104,col 40)",
            "(line 106,col 9)-(line 106,col 64)",
            "(line 107,col 9)-(line 107,col 41)",
            "(line 108,col 9)-(line 108,col 64)",
            "(line 109,col 9)-(line 109,col 40)",
            "(line 111,col 9)-(line 111,col 63)",
            "(line 112,col 9)-(line 112,col 41)",
            "(line 113,col 9)-(line 113,col 63)",
            "(line 114,col 9)-(line 114,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectItemTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectItemTests.testCloning()",
        "snippet": "    public void testCloning() {\n        ComparableObjectItem item1 = new ComparableObjectItem(new Integer(1), \n                \"XYZ\");\n        ComparableObjectItem item2 = null;\n        try {\n            item2 = (ComparableObjectItem) item1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(item1 != item2);\n        assertTrue(item1.getClass() == item2.getClass());\n        assertTrue(item1.equals(item2));\n    }",
        "begin_line": 120,
        "end_line": 133,
        "comment": "\n     * Some checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 122,col 23)",
            "(line 123,col 9)-(line 123,col 42)",
            "(line 124,col 9)-(line 129,col 9)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 131,col 57)",
            "(line 132,col 9)-(line 132,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectItemTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectItemTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        ComparableObjectItem item1 = new ComparableObjectItem(new Integer(1), \n                \"XYZ\");\n        ComparableObjectItem item2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(item1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            item2 = (ComparableObjectItem) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(item1, item2);\n    }",
        "begin_line": 138,
        "end_line": 157,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 139,col 9)-(line 140,col 23)",
            "(line 141,col 9)-(line 141,col 42)",
            "(line 142,col 9)-(line 155,col 9)",
            "(line 156,col 9)-(line 156,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectItemTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectItemTests.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        ComparableObjectItem item1 = new ComparableObjectItem(new Integer(1), \n                \"XYZ\");\n        ComparableObjectItem item2 = new ComparableObjectItem(new Integer(2), \n                \"XYZ\");\n        ComparableObjectItem item3 = new ComparableObjectItem(new Integer(3), \n                \"XYZ\");\n        ComparableObjectItem item4 = new ComparableObjectItem(new Integer(1), \n                \"XYZ\");\n        assertTrue(item2.compareTo(item1) > 0);\n        assertTrue(item3.compareTo(item1) > 0);\n        assertTrue(item4.compareTo(item1) == 0);\n        assertTrue(item1.compareTo(item2) < 0);\n    }",
        "begin_line": 162,
        "end_line": 175,
        "comment": " \n     * Some checks for the compareTo() method.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 164,col 23)",
            "(line 165,col 9)-(line 166,col 23)",
            "(line 167,col 9)-(line 168,col 23)",
            "(line 169,col 9)-(line 170,col 23)",
            "(line 171,col 9)-(line 171,col 47)",
            "(line 172,col 9)-(line 172,col 47)",
            "(line 173,col 9)-(line 173,col 48)",
            "(line 174,col 9)-(line 174,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectSeriesTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectSeriesTests.MyComparableObjectSeries.MyComparableObjectSeries(java.lang.Comparable)",
        "snippet": "        public MyComparableObjectSeries(Comparable key) {\n            super(key);\n        }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n         * Creates a new instance.\n         * \n         * @param key  the series key.\n         ",
        "child_ranges": [
            "(line 70,col 13)-(line 70,col 23)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectSeriesTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectSeriesTests.MyComparableObjectSeries.MyComparableObjectSeries(java.lang.Comparable, boolean, boolean)",
        "snippet": "        public MyComparableObjectSeries(Comparable key, boolean autoSort, \n                boolean allowDuplicateXValues) {\n            super(key, autoSort, allowDuplicateXValues);\n        }",
        "begin_line": 79,
        "end_line": 82,
        "comment": "\n         * Creates a new instance.\n         * \n         * @param key  the series key.\n         * @param autoSort  automatically sort by x-value?\n         * @param allowDuplicateXValues  allow duplicate values?\n         ",
        "child_ranges": [
            "(line 81,col 13)-(line 81,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectSeriesTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectSeriesTests.MyComparableObjectSeries.add(java.lang.Comparable, java.lang.Object)",
        "snippet": "        public void add(Comparable x, Object y) {\n            super.add(x, y);\n        }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 13)-(line 84,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectSeriesTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectSeriesTests.MyComparableObjectSeries.remove(java.lang.Comparable)",
        "snippet": "        public ComparableObjectItem remove(Comparable x) {\n            return super.remove(x);\n        }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 88,col 13)-(line 88,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectSeriesTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectSeriesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ComparableObjectSeriesTests.class);\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectSeriesTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectSeriesTests.ComparableObjectSeriesTests(java.lang.String)",
        "snippet": "    public ComparableObjectSeriesTests(String name) {\n        super(name);\n    }",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectSeriesTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectSeriesTests.testConstructor1()",
        "snippet": "    public void testConstructor1() {\n        ComparableObjectSeries s1 = new ComparableObjectSeries(\"s1\");\n        assertEquals(\"s1\", s1.getKey());\n        assertNull(s1.getDescription());\n        assertTrue(s1.getAllowDuplicateXValues());\n        assertTrue(s1.getAutoSort());\n        assertEquals(0, s1.getItemCount());\n        assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount());\n        \n        // try null key\n        boolean pass = false;\n        try {\n            s1 = new ComparableObjectSeries(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 113,
        "end_line": 131,
        "comment": "\n     * Some checks for the constructor.\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 69)",
            "(line 115,col 9)-(line 115,col 40)",
            "(line 116,col 9)-(line 116,col 40)",
            "(line 117,col 9)-(line 117,col 50)",
            "(line 118,col 9)-(line 118,col 37)",
            "(line 119,col 9)-(line 119,col 43)",
            "(line 120,col 9)-(line 120,col 66)",
            "(line 123,col 9)-(line 123,col 29)",
            "(line 124,col 9)-(line 129,col 9)",
            "(line 130,col 9)-(line 130,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectSeriesTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectSeriesTests.testEquals()",
        "snippet": "    public void testEquals() {\n        MyComparableObjectSeries s1 = new MyComparableObjectSeries(\"A\");\n        MyComparableObjectSeries s2 = new MyComparableObjectSeries(\"A\");\n        assertTrue(s1.equals(s2));\n        assertTrue(s2.equals(s1));\n\n        // key\n        s1 = new MyComparableObjectSeries(\"B\");\n        assertFalse(s1.equals(s2));\n        s2 = new MyComparableObjectSeries(\"B\");\n        assertTrue(s1.equals(s2));\n        \n        // autoSort\n        s1 = new MyComparableObjectSeries(\"B\", false, true);\n        assertFalse(s1.equals(s2));\n        s2 = new MyComparableObjectSeries(\"B\", false, true);\n        assertTrue(s1.equals(s2));\n\n        // allowDuplicateXValues\n        s1 = new MyComparableObjectSeries(\"B\", false, false);\n        assertFalse(s1.equals(s2));\n        s2 = new MyComparableObjectSeries(\"B\", false, false);\n        assertTrue(s1.equals(s2));\n\n        // add a value\n        s1.add(new Integer(1), \"ABC\");\n        assertFalse(s1.equals(s2));\n        s2.add(new Integer(1), \"ABC\");\n        assertTrue(s1.equals(s2));\n        \n        // add another value\n        s1.add(new Integer(0), \"DEF\");\n        assertFalse(s1.equals(s2));\n        s2.add(new Integer(0), \"DEF\");\n        assertTrue(s1.equals(s2));\n        \n        // remove an item\n        s1.remove(new Integer(1));\n        assertFalse(s1.equals(s2));\n        s2.remove(new Integer(1));\n        assertTrue(s1.equals(s2));\n    }",
        "begin_line": 136,
        "end_line": 177,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 72)",
            "(line 138,col 9)-(line 138,col 72)",
            "(line 139,col 9)-(line 139,col 34)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 143,col 9)-(line 143,col 47)",
            "(line 144,col 9)-(line 144,col 35)",
            "(line 145,col 9)-(line 145,col 47)",
            "(line 146,col 9)-(line 146,col 34)",
            "(line 149,col 9)-(line 149,col 60)",
            "(line 150,col 9)-(line 150,col 35)",
            "(line 151,col 9)-(line 151,col 60)",
            "(line 152,col 9)-(line 152,col 34)",
            "(line 155,col 9)-(line 155,col 61)",
            "(line 156,col 9)-(line 156,col 35)",
            "(line 157,col 9)-(line 157,col 61)",
            "(line 158,col 9)-(line 158,col 34)",
            "(line 161,col 9)-(line 161,col 38)",
            "(line 162,col 9)-(line 162,col 35)",
            "(line 163,col 9)-(line 163,col 38)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 167,col 9)-(line 167,col 38)",
            "(line 168,col 9)-(line 168,col 35)",
            "(line 169,col 9)-(line 169,col 38)",
            "(line 170,col 9)-(line 170,col 34)",
            "(line 173,col 9)-(line 173,col 34)",
            "(line 174,col 9)-(line 174,col 35)",
            "(line 175,col 9)-(line 175,col 34)",
            "(line 176,col 9)-(line 176,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectSeriesTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectSeriesTests.testCloning()",
        "snippet": "    public void testCloning() {\n        MyComparableObjectSeries s1 = new MyComparableObjectSeries(\"A\");\n        s1.add(new Integer(1), \"ABC\");\n        MyComparableObjectSeries s2 = null;\n        try {\n            s2 = (MyComparableObjectSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n    }",
        "begin_line": 182,
        "end_line": 195,
        "comment": "\n     * Some checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 72)",
            "(line 184,col 9)-(line 184,col 38)",
            "(line 185,col 9)-(line 185,col 43)",
            "(line 186,col 9)-(line 191,col 9)",
            "(line 192,col 9)-(line 192,col 29)",
            "(line 193,col 9)-(line 193,col 51)",
            "(line 194,col 9)-(line 194,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectSeriesTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectSeriesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        MyComparableObjectSeries s1 = new MyComparableObjectSeries(\"A\");\n        s1.add(new Integer(1), \"ABC\");\n        MyComparableObjectSeries s2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            s2 = (MyComparableObjectSeries) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(s1, s2);\n    }",
        "begin_line": 200,
        "end_line": 219,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 72)",
            "(line 202,col 9)-(line 202,col 38)",
            "(line 203,col 9)-(line 203,col 43)",
            "(line 204,col 9)-(line 217,col 9)",
            "(line 218,col 9)-(line 218,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.ComparableObjectSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/ComparableObjectSeriesTests.java",
        "signature": "org.jfree.data.junit.ComparableObjectSeriesTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        MyComparableObjectSeries s1 = new MyComparableObjectSeries(\"Test\");\n        MyComparableObjectSeries s2 = new MyComparableObjectSeries(\"Test\");\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n        \n        s1.add(\"A\", \"1\");\n        s2.add(\"A\", \"1\");\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n        \n        s1.add(\"B\", null);\n        s2.add(\"B\", null);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n        \n        s1.add(\"C\", \"3\");\n        s2.add(\"C\", \"3\");\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(\"D\", \"4\");\n        s2.add(\"D\", \"4\");\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n    }",
        "begin_line": 224,
        "end_line": 249,
        "comment": "\n     * Some simple checks for the hashCode() method.\n     ",
        "child_ranges": [
            "(line 225,col 9)-(line 225,col 75)",
            "(line 226,col 9)-(line 226,col 75)",
            "(line 227,col 9)-(line 227,col 29)",
            "(line 228,col 9)-(line 228,col 51)",
            "(line 230,col 9)-(line 230,col 25)",
            "(line 231,col 9)-(line 231,col 25)",
            "(line 232,col 9)-(line 232,col 29)",
            "(line 233,col 9)-(line 233,col 51)",
            "(line 235,col 9)-(line 235,col 26)",
            "(line 236,col 9)-(line 236,col 26)",
            "(line 237,col 9)-(line 237,col 29)",
            "(line 238,col 9)-(line 238,col 51)",
            "(line 240,col 9)-(line 240,col 25)",
            "(line 241,col 9)-(line 241,col 25)",
            "(line 242,col 9)-(line 242,col 29)",
            "(line 243,col 9)-(line 243,col 51)",
            "(line 245,col 9)-(line 245,col 25)",
            "(line 246,col 9)-(line 246,col 25)",
            "(line 247,col 9)-(line 247,col 29)",
            "(line 248,col 9)-(line 248,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(KeyedObjectTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectTests.KeyedObjectTests(java.lang.String)",
        "snippet": "    public KeyedObjectTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        KeyedObject ko1 = new KeyedObject(\"Test\", \"Object\");\n        KeyedObject ko2 = new KeyedObject(\"Test\", \"Object\");\n        assertTrue(ko1.equals(ko2));\n        assertTrue(ko2.equals(ko1));\n\n        ko1 = new KeyedObject(\"Test 1\", \"Object\");\n        ko2 = new KeyedObject(\"Test 2\", \"Object\");\n        assertFalse(ko1.equals(ko2));\n\n        ko1 = new KeyedObject(\"Test\", \"Object 1\");\n        ko2 = new KeyedObject(\"Test\", \"Object 2\");\n        assertFalse(ko1.equals(ko2));\n\n    }",
        "begin_line": 85,
        "end_line": 100,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 60)",
            "(line 88,col 9)-(line 88,col 60)",
            "(line 89,col 9)-(line 89,col 36)",
            "(line 90,col 9)-(line 90,col 36)",
            "(line 92,col 9)-(line 92,col 50)",
            "(line 93,col 9)-(line 93,col 50)",
            "(line 94,col 9)-(line 94,col 37)",
            "(line 96,col 9)-(line 96,col 50)",
            "(line 97,col 9)-(line 97,col 50)",
            "(line 98,col 9)-(line 98,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectTests.testCloning()",
        "snippet": "    public void testCloning() {\n        KeyedObject ko1 = new KeyedObject(\"Test\", \"Object\");\n        KeyedObject ko2 = null;\n        try {\n            ko2 = (KeyedObject) ko1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(ko1 != ko2);\n        assertTrue(ko1.getClass() == ko2.getClass());\n        assertTrue(ko1.equals(ko2));\n    }",
        "begin_line": 105,
        "end_line": 117,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 60)",
            "(line 107,col 9)-(line 107,col 31)",
            "(line 108,col 9)-(line 113,col 9)",
            "(line 114,col 9)-(line 114,col 31)",
            "(line 115,col 9)-(line 115,col 53)",
            "(line 116,col 9)-(line 116,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n        // case 1 - object is mutable but not PublicCloneable\n        Object obj1 = new ArrayList();\n        KeyedObject ko1 = new KeyedObject(\"Test\", obj1);\n        KeyedObject ko2 = null;\n        try {\n            ko2 = (KeyedObject) ko1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(ko1 != ko2);\n        assertTrue(ko1.getClass() == ko2.getClass());\n        assertTrue(ko1.equals(ko2));\n        \n        // the clone contains a reference to the original object\n        assertTrue(ko2.getObject() == obj1); \n        \n        // CASE 2 - object is mutable AND PublicCloneable\n        obj1 = new DefaultPieDataset();\n        ko1 = new KeyedObject(\"Test\", obj1);\n        ko2 = null;\n        try {\n            ko2 = (KeyedObject) ko1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(ko1 != ko2);\n        assertTrue(ko1.getClass() == ko2.getClass());\n        assertTrue(ko1.equals(ko2));\n        \n        // the clone contains a reference to a CLONE of the original object\n        assertTrue(ko2.getObject() != obj1); \n    }",
        "begin_line": 122,
        "end_line": 156,
        "comment": "\n     * Confirm special features of cloning.\n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 38)",
            "(line 125,col 9)-(line 125,col 56)",
            "(line 126,col 9)-(line 126,col 31)",
            "(line 127,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 133,col 31)",
            "(line 134,col 9)-(line 134,col 53)",
            "(line 135,col 9)-(line 135,col 36)",
            "(line 138,col 9)-(line 138,col 44)",
            "(line 141,col 9)-(line 141,col 39)",
            "(line 142,col 9)-(line 142,col 44)",
            "(line 143,col 9)-(line 143,col 19)",
            "(line 144,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 150,col 31)",
            "(line 151,col 9)-(line 151,col 53)",
            "(line 152,col 9)-(line 152,col 36)",
            "(line 155,col 9)-(line 155,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        KeyedObject ko1 = new KeyedObject(\"Test\", \"Object\");\n        KeyedObject ko2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(ko1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            ko2 = (KeyedObject) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(ko1, ko2);\n\n    }",
        "begin_line": 161,
        "end_line": 183,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 60)",
            "(line 164,col 9)-(line 164,col 31)",
            "(line 166,col 9)-(line 180,col 9)",
            "(line 181,col 9)-(line 181,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultKeyedValues2DTests.class);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.DefaultKeyedValues2DTests(java.lang.String)",
        "snippet": "    public DefaultKeyedValues2DTests(String name) {\n        super(name);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testGetValue()",
        "snippet": "    public void testGetValue() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        assertEquals(new Double(1.0), d.getValue(\"R1\", \"C1\"));\n        boolean pass = false;\n        try {\n            d.getValue(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            d.getValue(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n    }",
        "begin_line": 89,
        "end_line": 110,
        "comment": "\n     * Some checks for the getValue() method.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 60)",
            "(line 91,col 9)-(line 91,col 48)",
            "(line 92,col 9)-(line 92,col 62)",
            "(line 93,col 9)-(line 93,col 29)",
            "(line 94,col 9)-(line 99,col 9)",
            "(line 100,col 9)-(line 100,col 25)",
            "(line 102,col 9)-(line 102,col 21)",
            "(line 103,col 9)-(line 108,col 9)",
            "(line 109,col 9)-(line 109,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultKeyedValues2D v1 = new DefaultKeyedValues2D();\n        v1.setValue(new Integer(1), \"V1\", \"C1\");\n        v1.setValue(null, \"V2\", \"C1\");\n        v1.setValue(new Integer(3), \"V3\", \"C2\");\n        DefaultKeyedValues2D v2 = null;\n        try {\n            v2 = (DefaultKeyedValues2D) v1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(v1 != v2);\n        assertTrue(v1.getClass() == v2.getClass());\n        assertTrue(v1.equals(v2));\n        \n        // check that clone is independent of the original\n        v2.setValue(new Integer(2), \"V2\", \"C1\");\n        assertFalse(v1.equals(v2));\n    }",
        "begin_line": 115,
        "end_line": 134,
        "comment": "\n     * Some checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 61)",
            "(line 117,col 9)-(line 117,col 48)",
            "(line 118,col 9)-(line 118,col 38)",
            "(line 119,col 9)-(line 119,col 48)",
            "(line 120,col 9)-(line 120,col 39)",
            "(line 121,col 9)-(line 126,col 9)",
            "(line 127,col 9)-(line 127,col 29)",
            "(line 128,col 9)-(line 128,col 51)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 132,col 9)-(line 132,col 48)",
            "(line 133,col 9)-(line 133,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultKeyedValues2D kv2D1 = new DefaultKeyedValues2D();\n        kv2D1.addValue(new Double(234.2), \"Row1\", \"Col1\");\n        kv2D1.addValue(null, \"Row1\", \"Col2\");\n        kv2D1.addValue(new Double(345.9), \"Row2\", \"Col1\");\n        kv2D1.addValue(new Double(452.7), \"Row2\", \"Col2\");\n\n        DefaultKeyedValues2D kv2D2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(kv2D1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            kv2D2 = (DefaultKeyedValues2D) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(kv2D1, kv2D2);\n\n    }",
        "begin_line": 139,
        "end_line": 165,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 64)",
            "(line 142,col 9)-(line 142,col 58)",
            "(line 143,col 9)-(line 143,col 45)",
            "(line 144,col 9)-(line 144,col 58)",
            "(line 145,col 9)-(line 145,col 58)",
            "(line 147,col 9)-(line 147,col 42)",
            "(line 149,col 9)-(line 162,col 9)",
            "(line 163,col 9)-(line 163,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultKeyedValues2D d1 = new DefaultKeyedValues2D();\n        DefaultKeyedValues2D d2 = new DefaultKeyedValues2D();\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n        \n        d1.addValue(new Double(1.0), new Double(2.0), \"S1\");\n        assertFalse(d1.equals(d2));\n        d2.addValue(new Double(1.0), new Double(2.0), \"S1\");\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 170,
        "end_line": 180,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 61)",
            "(line 172,col 9)-(line 172,col 61)",
            "(line 173,col 9)-(line 173,col 34)",
            "(line 174,col 9)-(line 174,col 34)",
            "(line 176,col 9)-(line 176,col 60)",
            "(line 177,col 9)-(line 177,col 35)",
            "(line 178,col 9)-(line 178,col 60)",
            "(line 179,col 9)-(line 179,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testSparsePopulation()",
        "snippet": "    public void testSparsePopulation() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        d.addValue(new Integer(11), \"R1\", \"C1\");\n        d.addValue(new Integer(22), \"R2\", \"C2\");\n        \n        assertEquals(new Integer(11), d.getValue(\"R1\", \"C1\"));\n        assertNull(d.getValue(\"R1\", \"C2\"));\n        assertEquals(new Integer(22), d.getValue(\"R2\", \"C2\"));\n        assertNull(d.getValue(\"R2\", \"C1\"));\n    }",
        "begin_line": 186,
        "end_line": 195,
        "comment": "\n     * Populates a data structure with sparse entries, then checks that\n     * the unspecified entries return null.\n     ",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 60)",
            "(line 188,col 9)-(line 188,col 48)",
            "(line 189,col 9)-(line 189,col 48)",
            "(line 191,col 9)-(line 191,col 62)",
            "(line 192,col 9)-(line 192,col 43)",
            "(line 193,col 9)-(line 193,col 62)",
            "(line 194,col 9)-(line 194,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testRowCount()",
        "snippet": "    public void testRowCount() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        assertEquals(0, d.getRowCount());\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        assertEquals(1, d.getRowCount());\n        d.addValue(new Double(2.0), \"R2\", \"C1\");\n        assertEquals(2, d.getRowCount());\n    }",
        "begin_line": 200,
        "end_line": 207,
        "comment": "\n     * Some basic checks for the getRowCount() method.\n     ",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 60)",
            "(line 202,col 9)-(line 202,col 41)",
            "(line 203,col 9)-(line 203,col 48)",
            "(line 204,col 9)-(line 204,col 41)",
            "(line 205,col 9)-(line 205,col 48)",
            "(line 206,col 9)-(line 206,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testColumnCount()",
        "snippet": "    public void testColumnCount() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        assertEquals(0, d.getColumnCount());\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        assertEquals(1, d.getColumnCount());\n        d.addValue(new Double(2.0), \"R1\", \"C2\");\n        assertEquals(2, d.getColumnCount());\n    }",
        "begin_line": 212,
        "end_line": 219,
        "comment": "\n     * Some basic checks for the getColumnCount() method.\n     ",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 60)",
            "(line 214,col 9)-(line 214,col 44)",
            "(line 215,col 9)-(line 215,col 48)",
            "(line 216,col 9)-(line 216,col 44)",
            "(line 217,col 9)-(line 217,col 48)",
            "(line 218,col 9)-(line 218,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testGetValue2()",
        "snippet": "    public void testGetValue2() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        boolean pass = false;\n        try {\n            d.getValue(0, 0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        assertEquals(1.0, d.getValue(0, 0).doubleValue(), EPSILON);\n        d.addValue(new Double(2.0), \"R2\", \"C2\");\n        assertEquals(2.0, d.getValue(1, 1).doubleValue(), EPSILON);\n        assertNull(d.getValue(1, 0));\n        assertNull(d.getValue(0, 1));\n        \n        pass = false;\n        try {\n            d.getValue(2, 0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 226,
        "end_line": 251,
        "comment": "\n     * Some basic checks for the getValue(int, int) method.\n     ",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 60)",
            "(line 228,col 9)-(line 228,col 29)",
            "(line 229,col 9)-(line 234,col 9)",
            "(line 235,col 9)-(line 235,col 25)",
            "(line 236,col 9)-(line 236,col 48)",
            "(line 237,col 9)-(line 237,col 67)",
            "(line 238,col 9)-(line 238,col 48)",
            "(line 239,col 9)-(line 239,col 67)",
            "(line 240,col 9)-(line 240,col 37)",
            "(line 241,col 9)-(line 241,col 37)",
            "(line 243,col 9)-(line 243,col 21)",
            "(line 244,col 9)-(line 249,col 9)",
            "(line 250,col 9)-(line 250,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testGetRowKey()",
        "snippet": "    public void testGetRowKey() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        boolean pass = false;\n        try {\n            d.getRowKey(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        d.addValue(new Double(1.0), \"R2\", \"C1\");\n        assertEquals(\"R1\", d.getRowKey(0));\n        assertEquals(\"R2\", d.getRowKey(1));\n        \n        // check sorted rows\n        d = new DefaultKeyedValues2D(true);\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        assertEquals(\"R1\", d.getRowKey(0));\n        d.addValue(new Double(0.0), \"R0\", \"C1\");\n        assertEquals(\"R0\", d.getRowKey(0));\n        assertEquals(\"R1\", d.getRowKey(1));\n    }",
        "begin_line": 256,
        "end_line": 278,
        "comment": "\n     * Some basic checks for the getRowKey() method.\n     ",
        "child_ranges": [
            "(line 257,col 9)-(line 257,col 60)",
            "(line 258,col 9)-(line 258,col 29)",
            "(line 259,col 9)-(line 264,col 9)",
            "(line 265,col 9)-(line 265,col 25)",
            "(line 266,col 9)-(line 266,col 48)",
            "(line 267,col 9)-(line 267,col 48)",
            "(line 268,col 9)-(line 268,col 43)",
            "(line 269,col 9)-(line 269,col 43)",
            "(line 272,col 9)-(line 272,col 43)",
            "(line 273,col 9)-(line 273,col 48)",
            "(line 274,col 9)-(line 274,col 43)",
            "(line 275,col 9)-(line 275,col 48)",
            "(line 276,col 9)-(line 276,col 43)",
            "(line 277,col 9)-(line 277,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testGetColumnKey()",
        "snippet": "    public void testGetColumnKey() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        boolean pass = false;\n        try {\n            d.getColumnKey(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        d.addValue(new Double(1.0), \"R1\", \"C2\");\n        assertEquals(\"C1\", d.getColumnKey(0));\n        assertEquals(\"C2\", d.getColumnKey(1));\n    }",
        "begin_line": 283,
        "end_line": 297,
        "comment": "\n     * Some basic checks for the getColumnKey() method.\n     ",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 60)",
            "(line 285,col 9)-(line 285,col 29)",
            "(line 286,col 9)-(line 291,col 9)",
            "(line 292,col 9)-(line 292,col 25)",
            "(line 293,col 9)-(line 293,col 48)",
            "(line 294,col 9)-(line 294,col 48)",
            "(line 295,col 9)-(line 295,col 46)",
            "(line 296,col 9)-(line 296,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testRemoveValue()",
        "snippet": "    public void testRemoveValue() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        d.removeValue(\"R1\", \"C1\");\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        d.removeValue(\"R1\", \"C1\");\n        assertEquals(0, d.getRowCount());\n        assertEquals(0, d.getColumnCount());\n        \n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        d.addValue(new Double(2.0), \"R2\", \"C1\");\n        d.removeValue(\"R1\", \"C1\");\n        assertEquals(new Double(2.0), d.getValue(0, 0));\n    }",
        "begin_line": 302,
        "end_line": 314,
        "comment": "\n     * Some basic checks for the removeValue() method.\n     ",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 60)",
            "(line 304,col 9)-(line 304,col 34)",
            "(line 305,col 9)-(line 305,col 48)",
            "(line 306,col 9)-(line 306,col 34)",
            "(line 307,col 9)-(line 307,col 41)",
            "(line 308,col 9)-(line 308,col 44)",
            "(line 310,col 9)-(line 310,col 48)",
            "(line 311,col 9)-(line 311,col 48)",
            "(line 312,col 9)-(line 312,col 34)",
            "(line 313,col 9)-(line 313,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testRemoveValueBug1690654()",
        "snippet": "    public void testRemoveValueBug1690654() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        d.addValue(new Double(2.0), \"R2\", \"C2\");\n        assertEquals(2, d.getColumnCount());\n        assertEquals(2, d.getRowCount());\n        d.removeValue(\"R2\", \"C2\");\n        assertEquals(1, d.getColumnCount());\n        assertEquals(1, d.getRowCount());\n        assertEquals(new Double(1.0), d.getValue(0, 0));\n    }",
        "begin_line": 319,
        "end_line": 329,
        "comment": "\n     * A test for bug 1690654.\n     ",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 60)",
            "(line 321,col 9)-(line 321,col 48)",
            "(line 322,col 9)-(line 322,col 48)",
            "(line 323,col 9)-(line 323,col 44)",
            "(line 324,col 9)-(line 324,col 41)",
            "(line 325,col 9)-(line 325,col 34)",
            "(line 326,col 9)-(line 326,col 44)",
            "(line 327,col 9)-(line 327,col 41)",
            "(line 328,col 9)-(line 328,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testRemoveRow()",
        "snippet": "    public void testRemoveRow() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        boolean pass = false;\n        try {\n            d.removeRow(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);        \n    }",
        "begin_line": 334,
        "end_line": 344,
        "comment": "\n     * Some basic checks for the removeRow() method.\n     ",
        "child_ranges": [
            "(line 335,col 9)-(line 335,col 60)",
            "(line 336,col 9)-(line 336,col 29)",
            "(line 337,col 9)-(line 342,col 9)",
            "(line 343,col 9)-(line 343,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testRemoveColumnByKey()",
        "snippet": "    public void testRemoveColumnByKey() {\n    \tDefaultKeyedValues2D d = new DefaultKeyedValues2D();\n    \td.addValue(new Double(1.0), \"R1\", \"C1\");\n    \td.addValue(new Double(2.0), \"R2\", \"C2\");\n    \td.removeColumn(\"C2\");\n    \td.addValue(new Double(3.0), \"R2\", \"C2\");\n    \tassertEquals(3.0, d.getValue(\"R2\", \"C2\").doubleValue(), EPSILON);\n    \t\n    \t// check for unknown column\n    \tboolean pass = false;\n    \ttry {\n    \t\td.removeColumn(\"XXX\");\n    \t}\n    \tcatch (UnknownKeyException e) {\n    \t\tpass = true;\n    \t}\n    \tassertTrue(pass);\n    }",
        "begin_line": 349,
        "end_line": 366,
        "comment": "\n     * Some basic checks for the removeColumn(Comparable) method.\n     ",
        "child_ranges": [
            "(line 350,col 6)-(line 350,col 57)",
            "(line 351,col 6)-(line 351,col 45)",
            "(line 352,col 6)-(line 352,col 45)",
            "(line 353,col 6)-(line 353,col 26)",
            "(line 354,col 6)-(line 354,col 45)",
            "(line 355,col 6)-(line 355,col 70)",
            "(line 358,col 6)-(line 358,col 26)",
            "(line 359,col 6)-(line 364,col 6)",
            "(line 365,col 6)-(line 365,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(KeyedObjects2DTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.KeyedObjects2DTests(java.lang.String)",
        "snippet": "    public KeyedObjects2DTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testEquals()",
        "snippet": "    public void testEquals() {\n        KeyedObjects2D k1 = new KeyedObjects2D();\n        KeyedObjects2D k2 = new KeyedObjects2D();\n        assertTrue(k1.equals(k2));\n        assertTrue(k2.equals(k1));\n        \n        k1.addObject(new Integer(99), \"R1\", \"C1\");\n        assertFalse(k1.equals(k2));\n        k2.addObject(new Integer(99), \"R1\", \"C1\");\n        assertTrue(k1.equals(k2)); \n    }",
        "begin_line": 85,
        "end_line": 95,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 49)",
            "(line 87,col 9)-(line 87,col 49)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 91,col 9)-(line 91,col 50)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 50)",
            "(line 94,col 9)-(line 94,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testCloning()",
        "snippet": "    public void testCloning() {\n        KeyedObjects2D o1 = new KeyedObjects2D();\n        o1.setObject(new Integer(1), \"V1\", \"C1\");\n        o1.setObject(null, \"V2\", \"C1\");\n        o1.setObject(new Integer(3), \"V3\", \"C2\");\n        KeyedObjects2D o2 = null;\n        try {\n            o2 = (KeyedObjects2D) o1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(o1 != o2);\n        assertTrue(o1.getClass() == o2.getClass());\n        assertTrue(o1.equals(o2));\n        \n        // check independence\n        o1.addObject(\"XX\", \"R1\", \"C1\");\n        assertFalse(o1.equals(o2));\n    }",
        "begin_line": 100,
        "end_line": 119,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 49)",
            "(line 102,col 9)-(line 102,col 49)",
            "(line 103,col 9)-(line 103,col 39)",
            "(line 104,col 9)-(line 104,col 49)",
            "(line 105,col 9)-(line 105,col 33)",
            "(line 106,col 9)-(line 111,col 9)",
            "(line 112,col 9)-(line 112,col 29)",
            "(line 113,col 9)-(line 113,col 51)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 117,col 9)-(line 117,col 39)",
            "(line 118,col 9)-(line 118,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        KeyedObjects2D ko2D1 = new KeyedObjects2D();\n        ko2D1.addObject(new Double(234.2), \"Row1\", \"Col1\");\n        ko2D1.addObject(null, \"Row1\", \"Col2\");\n        ko2D1.addObject(new Double(345.9), \"Row2\", \"Col1\");\n        ko2D1.addObject(new Double(452.7), \"Row2\", \"Col2\");\n\n        KeyedObjects2D ko2D2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(ko2D1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            ko2D2 = (KeyedObjects2D) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(ko2D1, ko2D2);\n\n    }",
        "begin_line": 124,
        "end_line": 150,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 52)",
            "(line 127,col 9)-(line 127,col 59)",
            "(line 128,col 9)-(line 128,col 46)",
            "(line 129,col 9)-(line 129,col 59)",
            "(line 130,col 9)-(line 130,col 59)",
            "(line 132,col 9)-(line 132,col 36)",
            "(line 134,col 9)-(line 147,col 9)",
            "(line 148,col 9)-(line 148,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testGetValueByIndex()",
        "snippet": "    public void testGetValueByIndex() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        assertEquals(\"Obj1\", data.getObject(0, 0));\n        assertEquals(\"Obj2\", data.getObject(1, 1));\n        assertNull(data.getObject(0, 1));\n        assertNull(data.getObject(1, 0));\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(-1, 0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            data.getObject(0, -1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            data.getObject(2, 0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            data.getObject(0, 2);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 155,
        "end_line": 200,
        "comment": "\n     * Some checks for the getValue(int, int) method.\n     ",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 51)",
            "(line 157,col 9)-(line 157,col 43)",
            "(line 158,col 9)-(line 158,col 43)",
            "(line 159,col 9)-(line 159,col 51)",
            "(line 160,col 9)-(line 160,col 51)",
            "(line 161,col 9)-(line 161,col 41)",
            "(line 162,col 9)-(line 162,col 41)",
            "(line 165,col 9)-(line 165,col 29)",
            "(line 166,col 9)-(line 171,col 9)",
            "(line 172,col 9)-(line 172,col 25)",
            "(line 174,col 9)-(line 174,col 21)",
            "(line 175,col 9)-(line 180,col 9)",
            "(line 181,col 9)-(line 181,col 25)",
            "(line 183,col 9)-(line 183,col 21)",
            "(line 184,col 9)-(line 189,col 9)",
            "(line 190,col 9)-(line 190,col 25)",
            "(line 192,col 9)-(line 192,col 21)",
            "(line 193,col 9)-(line 198,col 9)",
            "(line 199,col 9)-(line 199,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testGetValueByKey()",
        "snippet": "    public void testGetValueByKey() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));\n        assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));\n        assertNull(data.getObject(\"R1\", \"C2\"));\n        assertNull(data.getObject(\"R2\", \"C1\"));\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 205,
        "end_line": 250,
        "comment": "\n     * Some checks for the getValue(Comparable, Comparable) method.\n     ",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 51)",
            "(line 207,col 9)-(line 207,col 43)",
            "(line 208,col 9)-(line 208,col 43)",
            "(line 209,col 9)-(line 209,col 57)",
            "(line 210,col 9)-(line 210,col 57)",
            "(line 211,col 9)-(line 211,col 47)",
            "(line 212,col 9)-(line 212,col 47)",
            "(line 215,col 9)-(line 215,col 29)",
            "(line 216,col 9)-(line 221,col 9)",
            "(line 222,col 9)-(line 222,col 25)",
            "(line 224,col 9)-(line 224,col 21)",
            "(line 225,col 9)-(line 230,col 9)",
            "(line 231,col 9)-(line 231,col 25)",
            "(line 233,col 9)-(line 233,col 21)",
            "(line 234,col 9)-(line 239,col 9)",
            "(line 240,col 9)-(line 240,col 25)",
            "(line 242,col 9)-(line 242,col 21)",
            "(line 243,col 9)-(line 248,col 9)",
            "(line 249,col 9)-(line 249,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testSetObject()",
        "snippet": "    public void testSetObject() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));\n        assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));\n        assertNull(data.getObject(\"R1\", \"C2\"));\n        assertNull(data.getObject(\"R2\", \"C1\"));\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 255,
        "end_line": 286,
        "comment": "\n     * Some checks for the setObject(Object, Comparable, Comparable) method.\n     ",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 51)",
            "(line 257,col 9)-(line 257,col 43)",
            "(line 258,col 9)-(line 258,col 43)",
            "(line 259,col 9)-(line 259,col 57)",
            "(line 260,col 9)-(line 260,col 57)",
            "(line 261,col 9)-(line 261,col 47)",
            "(line 262,col 9)-(line 262,col 47)",
            "(line 265,col 9)-(line 265,col 42)",
            "(line 266,col 9)-(line 266,col 56)",
            "(line 269,col 9)-(line 269,col 29)",
            "(line 270,col 9)-(line 275,col 9)",
            "(line 276,col 9)-(line 276,col 25)",
            "(line 278,col 9)-(line 278,col 21)",
            "(line 279,col 9)-(line 284,col 9)",
            "(line 285,col 9)-(line 285,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testRemoveRowByIndex()",
        "snippet": "    public void testRemoveRowByIndex() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeRow(0);\n        assertEquals(1, data.getRowCount());\n        assertEquals(\"Obj2\", data.getObject(0, 1));\n        \n        // try negative row index\n        boolean pass = false;\n        try {\n            data.removeRow(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try row index too high\n        pass = false;\n        try {\n            data.removeRow(data.getRowCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 291,
        "end_line": 318,
        "comment": "\n     * Some checks for the removeRow(int) method.\n     ",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 51)",
            "(line 293,col 9)-(line 293,col 43)",
            "(line 294,col 9)-(line 294,col 43)",
            "(line 295,col 9)-(line 295,col 26)",
            "(line 296,col 9)-(line 296,col 44)",
            "(line 297,col 9)-(line 297,col 51)",
            "(line 300,col 9)-(line 300,col 29)",
            "(line 301,col 9)-(line 306,col 9)",
            "(line 307,col 9)-(line 307,col 25)",
            "(line 310,col 9)-(line 310,col 21)",
            "(line 311,col 9)-(line 316,col 9)",
            "(line 317,col 9)-(line 317,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testRemoveColumnByIndex()",
        "snippet": "    public void testRemoveColumnByIndex() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        assertEquals(1, data.getColumnCount());\n        assertEquals(\"Obj2\", data.getObject(1, 0));\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 323,
        "end_line": 350,
        "comment": "\n     * Some checks for the removeColumn(int) method.\n     ",
        "child_ranges": [
            "(line 324,col 9)-(line 324,col 51)",
            "(line 325,col 9)-(line 325,col 43)",
            "(line 326,col 9)-(line 326,col 43)",
            "(line 327,col 9)-(line 327,col 29)",
            "(line 328,col 9)-(line 328,col 47)",
            "(line 329,col 9)-(line 329,col 51)",
            "(line 332,col 9)-(line 332,col 29)",
            "(line 333,col 9)-(line 338,col 9)",
            "(line 339,col 9)-(line 339,col 25)",
            "(line 342,col 9)-(line 342,col 21)",
            "(line 343,col 9)-(line 348,col 9)",
            "(line 349,col 9)-(line 349,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testRemoveRowByKey()",
        "snippet": "    public void testRemoveRowByKey() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeRow(\"R2\");\n        assertEquals(1, data.getRowCount());\n        assertEquals(\"Obj1\", data.getObject(0, 0));\n        \n        // try unknown row key\n        boolean pass = false;\n        try {\n            data.removeRow(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try null row key\n        pass = false;\n        try {\n            data.removeRow(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 355,
        "end_line": 382,
        "comment": "\n     * Some checks for the removeRow(Comparable) method.\n     ",
        "child_ranges": [
            "(line 356,col 9)-(line 356,col 51)",
            "(line 357,col 9)-(line 357,col 43)",
            "(line 358,col 9)-(line 358,col 43)",
            "(line 359,col 9)-(line 359,col 29)",
            "(line 360,col 9)-(line 360,col 44)",
            "(line 361,col 9)-(line 361,col 51)",
            "(line 364,col 9)-(line 364,col 29)",
            "(line 365,col 9)-(line 370,col 9)",
            "(line 371,col 9)-(line 371,col 25)",
            "(line 374,col 9)-(line 374,col 21)",
            "(line 375,col 9)-(line 380,col 9)",
            "(line 381,col 9)-(line 381,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testRemoveColumnByKey()",
        "snippet": "    public void testRemoveColumnByKey() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        assertEquals(1, data.getColumnCount());\n        assertEquals(\"Obj1\", data.getObject(0, 0));\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 387,
        "end_line": 414,
        "comment": "\n     * Some checks for the removeColumn(Comparable) method.\n     ",
        "child_ranges": [
            "(line 388,col 9)-(line 388,col 51)",
            "(line 389,col 9)-(line 389,col 43)",
            "(line 390,col 9)-(line 390,col 43)",
            "(line 391,col 9)-(line 391,col 32)",
            "(line 392,col 9)-(line 392,col 47)",
            "(line 393,col 9)-(line 393,col 51)",
            "(line 396,col 9)-(line 396,col 29)",
            "(line 397,col 9)-(line 402,col 9)",
            "(line 403,col 9)-(line 403,col 25)",
            "(line 406,col 9)-(line 406,col 21)",
            "(line 407,col 9)-(line 412,col 9)",
            "(line 413,col 9)-(line 413,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testRemoveValue()",
        "snippet": "    public void testRemoveValue() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeObject(\"R2\", \"C2\");\n        assertEquals(1, data.getRowCount());\n        assertEquals(1, data.getColumnCount());\n        assertEquals(\"Obj1\", data.getObject(0, 0));\n    }",
        "begin_line": 419,
        "end_line": 427,
        "comment": "\n     * A simple check for the removeValue() method.\n     ",
        "child_ranges": [
            "(line 420,col 9)-(line 420,col 51)",
            "(line 421,col 9)-(line 421,col 43)",
            "(line 422,col 9)-(line 422,col 43)",
            "(line 423,col 9)-(line 423,col 38)",
            "(line 424,col 9)-(line 424,col 44)",
            "(line 425,col 9)-(line 425,col 47)",
            "(line 426,col 9)-(line 426,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.RangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/RangeTests.java",
        "signature": "org.jfree.data.junit.RangeTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(RangeTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.RangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/RangeTests.java",
        "signature": "org.jfree.data.junit.RangeTests.RangeTests(java.lang.String)",
        "snippet": "    public RangeTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.RangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/RangeTests.java",
        "signature": "org.jfree.data.junit.RangeTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        Range r1 = new Range(0.0, 1.0);\n        Range r2 = new Range(0.0, 1.0);\n        assertEquals(r1, r2);\n        assertEquals(r2, r1);\n\n        r1 = new Range(0.0, 1.0);\n        r2 = new Range(0.5, 1.0);\n        assertFalse(r1.equals(r2));\n\n        r1 = new Range(0.0, 1.0);\n        r2 = new Range(0.0, 2.0);\n        assertFalse(r1.equals(r2));\n        \n    }",
        "begin_line": 82,
        "end_line": 97,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 39)",
            "(line 85,col 9)-(line 85,col 39)",
            "(line 86,col 9)-(line 86,col 29)",
            "(line 87,col 9)-(line 87,col 29)",
            "(line 89,col 9)-(line 89,col 33)",
            "(line 90,col 9)-(line 90,col 33)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 93,col 9)-(line 93,col 33)",
            "(line 94,col 9)-(line 94,col 33)",
            "(line 95,col 9)-(line 95,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.RangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/RangeTests.java",
        "signature": "org.jfree.data.junit.RangeTests.testContains()",
        "snippet": "    public void testContains() {\n        Range r1 = new Range(0.0, 1.0);\n        assertFalse(r1.contains(Double.NaN));\n        assertFalse(r1.contains(Double.NEGATIVE_INFINITY));\n        assertFalse(r1.contains(-1.0));\n        assertTrue(r1.contains(0.0));\n        assertTrue(r1.contains(0.5));\n        assertTrue(r1.contains(1.0));\n        assertFalse(r1.contains(2.0));\n        assertFalse(r1.contains(Double.POSITIVE_INFINITY));\n    }",
        "begin_line": 102,
        "end_line": 112,
        "comment": "\n     * Simple tests for the contains() method.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 39)",
            "(line 104,col 9)-(line 104,col 45)",
            "(line 105,col 9)-(line 105,col 59)",
            "(line 106,col 9)-(line 106,col 39)",
            "(line 107,col 9)-(line 107,col 37)",
            "(line 108,col 9)-(line 108,col 37)",
            "(line 109,col 9)-(line 109,col 37)",
            "(line 110,col 9)-(line 110,col 38)",
            "(line 111,col 9)-(line 111,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.RangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/RangeTests.java",
        "signature": "org.jfree.data.junit.RangeTests.testConstrain()",
        "snippet": "    public void testConstrain() {\n        Range r1 = new Range(0.0, 1.0);\n        \n        double d = r1.constrain(0.5);\n        assertEquals(0.5, d, 0.0000001);\n        \n        d = r1.constrain(0.0);\n        assertEquals(0.0, d, 0.0000001);\n\n        d = r1.constrain(1.0);\n        assertEquals(1.0, d, 0.0000001);\n        \n        d = r1.constrain(-1.0);\n        assertEquals(0.0, d, 0.0000001);\n        \n        d = r1.constrain(2.0);\n        assertEquals(1.0, d, 0.0000001);\n\n        d = r1.constrain(Double.POSITIVE_INFINITY);\n        assertEquals(1.0, d, 0.0000001);\n\n        d = r1.constrain(Double.NEGATIVE_INFINITY);\n        assertEquals(0.0, d, 0.0000001);\n\n        d = r1.constrain(Double.NaN);\n        assertTrue(Double.isNaN(d));\n    }",
        "begin_line": 117,
        "end_line": 143,
        "comment": "\n     * Tests the constrain() method for various values.\n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 39)",
            "(line 120,col 9)-(line 120,col 37)",
            "(line 121,col 9)-(line 121,col 40)",
            "(line 123,col 9)-(line 123,col 30)",
            "(line 124,col 9)-(line 124,col 40)",
            "(line 126,col 9)-(line 126,col 30)",
            "(line 127,col 9)-(line 127,col 40)",
            "(line 129,col 9)-(line 129,col 31)",
            "(line 130,col 9)-(line 130,col 40)",
            "(line 132,col 9)-(line 132,col 30)",
            "(line 133,col 9)-(line 133,col 40)",
            "(line 135,col 9)-(line 135,col 51)",
            "(line 136,col 9)-(line 136,col 40)",
            "(line 138,col 9)-(line 138,col 51)",
            "(line 139,col 9)-(line 139,col 40)",
            "(line 141,col 9)-(line 141,col 37)",
            "(line 142,col 9)-(line 142,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.RangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/RangeTests.java",
        "signature": "org.jfree.data.junit.RangeTests.testIntersects()",
        "snippet": "    public void testIntersects() {\n        Range r1 = new Range(0.0, 1.0);\n        assertFalse(r1.intersects(-2.0, -1.0));\n        assertFalse(r1.intersects(-2.0, 0.0));\n        assertTrue(r1.intersects(-2.0, 0.5));\n        assertTrue(r1.intersects(-2.0, 1.0));\n        assertTrue(r1.intersects(-2.0, 1.5));\n        assertTrue(r1.intersects(0.0, 0.5));\n        assertTrue(r1.intersects(0.0, 1.0));\n        assertTrue(r1.intersects(0.0, 1.5));\n        assertTrue(r1.intersects(0.5, 0.6));\n        assertTrue(r1.intersects(0.5, 1.0));\n        assertTrue(r1.intersects(0.5, 1.5));\n        assertFalse(r1.intersects(1.0, 1.1));\n        assertFalse(r1.intersects(1.5, 2.0));\n    }",
        "begin_line": 148,
        "end_line": 163,
        "comment": "\n     * Simple tests for the intersects() method.\n     ",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 39)",
            "(line 150,col 9)-(line 150,col 47)",
            "(line 151,col 9)-(line 151,col 46)",
            "(line 152,col 9)-(line 152,col 45)",
            "(line 153,col 9)-(line 153,col 45)",
            "(line 154,col 9)-(line 154,col 45)",
            "(line 155,col 9)-(line 155,col 44)",
            "(line 156,col 9)-(line 156,col 44)",
            "(line 157,col 9)-(line 157,col 44)",
            "(line 158,col 9)-(line 158,col 44)",
            "(line 159,col 9)-(line 159,col 44)",
            "(line 160,col 9)-(line 160,col 44)",
            "(line 161,col 9)-(line 161,col 45)",
            "(line 162,col 9)-(line 162,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.RangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/RangeTests.java",
        "signature": "org.jfree.data.junit.RangeTests.testExpand()",
        "snippet": "    public void testExpand() {\n        Range r1 = new Range(0.0, 100.0);\n        Range r2 = Range.expand(r1, 0.10, 0.10);\n        assertEquals(-10.0, r2.getLowerBound(), 0.001);\n        assertEquals(110.0, r2.getUpperBound(), 0.001);\n    }",
        "begin_line": 168,
        "end_line": 173,
        "comment": "\n     * A simple test for the expand() method.\n     ",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 41)",
            "(line 170,col 9)-(line 170,col 48)",
            "(line 171,col 9)-(line 171,col 55)",
            "(line 172,col 9)-(line 172,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.RangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/RangeTests.java",
        "signature": "org.jfree.data.junit.RangeTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        Range r1 = new Range(25.0, 133.42);\n        Range r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (Range) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }",
        "begin_line": 178,
        "end_line": 200,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 43)",
            "(line 181,col 9)-(line 181,col 24)",
            "(line 183,col 9)-(line 197,col 9)",
            "(line 198,col 9)-(line 198,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectsTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectsTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(KeyedObjectsTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectsTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectsTests.KeyedObjectsTests(java.lang.String)",
        "snippet": "    public KeyedObjectsTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectsTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectsTests.setUp()",
        "snippet": "    protected void setUp() {\n        // no setup required\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectsTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectsTests.testCloning()",
        "snippet": "    public void testCloning() {\n        KeyedObjects ko1 = new KeyedObjects();\n        ko1.addObject(\"V1\", new Integer(1));\n        ko1.addObject(\"V2\", null);\n        ko1.addObject(\"V3\", new Integer(3));\n        KeyedObjects ko2 = null;\n        try {\n            ko2 = (KeyedObjects) ko1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(ko1 != ko2);\n        assertTrue(ko1.getClass() == ko2.getClass());\n        assertTrue(ko1.equals(ko2));\n    }",
        "begin_line": 94,
        "end_line": 109,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 46)",
            "(line 96,col 9)-(line 96,col 44)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 98,col 9)-(line 98,col 44)",
            "(line 99,col 9)-(line 99,col 32)",
            "(line 100,col 9)-(line 105,col 9)",
            "(line 106,col 9)-(line 106,col 31)",
            "(line 107,col 9)-(line 107,col 53)",
            "(line 108,col 9)-(line 108,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectsTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectsTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n        // case 1 - object is mutable but not PublicCloneable\n        Object obj1 = new ArrayList();\n        KeyedObjects ko1 = new KeyedObjects();\n        ko1.addObject(\"K1\", obj1);\n        KeyedObjects ko2 = null;\n        try {\n            ko2 = (KeyedObjects) ko1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(ko1 != ko2);\n        assertTrue(ko1.getClass() == ko2.getClass());\n        assertTrue(ko1.equals(ko2));\n        \n        // the clone contains a reference to the original object\n        assertTrue(ko2.getObject(\"K1\") == obj1); \n        \n        // CASE 2 - object is mutable AND PublicCloneable\n        obj1 = new DefaultPieDataset();\n        ko1 = new KeyedObjects();\n        ko1.addObject(\"K1\", obj1);\n        ko2 = null;\n        try {\n            ko2 = (KeyedObjects) ko1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(ko1 != ko2);\n        assertTrue(ko1.getClass() == ko2.getClass());\n        assertTrue(ko1.equals(ko2));\n        \n        // the clone contains a reference to a CLONE of the original object\n        assertTrue(ko2.getObject(\"K1\") != obj1); \n    }",
        "begin_line": 114,
        "end_line": 150,
        "comment": "\n     * Confirm special features of cloning.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 38)",
            "(line 117,col 9)-(line 117,col 46)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 119,col 9)-(line 119,col 32)",
            "(line 120,col 9)-(line 125,col 9)",
            "(line 126,col 9)-(line 126,col 31)",
            "(line 127,col 9)-(line 127,col 53)",
            "(line 128,col 9)-(line 128,col 36)",
            "(line 131,col 9)-(line 131,col 48)",
            "(line 134,col 9)-(line 134,col 39)",
            "(line 135,col 9)-(line 135,col 33)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 137,col 9)-(line 137,col 19)",
            "(line 138,col 9)-(line 143,col 9)",
            "(line 144,col 9)-(line 144,col 31)",
            "(line 145,col 9)-(line 145,col 53)",
            "(line 146,col 9)-(line 146,col 36)",
            "(line 149,col 9)-(line 149,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectsTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectsTests.testInsertAndRetrieve()",
        "snippet": "    public void testInsertAndRetrieve() {\n\n        KeyedObjects data = new KeyedObjects();\n        data.addObject(\"A\", new Double(1.0));\n        data.addObject(\"B\", new Double(2.0));\n        data.addObject(\"C\", new Double(3.0));\n        data.addObject(\"D\", null);\n\n        // check key order\n        assertEquals(data.getKey(0), \"A\");\n        assertEquals(data.getKey(1), \"B\");\n        assertEquals(data.getKey(2), \"C\");\n        assertEquals(data.getKey(3), \"D\");\n\n        // check retrieve value by key\n        assertEquals(data.getObject(\"A\"), new Double(1.0));\n        assertEquals(data.getObject(\"B\"), new Double(2.0));\n        assertEquals(data.getObject(\"C\"), new Double(3.0));\n        assertEquals(data.getObject(\"D\"), null);\n        \n        boolean pass = false;\n        try {\n            data.getObject(\"Not a key\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // check retrieve value by index\n        assertEquals(data.getObject(0), new Double(1.0));\n        assertEquals(data.getObject(1), new Double(2.0));\n        assertEquals(data.getObject(2), new Double(3.0));\n        assertEquals(data.getObject(3), null);\n\n    }",
        "begin_line": 155,
        "end_line": 190,
        "comment": "\n     * Check that inserting and retrieving values works as expected.\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 47)",
            "(line 158,col 9)-(line 158,col 45)",
            "(line 159,col 9)-(line 159,col 45)",
            "(line 160,col 9)-(line 160,col 45)",
            "(line 161,col 9)-(line 161,col 34)",
            "(line 164,col 9)-(line 164,col 42)",
            "(line 165,col 9)-(line 165,col 42)",
            "(line 166,col 9)-(line 166,col 42)",
            "(line 167,col 9)-(line 167,col 42)",
            "(line 170,col 9)-(line 170,col 59)",
            "(line 171,col 9)-(line 171,col 59)",
            "(line 172,col 9)-(line 172,col 59)",
            "(line 173,col 9)-(line 173,col 48)",
            "(line 175,col 9)-(line 175,col 29)",
            "(line 176,col 9)-(line 181,col 9)",
            "(line 182,col 9)-(line 182,col 25)",
            "(line 185,col 9)-(line 185,col 57)",
            "(line 186,col 9)-(line 186,col 57)",
            "(line 187,col 9)-(line 187,col 57)",
            "(line 188,col 9)-(line 188,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectsTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectsTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        KeyedObjects ko1 = new KeyedObjects();\n        ko1.addObject(\"Key 1\", \"Object 1\");\n        ko1.addObject(\"Key 2\", null);\n        ko1.addObject(\"Key 3\", \"Object 2\");\n\n        KeyedObjects ko2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(ko1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            ko2 = (KeyedObjects) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(ko1, ko2);\n\n    }",
        "begin_line": 195,
        "end_line": 220,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 46)",
            "(line 198,col 9)-(line 198,col 43)",
            "(line 199,col 9)-(line 199,col 37)",
            "(line 200,col 9)-(line 200,col 43)",
            "(line 202,col 9)-(line 202,col 32)",
            "(line 204,col 9)-(line 217,col 9)",
            "(line 218,col 9)-(line 218,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectsTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectsTests.testGetObject()",
        "snippet": "    public void testGetObject() {\n        // retrieve an item\n        KeyedObjects ko1 = new KeyedObjects();\n        ko1.addObject(\"Key 1\", \"Object 1\");\n        ko1.addObject(\"Key 2\", null);\n        ko1.addObject(\"Key 3\", \"Object 2\");\n        assertEquals(\"Object 1\", ko1.getObject(0));\n        assertNull(ko1.getObject(1));\n        assertEquals(\"Object 2\", ko1.getObject(2));\n        \n        // request with a negative index\n        boolean pass = false;\n        try {\n            ko1.getObject(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // request width index == itemCount\n        pass = false;\n        try {\n            ko1.getObject(3);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 225,
        "end_line": 254,
        "comment": "\n     * Simple checks for the getObject(int) method.\n     ",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 46)",
            "(line 228,col 9)-(line 228,col 43)",
            "(line 229,col 9)-(line 229,col 37)",
            "(line 230,col 9)-(line 230,col 43)",
            "(line 231,col 9)-(line 231,col 51)",
            "(line 232,col 9)-(line 232,col 37)",
            "(line 233,col 9)-(line 233,col 51)",
            "(line 236,col 9)-(line 236,col 29)",
            "(line 237,col 9)-(line 242,col 9)",
            "(line 243,col 9)-(line 243,col 25)",
            "(line 246,col 9)-(line 246,col 21)",
            "(line 247,col 9)-(line 252,col 9)",
            "(line 253,col 9)-(line 253,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectsTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectsTests.testGetKey()",
        "snippet": "    public void testGetKey() {\n        // retrieve an item\n        KeyedObjects ko1 = new KeyedObjects();\n        ko1.addObject(\"Key 1\", \"Object 1\");\n        ko1.addObject(\"Key 2\", null);\n        ko1.addObject(\"Key 3\", \"Object 2\");\n        assertEquals(\"Key 1\", ko1.getKey(0));\n        assertEquals(\"Key 2\", ko1.getKey(1));\n        assertEquals(\"Key 3\", ko1.getKey(2));\n        \n        // request with a negative index\n        boolean pass = false;\n        try {\n            ko1.getKey(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // request width index == itemCount\n        pass = false;\n        try {\n            ko1.getKey(3);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 259,
        "end_line": 288,
        "comment": "\n     * Simple checks for the getKey(int) method.\n     ",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 46)",
            "(line 262,col 9)-(line 262,col 43)",
            "(line 263,col 9)-(line 263,col 37)",
            "(line 264,col 9)-(line 264,col 43)",
            "(line 265,col 9)-(line 265,col 45)",
            "(line 266,col 9)-(line 266,col 45)",
            "(line 267,col 9)-(line 267,col 45)",
            "(line 270,col 9)-(line 270,col 29)",
            "(line 271,col 9)-(line 276,col 9)",
            "(line 277,col 9)-(line 277,col 25)",
            "(line 280,col 9)-(line 280,col 21)",
            "(line 281,col 9)-(line 286,col 9)",
            "(line 287,col 9)-(line 287,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectsTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectsTests.testGetIndex()",
        "snippet": "    public void testGetIndex() {\n        KeyedObjects ko1 = new KeyedObjects();\n        ko1.addObject(\"Key 1\", \"Object 1\");\n        ko1.addObject(\"Key 2\", null);\n        ko1.addObject(\"Key 3\", \"Object 2\");\n        assertEquals(0, ko1.getIndex(\"Key 1\"));\n        assertEquals(1, ko1.getIndex(\"Key 2\"));\n        assertEquals(2, ko1.getIndex(\"Key 3\"));\n        \n        // check null argument\n        boolean pass = false;\n        try {\n            ko1.getIndex(null);   \n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 293,
        "end_line": 311,
        "comment": "\n     * Simple checks for the getIndex(Comparable) method.\n     ",
        "child_ranges": [
            "(line 294,col 9)-(line 294,col 46)",
            "(line 295,col 9)-(line 295,col 43)",
            "(line 296,col 9)-(line 296,col 37)",
            "(line 297,col 9)-(line 297,col 43)",
            "(line 298,col 9)-(line 298,col 47)",
            "(line 299,col 9)-(line 299,col 47)",
            "(line 300,col 9)-(line 300,col 47)",
            "(line 303,col 9)-(line 303,col 29)",
            "(line 304,col 9)-(line 309,col 9)",
            "(line 310,col 9)-(line 310,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectsTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectsTests.testSetObject()",
        "snippet": "    public void testSetObject() {\n        KeyedObjects ko1 = new KeyedObjects();\n        ko1.setObject(\"Key 1\", \"Object 1\");\n        ko1.setObject(\"Key 2\", null);\n        ko1.setObject(\"Key 3\", \"Object 2\");\n        \n        assertEquals(\"Object 1\", ko1.getObject(\"Key 1\"));\n        assertEquals(null, ko1.getObject(\"Key 2\"));\n        assertEquals(\"Object 2\", ko1.getObject(\"Key 3\"));\n        \n        // replace an existing value\n        ko1.setObject(\"Key 2\", \"AAA\");\n        ko1.setObject(\"Key 3\", \"BBB\");\n        assertEquals(\"AAA\", ko1.getObject(\"Key 2\"));\n        assertEquals(\"BBB\", ko1.getObject(\"Key 3\"));\n        \n        // try a null key - should throw an exception\n        boolean pass = false;\n        try {\n            ko1.setObject(null, \"XX\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 316,
        "end_line": 341,
        "comment": "\n     * Some checks for the setObject(Comparable, Object) method.\n     ",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 46)",
            "(line 318,col 9)-(line 318,col 43)",
            "(line 319,col 9)-(line 319,col 37)",
            "(line 320,col 9)-(line 320,col 43)",
            "(line 322,col 9)-(line 322,col 57)",
            "(line 323,col 9)-(line 323,col 51)",
            "(line 324,col 9)-(line 324,col 57)",
            "(line 327,col 9)-(line 327,col 38)",
            "(line 328,col 9)-(line 328,col 38)",
            "(line 329,col 9)-(line 329,col 52)",
            "(line 330,col 9)-(line 330,col 52)",
            "(line 333,col 9)-(line 333,col 29)",
            "(line 334,col 9)-(line 339,col 9)",
            "(line 340,col 9)-(line 340,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectsTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectsTests.testRemoveValue()",
        "snippet": "    public void testRemoveValue() {\n        KeyedObjects ko1 = new KeyedObjects();\n        ko1.setObject(\"Key 1\", \"Object 1\");\n        ko1.setObject(\"Key 2\", null);\n        ko1.setObject(\"Key 3\", \"Object 2\");\n        \n        ko1.removeValue(1);\n        assertEquals(2, ko1.getItemCount());\n        assertEquals(1, ko1.getIndex(\"Key 3\"));\n        \n        ko1.removeValue(\"Key 1\");\n        assertEquals(1, ko1.getItemCount());\n        assertEquals(0, ko1.getIndex(\"Key 3\"));\n        \n        // try unknown key\n        boolean pass = false;\n        try {\n            ko1.removeValue(\"UNKNOWN\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try null argument\n        pass = false;\n        try {\n            ko1.removeValue(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 346,
        "end_line": 379,
        "comment": "\n     * Some checks for the removeValue() methods.\n     ",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 46)",
            "(line 348,col 9)-(line 348,col 43)",
            "(line 349,col 9)-(line 349,col 37)",
            "(line 350,col 9)-(line 350,col 43)",
            "(line 352,col 9)-(line 352,col 27)",
            "(line 353,col 9)-(line 353,col 44)",
            "(line 354,col 9)-(line 354,col 47)",
            "(line 356,col 9)-(line 356,col 33)",
            "(line 357,col 9)-(line 357,col 44)",
            "(line 358,col 9)-(line 358,col 47)",
            "(line 361,col 9)-(line 361,col 29)",
            "(line 362,col 9)-(line 367,col 9)",
            "(line 368,col 9)-(line 368,col 25)",
            "(line 371,col 9)-(line 371,col 21)",
            "(line 372,col 9)-(line 377,col 9)",
            "(line 378,col 9)-(line 378,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjectsTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjectsTests.java",
        "signature": "org.jfree.data.junit.KeyedObjectsTests.testRemoveValueInt()",
        "snippet": "    public void testRemoveValueInt() {\n        KeyedObjects ko1 = new KeyedObjects();\n        ko1.setObject(\"Key 1\", \"Object 1\");\n        ko1.setObject(\"Key 2\", null);\n        ko1.setObject(\"Key 3\", \"Object 2\");\n        \n        ko1.removeValue(1);\n        assertEquals(2, ko1.getItemCount());\n        assertEquals(1, ko1.getIndex(\"Key 3\"));\n        \n        \n        // try negative key index\n        boolean pass = false;\n        try {\n            ko1.removeValue(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try key index == itemCount\n        pass = false;\n        try {\n            ko1.removeValue(2);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 384,
        "end_line": 414,
        "comment": "\n     * Some checks for the removeValue(int) method.\n     ",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 46)",
            "(line 386,col 9)-(line 386,col 43)",
            "(line 387,col 9)-(line 387,col 37)",
            "(line 388,col 9)-(line 388,col 43)",
            "(line 390,col 9)-(line 390,col 27)",
            "(line 391,col 9)-(line 391,col 44)",
            "(line 392,col 9)-(line 392,col 47)",
            "(line 396,col 9)-(line 396,col 29)",
            "(line 397,col 9)-(line 402,col 9)",
            "(line 403,col 9)-(line 403,col 25)",
            "(line 406,col 9)-(line 406,col 21)",
            "(line 407,col 9)-(line 412,col 9)",
            "(line 413,col 9)-(line 413,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DataUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DataUtilitiesTests.java",
        "signature": "org.jfree.data.junit.DataUtilitiesTests.testCreateNumberArray2D()",
        "snippet": "    public void testCreateNumberArray2D() {\n        double[][] d = new double[2][];\n        d[0] = new double[] {1.1, 2.2, 3.3, 4.4};\n        d[1] = new double[] {1.1, 2.2, 3.3, 4.4, 5.5};\n        Number[][] n = DataUtilities.createNumberArray2D(d);\n        assertEquals(2, n.length);\n        assertEquals(4, n[0].length);\n        assertEquals(5, n[1].length);\n    }",
        "begin_line": 56,
        "end_line": 64,
        "comment": "\n     * Tests the createNumberArray2D() method.\n     ",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 39)",
            "(line 58,col 9)-(line 58,col 49)",
            "(line 59,col 9)-(line 59,col 54)",
            "(line 60,col 9)-(line 60,col 60)",
            "(line 61,col 9)-(line 61,col 34)",
            "(line 62,col 9)-(line 62,col 37)",
            "(line 63,col 9)-(line 63,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DataUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DataUtilitiesTests.java",
        "signature": "org.jfree.data.junit.DataUtilitiesTests.testCalculateColumnTotal()",
        "snippet": "    public void testCalculateColumnTotal() {\n        DefaultKeyedValues2D table = new DefaultKeyedValues2D();\n        table.addValue(new Double(1.0), \"R0\", \"C0\");\n        table.addValue(new Double(2.0), \"R0\", \"C1\");\n        table.addValue(new Double(3.0), \"R1\", \"C0\");\n        table.addValue(new Double(4.0), \"R1\", \"C1\");\n        assertEquals(4.0, DataUtilities.calculateColumnTotal(table, 0), EPSILON);\n        assertEquals(6.0, DataUtilities.calculateColumnTotal(table, 1), EPSILON);\n        table.setValue(null, \"R1\", \"C1\");\n        assertEquals(2.0, DataUtilities.calculateColumnTotal(table, 1), EPSILON);\n    }",
        "begin_line": 71,
        "end_line": 81,
        "comment": "\n     * Some checks for the calculateColumnTotal() method.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 64)",
            "(line 73,col 9)-(line 73,col 52)",
            "(line 74,col 9)-(line 74,col 52)",
            "(line 75,col 9)-(line 75,col 52)",
            "(line 76,col 9)-(line 76,col 52)",
            "(line 77,col 9)-(line 77,col 81)",
            "(line 78,col 9)-(line 78,col 81)",
            "(line 79,col 9)-(line 79,col 41)",
            "(line 80,col 9)-(line 80,col 81)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DataUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DataUtilitiesTests.java",
        "signature": "org.jfree.data.junit.DataUtilitiesTests.testCalculateRowTotal()",
        "snippet": "    public void testCalculateRowTotal() {\n        DefaultKeyedValues2D table = new DefaultKeyedValues2D();\n        table.addValue(new Double(1.0), \"R0\", \"C0\");\n        table.addValue(new Double(2.0), \"R0\", \"C1\");\n        table.addValue(new Double(3.0), \"R1\", \"C0\");\n        table.addValue(new Double(4.0), \"R1\", \"C1\");\n        assertEquals(3.0, DataUtilities.calculateRowTotal(table, 0), EPSILON);\n        assertEquals(7.0, DataUtilities.calculateRowTotal(table, 1), EPSILON);\n        table.setValue(null, \"R1\", \"C1\");\n        assertEquals(3.0, DataUtilities.calculateRowTotal(table, 1), EPSILON);\n    }",
        "begin_line": 86,
        "end_line": 96,
        "comment": "\n     * Some checks for the calculateRowTotal() method.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 64)",
            "(line 88,col 9)-(line 88,col 52)",
            "(line 89,col 9)-(line 89,col 52)",
            "(line 90,col 9)-(line 90,col 52)",
            "(line 91,col 9)-(line 91,col 52)",
            "(line 92,col 9)-(line 92,col 78)",
            "(line 93,col 9)-(line 93,col 78)",
            "(line 94,col 9)-(line 94,col 41)",
            "(line 95,col 9)-(line 95,col 78)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultIntervalCategoryDatasetTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 72)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.DefaultIntervalCategoryDatasetTests(java.lang.String)",
        "snippet": "    public DefaultIntervalCategoryDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetValue()",
        "snippet": "    public void testGetValue() {        \n        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};\n        double[][] starts = new double[][] {starts_S1, starts_S2};\n        double[][] ends = new double[][] {ends_S1, ends_S2};\n        DefaultIntervalCategoryDataset d \n                = new DefaultIntervalCategoryDataset(starts, ends);        \n\n        assertEquals(new Double(0.1), d.getStartValue(\"Series 1\", \n                \"Category 1\"));\n        assertEquals(new Double(0.2), d.getStartValue(\"Series 1\", \n                \"Category 2\"));\n        assertEquals(new Double(0.3), d.getStartValue(\"Series 1\", \n                \"Category 3\"));\n        assertEquals(new Double(0.3), d.getStartValue(\"Series 2\", \n                \"Category 1\"));\n        assertEquals(new Double(0.4), d.getStartValue(\"Series 2\", \n                \"Category 2\"));\n        assertEquals(new Double(0.5), d.getStartValue(\"Series 2\", \n                \"Category 3\"));\n        \n        assertEquals(new Double(0.5), d.getEndValue(\"Series 1\", \n                \"Category 1\"));\n        assertEquals(new Double(0.6), d.getEndValue(\"Series 1\", \n                \"Category 2\"));\n        assertEquals(new Double(0.7), d.getEndValue(\"Series 1\", \n                \"Category 3\"));\n        assertEquals(new Double(0.7), d.getEndValue(\"Series 2\", \n                \"Category 1\"));\n        assertEquals(new Double(0.8), d.getEndValue(\"Series 2\", \n                \"Category 2\"));\n        assertEquals(new Double(0.9), d.getEndValue(\"Series 2\", \n                \"Category 3\"));\n\n        boolean pass = false;\n        try {\n            d.getValue(\"XX\", \"Category 1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            d.getValue(\"Series 1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n    }",
        "begin_line": 85,
        "end_line": 138,
        "comment": "\n     * Some checks for the getValue() method.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 58)",
            "(line 87,col 9)-(line 87,col 58)",
            "(line 88,col 9)-(line 88,col 56)",
            "(line 89,col 9)-(line 89,col 56)",
            "(line 90,col 9)-(line 90,col 66)",
            "(line 91,col 9)-(line 91,col 60)",
            "(line 92,col 9)-(line 93,col 67)",
            "(line 95,col 9)-(line 96,col 31)",
            "(line 97,col 9)-(line 98,col 31)",
            "(line 99,col 9)-(line 100,col 31)",
            "(line 101,col 9)-(line 102,col 31)",
            "(line 103,col 9)-(line 104,col 31)",
            "(line 105,col 9)-(line 106,col 31)",
            "(line 108,col 9)-(line 109,col 31)",
            "(line 110,col 9)-(line 111,col 31)",
            "(line 112,col 9)-(line 113,col 31)",
            "(line 114,col 9)-(line 115,col 31)",
            "(line 116,col 9)-(line 117,col 31)",
            "(line 118,col 9)-(line 119,col 31)",
            "(line 121,col 9)-(line 121,col 29)",
            "(line 122,col 9)-(line 127,col 9)",
            "(line 128,col 9)-(line 128,col 25)",
            "(line 130,col 9)-(line 130,col 21)",
            "(line 131,col 9)-(line 136,col 9)",
            "(line 137,col 9)-(line 137,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowAndColumnCount()",
        "snippet": "    public void testGetRowAndColumnCount() {\n        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};\n        double[][] starts = new double[][] {starts_S1, starts_S2};\n        double[][] ends = new double[][] {ends_S1, ends_S2};\n        DefaultIntervalCategoryDataset d \n                = new DefaultIntervalCategoryDataset(starts, ends);        \n\n        assertEquals(2, d.getRowCount());\n        assertEquals(3, d.getColumnCount());\n    }",
        "begin_line": 144,
        "end_line": 156,
        "comment": "\n     * Some tests for the getRowCount() method.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 58)",
            "(line 146,col 9)-(line 146,col 58)",
            "(line 147,col 9)-(line 147,col 56)",
            "(line 148,col 9)-(line 148,col 56)",
            "(line 149,col 9)-(line 149,col 66)",
            "(line 150,col 9)-(line 150,col 60)",
            "(line 151,col 9)-(line 152,col 67)",
            "(line 154,col 9)-(line 154,col 41)",
            "(line 155,col 9)-(line 155,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        double[] starts_S1A = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2A = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1A = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2A = new double[] {0.7, 0.8, 0.9};\n        double[][] startsA = new double[][] {starts_S1A, starts_S2A};\n        double[][] endsA = new double[][] {ends_S1A, ends_S2A};\n        DefaultIntervalCategoryDataset dA \n                = new DefaultIntervalCategoryDataset(startsA, endsA);        \n\n        double[] starts_S1B = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2B = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1B = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2B = new double[] {0.7, 0.8, 0.9};\n        double[][] startsB = new double[][] {starts_S1B, starts_S2B};\n        double[][] endsB = new double[][] {ends_S1B, ends_S2B};\n        DefaultIntervalCategoryDataset dB \n                = new DefaultIntervalCategoryDataset(startsB, endsB);        \n            \n        assertTrue(dA.equals(dB));\n        assertTrue(dB.equals(dA));\n        \n        // check that two empty datasets are equal\n    \tDefaultIntervalCategoryDataset empty1 \n                = new DefaultIntervalCategoryDataset(new double[0][0], \n        \t\t        new double[0][0]);\n    \tDefaultIntervalCategoryDataset empty2 \n                = new DefaultIntervalCategoryDataset(new double[0][0], \n\t\t                new double[0][0]);\n    \tassertTrue(empty1.equals(empty2));\n    }",
        "begin_line": 161,
        "end_line": 191,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 59)",
            "(line 163,col 9)-(line 163,col 59)",
            "(line 164,col 9)-(line 164,col 57)",
            "(line 165,col 9)-(line 165,col 57)",
            "(line 166,col 9)-(line 166,col 69)",
            "(line 167,col 9)-(line 167,col 63)",
            "(line 168,col 9)-(line 169,col 69)",
            "(line 171,col 9)-(line 171,col 59)",
            "(line 172,col 9)-(line 172,col 59)",
            "(line 173,col 9)-(line 173,col 57)",
            "(line 174,col 9)-(line 174,col 57)",
            "(line 175,col 9)-(line 175,col 69)",
            "(line 176,col 9)-(line 176,col 63)",
            "(line 177,col 9)-(line 178,col 69)",
            "(line 180,col 9)-(line 180,col 34)",
            "(line 181,col 9)-(line 181,col 34)",
            "(line 184,col 6)-(line 186,col 36)",
            "(line 187,col 6)-(line 189,col 36)",
            "(line 190,col 6)-(line 190,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};\n        double[][] starts = new double[][] {starts_S1, starts_S2};\n        double[][] ends = new double[][] {ends_S1, ends_S2};\n        DefaultIntervalCategoryDataset d1\n                = new DefaultIntervalCategoryDataset(starts, ends);        \n        DefaultIntervalCategoryDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            d2 = (DefaultIntervalCategoryDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n    }",
        "begin_line": 196,
        "end_line": 224,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 58)",
            "(line 199,col 9)-(line 199,col 58)",
            "(line 200,col 9)-(line 200,col 56)",
            "(line 201,col 9)-(line 201,col 56)",
            "(line 202,col 9)-(line 202,col 66)",
            "(line 203,col 9)-(line 203,col 60)",
            "(line 204,col 9)-(line 205,col 67)",
            "(line 206,col 9)-(line 206,col 49)",
            "(line 208,col 9)-(line 221,col 9)",
            "(line 222,col 9)-(line 222,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};\n        double[][] starts = new double[][] {starts_S1, starts_S2};\n        double[][] ends = new double[][] {ends_S1, ends_S2};\n        DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(\n                starts, ends);\n        DefaultIntervalCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultIntervalCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // check that the clone doesn't share the same underlying arrays.\n        d1.setStartValue(0, \"Category 1\", new Double(0.99));\n        assertFalse(d1.equals(d2));\n        d2.setStartValue(0, \"Category 1\", new Double(0.99));\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 229,
        "end_line": 254,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 58)",
            "(line 231,col 9)-(line 231,col 58)",
            "(line 232,col 9)-(line 232,col 56)",
            "(line 233,col 9)-(line 233,col 56)",
            "(line 234,col 9)-(line 234,col 66)",
            "(line 235,col 9)-(line 235,col 60)",
            "(line 236,col 9)-(line 237,col 30)",
            "(line 238,col 9)-(line 238,col 49)",
            "(line 239,col 9)-(line 244,col 9)",
            "(line 245,col 9)-(line 245,col 29)",
            "(line 246,col 9)-(line 246,col 51)",
            "(line 247,col 9)-(line 247,col 34)",
            "(line 250,col 9)-(line 250,col 60)",
            "(line 251,col 9)-(line 251,col 35)",
            "(line 252,col 9)-(line 252,col 60)",
            "(line 253,col 9)-(line 253,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n    \tDefaultIntervalCategoryDataset d1 \n                = new DefaultIntervalCategoryDataset(new double[0][0], \n        \t\t    new double[0][0]);\n        DefaultIntervalCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultIntervalCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\t\n    }",
        "begin_line": 259,
        "end_line": 273,
        "comment": "\n     * A check to ensure that an empty dataset can be cloned.\n     ",
        "child_ranges": [
            "(line 260,col 6)-(line 262,col 32)",
            "(line 263,col 9)-(line 263,col 49)",
            "(line 264,col 9)-(line 269,col 9)",
            "(line 270,col 9)-(line 270,col 29)",
            "(line 271,col 9)-(line 271,col 51)",
            "(line 272,col 9)-(line 272,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSetStartValue()",
        "snippet": "    public void testSetStartValue() {\n        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};\n        double[][] starts = new double[][] {starts_S1, starts_S2};\n        double[][] ends = new double[][] {ends_S1, ends_S2};\n        DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(\n                starts, ends);\n        d1.setStartValue(0, \"Category 2\", new Double(99.9));\n        assertEquals(new Double(99.9), d1.getStartValue(\"Series 1\", \n                \"Category 2\"));\n        \n        boolean pass = false;\n        try {\n            d1.setStartValue(-1, \"Category 2\", new Double(99.9));\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            d1.setStartValue(2, \"Category 2\", new Double(99.9));\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 278,
        "end_line": 308,
        "comment": "\n     * Some basic checks for the setStartValue() method.\n     ",
        "child_ranges": [
            "(line 279,col 9)-(line 279,col 58)",
            "(line 280,col 9)-(line 280,col 58)",
            "(line 281,col 9)-(line 281,col 56)",
            "(line 282,col 9)-(line 282,col 56)",
            "(line 283,col 9)-(line 283,col 66)",
            "(line 284,col 9)-(line 284,col 60)",
            "(line 285,col 9)-(line 286,col 30)",
            "(line 287,col 9)-(line 287,col 60)",
            "(line 288,col 9)-(line 289,col 31)",
            "(line 291,col 9)-(line 291,col 29)",
            "(line 292,col 9)-(line 297,col 9)",
            "(line 298,col 9)-(line 298,col 25)",
            "(line 300,col 9)-(line 300,col 21)",
            "(line 301,col 9)-(line 306,col 9)",
            "(line 307,col 9)-(line 307,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSetEndValue()",
        "snippet": "    public void testSetEndValue() {\n        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};\n        double[][] starts = new double[][] {starts_S1, starts_S2};\n        double[][] ends = new double[][] {ends_S1, ends_S2};\n        DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(\n                starts, ends);\n        d1.setEndValue(0, \"Category 2\", new Double(99.9));\n        assertEquals(new Double(99.9), d1.getEndValue(\"Series 1\", \n                \"Category 2\"));\n        \n        boolean pass = false;\n        try {\n            d1.setEndValue(-1, \"Category 2\", new Double(99.9));\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            d1.setEndValue(2, \"Category 2\", new Double(99.9));\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 313,
        "end_line": 343,
        "comment": "\n     * Some basic checks for the setEndValue() method.\n     ",
        "child_ranges": [
            "(line 314,col 9)-(line 314,col 58)",
            "(line 315,col 9)-(line 315,col 58)",
            "(line 316,col 9)-(line 316,col 56)",
            "(line 317,col 9)-(line 317,col 56)",
            "(line 318,col 9)-(line 318,col 66)",
            "(line 319,col 9)-(line 319,col 60)",
            "(line 320,col 9)-(line 321,col 30)",
            "(line 322,col 9)-(line 322,col 58)",
            "(line 323,col 9)-(line 324,col 31)",
            "(line 326,col 9)-(line 326,col 29)",
            "(line 327,col 9)-(line 332,col 9)",
            "(line 333,col 9)-(line 333,col 25)",
            "(line 335,col 9)-(line 335,col 21)",
            "(line 336,col 9)-(line 341,col 9)",
            "(line 342,col 9)-(line 342,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetSeriesCount()",
        "snippet": "    public void testGetSeriesCount() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(0, empty.getSeriesCount());\n    }",
        "begin_line": 348,
        "end_line": 354,
        "comment": "\n     * Some checks for the getSeriesCount() method.\n     ",
        "child_ranges": [
            "(line 350,col 6)-(line 352,col 33)",
            "(line 353,col 6)-(line 353,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetCategoryCount()",
        "snippet": "    public void testGetCategoryCount() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(0, empty.getCategoryCount());\n    }",
        "begin_line": 359,
        "end_line": 365,
        "comment": "\n     * Some checks for the getCategoryCount() method.\n     ",
        "child_ranges": [
            "(line 361,col 6)-(line 363,col 33)",
            "(line 364,col 6)-(line 364,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetSeriesIndex()",
        "snippet": "    public void testGetSeriesIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getSeriesIndex(\"ABC\"));\n    }",
        "begin_line": 370,
        "end_line": 376,
        "comment": "\n     * Some checks for the getSeriesIndex() method.\n     ",
        "child_ranges": [
            "(line 372,col 6)-(line 374,col 33)",
            "(line 375,col 6)-(line 375,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowIndex()",
        "snippet": "    public void testGetRowIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getRowIndex(\"ABC\"));\n    }",
        "begin_line": 381,
        "end_line": 387,
        "comment": "\n     * Some checks for the getRowIndex() method.\n     ",
        "child_ranges": [
            "(line 383,col 6)-(line 385,col 33)",
            "(line 386,col 6)-(line 386,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSetSeriesKeys()",
        "snippet": "    public void testSetSeriesKeys() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tboolean pass = true;\n    \ttry {\n    \t\tempty.setSeriesKeys(new String[0]);\n    \t}\n    \tcatch (RuntimeException e) {\n    \t\tpass = false;\n    \t}\n    \tassertTrue(pass);\n    }",
        "begin_line": 392,
        "end_line": 405,
        "comment": "\n     * Some checks for the setSeriesKeys() method.\n     ",
        "child_ranges": [
            "(line 394,col 6)-(line 396,col 33)",
            "(line 397,col 6)-(line 397,col 25)",
            "(line 398,col 6)-(line 403,col 6)",
            "(line 404,col 6)-(line 404,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetCategoryIndex()",
        "snippet": "    public void testGetCategoryIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getCategoryIndex(\"ABC\"));\n    }",
        "begin_line": 410,
        "end_line": 416,
        "comment": "\n     * Some checks for the getCategoryIndex() method.\n     ",
        "child_ranges": [
            "(line 412,col 6)-(line 414,col 33)",
            "(line 415,col 6)-(line 415,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetColumnIndex()",
        "snippet": "    public void testGetColumnIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getColumnIndex(\"ABC\"));\n    }",
        "begin_line": 421,
        "end_line": 427,
        "comment": "\n     * Some checks for the getColumnIndex() method.\n     ",
        "child_ranges": [
            "(line 423,col 6)-(line 425,col 33)",
            "(line 426,col 6)-(line 426,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSetCategoryKeys()",
        "snippet": "    public void testSetCategoryKeys() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tboolean pass = true;\n    \ttry {\n    \t\tempty.setCategoryKeys(new String[0]);\n    \t}\n    \tcatch (RuntimeException e) {\n    \t\tpass = false;\n    \t}\n    \tassertTrue(pass);\n    }",
        "begin_line": 432,
        "end_line": 445,
        "comment": "\n     * Some checks for the setCategoryKeys() method.\n     ",
        "child_ranges": [
            "(line 434,col 6)-(line 436,col 33)",
            "(line 437,col 6)-(line 437,col 25)",
            "(line 438,col 6)-(line 443,col 6)",
            "(line 444,col 6)-(line 444,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetColumnKeys()",
        "snippet": "    public void testGetColumnKeys() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n        List keys = empty.getColumnKeys();\n        assertEquals(0, keys.size());\n    }",
        "begin_line": 450,
        "end_line": 457,
        "comment": "\n     * Some checks for the getColumnKeys() method.\n     ",
        "child_ranges": [
            "(line 452,col 6)-(line 454,col 33)",
            "(line 455,col 9)-(line 455,col 42)",
            "(line 456,col 9)-(line 456,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowKeys()",
        "snippet": "    public void testGetRowKeys() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n        List keys = empty.getRowKeys();\n        assertEquals(0, keys.size());\n    }",
        "begin_line": 462,
        "end_line": 469,
        "comment": "\n     * Some checks for the getRowKeys() method.\n     ",
        "child_ranges": [
            "(line 464,col 6)-(line 466,col 33)",
            "(line 467,col 9)-(line 467,col 39)",
            "(line 468,col 9)-(line 468,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetColumnCount()",
        "snippet": "    public void testGetColumnCount() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n        assertEquals(0, empty.getColumnCount());\n    }",
        "begin_line": 474,
        "end_line": 480,
        "comment": "\n     * Some checks for the getColumnCount() method.\n     ",
        "child_ranges": [
            "(line 476,col 6)-(line 478,col 33)",
            "(line 479,col 9)-(line 479,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowCount()",
        "snippet": "    public void testGetRowCount() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n        assertEquals(0, empty.getColumnCount());\n    }",
        "begin_line": 485,
        "end_line": 491,
        "comment": "\n     * Some checks for the getRowCount() method.\n     ",
        "child_ranges": [
            "(line 487,col 6)-(line 489,col 33)",
            "(line 490,col 9)-(line 490,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DataCategoryPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DataCategoryPackageTests.java",
        "signature": "org.jfree.data.category.junit.DataCategoryPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.data.category\");\n        suite.addTestSuite(CategoryToPieDatasetTests.class);\n        suite.addTestSuite(DefaultCategoryDatasetTests.class);\n        suite.addTestSuite(DefaultIntervalCategoryDatasetTests.class);\n        return suite;\n    }",
        "begin_line": 63,
        "end_line": 69,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 67)",
            "(line 65,col 9)-(line 65,col 60)",
            "(line 66,col 9)-(line 66,col 62)",
            "(line 67,col 9)-(line 67,col 70)",
            "(line 68,col 9)-(line 68,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DataCategoryPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DataCategoryPackageTests.java",
        "signature": "org.jfree.data.category.junit.DataCategoryPackageTests.DataCategoryPackageTests(java.lang.String)",
        "snippet": "    public DataCategoryPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the test suite name.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DataCategoryPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DataCategoryPackageTests.java",
        "signature": "org.jfree.data.category.junit.DataCategoryPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.CategoryToPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/CategoryToPieDatasetTests.java",
        "signature": "org.jfree.data.category.junit.CategoryToPieDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryToPieDatasetTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.CategoryToPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/CategoryToPieDatasetTests.java",
        "signature": "org.jfree.data.category.junit.CategoryToPieDatasetTests.CategoryToPieDatasetTests(java.lang.String)",
        "snippet": "    public CategoryToPieDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.CategoryToPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/CategoryToPieDatasetTests.java",
        "signature": "org.jfree.data.category.junit.CategoryToPieDatasetTests.testConstructor()",
        "snippet": "    public void testConstructor() {\n        // try a null source\n        CategoryToPieDataset p1 = new CategoryToPieDataset(null, \n                TableOrder.BY_COLUMN, 0);\n        assertNull(p1.getUnderlyingDataset());\n        assertEquals(p1.getItemCount(), 0);\n        assertTrue(p1.getKeys().isEmpty());\n        assertNull(p1.getValue(\"R1\"));\n    }",
        "begin_line": 87,
        "end_line": 95,
        "comment": "\n     * Some tests for the constructor.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 90,col 41)",
            "(line 91,col 9)-(line 91,col 46)",
            "(line 92,col 9)-(line 92,col 43)",
            "(line 93,col 9)-(line 93,col 43)",
            "(line 94,col 9)-(line 94,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.CategoryToPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/CategoryToPieDatasetTests.java",
        "signature": "org.jfree.data.category.junit.CategoryToPieDatasetTests.testGetValue()",
        "snippet": "    public void testGetValue() {\n        DefaultCategoryDataset underlying = new DefaultCategoryDataset();\n        underlying.addValue(1.1, \"R1\", \"C1\");\n        underlying.addValue(2.2, \"R1\", \"C2\");\n        CategoryToPieDataset d1 = new CategoryToPieDataset(underlying, \n                TableOrder.BY_ROW, 0);\n        assertEquals(d1.getValue(\"C1\"), new Double(1.1));\n        assertEquals(d1.getValue(\"C2\"), new Double(2.2));\n\n        // check negative index throws exception\n        try {\n            /* Number n = */ d1.getValue(-1);\n            fail(\"Expected IndexOutOfBoundsException.\");\n        }\n        catch (IndexOutOfBoundsException e) {\n            // this is expected\n        }\n        \n        // check index == getItemCount() throws exception\n        try {\n            /* Number n = */ d1.getValue(d1.getItemCount());\n            fail(\"Expected IndexOutOfBoundsException.\");\n        }\n        catch (IndexOutOfBoundsException e) {\n            // this is expected\n        }\n\n        // test null source\n        CategoryToPieDataset p1 = new CategoryToPieDataset(null, \n                TableOrder.BY_COLUMN, 0);\n        try {\n            /* Number n = */ p1.getValue(0);\n            fail(\"Expected IndexOutOfBoundsException.\");\n        }\n        catch (IndexOutOfBoundsException e) {\n            // this is expected\n        }\n    }",
        "begin_line": 100,
        "end_line": 137,
        "comment": "\n     * Some checks for the getValue() method.\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 73)",
            "(line 102,col 9)-(line 102,col 45)",
            "(line 103,col 9)-(line 103,col 45)",
            "(line 104,col 9)-(line 105,col 38)",
            "(line 106,col 9)-(line 106,col 57)",
            "(line 107,col 9)-(line 107,col 57)",
            "(line 110,col 9)-(line 116,col 9)",
            "(line 119,col 9)-(line 125,col 9)",
            "(line 128,col 9)-(line 129,col 41)",
            "(line 130,col 9)-(line 136,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.CategoryToPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/CategoryToPieDatasetTests.java",
        "signature": "org.jfree.data.category.junit.CategoryToPieDatasetTests.testGetKey()",
        "snippet": "    public void testGetKey() {\n        DefaultCategoryDataset underlying = new DefaultCategoryDataset();\n        underlying.addValue(1.1, \"R1\", \"C1\");\n        underlying.addValue(2.2, \"R1\", \"C2\");\n        CategoryToPieDataset d1 = new CategoryToPieDataset(underlying, \n                TableOrder.BY_ROW, 0);\n        assertEquals(d1.getKey(0), \"C1\");\n        assertEquals(d1.getKey(1), \"C2\");\n\n        // check negative index throws exception\n        try {\n            /* Number n = */ d1.getKey(-1);\n            fail(\"Expected IndexOutOfBoundsException.\");\n        }\n        catch (IndexOutOfBoundsException e) {\n            // this is expected\n        }\n        \n        // check index == getItemCount() throws exception\n        try {\n            /* Number n = */ d1.getKey(d1.getItemCount());\n            fail(\"Expected IndexOutOfBoundsException.\");\n        }\n        catch (IndexOutOfBoundsException e) {\n            // this is expected\n        }\n\n        // test null source\n        CategoryToPieDataset p1 = new CategoryToPieDataset(null, \n                TableOrder.BY_COLUMN, 0);\n        try {\n            /* Number n = */ p1.getKey(0);\n            fail(\"Expected IndexOutOfBoundsException.\");\n        }\n        catch (IndexOutOfBoundsException e) {\n            // this is expected\n        }\n    }",
        "begin_line": 142,
        "end_line": 179,
        "comment": "\n     * Some checks for the getKey(int) method.\n     ",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 73)",
            "(line 144,col 9)-(line 144,col 45)",
            "(line 145,col 9)-(line 145,col 45)",
            "(line 146,col 9)-(line 147,col 38)",
            "(line 148,col 9)-(line 148,col 41)",
            "(line 149,col 9)-(line 149,col 41)",
            "(line 152,col 9)-(line 158,col 9)",
            "(line 161,col 9)-(line 167,col 9)",
            "(line 170,col 9)-(line 171,col 41)",
            "(line 172,col 9)-(line 178,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.CategoryToPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/CategoryToPieDatasetTests.java",
        "signature": "org.jfree.data.category.junit.CategoryToPieDatasetTests.testGetIndex()",
        "snippet": "    public void testGetIndex() {\n        DefaultCategoryDataset underlying = new DefaultCategoryDataset();\n        underlying.addValue(1.1, \"R1\", \"C1\");\n        underlying.addValue(2.2, \"R1\", \"C2\");\n        CategoryToPieDataset d1 = new CategoryToPieDataset(underlying, \n                TableOrder.BY_ROW, 0);\n        assertEquals(0, d1.getIndex(\"C1\"));\n        assertEquals(1, d1.getIndex(\"C2\"));\n        assertEquals(-1, d1.getIndex(\"XX\"));\n        \n        // try null\n        boolean pass = false;\n        try {\n            d1.getIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 184,
        "end_line": 203,
        "comment": "\n     * Some checks for the getIndex() method.\n     ",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 73)",
            "(line 186,col 9)-(line 186,col 45)",
            "(line 187,col 9)-(line 187,col 45)",
            "(line 188,col 9)-(line 189,col 38)",
            "(line 190,col 9)-(line 190,col 43)",
            "(line 191,col 9)-(line 191,col 43)",
            "(line 192,col 9)-(line 192,col 44)",
            "(line 195,col 9)-(line 195,col 29)",
            "(line 196,col 9)-(line 201,col 9)",
            "(line 202,col 9)-(line 202,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.CategoryToPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/CategoryToPieDatasetTests.java",
        "signature": "org.jfree.data.category.junit.CategoryToPieDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultCategoryDataset underlying = new DefaultCategoryDataset();\n        underlying.addValue(1.1, \"R1\", \"C1\");\n        underlying.addValue(2.2, \"R1\", \"C2\");\n        CategoryToPieDataset d1 = new CategoryToPieDataset(underlying, \n                TableOrder.BY_COLUMN, 1);\n        DefaultPieDataset d2 = new DefaultPieDataset();\n        d2.setValue(\"R1\", 2.2);\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 208,
        "end_line": 217,
        "comment": "\n     * For datasets, the equals() method just checks keys and values.\n     ",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 73)",
            "(line 210,col 9)-(line 210,col 45)",
            "(line 211,col 9)-(line 211,col 45)",
            "(line 212,col 9)-(line 213,col 41)",
            "(line 214,col 9)-(line 214,col 55)",
            "(line 215,col 9)-(line 215,col 31)",
            "(line 216,col 9)-(line 216,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.CategoryToPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/CategoryToPieDatasetTests.java",
        "signature": "org.jfree.data.category.junit.CategoryToPieDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        DefaultCategoryDataset underlying = new DefaultCategoryDataset();\n        underlying.addValue(1.1, \"R1\", \"C1\");\n        underlying.addValue(2.2, \"R1\", \"C2\");\n        CategoryToPieDataset d1 = new CategoryToPieDataset(underlying, \n                TableOrder.BY_COLUMN, 1);\n        CategoryToPieDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (CategoryToPieDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n        \n        // regular equality for the datasets doesn't check the fields, just\n        // the data values...so let's check some more things...\n        assertEquals(d1.getUnderlyingDataset(), d2.getUnderlyingDataset());\n        assertEquals(d1.getExtractType(), d2.getExtractType());\n        assertEquals(d1.getExtractIndex(), d2.getExtractIndex());\n    }",
        "begin_line": 222,
        "end_line": 252,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 73)",
            "(line 224,col 9)-(line 224,col 45)",
            "(line 225,col 9)-(line 225,col 45)",
            "(line 226,col 9)-(line 227,col 41)",
            "(line 228,col 9)-(line 228,col 39)",
            "(line 230,col 9)-(line 244,col 9)",
            "(line 245,col 9)-(line 245,col 29)",
            "(line 249,col 9)-(line 249,col 75)",
            "(line 250,col 9)-(line 250,col 63)",
            "(line 251,col 9)-(line 251,col 65)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultCategoryDatasetTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.DefaultCategoryDatasetTests(java.lang.String)",
        "snippet": "    public DefaultCategoryDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testGetValue()",
        "snippet": "    public void testGetValue() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(1.0, \"R1\", \"C1\");\n        assertEquals(new Double(1.0), d.getValue(\"R1\", \"C1\"));\n        boolean pass = false;\n        try {\n            d.getValue(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            d.getValue(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n    }",
        "begin_line": 85,
        "end_line": 106,
        "comment": "\n     * Some checks for the getValue() method.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 64)",
            "(line 87,col 9)-(line 87,col 36)",
            "(line 88,col 9)-(line 88,col 62)",
            "(line 89,col 9)-(line 89,col 29)",
            "(line 90,col 9)-(line 95,col 9)",
            "(line 96,col 9)-(line 96,col 25)",
            "(line 98,col 9)-(line 98,col 21)",
            "(line 99,col 9)-(line 104,col 9)",
            "(line 105,col 9)-(line 105,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testGetValue2()",
        "snippet": "    public void testGetValue2() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        boolean pass = false;\n        try {\n            /* Number n =*/ d.getValue(0, 0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 111,
        "end_line": 121,
        "comment": "\n     * A simple check for the getValue(int, int) method.\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 64)",
            "(line 113,col 9)-(line 113,col 29)",
            "(line 114,col 9)-(line 119,col 9)",
            "(line 120,col 9)-(line 120,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testIncrementValue()",
        "snippet": "    public void testIncrementValue() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(1.0, \"R1\", \"C1\");\n        d.incrementValue(2.0, \"R1\", \"C1\");\n        assertEquals(new Double(3.0), d.getValue(\"R1\", \"C1\"));\n        \n        // increment a null value\n        d.addValue(null, \"R2\", \"C1\");\n        d.incrementValue(2.0, \"R2\", \"C1\");\n        assertEquals(new Double(2.0), d.getValue(\"R2\", \"C1\"));\n        \n        // increment an unknown row\n        boolean pass = false;\n        try {\n            d.incrementValue(1.0, \"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n        \n        // increment an unknown column\n        pass = false;\n        try {\n            d.incrementValue(1.0, \"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass); \n    }",
        "begin_line": 126,
        "end_line": 156,
        "comment": "\n     * Some checks for the incrementValue() method.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 64)",
            "(line 128,col 9)-(line 128,col 36)",
            "(line 129,col 9)-(line 129,col 42)",
            "(line 130,col 9)-(line 130,col 62)",
            "(line 133,col 9)-(line 133,col 37)",
            "(line 134,col 9)-(line 134,col 42)",
            "(line 135,col 9)-(line 135,col 62)",
            "(line 138,col 9)-(line 138,col 29)",
            "(line 139,col 9)-(line 144,col 9)",
            "(line 145,col 9)-(line 145,col 25)",
            "(line 148,col 9)-(line 148,col 21)",
            "(line 149,col 9)-(line 154,col 9)",
            "(line 155,col 9)-(line 155,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testGetRowCount()",
        "snippet": "    public void testGetRowCount() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        assertTrue(d.getRowCount() == 0);\n        \n        d.addValue(1.0, \"R1\", \"C1\");\n        assertTrue(d.getRowCount() == 1);\n        \n        d.addValue(1.0, \"R2\", \"C1\");\n        assertTrue(d.getRowCount() == 2);\n        \n        d.addValue(2.0, \"R2\", \"C1\");\n        assertTrue(d.getRowCount() == 2);\n        \n        // a row of all null values is still counted...\n        d.setValue(null, \"R2\", \"C1\");\n        assertTrue(d.getRowCount() == 2);\n    }",
        "begin_line": 161,
        "end_line": 177,
        "comment": "\n     * Some tests for the getRowCount() method.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 64)",
            "(line 163,col 9)-(line 163,col 41)",
            "(line 165,col 9)-(line 165,col 36)",
            "(line 166,col 9)-(line 166,col 41)",
            "(line 168,col 9)-(line 168,col 36)",
            "(line 169,col 9)-(line 169,col 41)",
            "(line 171,col 9)-(line 171,col 36)",
            "(line 172,col 9)-(line 172,col 41)",
            "(line 175,col 9)-(line 175,col 37)",
            "(line 176,col 9)-(line 176,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testGetColumnCount()",
        "snippet": "    public void testGetColumnCount() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        assertTrue(d.getColumnCount() == 0);\n        \n        d.addValue(1.0, \"R1\", \"C1\");\n        assertTrue(d.getColumnCount() == 1);\n        \n        d.addValue(1.0, \"R1\", \"C2\");\n        assertTrue(d.getColumnCount() == 2);\n        \n        d.addValue(2.0, \"R1\", \"C2\");\n        assertTrue(d.getColumnCount() == 2);\n        \n        // a column of all null values is still counted...\n        d.setValue(null, \"R1\", \"C2\");\n        assertTrue(d.getColumnCount() == 2);\n    }",
        "begin_line": 182,
        "end_line": 198,
        "comment": "\n     * Some tests for the getColumnCount() method.\n     ",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 64)",
            "(line 184,col 9)-(line 184,col 44)",
            "(line 186,col 9)-(line 186,col 36)",
            "(line 187,col 9)-(line 187,col 44)",
            "(line 189,col 9)-(line 189,col 36)",
            "(line 190,col 9)-(line 190,col 44)",
            "(line 192,col 9)-(line 192,col 36)",
            "(line 193,col 9)-(line 193,col 44)",
            "(line 196,col 9)-(line 196,col 37)",
            "(line 197,col 9)-(line 197,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultCategoryDataset d1 = new DefaultCategoryDataset();\n        d1.setValue(23.4, \"R1\", \"C1\");\n        DefaultCategoryDataset d2 = new DefaultCategoryDataset();\n        d2.setValue(23.4, \"R1\", \"C1\");\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n\n        d1.setValue(36.5, \"R1\", \"C2\");\n        assertFalse(d1.equals(d2));\n        d2.setValue(36.5, \"R1\", \"C2\");\n        assertTrue(d1.equals(d2));\n\n        d1.setValue(null, \"R1\", \"C1\");\n        assertFalse(d1.equals(d2));\n        d2.setValue(null, \"R1\", \"C1\");\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 203,
        "end_line": 220,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 65)",
            "(line 205,col 9)-(line 205,col 38)",
            "(line 206,col 9)-(line 206,col 65)",
            "(line 207,col 9)-(line 207,col 38)",
            "(line 208,col 9)-(line 208,col 34)",
            "(line 209,col 9)-(line 209,col 34)",
            "(line 211,col 9)-(line 211,col 38)",
            "(line 212,col 9)-(line 212,col 35)",
            "(line 213,col 9)-(line 213,col 38)",
            "(line 214,col 9)-(line 214,col 34)",
            "(line 216,col 9)-(line 216,col 38)",
            "(line 217,col 9)-(line 217,col 35)",
            "(line 218,col 9)-(line 218,col 38)",
            "(line 219,col 9)-(line 219,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultCategoryDataset d1 = new DefaultCategoryDataset();\n        d1.setValue(23.4, \"R1\", \"C1\");\n        DefaultCategoryDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            d2 = (DefaultCategoryDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n    }",
        "begin_line": 225,
        "end_line": 247,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 65)",
            "(line 228,col 9)-(line 228,col 38)",
            "(line 229,col 9)-(line 229,col 41)",
            "(line 231,col 9)-(line 244,col 9)",
            "(line 245,col 9)-(line 245,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testAddValue()",
        "snippet": "    public void testAddValue() {\n        DefaultCategoryDataset d1 = new DefaultCategoryDataset();\n        d1.addValue(null, \"R1\", \"C1\");\n        assertNull(d1.getValue(\"R1\", \"C1\"));\n        d1.addValue(new Double(1.0), \"R2\", \"C1\");\n        assertEquals(new Double(1.0), d1.getValue(\"R2\", \"C1\"));\n        \n        boolean pass = false;\n        try {\n            d1.addValue(new Double(1.1), null, \"C2\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 252,
        "end_line": 267,
        "comment": "\n     * Some checks for the addValue() method.\n     ",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 65)",
            "(line 254,col 9)-(line 254,col 38)",
            "(line 255,col 9)-(line 255,col 44)",
            "(line 256,col 9)-(line 256,col 49)",
            "(line 257,col 9)-(line 257,col 63)",
            "(line 259,col 9)-(line 259,col 29)",
            "(line 260,col 9)-(line 265,col 9)",
            "(line 266,col 9)-(line 266,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testRemoveValue()",
        "snippet": "    public void testRemoveValue() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.removeValue(\"R1\", \"C1\");\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        d.removeValue(\"R1\", \"C1\");\n        assertEquals(0, d.getRowCount());\n        assertEquals(0, d.getColumnCount());\n        \n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        d.addValue(new Double(2.0), \"R2\", \"C1\");\n        d.removeValue(\"R1\", \"C1\");\n        assertEquals(new Double(2.0), d.getValue(0, 0));\n        \n        boolean pass = false;\n        try {\n            d.removeValue(null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            d.removeValue(\"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 272,
        "end_line": 302,
        "comment": "\n     * Some basic checks for the removeValue() method.\n     ",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 64)",
            "(line 274,col 9)-(line 274,col 34)",
            "(line 275,col 9)-(line 275,col 48)",
            "(line 276,col 9)-(line 276,col 34)",
            "(line 277,col 9)-(line 277,col 41)",
            "(line 278,col 9)-(line 278,col 44)",
            "(line 280,col 9)-(line 280,col 48)",
            "(line 281,col 9)-(line 281,col 48)",
            "(line 282,col 9)-(line 282,col 34)",
            "(line 283,col 9)-(line 283,col 56)",
            "(line 285,col 9)-(line 285,col 29)",
            "(line 286,col 9)-(line 291,col 9)",
            "(line 292,col 9)-(line 292,col 25)",
            "(line 294,col 9)-(line 294,col 21)",
            "(line 295,col 9)-(line 300,col 9)",
            "(line 301,col 9)-(line 301,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultCategoryDataset d1 = new DefaultCategoryDataset();\n        DefaultCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // try a dataset with some content...\n        d1.addValue(1.0, \"R1\", \"C1\");\n        d1.addValue(2.0, \"R1\", \"C2\");\n        try {\n            d2 = (DefaultCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // check that the clone doesn't share the same underlying arrays.\n        d1.addValue(3.0, \"R1\", \"C1\");\n        assertFalse(d1.equals(d2));\n        d2.addValue(3.0, \"R1\", \"C1\");\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 307,
        "end_line": 338,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 308,col 9)-(line 308,col 65)",
            "(line 309,col 9)-(line 309,col 41)",
            "(line 310,col 9)-(line 315,col 9)",
            "(line 316,col 9)-(line 316,col 29)",
            "(line 317,col 9)-(line 317,col 51)",
            "(line 318,col 9)-(line 318,col 34)",
            "(line 321,col 9)-(line 321,col 37)",
            "(line 322,col 9)-(line 322,col 37)",
            "(line 323,col 9)-(line 328,col 9)",
            "(line 329,col 9)-(line 329,col 29)",
            "(line 330,col 9)-(line 330,col 51)",
            "(line 331,col 9)-(line 331,col 34)",
            "(line 334,col 9)-(line 334,col 37)",
            "(line 335,col 9)-(line 335,col 35)",
            "(line 336,col 9)-(line 336,col 37)",
            "(line 337,col 9)-(line 337,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testBug1835955()",
        "snippet": "    public void testBug1835955() {\n    \tDefaultCategoryDataset d = new DefaultCategoryDataset();\n    \td.addValue(1.0, \"R1\", \"C1\");\n    \td.addValue(2.0, \"R2\", \"C2\");\n    \td.removeColumn(\"C2\");\n    \td.addValue(3.0, \"R2\", \"C2\");\n    \tassertEquals(3.0, d.getValue(\"R2\", \"C2\").doubleValue(), EPSILON);\n    }",
        "begin_line": 345,
        "end_line": 352,
        "comment": "\n     * A test for bug 1835955.\n     ",
        "child_ranges": [
            "(line 346,col 6)-(line 346,col 61)",
            "(line 347,col 6)-(line 347,col 33)",
            "(line 348,col 6)-(line 348,col 33)",
            "(line 349,col 6)-(line 349,col 26)",
            "(line 350,col 6)-(line 350,col 33)",
            "(line 351,col 6)-(line 351,col 70)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCPackageTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.data.time.ohlc\");\n        suite.addTestSuite(OHLCItemTests.class);\n        suite.addTestSuite(OHLCSeriesCollectionTests.class);\n        suite.addTestSuite(OHLCSeriesTests.class);\n        suite.addTestSuite(OHLCTests.class);\n        return suite;\n    }",
        "begin_line": 59,
        "end_line": 66,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 68)",
            "(line 61,col 9)-(line 61,col 48)",
            "(line 62,col 9)-(line 62,col 60)",
            "(line 63,col 9)-(line 63,col 50)",
            "(line 64,col 9)-(line 64,col 44)",
            "(line 65,col 9)-(line 65,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCPackageTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCPackageTests.OHLCPackageTests(java.lang.String)",
        "snippet": "    public OHLCPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the test suite name.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCPackageTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCItemTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCItemTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(OHLCItemTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCItemTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCItemTests.OHLCItemTests(java.lang.String)",
        "snippet": "    public OHLCItemTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCItemTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCItemTests.testConstructor1()",
        "snippet": "    public void testConstructor1() {\n        OHLCItem item1 = new OHLCItem(new Year(2006), 2.0, 4.0, 1.0, 3.0);\n        assertEquals(new Year(2006), item1.getPeriod());\n        assertEquals(2.0, item1.getOpenValue(), EPSILON);\n        assertEquals(4.0, item1.getHighValue(), EPSILON);\n        assertEquals(1.0, item1.getLowValue(), EPSILON);\n        assertEquals(3.0, item1.getCloseValue(), EPSILON);\n    }",
        "begin_line": 85,
        "end_line": 92,
        "comment": "\n     * Some checks for the constructor.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 74)",
            "(line 87,col 9)-(line 87,col 56)",
            "(line 88,col 9)-(line 88,col 57)",
            "(line 89,col 9)-(line 89,col 57)",
            "(line 90,col 9)-(line 90,col 56)",
            "(line 91,col 9)-(line 91,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCItemTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCItemTests.testEquals()",
        "snippet": "    public void testEquals() {\n        OHLCItem item1 = new OHLCItem(new Year(2006), 2.0, 4.0, 1.0, 3.0);\n        OHLCItem item2 = new OHLCItem(new Year(2006), 2.0, 4.0, 1.0, 3.0);\n        assertTrue(item1.equals(item2));\n        assertTrue(item2.equals(item1));\n\n        // period\n        item1 = new OHLCItem(new Year(2007), 2.0, 4.0, 1.0, 3.0);\n        assertFalse(item1.equals(item2));\n        item2 = new OHLCItem(new Year(2007), 2.0, 4.0, 1.0, 3.0);\n        assertTrue(item1.equals(item2));\n        \n        // open\n        item1 = new OHLCItem(new Year(2007), 2.2, 4.0, 1.0, 3.0);\n        assertFalse(item1.equals(item2));\n        item2 = new OHLCItem(new Year(2007), 2.2, 4.0, 1.0, 3.0);\n        assertTrue(item1.equals(item2));\n\n        // high\n        item1 = new OHLCItem(new Year(2007), 2.2, 4.4, 1.0, 3.0);\n        assertFalse(item1.equals(item2));\n        item2 = new OHLCItem(new Year(2007), 2.2, 4.4, 1.0, 3.0);\n        assertTrue(item1.equals(item2));\n\n        // low\n        item1 = new OHLCItem(new Year(2007), 2.2, 4.4, 1.1, 3.0);\n        assertFalse(item1.equals(item2));\n        item2 = new OHLCItem(new Year(2007), 2.2, 4.4, 1.1, 3.0);\n        assertTrue(item1.equals(item2));\n\n        // close\n        item1 = new OHLCItem(new Year(2007), 2.2, 4.4, 1.1, 3.3);\n        assertFalse(item1.equals(item2));\n        item2 = new OHLCItem(new Year(2007), 2.2, 4.4, 1.1, 3.3);\n        assertTrue(item1.equals(item2));\n    }",
        "begin_line": 97,
        "end_line": 132,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 74)",
            "(line 99,col 9)-(line 99,col 74)",
            "(line 100,col 9)-(line 100,col 40)",
            "(line 101,col 9)-(line 101,col 40)",
            "(line 104,col 9)-(line 104,col 65)",
            "(line 105,col 9)-(line 105,col 41)",
            "(line 106,col 9)-(line 106,col 65)",
            "(line 107,col 9)-(line 107,col 40)",
            "(line 110,col 9)-(line 110,col 65)",
            "(line 111,col 9)-(line 111,col 41)",
            "(line 112,col 9)-(line 112,col 65)",
            "(line 113,col 9)-(line 113,col 40)",
            "(line 116,col 9)-(line 116,col 65)",
            "(line 117,col 9)-(line 117,col 41)",
            "(line 118,col 9)-(line 118,col 65)",
            "(line 119,col 9)-(line 119,col 40)",
            "(line 122,col 9)-(line 122,col 65)",
            "(line 123,col 9)-(line 123,col 41)",
            "(line 124,col 9)-(line 124,col 65)",
            "(line 125,col 9)-(line 125,col 40)",
            "(line 128,col 9)-(line 128,col 65)",
            "(line 129,col 9)-(line 129,col 41)",
            "(line 130,col 9)-(line 130,col 65)",
            "(line 131,col 9)-(line 131,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCItemTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCItemTests.testCloning()",
        "snippet": "    public void testCloning() {\n        OHLCItem item1 = new OHLCItem(new Year(2006), 2.0, 4.0, 1.0, 3.0);\n        OHLCItem item2 = null;\n        try {\n            item2 = (OHLCItem) item1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(item1 != item2);\n        assertTrue(item1.getClass() == item2.getClass());\n        assertTrue(item1.equals(item2));\n    }",
        "begin_line": 137,
        "end_line": 149,
        "comment": "\n     * Some checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 74)",
            "(line 139,col 9)-(line 139,col 30)",
            "(line 140,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 146,col 35)",
            "(line 147,col 9)-(line 147,col 57)",
            "(line 148,col 9)-(line 148,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCItemTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCItemTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        OHLCItem item1 = new OHLCItem(new Year(2006), 2.0, 4.0, 1.0, 3.0);\n        OHLCItem item2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(item1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            item2 = (OHLCItem) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(item1, item2);\n    }",
        "begin_line": 154,
        "end_line": 172,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 74)",
            "(line 156,col 9)-(line 156,col 30)",
            "(line 157,col 9)-(line 170,col 9)",
            "(line 171,col 9)-(line 171,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(OHLCSeriesCollectionTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests.OHLCSeriesCollectionTests(java.lang.String)",
        "snippet": "    public OHLCSeriesCollectionTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests.testEquals()",
        "snippet": "    public void testEquals() {\n        OHLCSeriesCollection c1 = new OHLCSeriesCollection();\n        OHLCSeriesCollection c2 = new OHLCSeriesCollection();\n        assertEquals(c1, c2);\n        \n        // add a series\n        OHLCSeries s1 = new OHLCSeries(\"Series\");\n        s1.add(new Year(2006), 1.0, 1.1, 1.2, 1.3);\n        c1.addSeries(s1);\n        assertFalse(c1.equals(c2));\n        OHLCSeries s2 = new OHLCSeries(\"Series\");\n        s2.add(new Year(2006), 1.0, 1.1, 1.2, 1.3);\n        c2.addSeries(s2);\n        assertTrue(c1.equals(c2));\n        \n        // add an empty series\n        c1.addSeries(new OHLCSeries(\"Empty Series\"));\n        assertFalse(c1.equals(c2));\n        c2.addSeries(new OHLCSeries(\"Empty Series\"));\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 84,
        "end_line": 104,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 61)",
            "(line 86,col 9)-(line 86,col 61)",
            "(line 87,col 9)-(line 87,col 29)",
            "(line 90,col 9)-(line 90,col 49)",
            "(line 91,col 9)-(line 91,col 51)",
            "(line 92,col 9)-(line 92,col 25)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 94,col 49)",
            "(line 95,col 9)-(line 95,col 51)",
            "(line 96,col 9)-(line 96,col 25)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 100,col 9)-(line 100,col 53)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 53)",
            "(line 103,col 9)-(line 103,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests.testCloning()",
        "snippet": "    public void testCloning() {\n        OHLCSeriesCollection c1 = new OHLCSeriesCollection();\n        OHLCSeries s1 = new OHLCSeries(\"Series\");\n        s1.add(new Year(2006), 1.0, 1.1, 1.2, 1.3);\n        c1.addSeries(s1);\n        OHLCSeriesCollection c2 = null;\n        try {\n            c2 = (OHLCSeriesCollection) c1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n        \n        // check independence\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }",
        "begin_line": 109,
        "end_line": 128,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 61)",
            "(line 111,col 9)-(line 111,col 49)",
            "(line 112,col 9)-(line 112,col 51)",
            "(line 113,col 9)-(line 113,col 25)",
            "(line 114,col 9)-(line 114,col 39)",
            "(line 115,col 9)-(line 120,col 9)",
            "(line 121,col 9)-(line 121,col 29)",
            "(line 122,col 9)-(line 122,col 51)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 126,col 9)-(line 126,col 33)",
            "(line 127,col 9)-(line 127,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        OHLCSeriesCollection c1 = new OHLCSeriesCollection();\n        OHLCSeries s1 = new OHLCSeries(\"Series\");\n        s1.add(new Year(2006), 1.0, 1.1, 1.2, 1.3);\n        c1.addSeries(s1);\n        OHLCSeriesCollection c2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            c2 = (OHLCSeriesCollection) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n    }",
        "begin_line": 133,
        "end_line": 155,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 61)",
            "(line 135,col 9)-(line 135,col 49)",
            "(line 136,col 9)-(line 136,col 51)",
            "(line 137,col 9)-(line 137,col 25)",
            "(line 138,col 9)-(line 138,col 39)",
            "(line 140,col 9)-(line 153,col 9)",
            "(line 154,col 9)-(line 154,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests.test1170825()",
        "snippet": "    public void test1170825() {\n        OHLCSeries s1 = new OHLCSeries(\"Series1\");\n        OHLCSeriesCollection dataset = new OHLCSeriesCollection();\n        dataset.addSeries(s1);\n        try {\n            /* XYSeries s = */ dataset.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            // correct outcome\n        }\n        catch (IndexOutOfBoundsException e) {\n            assertTrue(false);  // wrong outcome\n        }\n    }",
        "begin_line": 161,
        "end_line": 174,
        "comment": "\n     * A test for bug report 1170825 (originally affected XYSeriesCollection, \n     * this test is just copied over).\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 50)",
            "(line 163,col 9)-(line 163,col 66)",
            "(line 164,col 9)-(line 164,col 30)",
            "(line 165,col 9)-(line 173,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests.seriesChanged(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "    public void seriesChanged(SeriesChangeEvent event) {\n        this.lastEvent = event;\n\t}",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(OHLCSeriesTests.class);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests.OHLCSeriesTests(java.lang.String)",
        "snippet": "    public OHLCSeriesTests(String name) {\n        super(name);\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testEquals()",
        "snippet": "    public void testEquals() {\n        OHLCSeries s1 = new OHLCSeries(\"s1\");\n        OHLCSeries s2 = new OHLCSeries(\"s1\");\n        assertTrue(s1.equals(s2));\n        \n        // seriesKey\n        s1 = new OHLCSeries(\"s2\");\n        assertFalse(s1.equals(s2));\n        s2 = new OHLCSeries(\"s2\");\n        assertTrue(s1.equals(s2));\n        \n        // add a value\n        s1.add(new Year(2006), 2.0, 4.0, 1.0, 3.0);\n        assertFalse(s1.equals(s2));\n        s2.add(new Year(2006), 2.0, 4.0, 1.0, 3.0);\n        assertTrue(s2.equals(s1));\n\n        // add another value\n        s1.add(new Year(2008), 2.0, 4.0, 1.0, 3.0);\n        assertFalse(s1.equals(s2));\n        s2.add(new Year(2008), 2.0, 4.0, 1.0, 3.0);\n        assertTrue(s2.equals(s1));\n\n        // remove a value\n        s1.remove(new Year(2008));\n        assertFalse(s1.equals(s2));\n        s2.remove(new Year(2008));\n        assertTrue(s2.equals(s1));\n    }",
        "begin_line": 94,
        "end_line": 122,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 45)",
            "(line 96,col 9)-(line 96,col 45)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 106,col 9)-(line 106,col 51)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 51)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 112,col 9)-(line 112,col 51)",
            "(line 113,col 9)-(line 113,col 35)",
            "(line 114,col 9)-(line 114,col 51)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 121,col 9)-(line 121,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testCloning()",
        "snippet": "    public void testCloning() {\n        OHLCSeries s1 = new OHLCSeries(\"s1\");\n        s1.add(new Year(2006), 2.0, 4.0, 1.0, 3.0);\n        OHLCSeries s2 = null;\n        try {\n            s2 = (OHLCSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n    }",
        "begin_line": 127,
        "end_line": 140,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 45)",
            "(line 129,col 9)-(line 129,col 51)",
            "(line 130,col 9)-(line 130,col 29)",
            "(line 131,col 9)-(line 136,col 9)",
            "(line 137,col 9)-(line 137,col 29)",
            "(line 138,col 9)-(line 138,col 51)",
            "(line 139,col 9)-(line 139,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        OHLCSeries s1 = new OHLCSeries(\"s1\");\n        s1.add(new Year(2006), 2.0, 4.0, 1.0, 3.0);\n        OHLCSeries s2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            s2 = (OHLCSeries) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(s1, s2);\n\n    }",
        "begin_line": 145,
        "end_line": 167,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 45)",
            "(line 148,col 9)-(line 148,col 51)",
            "(line 149,col 9)-(line 149,col 29)",
            "(line 151,col 9)-(line 164,col 9)",
            "(line 165,col 9)-(line 165,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        OHLCSeries s1 = new OHLCSeries(\"s1\");\n        s1.add(new Year(2006), 2.0, 4.0, 1.0, 3.0);\n        s1.add(new Year(2011), 2.0, 4.0, 1.0, 3.0);\n        s1.add(new Year(2010), 2.0, 4.0, 1.0, 3.0);\n        assertEquals(0, s1.indexOf(new Year(2006)));\n        assertEquals(1, s1.indexOf(new Year(2010)));\n        assertEquals(2, s1.indexOf(new Year(2011)));\n    }",
        "begin_line": 172,
        "end_line": 180,
        "comment": "\n     * Simple test for the indexOf() method.\n     ",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 45)",
            "(line 174,col 9)-(line 174,col 51)",
            "(line 175,col 9)-(line 175,col 51)",
            "(line 176,col 9)-(line 176,col 51)",
            "(line 177,col 9)-(line 177,col 52)",
            "(line 178,col 9)-(line 178,col 52)",
            "(line 179,col 9)-(line 179,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testRemove()",
        "snippet": "    public void testRemove() {\n        OHLCSeries s1 = new OHLCSeries(\"s1\");\n        s1.add(new Year(2006), 2.0, 4.0, 1.0, 3.0);\n        s1.add(new Year(2011), 2.1, 4.1, 1.1, 3.1);\n        s1.add(new Year(2010), 2.2, 4.2, 1.2, 3.2);\n        assertEquals(3, s1.getItemCount());\n        \n        s1.remove(new Year(2010));\n        assertEquals(new Year(2011), s1.getPeriod(1));\n        \n        s1.remove(new Year(2006));\n        assertEquals(new Year(2011), s1.getPeriod(0));\n    }",
        "begin_line": 185,
        "end_line": 197,
        "comment": "\n     * Simple test for the remove() method.\n     ",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 45)",
            "(line 187,col 9)-(line 187,col 51)",
            "(line 188,col 9)-(line 188,col 51)",
            "(line 189,col 9)-(line 189,col 51)",
            "(line 190,col 9)-(line 190,col 43)",
            "(line 192,col 9)-(line 192,col 34)",
            "(line 193,col 9)-(line 193,col 54)",
            "(line 195,col 9)-(line 195,col 34)",
            "(line 196,col 9)-(line 196,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testAdditionOfDuplicatePeriod()",
        "snippet": "    public void testAdditionOfDuplicatePeriod() {\n        OHLCSeries s1 = new OHLCSeries(\"s1\");\n        s1.add(new Year(2006), 1.0, 1.0, 1.0, 1.0);\n        boolean pass = false;\n        try {\n            s1.add(new Year(2006), 1.0, 1.0, 1.0, 1.0);\n        }\n        catch (SeriesException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 202,
        "end_line": 213,
        "comment": "\n     * If you add a duplicate period, an exception should be thrown.\n     ",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 45)",
            "(line 204,col 9)-(line 204,col 51)",
            "(line 205,col 9)-(line 205,col 29)",
            "(line 206,col 9)-(line 211,col 9)",
            "(line 212,col 9)-(line 212,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testSetMaximumItemCount()",
        "snippet": "    public void testSetMaximumItemCount() {\n        OHLCSeries s1 = new OHLCSeries(\"s1\");\n        assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount());\n        s1.setMaximumItemCount(2);\n        assertEquals(2, s1.getMaximumItemCount());\n        s1.add(new Year(2006), 1.0, 1.1, 1.1, 1.1);\n        s1.add(new Year(2007), 2.0, 2.2, 2.2, 2.2);\n        s1.add(new Year(2008), 3.0, 3.3, 3.3, 3.3);\n        assertEquals(new Year(2007), s1.getPeriod(0));\n        assertEquals(new Year(2008), s1.getPeriod(1));\n    }",
        "begin_line": 218,
        "end_line": 228,
        "comment": "\n     * A simple check that the maximumItemCount attribute is working.\n     ",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 45)",
            "(line 220,col 9)-(line 220,col 66)",
            "(line 221,col 9)-(line 221,col 34)",
            "(line 222,col 9)-(line 222,col 50)",
            "(line 223,col 9)-(line 223,col 51)",
            "(line 224,col 9)-(line 224,col 51)",
            "(line 225,col 9)-(line 225,col 51)",
            "(line 226,col 9)-(line 226,col 54)",
            "(line 227,col 9)-(line 227,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testSetMaximumItemCount2()",
        "snippet": "    public void testSetMaximumItemCount2() {\n        OHLCSeries s1 = new OHLCSeries(\"s1\");\n        s1.add(new Year(2006), 1.0, 1.1, 1.1, 1.1);\n        s1.add(new Year(2007), 2.0, 2.2, 2.2, 2.2);\n        s1.add(new Year(2008), 3.0, 3.3, 3.3, 3.3);\n        s1.setMaximumItemCount(2);\n        assertEquals(new Year(2007), s1.getPeriod(0));\n        assertEquals(new Year(2008), s1.getPeriod(1));\n    }",
        "begin_line": 233,
        "end_line": 241,
        "comment": "\n     * Check that the maximum item count can be applied retrospectively.\n     ",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 45)",
            "(line 235,col 9)-(line 235,col 51)",
            "(line 236,col 9)-(line 236,col 51)",
            "(line 237,col 9)-(line 237,col 51)",
            "(line 238,col 9)-(line 238,col 34)",
            "(line 239,col 9)-(line 239,col 54)",
            "(line 240,col 9)-(line 240,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCSeriesTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testClear()",
        "snippet": "    public void testClear() {\n    \tOHLCSeries s1 = new OHLCSeries(\"S1\");\n        s1.addChangeListener(this);\n        s1.clear();\n        assertNull(this.lastEvent);\n        assertTrue(s1.isEmpty());\n        s1.add(new Year(2006), 1.0, 1.1, 1.1, 1.1);\n        assertFalse(s1.isEmpty());\n        s1.clear();\n        assertNotNull(this.lastEvent);\n        assertTrue(s1.isEmpty());\n    } ",
        "begin_line": 246,
        "end_line": 257,
        "comment": "\n     * Some checks for the clear() method.\n     ",
        "child_ranges": [
            "(line 247,col 6)-(line 247,col 42)",
            "(line 248,col 9)-(line 248,col 35)",
            "(line 249,col 9)-(line 249,col 19)",
            "(line 250,col 9)-(line 250,col 35)",
            "(line 251,col 9)-(line 251,col 33)",
            "(line 252,col 9)-(line 252,col 51)",
            "(line 253,col 9)-(line 253,col 34)",
            "(line 254,col 9)-(line 254,col 19)",
            "(line 255,col 9)-(line 255,col 38)",
            "(line 256,col 9)-(line 256,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(OHLCTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCTests.OHLCTests(java.lang.String)",
        "snippet": "    public OHLCTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCTests.testEquals()",
        "snippet": "    public void testEquals() {\n        OHLC i1 = new OHLC(2.0, 4.0, 1.0, 3.0);\n        OHLC i2 = new OHLC(2.0, 4.0, 1.0, 3.0);\n        assertEquals(i1, i2);\n        \n        i1 = new OHLC(2.2, 4.0, 1.0, 3.0);\n        assertFalse(i1.equals(i2));\n        i2 = new OHLC(2.2, 4.0, 1.0, 3.0);\n        assertTrue(i1.equals(i2));\n\n        i1 = new OHLC(2.2, 4.4, 1.0, 3.0);\n        assertFalse(i1.equals(i2));\n        i2 = new OHLC(2.2, 4.4, 1.0, 3.0);\n        assertTrue(i1.equals(i2));\n    \n        i1 = new OHLC(2.2, 4.4, 1.1, 3.0);\n        assertFalse(i1.equals(i2));\n        i2 = new OHLC(2.2, 4.4, 1.1, 3.0);\n        assertTrue(i1.equals(i2));\n\n        i1 = new OHLC(2.2, 4.4, 1.1, 3.3);\n        assertFalse(i1.equals(i2));\n        i2 = new OHLC(2.2, 4.4, 1.1, 3.3);\n        assertTrue(i1.equals(i2));\n    }",
        "begin_line": 82,
        "end_line": 106,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 47)",
            "(line 84,col 9)-(line 84,col 47)",
            "(line 85,col 9)-(line 85,col 29)",
            "(line 87,col 9)-(line 87,col 42)",
            "(line 88,col 9)-(line 88,col 35)",
            "(line 89,col 9)-(line 89,col 42)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 92,col 9)-(line 92,col 42)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 94,col 42)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 97,col 9)-(line 97,col 42)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 42)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 102,col 42)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 42)",
            "(line 105,col 9)-(line 105,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCTests.testCloning()",
        "snippet": "    public void testCloning() {\n        OHLC i1 = new OHLC(2.0, 4.0, 1.0, 3.0);\n        assertFalse(i1 instanceof Cloneable);\n    }",
        "begin_line": 111,
        "end_line": 114,
        "comment": "\n     * This class is immutable.\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 47)",
            "(line 113,col 9)-(line 113,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.ohlc.junit.OHLCTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/ohlc/junit/OHLCTests.java",
        "signature": "org.jfree.data.time.ohlc.junit.OHLCTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        OHLC i1 = new OHLC(2.0, 4.0, 1.0, 3.0);\n        OHLC i2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(i1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            i2 = (OHLC) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(i1, i2);\n    }",
        "begin_line": 119,
        "end_line": 138,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 47)",
            "(line 121,col 9)-(line 121,col 23)",
            "(line 123,col 9)-(line 136,col 9)",
            "(line 137,col 9)-(line 137,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(WeekTests.class);\n    }",
        "begin_line": 92,
        "end_line": 94,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.WeekTests(java.lang.String)",
        "snippet": "    public WeekTests(String name) {\n        super(name);\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.w1Y1900 = new Week(1, 1900);\n        this.w2Y1900 = new Week(2, 1900);\n        this.w51Y9999 = new Week(51, 9999);\n        this.w52Y9999 = new Week(52, 9999);\n    }",
        "begin_line": 108,
        "end_line": 113,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 41)",
            "(line 110,col 9)-(line 110,col 41)",
            "(line 111,col 9)-(line 111,col 43)",
            "(line 112,col 9)-(line 112,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testEquals()",
        "snippet": "    public void testEquals() {\n        Week w1 = new Week(1, 2002);\n        Week w2 = new Week(1, 2002);\n        assertTrue(w1.equals(w2));\n        assertTrue(w2.equals(w1));\n        \n        w1 = new Week(2, 2002);\n        assertFalse(w1.equals(w2));\n        w2 = new Week(2, 2002);\n        assertTrue(w1.equals(w2));\n        \n        w1 = new Week(2, 2003);\n        assertFalse(w1.equals(w2));\n        w2 = new Week(2, 2003);\n        assertTrue(w1.equals(w2));\n    }",
        "begin_line": 118,
        "end_line": 133,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 36)",
            "(line 120,col 9)-(line 120,col 36)",
            "(line 121,col 9)-(line 121,col 34)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 124,col 9)-(line 124,col 31)",
            "(line 125,col 9)-(line 125,col 35)",
            "(line 126,col 9)-(line 126,col 31)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 129,col 9)-(line 129,col 31)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 131,col 31)",
            "(line 132,col 9)-(line 132,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testW1Y1900Previous()",
        "snippet": "    public void testW1Y1900Previous() {\n        Week previous = (Week) this.w1Y1900.previous();\n        assertNull(previous);\n    }",
        "begin_line": 138,
        "end_line": 141,
        "comment": "\n     * Request the week before week 1, 1900: it should be <code>null</code>.\n     ",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 55)",
            "(line 140,col 9)-(line 140,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testW1Y1900Next()",
        "snippet": "    public void testW1Y1900Next() {\n        Week next = (Week) this.w1Y1900.next();\n        assertEquals(this.w2Y1900, next);\n    }",
        "begin_line": 146,
        "end_line": 149,
        "comment": "\n     * Request the week after week 1, 1900: it should be week 2, 1900.\n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 47)",
            "(line 148,col 9)-(line 148,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testW52Y9999Previous()",
        "snippet": "    public void testW52Y9999Previous() {\n        Week previous = (Week) this.w52Y9999.previous();\n        assertEquals(this.w51Y9999, previous);\n    }",
        "begin_line": 154,
        "end_line": 157,
        "comment": "\n     * Request the week before w52, 9999: it should be week 51, 9999.\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 56)",
            "(line 156,col 9)-(line 156,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testW52Y9999Next()",
        "snippet": "    public void testW52Y9999Next() {\n        Week next = (Week) this.w52Y9999.next();\n        assertNull(next);\n    }",
        "begin_line": 162,
        "end_line": 165,
        "comment": "\n     * Request the week after w52, 9999: it should be <code>null</code>.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 48)",
            "(line 164,col 9)-(line 164,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        Week w1 = new Week(24, 1999);\n        Week w2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(w1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            w2 = (Week) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(w1, w2);\n\n    }",
        "begin_line": 170,
        "end_line": 191,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 37)",
            "(line 173,col 9)-(line 173,col 23)",
            "(line 175,col 9)-(line 188,col 9)",
            "(line 189,col 9)-(line 189,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        Week w1 = new Week(2, 2003);\n        Week w2 = new Week(2, 2003);\n        assertTrue(w1.equals(w2));\n        int h1 = w1.hashCode();\n        int h2 = w2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 196,
        "end_line": 203,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 36)",
            "(line 198,col 9)-(line 198,col 36)",
            "(line 199,col 9)-(line 199,col 34)",
            "(line 200,col 9)-(line 200,col 31)",
            "(line 201,col 9)-(line 201,col 31)",
            "(line 202,col 9)-(line 202,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testNotCloneable()",
        "snippet": "    public void testNotCloneable() {\n        Week w = new Week(1, 1999);\n        assertFalse(w instanceof Cloneable);\n    }",
        "begin_line": 208,
        "end_line": 211,
        "comment": "\n     * The {@link Week} class is immutable, so should not be {@link Cloneable}.\n     ",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 35)",
            "(line 210,col 9)-(line 210,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testWeek12005()",
        "snippet": "    public void testWeek12005() {\n        Week w1 = new Week(1, 2005);\n        Calendar c1 = Calendar.getInstance(\n                TimeZone.getTimeZone(\"Europe/London\"), Locale.UK);\n        c1.setMinimalDaysInFirstWeek(4);  // see Java Bug ID 4960215\n        assertEquals(1104710400000L, w1.getFirstMillisecond(c1));\n        assertEquals(1105315199999L, w1.getLastMillisecond(c1));\n        Calendar c2 = Calendar.getInstance(\n                TimeZone.getTimeZone(\"Europe/Paris\"), Locale.FRANCE);\n        c2.setMinimalDaysInFirstWeek(4);  // see Java Bug ID 4960215\n        assertEquals(1104706800000L, w1.getFirstMillisecond(c2));\n        assertEquals(1105311599999L, w1.getLastMillisecond(c2));\n        Calendar c3 = Calendar.getInstance(\n                TimeZone.getTimeZone(\"America/New_York\"), Locale.US);\n        assertEquals(1104037200000L, w1.getFirstMillisecond(c3));\n        assertEquals(1104641999999L, w1.getLastMillisecond(c3));   \n    }",
        "begin_line": 233,
        "end_line": 249,
        "comment": "\n     * The first week in 2005 should span the range:\n     * \n     * TimeZone         | Start Millis  | End Millis    | Start Date  | End Date\n     * -----------------+---------------+---------------+-------------+------------\n     * Europe/London    | 1104710400000 | 1105315199999 |  3-Jan-2005 | 9-Jan-2005\n     * Europe/Paris     | 1104706800000 | 1105311599999 |  3-Jan-2005 | 2-Jan-2005\n     * America/New_York | 1104037200000 | 1104641999999 | 26-Dec-2004 | 1-Jan-2005\n     * \n     * In London and Paris, Monday is the first day of the week, while in the \n     * US it is Sunday.\n     * \n     * Previously, we were using these values, but see Java Bug ID 4960215:\n     * \n     * TimeZone         | Start Millis  | End Millis    | Start Date  | End Date\n     * -----------------+---------------+---------------+-------------+------------\n     * Europe/London    | 1104105600000 | 1104710399999 | 27-Dec-2004 | 2-Jan-2005\n     * Europe/Paris     | 1104102000000 | 1104706799999 | 27-Dec-2004 | 2-Jan-2005\n     * America/New_York | 1104037200000 | 1104641999999 | 26-Dec-2004 | 1-Jan-2005\n     ",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 36)",
            "(line 235,col 9)-(line 236,col 66)",
            "(line 237,col 9)-(line 237,col 40)",
            "(line 238,col 9)-(line 238,col 65)",
            "(line 239,col 9)-(line 239,col 64)",
            "(line 240,col 9)-(line 241,col 69)",
            "(line 242,col 9)-(line 242,col 40)",
            "(line 243,col 9)-(line 243,col 65)",
            "(line 244,col 9)-(line 244,col 64)",
            "(line 245,col 9)-(line 246,col 69)",
            "(line 247,col 9)-(line 247,col 65)",
            "(line 248,col 9)-(line 248,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testWeek532005()",
        "snippet": "    public void testWeek532005() {\n        Week w1 = new Week(53, 2004);\n        Calendar c1 = Calendar.getInstance(\n                TimeZone.getTimeZone(\"Europe/London\"), Locale.UK);\n        c1.setMinimalDaysInFirstWeek(4);  // see Java Bug ID 4960215\n        assertEquals(1104105600000L, w1.getFirstMillisecond(c1));\n        assertEquals(1104710399999L, w1.getLastMillisecond(c1));\n        Calendar c2 = Calendar.getInstance(\n                TimeZone.getTimeZone(\"Europe/Paris\"), Locale.FRANCE);\n        c2.setMinimalDaysInFirstWeek(4);  // see Java Bug ID 4960215\n        assertEquals(1104102000000L, w1.getFirstMillisecond(c2));\n        assertEquals(1104706799999L, w1.getLastMillisecond(c2));\n        w1 = new Week(53, 2005);\n        Calendar c3 = Calendar.getInstance(\n                TimeZone.getTimeZone(\"America/New_York\"), Locale.US);\n        assertEquals(1135486800000L, w1.getFirstMillisecond(c3));\n        assertEquals(1136091599999L, w1.getLastMillisecond(c3));   \n    }",
        "begin_line": 268,
        "end_line": 285,
        "comment": "\n     * The 53rd week in 2004 in London and Paris should span the range:\n     * \n     * TimeZone         | Start Millis  | End Millis    | Start Date  | End Date\n     * -----------------+---------------+---------------+-------------+------------\n     * Europe/London    | 1104105600000 | 1104710399999 | 27-Dec-2004 | 02-Jan-2005\n     * Europe/Paris     | 1104102000000 | 1104706799999 | 27-Dec-2004 | 02-Jan-2005\n     *\n     * The 53rd week in 2005 in New York should span the range:\n     * \n     * TimeZone         | Start Millis  | End Millis    | Start Date  | End Date\n     * -----------------+---------------+---------------+-------------+------------\n     * America/New_York | 1135486800000 | 1136091599999 | 25-Dec-2005 | 31-Dec-2005\n     * \n     * In London and Paris, Monday is the first day of the week, while in the \n     * US it is Sunday.\n     ",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 37)",
            "(line 270,col 9)-(line 271,col 66)",
            "(line 272,col 9)-(line 272,col 40)",
            "(line 273,col 9)-(line 273,col 65)",
            "(line 274,col 9)-(line 274,col 64)",
            "(line 275,col 9)-(line 276,col 69)",
            "(line 277,col 9)-(line 277,col 40)",
            "(line 278,col 9)-(line 278,col 65)",
            "(line 279,col 9)-(line 279,col 64)",
            "(line 280,col 9)-(line 280,col 32)",
            "(line 281,col 9)-(line 282,col 69)",
            "(line 283,col 9)-(line 283,col 65)",
            "(line 284,col 9)-(line 284,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testBug1448828()",
        "snippet": "    public void testBug1448828() {}",
        "begin_line": 290,
        "end_line": 290,
        "comment": "\n     * A test case for bug 1448828.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testBug1498805()",
        "snippet": "    public void testBug1498805() {}",
        "begin_line": 302,
        "end_line": 302,
        "comment": "\n     * A test case for bug 1498805.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetFirstMillisecond()",
        "snippet": "    public void testGetFirstMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Week w = new Week(3, 1970);\n        assertEquals(946800000L, w.getFirstMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 316,
        "end_line": 325,
        "comment": "\n     * Some checks for the getFirstMillisecond() method.\n     ",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 43)",
            "(line 318,col 9)-(line 318,col 37)",
            "(line 319,col 9)-(line 319,col 51)",
            "(line 320,col 9)-(line 320,col 67)",
            "(line 321,col 9)-(line 321,col 35)",
            "(line 322,col 9)-(line 322,col 58)",
            "(line 323,col 9)-(line 323,col 33)",
            "(line 324,col 9)-(line 324,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetFirstMillisecondWithTimeZone()",
        "snippet": "    public void testGetFirstMillisecondWithTimeZone() {}",
        "begin_line": 330,
        "end_line": 330,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetFirstMillisecondWithCalendar()",
        "snippet": "    public void testGetFirstMillisecondWithCalendar() {\n        Week w = new Week(1, 2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(978307200000L, w.getFirstMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            w.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }    ",
        "begin_line": 352,
        "end_line": 367,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 353,col 9)-(line 353,col 35)",
            "(line 354,col 9)-(line 354,col 75)",
            "(line 355,col 9)-(line 355,col 71)",
            "(line 356,col 9)-(line 356,col 69)",
            "(line 359,col 9)-(line 359,col 29)",
            "(line 360,col 9)-(line 365,col 9)",
            "(line 366,col 9)-(line 366,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetLastMillisecond()",
        "snippet": "    public void testGetLastMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Week w = new Week(31, 1970);\n        assertEquals(18485999999L, w.getLastMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 372,
        "end_line": 381,
        "comment": "\n     * Some checks for the getLastMillisecond() method.\n     ",
        "child_ranges": [
            "(line 373,col 9)-(line 373,col 43)",
            "(line 374,col 9)-(line 374,col 37)",
            "(line 375,col 9)-(line 375,col 51)",
            "(line 376,col 9)-(line 376,col 67)",
            "(line 377,col 9)-(line 377,col 36)",
            "(line 378,col 9)-(line 378,col 59)",
            "(line 379,col 9)-(line 379,col 33)",
            "(line 380,col 9)-(line 380,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetLastMillisecondWithTimeZone()",
        "snippet": "    public void testGetLastMillisecondWithTimeZone() {}",
        "begin_line": 386,
        "end_line": 386,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetLastMillisecondWithCalendar()",
        "snippet": "    public void testGetLastMillisecondWithCalendar() {\n        Week w = new Week(52, 2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(1009756799999L, w.getLastMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            w.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    } ",
        "begin_line": 408,
        "end_line": 423,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 409,col 9)-(line 409,col 36)",
            "(line 410,col 9)-(line 410,col 75)",
            "(line 411,col 9)-(line 411,col 71)",
            "(line 412,col 9)-(line 412,col 69)",
            "(line 415,col 9)-(line 415,col 29)",
            "(line 416,col 9)-(line 421,col 9)",
            "(line 422,col 9)-(line 422,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetSerialIndex()",
        "snippet": "    public void testGetSerialIndex() {\n        Week w = new Week(1, 2000);\n        assertEquals(106001L, w.getSerialIndex());\n        w = new Week(1, 1900);\n        assertEquals(100701L, w.getSerialIndex());\n    }",
        "begin_line": 428,
        "end_line": 433,
        "comment": "\n     * Some checks for the getSerialIndex() method.\n     ",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 35)",
            "(line 430,col 9)-(line 430,col 50)",
            "(line 431,col 9)-(line 431,col 30)",
            "(line 432,col 9)-(line 432,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testNext()",
        "snippet": "    public void testNext() {\n        Week w = new Week(12, 2000);\n        w = (Week) w.next();\n        assertEquals(new Year(2000), w.getYear());\n        assertEquals(13, w.getWeek());\n        w = new Week(53, 9999);\n        assertNull(w.next());\n    }",
        "begin_line": 438,
        "end_line": 445,
        "comment": "\n     * Some checks for the testNext() method.\n     ",
        "child_ranges": [
            "(line 439,col 9)-(line 439,col 36)",
            "(line 440,col 9)-(line 440,col 28)",
            "(line 441,col 9)-(line 441,col 50)",
            "(line 442,col 9)-(line 442,col 38)",
            "(line 443,col 9)-(line 443,col 31)",
            "(line 444,col 9)-(line 444,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetStart()",
        "snippet": "    public void testGetStart() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JANUARY, 16, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Week w = new Week(3, 2006);\n        assertEquals(cal.getTime(), w.getStart());\n        Locale.setDefault(saved);        \n    }",
        "begin_line": 450,
        "end_line": 459,
        "comment": "\n     * Some checks for the getStart() method.\n     ",
        "child_ranges": [
            "(line 451,col 9)-(line 451,col 43)",
            "(line 452,col 9)-(line 452,col 40)",
            "(line 453,col 9)-(line 453,col 58)",
            "(line 454,col 9)-(line 454,col 53)",
            "(line 455,col 9)-(line 455,col 41)",
            "(line 456,col 9)-(line 456,col 35)",
            "(line 457,col 9)-(line 457,col 50)",
            "(line 458,col 9)-(line 458,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetEnd()",
        "snippet": "    public void testGetEnd() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JANUARY, 8, 23, 59, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        Week w = new Week(1, 2006);\n        assertEquals(cal.getTime(), w.getEnd());\n        Locale.setDefault(saved);                \n    }",
        "begin_line": 464,
        "end_line": 473,
        "comment": "\n     * Some checks for the getEnd() method.\n     ",
        "child_ranges": [
            "(line 465,col 9)-(line 465,col 43)",
            "(line 466,col 9)-(line 466,col 40)",
            "(line 467,col 9)-(line 467,col 58)",
            "(line 468,col 9)-(line 468,col 55)",
            "(line 469,col 9)-(line 469,col 43)",
            "(line 470,col 9)-(line 470,col 35)",
            "(line 471,col 9)-(line 471,col 48)",
            "(line 472,col 9)-(line 472,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testConstructor()",
        "snippet": "    public void testConstructor() {}",
        "begin_line": 478,
        "end_line": 478,
        "comment": "\n     * A test for a problem in constructing a new Week instance.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DayTests.class);\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.DayTests(java.lang.String)",
        "snippet": "    public DayTests(String name) {\n        super(name);\n    }",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.setUp()",
        "snippet": "    protected void setUp() {\n        // no setup required\n    }",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testEqualsSelf()",
        "snippet": "    public void testEqualsSelf() {\n        Day day = new Day();\n        assertTrue(day.equals(day));\n    }",
        "begin_line": 109,
        "end_line": 112,
        "comment": "\n     * Check that a Day instance is equal to itself.\n     *\n     * SourceForge Bug ID: 558850.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 28)",
            "(line 111,col 9)-(line 111,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testEquals()",
        "snippet": "    public void testEquals() {\n        Day day1 = new Day(29, MonthConstants.MARCH, 2002);\n        Day day2 = new Day(29, MonthConstants.MARCH, 2002);\n        assertTrue(day1.equals(day2));\n    }",
        "begin_line": 117,
        "end_line": 121,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 59)",
            "(line 119,col 9)-(line 119,col 59)",
            "(line 120,col 9)-(line 120,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testDateConstructor1()",
        "snippet": "    public void testDateConstructor1() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"GMT\");\n        Calendar c = new GregorianCalendar(zone);\n        Day d1 = new Day(new Date(1078099199999L), zone);\n        Day d2 = new Day(new Date(1078099200000L), zone);\n\n        assertEquals(MonthConstants.FEBRUARY, d1.getMonth());\n        assertEquals(1078099199999L, d1.getLastMillisecond(c));\n\n        assertEquals(MonthConstants.MARCH, d2.getMonth());\n        assertEquals(1078099200000L, d2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 127,
        "end_line": 140,
        "comment": "\n     * In GMT, the end of 29 Feb 2004 is java.util.Date(1,078,099,199,999L).  \n     * Use this to check the day constructor.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 52)",
            "(line 130,col 9)-(line 130,col 49)",
            "(line 131,col 9)-(line 131,col 57)",
            "(line 132,col 9)-(line 132,col 57)",
            "(line 134,col 9)-(line 134,col 61)",
            "(line 135,col 9)-(line 135,col 63)",
            "(line 137,col 9)-(line 137,col 58)",
            "(line 138,col 9)-(line 138,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testDateConstructor2()",
        "snippet": "    public void testDateConstructor2() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"Europe/Helsinki\");\n        Calendar c = new GregorianCalendar(zone);\n        Day d1 = new Day(new Date(1078091999999L), zone);\n        Day d2 = new Day(new Date(1078092000000L), zone);\n\n        assertEquals(MonthConstants.FEBRUARY, d1.getMonth());\n        assertEquals(1078091999999L, d1.getLastMillisecond(c));\n\n        assertEquals(MonthConstants.MARCH, d2.getMonth());\n        assertEquals(1078092000000L, d2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 147,
        "end_line": 160,
        "comment": "\n     * In Helsinki, the end of 29 Feb 2004 is \n     * java.util.Date(1,078,091,999,999L).  Use this to check the Day \n     * constructor.\n     ",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 64)",
            "(line 150,col 9)-(line 150,col 49)",
            "(line 151,col 9)-(line 151,col 57)",
            "(line 152,col 9)-(line 152,col 57)",
            "(line 154,col 9)-(line 154,col 61)",
            "(line 155,col 9)-(line 155,col 63)",
            "(line 157,col 9)-(line 157,col 58)",
            "(line 158,col 9)-(line 158,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.test1Jan1900Previous()",
        "snippet": "    public void test1Jan1900Previous() {\n\n        Day jan1st1900 = new Day(1, MonthConstants.JANUARY, 1900);\n        Day previous = (Day) jan1st1900.previous();\n        assertNull(previous);\n\n    }",
        "begin_line": 166,
        "end_line": 172,
        "comment": "\n     * Set up a day equal to 1 January 1900.  Request the previous day, it \n     * should be null.\n     ",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 66)",
            "(line 169,col 9)-(line 169,col 51)",
            "(line 170,col 9)-(line 170,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.test1Jan1900Next()",
        "snippet": "    public void test1Jan1900Next() {\n\n        Day jan1st1900 = new Day(1, MonthConstants.JANUARY, 1900);\n        Day next = (Day) jan1st1900.next();\n        assertEquals(2, next.getDayOfMonth());\n\n    }",
        "begin_line": 178,
        "end_line": 184,
        "comment": "\n     * Set up a day equal to 1 January 1900.  Request the next day, it should \n     * be 2 January 1900.\n     ",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 66)",
            "(line 181,col 9)-(line 181,col 43)",
            "(line 182,col 9)-(line 182,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.test31Dec9999Previous()",
        "snippet": "    public void test31Dec9999Previous() {\n\n        Day dec31st9999 = new Day(31, MonthConstants.DECEMBER, 9999);\n        Day previous = (Day) dec31st9999.previous();\n        assertEquals(30, previous.getDayOfMonth());\n\n    }",
        "begin_line": 190,
        "end_line": 196,
        "comment": "\n     * Set up a day equal to 31 December 9999.  Request the previous day, it \n     * should be 30 December 9999.\n     ",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 69)",
            "(line 193,col 9)-(line 193,col 52)",
            "(line 194,col 9)-(line 194,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.test31Dec9999Next()",
        "snippet": "    public void test31Dec9999Next() {\n\n        Day dec31st9999 = new Day(31, MonthConstants.DECEMBER, 9999);\n        Day next = (Day) dec31st9999.next();\n        assertNull(next);\n\n    }",
        "begin_line": 202,
        "end_line": 208,
        "comment": "\n     * Set up a day equal to 31 December 9999.  Request the next day, it should\n     * be null.\n     ",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 69)",
            "(line 205,col 9)-(line 205,col 44)",
            "(line 206,col 9)-(line 206,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testParseDay()",
        "snippet": "    public void testParseDay() throws ParseException {\n\n        GregorianCalendar gc = new GregorianCalendar(2001, 12, 31);\n        SimpleDateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n        Date reference = format.parse(\"31/12/2001\");\n        if (reference.equals(gc.getTime())) {\n            // test 1...\n            Day d = Day.parseDay(\"31/12/2001\");\n            assertEquals(37256, d.getSerialDate().toSerial());\n        }\n\n        // test 2...\n        Day d = Day.parseDay(\"2001-12-31\");\n        assertEquals(37256, d.getSerialDate().toSerial());\n\n    }",
        "begin_line": 219,
        "end_line": 234,
        "comment": "\n     * Problem for date parsing.\n     * <p>\n     * This test works only correct if the short pattern of the date\n     * format is \"dd/MM/yyyy\". If not, this test will result in a\n     * false negative.\n     * \n     * @throws ParseException on parsing errors.\n     ",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 67)",
            "(line 222,col 9)-(line 222,col 69)",
            "(line 223,col 9)-(line 223,col 52)",
            "(line 224,col 9)-(line 228,col 9)",
            "(line 231,col 9)-(line 231,col 43)",
            "(line 232,col 9)-(line 232,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        Day d1 = new Day(15, 4, 2000);\n        Day d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (Day) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(d1, d2);\n\n    }",
        "begin_line": 239,
        "end_line": 261,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 38)",
            "(line 242,col 9)-(line 242,col 22)",
            "(line 244,col 9)-(line 258,col 9)",
            "(line 259,col 9)-(line 259,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        Day d1 = new Day(1, 2, 2003);\n        Day d2 = new Day(1, 2, 2003);\n        assertTrue(d1.equals(d2));\n        int h1 = d1.hashCode();\n        int h2 = d2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 266,
        "end_line": 273,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 37)",
            "(line 268,col 9)-(line 268,col 37)",
            "(line 269,col 9)-(line 269,col 34)",
            "(line 270,col 9)-(line 270,col 31)",
            "(line 271,col 9)-(line 271,col 31)",
            "(line 272,col 9)-(line 272,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testNotCloneable()",
        "snippet": "    public void testNotCloneable() {\n        Day d = new Day(1, 2, 2003);\n        assertFalse(d instanceof Cloneable);\n    }",
        "begin_line": 278,
        "end_line": 281,
        "comment": "\n     * The {@link Day} class is immutable, so should not be {@link Cloneable}.\n     ",
        "child_ranges": [
            "(line 279,col 9)-(line 279,col 36)",
            "(line 280,col 9)-(line 280,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testGetSerialIndex()",
        "snippet": "    public void testGetSerialIndex() {\n        Day d = new Day(1, 1, 1900);\n        assertEquals(2, d.getSerialIndex());\n        d = new Day(15, 4, 2000);\n        assertEquals(36631, d.getSerialIndex());\n    }",
        "begin_line": 286,
        "end_line": 291,
        "comment": "\n     * Some checks for the getSerialIndex() method.\n     ",
        "child_ranges": [
            "(line 287,col 9)-(line 287,col 36)",
            "(line 288,col 9)-(line 288,col 44)",
            "(line 289,col 9)-(line 289,col 33)",
            "(line 290,col 9)-(line 290,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testGetFirstMillisecond()",
        "snippet": "    public void testGetFirstMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Day d = new Day(1, 3, 1970);\n        assertEquals(5094000000L, d.getFirstMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 296,
        "end_line": 305,
        "comment": "\n     * Some checks for the getFirstMillisecond() method.\n     ",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 43)",
            "(line 298,col 9)-(line 298,col 37)",
            "(line 299,col 9)-(line 299,col 51)",
            "(line 300,col 9)-(line 300,col 67)",
            "(line 301,col 9)-(line 301,col 36)",
            "(line 302,col 9)-(line 302,col 59)",
            "(line 303,col 9)-(line 303,col 33)",
            "(line 304,col 9)-(line 304,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testGetFirstMillisecondWithTimeZone()",
        "snippet": "    public void testGetFirstMillisecondWithTimeZone() {\n        Day d = new Day(26, 4, 1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-621187200000L, d.getFirstMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            d.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 310,
        "end_line": 325,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 37)",
            "(line 312,col 9)-(line 312,col 68)",
            "(line 313,col 9)-(line 313,col 49)",
            "(line 314,col 9)-(line 314,col 63)",
            "(line 317,col 9)-(line 317,col 29)",
            "(line 318,col 9)-(line 323,col 9)",
            "(line 324,col 9)-(line 324,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testGetFirstMillisecondWithCalendar()",
        "snippet": "    public void testGetFirstMillisecondWithCalendar() {\n        Day d = new Day(1, 12, 2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(1007164800000L, d.getFirstMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            d.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }    ",
        "begin_line": 330,
        "end_line": 345,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 331,col 9)-(line 331,col 37)",
            "(line 332,col 9)-(line 332,col 75)",
            "(line 333,col 9)-(line 333,col 71)",
            "(line 334,col 9)-(line 334,col 70)",
            "(line 337,col 9)-(line 337,col 29)",
            "(line 338,col 9)-(line 343,col 9)",
            "(line 344,col 9)-(line 344,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testGetLastMillisecond()",
        "snippet": "    public void testGetLastMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Day d = new Day(1, 1, 1970);\n        assertEquals(82799999L, d.getLastMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 350,
        "end_line": 359,
        "comment": "\n     * Some checks for the getLastMillisecond() method.\n     ",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 43)",
            "(line 352,col 9)-(line 352,col 37)",
            "(line 353,col 9)-(line 353,col 51)",
            "(line 354,col 9)-(line 354,col 67)",
            "(line 355,col 9)-(line 355,col 36)",
            "(line 356,col 9)-(line 356,col 56)",
            "(line 357,col 9)-(line 357,col 33)",
            "(line 358,col 9)-(line 358,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testGetLastMillisecondWithTimeZone()",
        "snippet": "    public void testGetLastMillisecondWithTimeZone() {\n        Day d = new Day(1, 2, 1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-628358400001L, d.getLastMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            d.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 364,
        "end_line": 379,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 36)",
            "(line 366,col 9)-(line 366,col 68)",
            "(line 367,col 9)-(line 367,col 49)",
            "(line 368,col 9)-(line 368,col 62)",
            "(line 371,col 9)-(line 371,col 29)",
            "(line 372,col 9)-(line 377,col 9)",
            "(line 378,col 9)-(line 378,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testGetLastMillisecondWithCalendar()",
        "snippet": "    public void testGetLastMillisecondWithCalendar() {\n        Day d = new Day(4, 5, 2001);\n        Calendar calendar = Calendar.getInstance(\n                TimeZone.getTimeZone(\"Europe/London\"), Locale.UK);\n        assertEquals(989017199999L, d.getLastMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            d.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    } ",
        "begin_line": 384,
        "end_line": 399,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 36)",
            "(line 386,col 9)-(line 387,col 66)",
            "(line 388,col 9)-(line 388,col 68)",
            "(line 391,col 9)-(line 391,col 29)",
            "(line 392,col 9)-(line 397,col 9)",
            "(line 398,col 9)-(line 398,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testNext()",
        "snippet": "    public void testNext() {\n        Day d = new Day(25, 12, 2000);\n        d = (Day) d.next();\n        assertEquals(2000, d.getYear());\n        assertEquals(12, d.getMonth());\n        assertEquals(26, d.getDayOfMonth());\n        d = new Day(31, 12, 9999);\n        assertNull(d.next());\n    }",
        "begin_line": 404,
        "end_line": 412,
        "comment": "\n     * Some checks for the testNext() method.\n     ",
        "child_ranges": [
            "(line 405,col 9)-(line 405,col 38)",
            "(line 406,col 9)-(line 406,col 27)",
            "(line 407,col 9)-(line 407,col 40)",
            "(line 408,col 9)-(line 408,col 39)",
            "(line 409,col 9)-(line 409,col 44)",
            "(line 410,col 9)-(line 410,col 34)",
            "(line 411,col 9)-(line 411,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testGetStart()",
        "snippet": "    public void testGetStart() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.NOVEMBER, 3, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Day d = new Day(3, 11, 2006);\n        assertEquals(cal.getTime(), d.getStart());\n        Locale.setDefault(saved);        \n    }",
        "begin_line": 417,
        "end_line": 426,
        "comment": "\n     * Some checks for the getStart() method.\n     ",
        "child_ranges": [
            "(line 418,col 9)-(line 418,col 43)",
            "(line 419,col 9)-(line 419,col 40)",
            "(line 420,col 9)-(line 420,col 58)",
            "(line 421,col 9)-(line 421,col 53)",
            "(line 422,col 9)-(line 422,col 41)",
            "(line 423,col 9)-(line 423,col 37)",
            "(line 424,col 9)-(line 424,col 50)",
            "(line 425,col 9)-(line 425,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DayTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DayTests.java",
        "signature": "org.jfree.data.time.junit.DayTests.testGetEnd()",
        "snippet": "    public void testGetEnd() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(1900, Calendar.JANUARY, 1, 23, 59, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        Day d = new Day(1, 1, 1900);\n        assertEquals(cal.getTime(), d.getEnd());\n        Locale.setDefault(saved);                \n    }",
        "begin_line": 431,
        "end_line": 440,
        "comment": "\n     * Some checks for the getEnd() method.\n     ",
        "child_ranges": [
            "(line 432,col 9)-(line 432,col 43)",
            "(line 433,col 9)-(line 433,col 40)",
            "(line 434,col 9)-(line 434,col 58)",
            "(line 435,col 9)-(line 435,col 55)",
            "(line 436,col 9)-(line 436,col 43)",
            "(line 437,col 9)-(line 437,col 36)",
            "(line 438,col 9)-(line 438,col 48)",
            "(line 439,col 9)-(line 439,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DataTimePackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DataTimePackageTests.java",
        "signature": "org.jfree.data.time.junit.DataTimePackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.data.time\");\n        suite.addTestSuite(DateRangeTests.class);\n        suite.addTestSuite(DayTests.class);\n        suite.addTestSuite(FixedMillisecondTests.class);\n        suite.addTestSuite(HourTests.class);\n        suite.addTestSuite(MinuteTests.class);\n        suite.addTestSuite(MillisecondTests.class);\n        suite.addTestSuite(MonthTests.class);\n        suite.addTestSuite(MovingAverageTests.class);\n        suite.addTestSuite(QuarterTests.class);\n        suite.addTestSuite(SecondTests.class);\n        suite.addTestSuite(SimpleTimePeriodTests.class);\n        suite.addTestSuite(TimePeriodAnchorTests.class);\n        suite.addTestSuite(TimePeriodValueTests.class);\n        suite.addTestSuite(TimePeriodValuesTests.class);\n        suite.addTestSuite(TimePeriodValuesCollectionTests.class);\n        suite.addTestSuite(TimeSeriesCollectionTests.class);\n        suite.addTestSuite(TimeSeriesTests.class);\n        suite.addTestSuite(TimeSeriesDataItemTests.class);\n        suite.addTestSuite(TimeTableXYDatasetTests.class);\n        suite.addTestSuite(WeekTests.class);\n        suite.addTestSuite(YearTests.class);\n        return suite;\n    }",
        "begin_line": 62,
        "end_line": 86,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 63)",
            "(line 64,col 9)-(line 64,col 49)",
            "(line 65,col 9)-(line 65,col 43)",
            "(line 66,col 9)-(line 66,col 56)",
            "(line 67,col 9)-(line 67,col 44)",
            "(line 68,col 9)-(line 68,col 46)",
            "(line 69,col 9)-(line 69,col 51)",
            "(line 70,col 9)-(line 70,col 45)",
            "(line 71,col 9)-(line 71,col 53)",
            "(line 72,col 9)-(line 72,col 47)",
            "(line 73,col 9)-(line 73,col 46)",
            "(line 74,col 9)-(line 74,col 56)",
            "(line 75,col 9)-(line 75,col 56)",
            "(line 76,col 9)-(line 76,col 55)",
            "(line 77,col 9)-(line 77,col 56)",
            "(line 78,col 9)-(line 78,col 66)",
            "(line 79,col 9)-(line 79,col 60)",
            "(line 80,col 9)-(line 80,col 50)",
            "(line 81,col 9)-(line 81,col 58)",
            "(line 82,col 9)-(line 82,col 58)",
            "(line 83,col 9)-(line 83,col 44)",
            "(line 84,col 9)-(line 84,col 44)",
            "(line 85,col 9)-(line 85,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DataTimePackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DataTimePackageTests.java",
        "signature": "org.jfree.data.time.junit.DataTimePackageTests.DataTimePackageTests(java.lang.String)",
        "snippet": "    public DataTimePackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the test suite name.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DataTimePackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DataTimePackageTests.java",
        "signature": "org.jfree.data.time.junit.DataTimePackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DateRangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DateRangeTests.java",
        "signature": "org.jfree.data.time.junit.DateRangeTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DateRangeTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DateRangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DateRangeTests.java",
        "signature": "org.jfree.data.time.junit.DateRangeTests.DateRangeTests(java.lang.String)",
        "snippet": "    public DateRangeTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DateRangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DateRangeTests.java",
        "signature": "org.jfree.data.time.junit.DateRangeTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DateRange r1 = new DateRange(new Date(1000L), new Date(2000L));\n        DateRange r2 = new DateRange(new Date(1000L), new Date(2000L));\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        r1 = new DateRange(new Date(1111L), new Date(2000L));\n        assertFalse(r1.equals(r2));\n        r2 = new DateRange(new Date(1111L), new Date(2000L));\n        assertTrue(r1.equals(r2));\n\n        r1 = new DateRange(new Date(1111L), new Date(2222L));\n        assertFalse(r1.equals(r2));\n        r2 = new DateRange(new Date(1111L), new Date(2222L));\n        assertTrue(r1.equals(r2));\n    }",
        "begin_line": 84,
        "end_line": 99,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 71)",
            "(line 86,col 9)-(line 86,col 71)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 90,col 9)-(line 90,col 61)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 92,col 9)-(line 92,col 61)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 95,col 9)-(line 95,col 61)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 61)",
            "(line 98,col 9)-(line 98,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DateRangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DateRangeTests.java",
        "signature": "org.jfree.data.time.junit.DateRangeTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        DateRange r1 = new DateRange(new Date(1000L), new Date(2000L));\n        DateRange r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (DateRange) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n    }",
        "begin_line": 104,
        "end_line": 124,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 71)",
            "(line 106,col 9)-(line 106,col 28)",
            "(line 108,col 9)-(line 122,col 9)",
            "(line 123,col 9)-(line 123,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.DateRangeTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/DateRangeTests.java",
        "signature": "org.jfree.data.time.junit.DateRangeTests.testClone()",
        "snippet": "    public void testClone() {\n        DateRange r1 = new DateRange(new Date(1000L), new Date(2000L));\n        assertFalse(r1 instanceof Cloneable);\n    }",
        "begin_line": 130,
        "end_line": 133,
        "comment": "\n     * The {@link DateRange} class is immutable, so it doesn't need to \n     * be cloneable.\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 71)",
            "(line 132,col 9)-(line 132,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TimeSeriesTests.class);\n    }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.TimeSeriesTests(java.lang.String)",
        "snippet": "    public TimeSeriesTests(String name) {\n        super(name);\n    }",
        "begin_line": 107,
        "end_line": 109,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.setUp()",
        "snippet": "    protected void setUp() {\n\n        this.seriesA = new TimeSeries(\"Series A\", Year.class);\n        try {\n            this.seriesA.add(new Year(2000), new Integer(102000));\n            this.seriesA.add(new Year(2001), new Integer(102001));\n            this.seriesA.add(new Year(2002), new Integer(102002));\n            this.seriesA.add(new Year(2003), new Integer(102003));\n            this.seriesA.add(new Year(2004), new Integer(102004));\n            this.seriesA.add(new Year(2005), new Integer(102005));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n        this.seriesB = new TimeSeries(\"Series B\", Year.class);\n        try {\n            this.seriesB.add(new Year(2006), new Integer(202006));\n            this.seriesB.add(new Year(2007), new Integer(202007));\n            this.seriesB.add(new Year(2008), new Integer(202008));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n        this.seriesC = new TimeSeries(\"Series C\", Year.class);\n        try {\n            this.seriesC.add(new Year(1999), new Integer(301999));\n            this.seriesC.add(new Year(2000), new Integer(302000));\n            this.seriesC.add(new Year(2002), new Integer(302002));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n    }",
        "begin_line": 114,
        "end_line": 149,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 62)",
            "(line 117,col 9)-(line 127,col 9)",
            "(line 129,col 9)-(line 129,col 62)",
            "(line 130,col 9)-(line 137,col 9)",
            "(line 139,col 9)-(line 139,col 62)",
            "(line 140,col 9)-(line 147,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.seriesChanged(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "    public void seriesChanged(SeriesChangeEvent event) {\n        this.gotSeriesChangeEvent = true;   \n    }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * Sets the flag to indicate that a {@link SeriesChangeEvent} has been \n     * received.\n     * \n     * @param event  the event.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testClone()",
        "snippet": "    public void testClone() {\n\n        TimeSeries series = new TimeSeries(\"Test Series\");\n\n        RegularTimePeriod jan1st2002 = new Day(1, MonthConstants.JANUARY, 2002);\n        try {\n            series.add(jan1st2002, new Integer(42));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem adding to series.\");\n        }\n\n        TimeSeries clone = null;\n        try {\n            clone = (TimeSeries) series.clone();\n            clone.setKey(\"Clone Series\");\n            try {\n                clone.update(jan1st2002, new Integer(10));\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);  \n        }\n        \n        int seriesValue = series.getValue(jan1st2002).intValue();\n        int cloneValue = Integer.MAX_VALUE;\n        if (clone != null) {\n        \tcloneValue = clone.getValue(jan1st2002).intValue();\n        }\n\n        assertEquals(42, seriesValue);\n        assertEquals(10, cloneValue);\n        assertEquals(\"Test Series\", series.getKey());\n        if (clone != null) {\n            assertEquals(\"Clone Series\", clone.getKey());\n        }\n        else {\n        \tassertTrue(false);\n        }\n\n    }",
        "begin_line": 164,
        "end_line": 207,
        "comment": "\n     * Check that cloning works.\n     ",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 58)",
            "(line 168,col 9)-(line 168,col 80)",
            "(line 169,col 9)-(line 174,col 9)",
            "(line 176,col 9)-(line 176,col 32)",
            "(line 177,col 9)-(line 189,col 9)",
            "(line 191,col 9)-(line 191,col 65)",
            "(line 192,col 9)-(line 192,col 43)",
            "(line 193,col 9)-(line 195,col 9)",
            "(line 197,col 9)-(line 197,col 38)",
            "(line 198,col 9)-(line 198,col 37)",
            "(line 199,col 9)-(line 199,col 53)",
            "(line 200,col 9)-(line 205,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testClone2()",
        "snippet": "    public void testClone2() {\n    \tTimeSeries s1 = new TimeSeries(\"S1\", Year.class);\n    \ts1.add(new Year(2007), 100.0);\n    \ts1.add(new Year(2008), null);\n    \ts1.add(new Year(2009), 200.0);\n    \tTimeSeries s2 = null;\n    \ttry {\n    \t\ts2 = (TimeSeries) s1.clone();\n    \t}\n    \tcatch (CloneNotSupportedException e) {\n    \t\te.printStackTrace();\n    \t}\n    \tassertTrue(s1.equals(s2));\n    \t\n    \t// check independence\n    \ts2.addOrUpdate(new Year(2009), 300.0);\n    \tassertFalse(s1.equals(s2));\n    \ts1.addOrUpdate(new Year(2009), 300.0);\n    \tassertTrue(s1.equals(s2));\n    }",
        "begin_line": 212,
        "end_line": 231,
        "comment": "\n     * Another test of the clone() method.\n     ",
        "child_ranges": [
            "(line 213,col 6)-(line 213,col 54)",
            "(line 214,col 6)-(line 214,col 35)",
            "(line 215,col 6)-(line 215,col 34)",
            "(line 216,col 6)-(line 216,col 35)",
            "(line 217,col 6)-(line 217,col 26)",
            "(line 218,col 6)-(line 223,col 6)",
            "(line 224,col 6)-(line 224,col 31)",
            "(line 227,col 6)-(line 227,col 43)",
            "(line 228,col 6)-(line 228,col 32)",
            "(line 229,col 6)-(line 229,col 43)",
            "(line 230,col 6)-(line 230,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testAddValue()",
        "snippet": "    public void testAddValue() {\n\n        try {\n            this.seriesA.add(new Year(1999), new Integer(1));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem adding to series.\");\n        }\n\n        int value = this.seriesA.getValue(0).intValue();\n        assertEquals(1, value);\n\n    }",
        "begin_line": 236,
        "end_line": 248,
        "comment": "\n     * Add a value to series A for 1999.  It should be added at index 0.\n     ",
        "child_ranges": [
            "(line 238,col 9)-(line 243,col 9)",
            "(line 245,col 9)-(line 245,col 56)",
            "(line 246,col 9)-(line 246,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testGetValue()",
        "snippet": "    public void testGetValue() {\n\n        Number value1 = this.seriesA.getValue(new Year(1999));\n        assertNull(value1);\n        int value2 = this.seriesA.getValue(new Year(2000)).intValue();\n        assertEquals(102000, value2);\n\n    }",
        "begin_line": 253,
        "end_line": 260,
        "comment": "\n     * Tests the retrieval of values.\n     ",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 62)",
            "(line 256,col 9)-(line 256,col 27)",
            "(line 257,col 9)-(line 257,col 70)",
            "(line 258,col 9)-(line 258,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testDelete()",
        "snippet": "    public void testDelete() {\n        this.seriesA.delete(0, 0);\n        assertEquals(5, this.seriesA.getItemCount());\n        Number value = this.seriesA.getValue(new Year(2000));\n        assertNull(value);\n    }",
        "begin_line": 265,
        "end_line": 270,
        "comment": "\n     * Tests the deletion of values.\n     ",
        "child_ranges": [
            "(line 266,col 9)-(line 266,col 34)",
            "(line 267,col 9)-(line 267,col 53)",
            "(line 268,col 9)-(line 268,col 61)",
            "(line 269,col 9)-(line 269,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testDelete2()",
        "snippet": "    public void testDelete2() {\n        TimeSeries s1 = new TimeSeries(\"Series\", Year.class);    \n        s1.add(new Year(2000), 13.75);\n        s1.add(new Year(2001), 11.90);\n        s1.add(new Year(2002), null);\n        s1.addChangeListener(this);\n        this.gotSeriesChangeEvent = false;\n        s1.delete(new Year(2001));\n        assertTrue(this.gotSeriesChangeEvent);\n        assertEquals(2, s1.getItemCount());\n        assertEquals(null, s1.getValue(new Year(2001)));\n        \n        // try deleting a time period that doesn't exist...\n        this.gotSeriesChangeEvent = false;\n        s1.delete(new Year(2006));\n        assertFalse(this.gotSeriesChangeEvent);\n        \n        // try deleting null\n        try {\n            s1.delete(null);\n            fail(\"Expected IllegalArgumentException.\");\n        }\n        catch (IllegalArgumentException e) {\n            // expected\n        }\n    }",
        "begin_line": 275,
        "end_line": 300,
        "comment": "\n     * Basic tests for the delete() method.\n     ",
        "child_ranges": [
            "(line 276,col 9)-(line 276,col 61)",
            "(line 277,col 9)-(line 277,col 38)",
            "(line 278,col 9)-(line 278,col 38)",
            "(line 279,col 9)-(line 279,col 37)",
            "(line 280,col 9)-(line 280,col 35)",
            "(line 281,col 9)-(line 281,col 42)",
            "(line 282,col 9)-(line 282,col 34)",
            "(line 283,col 9)-(line 283,col 46)",
            "(line 284,col 9)-(line 284,col 43)",
            "(line 285,col 9)-(line 285,col 56)",
            "(line 288,col 9)-(line 288,col 42)",
            "(line 289,col 9)-(line 289,col 34)",
            "(line 290,col 9)-(line 290,col 47)",
            "(line 293,col 9)-(line 299,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        TimeSeries s1 = new TimeSeries(\"A test\", Year.class);\n        s1.add(new Year(2000), 13.75);\n        s1.add(new Year(2001), 11.90);\n        s1.add(new Year(2002), null);\n        s1.add(new Year(2005), 19.32);\n        s1.add(new Year(2007), 16.89);\n        TimeSeries s2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            s2 = (TimeSeries) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertTrue(s1.equals(s2));\n\n    }",
        "begin_line": 305,
        "end_line": 332,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 307,col 9)-(line 307,col 61)",
            "(line 308,col 9)-(line 308,col 38)",
            "(line 309,col 9)-(line 309,col 38)",
            "(line 310,col 9)-(line 310,col 37)",
            "(line 311,col 9)-(line 311,col 38)",
            "(line 312,col 9)-(line 312,col 38)",
            "(line 313,col 9)-(line 313,col 29)",
            "(line 315,col 9)-(line 329,col 9)",
            "(line 330,col 9)-(line 330,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testEquals()",
        "snippet": "    public void testEquals() {\n        TimeSeries s1 = new TimeSeries(\"Time Series 1\");\n        TimeSeries s2 = new TimeSeries(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n        s1.setMaximumItemCount(100);\n        boolean b5 = s1.equals(s2);\n        assertFalse(\"b5\", b5);\n\n        s2.setMaximumItemCount(100);\n        boolean b6 = s1.equals(s2);\n        assertTrue(\"b6\", b6);\n\n        s1.setMaximumItemAge(100);\n        boolean b7 = s1.equals(s2);\n        assertFalse(\"b7\", b7);\n\n        s2.setMaximumItemAge(100);\n        boolean b8 = s1.equals(s2);\n        assertTrue(\"b8\", b8);\n    }",
        "begin_line": 337,
        "end_line": 374,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 56)",
            "(line 339,col 9)-(line 339,col 56)",
            "(line 340,col 9)-(line 340,col 35)",
            "(line 341,col 9)-(line 341,col 30)",
            "(line 343,col 9)-(line 343,col 35)",
            "(line 344,col 9)-(line 344,col 35)",
            "(line 345,col 9)-(line 345,col 29)",
            "(line 347,col 9)-(line 347,col 41)",
            "(line 348,col 9)-(line 348,col 41)",
            "(line 349,col 9)-(line 349,col 26)",
            "(line 350,col 9)-(line 350,col 26)",
            "(line 351,col 9)-(line 351,col 35)",
            "(line 352,col 9)-(line 352,col 30)",
            "(line 354,col 9)-(line 354,col 26)",
            "(line 355,col 9)-(line 355,col 26)",
            "(line 356,col 9)-(line 356,col 35)",
            "(line 357,col 9)-(line 357,col 29)",
            "(line 359,col 9)-(line 359,col 36)",
            "(line 360,col 9)-(line 360,col 35)",
            "(line 361,col 9)-(line 361,col 30)",
            "(line 363,col 9)-(line 363,col 36)",
            "(line 364,col 9)-(line 364,col 35)",
            "(line 365,col 9)-(line 365,col 29)",
            "(line 367,col 9)-(line 367,col 34)",
            "(line 368,col 9)-(line 368,col 35)",
            "(line 369,col 9)-(line 369,col 30)",
            "(line 371,col 9)-(line 371,col 34)",
            "(line 372,col 9)-(line 372,col 35)",
            "(line 373,col 9)-(line 373,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testEquals2()",
        "snippet": "    public void testEquals2() {\n        TimeSeries s1 = new TimeSeries(\"Series\", null, null, Day.class);\n        TimeSeries s2 = new TimeSeries(\"Series\", null, null, Day.class);\n        assertTrue(s1.equals(s2));\n    }",
        "begin_line": 380,
        "end_line": 384,
        "comment": "\n     * Tests a specific bug report where null arguments in the constructor \n     * cause the equals() method to fail.  Fixed for 0.9.21.\n     ",
        "child_ranges": [
            "(line 381,col 9)-(line 381,col 72)",
            "(line 382,col 9)-(line 382,col 72)",
            "(line 383,col 9)-(line 383,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testCreateCopy1()",
        "snippet": "    public void testCreateCopy1() {\n        \n        TimeSeries series = new TimeSeries(\"Series\", Month.class);\n        series.add(new Month(MonthConstants.JANUARY, 2003), 45.0);\n        series.add(new Month(MonthConstants.FEBRUARY, 2003), 55.0);\n        series.add(new Month(MonthConstants.JUNE, 2003), 35.0);\n        series.add(new Month(MonthConstants.NOVEMBER, 2003), 85.0);\n        series.add(new Month(MonthConstants.DECEMBER, 2003), 75.0);\n        \n        try {\n            // copy a range before the start of the series data...\n            TimeSeries result1 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.DECEMBER, 2002));\n            assertEquals(0, result1.getItemCount());\n        \n            // copy a range that includes only the first item in the series...\n            TimeSeries result2 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.JANUARY, 2003));\n            assertEquals(1, result2.getItemCount());\n        \n            // copy a range that begins before and ends in the middle of the \n            // series...\n            TimeSeries result3 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.APRIL, 2003));\n            assertEquals(2, result3.getItemCount());\n        \n            TimeSeries result4 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.DECEMBER, 2003));\n            assertEquals(5, result4.getItemCount());\n\n            TimeSeries result5 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(5, result5.getItemCount());\n        \n            TimeSeries result6 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2003),\n                    new Month(MonthConstants.JANUARY, 2003));\n            assertEquals(1, result6.getItemCount());\n\n            TimeSeries result7 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2003),\n                    new Month(MonthConstants.APRIL, 2003));\n            assertEquals(2, result7.getItemCount());\n\n            TimeSeries result8 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2003),\n                    new Month(MonthConstants.DECEMBER, 2003));\n            assertEquals(5, result8.getItemCount());\n\n            TimeSeries result9 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2003),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(5, result9.getItemCount());\n        \n            TimeSeries result10 = series.createCopy(\n                    new Month(MonthConstants.MAY, 2003),\n                    new Month(MonthConstants.DECEMBER, 2003));\n            assertEquals(3, result10.getItemCount());\n\n            TimeSeries result11 = series.createCopy(\n                    new Month(MonthConstants.MAY, 2003),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(3, result11.getItemCount());\n\n            TimeSeries result12 = series.createCopy(\n                    new Month(MonthConstants.DECEMBER, 2003),\n                    new Month(MonthConstants.DECEMBER, 2003));\n            assertEquals(1, result12.getItemCount());\n    \n            TimeSeries result13 = series.createCopy(\n                    new Month(MonthConstants.DECEMBER, 2003),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(1, result13.getItemCount());\n\n            TimeSeries result14 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2004),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(0, result14.getItemCount());\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);\n        }\n\n    }",
        "begin_line": 390,
        "end_line": 478,
        "comment": "\n     * Some tests to ensure that the createCopy(RegularTimePeriod, \n     * RegularTimePeriod) method is functioning correctly.\n     ",
        "child_ranges": [
            "(line 392,col 9)-(line 392,col 66)",
            "(line 393,col 9)-(line 393,col 66)",
            "(line 394,col 9)-(line 394,col 67)",
            "(line 395,col 9)-(line 395,col 63)",
            "(line 396,col 9)-(line 396,col 67)",
            "(line 397,col 9)-(line 397,col 67)",
            "(line 399,col 9)-(line 476,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testCreateCopy2()",
        "snippet": "    public void testCreateCopy2() {\n        \n        TimeSeries series = new TimeSeries(\"Series\", Month.class);\n        series.add(new Month(MonthConstants.JANUARY, 2003), 45.0);\n        series.add(new Month(MonthConstants.FEBRUARY, 2003), 55.0);\n        series.add(new Month(MonthConstants.JUNE, 2003), 35.0);\n        series.add(new Month(MonthConstants.NOVEMBER, 2003), 85.0);\n        series.add(new Month(MonthConstants.DECEMBER, 2003), 75.0);\n        \n        try {\n            // copy just the first item...\n            TimeSeries result1 = series.createCopy(0, 0);\n            assertEquals(new Month(1, 2003), result1.getTimePeriod(0));\n            \n            // copy the first two items...\n            result1 = series.createCopy(0, 1);\n            assertEquals(new Month(2, 2003), result1.getTimePeriod(1));\n            \n            // copy the middle three items...\n            result1 = series.createCopy(1, 3);\n            assertEquals(new Month(2, 2003), result1.getTimePeriod(0));\n            assertEquals(new Month(11, 2003), result1.getTimePeriod(2));\n            \n            // copy the last two items...\n            result1 = series.createCopy(3, 4);\n            assertEquals(new Month(11, 2003), result1.getTimePeriod(0));\n            assertEquals(new Month(12, 2003), result1.getTimePeriod(1));\n            \n            // copy the last item...\n            result1 = series.createCopy(4, 4);\n            assertEquals(new Month(12, 2003), result1.getTimePeriod(0));\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);\n        }\n\n        // check negative first argument\n        boolean pass = false;\n        try {\n            /* TimeSeries result = */ series.createCopy(-1, 1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        catch (CloneNotSupportedException e) {\n            pass = false;\n        }\n        assertTrue(pass);\n        \n        // check second argument less than first argument\n        pass = false;\n        try {\n            /* TimeSeries result = */ series.createCopy(1, 0);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        catch (CloneNotSupportedException e) {\n            pass = false;\n        }\n        assertTrue(pass);\n        \n        TimeSeries series2 = new TimeSeries(\"Series 2\");\n        try {\n            TimeSeries series3 = series2.createCopy(99, 999);\n            assertEquals(0, series3.getItemCount());\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);\n        }\n    }",
        "begin_line": 484,
        "end_line": 554,
        "comment": "\n     * Some tests to ensure that the createCopy(int, int) method is \n     * functioning correctly.\n     ",
        "child_ranges": [
            "(line 486,col 9)-(line 486,col 66)",
            "(line 487,col 9)-(line 487,col 66)",
            "(line 488,col 9)-(line 488,col 67)",
            "(line 489,col 9)-(line 489,col 63)",
            "(line 490,col 9)-(line 490,col 67)",
            "(line 491,col 9)-(line 491,col 67)",
            "(line 493,col 9)-(line 518,col 9)",
            "(line 521,col 9)-(line 521,col 29)",
            "(line 522,col 9)-(line 530,col 9)",
            "(line 531,col 9)-(line 531,col 25)",
            "(line 534,col 9)-(line 534,col 21)",
            "(line 535,col 9)-(line 543,col 9)",
            "(line 544,col 9)-(line 544,col 25)",
            "(line 546,col 9)-(line 546,col 56)",
            "(line 547,col 9)-(line 553,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testSetMaximumItemCount()",
        "snippet": "    public void testSetMaximumItemCount() {\n\n        TimeSeries s1 = new TimeSeries(\"S1\", Year.class);\n        s1.add(new Year(2000), 13.75);\n        s1.add(new Year(2001), 11.90);\n        s1.add(new Year(2002), null);\n        s1.add(new Year(2005), 19.32);\n        s1.add(new Year(2007), 16.89);\n\n        assertTrue(s1.getItemCount() == 5);\n        s1.setMaximumItemCount(3);\n        assertTrue(s1.getItemCount() == 3);\n        TimeSeriesDataItem item = s1.getDataItem(0);\n        assertTrue(item.getPeriod().equals(new Year(2002)));\n\n    }",
        "begin_line": 561,
        "end_line": 576,
        "comment": "\n     * Test the setMaximumItemCount() method to ensure that it removes items \n     * from the series if necessary.\n     ",
        "child_ranges": [
            "(line 563,col 9)-(line 563,col 57)",
            "(line 564,col 9)-(line 564,col 38)",
            "(line 565,col 9)-(line 565,col 38)",
            "(line 566,col 9)-(line 566,col 37)",
            "(line 567,col 9)-(line 567,col 38)",
            "(line 568,col 9)-(line 568,col 38)",
            "(line 570,col 9)-(line 570,col 43)",
            "(line 571,col 9)-(line 571,col 34)",
            "(line 572,col 9)-(line 572,col 43)",
            "(line 573,col 9)-(line 573,col 52)",
            "(line 574,col 9)-(line 574,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testAddOrUpdate()",
        "snippet": "    public void testAddOrUpdate() {\n        TimeSeries s1 = new TimeSeries(\"S1\", Year.class);\n        s1.setMaximumItemCount(2);\n        s1.addOrUpdate(new Year(2000), 100.0);\n        assertEquals(1, s1.getItemCount());\n        s1.addOrUpdate(new Year(2001), 101.0);\n        assertEquals(2, s1.getItemCount());\n        s1.addOrUpdate(new Year(2001), 102.0);\n        assertEquals(2, s1.getItemCount());\n        s1.addOrUpdate(new Year(2002), 103.0);\n        assertEquals(2, s1.getItemCount());\n    }",
        "begin_line": 581,
        "end_line": 592,
        "comment": "\n     * Some checks for the addOrUpdate() method.\n     ",
        "child_ranges": [
            "(line 582,col 9)-(line 582,col 57)",
            "(line 583,col 9)-(line 583,col 34)",
            "(line 584,col 9)-(line 584,col 46)",
            "(line 585,col 9)-(line 585,col 43)",
            "(line 586,col 9)-(line 586,col 46)",
            "(line 587,col 9)-(line 587,col 43)",
            "(line 588,col 9)-(line 588,col 46)",
            "(line 589,col 9)-(line 589,col 43)",
            "(line 590,col 9)-(line 590,col 46)",
            "(line 591,col 9)-(line 591,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testBug1075255()",
        "snippet": "    public void testBug1075255() {\n        TimeSeries ts = new TimeSeries(\"dummy\", FixedMillisecond.class);\n        ts.add(new FixedMillisecond(0L), 0.0);\n        TimeSeries ts2 = new TimeSeries(\"dummy2\", FixedMillisecond.class);\n        ts2.add(new FixedMillisecond(0L), 1.0);\n        try {\n            ts.addAndOrUpdate(ts2);\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            assertTrue(false);\n        }\n        assertEquals(1, ts.getItemCount());\n    }",
        "begin_line": 597,
        "end_line": 610,
        "comment": "\n     * A test for the bug report 1075255.\n     ",
        "child_ranges": [
            "(line 598,col 9)-(line 598,col 72)",
            "(line 599,col 9)-(line 599,col 46)",
            "(line 600,col 9)-(line 600,col 74)",
            "(line 601,col 9)-(line 601,col 47)",
            "(line 602,col 9)-(line 608,col 9)",
            "(line 609,col 9)-(line 609,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testBug1832432()",
        "snippet": "    public void testBug1832432() {\n        TimeSeries s1 = new TimeSeries(\"Series\");\n        TimeSeries s2 = null;\n        try {\n            s2 = (TimeSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n\n        // test independence\n        s1.add(new Day(1, 1, 2007), 100.0);\n        assertFalse(s1.equals(s2));    \t\n    }",
        "begin_line": 615,
        "end_line": 631,
        "comment": " \n     * A test for bug 1832432.\n     ",
        "child_ranges": [
            "(line 616,col 9)-(line 616,col 49)",
            "(line 617,col 9)-(line 617,col 29)",
            "(line 618,col 9)-(line 623,col 9)",
            "(line 624,col 9)-(line 624,col 29)",
            "(line 625,col 9)-(line 625,col 51)",
            "(line 626,col 9)-(line 626,col 34)",
            "(line 629,col 9)-(line 629,col 43)",
            "(line 630,col 9)-(line 630,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testGetIndex()",
        "snippet": "    public void testGetIndex() {\n        TimeSeries series = new TimeSeries(\"Series\", Month.class);\n        assertEquals(-1, series.getIndex(new Month(1, 2003)));\n        \n        series.add(new Month(1, 2003), 45.0);\n        assertEquals(0, series.getIndex(new Month(1, 2003)));\n        assertEquals(-1, series.getIndex(new Month(12, 2002)));\n        assertEquals(-2, series.getIndex(new Month(2, 2003)));\n        \n        series.add(new Month(3, 2003), 55.0);\n        assertEquals(-1, series.getIndex(new Month(12, 2002)));\n        assertEquals(0, series.getIndex(new Month(1, 2003)));\n        assertEquals(-2, series.getIndex(new Month(2, 2003)));\n        assertEquals(1, series.getIndex(new Month(3, 2003)));\n        assertEquals(-3, series.getIndex(new Month(4, 2003)));   \n    }   ",
        "begin_line": 636,
        "end_line": 651,
        "comment": "\n     * Some checks for the getIndex() method.\n     ",
        "child_ranges": [
            "(line 637,col 9)-(line 637,col 66)",
            "(line 638,col 9)-(line 638,col 62)",
            "(line 640,col 9)-(line 640,col 45)",
            "(line 641,col 9)-(line 641,col 61)",
            "(line 642,col 9)-(line 642,col 63)",
            "(line 643,col 9)-(line 643,col 62)",
            "(line 645,col 9)-(line 645,col 45)",
            "(line 646,col 9)-(line 646,col 63)",
            "(line 647,col 9)-(line 647,col 61)",
            "(line 648,col 9)-(line 648,col 62)",
            "(line 649,col 9)-(line 649,col 61)",
            "(line 650,col 9)-(line 650,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testGetDataItem1()",
        "snippet": "    public void testGetDataItem1() {\n        TimeSeries series = new TimeSeries(\"S\", Year.class);\n        \n        // can't get anything yet...just an exception\n        boolean pass = false;\n        try {\n            /*TimeSeriesDataItem item =*/ series.getDataItem(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        series.add(new Year(2006), 100.0);\n        TimeSeriesDataItem item = series.getDataItem(0);\n        assertEquals(new Year(2006), item.getPeriod());\n        pass = false;\n        try {\n            /*item = */series.getDataItem(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            /*item = */series.getDataItem(1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 656,
        "end_line": 689,
        "comment": "\n     * Some checks for the getDataItem(int) method.\n     ",
        "child_ranges": [
            "(line 657,col 9)-(line 657,col 60)",
            "(line 660,col 9)-(line 660,col 29)",
            "(line 661,col 9)-(line 666,col 9)",
            "(line 667,col 9)-(line 667,col 25)",
            "(line 669,col 9)-(line 669,col 42)",
            "(line 670,col 9)-(line 670,col 56)",
            "(line 671,col 9)-(line 671,col 55)",
            "(line 672,col 9)-(line 672,col 21)",
            "(line 673,col 9)-(line 678,col 9)",
            "(line 679,col 9)-(line 679,col 25)",
            "(line 681,col 9)-(line 681,col 21)",
            "(line 682,col 9)-(line 687,col 9)",
            "(line 688,col 9)-(line 688,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testGetDataItem2()",
        "snippet": "    public void testGetDataItem2() {\n        TimeSeries series = new TimeSeries(\"S\", Year.class);\n        assertNull(series.getDataItem(new Year(2006)));\n        \n        // try a null argument\n        boolean pass = false;\n        try {\n            /* TimeSeriesDataItem item = */ series.getDataItem(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 694,
        "end_line": 707,
        "comment": "\n     * Some checks for the getDataItem(RegularTimePeriod) method.\n     ",
        "child_ranges": [
            "(line 695,col 9)-(line 695,col 60)",
            "(line 696,col 9)-(line 696,col 55)",
            "(line 699,col 9)-(line 699,col 29)",
            "(line 700,col 9)-(line 705,col 9)",
            "(line 706,col 9)-(line 706,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testRemoveAgedItems()",
        "snippet": "    public void testRemoveAgedItems() {\n    \tTimeSeries series = new TimeSeries(\"Test Series\", Year.class);\n    \tseries.addChangeListener(this);\n    \tassertEquals(Long.MAX_VALUE, series.getMaximumItemAge());\n    \tassertEquals(Integer.MAX_VALUE, series.getMaximumItemCount());\n    \tthis.gotSeriesChangeEvent = false;\n    \t\n    \t// test empty series\n    \tseries.removeAgedItems(true);\n    \tassertEquals(0, series.getItemCount());\n    \tassertFalse(this.gotSeriesChangeEvent);\n    \t\n    \t// test series with one item\n    \tseries.add(new Year(1999), 1.0);\n    \tseries.setMaximumItemAge(0);\n    \tthis.gotSeriesChangeEvent = false;\n    \tseries.removeAgedItems(true);\n    \tassertEquals(1, series.getItemCount());\n    \tassertFalse(this.gotSeriesChangeEvent);\n\n    \t// test series with two items\n    \tseries.setMaximumItemAge(10);\n    \tseries.add(new Year(2001), 2.0);\n    \tthis.gotSeriesChangeEvent = false;\n    \tseries.setMaximumItemAge(2);\n    \tassertEquals(2, series.getItemCount());\n    \tassertEquals(0, series.getIndex(new Year(1999)));\n    \tassertFalse(this.gotSeriesChangeEvent);\n    \tseries.setMaximumItemAge(1);\n    \tassertEquals(1, series.getItemCount());\n    \tassertEquals(0, series.getIndex(new Year(2001)));\n    \tassertTrue(this.gotSeriesChangeEvent);\n    }",
        "begin_line": 712,
        "end_line": 744,
        "comment": "\n     * Some checks for the removeAgedItems() method.\n     ",
        "child_ranges": [
            "(line 713,col 6)-(line 713,col 67)",
            "(line 714,col 6)-(line 714,col 36)",
            "(line 715,col 6)-(line 715,col 62)",
            "(line 716,col 6)-(line 716,col 67)",
            "(line 717,col 6)-(line 717,col 39)",
            "(line 720,col 6)-(line 720,col 34)",
            "(line 721,col 6)-(line 721,col 44)",
            "(line 722,col 6)-(line 722,col 44)",
            "(line 725,col 6)-(line 725,col 37)",
            "(line 726,col 6)-(line 726,col 33)",
            "(line 727,col 6)-(line 727,col 39)",
            "(line 728,col 6)-(line 728,col 34)",
            "(line 729,col 6)-(line 729,col 44)",
            "(line 730,col 6)-(line 730,col 44)",
            "(line 733,col 6)-(line 733,col 34)",
            "(line 734,col 6)-(line 734,col 37)",
            "(line 735,col 6)-(line 735,col 39)",
            "(line 736,col 6)-(line 736,col 33)",
            "(line 737,col 6)-(line 737,col 44)",
            "(line 738,col 6)-(line 738,col 54)",
            "(line 739,col 6)-(line 739,col 44)",
            "(line 740,col 6)-(line 740,col 33)",
            "(line 741,col 6)-(line 741,col 44)",
            "(line 742,col 6)-(line 742,col 54)",
            "(line 743,col 6)-(line 743,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testRemoveAgedItems2()",
        "snippet": "    public void testRemoveAgedItems2() {\n        long y2006 = 1157087372534L;  // milliseconds somewhere in 2006\n    \tTimeSeries series = new TimeSeries(\"Test Series\", Year.class);\n    \tseries.addChangeListener(this);\n    \tassertEquals(Long.MAX_VALUE, series.getMaximumItemAge());\n    \tassertEquals(Integer.MAX_VALUE, series.getMaximumItemCount());\n    \tthis.gotSeriesChangeEvent = false;\n    \t\n    \t// test empty series\n    \tseries.removeAgedItems(y2006, true);\n    \tassertEquals(0, series.getItemCount());\n    \tassertFalse(this.gotSeriesChangeEvent);\n        \n        // test a series with 1 item\n        series.add(new Year(2004), 1.0);\n        series.setMaximumItemAge(1);\n        this.gotSeriesChangeEvent = false;\n        series.removeAgedItems(new Year(2005).getMiddleMillisecond(), true);\n        assertEquals(1, series.getItemCount());\n        assertFalse(this.gotSeriesChangeEvent);\n        series.removeAgedItems(y2006, true);\n        assertEquals(0, series.getItemCount());\n        assertTrue(this.gotSeriesChangeEvent);\n   \t\n        // test a series with two items\n        series.setMaximumItemAge(2);\n        series.add(new Year(2003), 1.0);\n        series.add(new Year(2005), 2.0);\n        assertEquals(2, series.getItemCount());\n        this.gotSeriesChangeEvent = false;\n        assertEquals(2, series.getItemCount());\n        \n        series.removeAgedItems(new Year(2005).getMiddleMillisecond(), true);\n        assertEquals(2, series.getItemCount());\n        assertFalse(this.gotSeriesChangeEvent);\n        series.removeAgedItems(y2006, true);\n        assertEquals(1, series.getItemCount());\n        assertTrue(this.gotSeriesChangeEvent);\n    }",
        "begin_line": 749,
        "end_line": 787,
        "comment": "\n     * Some checks for the removeAgedItems(long, boolean) method.\n     ",
        "child_ranges": [
            "(line 750,col 9)-(line 750,col 36)",
            "(line 751,col 6)-(line 751,col 67)",
            "(line 752,col 6)-(line 752,col 36)",
            "(line 753,col 6)-(line 753,col 62)",
            "(line 754,col 6)-(line 754,col 67)",
            "(line 755,col 6)-(line 755,col 39)",
            "(line 758,col 6)-(line 758,col 41)",
            "(line 759,col 6)-(line 759,col 44)",
            "(line 760,col 6)-(line 760,col 44)",
            "(line 763,col 9)-(line 763,col 40)",
            "(line 764,col 9)-(line 764,col 36)",
            "(line 765,col 9)-(line 765,col 42)",
            "(line 766,col 9)-(line 766,col 76)",
            "(line 767,col 9)-(line 767,col 47)",
            "(line 768,col 9)-(line 768,col 47)",
            "(line 769,col 9)-(line 769,col 44)",
            "(line 770,col 9)-(line 770,col 47)",
            "(line 771,col 9)-(line 771,col 46)",
            "(line 774,col 9)-(line 774,col 36)",
            "(line 775,col 9)-(line 775,col 40)",
            "(line 776,col 9)-(line 776,col 40)",
            "(line 777,col 9)-(line 777,col 47)",
            "(line 778,col 9)-(line 778,col 42)",
            "(line 779,col 9)-(line 779,col 47)",
            "(line 781,col 9)-(line 781,col 76)",
            "(line 782,col 9)-(line 782,col 47)",
            "(line 783,col 9)-(line 783,col 47)",
            "(line 784,col 9)-(line 784,col 44)",
            "(line 785,col 9)-(line 785,col 47)",
            "(line 786,col 9)-(line 786,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        TimeSeries s1 = new TimeSeries(\"Test\");\n        TimeSeries s2 = new TimeSeries(\"Test\");\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n        \n        s1.add(new Day(1, 1, 2007), 500.0);\n        s2.add(new Day(1, 1, 2007), 500.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n        \n        s1.add(new Day(2, 1, 2007), null);\n        s2.add(new Day(2, 1, 2007), null);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n        \n        s1.add(new Day(5, 1, 2007), 111.0);\n        s2.add(new Day(5, 1, 2007), 111.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(new Day(9, 1, 2007), 1.0);\n        s2.add(new Day(9, 1, 2007), 1.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n    }",
        "begin_line": 792,
        "end_line": 817,
        "comment": "\n     * Some simple checks for the hashCode() method.\n     ",
        "child_ranges": [
            "(line 793,col 9)-(line 793,col 47)",
            "(line 794,col 9)-(line 794,col 47)",
            "(line 795,col 9)-(line 795,col 29)",
            "(line 796,col 9)-(line 796,col 51)",
            "(line 798,col 9)-(line 798,col 43)",
            "(line 799,col 9)-(line 799,col 43)",
            "(line 800,col 9)-(line 800,col 29)",
            "(line 801,col 9)-(line 801,col 51)",
            "(line 803,col 9)-(line 803,col 42)",
            "(line 804,col 9)-(line 804,col 42)",
            "(line 805,col 9)-(line 805,col 29)",
            "(line 806,col 9)-(line 806,col 51)",
            "(line 808,col 9)-(line 808,col 43)",
            "(line 809,col 9)-(line 809,col 43)",
            "(line 810,col 9)-(line 810,col 29)",
            "(line 811,col 9)-(line 811,col 51)",
            "(line 813,col 9)-(line 813,col 41)",
            "(line 814,col 9)-(line 814,col 41)",
            "(line 815,col 9)-(line 815,col 29)",
            "(line 816,col 9)-(line 816,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TimePeriodValuesTests.class);\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.TimePeriodValuesTests(java.lang.String)",
        "snippet": "    public TimePeriodValuesTests(String name) {\n        super(name);\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.setUp()",
        "snippet": "    protected void setUp() {\n\n        this.seriesA = new TimePeriodValues(\"Series A\");\n        try {\n            this.seriesA.add(new Year(2000), new Integer(102000));\n            this.seriesA.add(new Year(2001), new Integer(102001));\n            this.seriesA.add(new Year(2002), new Integer(102002));\n            this.seriesA.add(new Year(2003), new Integer(102003));\n            this.seriesA.add(new Year(2004), new Integer(102004));\n            this.seriesA.add(new Year(2005), new Integer(102005));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n        this.seriesB = new TimePeriodValues(\"Series B\");\n        try {\n            this.seriesB.add(new Year(2006), new Integer(202006));\n            this.seriesB.add(new Year(2007), new Integer(202007));\n            this.seriesB.add(new Year(2008), new Integer(202008));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n        this.seriesC = new TimePeriodValues(\"Series C\");\n        try {\n            this.seriesC.add(new Year(1999), new Integer(301999));\n            this.seriesC.add(new Year(2000), new Integer(302000));\n            this.seriesC.add(new Year(2002), new Integer(302002));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n    }",
        "begin_line": 102,
        "end_line": 137,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 56)",
            "(line 105,col 9)-(line 115,col 9)",
            "(line 117,col 9)-(line 117,col 56)",
            "(line 118,col 9)-(line 125,col 9)",
            "(line 127,col 9)-(line 127,col 56)",
            "(line 128,col 9)-(line 135,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.testClone()",
        "snippet": "    public void testClone() {\n\n        TimePeriodValues series = new TimePeriodValues(\"Test Series\");\n\n        RegularTimePeriod jan1st2002 = new Day(1, MonthConstants.JANUARY, 2002);\n        try {\n            series.add(jan1st2002, new Integer(42));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem adding to collection.\");\n        }\n\n        TimePeriodValues clone = null;\n        try {\n            clone = (TimePeriodValues) series.clone();\n            clone.setKey(\"Clone Series\");\n            try {\n                clone.update(0, new Integer(10));\n            }\n            catch (SeriesException e) {\n                System.err.println(\"Problem updating series.\");\n            }\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);\n        }\n\n        int seriesValue = series.getValue(0).intValue();\n        int cloneValue = clone.getValue(0).intValue();\n\n        assertEquals(42, seriesValue);\n        assertEquals(10, cloneValue);\n        assertEquals(\"Test Series\", series.getKey());\n        assertEquals(\"Clone Series\", clone.getKey());\n\n    }",
        "begin_line": 143,
        "end_line": 178,
        "comment": "\n     * Set up a quarter equal to Q1 1900.  Request the previous quarter, it \n     * should be null.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 70)",
            "(line 147,col 9)-(line 147,col 80)",
            "(line 148,col 9)-(line 153,col 9)",
            "(line 155,col 9)-(line 155,col 38)",
            "(line 156,col 9)-(line 168,col 9)",
            "(line 170,col 9)-(line 170,col 56)",
            "(line 171,col 9)-(line 171,col 54)",
            "(line 173,col 9)-(line 173,col 38)",
            "(line 174,col 9)-(line 174,col 37)",
            "(line 175,col 9)-(line 175,col 53)",
            "(line 176,col 9)-(line 176,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.testAddValue()",
        "snippet": "    public void testAddValue() {\n\n        TimePeriodValues tpvs = new TimePeriodValues(\"Test\");\n        try {\n            tpvs.add(new Year(1999), new Integer(1));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem adding to series.\");\n        }\n\n        int value = tpvs.getValue(0).intValue();\n        assertEquals(1, value);\n\n    }",
        "begin_line": 183,
        "end_line": 196,
        "comment": "\n     * Add a value to series A for 1999.  It should be added at index 0.\n     ",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 61)",
            "(line 186,col 9)-(line 191,col 9)",
            "(line 193,col 9)-(line 193,col 48)",
            "(line 194,col 9)-(line 194,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        TimePeriodValues s1 = new TimePeriodValues(\"A test\");\n        s1.add(new Year(2000), 13.75);\n        s1.add(new Year(2001), 11.90);\n        s1.add(new Year(2002), null);\n        s1.add(new Year(2005), 19.32);\n        s1.add(new Year(2007), 16.89);\n        TimePeriodValues s2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            s2 = (TimePeriodValues) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1.equals(s2));\n\n    }",
        "begin_line": 201,
        "end_line": 227,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 61)",
            "(line 204,col 9)-(line 204,col 38)",
            "(line 205,col 9)-(line 205,col 38)",
            "(line 206,col 9)-(line 206,col 37)",
            "(line 207,col 9)-(line 207,col 38)",
            "(line 208,col 9)-(line 208,col 38)",
            "(line 209,col 9)-(line 209,col 35)",
            "(line 211,col 9)-(line 224,col 9)",
            "(line 225,col 9)-(line 225,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.testEquals()",
        "snippet": "    public void testEquals() {\n        TimePeriodValues s1 = new TimePeriodValues(\"Time Series 1\");\n        TimePeriodValues s2 = new TimePeriodValues(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        // domain description\n        s1.setDomainDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        // domain description - null\n        s1.setDomainDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(null);\n        assertTrue(s1.equals(s2));\n        \n        // range description\n        s1.setRangeDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        // range description - null\n        s1.setRangeDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(null);\n        assertTrue(s1.equals(s2));\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n    }",
        "begin_line": 232,
        "end_line": 278,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 68)",
            "(line 234,col 9)-(line 234,col 68)",
            "(line 235,col 9)-(line 235,col 35)",
            "(line 236,col 9)-(line 236,col 30)",
            "(line 238,col 9)-(line 238,col 35)",
            "(line 239,col 9)-(line 239,col 35)",
            "(line 240,col 9)-(line 240,col 29)",
            "(line 243,col 9)-(line 243,col 39)",
            "(line 244,col 9)-(line 244,col 35)",
            "(line 245,col 9)-(line 245,col 39)",
            "(line 246,col 9)-(line 246,col 34)",
            "(line 249,col 9)-(line 249,col 38)",
            "(line 250,col 9)-(line 250,col 35)",
            "(line 251,col 9)-(line 251,col 38)",
            "(line 252,col 9)-(line 252,col 34)",
            "(line 255,col 9)-(line 255,col 38)",
            "(line 256,col 9)-(line 256,col 35)",
            "(line 257,col 9)-(line 257,col 38)",
            "(line 258,col 9)-(line 258,col 34)",
            "(line 261,col 9)-(line 261,col 37)",
            "(line 262,col 9)-(line 262,col 35)",
            "(line 263,col 9)-(line 263,col 37)",
            "(line 264,col 9)-(line 264,col 34)",
            "(line 266,col 9)-(line 266,col 41)",
            "(line 267,col 9)-(line 267,col 41)",
            "(line 268,col 9)-(line 268,col 26)",
            "(line 269,col 9)-(line 269,col 26)",
            "(line 270,col 9)-(line 270,col 35)",
            "(line 271,col 9)-(line 271,col 30)",
            "(line 273,col 9)-(line 273,col 26)",
            "(line 274,col 9)-(line 274,col 26)",
            "(line 275,col 9)-(line 275,col 35)",
            "(line 276,col 9)-(line 276,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.test1161329()",
        "snippet": "    public void test1161329() {\n        TimePeriodValues tpv = new TimePeriodValues(\"Test\");\n        RegularTimePeriod t = new Day();\n        tpv.add(t, 1.0);\n        t = t.next();\n        tpv.add(t, 2.0);\n        tpv.delete(0, 1);\n        assertEquals(0, tpv.getItemCount());\n        tpv.add(t, 2.0);\n        assertEquals(1, tpv.getItemCount());\n    }",
        "begin_line": 283,
        "end_line": 293,
        "comment": "\n     * A test for bug report 1161329.\n     ",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 60)",
            "(line 285,col 9)-(line 285,col 40)",
            "(line 286,col 9)-(line 286,col 24)",
            "(line 287,col 9)-(line 287,col 21)",
            "(line 288,col 9)-(line 288,col 24)",
            "(line 289,col 9)-(line 289,col 25)",
            "(line 290,col 9)-(line 290,col 44)",
            "(line 291,col 9)-(line 291,col 24)",
            "(line 292,col 9)-(line 292,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.testAdd()",
        "snippet": "    public void testAdd() {\n        TimePeriodValues tpv = new TimePeriodValues(\"Test\");\n        MySeriesChangeListener listener = new MySeriesChangeListener();\n        tpv.addChangeListener(listener);\n        tpv.add(new TimePeriodValue(new SimpleTimePeriod(new Date(1L), \n                new Date(3L)), 99.0));\n        assertEquals(99.0, tpv.getValue(0).doubleValue(), EPSILON);\n        assertEquals(tpv, listener.getLastEvent().getSource());\n        \n        // a null item should throw an IllegalArgumentException\n        boolean pass = false;\n        try {\n            tpv.add((TimePeriodValue) null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 300,
        "end_line": 318,
        "comment": "\n     * Some checks for the add() methods.\n     ",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 60)",
            "(line 302,col 9)-(line 302,col 71)",
            "(line 303,col 9)-(line 303,col 40)",
            "(line 304,col 9)-(line 305,col 38)",
            "(line 306,col 9)-(line 306,col 67)",
            "(line 307,col 9)-(line 307,col 63)",
            "(line 310,col 9)-(line 310,col 29)",
            "(line 311,col 9)-(line 316,col 9)",
            "(line 317,col 9)-(line 317,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.MySeriesChangeListener.MySeriesChangeListener()",
        "snippet": "        public MySeriesChangeListener() {\n            this.lastEvent = null;\n        }",
        "begin_line": 330,
        "end_line": 332,
        "comment": "\n         * Creates a new listener.\n         ",
        "child_ranges": [
            "(line 331,col 13)-(line 331,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.MySeriesChangeListener.getLastEvent()",
        "snippet": "        public SeriesChangeEvent getLastEvent() {\n            return this.lastEvent;\n        }",
        "begin_line": 339,
        "end_line": 341,
        "comment": "\n         * Returns the last event.\n         * \n         * @return The last event (possibly <code>null</code>).\n         ",
        "child_ranges": [
            "(line 340,col 13)-(line 340,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.MySeriesChangeListener.clearLastEvent()",
        "snippet": "        public void clearLastEvent() {\n            this.lastEvent = null;\n        }",
        "begin_line": 346,
        "end_line": 348,
        "comment": "\n         * Clears the last event (sets it to <code>null</code>).\n         ",
        "child_ranges": [
            "(line 347,col 13)-(line 347,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.MySeriesChangeListener.seriesChanged(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "        public void seriesChanged(SeriesChangeEvent event) {\n            this.lastEvent = event;\n        }",
        "begin_line": 355,
        "end_line": 357,
        "comment": "\n         * Callback method for series change events.\n         * \n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 356,col 13)-(line 356,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodAnchorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodAnchorTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodAnchorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TimePeriodAnchorTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodAnchorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodAnchorTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodAnchorTests.TimePeriodAnchorTests(java.lang.String)",
        "snippet": "    public TimePeriodAnchorTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodAnchorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodAnchorTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodAnchorTests.testEquals()",
        "snippet": "    public void testEquals() {\n        assertTrue(TimePeriodAnchor.START.equals(TimePeriodAnchor.START));\n        assertTrue(TimePeriodAnchor.MIDDLE.equals(TimePeriodAnchor.MIDDLE));\n        assertTrue(TimePeriodAnchor.END.equals(TimePeriodAnchor.END));\n    }",
        "begin_line": 82,
        "end_line": 86,
        "comment": "\n     * Test the equals() method.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 74)",
            "(line 84,col 9)-(line 84,col 76)",
            "(line 85,col 9)-(line 85,col 70)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodAnchorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodAnchorTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodAnchorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        TimePeriodAnchor a1 = TimePeriodAnchor.START;\n        TimePeriodAnchor a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            a2 = (TimePeriodAnchor) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertTrue(a1 == a2); \n\n    }",
        "begin_line": 91,
        "end_line": 113,
        "comment": "\n     * Serialize an instance, restore it, and check for identity.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 53)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 96,col 9)-(line 110,col 9)",
            "(line 111,col 9)-(line 111,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MovingAverageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MovingAverageTests.java",
        "signature": "org.jfree.data.time.junit.MovingAverageTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MovingAverageTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MovingAverageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MovingAverageTests.java",
        "signature": "org.jfree.data.time.junit.MovingAverageTests.MovingAverageTests(java.lang.String)",
        "snippet": "    public MovingAverageTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MovingAverageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MovingAverageTests.java",
        "signature": "org.jfree.data.time.junit.MovingAverageTests.test1()",
        "snippet": "    public void test1() {\n        TimeSeries source = createDailyTimeSeries1();\n        TimeSeries maverage = MovingAverage.createMovingAverage(\n            source, \"Moving Average\", 3, 3\n        );\n        \n        // the moving average series has 7 items, the first three \n        // days (11, 12, 13 August are skipped)\n        assertEquals(7, maverage.getItemCount());\n        double value = maverage.getValue(0).doubleValue();\n        assertEquals(14.1, value, EPSILON);\n        value = maverage.getValue(1).doubleValue();\n        assertEquals(13.4, value, EPSILON);\n        value = maverage.getValue(2).doubleValue();\n        assertEquals(14.433333333333, value, EPSILON);\n        value = maverage.getValue(3).doubleValue();\n        assertEquals(14.933333333333, value, EPSILON);\n        value = maverage.getValue(4).doubleValue();\n        assertEquals(19.8, value, EPSILON);\n        value = maverage.getValue(5).doubleValue();\n        assertEquals(15.25, value, EPSILON);\n        value = maverage.getValue(6).doubleValue();\n        assertEquals(12.5, value, EPSILON);\n    }",
        "begin_line": 82,
        "end_line": 105,
        "comment": "\n     * A test for the values calculated from a time series.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 53)",
            "(line 84,col 9)-(line 86,col 10)",
            "(line 90,col 9)-(line 90,col 49)",
            "(line 91,col 9)-(line 91,col 58)",
            "(line 92,col 9)-(line 92,col 43)",
            "(line 93,col 9)-(line 93,col 51)",
            "(line 94,col 9)-(line 94,col 43)",
            "(line 95,col 9)-(line 95,col 51)",
            "(line 96,col 9)-(line 96,col 54)",
            "(line 97,col 9)-(line 97,col 51)",
            "(line 98,col 9)-(line 98,col 54)",
            "(line 99,col 9)-(line 99,col 51)",
            "(line 100,col 9)-(line 100,col 43)",
            "(line 101,col 9)-(line 101,col 51)",
            "(line 102,col 9)-(line 102,col 44)",
            "(line 103,col 9)-(line 103,col 51)",
            "(line 104,col 9)-(line 104,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MovingAverageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MovingAverageTests.java",
        "signature": "org.jfree.data.time.junit.MovingAverageTests.createDailyTimeSeries1()",
        "snippet": "    private TimeSeries createDailyTimeSeries1() {\n        \n        TimeSeries series = new TimeSeries(\"Series 1\", Day.class);\n        series.add(new Day(11, MonthConstants.AUGUST, 2003), 11.2);\n        series.add(new Day(13, MonthConstants.AUGUST, 2003), 13.8);\n        series.add(new Day(17, MonthConstants.AUGUST, 2003), 14.1);\n        series.add(new Day(18, MonthConstants.AUGUST, 2003), 12.7);\n        series.add(new Day(19, MonthConstants.AUGUST, 2003), 16.5);\n        series.add(new Day(20, MonthConstants.AUGUST, 2003), 15.6);\n        series.add(new Day(25, MonthConstants.AUGUST, 2003), 19.8);\n        series.add(new Day(27, MonthConstants.AUGUST, 2003), 10.7);\n        series.add(new Day(28, MonthConstants.AUGUST, 2003), 14.3);\n        return series;\n            \n    }",
        "begin_line": 112,
        "end_line": 126,
        "comment": "\n     * Creates a sample series.\n     * \n     * @return A sample series.\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 66)",
            "(line 115,col 9)-(line 115,col 67)",
            "(line 116,col 9)-(line 116,col 67)",
            "(line 117,col 9)-(line 117,col 67)",
            "(line 118,col 9)-(line 118,col 67)",
            "(line 119,col 9)-(line 119,col 67)",
            "(line 120,col 9)-(line 120,col 67)",
            "(line 121,col 9)-(line 121,col 67)",
            "(line 122,col 9)-(line 122,col 67)",
            "(line 123,col 9)-(line 123,col 67)",
            "(line 124,col 9)-(line 124,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SimpleTimePeriodTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SimpleTimePeriodTests.java",
        "signature": "org.jfree.data.time.junit.SimpleTimePeriodTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(SimpleTimePeriodTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SimpleTimePeriodTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SimpleTimePeriodTests.java",
        "signature": "org.jfree.data.time.junit.SimpleTimePeriodTests.SimpleTimePeriodTests(java.lang.String)",
        "snippet": "    public SimpleTimePeriodTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SimpleTimePeriodTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SimpleTimePeriodTests.java",
        "signature": "org.jfree.data.time.junit.SimpleTimePeriodTests.setUp()",
        "snippet": "    protected void setUp() {\n        // no setup\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.SimpleTimePeriodTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SimpleTimePeriodTests.java",
        "signature": "org.jfree.data.time.junit.SimpleTimePeriodTests.testEqualsSelf()",
        "snippet": "    public void testEqualsSelf() {\n        SimpleTimePeriod p = new SimpleTimePeriod(\n            new Date(1000L), new Date(1001L)\n        );\n        assertTrue(p.equals(p));\n    }",
        "begin_line": 93,
        "end_line": 98,
        "comment": "\n     * Check that an instance is equal to itself.\n     *\n     * SourceForge Bug ID: 558850.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 96,col 10)",
            "(line 97,col 9)-(line 97,col 32)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SimpleTimePeriodTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SimpleTimePeriodTests.java",
        "signature": "org.jfree.data.time.junit.SimpleTimePeriodTests.testEquals()",
        "snippet": "    public void testEquals() {\n        SimpleTimePeriod p1 = new SimpleTimePeriod(\n            new Date(1000L), new Date(1004L)\n        );\n        SimpleTimePeriod p2 = new SimpleTimePeriod(\n            new Date(1000L), new Date(1004L)\n        );\n        assertTrue(p1.equals(p2));\n        assertTrue(p2.equals(p1));\n        \n        p1 = new SimpleTimePeriod(new Date(1002L), new Date(1004L));\n        assertFalse(p1.equals(p2));\n        p2 = new SimpleTimePeriod(new Date(1002L), new Date(1004L));\n        assertTrue(p1.equals(p2));\n        \n        p1 = new SimpleTimePeriod(new Date(1002L), new Date(1003L));\n        assertFalse(p1.equals(p2));\n        p2 = new SimpleTimePeriod(new Date(1002L), new Date(1003L));\n        assertTrue(p1.equals(p2));   \n    }",
        "begin_line": 103,
        "end_line": 122,
        "comment": "\n     * Test the equals() method.\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 106,col 10)",
            "(line 107,col 9)-(line 109,col 10)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 113,col 9)-(line 113,col 68)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 68)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 118,col 9)-(line 118,col 68)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 120,col 68)",
            "(line 121,col 9)-(line 121,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SimpleTimePeriodTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SimpleTimePeriodTests.java",
        "signature": "org.jfree.data.time.junit.SimpleTimePeriodTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        SimpleTimePeriod p1 = new SimpleTimePeriod(\n            new Date(1000L), new Date(1001L)\n        );\n        SimpleTimePeriod p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            p2 = (SimpleTimePeriod) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(p1, p2);\n    }",
        "begin_line": 127,
        "end_line": 147,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 130,col 10)",
            "(line 131,col 9)-(line 131,col 35)",
            "(line 132,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 146,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SimpleTimePeriodTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SimpleTimePeriodTests.java",
        "signature": "org.jfree.data.time.junit.SimpleTimePeriodTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        SimpleTimePeriod s1 = new SimpleTimePeriod(\n            new Date(10L), new Date(20L)\n        );\n        SimpleTimePeriod s2 = new SimpleTimePeriod(\n            new Date(10L), new Date(20L)\n        );\n        assertTrue(s1.equals(s2));\n        int h1 = s1.hashCode();\n        int h2 = s2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 152,
        "end_line": 163,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 153,col 9)-(line 155,col 10)",
            "(line 156,col 9)-(line 158,col 10)",
            "(line 159,col 9)-(line 159,col 34)",
            "(line 160,col 9)-(line 160,col 31)",
            "(line 161,col 9)-(line 161,col 31)",
            "(line 162,col 9)-(line 162,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SimpleTimePeriodTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SimpleTimePeriodTests.java",
        "signature": "org.jfree.data.time.junit.SimpleTimePeriodTests.testClone()",
        "snippet": "    public void testClone() {\n        SimpleTimePeriod s1 = new SimpleTimePeriod(\n            new Date(10L), new Date(20L)\n        );\n        assertFalse(s1 instanceof Cloneable);\n    }",
        "begin_line": 168,
        "end_line": 173,
        "comment": " \n     * This class is immutable, so it should not implement Cloneable.\n     ",
        "child_ranges": [
            "(line 169,col 9)-(line 171,col 10)",
            "(line 172,col 9)-(line 172,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SimpleTimePeriodTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SimpleTimePeriodTests.java",
        "signature": "org.jfree.data.time.junit.SimpleTimePeriodTests.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        SimpleTimePeriod s1 = new SimpleTimePeriod(\n            new Date(10L), new Date(20L)\n        );\n        SimpleTimePeriod s2 = new SimpleTimePeriod(\n            new Date(10L), new Date(20L)\n        );\n        assertEquals(0, s1.compareTo(s2));\n        \n        s1 = new SimpleTimePeriod(new Date(9L), new Date(21L));\n        s2 = new SimpleTimePeriod(new Date(10L), new Date(20L));\n        assertEquals(-1, s1.compareTo(s2));\n        \n        s1 = new SimpleTimePeriod(new Date(11L), new Date(19L));\n        s2 = new SimpleTimePeriod(new Date(10L), new Date(20L));\n        assertEquals(1, s1.compareTo(s2));\n\n        s1 = new SimpleTimePeriod(new Date(9L), new Date(19L));\n        s2 = new SimpleTimePeriod(new Date(10L), new Date(20L));\n        assertEquals(-1, s1.compareTo(s2));\n    \n        s1 = new SimpleTimePeriod(new Date(11L), new Date(21));\n        s2 = new SimpleTimePeriod(new Date(10L), new Date(20L));\n        assertEquals(1, s1.compareTo(s2));\n\n        s1 = new SimpleTimePeriod(new Date(10L), new Date(18));\n        s2 = new SimpleTimePeriod(new Date(10L), new Date(20L));\n        assertEquals(-1, s1.compareTo(s2));\n\n        s1 = new SimpleTimePeriod(new Date(10L), new Date(22));\n        s2 = new SimpleTimePeriod(new Date(10L), new Date(20L));\n        assertEquals(1, s1.compareTo(s2));\n    }",
        "begin_line": 178,
        "end_line": 210,
        "comment": "\n     * Some checks for the compareTo() method.\n     ",
        "child_ranges": [
            "(line 179,col 9)-(line 181,col 10)",
            "(line 182,col 9)-(line 184,col 10)",
            "(line 185,col 9)-(line 185,col 42)",
            "(line 187,col 9)-(line 187,col 63)",
            "(line 188,col 9)-(line 188,col 64)",
            "(line 189,col 9)-(line 189,col 43)",
            "(line 191,col 9)-(line 191,col 64)",
            "(line 192,col 9)-(line 192,col 64)",
            "(line 193,col 9)-(line 193,col 42)",
            "(line 195,col 9)-(line 195,col 63)",
            "(line 196,col 9)-(line 196,col 64)",
            "(line 197,col 9)-(line 197,col 43)",
            "(line 199,col 9)-(line 199,col 63)",
            "(line 200,col 9)-(line 200,col 64)",
            "(line 201,col 9)-(line 201,col 42)",
            "(line 203,col 9)-(line 203,col 63)",
            "(line 204,col 9)-(line 204,col 64)",
            "(line 205,col 9)-(line 205,col 43)",
            "(line 207,col 9)-(line 207,col 63)",
            "(line 208,col 9)-(line 208,col 64)",
            "(line 209,col 9)-(line 209,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesDataItemTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesDataItemTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TimeSeriesDataItemTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesDataItemTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesDataItemTests.TimeSeriesDataItemTests(java.lang.String)",
        "snippet": "    public TimeSeriesDataItemTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesDataItemTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesDataItemTests.setUp()",
        "snippet": "    protected void setUp() {\n        // no setup\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesDataItemTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesDataItemTests.testEqualsSelf()",
        "snippet": "    public void testEqualsSelf() {\n        TimeSeriesDataItem item = new TimeSeriesDataItem(\n            new Day(23, 9, 2001), 99.7\n        );\n        assertTrue(item.equals(item));\n    }",
        "begin_line": 92,
        "end_line": 97,
        "comment": "\n     * Test that an instance is equal to itself.\n     *\n     * SourceForge Bug ID: 558850.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 95,col 10)",
            "(line 96,col 9)-(line 96,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesDataItemTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesDataItemTests.testEquals()",
        "snippet": "    public void testEquals() {\n        TimeSeriesDataItem item1 = new TimeSeriesDataItem(\n            new Day(23, 9, 2001), 99.7\n        );\n        TimeSeriesDataItem item2 = new TimeSeriesDataItem(\n            new Day(23, 9, 2001), 99.7\n        );\n        assertTrue(item1.equals(item2));\n        assertTrue(item2.equals(item1));\n        \n        item1.setValue(new Integer(5));\n        assertFalse(item1.equals(item2));\n        item2.setValue(new Integer(5));\n        assertTrue(item1.equals(item2));\n    }",
        "begin_line": 102,
        "end_line": 116,
        "comment": "\n     * Test the equals() method.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 105,col 10)",
            "(line 106,col 9)-(line 108,col 10)",
            "(line 109,col 9)-(line 109,col 40)",
            "(line 110,col 9)-(line 110,col 40)",
            "(line 112,col 9)-(line 112,col 39)",
            "(line 113,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 114,col 39)",
            "(line 115,col 9)-(line 115,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesDataItemTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesDataItemTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        TimeSeriesDataItem item1 = new TimeSeriesDataItem(\n            new Day(23, 9, 2001), 99.7\n        );\n        TimeSeriesDataItem item2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(item1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            item2 = (TimeSeriesDataItem) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(item1, item2);\n\n    }",
        "begin_line": 121,
        "end_line": 145,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 125,col 10)",
            "(line 126,col 9)-(line 126,col 40)",
            "(line 128,col 9)-(line 142,col 9)",
            "(line 143,col 9)-(line 143,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TimePeriodValuesCollectionTests.class);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 68)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests.TimePeriodValuesCollectionTests(java.lang.String)",
        "snippet": "    public TimePeriodValuesCollectionTests(String name) {\n        super(name);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests.setUp()",
        "snippet": "    protected void setUp() {\n        // no setup\n    }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests.test1161340()",
        "snippet": "    public void test1161340() {\n        TimePeriodValuesCollection dataset = new TimePeriodValuesCollection();\n        TimePeriodValues v1 = new TimePeriodValues(\"V1\");\n        v1.add(new Day(11, 3, 2005), 1.2);\n        v1.add(new Day(12, 3, 2005), 3.4);\n        dataset.addSeries(v1);\n        assertEquals(1, dataset.getSeriesCount());\n        dataset.removeSeries(v1);\n        assertEquals(0, dataset.getSeriesCount());\n        \n        TimePeriodValues v2 = new TimePeriodValues(\"V2\");\n        v1.add(new Day(5, 3, 2005), 1.2);\n        v1.add(new Day(6, 3, 2005), 3.4);\n        dataset.addSeries(v2);\n        assertEquals(1, dataset.getSeriesCount());\n    }",
        "begin_line": 98,
        "end_line": 113,
        "comment": "\n     * A test for bug report 1161340.  I wasn't able to reproduce the problem\n     * with this test.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 78)",
            "(line 100,col 9)-(line 100,col 57)",
            "(line 101,col 9)-(line 101,col 42)",
            "(line 102,col 9)-(line 102,col 42)",
            "(line 103,col 9)-(line 103,col 30)",
            "(line 104,col 9)-(line 104,col 50)",
            "(line 105,col 9)-(line 105,col 33)",
            "(line 106,col 9)-(line 106,col 50)",
            "(line 108,col 9)-(line 108,col 57)",
            "(line 109,col 9)-(line 109,col 41)",
            "(line 110,col 9)-(line 110,col 41)",
            "(line 111,col 9)-(line 111,col 30)",
            "(line 112,col 9)-(line 112,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        TimePeriodValuesCollection c1 = new TimePeriodValuesCollection();\n        TimePeriodValuesCollection c2 = new TimePeriodValuesCollection();\n        assertTrue(c1.equals(c2));\n        \n        c1.setXPosition(TimePeriodAnchor.END);\n        assertFalse(c1.equals(c2));\n        c2.setXPosition(TimePeriodAnchor.END);\n        assertTrue(c1.equals(c2));\n        \n        TimePeriodValues v1 = new TimePeriodValues(\"Test\");\n        TimePeriodValues v2 = new TimePeriodValues(\"Test\");\n        \n        c1.addSeries(v1);\n        assertFalse(c1.equals(c2));\n        c2.addSeries(v2);\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 118,
        "end_line": 136,
        "comment": "\n     * Tests the equals() method.\n     ",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 73)",
            "(line 121,col 9)-(line 121,col 73)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 124,col 9)-(line 124,col 46)",
            "(line 125,col 9)-(line 125,col 35)",
            "(line 126,col 9)-(line 126,col 46)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 129,col 9)-(line 129,col 59)",
            "(line 130,col 9)-(line 130,col 59)",
            "(line 132,col 9)-(line 132,col 25)",
            "(line 133,col 9)-(line 133,col 35)",
            "(line 134,col 9)-(line 134,col 25)",
            "(line 135,col 9)-(line 135,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        TimePeriodValuesCollection c1 = new TimePeriodValuesCollection();\n        TimePeriodValuesCollection c2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            c2 = (TimePeriodValuesCollection) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n    }",
        "begin_line": 141,
        "end_line": 159,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 73)",
            "(line 143,col 9)-(line 143,col 45)",
            "(line 144,col 9)-(line 157,col 9)",
            "(line 158,col 9)-(line 158,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests.testGetSeries()",
        "snippet": "    public void testGetSeries() {\n        TimePeriodValuesCollection c1 = new TimePeriodValuesCollection();\n        TimePeriodValues s1 = new TimePeriodValues(\"Series 1\");\n        c1.addSeries(s1);\n        assertEquals(\"Series 1\", c1.getSeries(0).getKey());\n        \n        boolean pass = false;\n        try {\n            c1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            c1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 164,
        "end_line": 187,
        "comment": "\n     * Some basic checks for the getSeries() method.\n     ",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 73)",
            "(line 166,col 9)-(line 166,col 63)",
            "(line 167,col 9)-(line 167,col 25)",
            "(line 168,col 9)-(line 168,col 59)",
            "(line 170,col 9)-(line 170,col 29)",
            "(line 171,col 9)-(line 176,col 9)",
            "(line 177,col 9)-(line 177,col 25)",
            "(line 179,col 9)-(line 179,col 21)",
            "(line 180,col 9)-(line 185,col 9)",
            "(line 186,col 9)-(line 186,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests.testGetDomainBoundsWithoutInterval()",
        "snippet": "    public void testGetDomainBoundsWithoutInterval() {\n        // check empty dataset\n        TimePeriodValuesCollection dataset = new TimePeriodValuesCollection();\n        Range r = dataset.getDomainBounds(false);\n        assertNull(r);\n        \n        // check dataset with one time period\n        TimePeriodValues s1 = new TimePeriodValues(\"S1\");\n        s1.add(new SimpleTimePeriod(1000L, 2000L), 1.0);\n        dataset.addSeries(s1);\n        r = dataset.getDomainBounds(false);\n        assertEquals(1500.0, r.getLowerBound(), EPSILON);\n        assertEquals(1500.0, r.getUpperBound(), EPSILON);\n        \n        // check dataset with two time periods\n        s1.add(new SimpleTimePeriod(1500L, 3000L), 2.0);\n        r = dataset.getDomainBounds(false);\n        assertEquals(1500.0, r.getLowerBound(), EPSILON);\n        assertEquals(2250.0, r.getUpperBound(), EPSILON);  \n    }",
        "begin_line": 194,
        "end_line": 213,
        "comment": "\n     * Some checks for the getDomainBounds() method.\n     ",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 78)",
            "(line 197,col 9)-(line 197,col 49)",
            "(line 198,col 9)-(line 198,col 22)",
            "(line 201,col 9)-(line 201,col 57)",
            "(line 202,col 9)-(line 202,col 56)",
            "(line 203,col 9)-(line 203,col 30)",
            "(line 204,col 9)-(line 204,col 43)",
            "(line 205,col 9)-(line 205,col 57)",
            "(line 206,col 9)-(line 206,col 57)",
            "(line 209,col 9)-(line 209,col 56)",
            "(line 210,col 9)-(line 210,col 43)",
            "(line 211,col 9)-(line 211,col 57)",
            "(line 212,col 9)-(line 212,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesCollectionTests.testGetDomainBoundsWithInterval()",
        "snippet": "    public void testGetDomainBoundsWithInterval() {\n        // check empty dataset\n        TimePeriodValuesCollection dataset = new TimePeriodValuesCollection();\n        Range r = dataset.getDomainBounds(true);\n        assertNull(r);\n        \n        // check dataset with one time period\n        TimePeriodValues s1 = new TimePeriodValues(\"S1\");\n        s1.add(new SimpleTimePeriod(1000L, 2000L), 1.0);\n        dataset.addSeries(s1);\n        r = dataset.getDomainBounds(true);\n        assertEquals(1000.0, r.getLowerBound(), EPSILON);\n        assertEquals(2000.0, r.getUpperBound(), EPSILON);\n        \n        // check dataset with two time periods\n        s1.add(new SimpleTimePeriod(1500L, 3000L), 2.0);\n        r = dataset.getDomainBounds(true);\n        assertEquals(1000.0, r.getLowerBound(), EPSILON);\n        assertEquals(3000.0, r.getUpperBound(), EPSILON);  \n    }",
        "begin_line": 220,
        "end_line": 239,
        "comment": "\n     * Some more checks for the getDomainBounds() method.\n     * \n     * @see #testGetDomainBoundsWithoutInterval()\n     ",
        "child_ranges": [
            "(line 222,col 9)-(line 222,col 78)",
            "(line 223,col 9)-(line 223,col 48)",
            "(line 224,col 9)-(line 224,col 22)",
            "(line 227,col 9)-(line 227,col 57)",
            "(line 228,col 9)-(line 228,col 56)",
            "(line 229,col 9)-(line 229,col 30)",
            "(line 230,col 9)-(line 230,col 42)",
            "(line 231,col 9)-(line 231,col 57)",
            "(line 232,col 9)-(line 232,col 57)",
            "(line 235,col 9)-(line 235,col 56)",
            "(line 236,col 9)-(line 236,col 42)",
            "(line 237,col 9)-(line 237,col 57)",
            "(line 238,col 9)-(line 238,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValueTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValueTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValueTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TimePeriodValueTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValueTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValueTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValueTests.TimePeriodValueTests(java.lang.String)",
        "snippet": "    public TimePeriodValueTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValueTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValueTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValueTests.setUp()",
        "snippet": "    protected void setUp() {\n        // no setup\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValueTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValueTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValueTests.testEqualsSelf()",
        "snippet": "    public void testEqualsSelf() {\n        TimePeriodValue tpv = new TimePeriodValue(new Day(), 55.75);\n        assertTrue(tpv.equals(tpv));\n    }",
        "begin_line": 90,
        "end_line": 93,
        "comment": "\n     * Test that an instance is equal to itself.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 68)",
            "(line 92,col 9)-(line 92,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValueTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValueTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValueTests.testEquals()",
        "snippet": "    public void testEquals() {\n        TimePeriodValue tpv1 = new TimePeriodValue(new Day(30, 7, 2003), 55.75);\n        TimePeriodValue tpv2 = new TimePeriodValue(new Day(30, 7, 2003), 55.75);\n        assertTrue(tpv1.equals(tpv2));\n        assertTrue(tpv2.equals(tpv1));\n    }",
        "begin_line": 98,
        "end_line": 103,
        "comment": "\n     * Tests the equals() method.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 80)",
            "(line 100,col 9)-(line 100,col 80)",
            "(line 101,col 9)-(line 101,col 38)",
            "(line 102,col 9)-(line 102,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValueTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValueTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValueTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        TimePeriodValue tpv1 = new TimePeriodValue(new Day(30, 7, 2003), 55.75);\n        TimePeriodValue tpv2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(tpv1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            tpv2 = (TimePeriodValue) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(tpv1, tpv2);\n\n    }",
        "begin_line": 108,
        "end_line": 130,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 80)",
            "(line 111,col 9)-(line 111,col 36)",
            "(line 113,col 9)-(line 127,col 9)",
            "(line 128,col 9)-(line 128,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(YearTests.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.YearTests(java.lang.String)",
        "snippet": "    public YearTests(String name) {\n        super(name);\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.setUp()",
        "snippet": "    protected void setUp() {\n        // no setup\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testEqualsSelf()",
        "snippet": "    public void testEqualsSelf() {\n        Year year = new Year();\n        assertTrue(year.equals(year));\n    }",
        "begin_line": 104,
        "end_line": 107,
        "comment": "\n     * Check that a Year instance is equal to itself.\n     *\n     * SourceForge Bug ID: 558850.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 31)",
            "(line 106,col 9)-(line 106,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testEquals()",
        "snippet": "    public void testEquals() {\n        Year year1 = new Year(2002);\n        Year year2 = new Year(2002);\n        assertTrue(year1.equals(year2));\n    }",
        "begin_line": 112,
        "end_line": 116,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 36)",
            "(line 114,col 9)-(line 114,col 36)",
            "(line 115,col 9)-(line 115,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testDateConstructor1()",
        "snippet": "    public void testDateConstructor1() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"GMT\");\n        Calendar c = new GregorianCalendar(zone);\n        Date d1 = new Date(1009843199999L);\n        Date d2 = new Date(1009843200000L);\n        Year y1 = new Year(d1, zone);\n        Year y2 = new Year(d2, zone);\n\n        assertEquals(2001, y1.getYear());\n        assertEquals(1009843199999L, y1.getLastMillisecond(c));\n\n        assertEquals(2002, y2.getYear());\n        assertEquals(1009843200000L, y2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 122,
        "end_line": 137,
        "comment": "\n     * In GMT, the end of 2001 is java.util.Date(1009843199999L).  Use this to \n     * check the year constructor.\n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 52)",
            "(line 125,col 9)-(line 125,col 49)",
            "(line 126,col 9)-(line 126,col 43)",
            "(line 127,col 9)-(line 127,col 43)",
            "(line 128,col 9)-(line 128,col 37)",
            "(line 129,col 9)-(line 129,col 37)",
            "(line 131,col 9)-(line 131,col 41)",
            "(line 132,col 9)-(line 132,col 63)",
            "(line 134,col 9)-(line 134,col 41)",
            "(line 135,col 9)-(line 135,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testDateConstructor2()",
        "snippet": "    public void testDateConstructor2() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        Year y1 = new Year(new Date(1009871999999L), zone);\n        Year y2 = new Year(new Date(1009872000000L), zone);\n\n        assertEquals(2001, y1.getYear());\n        assertEquals(1009871999999L, y1.getLastMillisecond(c));\n\n        assertEquals(2002, y2.getYear());\n        assertEquals(1009872000000L, y2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 143,
        "end_line": 156,
        "comment": "\n     * In Los Angeles, the end of 2001 is java.util.Date(1009871999999L).  Use \n     * this to check the year constructor.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 68)",
            "(line 146,col 9)-(line 146,col 49)",
            "(line 147,col 9)-(line 147,col 59)",
            "(line 148,col 9)-(line 148,col 59)",
            "(line 150,col 9)-(line 150,col 41)",
            "(line 151,col 9)-(line 151,col 63)",
            "(line 153,col 9)-(line 153,col 41)",
            "(line 154,col 9)-(line 154,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.test1900Previous()",
        "snippet": "    public void test1900Previous() {\n        Year current = new Year(1900);\n        Year previous = (Year) current.previous();\n        assertNull(previous);\n    }",
        "begin_line": 162,
        "end_line": 166,
        "comment": "\n     * Set up a year equal to 1900.  Request the previous year, it should be\n     * null.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 38)",
            "(line 164,col 9)-(line 164,col 50)",
            "(line 165,col 9)-(line 165,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.test1900Next()",
        "snippet": "    public void test1900Next() {\n        Year current = new Year(1900);\n        Year next = (Year) current.next();\n        assertEquals(1901, next.getYear());\n    }",
        "begin_line": 171,
        "end_line": 175,
        "comment": "\n     * Set up a year equal to 1900.  Request the next year, it should be 1901.\n     ",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 38)",
            "(line 173,col 9)-(line 173,col 42)",
            "(line 174,col 9)-(line 174,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.test9999Previous()",
        "snippet": "    public void test9999Previous() {\n        Year current = new Year(9999);\n        Year previous = (Year) current.previous();\n        assertEquals(9998, previous.getYear());\n    }",
        "begin_line": 181,
        "end_line": 185,
        "comment": "\n     * Set up a year equal to 9999.  Request the previous year, it should be \n     * 9998.\n     ",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 38)",
            "(line 183,col 9)-(line 183,col 50)",
            "(line 184,col 9)-(line 184,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.test9999Next()",
        "snippet": "    public void test9999Next() {\n        Year current = new Year(9999);\n        Year next = (Year) current.next();\n        assertNull(next);\n    }",
        "begin_line": 190,
        "end_line": 194,
        "comment": "\n     * Set up a year equal to 9999.  Request the next year, it should be null.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 38)",
            "(line 192,col 9)-(line 192,col 42)",
            "(line 193,col 9)-(line 193,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testParseYear()",
        "snippet": "    public void testParseYear() {\n\n        Year year = null;\n\n        // test 1...\n        try {\n            year = Year.parseYear(\"2000\");\n        }\n        catch (TimePeriodFormatException e) {\n            year = new Year(1900);\n        }\n        assertEquals(2000, year.getYear());\n\n        // test 2...\n        try {\n            year = Year.parseYear(\" 2001 \");\n        }\n        catch (TimePeriodFormatException e) {\n            year = new Year(1900);\n        }\n        assertEquals(2001, year.getYear());\n\n        // test 3...\n        try {\n            year = Year.parseYear(\"99\");\n        }\n        catch (TimePeriodFormatException e) {\n            year = new Year(1900);\n        }\n        assertEquals(1900, year.getYear());\n\n    }",
        "begin_line": 199,
        "end_line": 230,
        "comment": "\n     * Tests the year string parser.\n     ",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 25)",
            "(line 204,col 9)-(line 209,col 9)",
            "(line 210,col 9)-(line 210,col 43)",
            "(line 213,col 9)-(line 218,col 9)",
            "(line 219,col 9)-(line 219,col 43)",
            "(line 222,col 9)-(line 227,col 9)",
            "(line 228,col 9)-(line 228,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        Year y1 = new Year(1999);\n        Year y2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(y1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            y2 = (Year) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(y1, y2);\n\n    }",
        "begin_line": 235,
        "end_line": 257,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 33)",
            "(line 238,col 9)-(line 238,col 23)",
            "(line 240,col 9)-(line 254,col 9)",
            "(line 255,col 9)-(line 255,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testNotCloneable()",
        "snippet": "    public void testNotCloneable() {\n        Year y = new Year(1999);\n        assertFalse(y instanceof Cloneable);\n    }",
        "begin_line": 262,
        "end_line": 265,
        "comment": "\n     * The {@link Year} class is immutable, so should not be {@link Cloneable}.\n     ",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 32)",
            "(line 264,col 9)-(line 264,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        Year y1 = new Year(1988);\n        Year y2 = new Year(1988);\n        assertTrue(y1.equals(y2));\n        int h1 = y1.hashCode();\n        int h2 = y2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 270,
        "end_line": 277,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 33)",
            "(line 272,col 9)-(line 272,col 33)",
            "(line 273,col 9)-(line 273,col 34)",
            "(line 274,col 9)-(line 274,col 31)",
            "(line 275,col 9)-(line 275,col 31)",
            "(line 276,col 9)-(line 276,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testGetFirstMillisecond()",
        "snippet": "    public void testGetFirstMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Year y = new Year(1970);\n        // TODO: Check this result...\n        assertEquals(-3600000L, y.getFirstMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 282,
        "end_line": 292,
        "comment": "\n     * Some checks for the getFirstMillisecond() method.\n     ",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 43)",
            "(line 284,col 9)-(line 284,col 37)",
            "(line 285,col 9)-(line 285,col 51)",
            "(line 286,col 9)-(line 286,col 67)",
            "(line 287,col 9)-(line 287,col 32)",
            "(line 289,col 9)-(line 289,col 57)",
            "(line 290,col 9)-(line 290,col 33)",
            "(line 291,col 9)-(line 291,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testGetFirstMillisecondWithTimeZone()",
        "snippet": "    public void testGetFirstMillisecondWithTimeZone() {\n        Year y = new Year(1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-631123200000L, y.getFirstMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            y.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 297,
        "end_line": 312,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 32)",
            "(line 299,col 9)-(line 299,col 68)",
            "(line 300,col 9)-(line 300,col 49)",
            "(line 301,col 9)-(line 301,col 63)",
            "(line 304,col 9)-(line 304,col 29)",
            "(line 305,col 9)-(line 310,col 9)",
            "(line 311,col 9)-(line 311,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testGetFirstMillisecondWithCalendar()",
        "snippet": "    public void testGetFirstMillisecondWithCalendar() {\n        Year y = new Year(2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(978307200000L, y.getFirstMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            y.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }    ",
        "begin_line": 317,
        "end_line": 332,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 318,col 9)-(line 318,col 32)",
            "(line 319,col 9)-(line 319,col 75)",
            "(line 320,col 9)-(line 320,col 71)",
            "(line 321,col 9)-(line 321,col 69)",
            "(line 324,col 9)-(line 324,col 29)",
            "(line 325,col 9)-(line 330,col 9)",
            "(line 331,col 9)-(line 331,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testGetLastMillisecond()",
        "snippet": "    public void testGetLastMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Year y = new Year(1970);\n        // TODO: Check this result...\n        assertEquals(31532399999L, y.getLastMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 337,
        "end_line": 347,
        "comment": "\n     * Some checks for the getLastMillisecond() method.\n     ",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 43)",
            "(line 339,col 9)-(line 339,col 37)",
            "(line 340,col 9)-(line 340,col 51)",
            "(line 341,col 9)-(line 341,col 67)",
            "(line 342,col 9)-(line 342,col 32)",
            "(line 344,col 9)-(line 344,col 59)",
            "(line 345,col 9)-(line 345,col 33)",
            "(line 346,col 9)-(line 346,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testGetLastMillisecondWithTimeZone()",
        "snippet": "    public void testGetLastMillisecondWithTimeZone() {\n        Year y = new Year(1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-599587200001L, y.getLastMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            y.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 352,
        "end_line": 367,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 353,col 9)-(line 353,col 32)",
            "(line 354,col 9)-(line 354,col 68)",
            "(line 355,col 9)-(line 355,col 49)",
            "(line 356,col 9)-(line 356,col 62)",
            "(line 359,col 9)-(line 359,col 29)",
            "(line 360,col 9)-(line 365,col 9)",
            "(line 366,col 9)-(line 366,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testGetLastMillisecondWithCalendar()",
        "snippet": "    public void testGetLastMillisecondWithCalendar() {\n        Year y = new Year(2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(1009843199999L, y.getLastMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            y.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    } ",
        "begin_line": 372,
        "end_line": 387,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 373,col 9)-(line 373,col 32)",
            "(line 374,col 9)-(line 374,col 75)",
            "(line 375,col 9)-(line 375,col 71)",
            "(line 376,col 9)-(line 376,col 69)",
            "(line 379,col 9)-(line 379,col 29)",
            "(line 380,col 9)-(line 385,col 9)",
            "(line 386,col 9)-(line 386,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testGetSerialIndex()",
        "snippet": "    public void testGetSerialIndex() {\n        Year y = new Year(2000);\n        assertEquals(2000L, y.getSerialIndex());\n    }",
        "begin_line": 392,
        "end_line": 395,
        "comment": "\n     * Some checks for the getSerialIndex() method.\n     ",
        "child_ranges": [
            "(line 393,col 9)-(line 393,col 32)",
            "(line 394,col 9)-(line 394,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testNext()",
        "snippet": "    public void testNext() {\n        Year y = new Year(2000);\n        y = (Year) y.next();\n        assertEquals(2001, y.getYear());\n        y = new Year(9999);\n        assertNull(y.next());\n    }",
        "begin_line": 400,
        "end_line": 406,
        "comment": "\n     * Some checks for the testNext() method.\n     ",
        "child_ranges": [
            "(line 401,col 9)-(line 401,col 32)",
            "(line 402,col 9)-(line 402,col 28)",
            "(line 403,col 9)-(line 403,col 40)",
            "(line 404,col 9)-(line 404,col 27)",
            "(line 405,col 9)-(line 405,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testGetStart()",
        "snippet": "    public void testGetStart() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JANUARY, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Year y = new Year(2006);\n        assertEquals(cal.getTime(), y.getStart());\n        Locale.setDefault(saved);        \n    }",
        "begin_line": 411,
        "end_line": 420,
        "comment": "\n     * Some checks for the getStart() method.\n     ",
        "child_ranges": [
            "(line 412,col 9)-(line 412,col 43)",
            "(line 413,col 9)-(line 413,col 40)",
            "(line 414,col 9)-(line 414,col 58)",
            "(line 415,col 9)-(line 415,col 52)",
            "(line 416,col 9)-(line 416,col 41)",
            "(line 417,col 9)-(line 417,col 32)",
            "(line 418,col 9)-(line 418,col 50)",
            "(line 419,col 9)-(line 419,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.YearTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/YearTests.java",
        "signature": "org.jfree.data.time.junit.YearTests.testGetEnd()",
        "snippet": "    public void testGetEnd() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.DECEMBER, 31, 23, 59, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        Year y = new Year(2006);\n        assertEquals(cal.getTime(), y.getEnd());\n        Locale.setDefault(saved);                \n    }",
        "begin_line": 425,
        "end_line": 434,
        "comment": "\n     * Some checks for the getEnd() method.\n     ",
        "child_ranges": [
            "(line 426,col 9)-(line 426,col 43)",
            "(line 427,col 9)-(line 427,col 40)",
            "(line 428,col 9)-(line 428,col 58)",
            "(line 429,col 9)-(line 429,col 57)",
            "(line 430,col 9)-(line 430,col 43)",
            "(line 431,col 9)-(line 431,col 32)",
            "(line 432,col 9)-(line 432,col 48)",
            "(line 433,col 9)-(line 433,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(HourTests.class);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.HourTests(java.lang.String)",
        "snippet": "    public HourTests(String name) {\n        super(name);\n    }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.setUp()",
        "snippet": "    protected void setUp() {\n        // no setup\n    }",
        "begin_line": 96,
        "end_line": 98,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testEqualsSelf()",
        "snippet": "    public void testEqualsSelf() {\n        Hour hour = new Hour();\n        assertTrue(hour.equals(hour));\n    }",
        "begin_line": 105,
        "end_line": 108,
        "comment": "\n     * Check that an Hour instance is equal to itself.\n     *\n     * SourceForge Bug ID: 558850.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 31)",
            "(line 107,col 9)-(line 107,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testEquals()",
        "snippet": "    public void testEquals() {\n        Hour hour1 = new Hour(15, new Day(29, MonthConstants.MARCH, 2002));\n        Hour hour2 = new Hour(15, new Day(29, MonthConstants.MARCH, 2002));\n        assertTrue(hour1.equals(hour2));\n    }",
        "begin_line": 113,
        "end_line": 117,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 75)",
            "(line 115,col 9)-(line 115,col 75)",
            "(line 116,col 9)-(line 116,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testDateConstructor1()",
        "snippet": "    public void testDateConstructor1() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"GMT\");\n        Calendar c = new GregorianCalendar(zone);\n        Hour h1 = new Hour(new Date(1014307199999L), zone);\n        Hour h2 = new Hour(new Date(1014307200000L), zone);\n\n        assertEquals(15, h1.getHour());\n        assertEquals(1014307199999L, h1.getLastMillisecond(c));\n\n        assertEquals(16, h2.getHour());\n        assertEquals(1014307200000L, h2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 123,
        "end_line": 136,
        "comment": "\n     * In GMT, the 4pm on 21 Mar 2002 is java.util.Date(1,014,307,200,000L).  \n     * Use this to check the hour constructor.\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 52)",
            "(line 126,col 9)-(line 126,col 49)",
            "(line 127,col 9)-(line 127,col 59)",
            "(line 128,col 9)-(line 128,col 59)",
            "(line 130,col 9)-(line 130,col 39)",
            "(line 131,col 9)-(line 131,col 63)",
            "(line 133,col 9)-(line 133,col 39)",
            "(line 134,col 9)-(line 134,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testDateConstructor2()",
        "snippet": "    public void testDateConstructor2() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"Australia/Sydney\");\n        Calendar c = new GregorianCalendar(zone);\n        Hour h1 = new Hour(new Date(1014267599999L), zone);\n        Hour h2 = new Hour (new Date(1014267600000L), zone);\n\n        assertEquals(15, h1.getHour());\n        assertEquals(1014267599999L, h1.getLastMillisecond(c));\n\n        assertEquals(16, h2.getHour());\n        assertEquals(1014267600000L, h2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 142,
        "end_line": 155,
        "comment": "\n     * In Sydney, the 4pm on 21 Mar 2002 is java.util.Date(1,014,267,600,000L).\n     * Use this to check the hour constructor.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 65)",
            "(line 145,col 9)-(line 145,col 49)",
            "(line 146,col 9)-(line 146,col 59)",
            "(line 147,col 9)-(line 147,col 60)",
            "(line 149,col 9)-(line 149,col 39)",
            "(line 150,col 9)-(line 150,col 63)",
            "(line 152,col 9)-(line 152,col 39)",
            "(line 153,col 9)-(line 153,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testFirstHourPrevious()",
        "snippet": "    public void testFirstHourPrevious() {\n\n        Hour first = new Hour(0, new Day(1, MonthConstants.JANUARY, 1900));\n        Hour previous = (Hour) first.previous();\n        assertNull(previous);\n\n    }",
        "begin_line": 161,
        "end_line": 167,
        "comment": "\n     * Set up an hour equal to hour zero, 1 January 1900.  Request the \n     * previous hour, it should be null.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 75)",
            "(line 164,col 9)-(line 164,col 48)",
            "(line 165,col 9)-(line 165,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testFirstHourNext()",
        "snippet": "    public void testFirstHourNext() {\n        Hour first = new Hour(0, new Day(1, MonthConstants.JANUARY, 1900));\n        Hour next = (Hour) first.next();\n        assertEquals(1, next.getHour());\n        assertEquals(1900, next.getYear());\n    }",
        "begin_line": 173,
        "end_line": 178,
        "comment": "\n     * Set up an hour equal to hour zero, 1 January 1900.  Request the next \n     * hour, it should be null.\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 75)",
            "(line 175,col 9)-(line 175,col 40)",
            "(line 176,col 9)-(line 176,col 40)",
            "(line 177,col 9)-(line 177,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testLastHourPrevious()",
        "snippet": "    public void testLastHourPrevious() {\n\n        Hour last = new Hour(23, new Day(31, MonthConstants.DECEMBER, 9999));\n        Hour previous = (Hour) last.previous();\n        assertEquals(22, previous.getHour());\n        assertEquals(9999, previous.getYear());\n\n    }",
        "begin_line": 184,
        "end_line": 191,
        "comment": "\n     * Set up an hour equal to hour zero, 1 January 1900.  Request the previous\n     * hour, it should be null.\n     ",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 77)",
            "(line 187,col 9)-(line 187,col 47)",
            "(line 188,col 9)-(line 188,col 45)",
            "(line 189,col 9)-(line 189,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testLastHourNext()",
        "snippet": "    public void testLastHourNext() {\n\n        Hour last = new Hour(23, new Day(31, MonthConstants.DECEMBER, 9999));\n        Hour next = (Hour) last.next();\n        assertNull(next);\n\n    }",
        "begin_line": 197,
        "end_line": 203,
        "comment": "\n     * Set up an hour equal to hour zero, 1 January 1900.  Request the next \n     * hour, it should be null.\n     ",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 77)",
            "(line 200,col 9)-(line 200,col 39)",
            "(line 201,col 9)-(line 201,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testParseHour()",
        "snippet": "    public void testParseHour() {\n\n        // test 1...\n        Hour h = Hour.parseHour(\"2002-01-29 13\");\n        assertEquals(13, h.getHour());\n\n    }",
        "begin_line": 208,
        "end_line": 214,
        "comment": "\n     * Problem for date parsing.\n     ",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 49)",
            "(line 212,col 9)-(line 212,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        Hour h1 = new Hour();\n        Hour h2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(h1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            h2 = (Hour) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(h1, h2);\n\n    }",
        "begin_line": 219,
        "end_line": 240,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 29)",
            "(line 221,col 9)-(line 221,col 23)",
            "(line 223,col 9)-(line 237,col 9)",
            "(line 238,col 9)-(line 238,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        Hour h1 = new Hour(7, 9, 10, 1999);\n        Hour h2 = new Hour(7, 9, 10, 1999);\n        assertTrue(h1.equals(h2));\n        int hash1 = h1.hashCode();\n        int hash2 = h2.hashCode();\n        assertEquals(hash1, hash2);\n    }",
        "begin_line": 245,
        "end_line": 252,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 43)",
            "(line 247,col 9)-(line 247,col 43)",
            "(line 248,col 9)-(line 248,col 34)",
            "(line 249,col 9)-(line 249,col 34)",
            "(line 250,col 9)-(line 250,col 34)",
            "(line 251,col 9)-(line 251,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testNotCloneable()",
        "snippet": "    public void testNotCloneable() {\n        Hour h = new Hour(7, 9, 10, 1999);\n        assertFalse(h instanceof Cloneable);\n    }",
        "begin_line": 257,
        "end_line": 260,
        "comment": "\n     * The {@link Hour} class is immutable, so should not be {@link Cloneable}.\n     ",
        "child_ranges": [
            "(line 258,col 9)-(line 258,col 42)",
            "(line 259,col 9)-(line 259,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testGetFirstMillisecond()",
        "snippet": "    public void testGetFirstMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Hour h = new Hour(15, 1, 4, 2006);\n        assertEquals(1143900000000L, h.getFirstMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 265,
        "end_line": 274,
        "comment": "\n     * Some checks for the getFirstMillisecond() method.\n     ",
        "child_ranges": [
            "(line 266,col 9)-(line 266,col 43)",
            "(line 267,col 9)-(line 267,col 37)",
            "(line 268,col 9)-(line 268,col 51)",
            "(line 269,col 9)-(line 269,col 67)",
            "(line 270,col 9)-(line 270,col 42)",
            "(line 271,col 9)-(line 271,col 62)",
            "(line 272,col 9)-(line 272,col 33)",
            "(line 273,col 9)-(line 273,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testGetFirstMillisecondWithTimeZone()",
        "snippet": "    public void testGetFirstMillisecondWithTimeZone() {\n        Hour h = new Hour(15, 1, 4, 1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-623293200000L, h.getFirstMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            h.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 279,
        "end_line": 294,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 42)",
            "(line 281,col 9)-(line 281,col 68)",
            "(line 282,col 9)-(line 282,col 49)",
            "(line 283,col 9)-(line 283,col 63)",
            "(line 286,col 9)-(line 286,col 29)",
            "(line 287,col 9)-(line 292,col 9)",
            "(line 293,col 9)-(line 293,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testGetFirstMillisecondWithCalendar()",
        "snippet": "    public void testGetFirstMillisecondWithCalendar() {\n        Hour h = new Hour(2, 15, 4, 2000);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(955764000000L, h.getFirstMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            h.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }    ",
        "begin_line": 299,
        "end_line": 314,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 42)",
            "(line 301,col 9)-(line 301,col 75)",
            "(line 302,col 9)-(line 302,col 71)",
            "(line 303,col 9)-(line 303,col 69)",
            "(line 306,col 9)-(line 306,col 29)",
            "(line 307,col 9)-(line 312,col 9)",
            "(line 313,col 9)-(line 313,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testGetLastMillisecond()",
        "snippet": "    public void testGetLastMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Hour h = new Hour(1, 1, 1, 1970);\n        assertEquals(3599999L, h.getLastMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 319,
        "end_line": 328,
        "comment": "\n     * Some checks for the getLastMillisecond() method.\n     ",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 43)",
            "(line 321,col 9)-(line 321,col 37)",
            "(line 322,col 9)-(line 322,col 51)",
            "(line 323,col 9)-(line 323,col 67)",
            "(line 324,col 9)-(line 324,col 41)",
            "(line 325,col 9)-(line 325,col 55)",
            "(line 326,col 9)-(line 326,col 33)",
            "(line 327,col 9)-(line 327,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testGetLastMillisecondWithTimeZone()",
        "snippet": "    public void testGetLastMillisecondWithTimeZone() {\n        Hour h = new Hour(2, 7, 7, 1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-614959200001L, h.getLastMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            h.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 333,
        "end_line": 348,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 334,col 9)-(line 334,col 41)",
            "(line 335,col 9)-(line 335,col 68)",
            "(line 336,col 9)-(line 336,col 49)",
            "(line 337,col 9)-(line 337,col 62)",
            "(line 340,col 9)-(line 340,col 29)",
            "(line 341,col 9)-(line 346,col 9)",
            "(line 347,col 9)-(line 347,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testGetLastMillisecondWithCalendar()",
        "snippet": "    public void testGetLastMillisecondWithCalendar() {\n        Hour h = new Hour(21, 21, 4, 2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(987890399999L, h.getLastMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            h.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    } ",
        "begin_line": 353,
        "end_line": 368,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 43)",
            "(line 355,col 9)-(line 355,col 75)",
            "(line 356,col 9)-(line 356,col 71)",
            "(line 357,col 9)-(line 357,col 68)",
            "(line 360,col 9)-(line 360,col 29)",
            "(line 361,col 9)-(line 366,col 9)",
            "(line 367,col 9)-(line 367,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testGetSerialIndex()",
        "snippet": "    public void testGetSerialIndex() {\n        Hour h = new Hour(1, 1, 1, 2000);\n        assertEquals(876625L, h.getSerialIndex());\n        h = new Hour(1, 1, 1, 1900);\n        assertEquals(49L, h.getSerialIndex());\n    }",
        "begin_line": 373,
        "end_line": 378,
        "comment": "\n     * Some checks for the getSerialIndex() method.\n     ",
        "child_ranges": [
            "(line 374,col 9)-(line 374,col 41)",
            "(line 375,col 9)-(line 375,col 50)",
            "(line 376,col 9)-(line 376,col 36)",
            "(line 377,col 9)-(line 377,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testNext()",
        "snippet": "    public void testNext() {\n        Hour h = new Hour(1, 12, 12, 2000);\n        h = (Hour) h.next();\n        assertEquals(2000, h.getYear());\n        assertEquals(12, h.getMonth());\n        assertEquals(12, h.getDayOfMonth());\n        assertEquals(2, h.getHour());\n        h = new Hour(23, 31, 12, 9999);\n        assertNull(h.next());\n    }",
        "begin_line": 383,
        "end_line": 392,
        "comment": "\n     * Some checks for the testNext() method.\n     ",
        "child_ranges": [
            "(line 384,col 9)-(line 384,col 43)",
            "(line 385,col 9)-(line 385,col 28)",
            "(line 386,col 9)-(line 386,col 40)",
            "(line 387,col 9)-(line 387,col 39)",
            "(line 388,col 9)-(line 388,col 44)",
            "(line 389,col 9)-(line 389,col 37)",
            "(line 390,col 9)-(line 390,col 39)",
            "(line 391,col 9)-(line 391,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testGetStart()",
        "snippet": "    public void testGetStart() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JANUARY, 16, 3, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Hour h = new Hour(3, 16, 1, 2006);\n        assertEquals(cal.getTime(), h.getStart());\n        Locale.setDefault(saved);        \n    }",
        "begin_line": 397,
        "end_line": 406,
        "comment": "\n     * Some checks for the getStart() method.\n     ",
        "child_ranges": [
            "(line 398,col 9)-(line 398,col 43)",
            "(line 399,col 9)-(line 399,col 40)",
            "(line 400,col 9)-(line 400,col 58)",
            "(line 401,col 9)-(line 401,col 53)",
            "(line 402,col 9)-(line 402,col 41)",
            "(line 403,col 9)-(line 403,col 42)",
            "(line 404,col 9)-(line 404,col 50)",
            "(line 405,col 9)-(line 405,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.HourTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/HourTests.java",
        "signature": "org.jfree.data.time.junit.HourTests.testGetEnd()",
        "snippet": "    public void testGetEnd() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JANUARY, 8, 1, 59, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        Hour h = new Hour(1, 8, 1, 2006);\n        assertEquals(cal.getTime(), h.getEnd());\n        Locale.setDefault(saved);                \n    }",
        "begin_line": 411,
        "end_line": 420,
        "comment": "\n     * Some checks for the getEnd() method.\n     ",
        "child_ranges": [
            "(line 412,col 9)-(line 412,col 43)",
            "(line 413,col 9)-(line 413,col 40)",
            "(line 414,col 9)-(line 414,col 58)",
            "(line 415,col 9)-(line 415,col 54)",
            "(line 416,col 9)-(line 416,col 43)",
            "(line 417,col 9)-(line 417,col 41)",
            "(line 418,col 9)-(line 418,col 48)",
            "(line 419,col 9)-(line 419,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.FixedMillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/FixedMillisecondTests.java",
        "signature": "org.jfree.data.time.junit.FixedMillisecondTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(FixedMillisecondTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.FixedMillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/FixedMillisecondTests.java",
        "signature": "org.jfree.data.time.junit.FixedMillisecondTests.FixedMillisecondTests(java.lang.String)",
        "snippet": "    public FixedMillisecondTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.FixedMillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/FixedMillisecondTests.java",
        "signature": "org.jfree.data.time.junit.FixedMillisecondTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        FixedMillisecond m1 = new FixedMillisecond();\n        FixedMillisecond m2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            m2 = (FixedMillisecond) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(m1, m2);\n\n    }",
        "begin_line": 84,
        "end_line": 106,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 53)",
            "(line 87,col 9)-(line 87,col 35)",
            "(line 89,col 9)-(line 103,col 9)",
            "(line 104,col 9)-(line 104,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.FixedMillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/FixedMillisecondTests.java",
        "signature": "org.jfree.data.time.junit.FixedMillisecondTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        FixedMillisecond m1 = new FixedMillisecond(500000L);\n        FixedMillisecond m2 = new FixedMillisecond(500000L);\n        assertTrue(m1.equals(m2));\n        int h1 = m1.hashCode();\n        int h2 = m2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 111,
        "end_line": 118,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 60)",
            "(line 113,col 9)-(line 113,col 60)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 115,col 9)-(line 115,col 31)",
            "(line 116,col 9)-(line 116,col 31)",
            "(line 117,col 9)-(line 117,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.FixedMillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/FixedMillisecondTests.java",
        "signature": "org.jfree.data.time.junit.FixedMillisecondTests.testNotCloneable()",
        "snippet": "    public void testNotCloneable() {\n        FixedMillisecond m = new FixedMillisecond(500000L);\n        assertFalse(m instanceof Cloneable);\n    }",
        "begin_line": 124,
        "end_line": 127,
        "comment": "\n     * The {@link FixedMillisecond} class is immutable, so should not be \n     * {@link Cloneable}.\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 59)",
            "(line 126,col 9)-(line 126,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeTableXYDatasetTests.java",
        "signature": "org.jfree.data.time.junit.TimeTableXYDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TimeTableXYDatasetTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeTableXYDatasetTests.java",
        "signature": "org.jfree.data.time.junit.TimeTableXYDatasetTests.TimeTableXYDatasetTests(java.lang.String)",
        "snippet": "    public TimeTableXYDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeTableXYDatasetTests.java",
        "signature": "org.jfree.data.time.junit.TimeTableXYDatasetTests.testStandard()",
        "snippet": "    public void testStandard() {\n        TimeTableXYDataset d = new TimeTableXYDataset();\n        d.add(new Year(1999), 1.0, \"Series 1\");\n        assertEquals(d.getItemCount(), 1);\n        assertEquals(d.getSeriesCount(), 1);\n        d.add(new Year(2000), 2.0, \"Series 2\");\n        assertEquals(d.getItemCount(), 2);\n        assertEquals(d.getSeriesCount(), 2);\n        assertEquals(d.getYValue(0, 0), 1.0, DELTA);\n        assertTrue(Double.isNaN(d.getYValue(0, 1)));\n        assertTrue(Double.isNaN(d.getYValue(1, 0)));\n        assertEquals(d.getYValue(1, 1), 2.0, DELTA);\n    }",
        "begin_line": 87,
        "end_line": 99,
        "comment": "\n     * Some checks for a simple dataset.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 56)",
            "(line 89,col 9)-(line 89,col 47)",
            "(line 90,col 9)-(line 90,col 42)",
            "(line 91,col 9)-(line 91,col 44)",
            "(line 92,col 9)-(line 92,col 47)",
            "(line 93,col 9)-(line 93,col 42)",
            "(line 94,col 9)-(line 94,col 44)",
            "(line 95,col 9)-(line 95,col 52)",
            "(line 96,col 9)-(line 96,col 52)",
            "(line 97,col 9)-(line 97,col 52)",
            "(line 98,col 9)-(line 98,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeTableXYDatasetTests.java",
        "signature": "org.jfree.data.time.junit.TimeTableXYDatasetTests.testGetTimePeriod()",
        "snippet": "    public void testGetTimePeriod()  {\n        TimeTableXYDataset d = new TimeTableXYDataset();\n        d.add(new Year(1999), 1.0, \"Series 1\");\n        d.add(new Year(1998), 2.0, \"Series 1\");\n        d.add(new Year(1996), 3.0, \"Series 1\");\n        assertEquals(d.getTimePeriod(0), new Year(1996));\n        assertEquals(d.getTimePeriod(1), new Year(1998));\n        assertEquals(d.getTimePeriod(2), new Year(1999));\n    }",
        "begin_line": 104,
        "end_line": 112,
        "comment": "\n     * Some checks for the getTimePeriod() method.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 56)",
            "(line 106,col 9)-(line 106,col 47)",
            "(line 107,col 9)-(line 107,col 47)",
            "(line 108,col 9)-(line 108,col 47)",
            "(line 109,col 9)-(line 109,col 57)",
            "(line 110,col 9)-(line 110,col 57)",
            "(line 111,col 9)-(line 111,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeTableXYDatasetTests.java",
        "signature": "org.jfree.data.time.junit.TimeTableXYDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        TimeTableXYDataset d1 = new TimeTableXYDataset();\n        TimeTableXYDataset d2 = new TimeTableXYDataset();\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n\n        d1.add(new Year(1999), 123.4, \"S1\");\n        assertFalse(d1.equals(d2));\n        d2.add(new Year(1999), 123.4, \"S1\");\n        assertTrue(d1.equals(d2));\n        \n        d1.setDomainIsPointsInTime(!d1.getDomainIsPointsInTime());\n        assertFalse(d1.equals(d2));\n        d2.setDomainIsPointsInTime(!d2.getDomainIsPointsInTime());\n        assertTrue(d1.equals(d2));\n        \n        d1 = new TimeTableXYDataset(TimeZone.getTimeZone(\"GMT\"));\n        d2 = new TimeTableXYDataset(TimeZone.getTimeZone(\n                \"America/Los_Angeles\"));\n        assertFalse(d1.equals(d2));\n    }",
        "begin_line": 117,
        "end_line": 137,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 57)",
            "(line 119,col 9)-(line 119,col 57)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 121,col 9)-(line 121,col 34)",
            "(line 123,col 9)-(line 123,col 44)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 125,col 44)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 128,col 9)-(line 128,col 66)",
            "(line 129,col 9)-(line 129,col 35)",
            "(line 130,col 9)-(line 130,col 66)",
            "(line 131,col 9)-(line 131,col 34)",
            "(line 133,col 9)-(line 133,col 65)",
            "(line 134,col 9)-(line 135,col 40)",
            "(line 136,col 9)-(line 136,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeTableXYDatasetTests.java",
        "signature": "org.jfree.data.time.junit.TimeTableXYDatasetTests.testClone()",
        "snippet": "    public void testClone() {\n\n        TimeTableXYDataset d = new TimeTableXYDataset();\n        d.add(new Year(1999), 25.0, \"Series\");\n\n        TimeTableXYDataset clone = null;\n        try {\n            clone = (TimeTableXYDataset) d.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);  \n        }\n        assertTrue(clone.equals(d));\n\n        // now test that the clone is independent of the original\n        clone.add(new Year(2004), 1.2, \"SS\");\n        assertFalse(clone.equals(d));\n    }",
        "begin_line": 142,
        "end_line": 159,
        "comment": "\n     * Some checks for cloning.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 56)",
            "(line 145,col 9)-(line 145,col 46)",
            "(line 147,col 9)-(line 147,col 40)",
            "(line 148,col 9)-(line 153,col 9)",
            "(line 154,col 9)-(line 154,col 36)",
            "(line 157,col 9)-(line 157,col 45)",
            "(line 158,col 9)-(line 158,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeTableXYDatasetTests.java",
        "signature": "org.jfree.data.time.junit.TimeTableXYDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        TimeTableXYDataset d1 = new TimeTableXYDataset();\n        d1.add(new Year(1999), 123.4, \"S1\");\n        TimeTableXYDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            d2 = (TimeTableXYDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1.equals(d2));\n\n    }",
        "begin_line": 164,
        "end_line": 186,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 57)",
            "(line 167,col 9)-(line 167,col 44)",
            "(line 168,col 9)-(line 168,col 37)",
            "(line 170,col 9)-(line 183,col 9)",
            "(line 184,col 9)-(line 184,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeTableXYDatasetTests.java",
        "signature": "org.jfree.data.time.junit.TimeTableXYDatasetTests.testClear()",
        "snippet": "    public void testClear() {\n        TimeTableXYDataset d = new TimeTableXYDataset();\n        d.add(new Year(1999), 1.0, \"Series 1\");\n        assertEquals(d.getItemCount(), 1);\n        assertEquals(d.getSeriesCount(), 1);\n        d.add(new Year(2000), 2.0, \"Series 2\"); \n\n        d.clear();\n        // Make sure there's nothing left\n        assertEquals(0, d.getItemCount());\n        assertEquals(0, d.getSeriesCount());\n    }",
        "begin_line": 191,
        "end_line": 202,
        "comment": "\n     * Test clearing data.\n     ",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 56)",
            "(line 193,col 9)-(line 193,col 47)",
            "(line 194,col 9)-(line 194,col 42)",
            "(line 195,col 9)-(line 195,col 44)",
            "(line 196,col 9)-(line 196,col 47)",
            "(line 198,col 9)-(line 198,col 18)",
            "(line 200,col 9)-(line 200,col 42)",
            "(line 201,col 9)-(line 201,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(QuarterTests.class);\n    }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.QuarterTests(java.lang.String)",
        "snippet": "    public QuarterTests(String name) {\n        super(name);\n    }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.q1Y1900 = new Quarter(1, 1900);\n        this.q2Y1900 = new Quarter(2, 1900);\n        this.q3Y9999 = new Quarter(3, 9999);\n        this.q4Y9999 = new Quarter(4, 9999);\n    }",
        "begin_line": 106,
        "end_line": 111,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 44)",
            "(line 108,col 9)-(line 108,col 44)",
            "(line 109,col 9)-(line 109,col 44)",
            "(line 110,col 9)-(line 110,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testEqualsSelf()",
        "snippet": "    public void testEqualsSelf() {\n        Quarter quarter = new Quarter();\n        assertTrue(quarter.equals(quarter));\n    }",
        "begin_line": 118,
        "end_line": 121,
        "comment": "\n     * Check that a Quarter instance is equal to itself.\n     *\n     * SourceForge Bug ID: 558850.\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 40)",
            "(line 120,col 9)-(line 120,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testEquals()",
        "snippet": "    public void testEquals() {\n        Quarter q1 = new Quarter(2, 2002);\n        Quarter q2 = new Quarter(2, 2002);\n        assertTrue(q1.equals(q2));\n    }",
        "begin_line": 126,
        "end_line": 130,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 42)",
            "(line 128,col 9)-(line 128,col 42)",
            "(line 129,col 9)-(line 129,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testDateConstructor1()",
        "snippet": "    public void testDateConstructor1() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"GMT\");\n        Calendar c = new GregorianCalendar(zone);\n        Quarter q1 = new Quarter(new Date(1017619199999L), zone);\n        Quarter q2 = new Quarter(new Date(1017619200000L), zone);\n\n        assertEquals(1, q1.getQuarter());\n        assertEquals(1017619199999L, q1.getLastMillisecond(c));\n\n        assertEquals(2, q2.getQuarter());\n        assertEquals(1017619200000L, q2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 136,
        "end_line": 149,
        "comment": "\n     * In GMT, the end of Q1 2002 is java.util.Date(1017619199999L).  Use this\n     * to check the quarter constructor.\n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 52)",
            "(line 139,col 9)-(line 139,col 49)",
            "(line 140,col 9)-(line 140,col 65)",
            "(line 141,col 9)-(line 141,col 65)",
            "(line 143,col 9)-(line 143,col 41)",
            "(line 144,col 9)-(line 144,col 63)",
            "(line 146,col 9)-(line 146,col 41)",
            "(line 147,col 9)-(line 147,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testDateConstructor2()",
        "snippet": "    public void testDateConstructor2() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"Europe/Istanbul\");\n        Calendar c = new GregorianCalendar(zone);\n        Quarter q1 = new Quarter(new Date(1017608399999L), zone);\n        Quarter q2 = new Quarter(new Date(1017608400000L), zone);\n\n        assertEquals(1, q1.getQuarter());\n        assertEquals(1017608399999L, q1.getLastMillisecond(c));\n\n        assertEquals(2, q2.getQuarter());\n        assertEquals(1017608400000L, q2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 155,
        "end_line": 168,
        "comment": "\n     * In Istanbul, the end of Q1 2002 is java.util.Date(1017608399999L).  Use\n     * this to check the quarter constructor.\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 64)",
            "(line 158,col 9)-(line 158,col 49)",
            "(line 159,col 9)-(line 159,col 65)",
            "(line 160,col 9)-(line 160,col 65)",
            "(line 162,col 9)-(line 162,col 41)",
            "(line 163,col 9)-(line 163,col 63)",
            "(line 165,col 9)-(line 165,col 41)",
            "(line 166,col 9)-(line 166,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testQ1Y1900Previous()",
        "snippet": "    public void testQ1Y1900Previous() {\n        Quarter previous = (Quarter) this.q1Y1900.previous();\n        assertNull(previous);\n    }",
        "begin_line": 174,
        "end_line": 177,
        "comment": "\n     * Set up a quarter equal to Q1 1900.  Request the previous quarter, it \n     * should be null.\n     ",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 61)",
            "(line 176,col 9)-(line 176,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testQ1Y1900Next()",
        "snippet": "    public void testQ1Y1900Next() {\n        Quarter next = (Quarter) this.q1Y1900.next();\n        assertEquals(this.q2Y1900, next);\n    }",
        "begin_line": 183,
        "end_line": 186,
        "comment": "\n     * Set up a quarter equal to Q1 1900.  Request the next quarter, it should\n     * be Q2 1900.\n     ",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 53)",
            "(line 185,col 9)-(line 185,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testQ4Y9999Previous()",
        "snippet": "    public void testQ4Y9999Previous() {\n        Quarter previous = (Quarter) this.q4Y9999.previous();\n        assertEquals(this.q3Y9999, previous);\n    }",
        "begin_line": 192,
        "end_line": 195,
        "comment": "\n     * Set up a quarter equal to Q4 9999.  Request the previous quarter, it \n     * should be Q3 9999.\n     ",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 61)",
            "(line 194,col 9)-(line 194,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testQ4Y9999Next()",
        "snippet": "    public void testQ4Y9999Next() {\n        Quarter next = (Quarter) this.q4Y9999.next();\n        assertNull(next);\n    }",
        "begin_line": 201,
        "end_line": 204,
        "comment": "\n     * Set up a quarter equal to Q4 9999.  Request the next quarter, it should \n     * be null.\n     ",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 53)",
            "(line 203,col 9)-(line 203,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testParseQuarter()",
        "snippet": "    public void testParseQuarter() {\n\n        Quarter quarter = null;\n\n        // test 1...\n        try {\n            quarter = Quarter.parseQuarter(\"Q1-2000\");\n        }\n        catch (TimePeriodFormatException e) {\n            quarter = new Quarter(1, 1900);\n        }\n        assertEquals(1, quarter.getQuarter());\n        assertEquals(2000, quarter.getYear().getYear());\n\n        // test 2...\n        try {\n            quarter = Quarter.parseQuarter(\"2001-Q2\");\n        }\n        catch (TimePeriodFormatException e) {\n            quarter = new Quarter(1, 1900);\n        }\n        assertEquals(2, quarter.getQuarter());\n        assertEquals(2001, quarter.getYear().getYear());\n\n        // test 3...\n        try {\n            quarter = Quarter.parseQuarter(\"Q3, 2002\");\n        }\n        catch (TimePeriodFormatException e) {\n            quarter = new Quarter(1, 1900);\n        }\n        assertEquals(3, quarter.getQuarter());\n        assertEquals(2002, quarter.getYear().getYear());\n\n    }",
        "begin_line": 209,
        "end_line": 243,
        "comment": "\n     * Test the string parsing code...\n     ",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 31)",
            "(line 214,col 9)-(line 219,col 9)",
            "(line 220,col 9)-(line 220,col 46)",
            "(line 221,col 9)-(line 221,col 56)",
            "(line 224,col 9)-(line 229,col 9)",
            "(line 230,col 9)-(line 230,col 46)",
            "(line 231,col 9)-(line 231,col 56)",
            "(line 234,col 9)-(line 239,col 9)",
            "(line 240,col 9)-(line 240,col 46)",
            "(line 241,col 9)-(line 241,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        Quarter q1 = new Quarter(4, 1999);\n        Quarter q2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(q1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            q2 = (Quarter) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(q1, q2);\n\n    }",
        "begin_line": 248,
        "end_line": 270,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 42)",
            "(line 251,col 9)-(line 251,col 26)",
            "(line 253,col 9)-(line 267,col 9)",
            "(line 268,col 9)-(line 268,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        Quarter q1 = new Quarter(2, 2003);\n        Quarter q2 = new Quarter(2, 2003);\n        assertTrue(q1.equals(q2));\n        int h1 = q1.hashCode();\n        int h2 = q2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 275,
        "end_line": 282,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 276,col 9)-(line 276,col 42)",
            "(line 277,col 9)-(line 277,col 42)",
            "(line 278,col 9)-(line 278,col 34)",
            "(line 279,col 9)-(line 279,col 31)",
            "(line 280,col 9)-(line 280,col 31)",
            "(line 281,col 9)-(line 281,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testNotCloneable()",
        "snippet": "    public void testNotCloneable() {\n        Quarter q = new Quarter(2, 2003);\n        assertFalse(q instanceof Cloneable);\n    }",
        "begin_line": 288,
        "end_line": 291,
        "comment": "\n     * The {@link Quarter} class is immutable, so should not be \n     * {@link Cloneable}.\n     ",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 41)",
            "(line 290,col 9)-(line 290,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testConstructor()",
        "snippet": "    public void testConstructor() {\n        boolean pass = false;\n        try {\n            /*Quarter q =*/ new Quarter(0, 2005);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            /*Quarter q =*/ new Quarter(5, 2005);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 297,
        "end_line": 315,
        "comment": "\n     * Some tests for the constructor with (int, int) arguments.  Covers bug \n     * report 1377239.\n     ",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 29)",
            "(line 299,col 9)-(line 304,col 9)",
            "(line 305,col 9)-(line 305,col 25)",
            "(line 307,col 9)-(line 307,col 21)",
            "(line 308,col 9)-(line 313,col 9)",
            "(line 314,col 9)-(line 314,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testGetFirstMillisecond()",
        "snippet": "    public void testGetFirstMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Quarter q = new Quarter(3, 1970);\n        assertEquals(15634800000L, q.getFirstMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 320,
        "end_line": 329,
        "comment": "\n     * Some checks for the getFirstMillisecond() method.\n     ",
        "child_ranges": [
            "(line 321,col 9)-(line 321,col 43)",
            "(line 322,col 9)-(line 322,col 37)",
            "(line 323,col 9)-(line 323,col 51)",
            "(line 324,col 9)-(line 324,col 67)",
            "(line 325,col 9)-(line 325,col 41)",
            "(line 326,col 9)-(line 326,col 60)",
            "(line 327,col 9)-(line 327,col 33)",
            "(line 328,col 9)-(line 328,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testGetFirstMillisecondWithTimeZone()",
        "snippet": "    public void testGetFirstMillisecondWithTimeZone() {\n        Quarter q = new Quarter(2, 1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-623347200000L, q.getFirstMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            q.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 334,
        "end_line": 349,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 335,col 9)-(line 335,col 41)",
            "(line 336,col 9)-(line 336,col 68)",
            "(line 337,col 9)-(line 337,col 49)",
            "(line 338,col 9)-(line 338,col 63)",
            "(line 341,col 9)-(line 341,col 29)",
            "(line 342,col 9)-(line 347,col 9)",
            "(line 348,col 9)-(line 348,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testGetFirstMillisecondWithCalendar()",
        "snippet": "    public void testGetFirstMillisecondWithCalendar() {\n        Quarter q = new Quarter(1, 2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(978307200000L, q.getFirstMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            q.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }    ",
        "begin_line": 354,
        "end_line": 369,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 41)",
            "(line 356,col 9)-(line 356,col 75)",
            "(line 357,col 9)-(line 357,col 71)",
            "(line 358,col 9)-(line 358,col 69)",
            "(line 361,col 9)-(line 361,col 29)",
            "(line 362,col 9)-(line 367,col 9)",
            "(line 368,col 9)-(line 368,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testGetLastMillisecond()",
        "snippet": "    public void testGetLastMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Quarter q = new Quarter(3, 1970);\n        assertEquals(23583599999L, q.getLastMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 374,
        "end_line": 383,
        "comment": "\n     * Some checks for the getLastMillisecond() method.\n     ",
        "child_ranges": [
            "(line 375,col 9)-(line 375,col 43)",
            "(line 376,col 9)-(line 376,col 37)",
            "(line 377,col 9)-(line 377,col 51)",
            "(line 378,col 9)-(line 378,col 67)",
            "(line 379,col 9)-(line 379,col 41)",
            "(line 380,col 9)-(line 380,col 59)",
            "(line 381,col 9)-(line 381,col 33)",
            "(line 382,col 9)-(line 382,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testGetLastMillisecondWithTimeZone()",
        "snippet": "    public void testGetLastMillisecondWithTimeZone() {\n        Quarter q = new Quarter(2, 1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-615488400001L, q.getLastMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            q.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 388,
        "end_line": 403,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 389,col 9)-(line 389,col 41)",
            "(line 390,col 9)-(line 390,col 68)",
            "(line 391,col 9)-(line 391,col 49)",
            "(line 392,col 9)-(line 392,col 62)",
            "(line 395,col 9)-(line 395,col 29)",
            "(line 396,col 9)-(line 401,col 9)",
            "(line 402,col 9)-(line 402,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testGetLastMillisecondWithCalendar()",
        "snippet": "    public void testGetLastMillisecondWithCalendar() {\n        Quarter q = new Quarter(3, 2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(1001894399999L, q.getLastMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            q.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    } ",
        "begin_line": 408,
        "end_line": 423,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 409,col 9)-(line 409,col 41)",
            "(line 410,col 9)-(line 410,col 75)",
            "(line 411,col 9)-(line 411,col 71)",
            "(line 412,col 9)-(line 412,col 69)",
            "(line 415,col 9)-(line 415,col 29)",
            "(line 416,col 9)-(line 421,col 9)",
            "(line 422,col 9)-(line 422,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testGetSerialIndex()",
        "snippet": "    public void testGetSerialIndex() {\n        Quarter q = new Quarter(1, 2000);\n        assertEquals(8001L, q.getSerialIndex());\n        q = new Quarter(1, 1900);\n        assertEquals(7601L, q.getSerialIndex());\n    }",
        "begin_line": 428,
        "end_line": 433,
        "comment": "\n     * Some checks for the getSerialIndex() method.\n     ",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 41)",
            "(line 430,col 9)-(line 430,col 48)",
            "(line 431,col 9)-(line 431,col 33)",
            "(line 432,col 9)-(line 432,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testNext()",
        "snippet": "    public void testNext() {\n        Quarter q = new Quarter(1, 2000);\n        q = (Quarter) q.next();\n        assertEquals(new Year(2000), q.getYear());\n        assertEquals(2, q.getQuarter());\n        q = new Quarter(4, 9999);\n        assertNull(q.next());\n    }",
        "begin_line": 438,
        "end_line": 445,
        "comment": "\n     * Some checks for the testNext() method.\n     ",
        "child_ranges": [
            "(line 439,col 9)-(line 439,col 41)",
            "(line 440,col 9)-(line 440,col 31)",
            "(line 441,col 9)-(line 441,col 50)",
            "(line 442,col 9)-(line 442,col 40)",
            "(line 443,col 9)-(line 443,col 33)",
            "(line 444,col 9)-(line 444,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testGetStart()",
        "snippet": "    public void testGetStart() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JULY, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Quarter q = new Quarter(3, 2006);\n        assertEquals(cal.getTime(), q.getStart());\n        Locale.setDefault(saved);        \n    }",
        "begin_line": 450,
        "end_line": 459,
        "comment": "\n     * Some checks for the getStart() method.\n     ",
        "child_ranges": [
            "(line 451,col 9)-(line 451,col 43)",
            "(line 452,col 9)-(line 452,col 40)",
            "(line 453,col 9)-(line 453,col 58)",
            "(line 454,col 9)-(line 454,col 49)",
            "(line 455,col 9)-(line 455,col 41)",
            "(line 456,col 9)-(line 456,col 41)",
            "(line 457,col 9)-(line 457,col 50)",
            "(line 458,col 9)-(line 458,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.QuarterTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/QuarterTests.java",
        "signature": "org.jfree.data.time.junit.QuarterTests.testGetEnd()",
        "snippet": "    public void testGetEnd() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.MARCH, 31, 23, 59, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        Quarter q = new Quarter(1, 2006);\n        assertEquals(cal.getTime(), q.getEnd());\n        Locale.setDefault(saved);                \n    }",
        "begin_line": 464,
        "end_line": 473,
        "comment": "\n     * Some checks for the getEnd() method.\n     ",
        "child_ranges": [
            "(line 465,col 9)-(line 465,col 43)",
            "(line 466,col 9)-(line 466,col 40)",
            "(line 467,col 9)-(line 467,col 58)",
            "(line 468,col 9)-(line 468,col 54)",
            "(line 469,col 9)-(line 469,col 43)",
            "(line 470,col 9)-(line 470,col 41)",
            "(line 471,col 9)-(line 471,col 48)",
            "(line 472,col 9)-(line 472,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MonthTests.class);\n    }",
        "begin_line": 96,
        "end_line": 98,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.MonthTests(java.lang.String)",
        "snippet": "    public MonthTests(String name) {\n        super(name);\n    }",
        "begin_line": 105,
        "end_line": 107,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.jan1900 = new Month(MonthConstants.JANUARY, 1900);\n        this.feb1900 = new Month(MonthConstants.FEBRUARY, 1900);\n        this.nov9999 = new Month(MonthConstants.NOVEMBER, 9999);\n        this.dec9999 = new Month(MonthConstants.DECEMBER, 9999);\n    }",
        "begin_line": 112,
        "end_line": 117,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 63)",
            "(line 114,col 9)-(line 114,col 64)",
            "(line 115,col 9)-(line 115,col 64)",
            "(line 116,col 9)-(line 116,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testEqualsSelf()",
        "snippet": "    public void testEqualsSelf() {\n        Month month = new Month();\n        assertTrue(month.equals(month));\n    }",
        "begin_line": 124,
        "end_line": 127,
        "comment": "\n     * Check that a Month instance is equal to itself.\n     *\n     * SourceForge Bug ID: 558850.\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 34)",
            "(line 126,col 9)-(line 126,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testEquals()",
        "snippet": "    public void testEquals() {\n        Month m1 = new Month(MonthConstants.MAY, 2002);\n        Month m2 = new Month(MonthConstants.MAY, 2002);\n        assertTrue(m1.equals(m2));\n    }",
        "begin_line": 132,
        "end_line": 136,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 55)",
            "(line 134,col 9)-(line 134,col 55)",
            "(line 135,col 9)-(line 135,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testDateConstructor1()",
        "snippet": "    public void testDateConstructor1() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"GMT\");\n        Calendar c = new GregorianCalendar(zone);\n        Month m1 = new Month(new Date(951868799999L), zone);\n        Month m2 = new Month(new Date(951868800000L), zone);\n\n        assertEquals(MonthConstants.FEBRUARY, m1.getMonth());\n        assertEquals(951868799999L, m1.getLastMillisecond(c));\n\n        assertEquals(MonthConstants.MARCH, m2.getMonth());\n        assertEquals(951868800000L, m2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 142,
        "end_line": 155,
        "comment": "\n     * In GMT, the end of Feb 2000 is java.util.Date(951,868,799,999L).  Use \n     * this to check the Month constructor.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 52)",
            "(line 145,col 9)-(line 145,col 49)",
            "(line 146,col 9)-(line 146,col 60)",
            "(line 147,col 9)-(line 147,col 60)",
            "(line 149,col 9)-(line 149,col 61)",
            "(line 150,col 9)-(line 150,col 62)",
            "(line 152,col 9)-(line 152,col 58)",
            "(line 153,col 9)-(line 153,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testDateConstructor2()",
        "snippet": "    public void testDateConstructor2() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"Pacific/Auckland\");\n        Calendar c = new GregorianCalendar(zone);\n        Month m1 = new Month(new Date(951821999999L), zone);\n        Month m2 = new Month(new Date(951822000000L), zone);\n\n        assertEquals(MonthConstants.FEBRUARY, m1.getMonth());\n        assertEquals(951821999999L, m1.getLastMillisecond(c));\n\n        assertEquals(MonthConstants.MARCH, m2.getMonth());\n        assertEquals(951822000000L, m2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 161,
        "end_line": 174,
        "comment": "\n     * In Auckland, the end of Feb 2000 is java.util.Date(951,821,999,999L).\n     * Use this to check the Month constructor.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 65)",
            "(line 164,col 9)-(line 164,col 49)",
            "(line 165,col 9)-(line 165,col 60)",
            "(line 166,col 9)-(line 166,col 60)",
            "(line 168,col 9)-(line 168,col 61)",
            "(line 169,col 9)-(line 169,col 62)",
            "(line 171,col 9)-(line 171,col 58)",
            "(line 172,col 9)-(line 172,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testJan1900Previous()",
        "snippet": "    public void testJan1900Previous() {\n        Month previous = (Month) this.jan1900.previous();\n        assertNull(previous);\n    }",
        "begin_line": 180,
        "end_line": 183,
        "comment": "\n     * Set up a month equal to Jan 1900.  Request the previous month, it should\n     * be null.\n     ",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 57)",
            "(line 182,col 9)-(line 182,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testJan1900Next()",
        "snippet": "    public void testJan1900Next() {\n        Month next = (Month) this.jan1900.next();\n        assertEquals(this.feb1900, next);\n    }",
        "begin_line": 189,
        "end_line": 192,
        "comment": "\n     * Set up a month equal to Jan 1900.  Request the next month, it should be \n     * Feb 1900.\n     ",
        "child_ranges": [
            "(line 190,col 9)-(line 190,col 49)",
            "(line 191,col 9)-(line 191,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testDec9999Previous()",
        "snippet": "    public void testDec9999Previous() {\n        Month previous = (Month) this.dec9999.previous();\n        assertEquals(this.nov9999, previous);\n    }",
        "begin_line": 198,
        "end_line": 201,
        "comment": "\n     * Set up a month equal to Dec 9999.  Request the previous month, it should\n     * be Nov 9999.\n     ",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 57)",
            "(line 200,col 9)-(line 200,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testDec9999Next()",
        "snippet": "    public void testDec9999Next() {\n        Month next = (Month) this.dec9999.next();\n        assertNull(next);\n    }",
        "begin_line": 207,
        "end_line": 210,
        "comment": "\n     * Set up a month equal to Dec 9999.  Request the next month, it should be\n     * null.\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 49)",
            "(line 209,col 9)-(line 209,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testParseMonth()",
        "snippet": "    public void testParseMonth() {\n\n        Month month = null;\n\n        // test 1...\n        try {\n            month = Month.parseMonth(\"1990-01\");\n        }\n        catch (TimePeriodFormatException e) {\n            month = new Month(1, 1900);\n        }\n        assertEquals(1, month.getMonth());\n        assertEquals(1990, month.getYear().getYear());\n\n        // test 2...\n        try {\n            month = Month.parseMonth(\"02-1991\");\n        }\n        catch (TimePeriodFormatException e) {\n            month = new Month(1, 1900);\n        }\n        assertEquals(2, month.getMonth());\n        assertEquals(1991, month.getYear().getYear());\n\n        // test 3...\n        try {\n            month = Month.parseMonth(\"March 1993\");\n        }\n        catch (TimePeriodFormatException e) {\n            month = new Month(1, 1900);\n        }\n        assertEquals(3, month.getMonth());\n        assertEquals(1993, month.getYear().getYear());\n\n    }",
        "begin_line": 215,
        "end_line": 249,
        "comment": "\n     * Tests the string parsing code...\n     ",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 27)",
            "(line 220,col 9)-(line 225,col 9)",
            "(line 226,col 9)-(line 226,col 42)",
            "(line 227,col 9)-(line 227,col 54)",
            "(line 230,col 9)-(line 235,col 9)",
            "(line 236,col 9)-(line 236,col 42)",
            "(line 237,col 9)-(line 237,col 54)",
            "(line 240,col 9)-(line 245,col 9)",
            "(line 246,col 9)-(line 246,col 42)",
            "(line 247,col 9)-(line 247,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        Month m1 = new Month(12, 1999);\n        Month m2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            m2 = (Month) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(m1, m2);\n\n    }",
        "begin_line": 254,
        "end_line": 276,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 39)",
            "(line 257,col 9)-(line 257,col 24)",
            "(line 259,col 9)-(line 273,col 9)",
            "(line 274,col 9)-(line 274,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        Month m1 = new Month(2, 2003);\n        Month m2 = new Month(2, 2003);\n        assertTrue(m1.equals(m2));\n        int h1 = m1.hashCode();\n        int h2 = m2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 281,
        "end_line": 288,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 38)",
            "(line 283,col 9)-(line 283,col 38)",
            "(line 284,col 9)-(line 284,col 34)",
            "(line 285,col 9)-(line 285,col 31)",
            "(line 286,col 9)-(line 286,col 31)",
            "(line 287,col 9)-(line 287,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testNotCloneable()",
        "snippet": "    public void testNotCloneable() {\n        Month m = new Month(2, 2003);\n        assertFalse(m instanceof Cloneable);\n    }",
        "begin_line": 293,
        "end_line": 296,
        "comment": "\n     * The {@link Month} class is immutable, so should not be {@link Cloneable}.\n     ",
        "child_ranges": [
            "(line 294,col 9)-(line 294,col 37)",
            "(line 295,col 9)-(line 295,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testGetFirstMillisecond()",
        "snippet": "    public void testGetFirstMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Month m = new Month(3, 1970);\n        assertEquals(5094000000L, m.getFirstMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 301,
        "end_line": 310,
        "comment": "\n     * Some checks for the getFirstMillisecond() method.\n     ",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 43)",
            "(line 303,col 9)-(line 303,col 37)",
            "(line 304,col 9)-(line 304,col 51)",
            "(line 305,col 9)-(line 305,col 67)",
            "(line 306,col 9)-(line 306,col 37)",
            "(line 307,col 9)-(line 307,col 59)",
            "(line 308,col 9)-(line 308,col 33)",
            "(line 309,col 9)-(line 309,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testGetFirstMillisecondWithTimeZone()",
        "snippet": "    public void testGetFirstMillisecondWithTimeZone() {\n        Month m = new Month(2, 1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-628444800000L, m.getFirstMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            m.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 315,
        "end_line": 330,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 37)",
            "(line 317,col 9)-(line 317,col 68)",
            "(line 318,col 9)-(line 318,col 49)",
            "(line 319,col 9)-(line 319,col 63)",
            "(line 322,col 9)-(line 322,col 29)",
            "(line 323,col 9)-(line 328,col 9)",
            "(line 329,col 9)-(line 329,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testGetFirstMillisecondWithCalendar()",
        "snippet": "    public void testGetFirstMillisecondWithCalendar() {\n        Month m = new Month(1, 2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(978307200000L, m.getFirstMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            m.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }    ",
        "begin_line": 335,
        "end_line": 350,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 336,col 9)-(line 336,col 37)",
            "(line 337,col 9)-(line 337,col 75)",
            "(line 338,col 9)-(line 338,col 71)",
            "(line 339,col 9)-(line 339,col 69)",
            "(line 342,col 9)-(line 342,col 29)",
            "(line 343,col 9)-(line 348,col 9)",
            "(line 349,col 9)-(line 349,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testGetLastMillisecond()",
        "snippet": "    public void testGetLastMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Month m = new Month(3, 1970);\n        assertEquals(7772399999L, m.getLastMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 355,
        "end_line": 364,
        "comment": "\n     * Some checks for the getLastMillisecond() method.\n     ",
        "child_ranges": [
            "(line 356,col 9)-(line 356,col 43)",
            "(line 357,col 9)-(line 357,col 37)",
            "(line 358,col 9)-(line 358,col 51)",
            "(line 359,col 9)-(line 359,col 67)",
            "(line 360,col 9)-(line 360,col 37)",
            "(line 361,col 9)-(line 361,col 58)",
            "(line 362,col 9)-(line 362,col 33)",
            "(line 363,col 9)-(line 363,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testGetLastMillisecondWithTimeZone()",
        "snippet": "    public void testGetLastMillisecondWithTimeZone() {\n        Month m = new Month(2, 1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-626025600001L, m.getLastMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            m.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 369,
        "end_line": 384,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 370,col 9)-(line 370,col 37)",
            "(line 371,col 9)-(line 371,col 68)",
            "(line 372,col 9)-(line 372,col 49)",
            "(line 373,col 9)-(line 373,col 62)",
            "(line 376,col 9)-(line 376,col 29)",
            "(line 377,col 9)-(line 382,col 9)",
            "(line 383,col 9)-(line 383,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testGetLastMillisecondWithCalendar()",
        "snippet": "    public void testGetLastMillisecondWithCalendar() {\n        Month m = new Month(3, 2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(986083199999L, m.getLastMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            m.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    } ",
        "begin_line": 389,
        "end_line": 404,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 390,col 9)-(line 390,col 37)",
            "(line 391,col 9)-(line 391,col 75)",
            "(line 392,col 9)-(line 392,col 71)",
            "(line 393,col 9)-(line 393,col 68)",
            "(line 396,col 9)-(line 396,col 29)",
            "(line 397,col 9)-(line 402,col 9)",
            "(line 403,col 9)-(line 403,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testGetSerialIndex()",
        "snippet": "    public void testGetSerialIndex() {\n        Month m = new Month(1, 2000);\n        assertEquals(24001L, m.getSerialIndex());\n        m = new Month(1, 1900);\n        assertEquals(22801L, m.getSerialIndex());\n    }",
        "begin_line": 409,
        "end_line": 414,
        "comment": "\n     * Some checks for the getSerialIndex() method.\n     ",
        "child_ranges": [
            "(line 410,col 9)-(line 410,col 37)",
            "(line 411,col 9)-(line 411,col 49)",
            "(line 412,col 9)-(line 412,col 31)",
            "(line 413,col 9)-(line 413,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testNext()",
        "snippet": "    public void testNext() {\n        Month m = new Month(12, 2000);\n        m = (Month) m.next();\n        assertEquals(new Year(2001), m.getYear());\n        assertEquals(1, m.getMonth());\n        m = new Month(12, 9999);\n        assertNull(m.next());\n    }",
        "begin_line": 419,
        "end_line": 426,
        "comment": "\n     * Some checks for the testNext() method.\n     ",
        "child_ranges": [
            "(line 420,col 9)-(line 420,col 38)",
            "(line 421,col 9)-(line 421,col 29)",
            "(line 422,col 9)-(line 422,col 50)",
            "(line 423,col 9)-(line 423,col 38)",
            "(line 424,col 9)-(line 424,col 32)",
            "(line 425,col 9)-(line 425,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testGetStart()",
        "snippet": "    public void testGetStart() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.MARCH, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Month m = new Month(3, 2006);\n        assertEquals(cal.getTime(), m.getStart());\n        Locale.setDefault(saved);        \n    }",
        "begin_line": 431,
        "end_line": 440,
        "comment": "\n     * Some checks for the getStart() method.\n     ",
        "child_ranges": [
            "(line 432,col 9)-(line 432,col 43)",
            "(line 433,col 9)-(line 433,col 40)",
            "(line 434,col 9)-(line 434,col 58)",
            "(line 435,col 9)-(line 435,col 50)",
            "(line 436,col 9)-(line 436,col 41)",
            "(line 437,col 9)-(line 437,col 37)",
            "(line 438,col 9)-(line 438,col 50)",
            "(line 439,col 9)-(line 439,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MonthTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MonthTests.java",
        "signature": "org.jfree.data.time.junit.MonthTests.testGetEnd()",
        "snippet": "    public void testGetEnd() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JANUARY, 31, 23, 59, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        Month m = new Month(1, 2006);\n        assertEquals(cal.getTime(), m.getEnd());\n        Locale.setDefault(saved);                \n    }",
        "begin_line": 445,
        "end_line": 454,
        "comment": "\n     * Some checks for the getEnd() method.\n     ",
        "child_ranges": [
            "(line 446,col 9)-(line 446,col 43)",
            "(line 447,col 9)-(line 447,col 40)",
            "(line 448,col 9)-(line 448,col 58)",
            "(line 449,col 9)-(line 449,col 56)",
            "(line 450,col 9)-(line 450,col 43)",
            "(line 451,col 9)-(line 451,col 37)",
            "(line 452,col 9)-(line 452,col 48)",
            "(line 453,col 9)-(line 453,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(SecondTests.class);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.SecondTests(java.lang.String)",
        "snippet": "    public SecondTests(String name) {\n        super(name);\n    }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.setUp()",
        "snippet": "    protected void setUp() {\n        // no setup\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testEqualsSelf()",
        "snippet": "    public void testEqualsSelf() {\n        Second second = new Second();\n        assertTrue(second.equals(second));\n    }",
        "begin_line": 106,
        "end_line": 109,
        "comment": "\n     * Test that a Second instance is equal to itself.\n     *\n     * SourceForge Bug ID: 558850.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 37)",
            "(line 108,col 9)-(line 108,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testEquals()",
        "snippet": "    public void testEquals() {\n        Day day1 = new Day(29, MonthConstants.MARCH, 2002);\n        Hour hour1 = new Hour(15, day1);\n        Minute minute1 = new Minute(15, hour1);\n        Second second1 = new Second(34, minute1);\n        Day day2 = new Day(29, MonthConstants.MARCH, 2002);\n        Hour hour2 = new Hour(15, day2);\n        Minute minute2 = new Minute(15, hour2);\n        Second second2 = new Second(34, minute2);\n        assertTrue(second1.equals(second2));\n    }",
        "begin_line": 114,
        "end_line": 124,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 59)",
            "(line 116,col 9)-(line 116,col 40)",
            "(line 117,col 9)-(line 117,col 47)",
            "(line 118,col 9)-(line 118,col 49)",
            "(line 119,col 9)-(line 119,col 59)",
            "(line 120,col 9)-(line 120,col 40)",
            "(line 121,col 9)-(line 121,col 47)",
            "(line 122,col 9)-(line 122,col 49)",
            "(line 123,col 9)-(line 123,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testDateConstructor1()",
        "snippet": "    public void testDateConstructor1() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"GMT\");\n        Calendar c = new GregorianCalendar(zone);\n        Second s1 = new Second(new Date(1016729758999L), zone);\n        Second s2 = new Second(new Date(1016729759000L), zone);\n\n        assertEquals(58, s1.getSecond());\n        assertEquals(1016729758999L, s1.getLastMillisecond(c));\n\n        assertEquals(59, s2.getSecond());\n        assertEquals(1016729759000L, s2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 130,
        "end_line": 143,
        "comment": "\n     * In GMT, the 4.55:59pm on 21 Mar 2002 is java.util.Date(1016729759000L).\n     * Use this to check the Second constructor.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 52)",
            "(line 133,col 9)-(line 133,col 49)",
            "(line 134,col 9)-(line 134,col 63)",
            "(line 135,col 9)-(line 135,col 63)",
            "(line 137,col 9)-(line 137,col 41)",
            "(line 138,col 9)-(line 138,col 63)",
            "(line 140,col 9)-(line 140,col 41)",
            "(line 141,col 9)-(line 141,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testDateConstructor2()",
        "snippet": "    public void testDateConstructor2() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"America/Chicago\");\n        Calendar c = new GregorianCalendar(zone);\n        Second s1 = new Second(new Date(1016751358999L), zone);\n        Second s2 = new Second(new Date(1016751359000L), zone);\n\n        assertEquals(58, s1.getSecond());\n        assertEquals(1016751358999L, s1.getLastMillisecond(c));\n\n        assertEquals(59, s2.getSecond());\n        assertEquals(1016751359000L, s2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 149,
        "end_line": 162,
        "comment": "\n     * In Chicago, the 4.55:59pm on 21 Mar 2002 is \n     * java.util.Date(1016751359000L). Use this to check the Second constructor.\n     ",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 64)",
            "(line 152,col 9)-(line 152,col 49)",
            "(line 153,col 9)-(line 153,col 63)",
            "(line 154,col 9)-(line 154,col 63)",
            "(line 156,col 9)-(line 156,col 41)",
            "(line 157,col 9)-(line 157,col 63)",
            "(line 159,col 9)-(line 159,col 41)",
            "(line 160,col 9)-(line 160,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        Second s1 = new Second();\n        Second s2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            s2 = (Second) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(s1, s2);\n\n    }",
        "begin_line": 167,
        "end_line": 189,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 33)",
            "(line 170,col 9)-(line 170,col 25)",
            "(line 172,col 9)-(line 186,col 9)",
            "(line 187,col 9)-(line 187,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        Second s1 = new Second(13, 45, 5, 1, 2, 2003);\n        Second s2 = new Second(13, 45, 5, 1, 2, 2003);\n        assertTrue(s1.equals(s2));\n        int h1 = s1.hashCode();\n        int h2 = s2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 194,
        "end_line": 201,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 54)",
            "(line 196,col 9)-(line 196,col 54)",
            "(line 197,col 9)-(line 197,col 34)",
            "(line 198,col 9)-(line 198,col 31)",
            "(line 199,col 9)-(line 199,col 31)",
            "(line 200,col 9)-(line 200,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testNotCloneable()",
        "snippet": "    public void testNotCloneable() {\n        Second s = new Second(13, 45, 5, 1, 2, 2003);\n        assertFalse(s instanceof Cloneable);\n    }",
        "begin_line": 207,
        "end_line": 210,
        "comment": "\n     * The {@link Second} class is immutable, so should not be \n     * {@link Cloneable}.\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 53)",
            "(line 209,col 9)-(line 209,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testGetFirstMillisecond()",
        "snippet": "    public void testGetFirstMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Second s = new Second(15, 43, 15, 1, 4, 2006);\n        assertEquals(1143902595000L, s.getFirstMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 215,
        "end_line": 224,
        "comment": "\n     * Some checks for the getFirstMillisecond() method.\n     ",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 43)",
            "(line 217,col 9)-(line 217,col 37)",
            "(line 218,col 9)-(line 218,col 51)",
            "(line 219,col 9)-(line 219,col 67)",
            "(line 220,col 9)-(line 220,col 54)",
            "(line 221,col 9)-(line 221,col 62)",
            "(line 222,col 9)-(line 222,col 33)",
            "(line 223,col 9)-(line 223,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testGetFirstMillisecondWithTimeZone()",
        "snippet": "    public void testGetFirstMillisecondWithTimeZone() {\n        Second s = new Second(50, 59, 15, 1, 4, 1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-623289610000L, s.getFirstMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            s.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 229,
        "end_line": 244,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 54)",
            "(line 231,col 9)-(line 231,col 68)",
            "(line 232,col 9)-(line 232,col 49)",
            "(line 233,col 9)-(line 233,col 63)",
            "(line 236,col 9)-(line 236,col 29)",
            "(line 237,col 9)-(line 242,col 9)",
            "(line 243,col 9)-(line 243,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testGetFirstMillisecondWithCalendar()",
        "snippet": "    public void testGetFirstMillisecondWithCalendar() {\n        Second s = new Second(55, 40, 2, 15, 4, 2000);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(955766455000L, s.getFirstMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            s.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }    ",
        "begin_line": 249,
        "end_line": 264,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 54)",
            "(line 251,col 9)-(line 251,col 75)",
            "(line 252,col 9)-(line 252,col 71)",
            "(line 253,col 9)-(line 253,col 69)",
            "(line 256,col 9)-(line 256,col 29)",
            "(line 257,col 9)-(line 262,col 9)",
            "(line 263,col 9)-(line 263,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testGetLastMillisecond()",
        "snippet": "    public void testGetLastMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Second s = new Second(1, 1, 1, 1, 1, 1970);\n        assertEquals(61999L, s.getLastMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 269,
        "end_line": 278,
        "comment": "\n     * Some checks for the getLastMillisecond() method.\n     ",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 43)",
            "(line 271,col 9)-(line 271,col 37)",
            "(line 272,col 9)-(line 272,col 51)",
            "(line 273,col 9)-(line 273,col 67)",
            "(line 274,col 9)-(line 274,col 51)",
            "(line 275,col 9)-(line 275,col 53)",
            "(line 276,col 9)-(line 276,col 33)",
            "(line 277,col 9)-(line 277,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testGetLastMillisecondWithTimeZone()",
        "snippet": "    public void testGetLastMillisecondWithTimeZone() {\n        Second s = new Second(55, 1, 2, 7, 7, 1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-614962684001L, s.getLastMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            s.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 283,
        "end_line": 298,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 52)",
            "(line 285,col 9)-(line 285,col 68)",
            "(line 286,col 9)-(line 286,col 49)",
            "(line 287,col 9)-(line 287,col 62)",
            "(line 290,col 9)-(line 290,col 29)",
            "(line 291,col 9)-(line 296,col 9)",
            "(line 297,col 9)-(line 297,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testGetLastMillisecondWithCalendar()",
        "snippet": "    public void testGetLastMillisecondWithCalendar() {\n        Second s = new Second(50, 45, 21, 21, 4, 2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(987889550999L, s.getLastMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            s.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    } ",
        "begin_line": 303,
        "end_line": 318,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 55)",
            "(line 305,col 9)-(line 305,col 75)",
            "(line 306,col 9)-(line 306,col 71)",
            "(line 307,col 9)-(line 307,col 68)",
            "(line 310,col 9)-(line 310,col 29)",
            "(line 311,col 9)-(line 316,col 9)",
            "(line 317,col 9)-(line 317,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testGetSerialIndex()",
        "snippet": "    public void testGetSerialIndex() {\n        Second s = new Second(1, 1, 1, 1, 1, 2000);\n        assertEquals(3155850061L, s.getSerialIndex());\n        s = new Second(1, 1, 1, 1, 1, 1900);\n        assertEquals(176461L, s.getSerialIndex());\n    }",
        "begin_line": 323,
        "end_line": 328,
        "comment": "\n     * Some checks for the getSerialIndex() method.\n     ",
        "child_ranges": [
            "(line 324,col 9)-(line 324,col 51)",
            "(line 325,col 9)-(line 325,col 54)",
            "(line 326,col 9)-(line 326,col 44)",
            "(line 327,col 9)-(line 327,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testNext()",
        "snippet": "    public void testNext() {\n        Second s = new Second(55, 30, 1, 12, 12, 2000);\n        s = (Second) s.next();\n        assertEquals(2000, s.getMinute().getHour().getYear());\n        assertEquals(12, s.getMinute().getHour().getMonth());\n        assertEquals(12, s.getMinute().getHour().getDayOfMonth());\n        assertEquals(1, s.getMinute().getHour().getHour());\n        assertEquals(30, s.getMinute().getMinute());\n        assertEquals(56, s.getSecond());\n        s = new Second(59, 59, 23, 31, 12, 9999);\n        assertNull(s.next());\n    }",
        "begin_line": 333,
        "end_line": 344,
        "comment": "\n     * Some checks for the testNext() method.\n     ",
        "child_ranges": [
            "(line 334,col 9)-(line 334,col 55)",
            "(line 335,col 9)-(line 335,col 30)",
            "(line 336,col 9)-(line 336,col 62)",
            "(line 337,col 9)-(line 337,col 61)",
            "(line 338,col 9)-(line 338,col 66)",
            "(line 339,col 9)-(line 339,col 59)",
            "(line 340,col 9)-(line 340,col 52)",
            "(line 341,col 9)-(line 341,col 40)",
            "(line 342,col 9)-(line 342,col 49)",
            "(line 343,col 9)-(line 343,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testGetStart()",
        "snippet": "    public void testGetStart() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JANUARY, 16, 3, 47, 55);\n        cal.set(Calendar.MILLISECOND, 0);\n        Second s = new Second(55, 47, 3, 16, 1, 2006);\n        assertEquals(cal.getTime(), s.getStart());\n        Locale.setDefault(saved);        \n    }",
        "begin_line": 349,
        "end_line": 358,
        "comment": "\n     * Some checks for the getStart() method.\n     ",
        "child_ranges": [
            "(line 350,col 9)-(line 350,col 43)",
            "(line 351,col 9)-(line 351,col 40)",
            "(line 352,col 9)-(line 352,col 58)",
            "(line 353,col 9)-(line 353,col 55)",
            "(line 354,col 9)-(line 354,col 41)",
            "(line 355,col 9)-(line 355,col 54)",
            "(line 356,col 9)-(line 356,col 50)",
            "(line 357,col 9)-(line 357,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.SecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/SecondTests.java",
        "signature": "org.jfree.data.time.junit.SecondTests.testGetEnd()",
        "snippet": "    public void testGetEnd() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JANUARY, 16, 3, 47, 55);\n        cal.set(Calendar.MILLISECOND, 999);\n        Second s = new Second(55, 47, 3, 16, 1, 2006);\n        assertEquals(cal.getTime(), s.getEnd());\n        Locale.setDefault(saved);                \n    }",
        "begin_line": 363,
        "end_line": 372,
        "comment": "\n     * Some checks for the getEnd() method.\n     ",
        "child_ranges": [
            "(line 364,col 9)-(line 364,col 43)",
            "(line 365,col 9)-(line 365,col 40)",
            "(line 366,col 9)-(line 366,col 58)",
            "(line 367,col 9)-(line 367,col 55)",
            "(line 368,col 9)-(line 368,col 43)",
            "(line 369,col 9)-(line 369,col 54)",
            "(line 370,col 9)-(line 370,col 48)",
            "(line 371,col 9)-(line 371,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MillisecondTests.class);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.MillisecondTests(java.lang.String)",
        "snippet": "    public MillisecondTests(String name) {\n        super(name);\n    }",
        "begin_line": 92,
        "end_line": 94,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.setUp()",
        "snippet": "    protected void setUp() {\n        // no setup\n    }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testEqualsSelf()",
        "snippet": "    public void testEqualsSelf() {\n        Millisecond millisecond = new Millisecond();\n        assertTrue(millisecond.equals(millisecond));\n    }",
        "begin_line": 108,
        "end_line": 111,
        "comment": "\n     * Check that a {@link Millisecond} instance is equal to itself.\n     *\n     * SourceForge Bug ID: 558850.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 52)",
            "(line 110,col 9)-(line 110,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testEquals()",
        "snippet": "    public void testEquals() {\n        Day day1 = new Day(29, MonthConstants.MARCH, 2002);\n        Hour hour1 = new Hour(15, day1);\n        Minute minute1 = new Minute(15, hour1);\n        Second second1 = new Second(34, minute1);\n        Millisecond milli1 = new Millisecond(999, second1);\n        Day day2 = new Day(29, MonthConstants.MARCH, 2002);\n        Hour hour2 = new Hour(15, day2);\n        Minute minute2 = new Minute(15, hour2);\n        Second second2 = new Second(34, minute2);\n        Millisecond milli2 = new Millisecond(999, second2);\n        assertTrue(milli1.equals(milli2));\n    }",
        "begin_line": 116,
        "end_line": 128,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 59)",
            "(line 118,col 9)-(line 118,col 40)",
            "(line 119,col 9)-(line 119,col 47)",
            "(line 120,col 9)-(line 120,col 49)",
            "(line 121,col 9)-(line 121,col 59)",
            "(line 122,col 9)-(line 122,col 59)",
            "(line 123,col 9)-(line 123,col 40)",
            "(line 124,col 9)-(line 124,col 47)",
            "(line 125,col 9)-(line 125,col 49)",
            "(line 126,col 9)-(line 126,col 59)",
            "(line 127,col 9)-(line 127,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testDateConstructor1()",
        "snippet": "    public void testDateConstructor1() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"GMT\");\n        Calendar c = new GregorianCalendar(zone);\n        Millisecond m1 = new Millisecond(new Date(1016729759122L), zone);\n        Millisecond m2 = new Millisecond(new Date(1016729759123L), zone);\n\n        assertEquals(122, m1.getMillisecond());\n        assertEquals(1016729759122L, m1.getLastMillisecond(c));\n\n        assertEquals(123, m2.getMillisecond());\n        assertEquals(1016729759123L, m2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 135,
        "end_line": 148,
        "comment": "\n     * In GMT, the 4.55:59.123pm on 21 Mar 2002 is \n     * java.util.Date(1016729759123L).  Use this to check the Millisecond \n     * constructor.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 52)",
            "(line 138,col 9)-(line 138,col 49)",
            "(line 139,col 9)-(line 139,col 73)",
            "(line 140,col 9)-(line 140,col 73)",
            "(line 142,col 9)-(line 142,col 47)",
            "(line 143,col 9)-(line 143,col 63)",
            "(line 145,col 9)-(line 145,col 47)",
            "(line 146,col 9)-(line 146,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testDateConstructor2()",
        "snippet": "    public void testDateConstructor2() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"Europe/Tallinn\");\n        Calendar c = new GregorianCalendar(zone);\n        Millisecond m1 = new Millisecond(new Date(1016722559122L), zone);\n        Millisecond m2 = new Millisecond(new Date(1016722559123L), zone);\n\n        assertEquals(122, m1.getMillisecond());\n        assertEquals(1016722559122L, m1.getLastMillisecond(c));\n\n        assertEquals(123, m2.getMillisecond());\n        assertEquals(1016722559123L, m2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 155,
        "end_line": 168,
        "comment": "\n     * In Tallinn, the 4.55:59.123pm on 21 Mar 2002 is \n     * java.util.Date(1016722559123L).  Use this to check the Millisecond \n     * constructor.\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 63)",
            "(line 158,col 9)-(line 158,col 49)",
            "(line 159,col 9)-(line 159,col 73)",
            "(line 160,col 9)-(line 160,col 73)",
            "(line 162,col 9)-(line 162,col 47)",
            "(line 163,col 9)-(line 163,col 63)",
            "(line 165,col 9)-(line 165,col 47)",
            "(line 166,col 9)-(line 166,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        Millisecond m1 = new Millisecond();\n        Millisecond m2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            m2 = (Millisecond) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(m1, m2);\n\n    }",
        "begin_line": 173,
        "end_line": 195,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 43)",
            "(line 176,col 9)-(line 176,col 30)",
            "(line 178,col 9)-(line 192,col 9)",
            "(line 193,col 9)-(line 193,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        Millisecond m1 = new Millisecond(599, 23, 45, 7, 9, 10, 2007);\n        Millisecond m2 = new Millisecond(599, 23, 45, 7, 9, 10, 2007);\n        assertTrue(m1.equals(m2));\n        int hash1 = m1.hashCode();\n        int hash2 = m2.hashCode();\n        assertEquals(hash1, hash2);\n    }",
        "begin_line": 200,
        "end_line": 207,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 70)",
            "(line 202,col 9)-(line 202,col 70)",
            "(line 203,col 9)-(line 203,col 34)",
            "(line 204,col 9)-(line 204,col 34)",
            "(line 205,col 9)-(line 205,col 34)",
            "(line 206,col 9)-(line 206,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.test943985()",
        "snippet": "    public void test943985() {\n        Millisecond ms = new Millisecond(new java.util.Date(4));\n        assertEquals(ms.getFirstMillisecond(), ms.getMiddleMillisecond());\n        assertEquals(ms.getMiddleMillisecond(), ms.getLastMillisecond());\n        ms = new Millisecond(new java.util.Date(5));\n        assertEquals(ms.getFirstMillisecond(), ms.getMiddleMillisecond());\n        assertEquals(ms.getMiddleMillisecond(), ms.getLastMillisecond());\n    }",
        "begin_line": 213,
        "end_line": 220,
        "comment": "\n     * A test for bug report 943985 - the calculation for the middle \n     * millisecond is incorrect for odd milliseconds.\n     ",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 64)",
            "(line 215,col 9)-(line 215,col 74)",
            "(line 216,col 9)-(line 216,col 73)",
            "(line 217,col 9)-(line 217,col 52)",
            "(line 218,col 9)-(line 218,col 74)",
            "(line 219,col 9)-(line 219,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testNotCloneable()",
        "snippet": "    public void testNotCloneable() {\n        Millisecond m = new Millisecond(599, 23, 45, 7, 9, 10, 2007);\n        assertFalse(m instanceof Cloneable);\n    }",
        "begin_line": 226,
        "end_line": 229,
        "comment": "\n     * The {@link Millisecond} class is immutable, so should not be \n     * {@link Cloneable}.\n     ",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 69)",
            "(line 228,col 9)-(line 228,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testGetFirstMillisecond()",
        "snippet": "    public void testGetFirstMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Millisecond m = new Millisecond(500, 15, 43, 15, 1, 4, 2006);\n        assertEquals(1143902595500L, m.getFirstMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 234,
        "end_line": 243,
        "comment": "\n     * Some checks for the getFirstMillisecond() method.\n     ",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 43)",
            "(line 236,col 9)-(line 236,col 37)",
            "(line 237,col 9)-(line 237,col 51)",
            "(line 238,col 9)-(line 238,col 67)",
            "(line 239,col 9)-(line 239,col 69)",
            "(line 240,col 9)-(line 240,col 62)",
            "(line 241,col 9)-(line 241,col 33)",
            "(line 242,col 9)-(line 242,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testGetFirstMillisecondWithTimeZone()",
        "snippet": "    public void testGetFirstMillisecondWithTimeZone() {\n        Millisecond m = new Millisecond(500, 50, 59, 15, 1, 4, 1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-623289609500L, m.getFirstMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            m.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 248,
        "end_line": 263,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 69)",
            "(line 250,col 9)-(line 250,col 68)",
            "(line 251,col 9)-(line 251,col 49)",
            "(line 252,col 9)-(line 252,col 63)",
            "(line 255,col 9)-(line 255,col 29)",
            "(line 256,col 9)-(line 261,col 9)",
            "(line 262,col 9)-(line 262,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testGetFirstMillisecondWithCalendar()",
        "snippet": "    public void testGetFirstMillisecondWithCalendar() {\n        Millisecond m = new Millisecond(500, 55, 40, 2, 15, 4, 2000);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(955766455500L, m.getFirstMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            m.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }    ",
        "begin_line": 268,
        "end_line": 283,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 69)",
            "(line 270,col 9)-(line 270,col 75)",
            "(line 271,col 9)-(line 271,col 71)",
            "(line 272,col 9)-(line 272,col 69)",
            "(line 275,col 9)-(line 275,col 29)",
            "(line 276,col 9)-(line 281,col 9)",
            "(line 282,col 9)-(line 282,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testGetLastMillisecond()",
        "snippet": "    public void testGetLastMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Millisecond m = new Millisecond(750, 1, 1, 1, 1, 1, 1970);\n        assertEquals(61750L, m.getLastMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 288,
        "end_line": 297,
        "comment": "\n     * Some checks for the getLastMillisecond() method.\n     ",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 43)",
            "(line 290,col 9)-(line 290,col 37)",
            "(line 291,col 9)-(line 291,col 51)",
            "(line 292,col 9)-(line 292,col 67)",
            "(line 293,col 9)-(line 293,col 66)",
            "(line 294,col 9)-(line 294,col 53)",
            "(line 295,col 9)-(line 295,col 33)",
            "(line 296,col 9)-(line 296,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testGetLastMillisecondWithTimeZone()",
        "snippet": "    public void testGetLastMillisecondWithTimeZone() {\n        Millisecond m = new Millisecond(750, 55, 1, 2, 7, 7, 1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-614962684250L, m.getLastMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            m.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 302,
        "end_line": 317,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 67)",
            "(line 304,col 9)-(line 304,col 68)",
            "(line 305,col 9)-(line 305,col 49)",
            "(line 306,col 9)-(line 306,col 62)",
            "(line 309,col 9)-(line 309,col 29)",
            "(line 310,col 9)-(line 315,col 9)",
            "(line 316,col 9)-(line 316,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testGetLastMillisecondWithCalendar()",
        "snippet": "    public void testGetLastMillisecondWithCalendar() {\n        Millisecond m = new Millisecond(250, 50, 45, 21, 21, 4, 2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(987889550250L, m.getLastMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            m.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    } ",
        "begin_line": 322,
        "end_line": 337,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 323,col 9)-(line 323,col 70)",
            "(line 324,col 9)-(line 324,col 75)",
            "(line 325,col 9)-(line 325,col 71)",
            "(line 326,col 9)-(line 326,col 68)",
            "(line 329,col 9)-(line 329,col 29)",
            "(line 330,col 9)-(line 335,col 9)",
            "(line 336,col 9)-(line 336,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testGetSerialIndex()",
        "snippet": "    public void testGetSerialIndex() {\n        Millisecond m = new Millisecond(500, 1, 1, 1, 1, 1, 2000);\n        assertEquals(3155850061500L, m.getSerialIndex());\n        m = new Millisecond(500, 1, 1, 1, 1, 1, 1900);\n        // TODO: this must be wrong...\n        assertEquals(176461500L, m.getSerialIndex());\n    }",
        "begin_line": 342,
        "end_line": 348,
        "comment": "\n     * Some checks for the getSerialIndex() method.\n     ",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 66)",
            "(line 344,col 9)-(line 344,col 57)",
            "(line 345,col 9)-(line 345,col 54)",
            "(line 347,col 9)-(line 347,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testNext()",
        "snippet": "    public void testNext() {\n        Millisecond m = new Millisecond(555, 55, 30, 1, 12, 12, 2000);\n        m = (Millisecond) m.next();\n        assertEquals(2000, m.getSecond().getMinute().getHour().getYear());\n        assertEquals(12, m.getSecond().getMinute().getHour().getMonth());\n        assertEquals(12, m.getSecond().getMinute().getHour().getDayOfMonth());\n        assertEquals(1, m.getSecond().getMinute().getHour().getHour());\n        assertEquals(30, m.getSecond().getMinute().getMinute());\n        assertEquals(55, m.getSecond().getSecond());\n        assertEquals(556, m.getMillisecond());\n        m = new Millisecond(999, 59, 59, 23, 31, 12, 9999);\n        assertNull(m.next());\n    }",
        "begin_line": 353,
        "end_line": 365,
        "comment": "\n     * Some checks for the testNext() method.\n     ",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 70)",
            "(line 355,col 9)-(line 355,col 35)",
            "(line 356,col 9)-(line 356,col 74)",
            "(line 357,col 9)-(line 357,col 73)",
            "(line 358,col 9)-(line 358,col 78)",
            "(line 359,col 9)-(line 359,col 71)",
            "(line 360,col 9)-(line 360,col 64)",
            "(line 361,col 9)-(line 361,col 52)",
            "(line 362,col 9)-(line 362,col 46)",
            "(line 363,col 9)-(line 363,col 59)",
            "(line 364,col 9)-(line 364,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testGetStart()",
        "snippet": "    public void testGetStart() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JANUARY, 16, 3, 47, 55);\n        cal.set(Calendar.MILLISECOND, 555);\n        Millisecond m = new Millisecond(555, 55, 47, 3, 16, 1, 2006);\n        assertEquals(cal.getTime(), m.getStart());\n        Locale.setDefault(saved);        \n    }",
        "begin_line": 370,
        "end_line": 379,
        "comment": "\n     * Some checks for the getStart() method.\n     ",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 43)",
            "(line 372,col 9)-(line 372,col 40)",
            "(line 373,col 9)-(line 373,col 58)",
            "(line 374,col 9)-(line 374,col 55)",
            "(line 375,col 9)-(line 375,col 43)",
            "(line 376,col 9)-(line 376,col 69)",
            "(line 377,col 9)-(line 377,col 50)",
            "(line 378,col 9)-(line 378,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MillisecondTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MillisecondTests.java",
        "signature": "org.jfree.data.time.junit.MillisecondTests.testGetEnd()",
        "snippet": "    public void testGetEnd() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JANUARY, 16, 3, 47, 55);\n        cal.set(Calendar.MILLISECOND, 555);\n        Millisecond m = new Millisecond(555, 55, 47, 3, 16, 1, 2006);\n        assertEquals(cal.getTime(), m.getEnd());\n        Locale.setDefault(saved);                \n    }",
        "begin_line": 384,
        "end_line": 393,
        "comment": "\n     * Some checks for the getEnd() method.\n     ",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 43)",
            "(line 386,col 9)-(line 386,col 40)",
            "(line 387,col 9)-(line 387,col 58)",
            "(line 388,col 9)-(line 388,col 55)",
            "(line 389,col 9)-(line 389,col 43)",
            "(line 390,col 9)-(line 390,col 69)",
            "(line 391,col 9)-(line 391,col 48)",
            "(line 392,col 9)-(line 392,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MinuteTests.class);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.MinuteTests(java.lang.String)",
        "snippet": "    public MinuteTests(String name) {\n        super(name);\n    }",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.setUp()",
        "snippet": "    protected void setUp() {\n        // no setup\n    }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testEqualsSelf()",
        "snippet": "    public void testEqualsSelf() {\n        Minute minute = new Minute();\n        assertTrue(minute.equals(minute));\n    }",
        "begin_line": 107,
        "end_line": 110,
        "comment": "\n     * Check that a Minute instance is equal to itself.\n     *\n     * SourceForge Bug ID: 558850.\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 37)",
            "(line 109,col 9)-(line 109,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testEquals()",
        "snippet": "    public void testEquals() {\n        Day day1 = new Day(29, MonthConstants.MARCH, 2002);\n        Hour hour1 = new Hour(15, day1);\n        Minute minute1 = new Minute(15, hour1);\n        Day day2 = new Day(29, MonthConstants.MARCH, 2002);\n        Hour hour2 = new Hour(15, day2);\n        Minute minute2 = new Minute(15, hour2);\n        assertTrue(minute1.equals(minute2));\n    }",
        "begin_line": 115,
        "end_line": 123,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 59)",
            "(line 117,col 9)-(line 117,col 40)",
            "(line 118,col 9)-(line 118,col 47)",
            "(line 119,col 9)-(line 119,col 59)",
            "(line 120,col 9)-(line 120,col 40)",
            "(line 121,col 9)-(line 121,col 47)",
            "(line 122,col 9)-(line 122,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testDateConstructor1()",
        "snippet": "    public void testDateConstructor1() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"GMT\");\n        Calendar c = new GregorianCalendar(zone);\n        Minute m1 = new Minute(new Date(1016729699999L), zone);\n        Minute m2 = new Minute(new Date(1016729700000L), zone);\n\n        assertEquals(54, m1.getMinute());\n        assertEquals(1016729699999L, m1.getLastMillisecond(c));\n\n        assertEquals(55, m2.getMinute());\n        assertEquals(1016729700000L, m2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 129,
        "end_line": 142,
        "comment": "\n     * In GMT, the 4.55pm on 21 Mar 2002 is java.util.Date(1016729700000L).\n     * Use this to check the Minute constructor.\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 52)",
            "(line 132,col 9)-(line 132,col 49)",
            "(line 133,col 9)-(line 133,col 63)",
            "(line 134,col 9)-(line 134,col 63)",
            "(line 136,col 9)-(line 136,col 41)",
            "(line 137,col 9)-(line 137,col 63)",
            "(line 139,col 9)-(line 139,col 41)",
            "(line 140,col 9)-(line 140,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testDateConstructor2()",
        "snippet": "    public void testDateConstructor2() {\n\n        TimeZone zone = TimeZone.getTimeZone(\"Asia/Singapore\");\n        Calendar c = new GregorianCalendar(zone);\n        Minute m1 = new Minute(new Date(1016700899999L), zone);\n        Minute m2 = new Minute(new Date(1016700900000L), zone);\n\n        assertEquals(54, m1.getMinute());\n        assertEquals(1016700899999L, m1.getLastMillisecond(c));\n\n        assertEquals(55, m2.getMinute());\n        assertEquals(1016700900000L, m2.getFirstMillisecond(c));\n\n    }",
        "begin_line": 149,
        "end_line": 162,
        "comment": "\n     * In Singapore, the 4.55pm on 21 Mar 2002 is \n     * java.util.Date(1,014,281,700,000L). Use this to check the Minute \n     * constructor.\n     ",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 63)",
            "(line 152,col 9)-(line 152,col 49)",
            "(line 153,col 9)-(line 153,col 63)",
            "(line 154,col 9)-(line 154,col 63)",
            "(line 156,col 9)-(line 156,col 41)",
            "(line 157,col 9)-(line 157,col 63)",
            "(line 159,col 9)-(line 159,col 41)",
            "(line 160,col 9)-(line 160,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        Minute m1 = new Minute();\n        Minute m2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            m2 = (Minute) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(m1, m2);\n\n    }",
        "begin_line": 167,
        "end_line": 189,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 33)",
            "(line 170,col 9)-(line 170,col 25)",
            "(line 172,col 9)-(line 186,col 9)",
            "(line 187,col 9)-(line 187,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        Minute m1 = new Minute(45, 5, 1, 2, 2003);\n        Minute m2 = new Minute(45, 5, 1, 2, 2003);\n        assertTrue(m1.equals(m2));\n        int h1 = m1.hashCode();\n        int h2 = m2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 194,
        "end_line": 201,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 50)",
            "(line 196,col 9)-(line 196,col 50)",
            "(line 197,col 9)-(line 197,col 34)",
            "(line 198,col 9)-(line 198,col 31)",
            "(line 199,col 9)-(line 199,col 31)",
            "(line 200,col 9)-(line 200,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testNotCloneable()",
        "snippet": "    public void testNotCloneable() {\n        Minute m = new Minute(45, 5, 1, 2, 2003);\n        assertFalse(m instanceof Cloneable);\n    }",
        "begin_line": 207,
        "end_line": 210,
        "comment": "\n     * The {@link Minute} class is immutable, so should not be \n     * {@link Cloneable}.\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 49)",
            "(line 209,col 9)-(line 209,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testGetFirstMillisecond()",
        "snippet": "    public void testGetFirstMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Minute m = new Minute(43, 15, 1, 4, 2006);\n        assertEquals(1143902580000L, m.getFirstMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 215,
        "end_line": 224,
        "comment": "\n     * Some checks for the getFirstMillisecond() method.\n     ",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 43)",
            "(line 217,col 9)-(line 217,col 37)",
            "(line 218,col 9)-(line 218,col 51)",
            "(line 219,col 9)-(line 219,col 67)",
            "(line 220,col 9)-(line 220,col 50)",
            "(line 221,col 9)-(line 221,col 62)",
            "(line 222,col 9)-(line 222,col 33)",
            "(line 223,col 9)-(line 223,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testGetFirstMillisecondWithTimeZone()",
        "snippet": "    public void testGetFirstMillisecondWithTimeZone() {\n        Minute m = new Minute(59, 15, 1, 4, 1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-623289660000L, m.getFirstMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            m.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 229,
        "end_line": 244,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 50)",
            "(line 231,col 9)-(line 231,col 68)",
            "(line 232,col 9)-(line 232,col 49)",
            "(line 233,col 9)-(line 233,col 63)",
            "(line 236,col 9)-(line 236,col 29)",
            "(line 237,col 9)-(line 242,col 9)",
            "(line 243,col 9)-(line 243,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testGetFirstMillisecondWithCalendar()",
        "snippet": "    public void testGetFirstMillisecondWithCalendar() {\n        Minute m = new Minute(40, 2, 15, 4, 2000);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));        \n        assertEquals(955766400000L, m.getFirstMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            m.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }    ",
        "begin_line": 249,
        "end_line": 264,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 50)",
            "(line 251,col 9)-(line 251,col 75)",
            "(line 252,col 9)-(line 252,col 71)",
            "(line 253,col 9)-(line 253,col 69)",
            "(line 256,col 9)-(line 256,col 29)",
            "(line 257,col 9)-(line 262,col 9)",
            "(line 263,col 9)-(line 263,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testGetLastMillisecond()",
        "snippet": "    public void testGetLastMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Minute m = new Minute(1, 1, 1, 1, 1970);\n        assertEquals(119999L, m.getLastMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 269,
        "end_line": 278,
        "comment": "\n     * Some checks for the getLastMillisecond() method.\n     ",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 43)",
            "(line 271,col 9)-(line 271,col 37)",
            "(line 272,col 9)-(line 272,col 51)",
            "(line 273,col 9)-(line 273,col 67)",
            "(line 274,col 9)-(line 274,col 48)",
            "(line 275,col 9)-(line 275,col 54)",
            "(line 276,col 9)-(line 276,col 33)",
            "(line 277,col 9)-(line 277,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testGetLastMillisecondWithTimeZone()",
        "snippet": "    public void testGetLastMillisecondWithTimeZone() {\n        Minute m = new Minute(1, 2, 7, 7, 1950);\n        TimeZone zone = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        Calendar c = new GregorianCalendar(zone);\n        assertEquals(-614962680001L, m.getLastMillisecond(c));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            m.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);            \n    }",
        "begin_line": 283,
        "end_line": 298,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 48)",
            "(line 285,col 9)-(line 285,col 68)",
            "(line 286,col 9)-(line 286,col 49)",
            "(line 287,col 9)-(line 287,col 62)",
            "(line 290,col 9)-(line 290,col 29)",
            "(line 291,col 9)-(line 296,col 9)",
            "(line 297,col 9)-(line 297,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testGetLastMillisecondWithCalendar()",
        "snippet": "    public void testGetLastMillisecondWithCalendar() {\n        Minute m = new Minute(45, 21, 21, 4, 2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(987889559999L, m.getLastMillisecond(calendar));\n        \n        // try null calendar\n        boolean pass = false;\n        try {\n            m.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    } ",
        "begin_line": 303,
        "end_line": 318,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 51)",
            "(line 305,col 9)-(line 305,col 75)",
            "(line 306,col 9)-(line 306,col 71)",
            "(line 307,col 9)-(line 307,col 68)",
            "(line 310,col 9)-(line 310,col 29)",
            "(line 311,col 9)-(line 316,col 9)",
            "(line 317,col 9)-(line 317,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testGetSerialIndex()",
        "snippet": "    public void testGetSerialIndex() {\n        Minute m = new Minute(1, 1, 1, 1, 2000);\n        assertEquals(52597501L, m.getSerialIndex());\n        m = new Minute(1, 1, 1, 1, 1900);\n        assertEquals(2941L, m.getSerialIndex());\n    }",
        "begin_line": 323,
        "end_line": 328,
        "comment": "\n     * Some checks for the getSerialIndex() method.\n     ",
        "child_ranges": [
            "(line 324,col 9)-(line 324,col 48)",
            "(line 325,col 9)-(line 325,col 52)",
            "(line 326,col 9)-(line 326,col 41)",
            "(line 327,col 9)-(line 327,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testNext()",
        "snippet": "    public void testNext() {\n        Minute m = new Minute(30, 1, 12, 12, 2000);\n        m = (Minute) m.next();\n        assertEquals(2000, m.getHour().getYear());\n        assertEquals(12, m.getHour().getMonth());\n        assertEquals(12, m.getHour().getDayOfMonth());\n        assertEquals(1, m.getHour().getHour());\n        assertEquals(31, m.getMinute());\n        m = new Minute(59, 23, 31, 12, 9999);\n        assertNull(m.next());\n    }",
        "begin_line": 333,
        "end_line": 343,
        "comment": "\n     * Some checks for the testNext() method.\n     ",
        "child_ranges": [
            "(line 334,col 9)-(line 334,col 51)",
            "(line 335,col 9)-(line 335,col 30)",
            "(line 336,col 9)-(line 336,col 50)",
            "(line 337,col 9)-(line 337,col 49)",
            "(line 338,col 9)-(line 338,col 54)",
            "(line 339,col 9)-(line 339,col 47)",
            "(line 340,col 9)-(line 340,col 40)",
            "(line 341,col 9)-(line 341,col 45)",
            "(line 342,col 9)-(line 342,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testGetStart()",
        "snippet": "    public void testGetStart() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/Rome\"));\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JANUARY, 16, 3, 47, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Minute m = new Minute(47, 3, 16, 1, 2006);\n        assertEquals(cal.getTime(), m.getStart());\n        Locale.setDefault(saved);       \n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 348,
        "end_line": 360,
        "comment": "\n     * Some checks for the getStart() method.\n     ",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 43)",
            "(line 350,col 9)-(line 350,col 40)",
            "(line 351,col 9)-(line 351,col 51)",
            "(line 352,col 9)-(line 352,col 65)",
            "(line 353,col 9)-(line 353,col 58)",
            "(line 354,col 9)-(line 354,col 54)",
            "(line 355,col 9)-(line 355,col 41)",
            "(line 356,col 9)-(line 356,col 50)",
            "(line 357,col 9)-(line 357,col 50)",
            "(line 358,col 9)-(line 358,col 33)",
            "(line 359,col 9)-(line 359,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.testGetEnd()",
        "snippet": "    public void testGetEnd() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/Rome\"));\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JANUARY, 16, 3, 47, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        Minute m = new Minute(47, 3, 16, 1, 2006);\n        assertEquals(cal.getTime(), m.getEnd());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }",
        "begin_line": 365,
        "end_line": 377,
        "comment": "\n     * Some checks for the getEnd() method.\n     ",
        "child_ranges": [
            "(line 366,col 9)-(line 366,col 43)",
            "(line 367,col 9)-(line 367,col 40)",
            "(line 368,col 9)-(line 368,col 51)",
            "(line 369,col 9)-(line 369,col 65)",
            "(line 370,col 9)-(line 370,col 58)",
            "(line 371,col 9)-(line 371,col 55)",
            "(line 372,col 9)-(line 372,col 43)",
            "(line 373,col 9)-(line 373,col 50)",
            "(line 374,col 9)-(line 374,col 48)",
            "(line 375,col 9)-(line 375,col 33)",
            "(line 376,col 9)-(line 376,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.MinuteTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/MinuteTests.java",
        "signature": "org.jfree.data.time.junit.MinuteTests.test1611872()",
        "snippet": "    public void test1611872() {\n        Minute m1 = new Minute(0, 10, 15, 4, 2000);\n        Minute m2 = (Minute) m1.previous();\n        assertEquals(m2, new Minute(59, 9, 15, 4, 2000));\n    }",
        "begin_line": 382,
        "end_line": 386,
        "comment": "\n     * Test for bug 1611872 - previous() fails for first minute in hour.\n     ",
        "child_ranges": [
            "(line 383,col 9)-(line 383,col 51)",
            "(line 384,col 9)-(line 384,col 43)",
            "(line 385,col 9)-(line 385,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesCollectionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TimeSeriesCollectionTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesCollectionTests.TimeSeriesCollectionTests(java.lang.String)",
        "snippet": "    public TimeSeriesCollectionTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesCollectionTests.testEquals()",
        "snippet": "    public void testEquals() {\n\n        TimeSeriesCollection c1 = new TimeSeriesCollection();\n        TimeSeriesCollection c2 = new TimeSeriesCollection();\n\n        TimeSeries s1 = new TimeSeries(\"Series 1\");\n        TimeSeries s2 = new TimeSeries(\"Series 2\");\n\n        // newly created collections should be equal\n        boolean b1 = c1.equals(c2);\n        assertTrue(\"b1\", b1);\n\n        // add series to collection 1, should be not equal\n        c1.addSeries(s1);\n        c1.addSeries(s2);\n        boolean b2 = c1.equals(c2);\n        assertFalse(\"b2\", b2);\n\n        // now add the same series to collection 2 to make them equal again...\n        c2.addSeries(s1);\n        c2.addSeries(s2);\n        boolean b3 = c1.equals(c2);\n        assertTrue(\"b3\", b3);\n\n        // now remove series 2 from collection 2\n        c2.removeSeries(s2);\n        boolean b4 = c1.equals(c2);\n        assertFalse(\"b4\", b4);\n\n        // now remove series 2 from collection 1 to make them equal again\n        c1.removeSeries(s2);\n        boolean b5 = c1.equals(c2);\n        assertTrue(\"b5\", b5);\n    }",
        "begin_line": 88,
        "end_line": 121,
        "comment": "\n     * Some tests for the equals() method.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 61)",
            "(line 91,col 9)-(line 91,col 61)",
            "(line 93,col 9)-(line 93,col 51)",
            "(line 94,col 9)-(line 94,col 51)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 29)",
            "(line 101,col 9)-(line 101,col 25)",
            "(line 102,col 9)-(line 102,col 25)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 30)",
            "(line 107,col 9)-(line 107,col 25)",
            "(line 108,col 9)-(line 108,col 25)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 110,col 29)",
            "(line 113,col 9)-(line 113,col 28)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 30)",
            "(line 118,col 9)-(line 118,col 28)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 120,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesCollectionTests.testRemoveSeries()",
        "snippet": "    public void testRemoveSeries() {\n\n        TimeSeriesCollection c1 = new TimeSeriesCollection();\n\n        TimeSeries s1 = new TimeSeries(\"Series 1\");\n        TimeSeries s2 = new TimeSeries(\"Series 2\");\n        TimeSeries s3 = new TimeSeries(\"Series 3\");\n        TimeSeries s4 = new TimeSeries(\"Series 4\");\n\n        c1.addSeries(s1);\n        c1.addSeries(s2);\n        c1.addSeries(s3);\n        c1.addSeries(s4);\n\n        c1.removeSeries(s3);\n\n        TimeSeries s = c1.getSeries(2);\n        boolean b1 = s.equals(s4);\n        assertTrue(b1);\n\n    }",
        "begin_line": 126,
        "end_line": 146,
        "comment": "\n     * Tests the remove series method.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 61)",
            "(line 130,col 9)-(line 130,col 51)",
            "(line 131,col 9)-(line 131,col 51)",
            "(line 132,col 9)-(line 132,col 51)",
            "(line 133,col 9)-(line 133,col 51)",
            "(line 135,col 9)-(line 135,col 25)",
            "(line 136,col 9)-(line 136,col 25)",
            "(line 137,col 9)-(line 137,col 25)",
            "(line 138,col 9)-(line 138,col 25)",
            "(line 140,col 9)-(line 140,col 28)",
            "(line 142,col 9)-(line 142,col 39)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 144,col 9)-(line 144,col 23)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesCollectionTests.testGetSurroundingItems()",
        "snippet": "    public void testGetSurroundingItems() {\n        \n        TimeSeries series = new TimeSeries(\"Series 1\", Day.class);\n        TimeSeriesCollection collection = new TimeSeriesCollection(series);\n        collection.setXPosition(TimePeriodAnchor.MIDDLE);\n        \n        // for a series with no data, we expect {-1, -1}...\n        int[] result = collection.getSurroundingItems(0, 1000L);\n        assertTrue(result[0] == -1);\n        assertTrue(result[1] == -1);\n        \n        // now test with a single value in the series...\n        Day today = new Day();\n        long start1 = today.getFirstMillisecond();\n        long middle1 = today.getMiddleMillisecond();\n        long end1 = today.getLastMillisecond();\n        \n        series.add(today, 99.9);\n        result = collection.getSurroundingItems(0, start1);\n        assertTrue(result[0] == -1);\n        assertTrue(result[1] == 0);\n        \n        result = collection.getSurroundingItems(0, middle1);\n        assertTrue(result[0] == 0);\n        assertTrue(result[1] == 0);\n        \n        result = collection.getSurroundingItems(0, end1);\n        assertTrue(result[0] == 0);\n        assertTrue(result[1] == -1);\n        \n        // now add a second value to the series...\n        Day tomorrow = (Day) today.next();\n        long start2 = tomorrow.getFirstMillisecond();\n        long middle2 = tomorrow.getMiddleMillisecond();\n        long end2 = tomorrow.getLastMillisecond();\n        \n        series.add(tomorrow, 199.9);\n        result = collection.getSurroundingItems(0, start2);\n        assertTrue(result[0] == 0);\n        assertTrue(result[1] == 1);\n        \n        result = collection.getSurroundingItems(0, middle2);\n        assertTrue(result[0] == 1);\n        assertTrue(result[1] == 1);\n        \n        result = collection.getSurroundingItems(0, end2);\n        assertTrue(result[0] == 1);\n        assertTrue(result[1] == -1);\n        \n        // now add a third value to the series...\n        Day yesterday = (Day) today.previous();\n        long start3 = yesterday.getFirstMillisecond();\n        long middle3 = yesterday.getMiddleMillisecond();\n        long end3 = yesterday.getLastMillisecond();\n        \n        series.add(yesterday, 1.23);\n        result = collection.getSurroundingItems(0, start3);\n        assertTrue(result[0] == -1);\n        assertTrue(result[1] == 0);\n        \n        result = collection.getSurroundingItems(0, middle3);\n        assertTrue(result[0] == 0);\n        assertTrue(result[1] == 0);\n        \n        result = collection.getSurroundingItems(0, end3);\n        assertTrue(result[0] == 0);\n        assertTrue(result[1] == 1);\n        \n    }",
        "begin_line": 152,
        "end_line": 220,
        "comment": "\n     * Test the getSurroundingItems() method to ensure it is returning the \n     * values we expect.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 66)",
            "(line 155,col 9)-(line 155,col 75)",
            "(line 156,col 9)-(line 156,col 57)",
            "(line 159,col 9)-(line 159,col 64)",
            "(line 160,col 9)-(line 160,col 36)",
            "(line 161,col 9)-(line 161,col 36)",
            "(line 164,col 9)-(line 164,col 30)",
            "(line 165,col 9)-(line 165,col 50)",
            "(line 166,col 9)-(line 166,col 52)",
            "(line 167,col 9)-(line 167,col 47)",
            "(line 169,col 9)-(line 169,col 32)",
            "(line 170,col 9)-(line 170,col 59)",
            "(line 171,col 9)-(line 171,col 36)",
            "(line 172,col 9)-(line 172,col 35)",
            "(line 174,col 9)-(line 174,col 60)",
            "(line 175,col 9)-(line 175,col 35)",
            "(line 176,col 9)-(line 176,col 35)",
            "(line 178,col 9)-(line 178,col 57)",
            "(line 179,col 9)-(line 179,col 35)",
            "(line 180,col 9)-(line 180,col 36)",
            "(line 183,col 9)-(line 183,col 42)",
            "(line 184,col 9)-(line 184,col 53)",
            "(line 185,col 9)-(line 185,col 55)",
            "(line 186,col 9)-(line 186,col 50)",
            "(line 188,col 9)-(line 188,col 36)",
            "(line 189,col 9)-(line 189,col 59)",
            "(line 190,col 9)-(line 190,col 35)",
            "(line 191,col 9)-(line 191,col 35)",
            "(line 193,col 9)-(line 193,col 60)",
            "(line 194,col 9)-(line 194,col 35)",
            "(line 195,col 9)-(line 195,col 35)",
            "(line 197,col 9)-(line 197,col 57)",
            "(line 198,col 9)-(line 198,col 35)",
            "(line 199,col 9)-(line 199,col 36)",
            "(line 202,col 9)-(line 202,col 47)",
            "(line 203,col 9)-(line 203,col 54)",
            "(line 204,col 9)-(line 204,col 56)",
            "(line 205,col 9)-(line 205,col 51)",
            "(line 207,col 9)-(line 207,col 36)",
            "(line 208,col 9)-(line 208,col 59)",
            "(line 209,col 9)-(line 209,col 36)",
            "(line 210,col 9)-(line 210,col 35)",
            "(line 212,col 9)-(line 212,col 60)",
            "(line 213,col 9)-(line 213,col 35)",
            "(line 214,col 9)-(line 214,col 35)",
            "(line 216,col 9)-(line 216,col 57)",
            "(line 217,col 9)-(line 217,col 35)",
            "(line 218,col 9)-(line 218,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesCollectionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        TimeSeriesCollection c1 = new TimeSeriesCollection(createSeries());\n        TimeSeriesCollection c2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            c2 = (TimeSeriesCollection) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(c1, c2);\n\n    }",
        "begin_line": 225,
        "end_line": 247,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 75)",
            "(line 228,col 9)-(line 228,col 39)",
            "(line 230,col 9)-(line 244,col 9)",
            "(line 245,col 9)-(line 245,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesCollectionTests.createSeries()",
        "snippet": "    private TimeSeries createSeries() {\n        RegularTimePeriod t = new Day();\n        TimeSeries series = new TimeSeries(\"Test\");\n        series.add(t, 1.0);\n        t = t.next();\n        series.add(t, 2.0);\n        t = t.next();\n        series.add(t, null);\n        t = t.next();\n        series.add(t, 4.0);\n        return series;\n    }",
        "begin_line": 254,
        "end_line": 265,
        "comment": "\n     * Creates a time series for testing.\n     * \n     * @return A time series.\n     ",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 40)",
            "(line 256,col 9)-(line 256,col 51)",
            "(line 257,col 9)-(line 257,col 27)",
            "(line 258,col 9)-(line 258,col 21)",
            "(line 259,col 9)-(line 259,col 27)",
            "(line 260,col 9)-(line 260,col 21)",
            "(line 261,col 9)-(line 261,col 28)",
            "(line 262,col 9)-(line 262,col 21)",
            "(line 263,col 9)-(line 263,col 27)",
            "(line 264,col 9)-(line 264,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesCollectionTests.test1170825()",
        "snippet": "    public void test1170825() {\n        TimeSeries s1 = new TimeSeries(\"Series1\");\n        TimeSeriesCollection dataset = new TimeSeriesCollection();\n        dataset.addSeries(s1);\n        try {\n            /* TimeSeries s = */ dataset.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            // correct outcome\n        }\n        catch (IndexOutOfBoundsException e) {\n            assertTrue(false);  // wrong outcome\n        }        \n    }",
        "begin_line": 270,
        "end_line": 283,
        "comment": "\n     * A test for bug report 1170825.\n     ",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 50)",
            "(line 272,col 9)-(line 272,col 66)",
            "(line 273,col 9)-(line 273,col 30)",
            "(line 274,col 9)-(line 282,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesCollectionTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesCollectionTests.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        TimeSeries s2 = new TimeSeries(\"S2\");\n        TimeSeriesCollection dataset = new TimeSeriesCollection();\n        assertEquals(-1, dataset.indexOf(s1));\n        assertEquals(-1, dataset.indexOf(s2));\n        \n        dataset.addSeries(s1);\n        assertEquals(0, dataset.indexOf(s1));\n        assertEquals(-1, dataset.indexOf(s2));\n        \n        dataset.addSeries(s2);\n        assertEquals(0, dataset.indexOf(s1));\n        assertEquals(1, dataset.indexOf(s2));\n        \n        dataset.removeSeries(s1);\n        assertEquals(-1, dataset.indexOf(s1));\n        assertEquals(0, dataset.indexOf(s2));\n        \n        TimeSeries s2b = new TimeSeries(\"S2\");\n        assertEquals(0, dataset.indexOf(s2b));\n    }",
        "begin_line": 288,
        "end_line": 309,
        "comment": "\n     * Some tests for the indexOf() method.\n     ",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 45)",
            "(line 290,col 9)-(line 290,col 45)",
            "(line 291,col 9)-(line 291,col 66)",
            "(line 292,col 9)-(line 292,col 46)",
            "(line 293,col 9)-(line 293,col 46)",
            "(line 295,col 9)-(line 295,col 30)",
            "(line 296,col 9)-(line 296,col 45)",
            "(line 297,col 9)-(line 297,col 46)",
            "(line 299,col 9)-(line 299,col 30)",
            "(line 300,col 9)-(line 300,col 45)",
            "(line 301,col 9)-(line 301,col 45)",
            "(line 303,col 9)-(line 303,col 33)",
            "(line 304,col 9)-(line 304,col 46)",
            "(line 305,col 9)-(line 305,col 45)",
            "(line 307,col 9)-(line 307,col 46)",
            "(line 308,col 9)-(line 308,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYSeriesTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.XYSeriesTests(java.lang.String)",
        "snippet": "    public XYSeriesTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        XYSeries s1 = new XYSeries(\"Series\");\n        s1.add(1.0, 1.1);\n        XYSeries s2 = new XYSeries(\"Series\");\n        s2.add(1.0, 1.1);\n        assertTrue(s1.equals(s2));\n        assertTrue(s2.equals(s1));\n\n        s1.setKey(\"Series X\");\n        assertFalse(s1.equals(s2));\n\n        s2.setKey(\"Series X\");\n        assertTrue(s1.equals(s2));\n\n    }",
        "begin_line": 88,
        "end_line": 103,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 45)",
            "(line 91,col 9)-(line 91,col 25)",
            "(line 92,col 9)-(line 92,col 45)",
            "(line 93,col 9)-(line 93,col 25)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 97,col 9)-(line 97,col 30)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 100,col 9)-(line 100,col 30)",
            "(line 101,col 9)-(line 101,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        XYSeries s1 = new XYSeries(\"Test\");\n        XYSeries s2 = new XYSeries(\"Test\");\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n        \n        s1.add(1.0, 500.0);\n        s2.add(1.0, 500.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n        \n        s1.add(2.0, null);\n        s2.add(2.0, null);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n        \n        s1.add(5.0, 111.0);\n        s2.add(5.0, 111.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(9.0, 1.0);\n        s2.add(9.0, 1.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n    }",
        "begin_line": 108,
        "end_line": 133,
        "comment": "\n     * Some simple checks for the hashCode() method.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 43)",
            "(line 110,col 9)-(line 110,col 43)",
            "(line 111,col 9)-(line 111,col 29)",
            "(line 112,col 9)-(line 112,col 51)",
            "(line 114,col 9)-(line 114,col 27)",
            "(line 115,col 9)-(line 115,col 27)",
            "(line 116,col 9)-(line 116,col 29)",
            "(line 117,col 9)-(line 117,col 51)",
            "(line 119,col 9)-(line 119,col 26)",
            "(line 120,col 9)-(line 120,col 26)",
            "(line 121,col 9)-(line 121,col 29)",
            "(line 122,col 9)-(line 122,col 51)",
            "(line 124,col 9)-(line 124,col 27)",
            "(line 125,col 9)-(line 125,col 27)",
            "(line 126,col 9)-(line 126,col 29)",
            "(line 127,col 9)-(line 127,col 51)",
            "(line 129,col 9)-(line 129,col 25)",
            "(line 130,col 9)-(line 130,col 25)",
            "(line 131,col 9)-(line 131,col 29)",
            "(line 132,col 9)-(line 132,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYSeries s1 = new XYSeries(\"Series\");\n        s1.add(1.0, 1.1);\n        XYSeries s2 = null;\n        try {\n            s2 = (XYSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n    }",
        "begin_line": 138,
        "end_line": 151,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 45)",
            "(line 140,col 9)-(line 140,col 25)",
            "(line 141,col 9)-(line 141,col 27)",
            "(line 142,col 9)-(line 147,col 9)",
            "(line 148,col 9)-(line 148,col 29)",
            "(line 149,col 9)-(line 149,col 51)",
            "(line 150,col 9)-(line 150,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n        XYSeries s1 = new XYSeries(\"S1\");\n        s1.add(1.0, 100.0);\n        s1.add(2.0, null);\n        s1.add(3.0, 200.0);\n        XYSeries s2 = null;\n        try {\n            s2 = (XYSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1.equals(s2));\n        \n        // check independence\n        s2.add(4.0, 300.0);\n        assertFalse(s1.equals(s2));\n        s1.add(4.0, 300.0);\n        assertTrue(s1.equals(s2));\n    }",
        "begin_line": 156,
        "end_line": 175,
        "comment": "\n     * Another test of the clone() method.\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 41)",
            "(line 158,col 9)-(line 158,col 27)",
            "(line 159,col 9)-(line 159,col 26)",
            "(line 160,col 9)-(line 160,col 27)",
            "(line 161,col 9)-(line 161,col 27)",
            "(line 162,col 9)-(line 167,col 9)",
            "(line 168,col 9)-(line 168,col 34)",
            "(line 171,col 9)-(line 171,col 27)",
            "(line 172,col 9)-(line 172,col 35)",
            "(line 173,col 9)-(line 173,col 27)",
            "(line 174,col 9)-(line 174,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testCloning3()",
        "snippet": "    public void testCloning3() {\n        XYSeries s1 = new XYSeries(\"S1\");\n        XYSeries s2 = null;\n        try {\n            s2 = (XYSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1.equals(s2));\n        \n        // check independence\n        s2.add(4.0, 300.0);\n        assertFalse(s1.equals(s2));\n        s1.add(4.0, 300.0);\n        assertTrue(s1.equals(s2));\n    }",
        "begin_line": 180,
        "end_line": 196,
        "comment": "\n     * Another test of the clone() method.\n     ",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 41)",
            "(line 182,col 9)-(line 182,col 27)",
            "(line 183,col 9)-(line 188,col 9)",
            "(line 189,col 9)-(line 189,col 34)",
            "(line 192,col 9)-(line 192,col 27)",
            "(line 193,col 9)-(line 193,col 35)",
            "(line 194,col 9)-(line 194,col 27)",
            "(line 195,col 9)-(line 195,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYSeries s1 = new XYSeries(\"Series\");\n        s1.add(1.0, 1.1);\n        XYSeries s2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            s2 = (XYSeries) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(s1, s2);\n\n    }",
        "begin_line": 201,
        "end_line": 223,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 45)",
            "(line 204,col 9)-(line 204,col 25)",
            "(line 205,col 9)-(line 205,col 27)",
            "(line 207,col 9)-(line 220,col 9)",
            "(line 221,col 9)-(line 221,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        XYSeries s1 = new XYSeries(\"Series 1\");\n        s1.add(1.0, 1.0);\n        s1.add(2.0, 2.0);\n        s1.add(3.0, 3.0);\n        assertEquals(0, s1.indexOf(new Double(1.0)));\n    }",
        "begin_line": 228,
        "end_line": 234,
        "comment": "\n     * Simple test for the indexOf() method.\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 47)",
            "(line 230,col 9)-(line 230,col 25)",
            "(line 231,col 9)-(line 231,col 25)",
            "(line 232,col 9)-(line 232,col 25)",
            "(line 233,col 9)-(line 233,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testIndexOf2()",
        "snippet": "    public void testIndexOf2() {\n        XYSeries s1 = new XYSeries(\"Series 1\", false, true);\n        s1.add(1.0, 1.0);\n        s1.add(3.0, 3.0);\n        s1.add(2.0, 2.0);\n        assertEquals(0, s1.indexOf(new Double(1.0)));        \n        assertEquals(1, s1.indexOf(new Double(3.0)));        \n        assertEquals(2, s1.indexOf(new Double(2.0)));        \n    }",
        "begin_line": 239,
        "end_line": 247,
        "comment": "\n     * A check for the indexOf() method for an unsorted series.\n     ",
        "child_ranges": [
            "(line 240,col 9)-(line 240,col 60)",
            "(line 241,col 9)-(line 241,col 25)",
            "(line 242,col 9)-(line 242,col 25)",
            "(line 243,col 9)-(line 243,col 25)",
            "(line 244,col 9)-(line 244,col 53)",
            "(line 245,col 9)-(line 245,col 53)",
            "(line 246,col 9)-(line 246,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testRemove()",
        "snippet": "    public void testRemove() {\n        \n        XYSeries s1 = new XYSeries(\"Series 1\");\n        s1.add(1.0, 1.0);\n        s1.add(2.0, 2.0);\n        s1.add(3.0, 3.0);\n        \n        assertEquals(3, s1.getItemCount());\n        s1.remove(new Double(2.0));\n        assertEquals(new Double(3.0), s1.getX(1));\n        \n        s1.remove(0);\n        assertEquals(new Double(3.0), s1.getX(0));\n        \n    }",
        "begin_line": 252,
        "end_line": 266,
        "comment": "\n     * Simple test for the remove() method.\n     ",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 47)",
            "(line 255,col 9)-(line 255,col 25)",
            "(line 256,col 9)-(line 256,col 25)",
            "(line 257,col 9)-(line 257,col 25)",
            "(line 259,col 9)-(line 259,col 43)",
            "(line 260,col 9)-(line 260,col 35)",
            "(line 261,col 9)-(line 261,col 50)",
            "(line 263,col 9)-(line 263,col 21)",
            "(line 264,col 9)-(line 264,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testAdditionOfDuplicateXValues()",
        "snippet": "    public void testAdditionOfDuplicateXValues() {\n        XYSeries s1 = new XYSeries(\"Series 1\");\n        s1.add(1.0, 1.0);\n        s1.add(2.0, 2.0);\n        s1.add(2.0, 3.0);\n        s1.add(2.0, 4.0);\n        s1.add(3.0, 5.0);\n        assertEquals(1.0, s1.getY(0).doubleValue(), EPSILON);\n        assertEquals(2.0, s1.getY(1).doubleValue(), EPSILON);\n        assertEquals(3.0, s1.getY(2).doubleValue(), EPSILON);\n        assertEquals(4.0, s1.getY(3).doubleValue(), EPSILON);\n        assertEquals(5.0, s1.getY(4).doubleValue(), EPSILON);\n    }",
        "begin_line": 274,
        "end_line": 286,
        "comment": "\n     * When items are added with duplicate x-values, we expect them to remain \n     * in the order they were added.\n     ",
        "child_ranges": [
            "(line 275,col 9)-(line 275,col 47)",
            "(line 276,col 9)-(line 276,col 25)",
            "(line 277,col 9)-(line 277,col 25)",
            "(line 278,col 9)-(line 278,col 25)",
            "(line 279,col 9)-(line 279,col 25)",
            "(line 280,col 9)-(line 280,col 25)",
            "(line 281,col 9)-(line 281,col 61)",
            "(line 282,col 9)-(line 282,col 61)",
            "(line 283,col 9)-(line 283,col 61)",
            "(line 284,col 9)-(line 284,col 61)",
            "(line 285,col 9)-(line 285,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testUpdate()",
        "snippet": "    public void testUpdate() {\n        XYSeries series = new XYSeries(\"S1\");\n        series.add(new Integer(1), new Integer(2));\n        assertEquals(new Integer(2), series.getY(0));\n        series.update(new Integer(1), new Integer(3));\n        assertEquals(new Integer(3), series.getY(0));\n        try {\n            series.update(new Integer(2), new Integer(99));\n            assertTrue(false);\n        }\n        catch (SeriesException e) {\n            // got the required exception   \n        }\n    }",
        "begin_line": 291,
        "end_line": 304,
        "comment": "\n     * Some checks for the update(Number, Number) method.\n     ",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 45)",
            "(line 293,col 9)-(line 293,col 51)",
            "(line 294,col 9)-(line 294,col 53)",
            "(line 295,col 9)-(line 295,col 54)",
            "(line 296,col 9)-(line 296,col 53)",
            "(line 297,col 9)-(line 303,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testUpdate2()",
        "snippet": "    public void testUpdate2() {\n       XYSeries series = new XYSeries(\"Series\", false, true);\n       series.add(5.0, 55.0);\n       series.add(4.0, 44.0);\n       series.add(6.0, 66.0);\n       series.update(new Double(4.0), new Double(99.0));\n       assertEquals(new Double(99.0), series.getY(1));\n    }",
        "begin_line": 309,
        "end_line": 316,
        "comment": "\n     * Some checks for the update() method for an unsorted series.\n     ",
        "child_ranges": [
            "(line 310,col 8)-(line 310,col 61)",
            "(line 311,col 8)-(line 311,col 29)",
            "(line 312,col 8)-(line 312,col 29)",
            "(line 313,col 8)-(line 313,col 29)",
            "(line 314,col 8)-(line 314,col 56)",
            "(line 315,col 8)-(line 315,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testAddOrUpdate()",
        "snippet": "    public void testAddOrUpdate() {\n        XYSeries series = new XYSeries(\"S1\");\n        XYDataItem old = series.addOrUpdate(new Long(1), new Long(2));\n        assertTrue(old == null);\n        assertEquals(1, series.getItemCount());\n        assertEquals(new Long(2), series.getY(0));\n        \n        old = series.addOrUpdate(new Long(2), new Long(3));\n        assertTrue(old == null);\n        assertEquals(2, series.getItemCount());\n        assertEquals(new Long(3), series.getY(1));\n\n        old = series.addOrUpdate(new Long(1), new Long(99));\n        assertEquals(new XYDataItem(new Long(1), new Long(2)), old);\n        assertEquals(2, series.getItemCount());\n        assertEquals(new Long(99), series.getY(0));\n        assertEquals(new Long(3), series.getY(1));\n    }",
        "begin_line": 321,
        "end_line": 338,
        "comment": "\n     * Some checks for the addOrUpdate() method.\n     ",
        "child_ranges": [
            "(line 322,col 9)-(line 322,col 45)",
            "(line 323,col 9)-(line 323,col 70)",
            "(line 324,col 9)-(line 324,col 32)",
            "(line 325,col 9)-(line 325,col 47)",
            "(line 326,col 9)-(line 326,col 50)",
            "(line 328,col 9)-(line 328,col 59)",
            "(line 329,col 9)-(line 329,col 32)",
            "(line 330,col 9)-(line 330,col 47)",
            "(line 331,col 9)-(line 331,col 50)",
            "(line 333,col 9)-(line 333,col 60)",
            "(line 334,col 9)-(line 334,col 68)",
            "(line 335,col 9)-(line 335,col 47)",
            "(line 336,col 9)-(line 336,col 51)",
            "(line 337,col 9)-(line 337,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testAddOrUpdate2()",
        "snippet": "    public void testAddOrUpdate2() {\n        XYSeries series = new XYSeries(\"Series\", false, true);\n        series.add(5.0, 5.5);\n        series.add(6.0, 6.6);\n        series.add(3.0, 3.3);\n        series.add(4.0, 4.4);\n        series.add(2.0, 2.2);\n        series.add(1.0, 1.1);\n        series.addOrUpdate(new Double(3.0), new Double(33.3));\n        series.addOrUpdate(new Double(2.0), new Double(22.2));\n        assertEquals(33.3, series.getY(2).doubleValue(), EPSILON);\n        assertEquals(22.2, series.getY(4).doubleValue(), EPSILON);\n    }",
        "begin_line": 343,
        "end_line": 355,
        "comment": "\n     * Some checks for the addOrUpdate() method for an UNSORTED series.\n     ",
        "child_ranges": [
            "(line 344,col 9)-(line 344,col 62)",
            "(line 345,col 9)-(line 345,col 29)",
            "(line 346,col 9)-(line 346,col 29)",
            "(line 347,col 9)-(line 347,col 29)",
            "(line 348,col 9)-(line 348,col 29)",
            "(line 349,col 9)-(line 349,col 29)",
            "(line 350,col 9)-(line 350,col 29)",
            "(line 351,col 9)-(line 351,col 62)",
            "(line 352,col 9)-(line 352,col 62)",
            "(line 353,col 9)-(line 353,col 66)",
            "(line 354,col 9)-(line 354,col 66)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testAdd()",
        "snippet": "    public void testAdd() {\n        XYSeries series = new XYSeries(\"Series\", false, true);\n        series.add(5.0, 5.50);\n        series.add(5.1, 5.51);\n        series.add(6.0, 6.6);\n        series.add(3.0, 3.3);\n        series.add(4.0, 4.4);\n        series.add(2.0, 2.2);\n        series.add(1.0, 1.1);\n        assertEquals(5.5, series.getY(0).doubleValue(), EPSILON);\n        assertEquals(5.51, series.getY(1).doubleValue(), EPSILON);\n        assertEquals(6.6, series.getY(2).doubleValue(), EPSILON);\n        assertEquals(3.3, series.getY(3).doubleValue(), EPSILON);\n        assertEquals(4.4, series.getY(4).doubleValue(), EPSILON);\n        assertEquals(2.2, series.getY(5).doubleValue(), EPSILON);\n        assertEquals(1.1, series.getY(6).doubleValue(), EPSILON);\n    }",
        "begin_line": 360,
        "end_line": 376,
        "comment": "\n     * Some checks for the add() method for an UNSORTED series.\n     ",
        "child_ranges": [
            "(line 361,col 9)-(line 361,col 62)",
            "(line 362,col 9)-(line 362,col 30)",
            "(line 363,col 9)-(line 363,col 30)",
            "(line 364,col 9)-(line 364,col 29)",
            "(line 365,col 9)-(line 365,col 29)",
            "(line 366,col 9)-(line 366,col 29)",
            "(line 367,col 9)-(line 367,col 29)",
            "(line 368,col 9)-(line 368,col 29)",
            "(line 369,col 9)-(line 369,col 65)",
            "(line 370,col 9)-(line 370,col 66)",
            "(line 371,col 9)-(line 371,col 65)",
            "(line 372,col 9)-(line 372,col 65)",
            "(line 373,col 9)-(line 373,col 65)",
            "(line 374,col 9)-(line 374,col 65)",
            "(line 375,col 9)-(line 375,col 65)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testSetMaximumItemCount()",
        "snippet": "    public void testSetMaximumItemCount() {\n        XYSeries s1 = new XYSeries(\"S1\");\n        assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount());\n        s1.setMaximumItemCount(2);\n        assertEquals(2, s1.getMaximumItemCount());\n        s1.add(1.0, 1.1);\n        s1.add(2.0, 2.2);\n        s1.add(3.0, 3.3);\n        assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON);\n        assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON);\n    }",
        "begin_line": 381,
        "end_line": 391,
        "comment": "\n     * A simple check that the maximumItemCount attribute is working.\n     ",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 41)",
            "(line 383,col 9)-(line 383,col 66)",
            "(line 384,col 9)-(line 384,col 34)",
            "(line 385,col 9)-(line 385,col 50)",
            "(line 386,col 9)-(line 386,col 25)",
            "(line 387,col 9)-(line 387,col 25)",
            "(line 388,col 9)-(line 388,col 25)",
            "(line 389,col 9)-(line 389,col 61)",
            "(line 390,col 9)-(line 390,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testSetMaximumItemCount2()",
        "snippet": "    public void testSetMaximumItemCount2() {\n        XYSeries s1 = new XYSeries(\"S1\");\n        s1.add(1.0, 1.1);\n        s1.add(2.0, 2.2);\n        s1.add(3.0, 3.3);\n        s1.setMaximumItemCount(2);\n        assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON);\n        assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON);\n    }",
        "begin_line": 396,
        "end_line": 404,
        "comment": "\n     * Check that the maximum item count can be applied retrospectively.\n     ",
        "child_ranges": [
            "(line 397,col 9)-(line 397,col 41)",
            "(line 398,col 9)-(line 398,col 25)",
            "(line 399,col 9)-(line 399,col 25)",
            "(line 400,col 9)-(line 400,col 25)",
            "(line 401,col 9)-(line 401,col 34)",
            "(line 402,col 9)-(line 402,col 61)",
            "(line 403,col 9)-(line 403,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testToArray()",
        "snippet": "    public void testToArray() {\n        XYSeries s = new XYSeries(\"S1\");\n        double[][] array = s.toArray();\n        assertEquals(2, array.length);\n        assertEquals(0, array[0].length);\n        assertEquals(0, array[1].length);\n        \n        s.add(1.0, 2.0);\n        array = s.toArray();\n        assertEquals(1, array[0].length);\n        assertEquals(1, array[1].length);\n        assertEquals(2, array.length);\n        assertEquals(1.0, array[0][0], EPSILON);\n        assertEquals(2.0, array[1][0], EPSILON);\n        \n        s.add(2.0, null);\n        array = s.toArray();\n        assertEquals(2, array.length);\n        assertEquals(2, array[0].length);\n        assertEquals(2, array[1].length);\n        assertEquals(2.0, array[0][1], EPSILON);\n        assertTrue(Double.isNaN(array[1][1]));\n    }",
        "begin_line": 409,
        "end_line": 431,
        "comment": "\n     * Some checks for the toArray() method.\n     ",
        "child_ranges": [
            "(line 410,col 9)-(line 410,col 40)",
            "(line 411,col 9)-(line 411,col 39)",
            "(line 412,col 9)-(line 412,col 38)",
            "(line 413,col 9)-(line 413,col 41)",
            "(line 414,col 9)-(line 414,col 41)",
            "(line 416,col 9)-(line 416,col 24)",
            "(line 417,col 9)-(line 417,col 28)",
            "(line 418,col 9)-(line 418,col 41)",
            "(line 419,col 9)-(line 419,col 41)",
            "(line 420,col 9)-(line 420,col 38)",
            "(line 421,col 9)-(line 421,col 48)",
            "(line 422,col 9)-(line 422,col 48)",
            "(line 424,col 9)-(line 424,col 25)",
            "(line 425,col 9)-(line 425,col 28)",
            "(line 426,col 9)-(line 426,col 38)",
            "(line 427,col 9)-(line 427,col 41)",
            "(line 428,col 9)-(line 428,col 41)",
            "(line 429,col 9)-(line 429,col 48)",
            "(line 430,col 9)-(line 430,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testToArrayExample()",
        "snippet": "    public void testToArrayExample() {\n        XYSeries s = new XYSeries(\"S\");\n        s.add(1.0, 11.0);\n        s.add(2.0, 22.0);\n        s.add(3.5, 35.0);\n        s.add(5.0, null);\n        DefaultXYDataset dataset = new DefaultXYDataset();\n        dataset.addSeries(\"S\", s.toArray());\n        assertEquals(1, dataset.getSeriesCount());\n        assertEquals(4, dataset.getItemCount(0));\n        assertEquals(\"S\", dataset.getSeriesKey(0));\n        assertEquals(1.0, dataset.getXValue(0, 0), EPSILON);\n        assertEquals(2.0, dataset.getXValue(0, 1), EPSILON);\n        assertEquals(3.5, dataset.getXValue(0, 2), EPSILON);\n        assertEquals(5.0, dataset.getXValue(0, 3), EPSILON);\n        assertEquals(11.0, dataset.getYValue(0, 0), EPSILON);\n        assertEquals(22.0, dataset.getYValue(0, 1), EPSILON);\n        assertEquals(35.0, dataset.getYValue(0, 2), EPSILON);\n        assertTrue(Double.isNaN(dataset.getYValue(0, 3)));\n    }",
        "begin_line": 436,
        "end_line": 455,
        "comment": "\n     * Some checks for an example using the toArray() method.\n     ",
        "child_ranges": [
            "(line 437,col 9)-(line 437,col 39)",
            "(line 438,col 9)-(line 438,col 25)",
            "(line 439,col 9)-(line 439,col 25)",
            "(line 440,col 9)-(line 440,col 25)",
            "(line 441,col 9)-(line 441,col 25)",
            "(line 442,col 9)-(line 442,col 58)",
            "(line 443,col 9)-(line 443,col 44)",
            "(line 444,col 9)-(line 444,col 50)",
            "(line 445,col 9)-(line 445,col 49)",
            "(line 446,col 9)-(line 446,col 51)",
            "(line 447,col 9)-(line 447,col 60)",
            "(line 448,col 9)-(line 448,col 60)",
            "(line 449,col 9)-(line 449,col 60)",
            "(line 450,col 9)-(line 450,col 60)",
            "(line 451,col 9)-(line 451,col 61)",
            "(line 452,col 9)-(line 452,col 61)",
            "(line 453,col 9)-(line 453,col 61)",
            "(line 454,col 9)-(line 454,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYBarDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYBarDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.XYBarDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYBarDatasetTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYBarDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYBarDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.XYBarDatasetTests.XYBarDatasetTests(java.lang.String)",
        "snippet": "    public XYBarDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYBarDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYBarDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.XYBarDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultXYDataset d1 = new DefaultXYDataset();\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[][] data1 = new double[][] {x1, y1};\n        d1.addSeries(\"S1\", data1);\n        DefaultXYDataset d2 = new DefaultXYDataset();\n        double[] x2 = new double[] {1.0, 2.0, 3.0};\n        double[] y2 = new double[] {4.0, 5.0, 6.0};\n        double[][] data2 = new double[][] {x2, y2};\n        d2.addSeries(\"S1\", data2);\n  \n        XYBarDataset bd1 = new XYBarDataset(d1, 5.0);\n        XYBarDataset bd2 = new XYBarDataset(d2, 5.0);\n        assertTrue(bd1.equals(bd2));\n        assertTrue(bd2.equals(bd1));\n    }",
        "begin_line": 83,
        "end_line": 99,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 53)",
            "(line 85,col 9)-(line 85,col 51)",
            "(line 86,col 9)-(line 86,col 51)",
            "(line 87,col 9)-(line 87,col 51)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 89,col 9)-(line 89,col 53)",
            "(line 90,col 9)-(line 90,col 51)",
            "(line 91,col 9)-(line 91,col 51)",
            "(line 92,col 9)-(line 92,col 51)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 95,col 9)-(line 95,col 53)",
            "(line 96,col 9)-(line 96,col 53)",
            "(line 97,col 9)-(line 97,col 36)",
            "(line 98,col 9)-(line 98,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYBarDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYBarDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.XYBarDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultXYDataset d1 = new DefaultXYDataset();\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[][] data1 = new double[][] {x1, y1};\n        d1.addSeries(\"S1\", data1);\n        XYBarDataset bd1 = new XYBarDataset(d1, 5.0);\n        XYBarDataset bd2 = null;\n        try {\n            bd2 = (XYBarDataset) bd1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(bd1 != bd2);\n        assertTrue(bd1.getClass() == bd2.getClass());\n        assertTrue(bd1.equals(bd2));\n        \n        // check independence\n        d1 = (DefaultXYDataset) bd1.getUnderlyingDataset();\n        d1.addSeries(\"S2\", new double[][] { {1.0}, {2.0} });\n        assertFalse(bd1.equals(bd2));\n        DefaultXYDataset d2 = (DefaultXYDataset) bd2.getUnderlyingDataset();\n        d2.addSeries(\"S2\", new double[][] { {1.0}, {2.0} });\n        assertTrue(bd1.equals(bd2));\n    }",
        "begin_line": 104,
        "end_line": 129,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 53)",
            "(line 106,col 9)-(line 106,col 51)",
            "(line 107,col 9)-(line 107,col 51)",
            "(line 108,col 9)-(line 108,col 51)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 110,col 9)-(line 110,col 53)",
            "(line 111,col 9)-(line 111,col 32)",
            "(line 112,col 9)-(line 117,col 9)",
            "(line 118,col 9)-(line 118,col 31)",
            "(line 119,col 9)-(line 119,col 53)",
            "(line 120,col 9)-(line 120,col 36)",
            "(line 123,col 9)-(line 123,col 59)",
            "(line 124,col 9)-(line 124,col 60)",
            "(line 125,col 9)-(line 125,col 37)",
            "(line 126,col 9)-(line 126,col 76)",
            "(line 127,col 9)-(line 127,col 60)",
            "(line 128,col 9)-(line 128,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYBarDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYBarDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.XYBarDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        DefaultXYDataset d1 = new DefaultXYDataset();\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[][] data1 = new double[][] {x1, y1};\n        d1.addSeries(\"S1\", data1);\n        XYBarDataset bd1 = new XYBarDataset(d1, 5.0);\n        XYBarDataset bd2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(bd1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            bd2 = (XYBarDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(bd1, bd2);        \n    }",
        "begin_line": 134,
        "end_line": 157,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 53)",
            "(line 136,col 9)-(line 136,col 51)",
            "(line 137,col 9)-(line 137,col 51)",
            "(line 138,col 9)-(line 138,col 51)",
            "(line 139,col 9)-(line 139,col 34)",
            "(line 140,col 9)-(line 140,col 53)",
            "(line 141,col 9)-(line 141,col 32)",
            "(line 142,col 9)-(line 155,col 9)",
            "(line 156,col 9)-(line 156,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.VectorDataItemTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(VectorDataItemTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.VectorDataItemTests.VectorDataItemTests(java.lang.String)",
        "snippet": "    public VectorDataItemTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.VectorDataItemTests.testEquals()",
        "snippet": "    public void testEquals() {        \n        // default instances\n        VectorDataItem v1 = new VectorDataItem(1.0, 2.0, 3.0, 4.0);\n        VectorDataItem v2 = new VectorDataItem(1.0, 2.0, 3.0, 4.0);\n        assertTrue(v1.equals(v2));\n        assertTrue(v2.equals(v1));\n\n        v1 = new VectorDataItem(1.1, 2.0, 3.0, 4.0);\n        assertFalse(v1.equals(v2));\n        v2 = new VectorDataItem(1.1, 2.0, 3.0, 4.0);\n        assertTrue(v1.equals(v2));\n        \n        v1 = new VectorDataItem(1.1, 2.2, 3.0, 4.0);\n        assertFalse(v1.equals(v2));\n        v2 = new VectorDataItem(1.1, 2.2, 3.0, 4.0);\n        assertTrue(v1.equals(v2));\n\n        v1 = new VectorDataItem(1.1, 2.2, 3.3, 4.0);\n        assertFalse(v1.equals(v2));\n        v2 = new VectorDataItem(1.1, 2.2, 3.3, 4.0);\n        assertTrue(v1.equals(v2));\n    \n        v1 = new VectorDataItem(1.1, 2.2, 3.3, 4.4);\n        assertFalse(v1.equals(v2));\n        v2 = new VectorDataItem(1.1, 2.2, 3.3, 4.4);\n        assertTrue(v1.equals(v2));\n    }",
        "begin_line": 82,
        "end_line": 108,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 67)",
            "(line 85,col 9)-(line 85,col 67)",
            "(line 86,col 9)-(line 86,col 34)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 89,col 9)-(line 89,col 52)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 52)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 94,col 52)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 52)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 99,col 9)-(line 99,col 52)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 52)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 104,col 9)-(line 104,col 52)",
            "(line 105,col 9)-(line 105,col 35)",
            "(line 106,col 9)-(line 106,col 52)",
            "(line 107,col 9)-(line 107,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.VectorDataItemTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        VectorDataItem v1 = new VectorDataItem(1.0, 2.0, 3.0, 4.0);\n        VectorDataItem v2 = new VectorDataItem(1.0, 2.0, 3.0, 4.0);\n        assertTrue(v1.equals(v2));\n        int h1 = v1.hashCode();\n        int h2 = v2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 113,
        "end_line": 120,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 67)",
            "(line 115,col 9)-(line 115,col 67)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 117,col 9)-(line 117,col 31)",
            "(line 118,col 9)-(line 118,col 31)",
            "(line 119,col 9)-(line 119,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.VectorDataItemTests.testCloning()",
        "snippet": "    public void testCloning() {\n        VectorDataItem v1 = new VectorDataItem(1.0, 2.0, 3.0, 4.0);\n        VectorDataItem v2 = null;\n        try {\n            v2 = (VectorDataItem) v1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(v1 != v2);\n        assertTrue(v1.getClass() == v2.getClass());\n        assertTrue(v1.equals(v2));\n    }",
        "begin_line": 125,
        "end_line": 137,
        "comment": "\n     * Check cloning.\n     ",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 67)",
            "(line 127,col 9)-(line 127,col 33)",
            "(line 128,col 9)-(line 133,col 9)",
            "(line 134,col 9)-(line 134,col 29)",
            "(line 135,col 9)-(line 135,col 51)",
            "(line 136,col 9)-(line 136,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.VectorDataItemTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        VectorDataItem v1 = new VectorDataItem(1.0, 2.0, 3.0, 4.0);\n        VectorDataItem v2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(v1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            v2 = (VectorDataItem) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(v1, v2);\n    }",
        "begin_line": 142,
        "end_line": 160,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 67)",
            "(line 144,col 9)-(line 144,col 33)",
            "(line 145,col 9)-(line 158,col 9)",
            "(line 159,col 9)-(line 159,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultOHLCDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultOHLCDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultOHLCDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultOHLCDatasetTests.class);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultOHLCDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultOHLCDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultOHLCDatasetTests.DefaultOHLCDatasetTests(java.lang.String)",
        "snippet": "    public DefaultOHLCDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultOHLCDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultOHLCDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultOHLCDatasetTests.testDataRange()",
        "snippet": "    public void testDataRange() {}",
        "begin_line": 89,
        "end_line": 89,
        "comment": "\n     * A small test for the data range calculated on this dataset.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultOHLCDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultOHLCDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultOHLCDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultOHLCDataset d1 = new DefaultOHLCDataset(\"Series 1\", \n                new OHLCDataItem[0]);\n        DefaultOHLCDataset d2 = new DefaultOHLCDataset(\"Series 1\", \n                new OHLCDataItem[0]);\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n        \n        d1 = new DefaultOHLCDataset(\"Series 2\", new OHLCDataItem[0]);\n        assertFalse(d1.equals(d2));\n        d2 = new DefaultOHLCDataset(\"Series 2\", new OHLCDataItem[0]);\n        assertTrue(d1.equals(d2));\n        \n        d1 = new DefaultOHLCDataset(\"Series 2\", new OHLCDataItem[] {\n                new OHLCDataItem(new Date(123L), 1.2, 3.4, 5.6, 7.8, 99.9)});\n        assertFalse(d1.equals(d2));\n        d2 = new DefaultOHLCDataset(\"Series 2\", new OHLCDataItem[] {\n                new OHLCDataItem(new Date(123L), 1.2, 3.4, 5.6, 7.8, 99.9)});\n        assertTrue(d1.equals(d2));\n        \n        \n    }",
        "begin_line": 105,
        "end_line": 126,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 107,col 37)",
            "(line 108,col 9)-(line 109,col 37)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 113,col 9)-(line 113,col 69)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 69)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 118,col 9)-(line 119,col 77)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 122,col 77)",
            "(line 123,col 9)-(line 123,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultOHLCDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultOHLCDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultOHLCDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultOHLCDataset d1 = new DefaultOHLCDataset(\"Series 1\", \n                new OHLCDataItem[0]);\n        DefaultOHLCDataset d2 = null;\n        try {\n            d2 = (DefaultOHLCDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 131,
        "end_line": 144,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 133,col 37)",
            "(line 134,col 9)-(line 134,col 37)",
            "(line 135,col 9)-(line 140,col 9)",
            "(line 141,col 9)-(line 141,col 29)",
            "(line 142,col 9)-(line 142,col 51)",
            "(line 143,col 9)-(line 143,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultOHLCDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultOHLCDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultOHLCDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        DefaultOHLCDataset d1 = new DefaultOHLCDataset(\"Series 1\", \n                new OHLCDataItem[0]);\n        DefaultOHLCDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (DefaultOHLCDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(d1, d2);\n    }",
        "begin_line": 149,
        "end_line": 170,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 150,col 9)-(line 151,col 37)",
            "(line 152,col 9)-(line 152,col 37)",
            "(line 154,col 9)-(line 168,col 9)",
            "(line 169,col 9)-(line 169,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.CategoryTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/CategoryTableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.CategoryTableXYDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryTableXYDatasetTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.CategoryTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/CategoryTableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.CategoryTableXYDatasetTests.CategoryTableXYDatasetTests(java.lang.String)",
        "snippet": "    public CategoryTableXYDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.CategoryTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/CategoryTableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.CategoryTableXYDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        CategoryTableXYDataset d1 = new CategoryTableXYDataset();\n        d1.add(1.0, 1.1, \"Series 1\");\n        d1.add(2.0, 2.2, \"Series 1\");\n        \n        CategoryTableXYDataset d2 = new CategoryTableXYDataset();\n        d2.add(1.0, 1.1, \"Series 1\");\n        d2.add(2.0, 2.2, \"Series 1\");\n        \n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n\n        d1.add(3.0, 3.3, \"Series 1\");\n        assertFalse(d1.equals(d2));\n\n        d2.add(3.0, 3.3, \"Series 1\");\n        assertTrue(d1.equals(d2));\n\n    }",
        "begin_line": 82,
        "end_line": 101,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 65)",
            "(line 85,col 9)-(line 85,col 37)",
            "(line 86,col 9)-(line 86,col 37)",
            "(line 88,col 9)-(line 88,col 65)",
            "(line 89,col 9)-(line 89,col 37)",
            "(line 90,col 9)-(line 90,col 37)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 95,col 9)-(line 95,col 37)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 98,col 9)-(line 98,col 37)",
            "(line 99,col 9)-(line 99,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.CategoryTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/CategoryTableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.CategoryTableXYDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        \n        CategoryTableXYDataset d1 = new CategoryTableXYDataset();\n        d1.add(1.0, 1.1, \"Series 1\");\n        d1.add(2.0, 2.2, \"Series 1\");\n        \n        CategoryTableXYDataset d2 = null;\n        try {\n            d2 = (CategoryTableXYDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 106,
        "end_line": 122,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 65)",
            "(line 109,col 9)-(line 109,col 37)",
            "(line 110,col 9)-(line 110,col 37)",
            "(line 112,col 9)-(line 112,col 41)",
            "(line 113,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 29)",
            "(line 120,col 9)-(line 120,col 51)",
            "(line 121,col 9)-(line 121,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.CategoryTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/CategoryTableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.CategoryTableXYDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        CategoryTableXYDataset d1 = new CategoryTableXYDataset();\n        d1.add(1.0, 1.1, \"Series 1\");\n        d1.add(2.0, 2.2, \"Series 1\");\n        \n        CategoryTableXYDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (CategoryTableXYDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n    }",
        "begin_line": 127,
        "end_line": 152,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 65)",
            "(line 130,col 9)-(line 130,col 37)",
            "(line 131,col 9)-(line 131,col 37)",
            "(line 133,col 9)-(line 133,col 41)",
            "(line 135,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 150,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.CategoryTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/CategoryTableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.CategoryTableXYDatasetTests.testAddSeries()",
        "snippet": "    public void testAddSeries() {\n        CategoryTableXYDataset d1 = new CategoryTableXYDataset();\n        d1.setAutoWidth(true);\n        d1.add(3.0, 1.1, \"Series 1\");\n        d1.add(7.0, 2.2, \"Series 1\");\n        assertEquals(3.0, d1.getXValue(0, 0), EPSILON);\n        assertEquals(7.0, d1.getXValue(0, 1), EPSILON);\n        assertEquals(1.0, d1.getStartXValue(0, 0), EPSILON);\n        assertEquals(5.0, d1.getStartXValue(0, 1), EPSILON);\n        assertEquals(5.0, d1.getEndXValue(0, 0), EPSILON);\n        assertEquals(9.0, d1.getEndXValue(0, 1), EPSILON);\n\n        // now add some more data\n        d1.add(7.5, 1.1, \"Series 2\");\n        d1.add(9.0, 2.2, \"Series 2\");\n \n        assertEquals(3.0, d1.getXValue(1, 0), EPSILON);\n        assertEquals(7.0, d1.getXValue(1, 1), EPSILON);\n        assertEquals(7.5, d1.getXValue(1, 2), EPSILON);\n        assertEquals(9.0, d1.getXValue(1, 3), EPSILON);\n        \n        assertEquals(7.25, d1.getStartXValue(1, 2), EPSILON);\n        assertEquals(8.75, d1.getStartXValue(1, 3), EPSILON);\n        assertEquals(7.75, d1.getEndXValue(1, 2), EPSILON);\n        assertEquals(9.25, d1.getEndXValue(1, 3), EPSILON);\n\n        // and check the first series too...\n        assertEquals(2.75, d1.getStartXValue(0, 0), EPSILON);\n        assertEquals(6.75, d1.getStartXValue(0, 1), EPSILON);\n        assertEquals(3.25, d1.getEndXValue(0, 0), EPSILON);\n        assertEquals(7.25, d1.getEndXValue(0, 1), EPSILON);\n    }",
        "begin_line": 161,
        "end_line": 192,
        "comment": "\n     * This is a test for bug 1312066 - adding a new series should trigger a\n     * recalculation of the interval width, if it is being automatically\n     * calculated.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 65)",
            "(line 163,col 9)-(line 163,col 30)",
            "(line 164,col 9)-(line 164,col 37)",
            "(line 165,col 9)-(line 165,col 37)",
            "(line 166,col 9)-(line 166,col 55)",
            "(line 167,col 9)-(line 167,col 55)",
            "(line 168,col 9)-(line 168,col 60)",
            "(line 169,col 9)-(line 169,col 60)",
            "(line 170,col 9)-(line 170,col 58)",
            "(line 171,col 9)-(line 171,col 58)",
            "(line 174,col 9)-(line 174,col 37)",
            "(line 175,col 9)-(line 175,col 37)",
            "(line 177,col 9)-(line 177,col 55)",
            "(line 178,col 9)-(line 178,col 55)",
            "(line 179,col 9)-(line 179,col 55)",
            "(line 180,col 9)-(line 180,col 55)",
            "(line 182,col 9)-(line 182,col 61)",
            "(line 183,col 9)-(line 183,col 61)",
            "(line 184,col 9)-(line 184,col 59)",
            "(line 185,col 9)-(line 185,col 59)",
            "(line 188,col 9)-(line 188,col 61)",
            "(line 189,col 9)-(line 189,col 61)",
            "(line 190,col 9)-(line 190,col 59)",
            "(line 191,col 9)-(line 191,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYCoordinateTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYCoordinateTests.java",
        "signature": "org.jfree.data.xy.junit.XYCoordinateTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYCoordinateTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYCoordinateTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYCoordinateTests.java",
        "signature": "org.jfree.data.xy.junit.XYCoordinateTests.XYCoordinateTests(java.lang.String)",
        "snippet": "    public XYCoordinateTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYCoordinateTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYCoordinateTests.java",
        "signature": "org.jfree.data.xy.junit.XYCoordinateTests.testEquals()",
        "snippet": "    public void testEquals() {        \n        // default instances\n        XYCoordinate v1 = new XYCoordinate(1.0, 2.0);\n        XYCoordinate v2 = new XYCoordinate(1.0, 2.0);\n        assertTrue(v1.equals(v2));\n        assertTrue(v2.equals(v1));\n\n        v1 = new XYCoordinate(1.1, 2.0);\n        assertFalse(v1.equals(v2));\n        v2 = new XYCoordinate(1.1, 2.0);\n        assertTrue(v1.equals(v2));\n        \n        v1 = new XYCoordinate(1.1, 2.2);\n        assertFalse(v1.equals(v2));\n        v2 = new XYCoordinate(1.1, 2.2);\n        assertTrue(v1.equals(v2));\n    }",
        "begin_line": 82,
        "end_line": 98,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 53)",
            "(line 85,col 9)-(line 85,col 53)",
            "(line 86,col 9)-(line 86,col 34)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 89,col 9)-(line 89,col 40)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 40)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 94,col 40)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 40)",
            "(line 97,col 9)-(line 97,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYCoordinateTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYCoordinateTests.java",
        "signature": "org.jfree.data.xy.junit.XYCoordinateTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        XYCoordinate v1 = new XYCoordinate(1.0, 2.0);\n        XYCoordinate v2 = new XYCoordinate(1.0, 2.0);\n        assertTrue(v1.equals(v2));\n        int h1 = v1.hashCode();\n        int h2 = v2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 103,
        "end_line": 110,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 53)",
            "(line 105,col 9)-(line 105,col 53)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 107,col 9)-(line 107,col 31)",
            "(line 108,col 9)-(line 108,col 31)",
            "(line 109,col 9)-(line 109,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYCoordinateTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYCoordinateTests.java",
        "signature": "org.jfree.data.xy.junit.XYCoordinateTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYCoordinate v1 = new XYCoordinate(1.0, 2.0);\n        assertFalse(v1 instanceof Cloneable);\n    }",
        "begin_line": 115,
        "end_line": 118,
        "comment": "\n     * Immutable class is not cloneable.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 53)",
            "(line 117,col 9)-(line 117,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYCoordinateTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYCoordinateTests.java",
        "signature": "org.jfree.data.xy.junit.XYCoordinateTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        XYCoordinate v1 = new XYCoordinate(1.0, 2.0);\n        XYCoordinate v2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(v1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            v2 = (XYCoordinate) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(v1, v2);\n    }",
        "begin_line": 123,
        "end_line": 141,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 53)",
            "(line 125,col 9)-(line 125,col 31)",
            "(line 126,col 9)-(line 139,col 9)",
            "(line 140,col 9)-(line 140,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorTests.java",
        "signature": "org.jfree.data.xy.junit.VectorTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(VectorTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorTests.java",
        "signature": "org.jfree.data.xy.junit.VectorTests.VectorTests(java.lang.String)",
        "snippet": "    public VectorTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorTests.java",
        "signature": "org.jfree.data.xy.junit.VectorTests.testEquals()",
        "snippet": "    public void testEquals() {        \n        // default instances\n        Vector v1 = new Vector(1.0, 2.0);\n        Vector v2 = new Vector(1.0, 2.0);\n        assertTrue(v1.equals(v2));\n        assertTrue(v2.equals(v1));\n\n        v1 = new Vector(1.1, 2.0);\n        assertFalse(v1.equals(v2));\n        v2 = new Vector(1.1, 2.0);\n        assertTrue(v1.equals(v2));\n        \n        v1 = new Vector(1.1, 2.2);\n        assertFalse(v1.equals(v2));\n        v2 = new Vector(1.1, 2.2);\n        assertTrue(v1.equals(v2));\n    }",
        "begin_line": 82,
        "end_line": 98,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 41)",
            "(line 85,col 9)-(line 85,col 41)",
            "(line 86,col 9)-(line 86,col 34)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 97,col 9)-(line 97,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorTests.java",
        "signature": "org.jfree.data.xy.junit.VectorTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        Vector v1 = new Vector(1.0, 2.0);\n        Vector v2 = new Vector(1.0, 2.0);\n        assertTrue(v1.equals(v2));\n        int h1 = v1.hashCode();\n        int h2 = v2.hashCode();\n        assertEquals(h1, h2);\n    }",
        "begin_line": 103,
        "end_line": 110,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 41)",
            "(line 105,col 9)-(line 105,col 41)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 107,col 9)-(line 107,col 31)",
            "(line 108,col 9)-(line 108,col 31)",
            "(line 109,col 9)-(line 109,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorTests.java",
        "signature": "org.jfree.data.xy.junit.VectorTests.testCloning()",
        "snippet": "    public void testCloning() {\n        Vector v1 = new Vector(1.0, 2.0);\n        assertFalse(v1 instanceof Cloneable);\n    }",
        "begin_line": 115,
        "end_line": 118,
        "comment": "\n     * Immutable class is not cloneable.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 41)",
            "(line 117,col 9)-(line 117,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorTests.java",
        "signature": "org.jfree.data.xy.junit.VectorTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        Vector v1 = new Vector(1.0, 2.0);\n        Vector v2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(v1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            v2 = (Vector) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(v1, v2);\n    }",
        "begin_line": 123,
        "end_line": 141,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 41)",
            "(line 125,col 9)-(line 125,col 25)",
            "(line 126,col 9)-(line 139,col 9)",
            "(line 140,col 9)-(line 140,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.OHLCDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/OHLCDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.OHLCDataItemTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(OHLCDataItemTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.OHLCDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/OHLCDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.OHLCDataItemTests.OHLCDataItemTests(java.lang.String)",
        "snippet": "    public OHLCDataItemTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.OHLCDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/OHLCDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.OHLCDataItemTests.testEquals()",
        "snippet": "    public void testEquals() {     \n        OHLCDataItem i1 = new OHLCDataItem(\n            new Date(1L), 1.0, 2.0, 3.0, 4.0, 5.0\n        );\n        OHLCDataItem i2 = new OHLCDataItem(\n            new Date(1L), 1.0, 2.0, 3.0, 4.0, 5.0\n        );\n        assertTrue(i1.equals(i2));\n        assertTrue(i2.equals(i1));\n    }",
        "begin_line": 83,
        "end_line": 92,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 86,col 10)",
            "(line 87,col 9)-(line 89,col 10)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 91,col 9)-(line 91,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.OHLCDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/OHLCDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.OHLCDataItemTests.testCloning()",
        "snippet": "    public void testCloning() {\n        OHLCDataItem i1 = new OHLCDataItem(\n            new Date(1L), 1.0, 2.0, 3.0, 4.0, 5.0\n        );\n        assertFalse(i1 instanceof Cloneable);\n    }",
        "begin_line": 97,
        "end_line": 102,
        "comment": "\n     * Instances of this class are immutable - cloning not required.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 100,col 10)",
            "(line 101,col 9)-(line 101,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.OHLCDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/OHLCDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.OHLCDataItemTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        OHLCDataItem i1 = new OHLCDataItem(\n            new Date(1L), 1.0, 2.0, 3.0, 4.0, 5.0\n        );\n        OHLCDataItem i2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(i1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            i2 = (OHLCDataItem) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(i1, i2);\n    }",
        "begin_line": 107,
        "end_line": 129,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 110,col 10)",
            "(line 111,col 9)-(line 111,col 31)",
            "(line 113,col 9)-(line 127,col 9)",
            "(line 128,col 9)-(line 128,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.MatrixSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/MatrixSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.MatrixSeriesCollectionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MatrixSeriesCollectionTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.MatrixSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/MatrixSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.MatrixSeriesCollectionTests.MatrixSeriesCollectionTests(java.lang.String)",
        "snippet": "    public MatrixSeriesCollectionTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.MatrixSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/MatrixSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.MatrixSeriesCollectionTests.testEquals()",
        "snippet": "    public void testEquals() {\n        MatrixSeries s1 = new MatrixSeries(\"Series\", 2, 3);\n        s1.update(0, 0, 1.1);\n        MatrixSeriesCollection c1 = new MatrixSeriesCollection();\n        c1.addSeries(s1);\n        MatrixSeries s2 = new MatrixSeries(\"Series\", 2, 3);\n        s2.update(0, 0, 1.1);\n        MatrixSeriesCollection c2 = new MatrixSeriesCollection();\n        c2.addSeries(s2);\n        assertTrue(c1.equals(c2));\n        assertTrue(c2.equals(c1));\n\n        c1.addSeries(new MatrixSeries(\"Empty Series\", 1, 1));\n        assertFalse(c1.equals(c2));\n\n        c2.addSeries(new MatrixSeries(\"Empty Series\", 1, 1));\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 83,
        "end_line": 100,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 59)",
            "(line 85,col 9)-(line 85,col 29)",
            "(line 86,col 9)-(line 86,col 65)",
            "(line 87,col 9)-(line 87,col 25)",
            "(line 88,col 9)-(line 88,col 59)",
            "(line 89,col 9)-(line 89,col 29)",
            "(line 90,col 9)-(line 90,col 65)",
            "(line 91,col 9)-(line 91,col 25)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 95,col 9)-(line 95,col 61)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 98,col 9)-(line 98,col 61)",
            "(line 99,col 9)-(line 99,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.MatrixSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/MatrixSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.MatrixSeriesCollectionTests.testCloning()",
        "snippet": "    public void testCloning() {\n        MatrixSeries s1 = new MatrixSeries(\"Series\", 2, 3);\n        s1.update(0, 0, 1.1);\n        MatrixSeriesCollection c1 = new MatrixSeriesCollection();\n        c1.addSeries(s1);\n        MatrixSeriesCollection c2 = null;\n        try {\n            c2 = (MatrixSeriesCollection) c1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n        \n        // check independence\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }",
        "begin_line": 105,
        "end_line": 124,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 59)",
            "(line 107,col 9)-(line 107,col 29)",
            "(line 108,col 9)-(line 108,col 65)",
            "(line 109,col 9)-(line 109,col 25)",
            "(line 110,col 9)-(line 110,col 41)",
            "(line 111,col 9)-(line 116,col 9)",
            "(line 117,col 9)-(line 117,col 29)",
            "(line 118,col 9)-(line 118,col 51)",
            "(line 119,col 9)-(line 119,col 34)",
            "(line 122,col 9)-(line 122,col 33)",
            "(line 123,col 9)-(line 123,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.MatrixSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/MatrixSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.MatrixSeriesCollectionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        MatrixSeries s1 = new MatrixSeries(\"Series\", 2, 3);\n        s1.update(0, 0, 1.1);\n        MatrixSeriesCollection c1 = new MatrixSeriesCollection();\n        c1.addSeries(s1);\n        MatrixSeriesCollection c2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            c2 = (MatrixSeriesCollection) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n    }",
        "begin_line": 129,
        "end_line": 151,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 59)",
            "(line 131,col 9)-(line 131,col 29)",
            "(line 132,col 9)-(line 132,col 65)",
            "(line 133,col 9)-(line 133,col 25)",
            "(line 134,col 9)-(line 134,col 41)",
            "(line 136,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 150,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesTests.seriesChanged(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "    public void seriesChanged(SeriesChangeEvent event) {\n        this.lastEvent = event;\n\t}",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XIntervalSeriesTests.class);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesTests.XIntervalSeriesTests(java.lang.String)",
        "snippet": "    public XIntervalSeriesTests(String name) {\n        super(name);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        XIntervalSeries s1 = new XIntervalSeries(\"s1\");\n        XIntervalSeries s2 = new XIntervalSeries(\"s1\");\n        assertTrue(s1.equals(s2));\n        \n        // seriesKey\n        s1 = new XIntervalSeries(\"s2\");\n        assertFalse(s1.equals(s2));\n        s2 = new XIntervalSeries(\"s2\");\n        assertTrue(s1.equals(s2));\n        \n        // autoSort\n        s1 = new XIntervalSeries(\"s2\", false, true);\n        assertFalse(s1.equals(s2));\n        s2 = new XIntervalSeries(\"s2\", false, true);\n        assertTrue(s1.equals(s2));\n        \n        // allowDuplicateValues\n        s1 = new XIntervalSeries(\"s2\", false, false);\n        assertFalse(s1.equals(s2));\n        s2 = new XIntervalSeries(\"s2\", false, false);\n        assertTrue(s1.equals(s2));\n        \n        // add a value\n        s1.add(1.0, 0.5, 1.5, 2.0);\n        assertFalse(s1.equals(s2));\n        s2.add(1.0, 0.5, 1.5, 2.0);\n        assertTrue(s2.equals(s1));\n\n        // add another value\n        s1.add(2.0, 0.5, 1.5, 2.0);\n        assertFalse(s1.equals(s2));\n        s2.add(2.0, 0.5, 1.5, 2.0);\n        assertTrue(s2.equals(s1));\n\n        // remove a value\n        s1.remove(new Double(1.0));\n        assertFalse(s1.equals(s2));\n        s2.remove(new Double(1.0));\n        assertTrue(s2.equals(s1));\n        \n    }",
        "begin_line": 92,
        "end_line": 134,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 55)",
            "(line 95,col 9)-(line 95,col 55)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 99,col 9)-(line 99,col 39)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 39)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 105,col 9)-(line 105,col 52)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 107,col 52)",
            "(line 108,col 9)-(line 108,col 34)",
            "(line 111,col 9)-(line 111,col 53)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 113,col 53)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 118,col 35)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 123,col 9)-(line 123,col 35)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 125,col 35)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 129,col 9)-(line 129,col 35)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 131,col 35)",
            "(line 132,col 9)-(line 132,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XIntervalSeries s1 = new XIntervalSeries(\"s1\");\n        s1.add(1.0, 0.5, 1.5, 2.0);\n        XIntervalSeries s2 = null;\n        try {\n            s2 = (XIntervalSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n    }",
        "begin_line": 139,
        "end_line": 152,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 55)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 34)",
            "(line 143,col 9)-(line 148,col 9)",
            "(line 149,col 9)-(line 149,col 29)",
            "(line 150,col 9)-(line 150,col 51)",
            "(line 151,col 9)-(line 151,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XIntervalSeries s1 = new XIntervalSeries(\"s1\");\n        s1.add(1.0, 0.5, 1.5, 2.0);\n        XIntervalSeries s2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            s2 = (XIntervalSeries) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(s1, s2);\n\n    }",
        "begin_line": 157,
        "end_line": 179,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 55)",
            "(line 160,col 9)-(line 160,col 35)",
            "(line 161,col 9)-(line 161,col 34)",
            "(line 163,col 9)-(line 176,col 9)",
            "(line 177,col 9)-(line 177,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesTests.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        XIntervalSeries s1 = new XIntervalSeries(\"Series 1\");\n        s1.add(1.0, 1.0, 1.0, 2.0);\n        s1.add(2.0, 2.0, 2.0, 3.0);\n        s1.add(3.0, 3.0, 3.0, 4.0);\n        assertEquals(0, s1.indexOf(new Double(1.0)));\n    }",
        "begin_line": 184,
        "end_line": 190,
        "comment": "\n     * Simple test for the indexOf() method.\n     ",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 61)",
            "(line 186,col 9)-(line 186,col 35)",
            "(line 187,col 9)-(line 187,col 35)",
            "(line 188,col 9)-(line 188,col 35)",
            "(line 189,col 9)-(line 189,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesTests.testIndexOf2()",
        "snippet": "    public void testIndexOf2() {\n        XIntervalSeries s1 = new XIntervalSeries(\"Series 1\", false, true);\n        s1.add(1.0, 1.0, 1.0, 2.0);\n        s1.add(3.0, 3.0, 3.0, 3.0);\n        s1.add(2.0, 2.0, 2.0, 2.0);\n        assertEquals(0, s1.indexOf(new Double(1.0)));        \n        assertEquals(1, s1.indexOf(new Double(3.0)));        \n        assertEquals(2, s1.indexOf(new Double(2.0)));        \n    }",
        "begin_line": 195,
        "end_line": 203,
        "comment": "\n     * A check for the indexOf() method for an unsorted series.\n     ",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 74)",
            "(line 197,col 9)-(line 197,col 35)",
            "(line 198,col 9)-(line 198,col 35)",
            "(line 199,col 9)-(line 199,col 35)",
            "(line 200,col 9)-(line 200,col 53)",
            "(line 201,col 9)-(line 201,col 53)",
            "(line 202,col 9)-(line 202,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesTests.testRemove()",
        "snippet": "    public void testRemove() {\n        XIntervalSeries s1 = new XIntervalSeries(\"Series 1\");\n        s1.add(1.0, 1.0, 1.0, 2.0);\n        s1.add(2.0, 2.0, 2.0, 2.0);\n        s1.add(3.0, 3.0, 3.0, 3.0);\n        assertEquals(3, s1.getItemCount());\n        \n        s1.remove(new Double(2.0));\n        assertEquals(new Double(3.0), s1.getX(1));\n        \n        s1.remove(new Double(1.0));\n        assertEquals(new Double(3.0), s1.getX(0));    \n    }",
        "begin_line": 208,
        "end_line": 220,
        "comment": "\n     * Simple test for the remove() method.\n     ",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 61)",
            "(line 210,col 9)-(line 210,col 35)",
            "(line 211,col 9)-(line 211,col 35)",
            "(line 212,col 9)-(line 212,col 35)",
            "(line 213,col 9)-(line 213,col 43)",
            "(line 215,col 9)-(line 215,col 35)",
            "(line 216,col 9)-(line 216,col 50)",
            "(line 218,col 9)-(line 218,col 35)",
            "(line 219,col 9)-(line 219,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesTests.testAdditionOfDuplicateXValues()",
        "snippet": "    public void testAdditionOfDuplicateXValues() {\n        XIntervalSeries s1 = new XIntervalSeries(\"Series 1\");\n        s1.add(1.0, 1.0, 1.0, 1.0);\n        s1.add(2.0, 2.0, 2.0, 2.0);\n        s1.add(2.0, 3.0, 3.0, 3.0);\n        s1.add(2.0, 4.0, 4.0, 4.0);\n        s1.add(3.0, 5.0, 5.0, 5.0);\n        assertEquals(1.0, s1.getYValue(0), EPSILON);\n        assertEquals(2.0, s1.getYValue(1), EPSILON);\n        assertEquals(3.0, s1.getYValue(2), EPSILON);\n        assertEquals(4.0, s1.getYValue(3), EPSILON);\n        assertEquals(5.0, s1.getYValue(4), EPSILON);\n    }",
        "begin_line": 228,
        "end_line": 240,
        "comment": "\n     * When items are added with duplicate x-values, we expect them to remain \n     * in the order they were added.\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 61)",
            "(line 230,col 9)-(line 230,col 35)",
            "(line 231,col 9)-(line 231,col 35)",
            "(line 232,col 9)-(line 232,col 35)",
            "(line 233,col 9)-(line 233,col 35)",
            "(line 234,col 9)-(line 234,col 35)",
            "(line 235,col 9)-(line 235,col 52)",
            "(line 236,col 9)-(line 236,col 52)",
            "(line 237,col 9)-(line 237,col 52)",
            "(line 238,col 9)-(line 238,col 52)",
            "(line 239,col 9)-(line 239,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesTests.testAdd()",
        "snippet": "    public void testAdd() {\n        XIntervalSeries series = new XIntervalSeries(\"Series\", false, true);\n        series.add(5.0, 5.50, 5.50, 5.50);\n        series.add(5.1, 5.51, 5.51, 5.51);\n        series.add(6.0, 6.6, 6.6, 6.6);\n        series.add(3.0, 3.3, 3.3, 3.3);\n        series.add(4.0, 4.4, 4.4, 4.4);\n        series.add(2.0, 2.2, 2.2, 2.2);\n        series.add(1.0, 1.1, 1.1, 1.1);\n        assertEquals(5.5, series.getYValue(0), EPSILON);\n        assertEquals(5.51, series.getYValue(1), EPSILON);\n        assertEquals(6.6, series.getYValue(2), EPSILON);\n        assertEquals(3.3, series.getYValue(3), EPSILON);\n        assertEquals(4.4, series.getYValue(4), EPSILON);\n        assertEquals(2.2, series.getYValue(5), EPSILON);\n        assertEquals(1.1, series.getYValue(6), EPSILON);\n    }",
        "begin_line": 245,
        "end_line": 261,
        "comment": "\n     * Some checks for the add() method for an UNSORTED series.\n     ",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 76)",
            "(line 247,col 9)-(line 247,col 42)",
            "(line 248,col 9)-(line 248,col 42)",
            "(line 249,col 9)-(line 249,col 39)",
            "(line 250,col 9)-(line 250,col 39)",
            "(line 251,col 9)-(line 251,col 39)",
            "(line 252,col 9)-(line 252,col 39)",
            "(line 253,col 9)-(line 253,col 39)",
            "(line 254,col 9)-(line 254,col 56)",
            "(line 255,col 9)-(line 255,col 57)",
            "(line 256,col 9)-(line 256,col 56)",
            "(line 257,col 9)-(line 257,col 56)",
            "(line 258,col 9)-(line 258,col 56)",
            "(line 259,col 9)-(line 259,col 56)",
            "(line 260,col 9)-(line 260,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesTests.testSetMaximumItemCount()",
        "snippet": "    public void testSetMaximumItemCount() {\n        XIntervalSeries s1 = new XIntervalSeries(\"S1\");\n        assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount());\n        s1.setMaximumItemCount(2);\n        assertEquals(2, s1.getMaximumItemCount());\n        s1.add(1.0, 1.1, 1.1, 1.1);\n        s1.add(2.0, 2.2, 2.2, 2.2);\n        s1.add(3.0, 3.3, 3.3, 3.3);\n        assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON);\n        assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON);\n    }",
        "begin_line": 266,
        "end_line": 276,
        "comment": "\n     * A simple check that the maximumItemCount attribute is working.\n     ",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 55)",
            "(line 268,col 9)-(line 268,col 66)",
            "(line 269,col 9)-(line 269,col 34)",
            "(line 270,col 9)-(line 270,col 50)",
            "(line 271,col 9)-(line 271,col 35)",
            "(line 272,col 9)-(line 272,col 35)",
            "(line 273,col 9)-(line 273,col 35)",
            "(line 274,col 9)-(line 274,col 61)",
            "(line 275,col 9)-(line 275,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesTests.testSetMaximumItemCount2()",
        "snippet": "    public void testSetMaximumItemCount2() {\n        XIntervalSeries s1 = new XIntervalSeries(\"S1\");\n        s1.add(1.0, 1.1, 1.1, 1.1);\n        s1.add(2.0, 2.2, 2.2, 2.2);\n        s1.add(3.0, 3.3, 3.3, 3.3);\n        s1.setMaximumItemCount(2);\n        assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON);\n        assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON);\n    }",
        "begin_line": 281,
        "end_line": 289,
        "comment": "\n     * Check that the maximum item count can be applied retrospectively.\n     ",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 55)",
            "(line 283,col 9)-(line 283,col 35)",
            "(line 284,col 9)-(line 284,col 35)",
            "(line 285,col 9)-(line 285,col 35)",
            "(line 286,col 9)-(line 286,col 34)",
            "(line 287,col 9)-(line 287,col 61)",
            "(line 288,col 9)-(line 288,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesTests.testClear()",
        "snippet": "    public void testClear() {\n    \tXIntervalSeries s1 = new XIntervalSeries(\"S1\");\n        s1.addChangeListener(this);\n        s1.clear();\n        assertNull(this.lastEvent);\n        assertTrue(s1.isEmpty());\n        s1.add(1.0, 2.0, 3.0, 4.0);\n        assertFalse(s1.isEmpty());\n        s1.clear();\n        assertNotNull(this.lastEvent);\n        assertTrue(s1.isEmpty());\n    } ",
        "begin_line": 294,
        "end_line": 305,
        "comment": "\n     * Some checks for the clear() method.\n     ",
        "child_ranges": [
            "(line 295,col 6)-(line 295,col 52)",
            "(line 296,col 9)-(line 296,col 35)",
            "(line 297,col 9)-(line 297,col 19)",
            "(line 298,col 9)-(line 298,col 35)",
            "(line 299,col 9)-(line 299,col 33)",
            "(line 300,col 9)-(line 300,col 35)",
            "(line 301,col 9)-(line 301,col 34)",
            "(line 302,col 9)-(line 302,col 19)",
            "(line 303,col 9)-(line 303,col 38)",
            "(line 304,col 9)-(line 304,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XYDataItemTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYDataItemTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XYDataItemTests.XYDataItemTests(java.lang.String)",
        "snippet": "    public XYDataItemTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XYDataItemTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        XYDataItem i1 = new XYDataItem(1.0, 1.1);\n        XYDataItem i2 = new XYDataItem(1.0, 1.1);\n        assertTrue(i1.equals(i2));\n        assertTrue(i2.equals(i1));\n\n        i1.setY(new Double(9.9));\n        assertFalse(i1.equals(i2));\n\n        i2.setY(new Double(9.9));\n        assertTrue(i1.equals(i2));\n\n    }",
        "begin_line": 82,
        "end_line": 95,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 49)",
            "(line 85,col 9)-(line 85,col 49)",
            "(line 86,col 9)-(line 86,col 34)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 89,col 9)-(line 89,col 33)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 92,col 9)-(line 92,col 33)",
            "(line 93,col 9)-(line 93,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XYDataItemTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYDataItem i1 = new XYDataItem(1.0, 1.1);\n        XYDataItem i2 = null;\n        try {\n            i2 = (XYDataItem) i1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"XYDataItemTests.testCloning: failed to clone.\");\n        }\n        assertTrue(i1 != i2);\n        assertTrue(i1.getClass() == i2.getClass());\n        assertTrue(i1.equals(i2));\n    }",
        "begin_line": 100,
        "end_line": 112,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 49)",
            "(line 102,col 9)-(line 102,col 29)",
            "(line 103,col 9)-(line 108,col 9)",
            "(line 109,col 9)-(line 109,col 29)",
            "(line 110,col 9)-(line 110,col 51)",
            "(line 111,col 9)-(line 111,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XYDataItemTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYDataItem i1 = new XYDataItem(1.0, 1.1);\n        XYDataItem i2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(i1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            i2 = (XYDataItem) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(i1, i2);\n\n    }",
        "begin_line": 117,
        "end_line": 139,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 49)",
            "(line 120,col 9)-(line 120,col 29)",
            "(line 122,col 9)-(line 136,col 9)",
            "(line 137,col 9)-(line 137,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.seriesChanged(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "    public void seriesChanged(SeriesChangeEvent event) {\n        this.lastEvent = event;\n\t}",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYIntervalSeriesTests.class);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.XYIntervalSeriesTests(java.lang.String)",
        "snippet": "    public XYIntervalSeriesTests(String name) {\n        super(name);\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        XYIntervalSeries s1 = new XYIntervalSeries(\"s1\");\n        XYIntervalSeries s2 = new XYIntervalSeries(\"s1\");\n        assertTrue(s1.equals(s2));\n        \n        // seriesKey\n        s1 = new XYIntervalSeries(\"s2\");\n        assertFalse(s1.equals(s2));\n        s2 = new XYIntervalSeries(\"s2\");\n        assertTrue(s1.equals(s2));\n        \n        // autoSort\n        s1 = new XYIntervalSeries(\"s2\", false, true);\n        assertFalse(s1.equals(s2));\n        s2 = new XYIntervalSeries(\"s2\", false, true);\n        assertTrue(s1.equals(s2));\n        \n        // allowDuplicateValues\n        s1 = new XYIntervalSeries(\"s2\", false, false);\n        assertFalse(s1.equals(s2));\n        s2 = new XYIntervalSeries(\"s2\", false, false);\n        assertTrue(s1.equals(s2));\n        \n        // add a value\n        s1.add(1.0, 0.5, 1.5, 2.0, 1.9, 2.1);\n        assertFalse(s1.equals(s2));\n        s2.add(1.0, 0.5, 1.5, 2.0, 1.9, 2.1);\n        assertTrue(s2.equals(s1));\n\n        // add another value\n        s1.add(2.0, 0.5, 1.5, 2.0, 1.9, 2.1);\n        assertFalse(s1.equals(s2));\n        s2.add(2.0, 0.5, 1.5, 2.0, 1.9, 2.1);\n        assertTrue(s2.equals(s1));\n\n        // remove a value\n        s1.remove(new Double(1.0));\n        assertFalse(s1.equals(s2));\n        s2.remove(new Double(1.0));\n        assertTrue(s2.equals(s1));\n        \n    }",
        "begin_line": 93,
        "end_line": 135,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 57)",
            "(line 96,col 9)-(line 96,col 57)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 100,col 9)-(line 100,col 40)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 40)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 106,col 9)-(line 106,col 53)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 53)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 112,col 9)-(line 112,col 54)",
            "(line 113,col 9)-(line 113,col 35)",
            "(line 114,col 9)-(line 114,col 54)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 118,col 9)-(line 118,col 45)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 120,col 45)",
            "(line 121,col 9)-(line 121,col 34)",
            "(line 124,col 9)-(line 124,col 45)",
            "(line 125,col 9)-(line 125,col 35)",
            "(line 126,col 9)-(line 126,col 45)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 131,col 35)",
            "(line 132,col 9)-(line 132,col 35)",
            "(line 133,col 9)-(line 133,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYIntervalSeries s1 = new XYIntervalSeries(\"s1\");\n        s1.add(1.0, 0.5, 1.5, 2.0, 1.9, 2.01);\n        XYIntervalSeries s2 = null;\n        try {\n            s2 = (XYIntervalSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n    }",
        "begin_line": 140,
        "end_line": 153,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 57)",
            "(line 142,col 9)-(line 142,col 46)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 150,col 29)",
            "(line 151,col 9)-(line 151,col 51)",
            "(line 152,col 9)-(line 152,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYIntervalSeries s1 = new XYIntervalSeries(\"s1\");\n        s1.add(1.0, 0.5, 1.5, 2.0, 1.9, 2.1);\n        XYIntervalSeries s2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            s2 = (XYIntervalSeries) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(s1, s2);\n\n    }",
        "begin_line": 158,
        "end_line": 180,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 57)",
            "(line 161,col 9)-(line 161,col 45)",
            "(line 162,col 9)-(line 162,col 35)",
            "(line 164,col 9)-(line 177,col 9)",
            "(line 178,col 9)-(line 178,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        XYIntervalSeries s1 = new XYIntervalSeries(\"Series 1\");\n        s1.add(1.0, 1.0, 1.0, 2.0, 1.9, 2.1);\n        s1.add(2.0, 2.0, 2.0, 3.0, 2.9, 3.1);\n        s1.add(3.0, 3.0, 3.0, 4.0, 3.9, 4.1);\n        assertEquals(0, s1.indexOf(new Double(1.0)));\n    }",
        "begin_line": 185,
        "end_line": 191,
        "comment": "\n     * Simple test for the indexOf() method.\n     ",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 63)",
            "(line 187,col 9)-(line 187,col 45)",
            "(line 188,col 9)-(line 188,col 45)",
            "(line 189,col 9)-(line 189,col 45)",
            "(line 190,col 9)-(line 190,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.testIndexOf2()",
        "snippet": "    public void testIndexOf2() {\n        XYIntervalSeries s1 = new XYIntervalSeries(\"Series 1\", false, true);\n        s1.add(1.0, 1.0, 1.0, 2.0, 1.9, 2.1);\n        s1.add(3.0, 3.0, 3.0, 3.0, 2.9, 3.1);\n        s1.add(2.0, 2.0, 2.0, 2.0, 1.9, 2.1);\n        assertEquals(0, s1.indexOf(new Double(1.0)));        \n        assertEquals(1, s1.indexOf(new Double(3.0)));        \n        assertEquals(2, s1.indexOf(new Double(2.0)));        \n    }",
        "begin_line": 196,
        "end_line": 204,
        "comment": "\n     * A check for the indexOf() method for an unsorted series.\n     ",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 76)",
            "(line 198,col 9)-(line 198,col 45)",
            "(line 199,col 9)-(line 199,col 45)",
            "(line 200,col 9)-(line 200,col 45)",
            "(line 201,col 9)-(line 201,col 53)",
            "(line 202,col 9)-(line 202,col 53)",
            "(line 203,col 9)-(line 203,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.testRemove()",
        "snippet": "    public void testRemove() {\n        XYIntervalSeries s1 = new XYIntervalSeries(\"Series 1\");\n        s1.add(1.0, 1.0, 1.0, 2.0, 1.9, 2.1);\n        s1.add(2.0, 2.0, 2.0, 2.0, 1.9, 2.1);\n        s1.add(3.0, 3.0, 3.0, 3.0, 2.9, 3.1);\n        assertEquals(3, s1.getItemCount());\n        \n        s1.remove(new Double(2.0));\n        assertEquals(new Double(3.0), s1.getX(1));\n        \n        s1.remove(new Double(1.0));\n        assertEquals(new Double(3.0), s1.getX(0));    \n    }",
        "begin_line": 209,
        "end_line": 221,
        "comment": "\n     * Simple test for the remove() method.\n     ",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 63)",
            "(line 211,col 9)-(line 211,col 45)",
            "(line 212,col 9)-(line 212,col 45)",
            "(line 213,col 9)-(line 213,col 45)",
            "(line 214,col 9)-(line 214,col 43)",
            "(line 216,col 9)-(line 216,col 35)",
            "(line 217,col 9)-(line 217,col 50)",
            "(line 219,col 9)-(line 219,col 35)",
            "(line 220,col 9)-(line 220,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.testAdditionOfDuplicateXValues()",
        "snippet": "    public void testAdditionOfDuplicateXValues() {\n        XYIntervalSeries s1 = new XYIntervalSeries(\"Series 1\");\n        s1.add(1.0, 1.0, 1.0, 1.0, 1.0, 1.0);\n        s1.add(2.0, 2.0, 2.0, 2.0, 2.0, 2.0);\n        s1.add(2.0, 3.0, 3.0, 3.0, 3.0, 3.0);\n        s1.add(2.0, 4.0, 4.0, 4.0, 4.0, 4.0);\n        s1.add(3.0, 5.0, 5.0, 5.0, 5.0, 5.0);\n        assertEquals(1.0, s1.getYValue(0), EPSILON);\n        assertEquals(2.0, s1.getYValue(1), EPSILON);\n        assertEquals(3.0, s1.getYValue(2), EPSILON);\n        assertEquals(4.0, s1.getYValue(3), EPSILON);\n        assertEquals(5.0, s1.getYValue(4), EPSILON);\n    }",
        "begin_line": 229,
        "end_line": 241,
        "comment": "\n     * When items are added with duplicate x-values, we expect them to remain \n     * in the order they were added.\n     ",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 63)",
            "(line 231,col 9)-(line 231,col 45)",
            "(line 232,col 9)-(line 232,col 45)",
            "(line 233,col 9)-(line 233,col 45)",
            "(line 234,col 9)-(line 234,col 45)",
            "(line 235,col 9)-(line 235,col 45)",
            "(line 236,col 9)-(line 236,col 52)",
            "(line 237,col 9)-(line 237,col 52)",
            "(line 238,col 9)-(line 238,col 52)",
            "(line 239,col 9)-(line 239,col 52)",
            "(line 240,col 9)-(line 240,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.testAdd()",
        "snippet": "    public void testAdd() {\n        XYIntervalSeries series = new XYIntervalSeries(\"Series\", false, true);\n        series.add(5.0, 5.50, 5.50, 5.50, 5.50, 5.50);\n        series.add(5.1, 5.51, 5.51, 5.51, 5.51, 5.51);\n        series.add(6.0, 6.6, 6.6, 6.6, 6.6, 6.6);\n        series.add(3.0, 3.3, 3.3, 3.3, 3.3, 3.3);\n        series.add(4.0, 4.4, 4.4, 4.4, 4.4, 4.4);\n        series.add(2.0, 2.2, 2.2, 2.2, 2.2, 2.2);\n        series.add(1.0, 1.1, 1.1, 1.1, 1.1, 1.1);\n        assertEquals(5.5, series.getYValue(0), EPSILON);\n        assertEquals(5.51, series.getYValue(1), EPSILON);\n        assertEquals(6.6, series.getYValue(2), EPSILON);\n        assertEquals(3.3, series.getYValue(3), EPSILON);\n        assertEquals(4.4, series.getYValue(4), EPSILON);\n        assertEquals(2.2, series.getYValue(5), EPSILON);\n        assertEquals(1.1, series.getYValue(6), EPSILON);\n    }",
        "begin_line": 246,
        "end_line": 262,
        "comment": "\n     * Some checks for the add() method for an UNSORTED series.\n     ",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 78)",
            "(line 248,col 9)-(line 248,col 54)",
            "(line 249,col 9)-(line 249,col 54)",
            "(line 250,col 9)-(line 250,col 49)",
            "(line 251,col 9)-(line 251,col 49)",
            "(line 252,col 9)-(line 252,col 49)",
            "(line 253,col 9)-(line 253,col 49)",
            "(line 254,col 9)-(line 254,col 49)",
            "(line 255,col 9)-(line 255,col 56)",
            "(line 256,col 9)-(line 256,col 57)",
            "(line 257,col 9)-(line 257,col 56)",
            "(line 258,col 9)-(line 258,col 56)",
            "(line 259,col 9)-(line 259,col 56)",
            "(line 260,col 9)-(line 260,col 56)",
            "(line 261,col 9)-(line 261,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.testSetMaximumItemCount()",
        "snippet": "    public void testSetMaximumItemCount() {\n        XYIntervalSeries s1 = new XYIntervalSeries(\"S1\");\n        assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount());\n        s1.setMaximumItemCount(2);\n        assertEquals(2, s1.getMaximumItemCount());\n        s1.add(1.0, 1.1, 1.1, 1.1, 1.1, 1.1);\n        s1.add(2.0, 2.2, 2.2, 2.2, 2.2, 2.2);\n        s1.add(3.0, 3.3, 3.3, 3.3, 3.3, 3.3);\n        assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON);\n        assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON);\n    }",
        "begin_line": 267,
        "end_line": 277,
        "comment": "\n     * A simple check that the maximumItemCount attribute is working.\n     ",
        "child_ranges": [
            "(line 268,col 9)-(line 268,col 57)",
            "(line 269,col 9)-(line 269,col 66)",
            "(line 270,col 9)-(line 270,col 34)",
            "(line 271,col 9)-(line 271,col 50)",
            "(line 272,col 9)-(line 272,col 45)",
            "(line 273,col 9)-(line 273,col 45)",
            "(line 274,col 9)-(line 274,col 45)",
            "(line 275,col 9)-(line 275,col 61)",
            "(line 276,col 9)-(line 276,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.testSetMaximumItemCount2()",
        "snippet": "    public void testSetMaximumItemCount2() {\n        XYIntervalSeries s1 = new XYIntervalSeries(\"S1\");\n        s1.add(1.0, 1.1, 1.1, 1.1, 1.1, 1.1);\n        s1.add(2.0, 2.2, 2.2, 2.2, 2.2, 2.2);\n        s1.add(3.0, 3.3, 3.3, 3.3, 2.2, 2.2);\n        s1.setMaximumItemCount(2);\n        assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON);\n        assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON);\n    }",
        "begin_line": 282,
        "end_line": 290,
        "comment": "\n     * Check that the maximum item count can be applied retrospectively.\n     ",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 57)",
            "(line 284,col 9)-(line 284,col 45)",
            "(line 285,col 9)-(line 285,col 45)",
            "(line 286,col 9)-(line 286,col 45)",
            "(line 287,col 9)-(line 287,col 34)",
            "(line 288,col 9)-(line 288,col 61)",
            "(line 289,col 9)-(line 289,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.testValues()",
        "snippet": "    public void testValues() {\n        XYIntervalSeries s1 = new XYIntervalSeries(\"S1\");\n        s1.add(2.0, 1.0, 3.0, 5.0, 4.0, 6.0);\n        assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON);\n        assertEquals(1.0, s1.getXLowValue(0), EPSILON);\n        assertEquals(3.0, s1.getXHighValue(0), EPSILON);\n        assertEquals(5.0, s1.getYValue(0), EPSILON);\n        assertEquals(4.0, s1.getYLowValue(0), EPSILON);\n        assertEquals(6.0, s1.getYHighValue(0), EPSILON);\n    }",
        "begin_line": 295,
        "end_line": 304,
        "comment": "\n     * Some checks for the new accessor methods added in 1.0.5.\n     ",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 57)",
            "(line 297,col 9)-(line 297,col 45)",
            "(line 298,col 9)-(line 298,col 61)",
            "(line 299,col 9)-(line 299,col 55)",
            "(line 300,col 9)-(line 300,col 56)",
            "(line 301,col 9)-(line 301,col 52)",
            "(line 302,col 9)-(line 302,col 55)",
            "(line 303,col 9)-(line 303,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesTests.testClear()",
        "snippet": "    public void testClear() {\n    \tXYIntervalSeries s1 = new XYIntervalSeries(\"S1\");\n        s1.addChangeListener(this);\n        s1.clear();\n        assertNull(this.lastEvent);\n        assertTrue(s1.isEmpty());\n        s1.add(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);\n        assertFalse(s1.isEmpty());\n        s1.clear();\n        assertNotNull(this.lastEvent);\n        assertTrue(s1.isEmpty());\n    } ",
        "begin_line": 309,
        "end_line": 320,
        "comment": "\n     * Some checks for the clear() method.\n     ",
        "child_ranges": [
            "(line 310,col 6)-(line 310,col 54)",
            "(line 311,col 9)-(line 311,col 35)",
            "(line 312,col 9)-(line 312,col 19)",
            "(line 313,col 9)-(line 313,col 35)",
            "(line 314,col 9)-(line 314,col 33)",
            "(line 315,col 9)-(line 315,col 45)",
            "(line 316,col 9)-(line 316,col 34)",
            "(line 317,col 9)-(line 317,col 19)",
            "(line 318,col 9)-(line 318,col 38)",
            "(line 319,col 9)-(line 319,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultXYDatasetTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYDatasetTests.DefaultXYDatasetTests(java.lang.String)",
        "snippet": "    public DefaultXYDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n \n        DefaultXYDataset d1 = new DefaultXYDataset();\n        DefaultXYDataset d2 = new DefaultXYDataset();\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[][] data1 = new double[][] {x1, y1};\n        double[] x2 = new double[] {1.0, 2.0, 3.0};\n        double[] y2 = new double[] {4.0, 5.0, 6.0};\n        double[][] data2 = new double[][] {x2, y2};\n        d1.addSeries(\"S1\", data1);\n        assertFalse(d1.equals(d2));\n        d2.addSeries(\"S1\", data2);\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 83,
        "end_line": 100,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 53)",
            "(line 86,col 9)-(line 86,col 53)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 90,col 9)-(line 90,col 51)",
            "(line 91,col 9)-(line 91,col 51)",
            "(line 92,col 9)-(line 92,col 51)",
            "(line 93,col 9)-(line 93,col 51)",
            "(line 94,col 9)-(line 94,col 51)",
            "(line 95,col 9)-(line 95,col 51)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 99,col 9)-(line 99,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultXYDataset d1 = new DefaultXYDataset();\n        DefaultXYDataset d2 = null;\n        try {\n            d2 = (DefaultXYDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // try a dataset with some content...\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[][] data1 = new double[][] {x1, y1};\n        d1.addSeries(\"S1\", data1);\n        try {\n            d2 = (DefaultXYDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // check that the clone doesn't share the same underlying arrays.\n        x1[1] = 2.2;\n        assertFalse(d1.equals(d2));\n        x1[1] = 2.0;\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 105,
        "end_line": 138,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 53)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 113,col 9)",
            "(line 114,col 9)-(line 114,col 29)",
            "(line 115,col 9)-(line 115,col 51)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 119,col 9)-(line 119,col 51)",
            "(line 120,col 9)-(line 120,col 51)",
            "(line 121,col 9)-(line 121,col 51)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 123,col 9)-(line 128,col 9)",
            "(line 129,col 9)-(line 129,col 29)",
            "(line 130,col 9)-(line 130,col 51)",
            "(line 131,col 9)-(line 131,col 34)",
            "(line 134,col 9)-(line 134,col 20)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 136,col 20)",
            "(line 137,col 9)-(line 137,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultXYDataset d1 = new DefaultXYDataset();\n        DefaultXYDataset d2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (DefaultXYDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n        // try a dataset with some content...\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[][] data1 = new double[][] {x1, y1};\n        d1.addSeries(\"S1\", data1);\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (DefaultXYDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n        \n    }",
        "begin_line": 143,
        "end_line": 187,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 53)",
            "(line 146,col 9)-(line 146,col 35)",
            "(line 148,col 9)-(line 162,col 9)",
            "(line 163,col 9)-(line 163,col 29)",
            "(line 166,col 9)-(line 166,col 51)",
            "(line 167,col 9)-(line 167,col 51)",
            "(line 168,col 9)-(line 168,col 51)",
            "(line 169,col 9)-(line 169,col 34)",
            "(line 170,col 9)-(line 184,col 9)",
            "(line 185,col 9)-(line 185,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYDatasetTests.testGetSeriesKey()",
        "snippet": "    public void testGetSeriesKey() {\n        DefaultXYDataset d = createSampleDataset1();\n        assertEquals(\"S1\", d.getSeriesKey(0));\n        assertEquals(\"S2\", d.getSeriesKey(1));\n        \n        // check for series key out of bounds\n        boolean pass = false;\n        try {\n            /*Comparable k =*/ d.getSeriesKey(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            /*Comparable k =*/ d.getSeriesKey(2);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 192,
        "end_line": 215,
        "comment": "\n     * Some checks for the getSeriesKey(int) method.\n     ",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 52)",
            "(line 194,col 9)-(line 194,col 46)",
            "(line 195,col 9)-(line 195,col 46)",
            "(line 198,col 9)-(line 198,col 29)",
            "(line 199,col 9)-(line 204,col 9)",
            "(line 205,col 9)-(line 205,col 25)",
            "(line 207,col 9)-(line 207,col 21)",
            "(line 208,col 9)-(line 213,col 9)",
            "(line 214,col 9)-(line 214,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYDatasetTests.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        DefaultXYDataset d = createSampleDataset1();\n        assertEquals(0, d.indexOf(\"S1\"));\n        assertEquals(1, d.indexOf(\"S2\"));\n        assertEquals(-1, d.indexOf(\"Green Eggs and Ham\"));\n        assertEquals(-1, d.indexOf(null));\n    }",
        "begin_line": 220,
        "end_line": 226,
        "comment": "\n     * Some checks for the indexOf(Comparable) method.\n     ",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 52)",
            "(line 222,col 9)-(line 222,col 41)",
            "(line 223,col 9)-(line 223,col 41)",
            "(line 224,col 9)-(line 224,col 58)",
            "(line 225,col 9)-(line 225,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYDatasetTests.testAddSeries()",
        "snippet": "    public void testAddSeries() {\n        DefaultXYDataset d = new DefaultXYDataset();\n        d.addSeries(\"S1\", new double[][] {{1.0}, {2.0}});\n        assertEquals(1, d.getSeriesCount());\n        assertEquals(\"S1\", d.getSeriesKey(0));\n        \n        // check that adding a series will overwrite the old series\n        d.addSeries(\"S1\", new double[][] {{11.0}, {12.0}});\n        assertEquals(1, d.getSeriesCount());\n        assertEquals(12.0, d.getYValue(0, 0), EPSILON);\n        \n        // check null key\n        boolean pass = false;\n        try\n        {\n          d.addSeries(null, new double[][] {{1.0}, {2.0}});\n        }\n        catch (IllegalArgumentException e)\n        {\n          pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 233,
        "end_line": 255,
        "comment": "\n     * Some tests for the addSeries() method.\n     ",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 52)",
            "(line 235,col 9)-(line 235,col 57)",
            "(line 236,col 9)-(line 236,col 44)",
            "(line 237,col 9)-(line 237,col 46)",
            "(line 240,col 9)-(line 240,col 59)",
            "(line 241,col 9)-(line 241,col 44)",
            "(line 242,col 9)-(line 242,col 55)",
            "(line 245,col 9)-(line 245,col 29)",
            "(line 246,col 9)-(line 253,col 9)",
            "(line 254,col 9)-(line 254,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYDatasetTests.createSampleDataset1()",
        "snippet": "    public DefaultXYDataset createSampleDataset1() {\n        DefaultXYDataset d = new DefaultXYDataset();\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[][] data1 = new double[][] {x1, y1};\n        d.addSeries(\"S1\", data1);\n        \n        double[] x2 = new double[] {1.0, 2.0, 3.0};\n        double[] y2 = new double[] {4.0, 5.0, 6.0};\n        double[][] data2 = new double[][] {x2, y2};\n        d.addSeries(\"S2\", data2);\n        return d;\n    }",
        "begin_line": 262,
        "end_line": 274,
        "comment": "\n     * Creates a sample dataset for testing.\n     * \n     * @return A sample dataset.\n     ",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 52)",
            "(line 264,col 9)-(line 264,col 51)",
            "(line 265,col 9)-(line 265,col 51)",
            "(line 266,col 9)-(line 266,col 51)",
            "(line 267,col 9)-(line 267,col 33)",
            "(line 269,col 9)-(line 269,col 51)",
            "(line 270,col 9)-(line 270,col 51)",
            "(line 271,col 9)-(line 271,col 51)",
            "(line 272,col 9)-(line 272,col 33)",
            "(line 273,col 9)-(line 273,col 17)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultIntervalXYDatasetTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 66)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.DefaultIntervalXYDatasetTests(java.lang.String)",
        "snippet": "    public DefaultIntervalXYDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetSeriesCount()",
        "snippet": "    public void testGetSeriesCount() {\n        DefaultIntervalXYDataset d = new DefaultIntervalXYDataset();\n        assertEquals(0, d.getSeriesCount());\n        d = createSampleDataset1();\n        assertEquals(2, d.getSeriesCount());\n    }",
        "begin_line": 83,
        "end_line": 88,
        "comment": "\n     * Some checks for the getSeriesCount() method.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 68)",
            "(line 85,col 9)-(line 85,col 44)",
            "(line 86,col 9)-(line 86,col 35)",
            "(line 87,col 9)-(line 87,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetSeriesKey()",
        "snippet": "    public void testGetSeriesKey() {\n        DefaultIntervalXYDataset d = createSampleDataset1();\n        assertEquals(\"S1\", d.getSeriesKey(0));\n        assertEquals(\"S2\", d.getSeriesKey(1));\n        \n        // check for series key out of bounds\n        boolean pass = false;\n        try {\n            /*Comparable k =*/ d.getSeriesKey(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            /*Comparable k =*/ d.getSeriesKey(2);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 93,
        "end_line": 116,
        "comment": "\n     * Some checks for the getSeriesKey(int) method.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 60)",
            "(line 95,col 9)-(line 95,col 46)",
            "(line 96,col 9)-(line 96,col 46)",
            "(line 99,col 9)-(line 99,col 29)",
            "(line 100,col 9)-(line 105,col 9)",
            "(line 106,col 9)-(line 106,col 25)",
            "(line 108,col 9)-(line 108,col 21)",
            "(line 109,col 9)-(line 114,col 9)",
            "(line 115,col 9)-(line 115,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetItemCount()",
        "snippet": "    public void testGetItemCount() {\n        DefaultIntervalXYDataset d = createSampleDataset1();\n        assertEquals(3, d.getItemCount(0));\n        assertEquals(3, d.getItemCount(1));\n        \n        // try an index out of bounds\n        boolean pass = false;\n        try {\n            d.getItemCount(2);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 121,
        "end_line": 135,
        "comment": "\n     * Some checks for the getItemCount() method.\n     ",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 60)",
            "(line 123,col 9)-(line 123,col 43)",
            "(line 124,col 9)-(line 124,col 43)",
            "(line 127,col 9)-(line 127,col 29)",
            "(line 128,col 9)-(line 133,col 9)",
            "(line 134,col 9)-(line 134,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetXValue()",
        "snippet": "    public void testGetXValue() {\n        DefaultIntervalXYDataset d = createSampleDataset1();\n        assertEquals(1.0, d.getXValue(0, 0), EPSILON);\n        assertEquals(2.0, d.getXValue(0, 1), EPSILON);\n        assertEquals(3.0, d.getXValue(0, 2), EPSILON);\n        assertEquals(11.0, d.getXValue(1, 0), EPSILON);\n        assertEquals(12.0, d.getXValue(1, 1), EPSILON);\n        assertEquals(13.0, d.getXValue(1, 2), EPSILON);\n    }",
        "begin_line": 142,
        "end_line": 150,
        "comment": "\n     * Some checks for the getXValue() method.\n     ",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 60)",
            "(line 144,col 9)-(line 144,col 54)",
            "(line 145,col 9)-(line 145,col 54)",
            "(line 146,col 9)-(line 146,col 54)",
            "(line 147,col 9)-(line 147,col 55)",
            "(line 148,col 9)-(line 148,col 55)",
            "(line 149,col 9)-(line 149,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetYValue()",
        "snippet": "    public void testGetYValue() {\n        DefaultIntervalXYDataset d = createSampleDataset1();\n        assertEquals(4.0, d.getYValue(0, 0), EPSILON);\n        assertEquals(5.0, d.getYValue(0, 1), EPSILON);\n        assertEquals(6.0, d.getYValue(0, 2), EPSILON);\n        assertEquals(14.0, d.getYValue(1, 0), EPSILON);\n        assertEquals(15.0, d.getYValue(1, 1), EPSILON);\n        assertEquals(16.0, d.getYValue(1, 2), EPSILON);\n    }",
        "begin_line": 155,
        "end_line": 163,
        "comment": "\n     * Some checks for the getYValue() method.\n     ",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 60)",
            "(line 157,col 9)-(line 157,col 54)",
            "(line 158,col 9)-(line 158,col 54)",
            "(line 159,col 9)-(line 159,col 54)",
            "(line 160,col 9)-(line 160,col 55)",
            "(line 161,col 9)-(line 161,col 55)",
            "(line 162,col 9)-(line 162,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetStartXValue()",
        "snippet": "    public void testGetStartXValue() {\n        DefaultIntervalXYDataset d = createSampleDataset1();\n        assertEquals(0.9, d.getStartXValue(0, 0), EPSILON);\n        assertEquals(1.9, d.getStartXValue(0, 1), EPSILON);\n        assertEquals(2.9, d.getStartXValue(0, 2), EPSILON);\n        assertEquals(10.9, d.getStartXValue(1, 0), EPSILON);\n        assertEquals(11.9, d.getStartXValue(1, 1), EPSILON);\n        assertEquals(12.9, d.getStartXValue(1, 2), EPSILON);\n    }",
        "begin_line": 168,
        "end_line": 176,
        "comment": "\n     * Some checks for the getStartXValue() method.\n     ",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 60)",
            "(line 170,col 9)-(line 170,col 59)",
            "(line 171,col 9)-(line 171,col 59)",
            "(line 172,col 9)-(line 172,col 59)",
            "(line 173,col 9)-(line 173,col 60)",
            "(line 174,col 9)-(line 174,col 60)",
            "(line 175,col 9)-(line 175,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetEndXValue()",
        "snippet": "    public void testGetEndXValue() {\n        DefaultIntervalXYDataset d = createSampleDataset1();\n        assertEquals(1.1, d.getEndXValue(0, 0), EPSILON);\n        assertEquals(2.1, d.getEndXValue(0, 1), EPSILON);\n        assertEquals(3.1, d.getEndXValue(0, 2), EPSILON);\n        assertEquals(11.1, d.getEndXValue(1, 0), EPSILON);\n        assertEquals(12.1, d.getEndXValue(1, 1), EPSILON);\n        assertEquals(13.1, d.getEndXValue(1, 2), EPSILON);\n    }",
        "begin_line": 181,
        "end_line": 189,
        "comment": "\n     * Some checks for the getEndXValue() method.\n     ",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 60)",
            "(line 183,col 9)-(line 183,col 57)",
            "(line 184,col 9)-(line 184,col 57)",
            "(line 185,col 9)-(line 185,col 57)",
            "(line 186,col 9)-(line 186,col 58)",
            "(line 187,col 9)-(line 187,col 58)",
            "(line 188,col 9)-(line 188,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetStartYValue()",
        "snippet": "    public void testGetStartYValue() {\n        DefaultIntervalXYDataset d = createSampleDataset1();\n        assertEquals(1.09, d.getStartYValue(0, 0), EPSILON);\n        assertEquals(2.09, d.getStartYValue(0, 1), EPSILON);\n        assertEquals(3.09, d.getStartYValue(0, 2), EPSILON);\n        assertEquals(11.09, d.getStartYValue(1, 0), EPSILON);\n        assertEquals(12.09, d.getStartYValue(1, 1), EPSILON);\n        assertEquals(13.09, d.getStartYValue(1, 2), EPSILON);\n    }",
        "begin_line": 194,
        "end_line": 202,
        "comment": "\n     * Some checks for the getStartYValue() method.\n     ",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 60)",
            "(line 196,col 9)-(line 196,col 60)",
            "(line 197,col 9)-(line 197,col 60)",
            "(line 198,col 9)-(line 198,col 60)",
            "(line 199,col 9)-(line 199,col 61)",
            "(line 200,col 9)-(line 200,col 61)",
            "(line 201,col 9)-(line 201,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetEndYValue()",
        "snippet": "    public void testGetEndYValue() {\n        DefaultIntervalXYDataset d = createSampleDataset1();\n        assertEquals(1.11, d.getEndYValue(0, 0), EPSILON);\n        assertEquals(2.11, d.getEndYValue(0, 1), EPSILON);\n        assertEquals(3.11, d.getEndYValue(0, 2), EPSILON);\n        assertEquals(11.11, d.getEndYValue(1, 0), EPSILON);\n        assertEquals(12.11, d.getEndYValue(1, 1), EPSILON);\n        assertEquals(13.11, d.getEndYValue(1, 2), EPSILON);\n    }",
        "begin_line": 207,
        "end_line": 215,
        "comment": "\n     * Some checks for the getEndYValue() method.\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 60)",
            "(line 209,col 9)-(line 209,col 58)",
            "(line 210,col 9)-(line 210,col 58)",
            "(line 211,col 9)-(line 211,col 58)",
            "(line 212,col 9)-(line 212,col 59)",
            "(line 213,col 9)-(line 213,col 59)",
            "(line 214,col 9)-(line 214,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultIntervalXYDataset d1 = new DefaultIntervalXYDataset();\n        DefaultIntervalXYDataset d2 = new DefaultIntervalXYDataset();\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n\n        d1 = createSampleDataset1();\n        assertFalse(d1.equals(d2));\n        d2 = createSampleDataset1();\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 220,
        "end_line": 230,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 69)",
            "(line 222,col 9)-(line 222,col 69)",
            "(line 223,col 9)-(line 223,col 34)",
            "(line 224,col 9)-(line 224,col 34)",
            "(line 226,col 9)-(line 226,col 36)",
            "(line 227,col 9)-(line 227,col 35)",
            "(line 228,col 9)-(line 228,col 36)",
            "(line 229,col 9)-(line 229,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultIntervalXYDataset d1 = new DefaultIntervalXYDataset();\n        DefaultIntervalXYDataset d2 = null;\n        try {\n            d2 = (DefaultIntervalXYDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // try a dataset with some content...\n        d1 = createSampleDataset1();\n        try {\n            d2 = (DefaultIntervalXYDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 235,
        "end_line": 259,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 69)",
            "(line 237,col 9)-(line 237,col 43)",
            "(line 238,col 9)-(line 243,col 9)",
            "(line 244,col 9)-(line 244,col 29)",
            "(line 245,col 9)-(line 245,col 51)",
            "(line 246,col 9)-(line 246,col 34)",
            "(line 249,col 9)-(line 249,col 36)",
            "(line 250,col 9)-(line 255,col 9)",
            "(line 256,col 9)-(line 256,col 29)",
            "(line 257,col 9)-(line 257,col 51)",
            "(line 258,col 9)-(line 258,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n        DefaultIntervalXYDataset d1 = new DefaultIntervalXYDataset();\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] x1Start = new double[] {0.9, 1.9, 2.9};\n        double[] x1End = new double[] {1.1, 2.1, 3.1};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[] y1Start = new double[] {1.09, 2.09, 3.09};\n        double[] y1End = new double[] {1.11, 2.11, 3.11};\n        double[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start, \n                y1End};\n        d1.addSeries(\"S1\", data1);\n        DefaultIntervalXYDataset d2 = null;\n        try {\n            d2 = (DefaultIntervalXYDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // check independence\n        x1[0] = 111.1;\n        assertFalse(d1.equals(d2));        \n    }",
        "begin_line": 264,
        "end_line": 289,
        "comment": "\n     * Another test for cloning.\n     ",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 69)",
            "(line 266,col 9)-(line 266,col 51)",
            "(line 267,col 9)-(line 267,col 56)",
            "(line 268,col 9)-(line 268,col 54)",
            "(line 269,col 9)-(line 269,col 51)",
            "(line 270,col 9)-(line 270,col 59)",
            "(line 271,col 9)-(line 271,col 57)",
            "(line 272,col 9)-(line 273,col 23)",
            "(line 274,col 9)-(line 274,col 34)",
            "(line 275,col 9)-(line 275,col 43)",
            "(line 276,col 9)-(line 281,col 9)",
            "(line 282,col 9)-(line 282,col 29)",
            "(line 283,col 9)-(line 283,col 51)",
            "(line 284,col 9)-(line 284,col 34)",
            "(line 287,col 9)-(line 287,col 22)",
            "(line 288,col 9)-(line 288,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultIntervalXYDataset d1 = new DefaultIntervalXYDataset();\n        DefaultIntervalXYDataset d2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            d2 = (DefaultIntervalXYDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n        // try a dataset with some content...\n        d1 = createSampleDataset1();\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            d2 = (DefaultIntervalXYDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n        \n    }",
        "begin_line": 294,
        "end_line": 333,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 69)",
            "(line 297,col 9)-(line 297,col 43)",
            "(line 299,col 9)-(line 312,col 9)",
            "(line 313,col 9)-(line 313,col 29)",
            "(line 316,col 9)-(line 316,col 36)",
            "(line 317,col 9)-(line 330,col 9)",
            "(line 331,col 9)-(line 331,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        DefaultIntervalXYDataset d = createSampleDataset1();\n        assertEquals(0, d.indexOf(\"S1\"));\n        assertEquals(1, d.indexOf(\"S2\"));\n        assertEquals(-1, d.indexOf(\"Green Eggs and Ham\"));\n        assertEquals(-1, d.indexOf(null));\n    }",
        "begin_line": 338,
        "end_line": 344,
        "comment": "\n     * Some checks for the indexOf(Comparable) method.\n     ",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 60)",
            "(line 340,col 9)-(line 340,col 41)",
            "(line 341,col 9)-(line 341,col 41)",
            "(line 342,col 9)-(line 342,col 58)",
            "(line 343,col 9)-(line 343,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testAddSeries()",
        "snippet": "    public void testAddSeries() {\n        DefaultIntervalXYDataset d = new DefaultIntervalXYDataset();\n        d.addSeries(\"S1\", new double[][] {{1.0}, {0.5}, {1.5}, {2.0}, {2.5}, \n                {1.5}});\n        assertEquals(1, d.getSeriesCount());\n        assertEquals(\"S1\", d.getSeriesKey(0));\n        \n        // check that adding a series will overwrite the old series\n        d.addSeries(\"S1\", new double[][] {{1.1}, {0.6}, {1.6}, {2.1}, {2.6}, \n                {1.6}});\n        assertEquals(1, d.getSeriesCount());\n        assertEquals(2.1, d.getYValue(0, 0), EPSILON);\n        \n        // check null key\n        boolean pass = false;\n        try\n        {\n          d.addSeries(null, new double[][] {{1.1}, {0.6}, {1.6}, {2.1}, {2.6}, \n                  {1.6}});\n        }\n        catch (IllegalArgumentException e)\n        {\n          pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 349,
        "end_line": 374,
        "comment": "\n     * Some tests for the addSeries() method.\n     ",
        "child_ranges": [
            "(line 350,col 9)-(line 350,col 68)",
            "(line 351,col 9)-(line 352,col 24)",
            "(line 353,col 9)-(line 353,col 44)",
            "(line 354,col 9)-(line 354,col 46)",
            "(line 357,col 9)-(line 358,col 24)",
            "(line 359,col 9)-(line 359,col 44)",
            "(line 360,col 9)-(line 360,col 54)",
            "(line 363,col 9)-(line 363,col 29)",
            "(line 364,col 9)-(line 372,col 9)",
            "(line 373,col 9)-(line 373,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.createSampleDataset1()",
        "snippet": "    public DefaultIntervalXYDataset createSampleDataset1() {\n        DefaultIntervalXYDataset d = new DefaultIntervalXYDataset();\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] x1Start = new double[] {0.9, 1.9, 2.9};\n        double[] x1End = new double[] {1.1, 2.1, 3.1};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[] y1Start = new double[] {1.09, 2.09, 3.09};\n        double[] y1End = new double[] {1.11, 2.11, 3.11};\n        double[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start, \n                y1End};\n        d.addSeries(\"S1\", data1);\n        \n        double[] x2 = new double[] {11.0, 12.0, 13.0};\n        double[] x2Start = new double[] {10.9, 11.9, 12.9};\n        double[] x2End = new double[] {11.1, 12.1, 13.1};\n        double[] y2 = new double[] {14.0, 15.0, 16.0};\n        double[] y2Start = new double[] {11.09, 12.09, 13.09};\n        double[] y2End = new double[] {11.11, 12.11, 13.11};\n        double[][] data2 = new double[][] {x2, x2Start, x2End, y2, y2Start, \n                y2End};\n        d.addSeries(\"S2\", data2);\n        return d;\n    }",
        "begin_line": 381,
        "end_line": 403,
        "comment": "\n     * Creates a sample dataset for testing.\n     * \n     * @return A sample dataset.\n     ",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 68)",
            "(line 383,col 9)-(line 383,col 51)",
            "(line 384,col 9)-(line 384,col 56)",
            "(line 385,col 9)-(line 385,col 54)",
            "(line 386,col 9)-(line 386,col 51)",
            "(line 387,col 9)-(line 387,col 59)",
            "(line 388,col 9)-(line 388,col 57)",
            "(line 389,col 9)-(line 390,col 23)",
            "(line 391,col 9)-(line 391,col 33)",
            "(line 393,col 9)-(line 393,col 54)",
            "(line 394,col 9)-(line 394,col 59)",
            "(line 395,col 9)-(line 395,col 57)",
            "(line 396,col 9)-(line 396,col 54)",
            "(line 397,col 9)-(line 397,col 62)",
            "(line 398,col 9)-(line 398,col 60)",
            "(line 399,col 9)-(line 400,col 23)",
            "(line 401,col 9)-(line 401,col 33)",
            "(line 402,col 9)-(line 402,col 17)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.MatrixSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/MatrixSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.MatrixSeriesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MatrixSeriesTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.MatrixSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/MatrixSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.MatrixSeriesTests.MatrixSeriesTests(java.lang.String)",
        "snippet": "    public MatrixSeriesTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.MatrixSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/MatrixSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.MatrixSeriesTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        MatrixSeries m1 = new MatrixSeries(\"Test\", 8, 3);\n        m1.update(0, 0, 11.0);\n        m1.update(7, 2, 22.0);\n        MatrixSeries m2 = new MatrixSeries(\"Test\", 8, 3);\n        m2.update(0, 0, 11.0);\n        m2.update(7, 2, 22.0);\n        assertTrue(m1.equals(m2));\n        assertTrue(m2.equals(m1));\n\n        m1 = new MatrixSeries(\"Test 2\", 8, 3);\n        assertFalse(m1.equals(m2));\n        m2 = new MatrixSeries(\"Test 2\", 8, 3);\n        assertTrue(m1.equals(m2));\n\n        m1 = new MatrixSeries(\"Test 2\", 10, 3);\n        assertFalse(m1.equals(m2));\n        m2 = new MatrixSeries(\"Test 2\", 10, 3);\n        assertTrue(m1.equals(m2));\n\n        m1 = new MatrixSeries(\"Test 2\", 10, 5);\n        assertFalse(m1.equals(m2));\n        m2 = new MatrixSeries(\"Test 2\", 10, 5);\n        assertTrue(m1.equals(m2));\n\n        m1.update(0, 0, 99);\n        assertFalse(m1.equals(m2));\n        m2.update(0, 0, 99);\n        assertTrue(m1.equals(m2));\n    }",
        "begin_line": 82,
        "end_line": 112,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 57)",
            "(line 85,col 9)-(line 85,col 30)",
            "(line 86,col 9)-(line 86,col 30)",
            "(line 87,col 9)-(line 87,col 57)",
            "(line 88,col 9)-(line 88,col 30)",
            "(line 89,col 9)-(line 89,col 30)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 93,col 9)-(line 93,col 46)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 95,col 46)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 98,col 9)-(line 98,col 47)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 100,col 47)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 103,col 9)-(line 103,col 47)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 105,col 47)",
            "(line 106,col 9)-(line 106,col 34)",
            "(line 108,col 9)-(line 108,col 28)",
            "(line 109,col 9)-(line 109,col 35)",
            "(line 110,col 9)-(line 110,col 28)",
            "(line 111,col 9)-(line 111,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.MatrixSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/MatrixSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.MatrixSeriesTests.testCloning()",
        "snippet": "    public void testCloning() {\n        MatrixSeries m1 = new MatrixSeries(\"Test\", 8, 3);\n        m1.update(0, 0, 11.0);\n        m1.update(7, 2, 22.0);\n        MatrixSeries m2 = null;\n        try {\n            m2 = (MatrixSeries) m1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(m1 != m2);\n        assertTrue(m1.getClass() == m2.getClass());\n        assertTrue(m1.equals(m2));\n    }",
        "begin_line": 117,
        "end_line": 131,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 57)",
            "(line 119,col 9)-(line 119,col 30)",
            "(line 120,col 9)-(line 120,col 30)",
            "(line 121,col 9)-(line 121,col 31)",
            "(line 122,col 9)-(line 127,col 9)",
            "(line 128,col 9)-(line 128,col 29)",
            "(line 129,col 9)-(line 129,col 51)",
            "(line 130,col 9)-(line 130,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.MatrixSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/MatrixSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.MatrixSeriesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        MatrixSeries m1 = new MatrixSeries(\"Test\", 8, 3);\n        m1.update(0, 0, 11.0);\n        m1.update(7, 2, 22.0);\n        MatrixSeries m2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(m1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            m2 = (MatrixSeries) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(m1, m2);\n    }",
        "begin_line": 136,
        "end_line": 156,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 57)",
            "(line 138,col 9)-(line 138,col 30)",
            "(line 139,col 9)-(line 139,col 30)",
            "(line 140,col 9)-(line 140,col 31)",
            "(line 141,col 9)-(line 154,col 9)",
            "(line 155,col 9)-(line 155,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.MatrixSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/MatrixSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.MatrixSeriesTests.testGetItemColumn()",
        "snippet": "    public void testGetItemColumn() {\n        MatrixSeries m = new MatrixSeries(\"Test\", 3, 2);\n        assertEquals(0, m.getItemColumn(0));\n        assertEquals(1, m.getItemColumn(1));\n        assertEquals(0, m.getItemColumn(2));\n        assertEquals(1, m.getItemColumn(3));\n        assertEquals(0, m.getItemColumn(4));\n        assertEquals(1, m.getItemColumn(5));\n    }",
        "begin_line": 161,
        "end_line": 169,
        "comment": "\n     * Tests the getItemColumn() method.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 56)",
            "(line 163,col 9)-(line 163,col 44)",
            "(line 164,col 9)-(line 164,col 44)",
            "(line 165,col 9)-(line 165,col 44)",
            "(line 166,col 9)-(line 166,col 44)",
            "(line 167,col 9)-(line 167,col 44)",
            "(line 168,col 9)-(line 168,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.MatrixSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/MatrixSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.MatrixSeriesTests.testGetItemRow()",
        "snippet": "    public void testGetItemRow() {\n        MatrixSeries m = new MatrixSeries(\"Test\", 3, 2);\n        assertEquals(0, m.getItemRow(0));\n        assertEquals(0, m.getItemRow(1));\n        assertEquals(1, m.getItemRow(2));\n        assertEquals(1, m.getItemRow(3));\n        assertEquals(2, m.getItemRow(4));\n        assertEquals(2, m.getItemRow(5));\n    }",
        "begin_line": 174,
        "end_line": 182,
        "comment": "\n     * Tests the getItemRow() method.\n     ",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 56)",
            "(line 176,col 9)-(line 176,col 41)",
            "(line 177,col 9)-(line 177,col 41)",
            "(line 178,col 9)-(line 178,col 41)",
            "(line 179,col 9)-(line 179,col 41)",
            "(line 180,col 9)-(line 180,col 41)",
            "(line 181,col 9)-(line 181,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.MatrixSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/MatrixSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.MatrixSeriesTests.testGetItem()",
        "snippet": "    public void testGetItem() {\n        MatrixSeries m = new MatrixSeries(\"Test\", 3, 2);\n        m.update(0, 0, 0.0);\n        m.update(0, 1, 1.0);\n        m.update(1, 0, 2.0);\n        m.update(1, 1, 3.0);\n        m.update(2, 0, 4.0);\n        m.update(2, 1, 5.0);\n        assertEquals(0.0, m.getItem(0).doubleValue(), 0.001);\n        assertEquals(1.0, m.getItem(1).doubleValue(), 0.001);\n        assertEquals(2.0, m.getItem(2).doubleValue(), 0.001);\n        assertEquals(3.0, m.getItem(3).doubleValue(), 0.001);\n        assertEquals(4.0, m.getItem(4).doubleValue(), 0.001);\n        assertEquals(5.0, m.getItem(5).doubleValue(), 0.001);\n    }",
        "begin_line": 187,
        "end_line": 201,
        "comment": "\n     * Tests the getItem() method.\n     ",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 56)",
            "(line 189,col 9)-(line 189,col 28)",
            "(line 190,col 9)-(line 190,col 28)",
            "(line 191,col 9)-(line 191,col 28)",
            "(line 192,col 9)-(line 192,col 28)",
            "(line 193,col 9)-(line 193,col 28)",
            "(line 194,col 9)-(line 194,col 28)",
            "(line 195,col 9)-(line 195,col 61)",
            "(line 196,col 9)-(line 196,col 61)",
            "(line 197,col 9)-(line 197,col 61)",
            "(line 198,col 9)-(line 198,col 61)",
            "(line 199,col 9)-(line 199,col 61)",
            "(line 200,col 9)-(line 200,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalDataItemTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XIntervalDataItemTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalDataItemTests.XIntervalDataItemTests(java.lang.String)",
        "snippet": "    public XIntervalDataItemTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalDataItemTests.testConstructor1()",
        "snippet": "    public void testConstructor1() {\n        XIntervalDataItem item1 = new XIntervalDataItem(1.0, 2.0, 3.0, 4.0);\n        assertEquals(new Double(1.0), item1.getX());\n        assertEquals(2.0, item1.getXLowValue(), EPSILON);\n        assertEquals(3.0, item1.getXHighValue(), EPSILON);\n        assertEquals(4.0, item1.getYValue(), EPSILON);\n    }",
        "begin_line": 84,
        "end_line": 90,
        "comment": "\n     * Some checks for the constructor.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 76)",
            "(line 86,col 9)-(line 86,col 52)",
            "(line 87,col 9)-(line 87,col 57)",
            "(line 88,col 9)-(line 88,col 58)",
            "(line 89,col 9)-(line 89,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalDataItemTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XIntervalDataItem item1 = new XIntervalDataItem(1.0, 2.0, 3.0, 4.0);\n        XIntervalDataItem item2 = new XIntervalDataItem(1.0, 2.0, 3.0, 4.0);\n        assertTrue(item1.equals(item2));\n        assertTrue(item2.equals(item1));\n\n        // x\n        item1 = new XIntervalDataItem(1.1, 2.0, 3.0, 4.0);\n        assertFalse(item1.equals(item2));\n        item2 = new XIntervalDataItem(1.1, 2.0, 3.0, 4.0);\n        assertTrue(item1.equals(item2));\n        \n        // xLow\n        item1 = new XIntervalDataItem(1.1, 2.2, 3.0, 4.0);\n        assertFalse(item1.equals(item2));\n        item2 = new XIntervalDataItem(1.1, 2.2, 3.0, 4.0);\n        assertTrue(item1.equals(item2));\n\n        // xHigh\n        item1 = new XIntervalDataItem(1.1, 2.2, 3.3, 4.0);\n        assertFalse(item1.equals(item2));\n        item2 = new XIntervalDataItem(1.1, 2.2, 3.3, 4.0);\n        assertTrue(item1.equals(item2));\n\n        // y\n        item1 = new XIntervalDataItem(1.1, 2.2, 3.3, 4.4);\n        assertFalse(item1.equals(item2));\n        item2 = new XIntervalDataItem(1.1, 2.2, 3.3, 4.4);\n        assertTrue(item1.equals(item2));\n\n    }",
        "begin_line": 95,
        "end_line": 125,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 76)",
            "(line 97,col 9)-(line 97,col 76)",
            "(line 98,col 9)-(line 98,col 40)",
            "(line 99,col 9)-(line 99,col 40)",
            "(line 102,col 9)-(line 102,col 58)",
            "(line 103,col 9)-(line 103,col 41)",
            "(line 104,col 9)-(line 104,col 58)",
            "(line 105,col 9)-(line 105,col 40)",
            "(line 108,col 9)-(line 108,col 58)",
            "(line 109,col 9)-(line 109,col 41)",
            "(line 110,col 9)-(line 110,col 58)",
            "(line 111,col 9)-(line 111,col 40)",
            "(line 114,col 9)-(line 114,col 58)",
            "(line 115,col 9)-(line 115,col 41)",
            "(line 116,col 9)-(line 116,col 58)",
            "(line 117,col 9)-(line 117,col 40)",
            "(line 120,col 9)-(line 120,col 58)",
            "(line 121,col 9)-(line 121,col 41)",
            "(line 122,col 9)-(line 122,col 58)",
            "(line 123,col 9)-(line 123,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalDataItemTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XIntervalDataItem item1 = new XIntervalDataItem(1.0, 2.0, 3.0, 4.0);\n        XIntervalDataItem item2 = null;\n        try {\n            item2 = (XIntervalDataItem) item1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(item1 != item2);\n        assertTrue(item1.getClass() == item2.getClass());\n        assertTrue(item1.equals(item2));\n    }",
        "begin_line": 130,
        "end_line": 142,
        "comment": "\n     * Some checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 76)",
            "(line 132,col 9)-(line 132,col 39)",
            "(line 133,col 9)-(line 138,col 9)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 140,col 9)-(line 140,col 57)",
            "(line 141,col 9)-(line 141,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalDataItemTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        XIntervalDataItem item1 = new XIntervalDataItem(1.0, 2.0, 3.0, 4.0);\n        XIntervalDataItem item2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(item1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            item2 = (XIntervalDataItem) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(item1, item2);\n    }",
        "begin_line": 147,
        "end_line": 165,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 76)",
            "(line 149,col 9)-(line 149,col 39)",
            "(line 150,col 9)-(line 163,col 9)",
            "(line 164,col 9)-(line 164,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalDataItemTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(YIntervalDataItemTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalDataItemTests.YIntervalDataItemTests(java.lang.String)",
        "snippet": "    public YIntervalDataItemTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalDataItemTests.testConstructor1()",
        "snippet": "    public void testConstructor1() {\n        YIntervalDataItem item1 = new YIntervalDataItem(1.0, 2.0, 3.0, 4.0);\n        assertEquals(new Double(1.0), item1.getX());\n        assertEquals(2.0, item1.getYValue(), EPSILON);\n        assertEquals(3.0, item1.getYLowValue(), EPSILON);\n        assertEquals(4.0, item1.getYHighValue(), EPSILON);\n    }",
        "begin_line": 84,
        "end_line": 90,
        "comment": "\n     * Some checks for the constructor.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 76)",
            "(line 86,col 9)-(line 86,col 52)",
            "(line 87,col 9)-(line 87,col 54)",
            "(line 88,col 9)-(line 88,col 57)",
            "(line 89,col 9)-(line 89,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalDataItemTests.testEquals()",
        "snippet": "    public void testEquals() {\n        YIntervalDataItem item1 = new YIntervalDataItem(1.0, 2.0, 1.5, 2.5);\n        YIntervalDataItem item2 = new YIntervalDataItem(1.0, 2.0, 1.5, 2.5);\n        assertTrue(item1.equals(item2));\n        assertTrue(item2.equals(item1));\n\n        // x\n        item1 = new YIntervalDataItem(1.1, 2.0, 1.5, 2.5);\n        assertFalse(item1.equals(item2));\n        item2 = new YIntervalDataItem(1.1, 2.0, 1.5, 2.5);\n        assertTrue(item1.equals(item2));\n        \n        // y\n        item1 = new YIntervalDataItem(1.1, 2.2, 1.5, 2.5);\n        assertFalse(item1.equals(item2));\n        item2 = new YIntervalDataItem(1.1, 2.2, 1.5, 2.5);\n        assertTrue(item1.equals(item2));\n\n        // yLow\n        item1 = new YIntervalDataItem(1.1, 2.2, 1.55, 2.5);\n        assertFalse(item1.equals(item2));\n        item2 = new YIntervalDataItem(1.1, 2.2, 1.55, 2.5);\n        assertTrue(item1.equals(item2));\n\n        // yHigh\n        item1 = new YIntervalDataItem(1.1, 2.2, 1.55, 2.55);\n        assertFalse(item1.equals(item2));\n        item2 = new YIntervalDataItem(1.1, 2.2, 1.55, 2.55);\n        assertTrue(item1.equals(item2));\n    }",
        "begin_line": 95,
        "end_line": 124,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 76)",
            "(line 97,col 9)-(line 97,col 76)",
            "(line 98,col 9)-(line 98,col 40)",
            "(line 99,col 9)-(line 99,col 40)",
            "(line 102,col 9)-(line 102,col 58)",
            "(line 103,col 9)-(line 103,col 41)",
            "(line 104,col 9)-(line 104,col 58)",
            "(line 105,col 9)-(line 105,col 40)",
            "(line 108,col 9)-(line 108,col 58)",
            "(line 109,col 9)-(line 109,col 41)",
            "(line 110,col 9)-(line 110,col 58)",
            "(line 111,col 9)-(line 111,col 40)",
            "(line 114,col 9)-(line 114,col 59)",
            "(line 115,col 9)-(line 115,col 41)",
            "(line 116,col 9)-(line 116,col 59)",
            "(line 117,col 9)-(line 117,col 40)",
            "(line 120,col 9)-(line 120,col 60)",
            "(line 121,col 9)-(line 121,col 41)",
            "(line 122,col 9)-(line 122,col 60)",
            "(line 123,col 9)-(line 123,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalDataItemTests.testCloning()",
        "snippet": "    public void testCloning() {\n        YIntervalDataItem item1 = new YIntervalDataItem(1.0, 2.0, 1.5, 2.5);\n        YIntervalDataItem item2 = null;\n        try {\n            item2 = (YIntervalDataItem) item1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(item1 != item2);\n        assertTrue(item1.getClass() == item2.getClass());\n        assertTrue(item1.equals(item2));\n    }",
        "begin_line": 129,
        "end_line": 141,
        "comment": "\n     * Some checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 76)",
            "(line 131,col 9)-(line 131,col 39)",
            "(line 132,col 9)-(line 137,col 9)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 57)",
            "(line 140,col 9)-(line 140,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalDataItemTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        YIntervalDataItem item1 = new YIntervalDataItem(1.0, 2.0, 1.5, 2.5);\n        YIntervalDataItem item2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(item1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            item2 = (YIntervalDataItem) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(item1, item2);\n    }",
        "begin_line": 146,
        "end_line": 164,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 76)",
            "(line 148,col 9)-(line 148,col 39)",
            "(line 149,col 9)-(line 162,col 9)",
            "(line 163,col 9)-(line 163,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultHighLowDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultHighLowDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultHighLowDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultHighLowDatasetTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultHighLowDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultHighLowDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultHighLowDatasetTests.DefaultHighLowDatasetTests(java.lang.String)",
        "snippet": "    public DefaultHighLowDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultHighLowDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultHighLowDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultHighLowDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultHighLowDataset d1 = new DefaultHighLowDataset(\"Series 1\", \n                new Date[0], new double[0], new double[0], new double[0], \n                new double[0], new double[0]);\n        DefaultHighLowDataset d2 = new DefaultHighLowDataset(\"Series 1\", \n                new Date[0], new double[0], new double[0], new double[0], \n                new double[0], new double[0]);\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n        \n        d1 = new DefaultHighLowDataset(\"Series 2\", \n                new Date[0], new double[0], new double[0], new double[0], \n                new double[0], new double[0]);\n        assertFalse(d1.equals(d2));\n        d2 = new DefaultHighLowDataset(\"Series 2\", \n                new Date[0], new double[0], new double[0], new double[0], \n                new double[0], new double[0]);\n        assertTrue(d1.equals(d2));\n\n        d1 = new DefaultHighLowDataset(\"Series 2\", \n                new Date[] {new Date(123L)}, new double[1], new double[1], \n                new double[1], new double[1], new double[1]);\n        assertFalse(d1.equals(d2));\n        d2 = new DefaultHighLowDataset(\"Series 2\", \n                new Date[] {new Date(123L)}, new double[1], new double[1], \n                new double[1], new double[1], new double[1]);\n        assertTrue(d1.equals(d2));\n    \n        d1 = new DefaultHighLowDataset(\"Series 2\", \n                new Date[] {new Date(123L)}, new double[] {1.2}, new double[1], \n                new double[1], new double[1], new double[1]);\n        assertFalse(d1.equals(d2));\n        d2 = new DefaultHighLowDataset(\"Series 2\", \n                new Date[] {new Date(123L)}, new double[] {1.2}, new double[1], \n                new double[1], new double[1], new double[1]);\n        assertTrue(d1.equals(d2));\n\n        d1 = new DefaultHighLowDataset(\"Series 2\", \n                new Date[] {new Date(123L)}, new double[] {1.2}, \n                new double[] {3.4}, new double[1], new double[1], \n                new double[1]);\n        assertFalse(d1.equals(d2));\n        d2 = new DefaultHighLowDataset(\"Series 2\", \n                new Date[] {new Date(123L)}, new double[] {1.2}, \n                new double[] {3.4}, new double[1], new double[1], \n                new double[1]);\n        assertTrue(d1.equals(d2));\n    \n        d1 = new DefaultHighLowDataset(\"Series 2\", \n                new Date[] {new Date(123L)}, new double[] {1.2}, \n                new double[] {3.4}, new double[] {5.6}, new double[1], \n                new double[1]);\n        assertFalse(d1.equals(d2));\n        d2 = new DefaultHighLowDataset(\"Series 2\", \n                new Date[] {new Date(123L)}, new double[] {1.2}, \n                new double[] {3.4}, new double[] {5.6}, new double[1], \n                new double[1]);\n        assertTrue(d1.equals(d2));\n\n        d1 = new DefaultHighLowDataset(\"Series 2\", \n                new Date[] {new Date(123L)}, new double[] {1.2}, \n                new double[] {3.4}, new double[] {5.6}, new double[] {7.8}, \n                new double[1]);\n        assertFalse(d1.equals(d2));\n        d2 = new DefaultHighLowDataset(\"Series 2\", \n                new Date[] {new Date(123L)}, new double[] {1.2}, \n                new double[] {3.4}, new double[] {5.6}, new double[] {7.8}, \n                new double[1]);\n        assertTrue(d1.equals(d2));\n\n        d1 = new DefaultHighLowDataset(\"Series 2\", \n                new Date[] {new Date(123L)}, new double[] {1.2}, \n                new double[] {3.4}, new double[] {5.6}, new double[] {7.8}, \n                new double[] {99.9});\n        assertFalse(d1.equals(d2));\n        d2 = new DefaultHighLowDataset(\"Series 2\", \n                new Date[] {new Date(123L)}, new double[] {1.2}, \n                new double[] {3.4}, new double[] {5.6}, new double[] {7.8}, \n                new double[] {99.9});\n        assertTrue(d1.equals(d2));\n    \n    }",
        "begin_line": 83,
        "end_line": 164,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 86,col 46)",
            "(line 87,col 9)-(line 89,col 46)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 93,col 9)-(line 95,col 46)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 99,col 46)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 104,col 61)",
            "(line 105,col 9)-(line 105,col 35)",
            "(line 106,col 9)-(line 108,col 61)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 111,col 9)-(line 113,col 61)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 117,col 61)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 120,col 9)-(line 123,col 31)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 128,col 31)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 131,col 9)-(line 134,col 31)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 139,col 31)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 142,col 9)-(line 145,col 31)",
            "(line 146,col 9)-(line 146,col 35)",
            "(line 147,col 9)-(line 150,col 31)",
            "(line 151,col 9)-(line 151,col 34)",
            "(line 153,col 9)-(line 156,col 37)",
            "(line 157,col 9)-(line 157,col 35)",
            "(line 158,col 9)-(line 161,col 37)",
            "(line 162,col 9)-(line 162,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultHighLowDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultHighLowDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultHighLowDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultHighLowDataset d1 = new DefaultHighLowDataset(\"Series 1\", \n                new Date[] {new Date(123L)}, new double[] {1.2}, \n                new double[] {3.4}, new double[] {5.6}, new double[] {7.8}, \n                new double[] {99.9});\n        DefaultHighLowDataset d2 = null;\n        try {\n            d2 = (DefaultHighLowDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 169,
        "end_line": 184,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 173,col 37)",
            "(line 174,col 9)-(line 174,col 40)",
            "(line 175,col 9)-(line 180,col 9)",
            "(line 181,col 9)-(line 181,col 29)",
            "(line 182,col 9)-(line 182,col 51)",
            "(line 183,col 9)-(line 183,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultHighLowDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultHighLowDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultHighLowDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        DefaultHighLowDataset d1 = new DefaultHighLowDataset(\"Series 1\", \n                new Date[] {new Date(123L)}, new double[] {1.2}, \n                new double[] {3.4}, new double[] {5.6}, new double[] {7.8}, \n                new double[] {99.9});\n        DefaultHighLowDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            d2 = (DefaultHighLowDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n    }",
        "begin_line": 189,
        "end_line": 211,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 190,col 9)-(line 193,col 37)",
            "(line 194,col 9)-(line 194,col 40)",
            "(line 196,col 9)-(line 209,col 9)",
            "(line 210,col 9)-(line 210,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.TableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/TableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.TableXYDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TableXYDatasetTests.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.TableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/TableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.TableXYDatasetTests.TableXYDatasetTests(java.lang.String)",
        "snippet": "    public TableXYDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.TableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/TableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.TableXYDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        DefaultTableXYDataset d2 = new DefaultTableXYDataset();\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n\n        d1.addSeries(createSeries1());\n        assertFalse(d1.equals(d2));\n\n        d2.addSeries(createSeries1());\n        assertTrue(d1.equals(d2));\n\n    }",
        "begin_line": 91,
        "end_line": 104,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 63)",
            "(line 94,col 9)-(line 94,col 63)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 98,col 9)-(line 98,col 38)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 101,col 9)-(line 101,col 38)",
            "(line 102,col 9)-(line 102,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.TableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/TableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.TableXYDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        d1.addSeries(createSeries1());\n        DefaultTableXYDataset d2 = null;\n        try {\n            d2 = (DefaultTableXYDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 109,
        "end_line": 122,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 63)",
            "(line 111,col 9)-(line 111,col 38)",
            "(line 112,col 9)-(line 112,col 40)",
            "(line 113,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 29)",
            "(line 120,col 9)-(line 120,col 51)",
            "(line 121,col 9)-(line 121,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.TableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/TableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.TableXYDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        d1.addSeries(createSeries2());\n        DefaultTableXYDataset d2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (DefaultTableXYDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(d1, d2);\n\n    }",
        "begin_line": 127,
        "end_line": 150,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 63)",
            "(line 130,col 9)-(line 130,col 38)",
            "(line 131,col 9)-(line 131,col 40)",
            "(line 133,col 9)-(line 147,col 9)",
            "(line 148,col 9)-(line 148,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.TableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/TableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.TableXYDatasetTests.testTableXYDataset()",
        "snippet": "    public void testTableXYDataset() {\n        \n        XYSeries series1 = createSeries1();\n        XYSeries series2 = createSeries2();\n        \n        DefaultTableXYDataset dataset = new DefaultTableXYDataset();\n        dataset.addSeries(series1);\n        dataset.addSeries(series2);\n\n        //  Test that there are 6 X points and some specific values\n        assertEquals(6, dataset.getItemCount());\n        assertEquals(6, dataset.getX(0, 5).intValue());\n        assertEquals(null, dataset.getY(0, 5));\n        assertEquals(6, dataset.getX(1, 5).intValue());\n        assertEquals(2, dataset.getY(1, 5).intValue());\n\n        // after adding a point to a series, check that there are now 7 \n        // items in each series\n        series2.add(7, 2);\n        assertEquals(7, dataset.getItemCount());\n        assertEquals(null, dataset.getY(0, 6));\n        assertEquals(2, dataset.getY(1, 6).intValue());\n\n        //  Remove series 1\n        dataset.removeSeries(series1);\n        //  Test that there are still 7 X points\n        assertEquals(7, dataset.getItemCount());\n\n        //  Remove series 2 and add new series\n        dataset.removeSeries(series2);\n        series1 = createSeries1();\n        dataset.addSeries(series1);\n\n        //  Test that there are now 4 X points\n        assertEquals(4, dataset.getItemCount());\n\n    }",
        "begin_line": 155,
        "end_line": 191,
        "comment": "\n     * Assorted tests.\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 43)",
            "(line 158,col 9)-(line 158,col 43)",
            "(line 160,col 9)-(line 160,col 68)",
            "(line 161,col 9)-(line 161,col 35)",
            "(line 162,col 9)-(line 162,col 35)",
            "(line 165,col 9)-(line 165,col 48)",
            "(line 166,col 9)-(line 166,col 55)",
            "(line 167,col 9)-(line 167,col 47)",
            "(line 168,col 9)-(line 168,col 55)",
            "(line 169,col 9)-(line 169,col 55)",
            "(line 173,col 9)-(line 173,col 26)",
            "(line 174,col 9)-(line 174,col 48)",
            "(line 175,col 9)-(line 175,col 47)",
            "(line 176,col 9)-(line 176,col 55)",
            "(line 179,col 9)-(line 179,col 38)",
            "(line 181,col 9)-(line 181,col 48)",
            "(line 184,col 9)-(line 184,col 38)",
            "(line 185,col 9)-(line 185,col 34)",
            "(line 186,col 9)-(line 186,col 35)",
            "(line 189,col 9)-(line 189,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.TableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/TableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.TableXYDatasetTests.test788597()",
        "snippet": "    public void test788597() {\n        DefaultTableXYDataset dataset = new DefaultTableXYDataset();\n        dataset.addSeries(createSeries1());\n        assertEquals(4, dataset.getItemCount());\n        dataset.removeAllSeries();\n        assertEquals(0, dataset.getItemCount());      \n    }",
        "begin_line": 196,
        "end_line": 202,
        "comment": "\n     * A test for bug report 788597.\n     ",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 68)",
            "(line 198,col 9)-(line 198,col 43)",
            "(line 199,col 9)-(line 199,col 48)",
            "(line 200,col 9)-(line 200,col 34)",
            "(line 201,col 9)-(line 201,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.TableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/TableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.TableXYDatasetTests.testRemoveAllValuesForX()",
        "snippet": "    public void testRemoveAllValuesForX() {\n        DefaultTableXYDataset dataset = new DefaultTableXYDataset();\n        dataset.addSeries(createSeries1());\n        dataset.addSeries(createSeries2());\n        dataset.removeAllValuesForX(new Double(2.0));\n        assertEquals(5, dataset.getItemCount());\n        assertEquals(new Double(1.0), dataset.getX(0, 0));\n        assertEquals(new Double(3.0), dataset.getX(0, 1));\n        assertEquals(new Double(4.0), dataset.getX(0, 2));\n        assertEquals(new Double(5.0), dataset.getX(0, 3));\n        assertEquals(new Double(6.0), dataset.getX(0, 4));\n    }",
        "begin_line": 207,
        "end_line": 218,
        "comment": "\n     * Test that removing all values for a given x works.\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 68)",
            "(line 209,col 9)-(line 209,col 43)",
            "(line 210,col 9)-(line 210,col 43)",
            "(line 211,col 9)-(line 211,col 53)",
            "(line 212,col 9)-(line 212,col 48)",
            "(line 213,col 9)-(line 213,col 58)",
            "(line 214,col 9)-(line 214,col 58)",
            "(line 215,col 9)-(line 215,col 58)",
            "(line 216,col 9)-(line 216,col 58)",
            "(line 217,col 9)-(line 217,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.TableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/TableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.TableXYDatasetTests.testPrune()",
        "snippet": "    public void testPrune() {\n        DefaultTableXYDataset dataset = new DefaultTableXYDataset();\n        dataset.addSeries(createSeries1());\n        dataset.addSeries(createSeries2());\n        dataset.removeSeries(1);\n        dataset.prune();\n        assertEquals(4, dataset.getItemCount());\n    }",
        "begin_line": 223,
        "end_line": 230,
        "comment": "\n     * Tests to see that pruning removes unwanted x values.\n     ",
        "child_ranges": [
            "(line 224,col 9)-(line 224,col 68)",
            "(line 225,col 9)-(line 225,col 43)",
            "(line 226,col 9)-(line 226,col 43)",
            "(line 227,col 9)-(line 227,col 32)",
            "(line 228,col 9)-(line 228,col 24)",
            "(line 229,col 9)-(line 229,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.TableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/TableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.TableXYDatasetTests.testAutoPrune()",
        "snippet": "    public void testAutoPrune() {\n        \n        // WITH AUTOPRUNING\n        DefaultTableXYDataset dataset = new DefaultTableXYDataset(true);\n        dataset.addSeries(createSeriesA());\n        assertEquals(2, dataset.getItemCount());  // should be 2 items\n        dataset.addSeries(createSeriesB());\n        assertEquals(2, dataset.getItemCount());  // still 2\n        dataset.removeSeries(1);\n        assertEquals(1, dataset.getItemCount());  // 1 value pruned.\n\n        // WITHOUT AUTOPRUNING\n        DefaultTableXYDataset dataset2 = new DefaultTableXYDataset(true);\n        dataset2.addSeries(createSeriesA());\n        assertEquals(2, dataset2.getItemCount());  // should be 2 items\n        dataset2.addSeries(createSeriesB());\n        assertEquals(2, dataset2.getItemCount());  // still 2\n        dataset2.removeSeries(1);\n        assertEquals(1, dataset2.getItemCount());  // still 2.\n        \n    }",
        "begin_line": 235,
        "end_line": 255,
        "comment": "\n     * Tests the auto-pruning feature.\n     ",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 72)",
            "(line 239,col 9)-(line 239,col 43)",
            "(line 240,col 9)-(line 240,col 48)",
            "(line 241,col 9)-(line 241,col 43)",
            "(line 242,col 9)-(line 242,col 48)",
            "(line 243,col 9)-(line 243,col 32)",
            "(line 244,col 9)-(line 244,col 48)",
            "(line 247,col 9)-(line 247,col 73)",
            "(line 248,col 9)-(line 248,col 44)",
            "(line 249,col 9)-(line 249,col 49)",
            "(line 250,col 9)-(line 250,col 44)",
            "(line 251,col 9)-(line 251,col 49)",
            "(line 252,col 9)-(line 252,col 33)",
            "(line 253,col 9)-(line 253,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.TableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/TableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.TableXYDatasetTests.createSeriesA()",
        "snippet": "    private XYSeries createSeriesA() {\n        XYSeries s = new XYSeries(\"A\", true, false);\n        s.add(1.0, 1.1);\n        s.add(2.0, null);\n        return s;\n    }",
        "begin_line": 262,
        "end_line": 267,
        "comment": "\n     * Creates a series for testing.\n     * \n     * @return A series.\n     ",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 52)",
            "(line 264,col 9)-(line 264,col 24)",
            "(line 265,col 9)-(line 265,col 25)",
            "(line 266,col 9)-(line 266,col 17)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.TableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/TableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.TableXYDatasetTests.createSeriesB()",
        "snippet": "    private XYSeries createSeriesB() {\n        XYSeries s = new XYSeries(\"B\", true, false);\n        s.add(1.0, null);\n        s.add(2.0, 2.2);\n        return s;\n    }",
        "begin_line": 274,
        "end_line": 279,
        "comment": "\n     * Creates a series for testing.\n     * \n     * @return A series.\n     ",
        "child_ranges": [
            "(line 275,col 9)-(line 275,col 52)",
            "(line 276,col 9)-(line 276,col 25)",
            "(line 277,col 9)-(line 277,col 24)",
            "(line 278,col 9)-(line 278,col 17)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.TableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/TableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.TableXYDatasetTests.createSeries1()",
        "snippet": "    private XYSeries createSeries1() {\n        XYSeries series1 = new XYSeries(\"Series 1\", true, false);\n        series1.add(1.0, 1.0);\n        series1.add(2.0, 1.0);\n        series1.add(4.0, 1.0);\n        series1.add(5.0, 1.0);\n        return series1;\n    }",
        "begin_line": 286,
        "end_line": 293,
        "comment": "\n     * Creates a series for testing.\n     * \n     * @return A series.\n     ",
        "child_ranges": [
            "(line 287,col 9)-(line 287,col 65)",
            "(line 288,col 9)-(line 288,col 30)",
            "(line 289,col 9)-(line 289,col 30)",
            "(line 290,col 9)-(line 290,col 30)",
            "(line 291,col 9)-(line 291,col 30)",
            "(line 292,col 9)-(line 292,col 23)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.TableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/TableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.TableXYDatasetTests.createSeries2()",
        "snippet": "    private XYSeries createSeries2() {\n        XYSeries series2 = new XYSeries(\"Series 2\", true, false);\n        series2.add(2.0, 2.0);\n        series2.add(3.0, 2.0);\n        series2.add(4.0, 2.0);\n        series2.add(5.0, 2.0);\n        series2.add(6.0, 2.0);\n        return series2;\n    }",
        "begin_line": 300,
        "end_line": 308,
        "comment": "\n     * Creates a series for testing.\n     * \n     * @return A series.\n     ",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 65)",
            "(line 302,col 9)-(line 302,col 30)",
            "(line 303,col 9)-(line 303,col 30)",
            "(line 304,col 9)-(line 304,col 30)",
            "(line 305,col 9)-(line 305,col 30)",
            "(line 306,col 9)-(line 306,col 30)",
            "(line 307,col 9)-(line 307,col 23)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultTableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultTableXYDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultTableXYDatasetTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultTableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultTableXYDatasetTests.DefaultTableXYDatasetTests(java.lang.String)",
        "snippet": "    public DefaultTableXYDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultTableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultTableXYDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n        s1.add(1.0, 1.1);\n        s1.add(2.0, 2.2);\n        d1.addSeries(s1);\n        \n        DefaultTableXYDataset d2 = new DefaultTableXYDataset();\n        XYSeries s2 = new XYSeries(\"Series 1\", true, false);\n        s2.add(1.0, 1.1);\n        s2.add(2.0, 2.2);\n        d2.addSeries(s2);\n        \n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n\n        s1.add(3.0, 3.3);\n        assertFalse(d1.equals(d2));\n\n        s2.add(3.0, 3.3);\n        assertTrue(d1.equals(d2));\n\n    }",
        "begin_line": 85,
        "end_line": 108,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 63)",
            "(line 88,col 9)-(line 88,col 60)",
            "(line 89,col 9)-(line 89,col 25)",
            "(line 90,col 9)-(line 90,col 25)",
            "(line 91,col 9)-(line 91,col 25)",
            "(line 93,col 9)-(line 93,col 63)",
            "(line 94,col 9)-(line 94,col 60)",
            "(line 95,col 9)-(line 95,col 25)",
            "(line 96,col 9)-(line 96,col 25)",
            "(line 97,col 9)-(line 97,col 25)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 102,col 25)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 105,col 9)-(line 105,col 25)",
            "(line 106,col 9)-(line 106,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultTableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultTableXYDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {        \n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n        s1.add(1.0, 1.1);\n        s1.add(2.0, 2.2);\n        d1.addSeries(s1);\n        \n        DefaultTableXYDataset d2 = null;\n        try {\n            d2 = (DefaultTableXYDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 113,
        "end_line": 130,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 63)",
            "(line 115,col 9)-(line 115,col 60)",
            "(line 116,col 9)-(line 116,col 25)",
            "(line 117,col 9)-(line 117,col 25)",
            "(line 118,col 9)-(line 118,col 25)",
            "(line 120,col 9)-(line 120,col 40)",
            "(line 121,col 9)-(line 126,col 9)",
            "(line 127,col 9)-(line 127,col 29)",
            "(line 128,col 9)-(line 128,col 51)",
            "(line 129,col 9)-(line 129,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultTableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultTableXYDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n        s1.add(1.0, 1.1);\n        s1.add(2.0, 2.2);\n        d1.addSeries(s1);\n        \n        DefaultTableXYDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            d2 = (DefaultTableXYDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n    }",
        "begin_line": 135,
        "end_line": 161,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 63)",
            "(line 138,col 9)-(line 138,col 60)",
            "(line 139,col 9)-(line 139,col 25)",
            "(line 140,col 9)-(line 140,col 25)",
            "(line 141,col 9)-(line 141,col 25)",
            "(line 143,col 9)-(line 143,col 40)",
            "(line 145,col 9)-(line 158,col 9)",
            "(line 159,col 9)-(line 159,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultTableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultTableXYDatasetTests.testAddSeries()",
        "snippet": "    public void testAddSeries() {\n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        d1.setAutoWidth(true);\n        XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n        s1.add(3.0, 1.1);\n        s1.add(7.0, 2.2);\n        d1.addSeries(s1);\n        assertEquals(3.0, d1.getXValue(0, 0), EPSILON);\n        assertEquals(7.0, d1.getXValue(0, 1), EPSILON);\n        assertEquals(1.0, d1.getStartXValue(0, 0), EPSILON);\n        assertEquals(5.0, d1.getStartXValue(0, 1), EPSILON);\n        assertEquals(5.0, d1.getEndXValue(0, 0), EPSILON);\n        assertEquals(9.0, d1.getEndXValue(0, 1), EPSILON);\n\n        // now add another series\n        XYSeries s2 = new XYSeries(\"Series 2\", true, false);\n        s2.add(7.5, 1.1);\n        s2.add(9.0, 2.2);       \n        d1.addSeries(s2);\n \n        assertEquals(3.0, d1.getXValue(1, 0), EPSILON);\n        assertEquals(7.0, d1.getXValue(1, 1), EPSILON);\n        assertEquals(7.5, d1.getXValue(1, 2), EPSILON);\n        assertEquals(9.0, d1.getXValue(1, 3), EPSILON);\n        \n        assertEquals(7.25, d1.getStartXValue(1, 2), EPSILON);\n        assertEquals(8.75, d1.getStartXValue(1, 3), EPSILON);\n        assertEquals(7.75, d1.getEndXValue(1, 2), EPSILON);\n        assertEquals(9.25, d1.getEndXValue(1, 3), EPSILON);\n\n        // and check the first series too...\n        assertEquals(2.75, d1.getStartXValue(0, 0), EPSILON);\n        assertEquals(6.75, d1.getStartXValue(0, 1), EPSILON);\n        assertEquals(3.25, d1.getEndXValue(0, 0), EPSILON);\n        assertEquals(7.25, d1.getEndXValue(0, 1), EPSILON);\n    }",
        "begin_line": 170,
        "end_line": 205,
        "comment": "\n     * This is a test for bug 1312066 - adding a new series should trigger a\n     * recalculation of the interval width, if it is being automatically\n     * calculated.\n     ",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 63)",
            "(line 172,col 9)-(line 172,col 30)",
            "(line 173,col 9)-(line 173,col 60)",
            "(line 174,col 9)-(line 174,col 25)",
            "(line 175,col 9)-(line 175,col 25)",
            "(line 176,col 9)-(line 176,col 25)",
            "(line 177,col 9)-(line 177,col 55)",
            "(line 178,col 9)-(line 178,col 55)",
            "(line 179,col 9)-(line 179,col 60)",
            "(line 180,col 9)-(line 180,col 60)",
            "(line 181,col 9)-(line 181,col 58)",
            "(line 182,col 9)-(line 182,col 58)",
            "(line 185,col 9)-(line 185,col 60)",
            "(line 186,col 9)-(line 186,col 25)",
            "(line 187,col 9)-(line 187,col 25)",
            "(line 188,col 9)-(line 188,col 25)",
            "(line 190,col 9)-(line 190,col 55)",
            "(line 191,col 9)-(line 191,col 55)",
            "(line 192,col 9)-(line 192,col 55)",
            "(line 193,col 9)-(line 193,col 55)",
            "(line 195,col 9)-(line 195,col 61)",
            "(line 196,col 9)-(line 196,col 61)",
            "(line 197,col 9)-(line 197,col 59)",
            "(line 198,col 9)-(line 198,col 59)",
            "(line 201,col 9)-(line 201,col 61)",
            "(line 202,col 9)-(line 202,col 61)",
            "(line 203,col 9)-(line 203,col 59)",
            "(line 204,col 9)-(line 204,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultTableXYDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultTableXYDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultTableXYDatasetTests.testGetSeries()",
        "snippet": "    public void testGetSeries() {\n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n        d1.addSeries(s1);\n        assertEquals(\"Series 1\", d1.getSeries(0).getKey());\n        \n        boolean pass = false;\n        try {\n            d1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            d1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 210,
        "end_line": 233,
        "comment": "\n     * Some basic checks for the getSeries() method.\n     ",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 63)",
            "(line 212,col 9)-(line 212,col 60)",
            "(line 213,col 9)-(line 213,col 25)",
            "(line 214,col 9)-(line 214,col 59)",
            "(line 216,col 9)-(line 216,col 29)",
            "(line 217,col 9)-(line 222,col 9)",
            "(line 223,col 9)-(line 223,col 25)",
            "(line 225,col 9)-(line 225,col 21)",
            "(line 226,col 9)-(line 231,col 9)",
            "(line 232,col 9)-(line 232,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYZDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYZDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYZDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultXYZDatasetTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYZDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYZDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYZDatasetTests.DefaultXYZDatasetTests(java.lang.String)",
        "snippet": "    public DefaultXYZDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYZDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYZDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYZDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n \n        DefaultXYZDataset d1 = new DefaultXYZDataset();\n        DefaultXYZDataset d2 = new DefaultXYZDataset();\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[] z1 = new double[] {7.0, 8.0, 9.0};\n        double[][] data1 = new double[][] {x1, y1, z1};\n        double[] x2 = new double[] {1.0, 2.0, 3.0};\n        double[] y2 = new double[] {4.0, 5.0, 6.0};\n        double[] z2 = new double[] {7.0, 8.0, 9.0};\n        double[][] data2 = new double[][] {x2, y2, z2};\n        d1.addSeries(\"S1\", data1);\n        assertFalse(d1.equals(d2));\n        d2.addSeries(\"S1\", data2);\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 83,
        "end_line": 102,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 55)",
            "(line 86,col 9)-(line 86,col 55)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 90,col 9)-(line 90,col 51)",
            "(line 91,col 9)-(line 91,col 51)",
            "(line 92,col 9)-(line 92,col 51)",
            "(line 93,col 9)-(line 93,col 55)",
            "(line 94,col 9)-(line 94,col 51)",
            "(line 95,col 9)-(line 95,col 51)",
            "(line 96,col 9)-(line 96,col 51)",
            "(line 97,col 9)-(line 97,col 55)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 101,col 9)-(line 101,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYZDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYZDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYZDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultXYZDataset d1 = new DefaultXYZDataset();\n        DefaultXYZDataset d2 = null;\n        try {\n            d2 = (DefaultXYZDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // try a dataset with some content...\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[] z1 = new double[] {7.0, 8.0, 9.0};\n        double[][] data1 = new double[][] {x1, y1, z1};\n        d1.addSeries(\"S1\", data1);\n        try {\n            d2 = (DefaultXYZDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // check that the clone doesn't share the same underlying arrays.\n        x1[1] = 2.2;\n        assertFalse(d1.equals(d2));\n        x1[1] = 2.0;\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 107,
        "end_line": 141,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 55)",
            "(line 109,col 9)-(line 109,col 36)",
            "(line 110,col 9)-(line 115,col 9)",
            "(line 116,col 9)-(line 116,col 29)",
            "(line 117,col 9)-(line 117,col 51)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 121,col 9)-(line 121,col 51)",
            "(line 122,col 9)-(line 122,col 51)",
            "(line 123,col 9)-(line 123,col 51)",
            "(line 124,col 9)-(line 124,col 55)",
            "(line 125,col 9)-(line 125,col 34)",
            "(line 126,col 9)-(line 131,col 9)",
            "(line 132,col 9)-(line 132,col 29)",
            "(line 133,col 9)-(line 133,col 51)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 137,col 9)-(line 137,col 20)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 20)",
            "(line 140,col 9)-(line 140,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYZDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYZDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYZDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultXYZDataset d1 = new DefaultXYZDataset();\n        DefaultXYZDataset d2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (DefaultXYZDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n        // try a dataset with some content...\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[] z1 = new double[] {7.0, 8.0, 9.0};\n        double[][] data1 = new double[][] {x1, y1, z1};\n        d1.addSeries(\"S1\", data1);\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            d2 = (DefaultXYZDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n        \n    }",
        "begin_line": 146,
        "end_line": 190,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 55)",
            "(line 149,col 9)-(line 149,col 36)",
            "(line 151,col 9)-(line 165,col 9)",
            "(line 166,col 9)-(line 166,col 29)",
            "(line 169,col 9)-(line 169,col 51)",
            "(line 170,col 9)-(line 170,col 51)",
            "(line 171,col 9)-(line 171,col 51)",
            "(line 172,col 9)-(line 172,col 55)",
            "(line 173,col 9)-(line 173,col 34)",
            "(line 174,col 9)-(line 187,col 9)",
            "(line 188,col 9)-(line 188,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYZDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYZDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYZDatasetTests.testGetSeriesKey()",
        "snippet": "    public void testGetSeriesKey() {\n        DefaultXYZDataset d = createSampleDataset1();\n        assertEquals(\"S1\", d.getSeriesKey(0));\n        assertEquals(\"S2\", d.getSeriesKey(1));\n        \n        // check for series key out of bounds\n        boolean pass = false;\n        try {\n            /*Comparable k =*/ d.getSeriesKey(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            /*Comparable k =*/ d.getSeriesKey(2);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 195,
        "end_line": 218,
        "comment": "\n     * Some checks for the getSeriesKey(int) method.\n     ",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 53)",
            "(line 197,col 9)-(line 197,col 46)",
            "(line 198,col 9)-(line 198,col 46)",
            "(line 201,col 9)-(line 201,col 29)",
            "(line 202,col 9)-(line 207,col 9)",
            "(line 208,col 9)-(line 208,col 25)",
            "(line 210,col 9)-(line 210,col 21)",
            "(line 211,col 9)-(line 216,col 9)",
            "(line 217,col 9)-(line 217,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYZDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYZDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYZDatasetTests.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        DefaultXYZDataset d = createSampleDataset1();\n        assertEquals(0, d.indexOf(\"S1\"));\n        assertEquals(1, d.indexOf(\"S2\"));\n        assertEquals(-1, d.indexOf(\"Green Eggs and Ham\"));\n        assertEquals(-1, d.indexOf(null));\n    }",
        "begin_line": 223,
        "end_line": 229,
        "comment": "\n     * Some checks for the indexOf(Comparable) method.\n     ",
        "child_ranges": [
            "(line 224,col 9)-(line 224,col 53)",
            "(line 225,col 9)-(line 225,col 41)",
            "(line 226,col 9)-(line 226,col 41)",
            "(line 227,col 9)-(line 227,col 58)",
            "(line 228,col 9)-(line 228,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYZDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYZDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYZDatasetTests.testAddSeries()",
        "snippet": "    public void testAddSeries() {\n        DefaultXYZDataset d = new DefaultXYZDataset();\n        d.addSeries(\"S1\", new double[][] {{1.0}, {2.0}, {3.0}});\n        assertEquals(1, d.getSeriesCount());\n        assertEquals(\"S1\", d.getSeriesKey(0));\n        \n        // check that adding a series will overwrite the old series\n        d.addSeries(\"S1\", new double[][] {{11.0}, {12.0}, {13.0}});\n        assertEquals(1, d.getSeriesCount());\n        assertEquals(12.0, d.getYValue(0, 0), EPSILON);\n        \n        // check null key\n        boolean pass = false;\n        try\n        {\n          d.addSeries(null, new double[][] {{1.0}, {2.0}, {3.0}});\n        }\n        catch (IllegalArgumentException e)\n        {\n          pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 236,
        "end_line": 258,
        "comment": "\n     * Some tests for the addSeries() method.\n     ",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 54)",
            "(line 238,col 9)-(line 238,col 64)",
            "(line 239,col 9)-(line 239,col 44)",
            "(line 240,col 9)-(line 240,col 46)",
            "(line 243,col 9)-(line 243,col 67)",
            "(line 244,col 9)-(line 244,col 44)",
            "(line 245,col 9)-(line 245,col 55)",
            "(line 248,col 9)-(line 248,col 29)",
            "(line 249,col 9)-(line 256,col 9)",
            "(line 257,col 9)-(line 257,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultXYZDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultXYZDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultXYZDatasetTests.createSampleDataset1()",
        "snippet": "    public DefaultXYZDataset createSampleDataset1() {\n        DefaultXYZDataset d = new DefaultXYZDataset();\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[] z1 = new double[] {7.0, 8.0, 9.0};\n        double[][] data1 = new double[][] {x1, y1, z1};\n        d.addSeries(\"S1\", data1);\n        \n        double[] x2 = new double[] {1.0, 2.0, 3.0};\n        double[] y2 = new double[] {4.0, 5.0, 6.0};\n        double[] z2 = new double[] {7.0, 8.0, 9.0};\n        double[][] data2 = new double[][] {x2, y2, z2};\n        d.addSeries(\"S2\", data2);\n        return d;\n    }",
        "begin_line": 265,
        "end_line": 279,
        "comment": "\n     * Creates a sample dataset for testing.\n     * \n     * @return A sample dataset.\n     ",
        "child_ranges": [
            "(line 266,col 9)-(line 266,col 54)",
            "(line 267,col 9)-(line 267,col 51)",
            "(line 268,col 9)-(line 268,col 51)",
            "(line 269,col 9)-(line 269,col 51)",
            "(line 270,col 9)-(line 270,col 55)",
            "(line 271,col 9)-(line 271,col 33)",
            "(line 273,col 9)-(line 273,col 51)",
            "(line 274,col 9)-(line 274,col 51)",
            "(line 275,col 9)-(line 275,col 51)",
            "(line 276,col 9)-(line 276,col 55)",
            "(line 277,col 9)-(line 277,col 33)",
            "(line 278,col 9)-(line 278,col 17)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesCollectionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(YIntervalSeriesCollectionTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 67)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesCollectionTests.YIntervalSeriesCollectionTests(java.lang.String)",
        "snippet": "    public YIntervalSeriesCollectionTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesCollectionTests.testEquals()",
        "snippet": "    public void testEquals() {\n        YIntervalSeriesCollection c1 = new YIntervalSeriesCollection();\n        YIntervalSeriesCollection c2 = new YIntervalSeriesCollection();\n        assertEquals(c1, c2);\n        \n        // add a series\n        YIntervalSeries s1 = new YIntervalSeries(\"Series\");\n        s1.add(1.0, 1.1, 1.2, 1.3);\n        c1.addSeries(s1);\n        assertFalse(c1.equals(c2));\n        YIntervalSeries s2 = new YIntervalSeries(\"Series\");\n        s2.add(1.0, 1.1, 1.2, 1.3);\n        c2.addSeries(s2);\n        assertTrue(c1.equals(c2));\n        \n        // add an empty series\n        c1.addSeries(new YIntervalSeries(\"Empty Series\"));\n        assertFalse(c1.equals(c2));\n        c2.addSeries(new YIntervalSeries(\"Empty Series\"));\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 83,
        "end_line": 103,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 71)",
            "(line 85,col 9)-(line 85,col 71)",
            "(line 86,col 9)-(line 86,col 29)",
            "(line 89,col 9)-(line 89,col 59)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 25)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 59)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 95,col 25)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 99,col 9)-(line 99,col 58)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 58)",
            "(line 102,col 9)-(line 102,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesCollectionTests.testCloning()",
        "snippet": "    public void testCloning() {\n        YIntervalSeriesCollection c1 = new YIntervalSeriesCollection();\n        YIntervalSeries s1 = new YIntervalSeries(\"Series\");\n        s1.add(1.0, 1.1, 1.2, 1.3);\n        c1.addSeries(s1);\n        YIntervalSeriesCollection c2 = null;\n        try {\n            c2 = (YIntervalSeriesCollection) c1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n        \n        // check independence\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }",
        "begin_line": 108,
        "end_line": 127,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 71)",
            "(line 110,col 9)-(line 110,col 59)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 25)",
            "(line 113,col 9)-(line 113,col 44)",
            "(line 114,col 9)-(line 119,col 9)",
            "(line 120,col 9)-(line 120,col 29)",
            "(line 121,col 9)-(line 121,col 51)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 125,col 9)-(line 125,col 33)",
            "(line 126,col 9)-(line 126,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesCollectionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        YIntervalSeriesCollection c1 = new YIntervalSeriesCollection();\n        YIntervalSeries s1 = new YIntervalSeries(\"Series\");\n        s1.add(1.0, 1.1, 1.2, 1.3);\n        YIntervalSeriesCollection c2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            c2 = (YIntervalSeriesCollection) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n    }",
        "begin_line": 132,
        "end_line": 153,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 71)",
            "(line 134,col 9)-(line 134,col 59)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 136,col 44)",
            "(line 138,col 9)-(line 151,col 9)",
            "(line 152,col 9)-(line 152,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesCollectionTests.test1170825()",
        "snippet": "    public void test1170825() {\n        YIntervalSeries s1 = new YIntervalSeries(\"Series1\");\n        YIntervalSeriesCollection dataset = new YIntervalSeriesCollection();\n        dataset.addSeries(s1);\n        try {\n            /* XYSeries s = */ dataset.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            // correct outcome\n        }\n        catch (IndexOutOfBoundsException e) {\n            assertTrue(false);  // wrong outcome\n        }\n    }",
        "begin_line": 159,
        "end_line": 172,
        "comment": "\n     * A test for bug report 1170825 (originally affected XYSeriesCollection, \n     * this test is just copied over).\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 60)",
            "(line 161,col 9)-(line 161,col 76)",
            "(line 162,col 9)-(line 162,col 30)",
            "(line 163,col 9)-(line 171,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYIntervalSeriesCollectionTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 68)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests.XYIntervalSeriesCollectionTests(java.lang.String)",
        "snippet": "    public XYIntervalSeriesCollectionTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYIntervalSeriesCollection c1 = new XYIntervalSeriesCollection();\n        XYIntervalSeriesCollection c2 = new XYIntervalSeriesCollection();\n        assertEquals(c1, c2);\n        \n        // add a series\n        XYIntervalSeries s1 = new XYIntervalSeries(\"Series\");\n        s1.add(1.0, 1.1, 1.2, 1.3, 1.4, 1.5);\n        c1.addSeries(s1);\n        assertFalse(c1.equals(c2));\n        XYIntervalSeries s2 = new XYIntervalSeries(\"Series\");\n        s2.add(1.0, 1.1, 1.2, 1.3, 1.4, 1.5);\n        c2.addSeries(s2);\n        assertTrue(c1.equals(c2));\n        \n        // add an empty series\n        c1.addSeries(new XYIntervalSeries(\"Empty Series\"));\n        assertFalse(c1.equals(c2));\n        c2.addSeries(new XYIntervalSeries(\"Empty Series\"));\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 83,
        "end_line": 103,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 73)",
            "(line 85,col 9)-(line 85,col 73)",
            "(line 86,col 9)-(line 86,col 29)",
            "(line 89,col 9)-(line 89,col 61)",
            "(line 90,col 9)-(line 90,col 45)",
            "(line 91,col 9)-(line 91,col 25)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 61)",
            "(line 94,col 9)-(line 94,col 45)",
            "(line 95,col 9)-(line 95,col 25)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 99,col 9)-(line 99,col 59)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 59)",
            "(line 102,col 9)-(line 102,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYIntervalSeriesCollection c1 = new XYIntervalSeriesCollection();\n        XYIntervalSeries s1 = new XYIntervalSeries(\"Series\");\n        s1.add(1.0, 1.1, 1.2, 1.3, 1.4, 1.5);\n        XYIntervalSeriesCollection c2 = null;\n        try {\n            c2 = (XYIntervalSeriesCollection) c1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n        \n        // check independence\n        c1.addSeries(new XYIntervalSeries(\"Empty\"));\n        assertFalse(c1.equals(c2));\n        c2.addSeries(new XYIntervalSeries(\"Empty\"));\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 108,
        "end_line": 128,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 73)",
            "(line 110,col 9)-(line 110,col 61)",
            "(line 111,col 9)-(line 111,col 45)",
            "(line 112,col 9)-(line 112,col 45)",
            "(line 113,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 29)",
            "(line 120,col 9)-(line 120,col 51)",
            "(line 121,col 9)-(line 121,col 34)",
            "(line 124,col 9)-(line 124,col 52)",
            "(line 125,col 9)-(line 125,col 35)",
            "(line 126,col 9)-(line 126,col 52)",
            "(line 127,col 9)-(line 127,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        XYIntervalSeriesCollection c1 = new XYIntervalSeriesCollection();\n        XYIntervalSeries s1 = new XYIntervalSeries(\"Series\");\n        s1.add(1.0, 1.1, 1.2, 1.3, 1.4, 1.5);\n        XYIntervalSeriesCollection c2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            c2 = (XYIntervalSeriesCollection) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n        \n        // check independence\n        c1.addSeries(new XYIntervalSeries(\"Empty\"));\n        assertFalse(c1.equals(c2));\n        c2.addSeries(new XYIntervalSeries(\"Empty\"));\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 133,
        "end_line": 160,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 73)",
            "(line 135,col 9)-(line 135,col 61)",
            "(line 136,col 9)-(line 136,col 45)",
            "(line 137,col 9)-(line 137,col 45)",
            "(line 139,col 9)-(line 152,col 9)",
            "(line 153,col 9)-(line 153,col 29)",
            "(line 156,col 9)-(line 156,col 52)",
            "(line 157,col 9)-(line 157,col 35)",
            "(line 158,col 9)-(line 158,col 52)",
            "(line 159,col 9)-(line 159,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests.test1170825()",
        "snippet": "    public void test1170825() {\n        XYIntervalSeries s1 = new XYIntervalSeries(\"Series1\");\n        XYIntervalSeriesCollection dataset = new XYIntervalSeriesCollection();\n        dataset.addSeries(s1);\n        try {\n            /* XYSeries s = */ dataset.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            // correct outcome\n        }\n        catch (IndexOutOfBoundsException e) {\n            assertTrue(false);  // wrong outcome\n        }\n    }",
        "begin_line": 166,
        "end_line": 179,
        "comment": "\n     * A test for bug report 1170825 (originally affected XYSeriesCollection, \n     * this test is just copied over).\n     ",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 62)",
            "(line 168,col 9)-(line 168,col 78)",
            "(line 169,col 9)-(line 169,col 30)",
            "(line 170,col 9)-(line 178,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesTests.seriesChanged(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "    public void seriesChanged(SeriesChangeEvent event) {\n        this.lastEvent = event;\n\t}",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(YIntervalSeriesTests.class);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesTests.YIntervalSeriesTests(java.lang.String)",
        "snippet": "    public YIntervalSeriesTests(String name) {\n        super(name);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        YIntervalSeries s1 = new YIntervalSeries(\"s1\");\n        YIntervalSeries s2 = new YIntervalSeries(\"s1\");\n        assertTrue(s1.equals(s2));\n        \n        // seriesKey\n        s1 = new YIntervalSeries(\"s2\");\n        assertFalse(s1.equals(s2));\n        s2 = new YIntervalSeries(\"s2\");\n        assertTrue(s1.equals(s2));\n        \n        // autoSort\n        s1 = new YIntervalSeries(\"s2\", false, true);\n        assertFalse(s1.equals(s2));\n        s2 = new YIntervalSeries(\"s2\", false, true);\n        assertTrue(s1.equals(s2));\n        \n        // allowDuplicateValues\n        s1 = new YIntervalSeries(\"s2\", false, false);\n        assertFalse(s1.equals(s2));\n        s2 = new YIntervalSeries(\"s2\", false, false);\n        assertTrue(s1.equals(s2));\n        \n        // add a value\n        s1.add(1.0, 0.5, 1.5, 2.0);\n        assertFalse(s1.equals(s2));\n        s2.add(1.0, 0.5, 1.5, 2.0);\n        assertTrue(s2.equals(s1));\n\n        // add another value\n        s1.add(2.0, 0.5, 1.5, 2.0);\n        assertFalse(s1.equals(s2));\n        s2.add(2.0, 0.5, 1.5, 2.0);\n        assertTrue(s2.equals(s1));\n\n        // remove a value\n        s1.remove(new Double(1.0));\n        assertFalse(s1.equals(s2));\n        s2.remove(new Double(1.0));\n        assertTrue(s2.equals(s1));\n        \n    }",
        "begin_line": 92,
        "end_line": 134,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 55)",
            "(line 95,col 9)-(line 95,col 55)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 99,col 9)-(line 99,col 39)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 39)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 105,col 9)-(line 105,col 52)",
            "(line 106,col 9)-(line 106,col 35)",
            "(line 107,col 9)-(line 107,col 52)",
            "(line 108,col 9)-(line 108,col 34)",
            "(line 111,col 9)-(line 111,col 53)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 113,col 53)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 118,col 35)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 123,col 9)-(line 123,col 35)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 125,col 35)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 129,col 9)-(line 129,col 35)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 131,col 35)",
            "(line 132,col 9)-(line 132,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesTests.testCloning()",
        "snippet": "    public void testCloning() {\n        YIntervalSeries s1 = new YIntervalSeries(\"s1\");\n        s1.add(1.0, 0.5, 1.5, 2.0);\n        YIntervalSeries s2 = null;\n        try {\n            s2 = (YIntervalSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n    }",
        "begin_line": 139,
        "end_line": 152,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 55)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 34)",
            "(line 143,col 9)-(line 148,col 9)",
            "(line 149,col 9)-(line 149,col 29)",
            "(line 150,col 9)-(line 150,col 51)",
            "(line 151,col 9)-(line 151,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        YIntervalSeries s1 = new YIntervalSeries(\"s1\");\n        s1.add(1.0, 0.5, 1.5, 2.0);\n        YIntervalSeries s2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            s2 = (YIntervalSeries) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(s1, s2);\n\n    }",
        "begin_line": 157,
        "end_line": 179,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 55)",
            "(line 160,col 9)-(line 160,col 35)",
            "(line 161,col 9)-(line 161,col 34)",
            "(line 163,col 9)-(line 176,col 9)",
            "(line 177,col 9)-(line 177,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesTests.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        YIntervalSeries s1 = new YIntervalSeries(\"Series 1\");\n        s1.add(1.0, 1.0, 1.0, 2.0);\n        s1.add(2.0, 2.0, 2.0, 3.0);\n        s1.add(3.0, 3.0, 3.0, 4.0);\n        assertEquals(0, s1.indexOf(new Double(1.0)));\n    }",
        "begin_line": 184,
        "end_line": 190,
        "comment": "\n     * Simple test for the indexOf() method.\n     ",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 61)",
            "(line 186,col 9)-(line 186,col 35)",
            "(line 187,col 9)-(line 187,col 35)",
            "(line 188,col 9)-(line 188,col 35)",
            "(line 189,col 9)-(line 189,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesTests.testIndexOf2()",
        "snippet": "    public void testIndexOf2() {\n        YIntervalSeries s1 = new YIntervalSeries(\"Series 1\", false, true);\n        s1.add(1.0, 1.0, 1.0, 2.0);\n        s1.add(3.0, 3.0, 3.0, 3.0);\n        s1.add(2.0, 2.0, 2.0, 2.0);\n        assertEquals(0, s1.indexOf(new Double(1.0)));        \n        assertEquals(1, s1.indexOf(new Double(3.0)));        \n        assertEquals(2, s1.indexOf(new Double(2.0)));        \n    }",
        "begin_line": 195,
        "end_line": 203,
        "comment": "\n     * A check for the indexOf() method for an unsorted series.\n     ",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 74)",
            "(line 197,col 9)-(line 197,col 35)",
            "(line 198,col 9)-(line 198,col 35)",
            "(line 199,col 9)-(line 199,col 35)",
            "(line 200,col 9)-(line 200,col 53)",
            "(line 201,col 9)-(line 201,col 53)",
            "(line 202,col 9)-(line 202,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesTests.testRemove()",
        "snippet": "    public void testRemove() {\n        YIntervalSeries s1 = new YIntervalSeries(\"Series 1\");\n        s1.add(1.0, 1.0, 1.0, 2.0);\n        s1.add(2.0, 2.0, 2.0, 2.0);\n        s1.add(3.0, 3.0, 3.0, 3.0);\n        assertEquals(3, s1.getItemCount());\n        \n        s1.remove(new Double(2.0));\n        assertEquals(new Double(3.0), s1.getX(1));\n        \n        s1.remove(new Double(1.0));\n        assertEquals(new Double(3.0), s1.getX(0));    \n    }",
        "begin_line": 208,
        "end_line": 220,
        "comment": "\n     * Simple test for the remove() method.\n     ",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 61)",
            "(line 210,col 9)-(line 210,col 35)",
            "(line 211,col 9)-(line 211,col 35)",
            "(line 212,col 9)-(line 212,col 35)",
            "(line 213,col 9)-(line 213,col 43)",
            "(line 215,col 9)-(line 215,col 35)",
            "(line 216,col 9)-(line 216,col 50)",
            "(line 218,col 9)-(line 218,col 35)",
            "(line 219,col 9)-(line 219,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesTests.testAdditionOfDuplicateXValues()",
        "snippet": "    public void testAdditionOfDuplicateXValues() {\n        YIntervalSeries s1 = new YIntervalSeries(\"Series 1\");\n        s1.add(1.0, 1.0, 1.0, 1.0);\n        s1.add(2.0, 2.0, 2.0, 2.0);\n        s1.add(2.0, 3.0, 3.0, 3.0);\n        s1.add(2.0, 4.0, 4.0, 4.0);\n        s1.add(3.0, 5.0, 5.0, 5.0);\n        assertEquals(1.0, s1.getYValue(0), EPSILON);\n        assertEquals(2.0, s1.getYValue(1), EPSILON);\n        assertEquals(3.0, s1.getYValue(2), EPSILON);\n        assertEquals(4.0, s1.getYValue(3), EPSILON);\n        assertEquals(5.0, s1.getYValue(4), EPSILON);\n    }",
        "begin_line": 228,
        "end_line": 240,
        "comment": "\n     * When items are added with duplicate x-values, we expect them to remain \n     * in the order they were added.\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 61)",
            "(line 230,col 9)-(line 230,col 35)",
            "(line 231,col 9)-(line 231,col 35)",
            "(line 232,col 9)-(line 232,col 35)",
            "(line 233,col 9)-(line 233,col 35)",
            "(line 234,col 9)-(line 234,col 35)",
            "(line 235,col 9)-(line 235,col 52)",
            "(line 236,col 9)-(line 236,col 52)",
            "(line 237,col 9)-(line 237,col 52)",
            "(line 238,col 9)-(line 238,col 52)",
            "(line 239,col 9)-(line 239,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesTests.testAdd()",
        "snippet": "    public void testAdd() {\n        YIntervalSeries series = new YIntervalSeries(\"Series\", false, true);\n        series.add(5.0, 5.50, 5.50, 5.50);\n        series.add(5.1, 5.51, 5.51, 5.51);\n        series.add(6.0, 6.6, 6.6, 6.6);\n        series.add(3.0, 3.3, 3.3, 3.3);\n        series.add(4.0, 4.4, 4.4, 4.4);\n        series.add(2.0, 2.2, 2.2, 2.2);\n        series.add(1.0, 1.1, 1.1, 1.1);\n        assertEquals(5.5, series.getYValue(0), EPSILON);\n        assertEquals(5.51, series.getYValue(1), EPSILON);\n        assertEquals(6.6, series.getYValue(2), EPSILON);\n        assertEquals(3.3, series.getYValue(3), EPSILON);\n        assertEquals(4.4, series.getYValue(4), EPSILON);\n        assertEquals(2.2, series.getYValue(5), EPSILON);\n        assertEquals(1.1, series.getYValue(6), EPSILON);\n    }",
        "begin_line": 245,
        "end_line": 261,
        "comment": "\n     * Some checks for the add() method for an UNSORTED series.\n     ",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 76)",
            "(line 247,col 9)-(line 247,col 42)",
            "(line 248,col 9)-(line 248,col 42)",
            "(line 249,col 9)-(line 249,col 39)",
            "(line 250,col 9)-(line 250,col 39)",
            "(line 251,col 9)-(line 251,col 39)",
            "(line 252,col 9)-(line 252,col 39)",
            "(line 253,col 9)-(line 253,col 39)",
            "(line 254,col 9)-(line 254,col 56)",
            "(line 255,col 9)-(line 255,col 57)",
            "(line 256,col 9)-(line 256,col 56)",
            "(line 257,col 9)-(line 257,col 56)",
            "(line 258,col 9)-(line 258,col 56)",
            "(line 259,col 9)-(line 259,col 56)",
            "(line 260,col 9)-(line 260,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesTests.testSetMaximumItemCount()",
        "snippet": "    public void testSetMaximumItemCount() {\n        YIntervalSeries s1 = new YIntervalSeries(\"S1\");\n        assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount());\n        s1.setMaximumItemCount(2);\n        assertEquals(2, s1.getMaximumItemCount());\n        s1.add(1.0, 1.1, 1.1, 1.1);\n        s1.add(2.0, 2.2, 2.2, 2.2);\n        s1.add(3.0, 3.3, 3.3, 3.3);\n        assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON);\n        assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON);\n    }",
        "begin_line": 266,
        "end_line": 276,
        "comment": "\n     * A simple check that the maximumItemCount attribute is working.\n     ",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 55)",
            "(line 268,col 9)-(line 268,col 66)",
            "(line 269,col 9)-(line 269,col 34)",
            "(line 270,col 9)-(line 270,col 50)",
            "(line 271,col 9)-(line 271,col 35)",
            "(line 272,col 9)-(line 272,col 35)",
            "(line 273,col 9)-(line 273,col 35)",
            "(line 274,col 9)-(line 274,col 61)",
            "(line 275,col 9)-(line 275,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesTests.testSetMaximumItemCount2()",
        "snippet": "    public void testSetMaximumItemCount2() {\n        YIntervalSeries s1 = new YIntervalSeries(\"S1\");\n        s1.add(1.0, 1.1, 1.1, 1.1);\n        s1.add(2.0, 2.2, 2.2, 2.2);\n        s1.add(3.0, 3.3, 3.3, 3.3);\n        s1.setMaximumItemCount(2);\n        assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON);\n        assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON);\n    }",
        "begin_line": 281,
        "end_line": 289,
        "comment": "\n     * Check that the maximum item count can be applied retrospectively.\n     ",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 55)",
            "(line 283,col 9)-(line 283,col 35)",
            "(line 284,col 9)-(line 284,col 35)",
            "(line 285,col 9)-(line 285,col 35)",
            "(line 286,col 9)-(line 286,col 34)",
            "(line 287,col 9)-(line 287,col 61)",
            "(line 288,col 9)-(line 288,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalSeriesTests.testClear()",
        "snippet": "    public void testClear() {\n    \tYIntervalSeries s1 = new YIntervalSeries(\"S1\");\n        s1.addChangeListener(this);\n        s1.clear();\n        assertNull(this.lastEvent);\n        assertTrue(s1.isEmpty());\n        s1.add(1.0, 2.0, 3.0, 4.0);\n        assertFalse(s1.isEmpty());\n        s1.clear();\n        assertNotNull(this.lastEvent);\n        assertTrue(s1.isEmpty());\n    } ",
        "begin_line": 294,
        "end_line": 305,
        "comment": "\n     * Some checks for the clear() method.\n     ",
        "child_ranges": [
            "(line 295,col 6)-(line 295,col 52)",
            "(line 296,col 9)-(line 296,col 35)",
            "(line 297,col 9)-(line 297,col 19)",
            "(line 298,col 9)-(line 298,col 35)",
            "(line 299,col 9)-(line 299,col 33)",
            "(line 300,col 9)-(line 300,col 35)",
            "(line 301,col 9)-(line 301,col 34)",
            "(line 302,col 9)-(line 302,col 19)",
            "(line 303,col 9)-(line 303,col 38)",
            "(line 304,col 9)-(line 304,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesTests.seriesChanged(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "    public void seriesChanged(SeriesChangeEvent event) {\n        this.lastEvent = event;\n\t}",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(VectorSeriesTests.class);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesTests.VectorSeriesTests(java.lang.String)",
        "snippet": "    public VectorSeriesTests(String name) {\n        super(name);\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        VectorSeries s1 = new VectorSeries(\"s1\");\n        VectorSeries s2 = new VectorSeries(\"s1\");\n        assertTrue(s1.equals(s2));\n        \n        // seriesKey\n        s1 = new VectorSeries(\"s2\");\n        assertFalse(s1.equals(s2));\n        s2 = new VectorSeries(\"s2\");\n        assertTrue(s1.equals(s2));\n        \n        // autoSort\n        s1 = new VectorSeries(\"s2\", true, true);\n        assertFalse(s1.equals(s2));\n        s2 = new VectorSeries(\"s2\", true, true);\n        assertTrue(s1.equals(s2));\n        \n        // allowDuplicateValues\n        s1 = new VectorSeries(\"s2\", false, false);\n        assertFalse(s1.equals(s2));\n        s2 = new VectorSeries(\"s2\", false, false);\n        assertTrue(s1.equals(s2));\n        \n        // add a value\n        s1.add(1.0, 0.5, 1.5, 2.0);\n        assertFalse(s1.equals(s2));\n        s2.add(1.0, 0.5, 1.5, 2.0);\n        assertTrue(s2.equals(s1));\n\n        // add another value\n        s1.add(2.0, 0.5, 1.5, 2.0);\n        assertFalse(s1.equals(s2));\n        s2.add(2.0, 0.5, 1.5, 2.0);\n        assertTrue(s2.equals(s1));\n\n        // remove a value\n        s1.remove(new XYCoordinate(1.0, 0.5));\n        assertFalse(s1.equals(s2));\n        s2.remove(new XYCoordinate(1.0, 0.5));\n        assertTrue(s2.equals(s1));\n        \n    }",
        "begin_line": 94,
        "end_line": 136,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 49)",
            "(line 97,col 9)-(line 97,col 49)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 101,col 9)-(line 101,col 36)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 36)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 107,col 9)-(line 107,col 48)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 48)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 113,col 9)-(line 113,col 50)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 50)",
            "(line 116,col 9)-(line 116,col 34)",
            "(line 119,col 9)-(line 119,col 35)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 125,col 9)-(line 125,col 35)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 128,col 34)",
            "(line 131,col 9)-(line 131,col 46)",
            "(line 132,col 9)-(line 132,col 35)",
            "(line 133,col 9)-(line 133,col 46)",
            "(line 134,col 9)-(line 134,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesTests.testCloning()",
        "snippet": "    public void testCloning() {\n        VectorSeries s1 = new VectorSeries(\"s1\");\n        s1.add(1.0, 0.5, 1.5, 2.0);\n        VectorSeries s2 = null;\n        try {\n            s2 = (VectorSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n    }",
        "begin_line": 141,
        "end_line": 154,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 49)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 144,col 31)",
            "(line 145,col 9)-(line 150,col 9)",
            "(line 151,col 9)-(line 151,col 29)",
            "(line 152,col 9)-(line 152,col 51)",
            "(line 153,col 9)-(line 153,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        VectorSeries s1 = new VectorSeries(\"s1\");\n        s1.add(1.0, 0.5, 1.5, 2.0);\n        VectorSeries s2 = null;        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            s2 = (VectorSeries) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(s1, s2);\n\n    }",
        "begin_line": 159,
        "end_line": 179,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 49)",
            "(line 161,col 9)-(line 161,col 35)",
            "(line 162,col 9)-(line 162,col 31)",
            "(line 163,col 9)-(line 176,col 9)",
            "(line 177,col 9)-(line 177,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesTests.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        VectorSeries s1 = new VectorSeries(\"Series 1\");\n        s1.add(1.0, 1.0, 1.0, 2.0);\n        s1.add(2.0, 2.0, 2.0, 3.0);\n        s1.add(3.0, 3.0, 3.0, 4.0);\n        assertEquals(0, s1.indexOf(new XYCoordinate(1.0, 1.0)));\n    }",
        "begin_line": 184,
        "end_line": 190,
        "comment": "\n     * Simple test for the indexOf() method.\n     ",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 55)",
            "(line 186,col 9)-(line 186,col 35)",
            "(line 187,col 9)-(line 187,col 35)",
            "(line 188,col 9)-(line 188,col 35)",
            "(line 189,col 9)-(line 189,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesTests.testIndexOf2()",
        "snippet": "    public void testIndexOf2() {\n        VectorSeries s1 = new VectorSeries(\"Series 1\");\n        s1.add(1.0, 1.0, 1.0, 2.0);\n        s1.add(3.0, 3.0, 3.0, 3.0);\n        s1.add(2.0, 2.0, 2.0, 2.0);\n        assertEquals(0, s1.indexOf(new XYCoordinate(1.0, 1.0)));        \n        assertEquals(1, s1.indexOf(new XYCoordinate(3.0, 3.0)));        \n        assertEquals(2, s1.indexOf(new XYCoordinate(2.0, 2.0)));        \n    }",
        "begin_line": 195,
        "end_line": 203,
        "comment": "\n     * A check for the indexOf() method for an unsorted series.\n     ",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 55)",
            "(line 197,col 9)-(line 197,col 35)",
            "(line 198,col 9)-(line 198,col 35)",
            "(line 199,col 9)-(line 199,col 35)",
            "(line 200,col 9)-(line 200,col 64)",
            "(line 201,col 9)-(line 201,col 64)",
            "(line 202,col 9)-(line 202,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesTests.testRemove()",
        "snippet": "    public void testRemove() {\n        VectorSeries s1 = new VectorSeries(\"Series 1\");\n        s1.add(1.0, 1.0, 1.0, 2.0);\n        s1.add(3.0, 3.0, 3.0, 3.0);\n        s1.add(2.0, 2.0, 2.0, 2.0);\n        assertEquals(3, s1.getItemCount());\n        \n        s1.remove(new XYCoordinate(2.0, 2.0));\n        assertEquals(3.0, s1.getXValue(1), EPSILON);\n        \n        s1.remove(new XYCoordinate(1.0, 1.0));\n        assertEquals(3.0, s1.getXValue(0), EPSILON);    \n    }",
        "begin_line": 208,
        "end_line": 220,
        "comment": "\n     * Simple test for the remove() method.\n     ",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 55)",
            "(line 210,col 9)-(line 210,col 35)",
            "(line 211,col 9)-(line 211,col 35)",
            "(line 212,col 9)-(line 212,col 35)",
            "(line 213,col 9)-(line 213,col 43)",
            "(line 215,col 9)-(line 215,col 46)",
            "(line 216,col 9)-(line 216,col 52)",
            "(line 218,col 9)-(line 218,col 46)",
            "(line 219,col 9)-(line 219,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesTests.testAdditionOfDuplicateXValues()",
        "snippet": "    public void testAdditionOfDuplicateXValues() {\n        VectorSeries s1 = new VectorSeries(\"Series 1\");\n        s1.add(1.0, 1.0, 1.0, 1.0);\n        s1.add(2.0, 2.0, 2.0, 2.0);\n        s1.add(2.0, 2.0, 3.0, 3.0);\n        s1.add(2.0, 3.0, 4.0, 4.0);\n        s1.add(3.0, 5.0, 5.0, 5.0);\n        assertEquals(1.0, s1.getVectorXValue(0), EPSILON);\n        assertEquals(2.0, s1.getVectorXValue(1), EPSILON);\n        assertEquals(3.0, s1.getVectorXValue(2), EPSILON);\n        assertEquals(4.0, s1.getVectorXValue(3), EPSILON);\n        assertEquals(5.0, s1.getVectorXValue(4), EPSILON);\n    }",
        "begin_line": 228,
        "end_line": 240,
        "comment": "\n     * When items are added with duplicate x-values, we expect them to remain \n     * in the order they were added.\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 55)",
            "(line 230,col 9)-(line 230,col 35)",
            "(line 231,col 9)-(line 231,col 35)",
            "(line 232,col 9)-(line 232,col 35)",
            "(line 233,col 9)-(line 233,col 35)",
            "(line 234,col 9)-(line 234,col 35)",
            "(line 235,col 9)-(line 235,col 58)",
            "(line 236,col 9)-(line 236,col 58)",
            "(line 237,col 9)-(line 237,col 58)",
            "(line 238,col 9)-(line 238,col 58)",
            "(line 239,col 9)-(line 239,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesTests.testAdd()",
        "snippet": "    public void testAdd() {\n        VectorSeries series = new VectorSeries(\"Series\", false, true);\n        series.add(5.0, 5.50, 5.50, 5.50);\n        series.add(5.1, 5.51, 5.51, 5.51);\n        series.add(6.0, 6.6, 6.6, 6.6);\n        series.add(3.0, 3.3, 3.3, 3.3);\n        series.add(4.0, 4.4, 4.4, 4.4);\n        series.add(2.0, 2.2, 2.2, 2.2);\n        series.add(1.0, 1.1, 1.1, 1.1);\n        assertEquals(5.5, series.getVectorXValue(0), EPSILON);\n        assertEquals(5.51, series.getVectorXValue(1), EPSILON);\n        assertEquals(6.6, series.getVectorXValue(2), EPSILON);\n        assertEquals(3.3, series.getVectorXValue(3), EPSILON);\n        assertEquals(4.4, series.getVectorXValue(4), EPSILON);\n        assertEquals(2.2, series.getVectorXValue(5), EPSILON);\n        assertEquals(1.1, series.getVectorXValue(6), EPSILON);\n    }",
        "begin_line": 245,
        "end_line": 261,
        "comment": "\n     * Some checks for the add() method for an UNSORTED series.\n     ",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 70)",
            "(line 247,col 9)-(line 247,col 42)",
            "(line 248,col 9)-(line 248,col 42)",
            "(line 249,col 9)-(line 249,col 39)",
            "(line 250,col 9)-(line 250,col 39)",
            "(line 251,col 9)-(line 251,col 39)",
            "(line 252,col 9)-(line 252,col 39)",
            "(line 253,col 9)-(line 253,col 39)",
            "(line 254,col 9)-(line 254,col 62)",
            "(line 255,col 9)-(line 255,col 63)",
            "(line 256,col 9)-(line 256,col 62)",
            "(line 257,col 9)-(line 257,col 62)",
            "(line 258,col 9)-(line 258,col 62)",
            "(line 259,col 9)-(line 259,col 62)",
            "(line 260,col 9)-(line 260,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesTests.testSetMaximumItemCount()",
        "snippet": "    public void testSetMaximumItemCount() {\n        VectorSeries s1 = new VectorSeries(\"S1\");\n        assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount());\n        s1.setMaximumItemCount(2);\n        assertEquals(2, s1.getMaximumItemCount());\n        s1.add(1.0, 1.1, 1.1, 1.1);\n        s1.add(2.0, 2.2, 2.2, 2.2);\n        s1.add(3.0, 3.3, 3.3, 3.3);\n        assertEquals(2.0, s1.getXValue(0), EPSILON);\n        assertEquals(3.0, s1.getXValue(1), EPSILON);\n    }",
        "begin_line": 266,
        "end_line": 276,
        "comment": "\n     * A simple check that the maximumItemCount attribute is working.\n     ",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 49)",
            "(line 268,col 9)-(line 268,col 66)",
            "(line 269,col 9)-(line 269,col 34)",
            "(line 270,col 9)-(line 270,col 50)",
            "(line 271,col 9)-(line 271,col 35)",
            "(line 272,col 9)-(line 272,col 35)",
            "(line 273,col 9)-(line 273,col 35)",
            "(line 274,col 9)-(line 274,col 52)",
            "(line 275,col 9)-(line 275,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesTests.testSetMaximumItemCount2()",
        "snippet": "    public void testSetMaximumItemCount2() {\n        VectorSeries s1 = new VectorSeries(\"S1\");\n        s1.add(1.0, 1.1, 1.1, 1.1);\n        s1.add(2.0, 2.2, 2.2, 2.2);\n        s1.add(3.0, 3.3, 3.3, 3.3);\n        s1.setMaximumItemCount(2);\n        assertEquals(2.0, s1.getXValue(0), EPSILON);\n        assertEquals(3.0, s1.getXValue(1), EPSILON);\n    }",
        "begin_line": 281,
        "end_line": 289,
        "comment": "\n     * Check that the maximum item count can be applied retrospectively.\n     ",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 49)",
            "(line 283,col 9)-(line 283,col 35)",
            "(line 284,col 9)-(line 284,col 35)",
            "(line 285,col 9)-(line 285,col 35)",
            "(line 286,col 9)-(line 286,col 34)",
            "(line 287,col 9)-(line 287,col 52)",
            "(line 288,col 9)-(line 288,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesTests.testClear()",
        "snippet": "    public void testClear() {\n        VectorSeries s1 = new VectorSeries(\"S1\");\n        s1.addChangeListener(this);\n        s1.clear();\n        assertNull(this.lastEvent);\n        assertTrue(s1.isEmpty());\n        s1.add(1.0, 2.0, 3.0, 4.0);\n        assertFalse(s1.isEmpty());\n        s1.clear();\n        assertNotNull(this.lastEvent);\n        assertTrue(s1.isEmpty());\n    }",
        "begin_line": 294,
        "end_line": 305,
        "comment": "\n     * Some checks for the clear() method.\n     ",
        "child_ranges": [
            "(line 295,col 9)-(line 295,col 49)",
            "(line 296,col 9)-(line 296,col 35)",
            "(line 297,col 9)-(line 297,col 19)",
            "(line 298,col 9)-(line 298,col 35)",
            "(line 299,col 9)-(line 299,col 33)",
            "(line 300,col 9)-(line 300,col 35)",
            "(line 301,col 9)-(line 301,col 34)",
            "(line 302,col 9)-(line 302,col 19)",
            "(line 303,col 9)-(line 303,col 38)",
            "(line 304,col 9)-(line 304,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DataXYPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DataXYPackageTests.java",
        "signature": "org.jfree.data.xy.junit.DataXYPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.data.xy\");\n        suite.addTestSuite(CategoryTableXYDatasetTests.class);\n        suite.addTestSuite(DefaultHighLowDatasetTests.class);\n        suite.addTestSuite(DefaultIntervalXYDatasetTests.class);\n        suite.addTestSuite(DefaultOHLCDatasetTests.class);\n        suite.addTestSuite(DefaultTableXYDatasetTests.class);\n        suite.addTestSuite(DefaultWindDatasetTests.class);\n        suite.addTestSuite(DefaultXYDatasetTests.class);\n        suite.addTestSuite(DefaultXYZDatasetTests.class);\n        suite.addTestSuite(IntervalXYDelegateTests.class);\n        suite.addTestSuite(MatrixSeriesCollectionTests.class);\n        suite.addTestSuite(MatrixSeriesTests.class);\n        suite.addTestSuite(OHLCDataItemTests.class);\n        suite.addTestSuite(TableXYDatasetTests.class);\n        suite.addTestSuite(VectorDataItemTests.class);\n        suite.addTestSuite(VectorSeriesCollectionTests.class);\n        suite.addTestSuite(VectorSeriesTests.class);\n        suite.addTestSuite(VectorTests.class);\n        suite.addTestSuite(XIntervalDataItemTests.class);\n        suite.addTestSuite(XIntervalSeriesCollectionTests.class);\n        suite.addTestSuite(XIntervalSeriesTests.class);\n        suite.addTestSuite(XYBarDatasetTests.class);\n        suite.addTestSuite(XYCoordinateTests.class);\n        suite.addTestSuite(XYDataItemTests.class);\n        suite.addTestSuite(XYIntervalDataItemTests.class);\n        suite.addTestSuite(XYIntervalSeriesCollectionTests.class);\n        suite.addTestSuite(XYIntervalSeriesTests.class);\n        suite.addTestSuite(XYIntervalTests.class);\n        suite.addTestSuite(XYSeriesCollectionTests.class);\n        suite.addTestSuite(XYSeriesTests.class);\n        suite.addTestSuite(YIntervalDataItemTests.class);\n        suite.addTestSuite(YIntervalSeriesCollectionTests.class);\n        suite.addTestSuite(YIntervalSeriesTests.class);\n        suite.addTestSuite(YIntervalTests.class);\n        suite.addTestSuite(YWithXIntervalTests.class);\n        return suite;\n    }",
        "begin_line": 69,
        "end_line": 106,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 61)",
            "(line 71,col 9)-(line 71,col 62)",
            "(line 72,col 9)-(line 72,col 61)",
            "(line 73,col 9)-(line 73,col 64)",
            "(line 74,col 9)-(line 74,col 58)",
            "(line 75,col 9)-(line 75,col 61)",
            "(line 76,col 9)-(line 76,col 58)",
            "(line 77,col 9)-(line 77,col 56)",
            "(line 78,col 9)-(line 78,col 57)",
            "(line 79,col 9)-(line 79,col 58)",
            "(line 80,col 9)-(line 80,col 62)",
            "(line 81,col 9)-(line 81,col 52)",
            "(line 82,col 9)-(line 82,col 52)",
            "(line 83,col 9)-(line 83,col 54)",
            "(line 84,col 9)-(line 84,col 54)",
            "(line 85,col 9)-(line 85,col 62)",
            "(line 86,col 9)-(line 86,col 52)",
            "(line 87,col 9)-(line 87,col 46)",
            "(line 88,col 9)-(line 88,col 57)",
            "(line 89,col 9)-(line 89,col 65)",
            "(line 90,col 9)-(line 90,col 55)",
            "(line 91,col 9)-(line 91,col 52)",
            "(line 92,col 9)-(line 92,col 52)",
            "(line 93,col 9)-(line 93,col 50)",
            "(line 94,col 9)-(line 94,col 58)",
            "(line 95,col 9)-(line 95,col 66)",
            "(line 96,col 9)-(line 96,col 56)",
            "(line 97,col 9)-(line 97,col 50)",
            "(line 98,col 9)-(line 98,col 58)",
            "(line 99,col 9)-(line 99,col 48)",
            "(line 100,col 9)-(line 100,col 57)",
            "(line 101,col 9)-(line 101,col 65)",
            "(line 102,col 9)-(line 102,col 55)",
            "(line 103,col 9)-(line 103,col 49)",
            "(line 104,col 9)-(line 104,col 54)",
            "(line 105,col 9)-(line 105,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DataXYPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DataXYPackageTests.java",
        "signature": "org.jfree.data.xy.junit.DataXYPackageTests.DataXYPackageTests(java.lang.String)",
        "snippet": "    public DataXYPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the test suite name.\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DataXYPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DataXYPackageTests.java",
        "signature": "org.jfree.data.xy.junit.DataXYPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 122,
        "end_line": 124,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalDataItemTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYIntervalDataItemTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalDataItemTests.XYIntervalDataItemTests(java.lang.String)",
        "snippet": "    public XYIntervalDataItemTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalDataItemTests.testConstructor1()",
        "snippet": "    public void testConstructor1() {\n        XYIntervalDataItem item1 = new XYIntervalDataItem(1.0, 0.5, 1.5, 2.0, \n                1.9, 2.1);\n        assertEquals(new Double(1.0), item1.getX());\n        assertEquals(0.5, item1.getXLowValue(), EPSILON);\n        assertEquals(1.5, item1.getXHighValue(), EPSILON);\n        assertEquals(2.0, item1.getYValue(), EPSILON);\n        assertEquals(1.9, item1.getYLowValue(), EPSILON);\n        assertEquals(2.1, item1.getYHighValue(), EPSILON);\n    }",
        "begin_line": 83,
        "end_line": 92,
        "comment": "\n     * Some checks for the constructor.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 85,col 26)",
            "(line 86,col 9)-(line 86,col 52)",
            "(line 87,col 9)-(line 87,col 57)",
            "(line 88,col 9)-(line 88,col 58)",
            "(line 89,col 9)-(line 89,col 54)",
            "(line 90,col 9)-(line 90,col 57)",
            "(line 91,col 9)-(line 91,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalDataItemTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYIntervalDataItem item1 = new XYIntervalDataItem(1.0, 0.5, 1.5, 2.0, \n                1.9, 2.1);\n        XYIntervalDataItem item2 = new XYIntervalDataItem(1.0, 0.5, 1.5, 2.0, \n                1.9, 2.1);\n        assertTrue(item1.equals(item2));\n        assertTrue(item2.equals(item1));\n\n        // x\n        item1 = new XYIntervalDataItem(1.1, 0.5, 1.5, 2.0, 1.9, 2.1);\n        assertFalse(item1.equals(item2));\n        item2 = new XYIntervalDataItem(1.1, 0.5, 1.5, 2.0, 1.9, 2.1);\n        assertTrue(item1.equals(item2));\n        \n        // xLow\n        item1 = new XYIntervalDataItem(1.1, 0.55, 1.5, 2.0, 1.9, 2.1);\n        assertFalse(item1.equals(item2));\n        item2 = new XYIntervalDataItem(1.1, 0.55, 1.5, 2.0, 1.9, 2.1);\n        assertTrue(item1.equals(item2));\n\n        // xHigh\n        item1 = new XYIntervalDataItem(1.1, 0.55, 1.55, 2.0, 1.9, 2.1);\n        assertFalse(item1.equals(item2));\n        item2 = new XYIntervalDataItem(1.1, 0.55, 1.55, 2.0, 1.9, 2.1);\n        assertTrue(item1.equals(item2));\n\n        // y\n        item1 = new XYIntervalDataItem(1.1, 0.55, 1.55, 2.2, 1.9, 2.1);\n        assertFalse(item1.equals(item2));\n        item2 = new XYIntervalDataItem(1.1, 0.55, 1.55, 2.2, 1.9, 2.1);\n        assertTrue(item1.equals(item2));\n\n        // yLow\n        item1 = new XYIntervalDataItem(1.1, 0.55, 1.55, 2.2, 1.99, 2.1);\n        assertFalse(item1.equals(item2));\n        item2 = new XYIntervalDataItem(1.1, 0.55, 1.55, 2.2, 1.99, 2.1);\n        assertTrue(item1.equals(item2));\n\n        // yHigh\n        item1 = new XYIntervalDataItem(1.1, 0.55, 1.55, 2.2, 1.99, 2.11);\n        assertFalse(item1.equals(item2));\n        item2 = new XYIntervalDataItem(1.1, 0.55, 1.55, 2.2, 1.99, 2.11);\n        assertTrue(item1.equals(item2));\n    }",
        "begin_line": 97,
        "end_line": 140,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 99,col 26)",
            "(line 100,col 9)-(line 101,col 26)",
            "(line 102,col 9)-(line 102,col 40)",
            "(line 103,col 9)-(line 103,col 40)",
            "(line 106,col 9)-(line 106,col 69)",
            "(line 107,col 9)-(line 107,col 41)",
            "(line 108,col 9)-(line 108,col 69)",
            "(line 109,col 9)-(line 109,col 40)",
            "(line 112,col 9)-(line 112,col 70)",
            "(line 113,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 114,col 70)",
            "(line 115,col 9)-(line 115,col 40)",
            "(line 118,col 9)-(line 118,col 71)",
            "(line 119,col 9)-(line 119,col 41)",
            "(line 120,col 9)-(line 120,col 71)",
            "(line 121,col 9)-(line 121,col 40)",
            "(line 124,col 9)-(line 124,col 71)",
            "(line 125,col 9)-(line 125,col 41)",
            "(line 126,col 9)-(line 126,col 71)",
            "(line 127,col 9)-(line 127,col 40)",
            "(line 130,col 9)-(line 130,col 72)",
            "(line 131,col 9)-(line 131,col 41)",
            "(line 132,col 9)-(line 132,col 72)",
            "(line 133,col 9)-(line 133,col 40)",
            "(line 136,col 9)-(line 136,col 73)",
            "(line 137,col 9)-(line 137,col 41)",
            "(line 138,col 9)-(line 138,col 73)",
            "(line 139,col 9)-(line 139,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalDataItemTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYIntervalDataItem item1 = new XYIntervalDataItem(1.0, 0.5, 1.5, 2.0, \n                1.9, 2.1);\n        XYIntervalDataItem item2 = null;\n        try {\n            item2 = (XYIntervalDataItem) item1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(item1 != item2);\n        assertTrue(item1.getClass() == item2.getClass());\n        assertTrue(item1.equals(item2));\n    }",
        "begin_line": 145,
        "end_line": 158,
        "comment": "\n     * Some checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 146,col 9)-(line 147,col 26)",
            "(line 148,col 9)-(line 148,col 40)",
            "(line 149,col 9)-(line 154,col 9)",
            "(line 155,col 9)-(line 155,col 35)",
            "(line 156,col 9)-(line 156,col 57)",
            "(line 157,col 9)-(line 157,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalDataItemTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalDataItemTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalDataItemTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        XYIntervalDataItem item1 = new XYIntervalDataItem(1.0, 0.5, 1.5, 2.0, \n                1.9, 2.1);\n        XYIntervalDataItem item2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(item1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            item2 = (XYIntervalDataItem) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(item1, item2);\n    }",
        "begin_line": 163,
        "end_line": 182,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 164,col 9)-(line 165,col 26)",
            "(line 166,col 9)-(line 166,col 40)",
            "(line 167,col 9)-(line 180,col 9)",
            "(line 181,col 9)-(line 181,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYIntervalTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalTests.XYIntervalTests(java.lang.String)",
        "snippet": "    public XYIntervalTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYInterval i1 = new XYInterval(1.0, 2.0, 3.0, 2.5, 3.5);\n        XYInterval i2 = new XYInterval(1.0, 2.0, 3.0, 2.5, 3.5);\n        assertEquals(i1, i2);\n        \n        i1 = new XYInterval(1.1, 2.0, 3.0, 2.5, 3.5);\n        assertFalse(i1.equals(i2));\n        i2 = new XYInterval(1.1, 2.0, 3.0, 2.5, 3.5);\n        assertTrue(i1.equals(i2));\n\n        i1 = new XYInterval(1.1, 2.2, 3.0, 2.5, 3.5);\n        assertFalse(i1.equals(i2));\n        i2 = new XYInterval(1.1, 2.2, 3.0, 2.5, 3.5);\n        assertTrue(i1.equals(i2));\n    \n        i1 = new XYInterval(1.1, 2.2, 3.3, 2.5, 3.5);\n        assertFalse(i1.equals(i2));\n        i2 = new XYInterval(1.1, 2.2, 3.3, 2.5, 3.5);\n        assertTrue(i1.equals(i2));\n\n        i1 = new XYInterval(1.1, 2.2, 3.3, 2.6, 3.5);\n        assertFalse(i1.equals(i2));\n        i2 = new XYInterval(1.1, 2.2, 3.3, 2.6, 3.5);\n        assertTrue(i1.equals(i2));\n    \n        i1 = new XYInterval(1.1, 2.2, 3.3, 2.6, 3.6);\n        assertFalse(i1.equals(i2));\n        i2 = new XYInterval(1.1, 2.2, 3.3, 2.6, 3.6);\n        assertTrue(i1.equals(i2));\n    }",
        "begin_line": 82,
        "end_line": 111,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 64)",
            "(line 84,col 9)-(line 84,col 64)",
            "(line 85,col 9)-(line 85,col 29)",
            "(line 87,col 9)-(line 87,col 53)",
            "(line 88,col 9)-(line 88,col 35)",
            "(line 89,col 9)-(line 89,col 53)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 92,col 9)-(line 92,col 53)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 94,col 53)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 97,col 9)-(line 97,col 53)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 53)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 102,col 53)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 53)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 107,col 9)-(line 107,col 53)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 53)",
            "(line 110,col 9)-(line 110,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYInterval i1 = new XYInterval(1.0, 2.0, 3.0, 2.5, 3.5);\n        assertFalse(i1 instanceof Cloneable);\n    }",
        "begin_line": 116,
        "end_line": 119,
        "comment": "\n     * This class is immutable.\n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 64)",
            "(line 118,col 9)-(line 118,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.XYIntervalTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        XYInterval i1 = new XYInterval(1.0, 2.0, 3.0, 2.5, 3.5);\n        XYInterval i2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(i1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            i2 = (XYInterval) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(i1, i2);\n    }",
        "begin_line": 124,
        "end_line": 143,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 64)",
            "(line 126,col 9)-(line 126,col 29)",
            "(line 128,col 9)-(line 141,col 9)",
            "(line 142,col 9)-(line 142,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesCollectionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XIntervalSeriesCollectionTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 67)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesCollectionTests.XIntervalSeriesCollectionTests(java.lang.String)",
        "snippet": "    public XIntervalSeriesCollectionTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesCollectionTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XIntervalSeriesCollection c1 = new XIntervalSeriesCollection();\n        XIntervalSeriesCollection c2 = new XIntervalSeriesCollection();\n        assertEquals(c1, c2);\n        \n        // add a series\n        XIntervalSeries s1 = new XIntervalSeries(\"Series\");\n        s1.add(1.0, 1.1, 1.2, 1.3);\n        c1.addSeries(s1);\n        assertFalse(c1.equals(c2));\n        XIntervalSeries s2 = new XIntervalSeries(\"Series\");\n        s2.add(1.0, 1.1, 1.2, 1.3);\n        c2.addSeries(s2);\n        assertTrue(c1.equals(c2));\n        \n        // add an empty series\n        c1.addSeries(new XIntervalSeries(\"Empty Series\"));\n        assertFalse(c1.equals(c2));\n        c2.addSeries(new XIntervalSeries(\"Empty Series\"));\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 83,
        "end_line": 103,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 71)",
            "(line 85,col 9)-(line 85,col 71)",
            "(line 86,col 9)-(line 86,col 29)",
            "(line 89,col 9)-(line 89,col 59)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 25)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 59)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 95,col 25)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 99,col 9)-(line 99,col 58)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 58)",
            "(line 102,col 9)-(line 102,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesCollectionTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XIntervalSeriesCollection c1 = new XIntervalSeriesCollection();\n        XIntervalSeries s1 = new XIntervalSeries(\"Series\");\n        s1.add(1.0, 1.1, 1.2, 1.3);\n        c1.addSeries(s1);\n        XIntervalSeriesCollection c2 = null;\n        try {\n            c2 = (XIntervalSeriesCollection) c1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n        \n        // check independence\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }",
        "begin_line": 108,
        "end_line": 127,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 71)",
            "(line 110,col 9)-(line 110,col 59)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 25)",
            "(line 113,col 9)-(line 113,col 44)",
            "(line 114,col 9)-(line 119,col 9)",
            "(line 120,col 9)-(line 120,col 29)",
            "(line 121,col 9)-(line 121,col 51)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 125,col 9)-(line 125,col 33)",
            "(line 126,col 9)-(line 126,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesCollectionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        XIntervalSeriesCollection c1 = new XIntervalSeriesCollection();\n        XIntervalSeries s1 = new XIntervalSeries(\"Series\");\n        s1.add(1.0, 1.1, 1.2, 1.3);\n        XIntervalSeriesCollection c2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            c2 = (XIntervalSeriesCollection) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n    }",
        "begin_line": 132,
        "end_line": 153,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 71)",
            "(line 134,col 9)-(line 134,col 59)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 136,col 44)",
            "(line 138,col 9)-(line 151,col 9)",
            "(line 152,col 9)-(line 152,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XIntervalSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XIntervalSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XIntervalSeriesCollectionTests.test1170825()",
        "snippet": "    public void test1170825() {\n        XIntervalSeries s1 = new XIntervalSeries(\"Series1\");\n        XIntervalSeriesCollection dataset = new XIntervalSeriesCollection();\n        dataset.addSeries(s1);\n        try {\n            /* XYSeries s = */ dataset.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            // correct outcome\n        }\n        catch (IndexOutOfBoundsException e) {\n            assertTrue(false);  // wrong outcome\n        }\n    }",
        "begin_line": 159,
        "end_line": 172,
        "comment": "\n     * A test for bug report 1170825 (originally affected XYSeriesCollection, \n     * this test is just copied over).\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 60)",
            "(line 161,col 9)-(line 161,col 76)",
            "(line 162,col 9)-(line 162,col 30)",
            "(line 163,col 9)-(line 171,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultWindDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultWindDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultWindDatasetTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultWindDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultWindDatasetTests.DefaultWindDatasetTests(java.lang.String)",
        "snippet": "    public DefaultWindDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultWindDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultWindDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultWindDataset d1 = new DefaultWindDataset();\n        DefaultWindDataset d2 = new DefaultWindDataset();\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n        \n        d1 = createSampleDataset1();\n        assertFalse(d1.equals(d2));\n        d2 = createSampleDataset1();\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 84,
        "end_line": 94,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 57)",
            "(line 86,col 9)-(line 86,col 57)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 90,col 9)-(line 90,col 36)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 92,col 9)-(line 92,col 36)",
            "(line 93,col 9)-(line 93,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultWindDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultWindDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultWindDataset d1 = new DefaultWindDataset();\n        DefaultWindDataset d2 = null;\n        try {\n            d2 = (DefaultWindDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // try a dataset with some content...\n        d1 = createSampleDataset1();\n        d2 = null;\n        try {\n            d2 = (DefaultWindDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 99,
        "end_line": 124,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 57)",
            "(line 101,col 9)-(line 101,col 37)",
            "(line 102,col 9)-(line 107,col 9)",
            "(line 108,col 9)-(line 108,col 29)",
            "(line 109,col 9)-(line 109,col 51)",
            "(line 110,col 9)-(line 110,col 34)",
            "(line 113,col 9)-(line 113,col 36)",
            "(line 114,col 9)-(line 114,col 18)",
            "(line 115,col 9)-(line 120,col 9)",
            "(line 121,col 9)-(line 121,col 29)",
            "(line 122,col 9)-(line 122,col 51)",
            "(line 123,col 9)-(line 123,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultWindDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultWindDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        DefaultWindDataset d1 = new DefaultWindDataset();\n        DefaultWindDataset d2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            d2 = (DefaultWindDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n        // try a dataset with some content...\n        d1 = createSampleDataset1();\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            d2 = (DefaultWindDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n        \n    }",
        "begin_line": 129,
        "end_line": 166,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 57)",
            "(line 131,col 9)-(line 131,col 37)",
            "(line 132,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 146,col 29)",
            "(line 149,col 9)-(line 149,col 36)",
            "(line 150,col 9)-(line 163,col 9)",
            "(line 164,col 9)-(line 164,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultWindDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultWindDatasetTests.testGetSeriesKey()",
        "snippet": "    public void testGetSeriesKey() {\n        DefaultWindDataset d = createSampleDataset1();\n        assertEquals(\"Series 1\", d.getSeriesKey(0));\n        assertEquals(\"Series 2\", d.getSeriesKey(1));\n        \n        // check for series key out of bounds\n        boolean pass = false;\n        try {\n            /*Comparable k =*/ d.getSeriesKey(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            /*Comparable k =*/ d.getSeriesKey(2);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 171,
        "end_line": 194,
        "comment": "\n     * Some checks for the getSeriesKey(int) method.\n     ",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 54)",
            "(line 173,col 9)-(line 173,col 52)",
            "(line 174,col 9)-(line 174,col 52)",
            "(line 177,col 9)-(line 177,col 29)",
            "(line 178,col 9)-(line 183,col 9)",
            "(line 184,col 9)-(line 184,col 25)",
            "(line 186,col 9)-(line 186,col 21)",
            "(line 187,col 9)-(line 192,col 9)",
            "(line 193,col 9)-(line 193,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultWindDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultWindDatasetTests.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        DefaultWindDataset d = createSampleDataset1();\n        assertEquals(0, d.indexOf(\"Series 1\"));\n        assertEquals(1, d.indexOf(\"Series 2\"));\n        assertEquals(-1, d.indexOf(\"Green Eggs and Ham\"));\n        assertEquals(-1, d.indexOf(null));\n    }",
        "begin_line": 199,
        "end_line": 205,
        "comment": "\n     * Some checks for the indexOf(Comparable) method.\n     ",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 54)",
            "(line 201,col 9)-(line 201,col 47)",
            "(line 202,col 9)-(line 202,col 47)",
            "(line 203,col 9)-(line 203,col 58)",
            "(line 204,col 9)-(line 204,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultWindDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultWindDatasetTests.createSampleDataset1()",
        "snippet": "    public DefaultWindDataset createSampleDataset1() {\n        Day t = new Day(1, 4, 2006);\n        Object[] item1 = createItem(t, 3, 7);\n        Object[] item2 = createItem(t.next(), 4, 8);\n        Object[] item3 = createItem(t.next(), 5, 9);\n        Object[][] series1 = new Object[][] {item1, item2, item3};\n        Object[] item1b = createItem(t, 6, 10);\n        Object[] item2b = createItem(t.next(), 7, 11);\n        Object[] item3b = createItem(t.next(), 8, 12);\n        Object[][] series2 = new Object[][] {item1b, item2b, item3b};\n        Object[][][] data = new Object[][][] {series1, series2};\n        return new DefaultWindDataset(data);\n    }",
        "begin_line": 212,
        "end_line": 224,
        "comment": "\n     * Creates a sample dataset for testing.\n     * \n     * @return A sample dataset.\n     ",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 36)",
            "(line 214,col 9)-(line 214,col 45)",
            "(line 215,col 9)-(line 215,col 52)",
            "(line 216,col 9)-(line 216,col 52)",
            "(line 217,col 9)-(line 217,col 66)",
            "(line 218,col 9)-(line 218,col 47)",
            "(line 219,col 9)-(line 219,col 54)",
            "(line 220,col 9)-(line 220,col 54)",
            "(line 221,col 9)-(line 221,col 69)",
            "(line 222,col 9)-(line 222,col 64)",
            "(line 223,col 9)-(line 223,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.DefaultWindDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java",
        "signature": "org.jfree.data.xy.junit.DefaultWindDatasetTests.createItem(org.jfree.data.time.RegularTimePeriod, int, int)",
        "snippet": "    private Object[] createItem(RegularTimePeriod t, int dir, int force) {\n        return new Object[] { new Long(t.getMiddleMillisecond()), \n                new Integer(dir), new Integer(force) };\n    }",
        "begin_line": 235,
        "end_line": 238,
        "comment": "\n     * Creates an array representing one item in a series.\n     * \n     * @param t  the time period.\n     * @param dir  the wind direction.\n     * @param force  the wind force.\n     * \n     * @return An array containing the specified items.\n     ",
        "child_ranges": [
            "(line 236,col 9)-(line 237,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(YIntervalTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalTests.YIntervalTests(java.lang.String)",
        "snippet": "    public YIntervalTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalTests.testEquals()",
        "snippet": "    public void testEquals() {\n        YInterval i1 = new YInterval(1.0, 0.5, 1.5);\n        YInterval i2 = new YInterval(1.0, 0.5, 1.5);\n        assertEquals(i1, i2);\n        \n        i1 = new YInterval(1.1, 0.5, 1.5);\n        assertFalse(i1.equals(i2));\n        i2 = new YInterval(1.1, 0.5, 1.5);\n        assertTrue(i1.equals(i2));\n\n        i1 = new YInterval(1.1, 0.55, 1.5);\n        assertFalse(i1.equals(i2));\n        i2 = new YInterval(1.1, 0.55, 1.5);\n        assertTrue(i1.equals(i2));\n    \n        i1 = new YInterval(1.1, 0.55, 1.55);\n        assertFalse(i1.equals(i2));\n        i2 = new YInterval(1.1, 0.55, 1.55);\n        assertTrue(i1.equals(i2));\n    }",
        "begin_line": 82,
        "end_line": 101,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 52)",
            "(line 84,col 9)-(line 84,col 52)",
            "(line 85,col 9)-(line 85,col 29)",
            "(line 87,col 9)-(line 87,col 42)",
            "(line 88,col 9)-(line 88,col 35)",
            "(line 89,col 9)-(line 89,col 42)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 92,col 9)-(line 92,col 43)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 94,col 43)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 97,col 9)-(line 97,col 44)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 44)",
            "(line 100,col 9)-(line 100,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalTests.testCloning()",
        "snippet": "    public void testCloning() {\n        YInterval i1 = new YInterval(1.0, 0.5, 1.5);\n        assertFalse(i1 instanceof Cloneable);\n    }",
        "begin_line": 106,
        "end_line": 109,
        "comment": "\n     * This class is immutable.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 52)",
            "(line 108,col 9)-(line 108,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.YIntervalTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        YInterval i1 = new YInterval(1.0, 0.5, 1.5);\n        YInterval i2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(i1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            i2 = (YInterval) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(i1, i2);\n    }",
        "begin_line": 114,
        "end_line": 133,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 52)",
            "(line 116,col 9)-(line 116,col 28)",
            "(line 118,col 9)-(line 131,col 9)",
            "(line 132,col 9)-(line 132,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YWithXIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YWithXIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.YWithXIntervalTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(YWithXIntervalTests.class);\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YWithXIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YWithXIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.YWithXIntervalTests.YWithXIntervalTests(java.lang.String)",
        "snippet": "    public YWithXIntervalTests(String name) {\n        super(name);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YWithXIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YWithXIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.YWithXIntervalTests.testEquals()",
        "snippet": "    public void testEquals() {\n        YWithXInterval i1 = new YWithXInterval(1.0, 0.5, 1.5);\n        YWithXInterval i2 = new YWithXInterval(1.0, 0.5, 1.5);\n        assertEquals(i1, i2);\n        \n        i1 = new YWithXInterval(1.1, 0.5, 1.5);\n        assertFalse(i1.equals(i2));\n        i2 = new YWithXInterval(1.1, 0.5, 1.5);\n        assertTrue(i1.equals(i2));\n\n        i1 = new YWithXInterval(1.1, 0.55, 1.5);\n        assertFalse(i1.equals(i2));\n        i2 = new YWithXInterval(1.1, 0.55, 1.5);\n        assertTrue(i1.equals(i2));\n    \n        i1 = new YWithXInterval(1.1, 0.55, 1.55);\n        assertFalse(i1.equals(i2));\n        i2 = new YWithXInterval(1.1, 0.55, 1.55);\n        assertTrue(i1.equals(i2));\n    }",
        "begin_line": 81,
        "end_line": 100,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 62)",
            "(line 83,col 9)-(line 83,col 62)",
            "(line 84,col 9)-(line 84,col 29)",
            "(line 86,col 9)-(line 86,col 47)",
            "(line 87,col 9)-(line 87,col 35)",
            "(line 88,col 9)-(line 88,col 47)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 91,col 9)-(line 91,col 48)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 48)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 96,col 49)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 49)",
            "(line 99,col 9)-(line 99,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YWithXIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YWithXIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.YWithXIntervalTests.testCloning()",
        "snippet": "    public void testCloning() {\n        YWithXInterval i1 = new YWithXInterval(1.0, 0.5, 1.5);\n        assertFalse(i1 instanceof Cloneable);\n    }",
        "begin_line": 105,
        "end_line": 108,
        "comment": "\n     * This class is immutable.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 62)",
            "(line 107,col 9)-(line 107,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.YWithXIntervalTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/YWithXIntervalTests.java",
        "signature": "org.jfree.data.xy.junit.YWithXIntervalTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        YWithXInterval i1 = new YWithXInterval(1.0, 0.5, 1.5);\n        YWithXInterval i2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(i1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            i2 = (YWithXInterval) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(i1, i2);\n    }",
        "begin_line": 113,
        "end_line": 132,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 62)",
            "(line 115,col 9)-(line 115,col 33)",
            "(line 117,col 9)-(line 130,col 9)",
            "(line 131,col 9)-(line 131,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesCollectionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(VectorSeriesCollectionTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesCollectionTests.VectorSeriesCollectionTests(java.lang.String)",
        "snippet": "    public VectorSeriesCollectionTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesCollectionTests.testEquals()",
        "snippet": "    public void testEquals() {\n        VectorSeries s1 = new VectorSeries(\"Series\");\n        s1.add(1.0, 1.1, 1.2, 1.3);\n        VectorSeriesCollection c1 = new VectorSeriesCollection();\n        c1.addSeries(s1);\n        VectorSeries s2 = new VectorSeries(\"Series\");\n        s2.add(1.0, 1.1, 1.2, 1.3);\n        VectorSeriesCollection c2 = new VectorSeriesCollection();\n        c2.addSeries(s2);\n        assertTrue(c1.equals(c2));\n        assertTrue(c2.equals(c1));\n\n        c1.addSeries(new VectorSeries(\"Empty Series\"));\n        assertFalse(c1.equals(c2));\n\n        c2.addSeries(new VectorSeries(\"Empty Series\"));\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 84,
        "end_line": 101,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 53)",
            "(line 86,col 9)-(line 86,col 35)",
            "(line 87,col 9)-(line 87,col 65)",
            "(line 88,col 9)-(line 88,col 25)",
            "(line 89,col 9)-(line 89,col 53)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 65)",
            "(line 92,col 9)-(line 92,col 25)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 96,col 55)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 99,col 9)-(line 99,col 55)",
            "(line 100,col 9)-(line 100,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesCollectionTests.testCloning()",
        "snippet": "    public void testCloning() {\n        VectorSeries s1 = new VectorSeries(\"Series\");\n        s1.add(1.0, 1.1, 1.2, 1.3);\n        VectorSeriesCollection c1 = new VectorSeriesCollection();\n        c1.addSeries(s1);\n        VectorSeriesCollection c2 = null;\n        try {\n            c2 = (VectorSeriesCollection) c1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n        \n        // check independence\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }",
        "begin_line": 106,
        "end_line": 125,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 53)",
            "(line 108,col 9)-(line 108,col 35)",
            "(line 109,col 9)-(line 109,col 65)",
            "(line 110,col 9)-(line 110,col 25)",
            "(line 111,col 9)-(line 111,col 41)",
            "(line 112,col 9)-(line 117,col 9)",
            "(line 118,col 9)-(line 118,col 29)",
            "(line 119,col 9)-(line 119,col 51)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 123,col 9)-(line 123,col 33)",
            "(line 124,col 9)-(line 124,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesCollectionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        VectorSeries s1 = new VectorSeries(\"Series\");\n        s1.add(1.0, 1.1, 1.2, 1.3);\n        VectorSeriesCollection c1 = new VectorSeriesCollection();\n        c1.addSeries(s1);\n        VectorSeriesCollection c2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            c2 = (VectorSeriesCollection) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n    }",
        "begin_line": 130,
        "end_line": 152,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 53)",
            "(line 132,col 9)-(line 132,col 35)",
            "(line 133,col 9)-(line 133,col 65)",
            "(line 134,col 9)-(line 134,col 25)",
            "(line 135,col 9)-(line 135,col 41)",
            "(line 137,col 9)-(line 150,col 9)",
            "(line 151,col 9)-(line 151,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.VectorSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/VectorSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.VectorSeriesCollectionTests.testRemoveSeries()",
        "snippet": "    public void testRemoveSeries() {\n        VectorSeries s1 = new VectorSeries(\"S1\");\n        VectorSeries s2 = new VectorSeries(\"S2\");\n        VectorSeriesCollection vsc = new VectorSeriesCollection();\n        vsc.addSeries(s1);\n        vsc.addSeries(s2);\n        assertEquals(2, vsc.getSeriesCount());\n        boolean b = vsc.removeSeries(s1);\n        assertTrue(b);\n        assertEquals(1, vsc.getSeriesCount());\n        assertEquals(\"S2\", vsc.getSeriesKey(0));\n        b = vsc.removeSeries(new VectorSeries(\"NotInDataset\"));\n        assertFalse(b);\n        assertEquals(1, vsc.getSeriesCount());\n        b = vsc.removeSeries(s2);\n        assertEquals(0, vsc.getSeriesCount());\n    }",
        "begin_line": 157,
        "end_line": 173,
        "comment": "\n     * Some checks for the removeSeries() method.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 49)",
            "(line 159,col 9)-(line 159,col 49)",
            "(line 160,col 9)-(line 160,col 66)",
            "(line 161,col 9)-(line 161,col 26)",
            "(line 162,col 9)-(line 162,col 26)",
            "(line 163,col 9)-(line 163,col 46)",
            "(line 164,col 9)-(line 164,col 41)",
            "(line 165,col 9)-(line 165,col 22)",
            "(line 166,col 9)-(line 166,col 46)",
            "(line 167,col 9)-(line 167,col 48)",
            "(line 168,col 9)-(line 168,col 63)",
            "(line 169,col 9)-(line 169,col 23)",
            "(line 170,col 9)-(line 170,col 46)",
            "(line 171,col 9)-(line 171,col 33)",
            "(line 172,col 9)-(line 172,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.IntervalXYDelegateTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/IntervalXYDelegateTests.java",
        "signature": "org.jfree.data.xy.junit.IntervalXYDelegateTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(IntervalXYDelegateTests.class);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.IntervalXYDelegateTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/IntervalXYDelegateTests.java",
        "signature": "org.jfree.data.xy.junit.IntervalXYDelegateTests.IntervalXYDelegateTests(java.lang.String)",
        "snippet": "    public IntervalXYDelegateTests(String name) {\n        super(name);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.IntervalXYDelegateTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/IntervalXYDelegateTests.java",
        "signature": "org.jfree.data.xy.junit.IntervalXYDelegateTests.testEquals()",
        "snippet": "    public void testEquals() {\n       XYSeries s1 = new XYSeries(\"Series\");\n       s1.add(1.2, 3.4);\n       XYSeriesCollection c1 = new XYSeriesCollection();\n       c1.addSeries(s1);\n       IntervalXYDelegate d1 = new IntervalXYDelegate(c1);\n\n       XYSeries s2 = new XYSeries(\"Series\");\n       XYSeriesCollection c2 = new XYSeriesCollection();\n       s2.add(1.2, 3.4);\n       c2.addSeries(s2);\n       IntervalXYDelegate d2 = new IntervalXYDelegate(c2);\n       \n       assertTrue(d1.equals(d2));\n       assertTrue(d2.equals(d1));\n       \n       d1.setAutoWidth(false);\n       assertFalse(d1.equals(d2));\n       d2.setAutoWidth(false);\n       assertTrue(d1.equals(d2));\n       \n       d1.setIntervalPositionFactor(0.123);\n       assertFalse(d1.equals(d2));\n       d2.setIntervalPositionFactor(0.123);\n       assertTrue(d1.equals(d2));\n      \n       d1.setFixedIntervalWidth(1.23);\n       assertFalse(d1.equals(d2));\n       d2.setFixedIntervalWidth(1.23);\n       assertTrue(d1.equals(d2));\n    }",
        "begin_line": 85,
        "end_line": 115,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 8)-(line 86,col 44)",
            "(line 87,col 8)-(line 87,col 24)",
            "(line 88,col 8)-(line 88,col 56)",
            "(line 89,col 8)-(line 89,col 24)",
            "(line 90,col 8)-(line 90,col 58)",
            "(line 92,col 8)-(line 92,col 44)",
            "(line 93,col 8)-(line 93,col 56)",
            "(line 94,col 8)-(line 94,col 24)",
            "(line 95,col 8)-(line 95,col 24)",
            "(line 96,col 8)-(line 96,col 58)",
            "(line 98,col 8)-(line 98,col 33)",
            "(line 99,col 8)-(line 99,col 33)",
            "(line 101,col 8)-(line 101,col 30)",
            "(line 102,col 8)-(line 102,col 34)",
            "(line 103,col 8)-(line 103,col 30)",
            "(line 104,col 8)-(line 104,col 33)",
            "(line 106,col 8)-(line 106,col 43)",
            "(line 107,col 8)-(line 107,col 34)",
            "(line 108,col 8)-(line 108,col 43)",
            "(line 109,col 8)-(line 109,col 33)",
            "(line 111,col 8)-(line 111,col 38)",
            "(line 112,col 8)-(line 112,col 34)",
            "(line 113,col 8)-(line 113,col 38)",
            "(line 114,col 8)-(line 114,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.IntervalXYDelegateTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/IntervalXYDelegateTests.java",
        "signature": "org.jfree.data.xy.junit.IntervalXYDelegateTests.testCloning()",
        "snippet": "    public void testCloning() {        \n        XYSeries s1 = new XYSeries(\"Series\");\n        s1.add(1.2, 3.4);\n        XYSeriesCollection c1 = new XYSeriesCollection();\n        c1.addSeries(s1);\n        IntervalXYDelegate d1 = new IntervalXYDelegate(c1);\n        \n        IntervalXYDelegate d2 = null;\n        try {\n            d2 = (IntervalXYDelegate) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 120,
        "end_line": 137,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 45)",
            "(line 122,col 9)-(line 122,col 25)",
            "(line 123,col 9)-(line 123,col 57)",
            "(line 124,col 9)-(line 124,col 25)",
            "(line 125,col 9)-(line 125,col 59)",
            "(line 127,col 9)-(line 127,col 37)",
            "(line 128,col 9)-(line 133,col 9)",
            "(line 134,col 9)-(line 134,col 29)",
            "(line 135,col 9)-(line 135,col 51)",
            "(line 136,col 9)-(line 136,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.IntervalXYDelegateTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/IntervalXYDelegateTests.java",
        "signature": "org.jfree.data.xy.junit.IntervalXYDelegateTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        XYSeries s1 = new XYSeries(\"Series\");\n        s1.add(1.2, 3.4);\n        XYSeriesCollection c1 = new XYSeriesCollection();\n        c1.addSeries(s1);\n        IntervalXYDelegate d1 = new IntervalXYDelegate(c1);\n        IntervalXYDelegate d2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (IntervalXYDelegate) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(d1, d2);\n\n    }",
        "begin_line": 142,
        "end_line": 166,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 45)",
            "(line 144,col 9)-(line 144,col 25)",
            "(line 145,col 9)-(line 145,col 57)",
            "(line 146,col 9)-(line 146,col 25)",
            "(line 147,col 9)-(line 147,col 59)",
            "(line 148,col 9)-(line 148,col 37)",
            "(line 149,col 9)-(line 163,col 9)",
            "(line 164,col 9)-(line 164,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesCollectionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYSeriesCollectionTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesCollectionTests.XYSeriesCollectionTests(java.lang.String)",
        "snippet": "    public XYSeriesCollectionTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesCollectionTests.testEquals()",
        "snippet": "    public void testEquals() {\n        XYSeries s1 = new XYSeries(\"Series\");\n        s1.add(1.0, 1.1);\n        XYSeriesCollection c1 = new XYSeriesCollection();\n        c1.addSeries(s1);\n        XYSeries s2 = new XYSeries(\"Series\");\n        s2.add(1.0, 1.1);\n        XYSeriesCollection c2 = new XYSeriesCollection();\n        c2.addSeries(s2);\n        assertTrue(c1.equals(c2));\n        assertTrue(c2.equals(c1));\n\n        c1.addSeries(new XYSeries(\"Empty Series\"));\n        assertFalse(c1.equals(c2));\n\n        c2.addSeries(new XYSeries(\"Empty Series\"));\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 88,
        "end_line": 105,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 45)",
            "(line 90,col 9)-(line 90,col 25)",
            "(line 91,col 9)-(line 91,col 57)",
            "(line 92,col 9)-(line 92,col 25)",
            "(line 93,col 9)-(line 93,col 45)",
            "(line 94,col 9)-(line 94,col 25)",
            "(line 95,col 9)-(line 95,col 57)",
            "(line 96,col 9)-(line 96,col 25)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 100,col 9)-(line 100,col 51)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 103,col 9)-(line 103,col 51)",
            "(line 104,col 9)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesCollectionTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYSeries s1 = new XYSeries(\"Series\");\n        s1.add(1.0, 1.1);\n        XYSeriesCollection c1 = new XYSeriesCollection();\n        c1.addSeries(s1);\n        XYSeriesCollection c2 = null;\n        try {\n            c2 = (XYSeriesCollection) c1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n        \n        // check independence\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }",
        "begin_line": 110,
        "end_line": 129,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 45)",
            "(line 112,col 9)-(line 112,col 25)",
            "(line 113,col 9)-(line 113,col 57)",
            "(line 114,col 9)-(line 114,col 25)",
            "(line 115,col 9)-(line 115,col 37)",
            "(line 116,col 9)-(line 121,col 9)",
            "(line 122,col 9)-(line 122,col 29)",
            "(line 123,col 9)-(line 123,col 51)",
            "(line 124,col 9)-(line 124,col 34)",
            "(line 127,col 9)-(line 127,col 33)",
            "(line 128,col 9)-(line 128,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesCollectionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        XYSeries s1 = new XYSeries(\"Series\");\n        s1.add(1.0, 1.1);\n        XYSeriesCollection c1 = new XYSeriesCollection();\n        c1.addSeries(s1);\n        XYSeriesCollection c2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            c2 = (XYSeriesCollection) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n    }",
        "begin_line": 134,
        "end_line": 156,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 45)",
            "(line 136,col 9)-(line 136,col 25)",
            "(line 137,col 9)-(line 137,col 57)",
            "(line 138,col 9)-(line 138,col 25)",
            "(line 139,col 9)-(line 139,col 37)",
            "(line 141,col 9)-(line 154,col 9)",
            "(line 155,col 9)-(line 155,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesCollectionTests.test1170825()",
        "snippet": "    public void test1170825() {\n        XYSeries s1 = new XYSeries(\"Series1\");\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(s1);\n        try {\n            /* XYSeries s = */ dataset.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            // correct outcome\n        }\n        catch (IndexOutOfBoundsException e) {\n            assertTrue(false);  // wrong outcome\n        }\n    }",
        "begin_line": 161,
        "end_line": 174,
        "comment": "\n     * A test for bug report 1170825.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 46)",
            "(line 163,col 9)-(line 163,col 62)",
            "(line 164,col 9)-(line 164,col 30)",
            "(line 165,col 9)-(line 173,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesCollectionTests.testGetSeries()",
        "snippet": "    public void testGetSeries() {\n        XYSeriesCollection c = new XYSeriesCollection();\n        XYSeries s1 = new XYSeries(\"s1\");\n        c.addSeries(s1);\n        assertEquals(\"s1\", c.getSeries(0).getKey());\n        \n        boolean pass = false;\n        try {\n            c.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            c.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 179,
        "end_line": 202,
        "comment": "\n     * Some basic checks for the getSeries() method.\n     ",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 56)",
            "(line 181,col 9)-(line 181,col 41)",
            "(line 182,col 9)-(line 182,col 24)",
            "(line 183,col 9)-(line 183,col 52)",
            "(line 185,col 9)-(line 185,col 29)",
            "(line 186,col 9)-(line 191,col 9)",
            "(line 192,col 9)-(line 192,col 25)",
            "(line 194,col 9)-(line 194,col 21)",
            "(line 195,col 9)-(line 200,col 9)",
            "(line 201,col 9)-(line 201,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesCollectionTests.testGetSeriesByKey()",
        "snippet": "    public void testGetSeriesByKey() {\n        XYSeriesCollection c = new XYSeriesCollection();\n        XYSeries s1 = new XYSeries(\"s1\");\n        c.addSeries(s1);\n        assertEquals(\"s1\", c.getSeries(\"s1\").getKey());\n        \n        boolean pass = false;\n        try {\n            c.getSeries(\"s2\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            c.getSeries(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass); \n    }",
        "begin_line": 207,
        "end_line": 230,
        "comment": "\n     * Some checks for the getSeries(Comparable) method.\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 56)",
            "(line 209,col 9)-(line 209,col 41)",
            "(line 210,col 9)-(line 210,col 24)",
            "(line 211,col 9)-(line 211,col 55)",
            "(line 213,col 9)-(line 213,col 29)",
            "(line 214,col 9)-(line 219,col 9)",
            "(line 220,col 9)-(line 220,col 25)",
            "(line 222,col 9)-(line 222,col 21)",
            "(line 223,col 9)-(line 228,col 9)",
            "(line 229,col 9)-(line 229,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesCollectionTests.testRemoveSeries()",
        "snippet": "    public void testRemoveSeries() {\n        XYSeriesCollection c = new XYSeriesCollection();\n        XYSeries s1 = new XYSeries(\"s1\");\n        c.addSeries(s1);\n        c.removeSeries(0);\n        assertEquals(0, c.getSeriesCount());\n        c.addSeries(s1);\n        \n        boolean pass = false;\n        try {\n            c.removeSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            c.removeSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 235,
        "end_line": 260,
        "comment": "\n     * Some basic checks for the removeSeries() method.\n     ",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 56)",
            "(line 237,col 9)-(line 237,col 41)",
            "(line 238,col 9)-(line 238,col 24)",
            "(line 239,col 9)-(line 239,col 26)",
            "(line 240,col 9)-(line 240,col 44)",
            "(line 241,col 9)-(line 241,col 24)",
            "(line 243,col 9)-(line 243,col 29)",
            "(line 244,col 9)-(line 249,col 9)",
            "(line 250,col 9)-(line 250,col 25)",
            "(line 252,col 9)-(line 252,col 21)",
            "(line 253,col 9)-(line 258,col 9)",
            "(line 259,col 9)-(line 259,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesCollectionTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesCollectionTests.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        XYSeries s1 = new XYSeries(\"S1\");\n        XYSeries s2 = new XYSeries(\"S2\");\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        assertEquals(-1, dataset.indexOf(s1));\n        assertEquals(-1, dataset.indexOf(s2));\n        \n        dataset.addSeries(s1);\n        assertEquals(0, dataset.indexOf(s1));\n        assertEquals(-1, dataset.indexOf(s2));\n        \n        dataset.addSeries(s2);\n        assertEquals(0, dataset.indexOf(s1));\n        assertEquals(1, dataset.indexOf(s2));\n        \n        dataset.removeSeries(s1);\n        assertEquals(-1, dataset.indexOf(s1));\n        assertEquals(0, dataset.indexOf(s2));\n        \n        XYSeries s2b = new XYSeries(\"S2\");\n        assertEquals(0, dataset.indexOf(s2b));\n    }",
        "begin_line": 265,
        "end_line": 286,
        "comment": "\n     * Some tests for the indexOf() method.\n     ",
        "child_ranges": [
            "(line 266,col 9)-(line 266,col 41)",
            "(line 267,col 9)-(line 267,col 41)",
            "(line 268,col 9)-(line 268,col 62)",
            "(line 269,col 9)-(line 269,col 46)",
            "(line 270,col 9)-(line 270,col 46)",
            "(line 272,col 9)-(line 272,col 30)",
            "(line 273,col 9)-(line 273,col 45)",
            "(line 274,col 9)-(line 274,col 46)",
            "(line 276,col 9)-(line 276,col 30)",
            "(line 277,col 9)-(line 277,col 45)",
            "(line 278,col 9)-(line 278,col 45)",
            "(line 280,col 9)-(line 280,col 33)",
            "(line 281,col 9)-(line 281,col 46)",
            "(line 282,col 9)-(line 282,col 45)",
            "(line 284,col 9)-(line 284,col 42)",
            "(line 285,col 9)-(line 285,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultKeyedValues2DDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultKeyedValues2DDatasetTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 69)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultKeyedValues2DDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests.DefaultKeyedValues2DDatasetTests(java.lang.String)",
        "snippet": "    public DefaultKeyedValues2DDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultKeyedValues2DDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultKeyedValues2DDataset d1 = new DefaultKeyedValues2DDataset();\n        d1.setValue(new Integer(1), \"V1\", \"C1\");\n        d1.setValue(null, \"V2\", \"C1\");\n        d1.setValue(new Integer(3), \"V3\", \"C2\");\n        DefaultKeyedValues2DDataset d2 = null;\n        try {\n            d2 = (DefaultKeyedValues2DDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 82,
        "end_line": 97,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 75)",
            "(line 84,col 9)-(line 84,col 48)",
            "(line 85,col 9)-(line 85,col 38)",
            "(line 86,col 9)-(line 86,col 48)",
            "(line 87,col 9)-(line 87,col 46)",
            "(line 88,col 9)-(line 93,col 9)",
            "(line 94,col 9)-(line 94,col 29)",
            "(line 95,col 9)-(line 95,col 51)",
            "(line 96,col 9)-(line 96,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultKeyedValues2DDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultKeyedValues2DDataset d1 = new DefaultKeyedValues2DDataset();\n        d1.addValue(new Double(234.2), \"Row1\", \"Col1\");\n        d1.addValue(null, \"Row1\", \"Col2\");\n        d1.addValue(new Double(345.9), \"Row2\", \"Col1\");\n        d1.addValue(new Double(452.7), \"Row2\", \"Col2\");\n\n        DefaultKeyedValues2DDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (DefaultKeyedValues2DDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(d1, d2);\n\n    }",
        "begin_line": 102,
        "end_line": 129,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 75)",
            "(line 105,col 9)-(line 105,col 55)",
            "(line 106,col 9)-(line 106,col 42)",
            "(line 107,col 9)-(line 107,col 55)",
            "(line 108,col 9)-(line 108,col 55)",
            "(line 110,col 9)-(line 110,col 46)",
            "(line 112,col 9)-(line 126,col 9)",
            "(line 127,col 9)-(line 127,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DatasetUtilitiesTests.class);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.DatasetUtilitiesTests(java.lang.String)",
        "snippet": "    public DatasetUtilitiesTests(String name) {\n        super(name);\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testJava()",
        "snippet": "    public void testJava() {\n        assertTrue(Double.isNaN(Math.min(1.0, Double.NaN)));   \n        assertTrue(Double.isNaN(Math.max(1.0, Double.NaN)));     \n    }",
        "begin_line": 93,
        "end_line": 96,
        "comment": "\n     * Some tests to verify that Java does what I think it does!\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 60)",
            "(line 95,col 9)-(line 95,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testCalculatePieDatasetTotal()",
        "snippet": "    public void testCalculatePieDatasetTotal() {\n        DefaultPieDataset d = new DefaultPieDataset();\n        assertEquals(0.0, DatasetUtilities.calculatePieDatasetTotal(d), \n                EPSILON);\n        d.setValue(\"A\", 1.0);\n        assertEquals(1.0, DatasetUtilities.calculatePieDatasetTotal(d), \n                EPSILON);\n        d.setValue(\"B\", 3.0);\n        assertEquals(4.0, DatasetUtilities.calculatePieDatasetTotal(d), \n                EPSILON); \n    }",
        "begin_line": 101,
        "end_line": 111,
        "comment": "\n     * Some tests for the calculatePieDatasetTotal() method.\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 54)",
            "(line 103,col 9)-(line 104,col 25)",
            "(line 105,col 9)-(line 105,col 29)",
            "(line 106,col 9)-(line 107,col 25)",
            "(line 108,col 9)-(line 108,col 29)",
            "(line 109,col 9)-(line 110,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindDomainBounds()",
        "snippet": "    public void testFindDomainBounds() {\n        XYDataset dataset = createXYDataset1();\n        Range r = DatasetUtilities.findDomainBounds(dataset);\n        assertEquals(1.0, r.getLowerBound(), EPSILON);\n        assertEquals(3.0, r.getUpperBound(), EPSILON);\n    }",
        "begin_line": 116,
        "end_line": 121,
        "comment": "\n     * Some tests for the findDomainBounds() method.\n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 47)",
            "(line 118,col 9)-(line 118,col 61)",
            "(line 119,col 9)-(line 119,col 54)",
            "(line 120,col 9)-(line 120,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateDomainBounds()",
        "snippet": "    public void testIterateDomainBounds() {\n        XYDataset dataset = createXYDataset1();\n        Range r = DatasetUtilities.iterateDomainBounds(dataset);\n        assertEquals(1.0, r.getLowerBound(), EPSILON);\n        assertEquals(3.0, r.getUpperBound(), EPSILON);           \n    }",
        "begin_line": 126,
        "end_line": 131,
        "comment": "\n     * Some tests for the iterateDomainBounds() method.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 47)",
            "(line 128,col 9)-(line 128,col 64)",
            "(line 129,col 9)-(line 129,col 54)",
            "(line 130,col 9)-(line 130,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindRangeBounds1()",
        "snippet": "    public void testFindRangeBounds1() {\n        CategoryDataset dataset = createCategoryDataset1();\n        Range r = DatasetUtilities.findRangeBounds(dataset);\n        assertEquals(1.0, r.getLowerBound(), EPSILON);\n        assertEquals(6.0, r.getUpperBound(), EPSILON);\n    }",
        "begin_line": 136,
        "end_line": 141,
        "comment": "\n     * Some tests for the findRangeExtent() method.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 59)",
            "(line 138,col 9)-(line 138,col 60)",
            "(line 139,col 9)-(line 139,col 54)",
            "(line 140,col 9)-(line 140,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindRangeBounds2()",
        "snippet": "    public void testFindRangeBounds2() {\n        XYDataset dataset = createXYDataset1();\n        Range r = DatasetUtilities.findRangeBounds(dataset);\n        assertEquals(100.0, r.getLowerBound(), EPSILON);\n        assertEquals(105.0, r.getUpperBound(), EPSILON);\n    }",
        "begin_line": 146,
        "end_line": 151,
        "comment": "\n     * Some tests for the findRangeBounds() method.\n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 47)",
            "(line 148,col 9)-(line 148,col 60)",
            "(line 149,col 9)-(line 149,col 56)",
            "(line 150,col 9)-(line 150,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateCategoryRangeBounds()",
        "snippet": "    public void testIterateCategoryRangeBounds() {\n        CategoryDataset dataset = createCategoryDataset1();\n//        Range r = DatasetUtilities.iterateCategoryRangeBounds(dataset, false);\n//        assertEquals(1.0, r.getLowerBound(), EPSILON);\n//        assertEquals(6.0, r.getUpperBound(), EPSILON);           \n    }",
        "begin_line": 156,
        "end_line": 161,
        "comment": "\n     * Some tests for the iterateCategoryRangeBounds() method.\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateXYRangeBounds()",
        "snippet": "    public void testIterateXYRangeBounds() {\n        XYDataset dataset = createXYDataset1();\n//        Range r = DatasetUtilities.iterateXYRangeBounds(dataset);\n//        assertEquals(100.0, r.getLowerBound(), EPSILON);\n//        assertEquals(105.0, r.getUpperBound(), EPSILON);           \n    }",
        "begin_line": 166,
        "end_line": 171,
        "comment": "\n     * Some tests for the iterateXYRangeBounds() method.\n     ",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateXYRangeBounds2()",
        "snippet": "    public void testIterateXYRangeBounds2() {\n        XYSeries s1 = new XYSeries(\"S1\");\n        s1.add(1.0, 1.1);\n        s1.add(2.0, null);\n        s1.add(3.0, 3.3);\n        XYSeriesCollection dataset = new XYSeriesCollection(s1);\n//        Range r = DatasetUtilities.iterateXYRangeBounds(dataset);\n//        assertEquals(1.1, r.getLowerBound(), EPSILON);\n//        assertEquals(3.3, r.getUpperBound(), EPSILON);\n    }",
        "begin_line": 176,
        "end_line": 185,
        "comment": "\n     * Check the range returned when a series contains a null value.\n     ",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 41)",
            "(line 178,col 9)-(line 178,col 25)",
            "(line 179,col 9)-(line 179,col 26)",
            "(line 180,col 9)-(line 180,col 25)",
            "(line 181,col 9)-(line 181,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMinimumDomainValue()",
        "snippet": "    public void testFindMinimumDomainValue() {\n        XYDataset dataset = createXYDataset1();\n        Number minimum = DatasetUtilities.findMinimumDomainValue(dataset);\n        assertEquals(new Double(1.0), minimum);\n    }",
        "begin_line": 190,
        "end_line": 194,
        "comment": "\n     * Some tests for the findMinimumDomainValue() method.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 47)",
            "(line 192,col 9)-(line 192,col 74)",
            "(line 193,col 9)-(line 193,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMaximumDomainValue()",
        "snippet": "    public void testFindMaximumDomainValue() {\n        XYDataset dataset = createXYDataset1();\n        Number maximum = DatasetUtilities.findMaximumDomainValue(dataset);\n        assertEquals(new Double(3.0), maximum);\n    }",
        "begin_line": 199,
        "end_line": 203,
        "comment": "\n     * Some tests for the findMaximumDomainValue() method.\n     ",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 47)",
            "(line 201,col 9)-(line 201,col 74)",
            "(line 202,col 9)-(line 202,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMinimumRangeValue()",
        "snippet": "    public void testFindMinimumRangeValue() {\n        CategoryDataset d1 = createCategoryDataset1();\n        Number min1 = DatasetUtilities.findMinimumRangeValue(d1);\n        assertEquals(new Double(1.0), min1);\n        \n        XYDataset d2 = createXYDataset1();\n        Number min2 = DatasetUtilities.findMinimumRangeValue(d2);\n        assertEquals(new Double(100.0), min2);        \n    }",
        "begin_line": 208,
        "end_line": 216,
        "comment": "\n     * Some tests for the findMinimumRangeValue() method.\n     ",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 54)",
            "(line 210,col 9)-(line 210,col 65)",
            "(line 211,col 9)-(line 211,col 44)",
            "(line 213,col 9)-(line 213,col 42)",
            "(line 214,col 9)-(line 214,col 65)",
            "(line 215,col 9)-(line 215,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMaximumRangeValue()",
        "snippet": "    public void testFindMaximumRangeValue() {\n        CategoryDataset d1 = createCategoryDataset1();\n        Number max1 = DatasetUtilities.findMaximumRangeValue(d1);\n        assertEquals(new Double(6.0), max1);\n\n        XYDataset dataset = createXYDataset1();\n        Number maximum = DatasetUtilities.findMaximumRangeValue(dataset);\n        assertEquals(new Double(105.0), maximum);\n    }",
        "begin_line": 221,
        "end_line": 229,
        "comment": "\n     * Some tests for the findMaximumRangeValue() method.\n     ",
        "child_ranges": [
            "(line 222,col 9)-(line 222,col 54)",
            "(line 223,col 9)-(line 223,col 65)",
            "(line 224,col 9)-(line 224,col 44)",
            "(line 226,col 9)-(line 226,col 47)",
            "(line 227,col 9)-(line 227,col 73)",
            "(line 228,col 9)-(line 228,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testMinMaxRange()",
        "snippet": "    public void testMinMaxRange() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.addValue(100.0, \"Series 1\", \"Type 1\");\n        dataset.addValue(101.1, \"Series 1\", \"Type 2\");\n        Number min = DatasetUtilities.findMinimumRangeValue(dataset);\n        assertTrue(min.doubleValue() < 100.1);\n        Number max = DatasetUtilities.findMaximumRangeValue(dataset);\n        assertTrue(max.doubleValue() > 101.0);\n    }",
        "begin_line": 234,
        "end_line": 242,
        "comment": "\n     * A quick test of the min and max range value methods.\n     ",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 70)",
            "(line 236,col 9)-(line 236,col 54)",
            "(line 237,col 9)-(line 237,col 54)",
            "(line 238,col 9)-(line 238,col 69)",
            "(line 239,col 9)-(line 239,col 46)",
            "(line 240,col 9)-(line 240,col 69)",
            "(line 241,col 9)-(line 241,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.test803660()",
        "snippet": "    public void test803660() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.addValue(100.0, \"Series 1\", \"Type 1\");\n        dataset.addValue(101.1, \"Series 1\", \"Type 2\");\n        Number n = DatasetUtilities.findMaximumRangeValue(dataset);\n        assertTrue(n.doubleValue() > 101.0);\n    }",
        "begin_line": 247,
        "end_line": 253,
        "comment": "\n     * A test to reproduce bug report 803660.\n     ",
        "child_ranges": [
            "(line 248,col 9)-(line 248,col 70)",
            "(line 249,col 9)-(line 249,col 54)",
            "(line 250,col 9)-(line 250,col 54)",
            "(line 251,col 9)-(line 251,col 67)",
            "(line 252,col 9)-(line 252,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testCumulativeRange1()",
        "snippet": "    public void testCumulativeRange1() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.addValue(10.0, \"Series 1\", \"Start\");\n        dataset.addValue(15.0, \"Series 1\", \"Delta 1\");\n        dataset.addValue(-7.0, \"Series 1\", \"Delta 2\");\n        Range range = DatasetUtilities.findCumulativeRangeBounds(dataset);\n        assertEquals(0.0, range.getLowerBound(), 0.00000001);\n        assertEquals(25.0, range.getUpperBound(), 0.00000001);\n    }",
        "begin_line": 260,
        "end_line": 268,
        "comment": "\n     * A simple test for the cumulative range calculation.  The sequence of \n     * \"cumulative\" values are considered to be { 0.0, 10.0, 25.0, 18.0 } so \n     * the range should be 0.0 -> 25.0.\n     ",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 70)",
            "(line 262,col 9)-(line 262,col 52)",
            "(line 263,col 9)-(line 263,col 54)",
            "(line 264,col 9)-(line 264,col 54)",
            "(line 265,col 9)-(line 265,col 74)",
            "(line 266,col 9)-(line 266,col 61)",
            "(line 267,col 9)-(line 267,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testCumulativeRange2()",
        "snippet": "    public void testCumulativeRange2() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.addValue(-21.4, \"Series 1\", \"Start Value\");\n        dataset.addValue(11.57, \"Series 1\", \"Delta 1\");\n        dataset.addValue(3.51, \"Series 1\", \"Delta 2\");\n        dataset.addValue(-12.36, \"Series 1\", \"Delta 3\");\n        dataset.addValue(3.39, \"Series 1\", \"Delta 4\");\n        dataset.addValue(38.68, \"Series 1\", \"Delta 5\");\n        dataset.addValue(-43.31, \"Series 1\", \"Delta 6\");\n        dataset.addValue(-29.59, \"Series 1\", \"Delta 7\");\n        dataset.addValue(35.30, \"Series 1\", \"Delta 8\");\n        dataset.addValue(5.0, \"Series 1\", \"Delta 9\");\n        Range range = DatasetUtilities.findCumulativeRangeBounds(dataset);\n        assertEquals(-49.51, range.getLowerBound(), 0.00000001);\n        assertEquals(23.39, range.getUpperBound(), 0.00000001);\n    }",
        "begin_line": 273,
        "end_line": 288,
        "comment": "\n     * A further test for the cumulative range calculation.\n     ",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 70)",
            "(line 275,col 9)-(line 275,col 59)",
            "(line 276,col 9)-(line 276,col 55)",
            "(line 277,col 9)-(line 277,col 54)",
            "(line 278,col 9)-(line 278,col 56)",
            "(line 279,col 9)-(line 279,col 54)",
            "(line 280,col 9)-(line 280,col 55)",
            "(line 281,col 9)-(line 281,col 56)",
            "(line 282,col 9)-(line 282,col 56)",
            "(line 283,col 9)-(line 283,col 55)",
            "(line 284,col 9)-(line 284,col 53)",
            "(line 285,col 9)-(line 285,col 74)",
            "(line 286,col 9)-(line 286,col 64)",
            "(line 287,col 9)-(line 287,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testCreateCategoryDataset1()",
        "snippet": "    public void testCreateCategoryDataset1() {\n        String[] rowKeys = {\"R1\", \"R2\", \"R3\"};\n        String[] columnKeys = {\"C1\", \"C2\"};\n        double[][] data = new double[3][];\n        data[0] = new double[] {1.1, 1.2};\n        data[1] = new double[] {2.1, 2.2};\n        data[2] = new double[] {3.1, 3.2};\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\n                rowKeys, columnKeys, data);\n        assertTrue(dataset.getRowCount() == 3);\n        assertTrue(dataset.getColumnCount() == 2);\n    }",
        "begin_line": 293,
        "end_line": 304,
        "comment": "\n     * Test the creation of a dataset from an array.\n     ",
        "child_ranges": [
            "(line 294,col 9)-(line 294,col 46)",
            "(line 295,col 9)-(line 295,col 43)",
            "(line 296,col 9)-(line 296,col 42)",
            "(line 297,col 9)-(line 297,col 42)",
            "(line 298,col 9)-(line 298,col 42)",
            "(line 299,col 9)-(line 299,col 42)",
            "(line 300,col 9)-(line 301,col 43)",
            "(line 302,col 9)-(line 302,col 47)",
            "(line 303,col 9)-(line 303,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testCreateCategoryDataset2()",
        "snippet": "    public void testCreateCategoryDataset2() {\n        boolean pass = false;\n        String[] rowKeys = {\"R1\", \"R2\", \"R3\"};\n        String[] columnKeys = {\"C1\", \"C2\"};\n        double[][] data = new double[2][];\n        data[0] = new double[] {1.1, 1.2, 1.3};\n        data[1] = new double[] {2.1, 2.2, 2.3};\n        CategoryDataset dataset = null;\n        try {\n            dataset = DatasetUtilities.createCategoryDataset(rowKeys, \n                    columnKeys, data);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;  // got it!\n        }\n        assertTrue(pass);\n        assertTrue(dataset == null);\n    }",
        "begin_line": 310,
        "end_line": 327,
        "comment": "\n     * Test the creation of a dataset from an array.  This time is should fail \n     * because the array dimensions are around the wrong way.\n     ",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 29)",
            "(line 312,col 9)-(line 312,col 46)",
            "(line 313,col 9)-(line 313,col 43)",
            "(line 314,col 9)-(line 314,col 42)",
            "(line 315,col 9)-(line 315,col 47)",
            "(line 316,col 9)-(line 316,col 47)",
            "(line 317,col 9)-(line 317,col 39)",
            "(line 318,col 9)-(line 324,col 9)",
            "(line 325,col 9)-(line 325,col 25)",
            "(line 326,col 9)-(line 326,col 36)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testMaximumStackedRangeValue()",
        "snippet": "    public void testMaximumStackedRangeValue() {\n        double v1 = 24.3;\n        double v2 = 14.2;\n        double v3 = 33.2;\n        double v4 = 32.4;\n        double v5 = 26.3;\n        double v6 = 22.6;\n        Number answer = new Double(Math.max(v1 + v2 + v3, v4 + v5 + v6));\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(v1, \"Row 0\", \"Column 0\");\n        d.addValue(v2, \"Row 1\", \"Column 0\");\n        d.addValue(v3, \"Row 2\", \"Column 0\");\n        d.addValue(v4, \"Row 0\", \"Column 1\");\n        d.addValue(v5, \"Row 1\", \"Column 1\");\n        d.addValue(v6, \"Row 2\", \"Column 1\");\n        Number max = DatasetUtilities.findMaximumStackedRangeValue(d);\n        assertTrue(max.equals(answer));\n    }",
        "begin_line": 334,
        "end_line": 351,
        "comment": "\n     * Test for a bug reported in the forum:\n     * \n     * http://www.jfree.org/phpBB2/viewtopic.php?t=7903\n     ",
        "child_ranges": [
            "(line 335,col 9)-(line 335,col 25)",
            "(line 336,col 9)-(line 336,col 25)",
            "(line 337,col 9)-(line 337,col 25)",
            "(line 338,col 9)-(line 338,col 25)",
            "(line 339,col 9)-(line 339,col 25)",
            "(line 340,col 9)-(line 340,col 25)",
            "(line 341,col 9)-(line 341,col 73)",
            "(line 342,col 9)-(line 342,col 64)",
            "(line 343,col 9)-(line 343,col 44)",
            "(line 344,col 9)-(line 344,col 44)",
            "(line 345,col 9)-(line 345,col 44)",
            "(line 346,col 9)-(line 346,col 44)",
            "(line 347,col 9)-(line 347,col 44)",
            "(line 348,col 9)-(line 348,col 44)",
            "(line 349,col 9)-(line 349,col 70)",
            "(line 350,col 9)-(line 350,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindStackedRangeBoundsForCategoryDataset1()",
        "snippet": "    public void testFindStackedRangeBoundsForCategoryDataset1() {\n        CategoryDataset d1 = createCategoryDataset1();\n        Range r = DatasetUtilities.findStackedRangeBounds(d1);\n        assertEquals(0.0, r.getLowerBound(), EPSILON);\n        assertEquals(15.0, r.getUpperBound(), EPSILON);\n        \n        d1 = createCategoryDataset2();\n        r = DatasetUtilities.findStackedRangeBounds(d1);\n        assertEquals(-2.0, r.getLowerBound(), EPSILON);\n        assertEquals(2.0, r.getUpperBound(), EPSILON);     \n    }",
        "begin_line": 356,
        "end_line": 366,
        "comment": "\n     * Some checks for the findStackedRangeBounds() method.\n     ",
        "child_ranges": [
            "(line 357,col 9)-(line 357,col 54)",
            "(line 358,col 9)-(line 358,col 62)",
            "(line 359,col 9)-(line 359,col 54)",
            "(line 360,col 9)-(line 360,col 55)",
            "(line 362,col 9)-(line 362,col 38)",
            "(line 363,col 9)-(line 363,col 56)",
            "(line 364,col 9)-(line 364,col 55)",
            "(line 365,col 9)-(line 365,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindStackedRangeBoundsForCategoryDataset2()",
        "snippet": "    public void testFindStackedRangeBoundsForCategoryDataset2() {\n        CategoryDataset d1 = new DefaultCategoryDataset();\n        Range r = DatasetUtilities.findStackedRangeBounds(d1);\n        assertTrue(r == null);     \n    }",
        "begin_line": 371,
        "end_line": 375,
        "comment": "\n     * Some checks for the findStackedRangeBounds() method.\n     ",
        "child_ranges": [
            "(line 372,col 9)-(line 372,col 58)",
            "(line 373,col 9)-(line 373,col 62)",
            "(line 374,col 9)-(line 374,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindStackedRangeBoundsForTableXYDataset1()",
        "snippet": "    public void testFindStackedRangeBoundsForTableXYDataset1() {\n        TableXYDataset d2 = createTableXYDataset1();\n        Range r = DatasetUtilities.findStackedRangeBounds(d2);\n        assertEquals(-2.0, r.getLowerBound(), EPSILON);\n        assertEquals(2.0, r.getUpperBound(), EPSILON);        \n    }",
        "begin_line": 380,
        "end_line": 385,
        "comment": "\n     * Some checks for the findStackedRangeBounds() method.\n     ",
        "child_ranges": [
            "(line 381,col 9)-(line 381,col 52)",
            "(line 382,col 9)-(line 382,col 62)",
            "(line 383,col 9)-(line 383,col 55)",
            "(line 384,col 9)-(line 384,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindStackedRangeBoundsForTableXYDataset2()",
        "snippet": "    public void testFindStackedRangeBoundsForTableXYDataset2() {\n        DefaultTableXYDataset d = new DefaultTableXYDataset();\n        Range r = DatasetUtilities.findStackedRangeBounds(d);\n        assertEquals(r, new Range(0.0, 0.0));\n    }",
        "begin_line": 390,
        "end_line": 394,
        "comment": "\n     * Some checks for the findStackedRangeBounds() method.\n     ",
        "child_ranges": [
            "(line 391,col 9)-(line 391,col 62)",
            "(line 392,col 9)-(line 392,col 61)",
            "(line 393,col 9)-(line 393,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testStackedRangeWithMap()",
        "snippet": "    public void testStackedRangeWithMap() {\n        CategoryDataset d = createCategoryDataset1();\n        KeyToGroupMap map = new KeyToGroupMap(\"G0\");\n        map.mapKeyToGroup(\"R2\", \"G1\");\n        Range r = DatasetUtilities.findStackedRangeBounds(d, map);\n        assertEquals(0.0, r.getLowerBound(), EPSILON);\n        assertEquals(9.0, r.getUpperBound(), EPSILON);        \n    }",
        "begin_line": 399,
        "end_line": 406,
        "comment": "\n     * Tests the stacked range extent calculation.\n     ",
        "child_ranges": [
            "(line 400,col 9)-(line 400,col 53)",
            "(line 401,col 9)-(line 401,col 52)",
            "(line 402,col 9)-(line 402,col 38)",
            "(line 403,col 9)-(line 403,col 66)",
            "(line 404,col 9)-(line 404,col 54)",
            "(line 405,col 9)-(line 405,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIsEmptyOrNullXYDataset()",
        "snippet": "    public void testIsEmptyOrNullXYDataset() {\n        XYSeriesCollection dataset = null;\n        assertTrue(DatasetUtilities.isEmptyOrNull(dataset));\n        dataset = new XYSeriesCollection();\n        assertTrue(DatasetUtilities.isEmptyOrNull(dataset));\n        XYSeries s1 = new XYSeries(\"S1\");\n        dataset.addSeries(s1);\n        assertTrue(DatasetUtilities.isEmptyOrNull(dataset));\n        s1.add(1.0, 2.0);\n        assertFalse(DatasetUtilities.isEmptyOrNull(dataset));\n        s1.clear();\n        assertTrue(DatasetUtilities.isEmptyOrNull(dataset));\n    }",
        "begin_line": 411,
        "end_line": 423,
        "comment": "\n     * Some checks for the isEmptyOrNull(XYDataset) method.\n     ",
        "child_ranges": [
            "(line 412,col 9)-(line 412,col 42)",
            "(line 413,col 9)-(line 413,col 60)",
            "(line 414,col 9)-(line 414,col 43)",
            "(line 415,col 9)-(line 415,col 60)",
            "(line 416,col 9)-(line 416,col 41)",
            "(line 417,col 9)-(line 417,col 30)",
            "(line 418,col 9)-(line 418,col 60)",
            "(line 419,col 9)-(line 419,col 25)",
            "(line 420,col 9)-(line 420,col 61)",
            "(line 421,col 9)-(line 421,col 19)",
            "(line 422,col 9)-(line 422,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testLimitPieDataset()",
        "snippet": "    public void testLimitPieDataset() {\n        \n        // check that empty dataset is handled OK\n        DefaultPieDataset d1 = new DefaultPieDataset();\n        PieDataset d2 = DatasetUtilities.createConsolidatedPieDataset(d1, \n                \"Other\", 0.05);\n        assertEquals(0, d2.getItemCount());\n        \n        // check that minItem limit is observed\n        d1.setValue(\"Item 1\", 1.0);\n        d1.setValue(\"Item 2\", 49.50);\n        d1.setValue(\"Item 3\", 49.50);\n        d2 = DatasetUtilities.createConsolidatedPieDataset(d1, \"Other\", 0.05);\n        assertEquals(3, d2.getItemCount());\n        assertEquals(\"Item 1\", d2.getKey(0));\n        assertEquals(\"Item 2\", d2.getKey(1));\n        assertEquals(\"Item 3\", d2.getKey(2));\n\n        // check that minItem limit is observed\n        d1.setValue(\"Item 4\", 1.0);\n        d2 = DatasetUtilities.createConsolidatedPieDataset(d1, \"Other\", 0.05, \n                2);\n        \n        // and that simple aggregation works\n        assertEquals(3, d2.getItemCount());\n        assertEquals(\"Item 2\", d2.getKey(0));\n        assertEquals(\"Item 3\", d2.getKey(1));\n        assertEquals(\"Other\", d2.getKey(2));\n        assertEquals(new Double(2.0), d2.getValue(\"Other\"));\n        \n    }",
        "begin_line": 428,
        "end_line": 458,
        "comment": "\n     * Some checks for the limitPieDataset() methods.\n     ",
        "child_ranges": [
            "(line 431,col 9)-(line 431,col 55)",
            "(line 432,col 9)-(line 433,col 31)",
            "(line 434,col 9)-(line 434,col 43)",
            "(line 437,col 9)-(line 437,col 35)",
            "(line 438,col 9)-(line 438,col 37)",
            "(line 439,col 9)-(line 439,col 37)",
            "(line 440,col 9)-(line 440,col 78)",
            "(line 441,col 9)-(line 441,col 43)",
            "(line 442,col 9)-(line 442,col 45)",
            "(line 443,col 9)-(line 443,col 45)",
            "(line 444,col 9)-(line 444,col 45)",
            "(line 447,col 9)-(line 447,col 35)",
            "(line 448,col 9)-(line 449,col 19)",
            "(line 452,col 9)-(line 452,col 43)",
            "(line 453,col 9)-(line 453,col 45)",
            "(line 454,col 9)-(line 454,col 45)",
            "(line 455,col 9)-(line 455,col 44)",
            "(line 456,col 9)-(line 456,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.createCategoryDataset1()",
        "snippet": "    private CategoryDataset createCategoryDataset1() {\n        DefaultCategoryDataset result = new DefaultCategoryDataset();\n        result.addValue(1.0, \"R0\", \"C0\");\n        result.addValue(1.0, \"R1\", \"C0\");\n        result.addValue(1.0, \"R2\", \"C0\");\n        result.addValue(4.0, \"R0\", \"C1\");\n        result.addValue(5.0, \"R1\", \"C1\");\n        result.addValue(6.0, \"R2\", \"C1\");\n        return result;\n    }",
        "begin_line": 465,
        "end_line": 474,
        "comment": "\n     * Creates a dataset for testing. \n     * \n     * @return A dataset.\n     ",
        "child_ranges": [
            "(line 466,col 9)-(line 466,col 69)",
            "(line 467,col 9)-(line 467,col 41)",
            "(line 468,col 9)-(line 468,col 41)",
            "(line 469,col 9)-(line 469,col 41)",
            "(line 470,col 9)-(line 470,col 41)",
            "(line 471,col 9)-(line 471,col 41)",
            "(line 472,col 9)-(line 472,col 41)",
            "(line 473,col 9)-(line 473,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.createCategoryDataset2()",
        "snippet": "    private CategoryDataset createCategoryDataset2() {\n        DefaultCategoryDataset result = new DefaultCategoryDataset();\n        result.addValue(1.0, \"R0\", \"C0\");\n        result.addValue(-2.0, \"R1\", \"C0\");\n        result.addValue(2.0, \"R0\", \"C1\");\n        result.addValue(-1.0, \"R1\", \"C1\");\n        return result;\n    }",
        "begin_line": 481,
        "end_line": 488,
        "comment": "\n     * Creates a dataset for testing. \n     * \n     * @return A dataset.\n     ",
        "child_ranges": [
            "(line 482,col 9)-(line 482,col 69)",
            "(line 483,col 9)-(line 483,col 41)",
            "(line 484,col 9)-(line 484,col 42)",
            "(line 485,col 9)-(line 485,col 41)",
            "(line 486,col 9)-(line 486,col 42)",
            "(line 487,col 9)-(line 487,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.createXYDataset1()",
        "snippet": "    private XYDataset createXYDataset1() {\n        XYSeries series1 = new XYSeries(\"S1\");\n        series1.add(1.0, 100.0);\n        series1.add(2.0, 101.0);\n        series1.add(3.0, 102.0);\n        XYSeries series2 = new XYSeries(\"S2\");\n        series2.add(1.0, 103.0);\n        series2.add(2.0, null);\n        series2.add(3.0, 105.0);\n        XYSeriesCollection result = new XYSeriesCollection();\n        result.addSeries(series1);\n        result.addSeries(series2);\n        result.setIntervalWidth(0.0);\n        return result;\n    }",
        "begin_line": 496,
        "end_line": 510,
        "comment": "\n     * Creates a dataset for testing.\n     * \n     * @return A dataset.\n     ",
        "child_ranges": [
            "(line 497,col 9)-(line 497,col 46)",
            "(line 498,col 9)-(line 498,col 32)",
            "(line 499,col 9)-(line 499,col 32)",
            "(line 500,col 9)-(line 500,col 32)",
            "(line 501,col 9)-(line 501,col 46)",
            "(line 502,col 9)-(line 502,col 32)",
            "(line 503,col 9)-(line 503,col 31)",
            "(line 504,col 9)-(line 504,col 32)",
            "(line 505,col 9)-(line 505,col 61)",
            "(line 506,col 9)-(line 506,col 34)",
            "(line 507,col 9)-(line 507,col 34)",
            "(line 508,col 9)-(line 508,col 37)",
            "(line 509,col 9)-(line 509,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
        "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.createTableXYDataset1()",
        "snippet": "    private TableXYDataset createTableXYDataset1() {\n        DefaultTableXYDataset dataset = new DefaultTableXYDataset();\n        \n        XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n        s1.add(1.0, 1.0);\n        s1.add(2.0, 2.0);\n        dataset.addSeries(s1);\n        \n        XYSeries s2 = new XYSeries(\"Series 2\", true, false);\n        s2.add(1.0, -2.0);\n        s2.add(2.0, -1.0);\n        dataset.addSeries(s2);\n        \n        return dataset;  \n    }",
        "begin_line": 517,
        "end_line": 531,
        "comment": "\n     * Creates a sample dataset for testing purposes.\n     * \n     * @return A sample dataset.\n     ",
        "child_ranges": [
            "(line 518,col 9)-(line 518,col 68)",
            "(line 520,col 9)-(line 520,col 60)",
            "(line 521,col 9)-(line 521,col 25)",
            "(line 522,col 9)-(line 522,col 25)",
            "(line 523,col 9)-(line 523,col 30)",
            "(line 525,col 9)-(line 525,col 60)",
            "(line 526,col 9)-(line 526,col 26)",
            "(line 527,col 9)-(line 527,col 26)",
            "(line 528,col 9)-(line 528,col 30)",
            "(line 530,col 9)-(line 530,col 23)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultPieDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultPieDatasetTests.datasetChanged(org.jfree.data.general.DatasetChangeEvent)",
        "snippet": "    public void datasetChanged(DatasetChangeEvent event) {\n        this.lastEvent = event;\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultPieDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultPieDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultPieDatasetTests.class);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultPieDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultPieDatasetTests.DefaultPieDatasetTests(java.lang.String)",
        "snippet": "    public DefaultPieDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultPieDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultPieDatasetTests.testClear()",
        "snippet": "    public void testClear() {\n        DefaultPieDataset d = new DefaultPieDataset();\n        d.addChangeListener(this);\n        // no event is generated if the dataset is already empty\n        d.clear();\n        assertNull(this.lastEvent);\n        d.setValue(\"A\", 1.0);\n        assertEquals(1, d.getItemCount());\n        this.lastEvent = null;\n        d.clear();\n        assertNotNull(this.lastEvent);\n        assertEquals(0, d.getItemCount());\n    }",
        "begin_line": 93,
        "end_line": 105,
        "comment": "\n     * Some tests for the clear() method.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 54)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 97,col 9)-(line 97,col 18)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 29)",
            "(line 100,col 9)-(line 100,col 42)",
            "(line 101,col 9)-(line 101,col 30)",
            "(line 102,col 9)-(line 102,col 18)",
            "(line 103,col 9)-(line 103,col 38)",
            "(line 104,col 9)-(line 104,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultPieDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultPieDatasetTests.testGetKey()",
        "snippet": "    public void testGetKey() {\n        DefaultPieDataset d = new DefaultPieDataset();\n        d.setValue(\"A\", 1.0);\n        d.setValue(\"B\", 2.0);\n        assertEquals(\"A\", d.getKey(0));\n        assertEquals(\"B\", d.getKey(1));\n        \n        boolean pass = false;\n        try {\n            d.getKey(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            d.getKey(2);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 110,
        "end_line": 134,
        "comment": "\n     * Some checks for the getKey(int) method.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 54)",
            "(line 112,col 9)-(line 112,col 29)",
            "(line 113,col 9)-(line 113,col 29)",
            "(line 114,col 9)-(line 114,col 39)",
            "(line 115,col 9)-(line 115,col 39)",
            "(line 117,col 9)-(line 117,col 29)",
            "(line 118,col 9)-(line 123,col 9)",
            "(line 124,col 9)-(line 124,col 25)",
            "(line 126,col 9)-(line 126,col 21)",
            "(line 127,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 133,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultPieDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultPieDatasetTests.testGetIndex()",
        "snippet": "    public void testGetIndex() {\n        DefaultPieDataset d = new DefaultPieDataset();\n        d.setValue(\"A\", 1.0);\n        d.setValue(\"B\", 2.0);\n        assertEquals(0, d.getIndex(\"A\"));\n        assertEquals(1, d.getIndex(\"B\"));\n        assertEquals(-1, d.getIndex(\"XX\"));\n        \n        boolean pass = false;\n        try {\n            d.getIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 139,
        "end_line": 155,
        "comment": "\n     * Some checks for the getIndex() method.\n     ",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 54)",
            "(line 141,col 9)-(line 141,col 29)",
            "(line 142,col 9)-(line 142,col 29)",
            "(line 143,col 9)-(line 143,col 41)",
            "(line 144,col 9)-(line 144,col 41)",
            "(line 145,col 9)-(line 145,col 43)",
            "(line 147,col 9)-(line 147,col 29)",
            "(line 148,col 9)-(line 153,col 9)",
            "(line 154,col 9)-(line 154,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultPieDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultPieDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultPieDataset d1 = new DefaultPieDataset();\n        d1.setValue(\"V1\", new Integer(1));\n        d1.setValue(\"V2\", null);\n        d1.setValue(\"V3\", new Integer(3));\n        DefaultPieDataset d2 = null;\n        try {\n            d2 = (DefaultPieDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 160,
        "end_line": 175,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 55)",
            "(line 162,col 9)-(line 162,col 42)",
            "(line 163,col 9)-(line 163,col 32)",
            "(line 164,col 9)-(line 164,col 42)",
            "(line 165,col 9)-(line 165,col 36)",
            "(line 166,col 9)-(line 171,col 9)",
            "(line 172,col 9)-(line 172,col 29)",
            "(line 173,col 9)-(line 173,col 51)",
            "(line 174,col 9)-(line 174,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultPieDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultPieDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultPieDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultPieDataset d1 = new DefaultPieDataset();\n        d1.setValue(\"C1\", new Double(234.2));\n        d1.setValue(\"C2\", null);\n        d1.setValue(\"C3\", new Double(345.9));\n        d1.setValue(\"C4\", new Double(452.7));\n\n        DefaultPieDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (DefaultPieDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(d1, d2);\n\n    }",
        "begin_line": 180,
        "end_line": 207,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 55)",
            "(line 183,col 9)-(line 183,col 45)",
            "(line 184,col 9)-(line 184,col 32)",
            "(line 185,col 9)-(line 185,col 45)",
            "(line 186,col 9)-(line 186,col 45)",
            "(line 188,col 9)-(line 188,col 36)",
            "(line 190,col 9)-(line 204,col 9)",
            "(line 205,col 9)-(line 205,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetGroupTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetGroupTests.java",
        "signature": "org.jfree.data.general.junit.DatasetGroupTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DatasetGroupTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetGroupTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetGroupTests.java",
        "signature": "org.jfree.data.general.junit.DatasetGroupTests.DatasetGroupTests(java.lang.String)",
        "snippet": "    public DatasetGroupTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DatasetGroupTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DatasetGroupTests.java",
        "signature": "org.jfree.data.general.junit.DatasetGroupTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DatasetGroup g1 = new DatasetGroup();\n        DatasetGroup g2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(g1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            g2 = (DatasetGroup) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(g1, g2);\n\n    }",
        "begin_line": 82,
        "end_line": 104,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 45)",
            "(line 85,col 9)-(line 85,col 31)",
            "(line 87,col 9)-(line 101,col 9)",
            "(line 102,col 9)-(line 102,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultKeyedValueDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultKeyedValueDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultKeyedValueDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultKeyedValueDatasetTests.class);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 66)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultKeyedValueDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultKeyedValueDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultKeyedValueDatasetTests.DefaultKeyedValueDatasetTests(java.lang.String)",
        "snippet": "    public DefaultKeyedValueDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultKeyedValueDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultKeyedValueDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultKeyedValueDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        DefaultKeyedValueDataset d1 \n            = new DefaultKeyedValueDataset(\"Test\", new Double(45.5));\n        DefaultKeyedValueDataset d2 \n            = new DefaultKeyedValueDataset(\"Test\", new Double(45.5));\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n\n        d1 = new DefaultKeyedValueDataset(\"Test 1\", new Double(45.5));\n        d2 = new DefaultKeyedValueDataset(\"Test 2\", new Double(45.5));\n        assertFalse(d1.equals(d2));\n\n        d1 = new DefaultKeyedValueDataset(\"Test\", new Double(45.5));\n        d2 = new DefaultKeyedValueDataset(\"Test\", new Double(45.6));\n        assertFalse(d1.equals(d2));\n\n    }",
        "begin_line": 82,
        "end_line": 99,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 85,col 69)",
            "(line 86,col 9)-(line 87,col 69)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 91,col 9)-(line 91,col 70)",
            "(line 92,col 9)-(line 92,col 70)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 95,col 9)-(line 95,col 68)",
            "(line 96,col 9)-(line 96,col 68)",
            "(line 97,col 9)-(line 97,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultKeyedValueDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultKeyedValueDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultKeyedValueDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultKeyedValueDataset d1 \n            = new DefaultKeyedValueDataset(\"Test\", new Double(45.5));\n        DefaultKeyedValueDataset d2 = null;\n        try {\n            d2 = (DefaultKeyedValueDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 104,
        "end_line": 117,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 106,col 69)",
            "(line 107,col 9)-(line 107,col 43)",
            "(line 108,col 9)-(line 113,col 9)",
            "(line 114,col 9)-(line 114,col 29)",
            "(line 115,col 9)-(line 115,col 51)",
            "(line 116,col 9)-(line 116,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultKeyedValueDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultKeyedValueDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultKeyedValueDatasetTests.testCloneIndependence()",
        "snippet": "    public void testCloneIndependence() {\n        DefaultKeyedValueDataset d1 \n            = new DefaultKeyedValueDataset(\"Key\", new Double(10.0));\n        DefaultKeyedValueDataset d2 = null;\n        try {\n            d2 = (DefaultKeyedValueDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(d1.equals(d2));\n        d2.updateValue(new Double(99.9));\n        assertFalse(d1.equals(d2));\n        d2.updateValue(new Double(10.0));\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 122,
        "end_line": 137,
        "comment": "\n     * Confirm that the clone is independent of the original.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 124,col 68)",
            "(line 125,col 9)-(line 125,col 43)",
            "(line 126,col 9)-(line 131,col 9)",
            "(line 132,col 9)-(line 132,col 34)",
            "(line 133,col 9)-(line 133,col 41)",
            "(line 134,col 9)-(line 134,col 35)",
            "(line 135,col 9)-(line 135,col 41)",
            "(line 136,col 9)-(line 136,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultKeyedValueDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultKeyedValueDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultKeyedValueDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultKeyedValueDataset d1  \n            = new DefaultKeyedValueDataset(\"Test\", new Double(25.3));\n        DefaultKeyedValueDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (DefaultKeyedValueDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(d1, d2);\n    }",
        "begin_line": 142,
        "end_line": 164,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 145,col 69)",
            "(line 146,col 9)-(line 146,col 43)",
            "(line 148,col 9)-(line 162,col 9)",
            "(line 163,col 9)-(line 163,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultKeyedValuesDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultKeyedValuesDatasetTests.class);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 67)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultKeyedValuesDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests.DefaultKeyedValuesDatasetTests(java.lang.String)",
        "snippet": "    public DefaultKeyedValuesDatasetTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultKeyedValuesDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultKeyedValuesDataset d1 = new DefaultKeyedValuesDataset();\n        d1.setValue(\"V1\", new Integer(1));\n        d1.setValue(\"V2\", null);\n        d1.setValue(\"V3\", new Integer(3));\n        DefaultKeyedValuesDataset d2 = null;\n        try {\n            d2 = (DefaultKeyedValuesDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n    }",
        "begin_line": 83,
        "end_line": 98,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 71)",
            "(line 85,col 9)-(line 85,col 42)",
            "(line 86,col 9)-(line 86,col 32)",
            "(line 87,col 9)-(line 87,col 42)",
            "(line 88,col 9)-(line 88,col 44)",
            "(line 89,col 9)-(line 94,col 9)",
            "(line 95,col 9)-(line 95,col 29)",
            "(line 96,col 9)-(line 96,col 51)",
            "(line 97,col 9)-(line 97,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DefaultKeyedValuesDatasetTests.java",
        "signature": "org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultKeyedValuesDataset d1 = new DefaultKeyedValuesDataset();\n        d1.setValue(\"C1\", new Double(234.2));\n        d1.setValue(\"C2\", null);\n        d1.setValue(\"C3\", new Double(345.9));\n        d1.setValue(\"C4\", new Double(452.7));\n\n        KeyedValuesDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (KeyedValuesDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(d1, d2);\n\n    }",
        "begin_line": 103,
        "end_line": 130,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 71)",
            "(line 106,col 9)-(line 106,col 45)",
            "(line 107,col 9)-(line 107,col 32)",
            "(line 108,col 9)-(line 108,col 45)",
            "(line 109,col 9)-(line 109,col 45)",
            "(line 111,col 9)-(line 111,col 37)",
            "(line 113,col 9)-(line 127,col 9)",
            "(line 128,col 9)-(line 128,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DataGeneralPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DataGeneralPackageTests.java",
        "signature": "org.jfree.data.general.junit.DataGeneralPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.data.general\");\n        suite.addTestSuite(DatasetGroupTests.class);\n        suite.addTestSuite(DatasetUtilitiesTests.class);\n        suite.addTestSuite(DefaultKeyedValueDatasetTests.class);\n        suite.addTestSuite(DefaultKeyedValuesDatasetTests.class);\n        suite.addTestSuite(DefaultKeyedValues2DDatasetTests.class);\n        suite.addTestSuite(DefaultPieDatasetTests.class);\n        return suite;\n    }",
        "begin_line": 60,
        "end_line": 69,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 66)",
            "(line 62,col 9)-(line 62,col 52)",
            "(line 63,col 9)-(line 63,col 56)",
            "(line 64,col 9)-(line 64,col 64)",
            "(line 65,col 9)-(line 65,col 65)",
            "(line 66,col 9)-(line 66,col 67)",
            "(line 67,col 9)-(line 67,col 57)",
            "(line 68,col 9)-(line 68,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DataGeneralPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DataGeneralPackageTests.java",
        "signature": "org.jfree.data.general.junit.DataGeneralPackageTests.DataGeneralPackageTests(java.lang.String)",
        "snippet": "    public DataGeneralPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the test suite name.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.general.junit.DataGeneralPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/general/junit/DataGeneralPackageTests.java",
        "signature": "org.jfree.data.general.junit.DataGeneralPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TaskTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskTests.TaskTests(java.lang.String)",
        "snippet": "    public TaskTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        Task t1 = new Task(\"T\", new Date(1), new Date(2));\n        Task t2 = new Task(\"T\", new Date(1), new Date(2));\n        assertTrue(t1.equals(t2));\n        assertTrue(t2.equals(t1));\n\n        t1.setDescription(\"X\");\n        assertFalse(t1.equals(t2));\n        t2.setDescription(\"X\");\n        assertTrue(t1.equals(t2));\n        \n        t1.setDuration(new SimpleTimePeriod(new Date(2), new Date(3)));\n        assertFalse(t1.equals(t2));\n        t2.setDuration(new SimpleTimePeriod(new Date(2), new Date(3)));\n        assertTrue(t1.equals(t2));\n        \n        t1.setPercentComplete(0.5);\n        assertFalse(t1.equals(t2));\n        t2.setPercentComplete(0.5);\n        assertTrue(t1.equals(t2));\n        \n        t1.addSubtask(new Task(\"T\", new Date(22), new Date(33)));\n        assertFalse(t1.equals(t2));\n        t2.addSubtask(new Task(\"T\", new Date(22), new Date(33)));\n        assertTrue(t1.equals(t2));\n        \n\n    }",
        "begin_line": 84,
        "end_line": 112,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 58)",
            "(line 87,col 9)-(line 87,col 58)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 91,col 9)-(line 91,col 31)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 31)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 96,col 71)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 71)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 101,col 35)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 106,col 9)-(line 106,col 65)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 65)",
            "(line 109,col 9)-(line 109,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskTests.testCloning()",
        "snippet": "    public void testCloning() {\n        Task t1 = new Task(\"T\", new Date(1), new Date(2));\n        Task t2 = null;\n        try {\n            t2 = (Task) t1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(t1 != t2);\n        assertTrue(t1.getClass() == t2.getClass());\n        assertTrue(t1.equals(t2));\n    }",
        "begin_line": 117,
        "end_line": 129,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 58)",
            "(line 119,col 9)-(line 119,col 23)",
            "(line 120,col 9)-(line 125,col 9)",
            "(line 126,col 9)-(line 126,col 29)",
            "(line 127,col 9)-(line 127,col 51)",
            "(line 128,col 9)-(line 128,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        Task t1 = new Task(\"T\", new Date(1), new Date(2));\n        Task t2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(t1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            t2 = (Task) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(t1, t2);\n\n    }",
        "begin_line": 134,
        "end_line": 156,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 58)",
            "(line 137,col 9)-(line 137,col 23)",
            "(line 139,col 9)-(line 153,col 9)",
            "(line 154,col 9)-(line 154,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskTests.testGetSubTaskCount()",
        "snippet": "    public void testGetSubTaskCount() {\n        Task t1 = new Task(\"T\", new Date(100), new Date(200));\n        assertEquals(0, t1.getSubtaskCount());\n        t1.addSubtask(new Task(\"S1\", new Date(100), new Date(110)));\n        assertEquals(1, t1.getSubtaskCount());  \n        Task s2 = new Task(\"S2\", new Date(111), new Date(120));\n        t1.addSubtask(s2);\n        assertEquals(2, t1.getSubtaskCount());\n        t1.addSubtask(new Task(\"S3\", new Date(121), new Date(130)));\n        assertEquals(3, t1.getSubtaskCount());\n        t1.removeSubtask(s2);\n        assertEquals(2, t1.getSubtaskCount());\n    }",
        "begin_line": 161,
        "end_line": 173,
        "comment": "\n     * Check the getSubTaskCount() method.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 62)",
            "(line 163,col 9)-(line 163,col 46)",
            "(line 164,col 9)-(line 164,col 68)",
            "(line 165,col 9)-(line 165,col 46)",
            "(line 166,col 9)-(line 166,col 63)",
            "(line 167,col 9)-(line 167,col 26)",
            "(line 168,col 9)-(line 168,col 46)",
            "(line 169,col 9)-(line 169,col 68)",
            "(line 170,col 9)-(line 170,col 46)",
            "(line 171,col 9)-(line 171,col 29)",
            "(line 172,col 9)-(line 172,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TaskSeriesCollectionTests.class);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.TaskSeriesCollectionTests(java.lang.String)",
        "snippet": "    public TaskSeriesCollectionTests(String name) {\n        super(name);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.createCollection1()",
        "snippet": "    private TaskSeriesCollection createCollection1() {\n        TaskSeriesCollection result = new TaskSeriesCollection();\n        TaskSeries s1 = new TaskSeries(\"S1\");\n        s1.add(new Task(\"Task 1\", new Date(1), new Date(2)));\n        s1.add(new Task(\"Task 2\", new Date(3), new Date(4)));\n        result.add(s1);\n        TaskSeries s2 = new TaskSeries(\"S2\");\n        s2.add(new Task(\"Task 3\", new Date(5), new Date(6)));\n        result.add(s2);\n        return result;\n    }",
        "begin_line": 90,
        "end_line": 100,
        "comment": "\n     * Creates a sample collection for testing purposes.\n     * \n     * @return A sample collection.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 65)",
            "(line 92,col 9)-(line 92,col 45)",
            "(line 93,col 9)-(line 93,col 61)",
            "(line 94,col 9)-(line 94,col 61)",
            "(line 95,col 9)-(line 95,col 23)",
            "(line 96,col 9)-(line 96,col 45)",
            "(line 97,col 9)-(line 97,col 61)",
            "(line 98,col 9)-(line 98,col 23)",
            "(line 99,col 9)-(line 99,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.createCollection2()",
        "snippet": "    private TaskSeriesCollection createCollection2() {\n        TaskSeriesCollection result = new TaskSeriesCollection();\n        TaskSeries s1 = new TaskSeries(\"S1\");\n        Task t1 = new Task(\"Task 1\", new Date(10), new Date(20));\n        t1.addSubtask(new Task(\"Task 1A\", new Date(10), new Date(15)));\n        t1.addSubtask(new Task(\"Task 1B\", new Date(16), new Date(20)));\n        t1.setPercentComplete(0.10);\n        s1.add(t1);\n        Task t2 = new Task(\"Task 2\", new Date(30), new Date(40));\n        t2.addSubtask(new Task(\"Task 2A\", new Date(30), new Date(35)));\n        t2.addSubtask(new Task(\"Task 2B\", new Date(36), new Date(40)));\n        t2.setPercentComplete(0.20);\n        s1.add(t2);\n        result.add(s1);\n        TaskSeries s2 = new TaskSeries(\"S2\");\n        Task t3 = new Task(\"Task 3\", new Date(50), new Date(60));\n        t3.addSubtask(new Task(\"Task 3A\", new Date(50), new Date(55)));\n        t3.addSubtask(new Task(\"Task 3B\", new Date(56), new Date(60)));\n        t3.setPercentComplete(0.30);\n        s2.add(t3);\n        result.add(s2);\n        return result;\n    }",
        "begin_line": 107,
        "end_line": 129,
        "comment": "\n     * Creates a sample collection for testing purposes.\n     * \n     * @return A sample collection.\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 65)",
            "(line 109,col 9)-(line 109,col 45)",
            "(line 110,col 9)-(line 110,col 65)",
            "(line 111,col 9)-(line 111,col 71)",
            "(line 112,col 9)-(line 112,col 71)",
            "(line 113,col 9)-(line 113,col 36)",
            "(line 114,col 9)-(line 114,col 19)",
            "(line 115,col 9)-(line 115,col 65)",
            "(line 116,col 9)-(line 116,col 71)",
            "(line 117,col 9)-(line 117,col 71)",
            "(line 118,col 9)-(line 118,col 36)",
            "(line 119,col 9)-(line 119,col 19)",
            "(line 120,col 9)-(line 120,col 23)",
            "(line 121,col 9)-(line 121,col 45)",
            "(line 122,col 9)-(line 122,col 65)",
            "(line 123,col 9)-(line 123,col 71)",
            "(line 124,col 9)-(line 124,col 71)",
            "(line 125,col 9)-(line 125,col 36)",
            "(line 126,col 9)-(line 126,col 19)",
            "(line 127,col 9)-(line 127,col 23)",
            "(line 128,col 9)-(line 128,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.createCollection3()",
        "snippet": "    private TaskSeriesCollection createCollection3() {\n        \n        // define subtasks\n        Task sub1 = new Task(\"Sub1\", new Date(11), new Date(111));\n        Task sub2 = new Task(\"Sub2\", new Date(22), new Date(222));\n        Task sub3 = new Task(\"Sub3\", new Date(33), new Date(333));\n        Task sub4 = new Task(\"Sub4\", new Date(44), new Date(444));\n        Task sub5 = new Task(\"Sub5\", new Date(55), new Date(555));\n        Task sub6 = new Task(\"Sub6\", new Date(66), new Date(666));\n        sub1.setPercentComplete(0.111);\n        sub2.setPercentComplete(0.222);\n        sub3.setPercentComplete(0.333);\n        sub4.setPercentComplete(0.444);\n        sub5.setPercentComplete(0.555);\n        sub6.setPercentComplete(0.666);\n        \n        TaskSeries seriesA = new TaskSeries(\"Series A\");\n        Task taskA1 = new Task(\"Task 1\", new SimpleTimePeriod(new Date(100), \n                new Date(200)));\n        taskA1.setPercentComplete(0.1);\n        taskA1.addSubtask(sub1);\n        Task taskA2 = new Task(\"Task 2\", new SimpleTimePeriod(new Date(220), \n                new Date(350)));\n        taskA2.setPercentComplete(0.2);\n        taskA2.addSubtask(sub2);\n        taskA2.addSubtask(sub3);\n        seriesA.add(taskA1);\n        seriesA.add(taskA2);\n         \n        TaskSeries seriesB = new TaskSeries(\"Series B\");\n        // note that we don't define taskB1\n        Task taskB2 = new Task(\"Task 2\", new SimpleTimePeriod(new Date(2220), \n                new Date(3350)));\n        taskB2.setPercentComplete(0.3);\n        taskB2.addSubtask(sub4);\n        taskB2.addSubtask(sub5);\n        taskB2.addSubtask(sub6);\n        seriesB.add(taskB2);\n\n        TaskSeriesCollection tsc = new TaskSeriesCollection();\n        tsc.add(seriesA);\n        tsc.add(seriesB);        \n        \n        return tsc;\n    }",
        "begin_line": 136,
        "end_line": 180,
        "comment": "\n     * Creates a sample collection for testing purposes.\n     * \n     * @return A sample collection.\n     ",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 66)",
            "(line 140,col 9)-(line 140,col 66)",
            "(line 141,col 9)-(line 141,col 66)",
            "(line 142,col 9)-(line 142,col 66)",
            "(line 143,col 9)-(line 143,col 66)",
            "(line 144,col 9)-(line 144,col 66)",
            "(line 145,col 9)-(line 145,col 39)",
            "(line 146,col 9)-(line 146,col 39)",
            "(line 147,col 9)-(line 147,col 39)",
            "(line 148,col 9)-(line 148,col 39)",
            "(line 149,col 9)-(line 149,col 39)",
            "(line 150,col 9)-(line 150,col 39)",
            "(line 152,col 9)-(line 152,col 56)",
            "(line 153,col 9)-(line 154,col 32)",
            "(line 155,col 9)-(line 155,col 39)",
            "(line 156,col 9)-(line 156,col 32)",
            "(line 157,col 9)-(line 158,col 32)",
            "(line 159,col 9)-(line 159,col 39)",
            "(line 160,col 9)-(line 160,col 32)",
            "(line 161,col 9)-(line 161,col 32)",
            "(line 162,col 9)-(line 162,col 28)",
            "(line 163,col 9)-(line 163,col 28)",
            "(line 165,col 9)-(line 165,col 56)",
            "(line 167,col 9)-(line 168,col 33)",
            "(line 169,col 9)-(line 169,col 39)",
            "(line 170,col 9)-(line 170,col 32)",
            "(line 171,col 9)-(line 171,col 32)",
            "(line 172,col 9)-(line 172,col 32)",
            "(line 173,col 9)-(line 173,col 28)",
            "(line 175,col 9)-(line 175,col 62)",
            "(line 176,col 9)-(line 176,col 25)",
            "(line 177,col 9)-(line 177,col 25)",
            "(line 179,col 9)-(line 179,col 19)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetSeriesCount()",
        "snippet": "    public void testGetSeriesCount() {\n        TaskSeriesCollection c = createCollection1();\n        assertEquals(2, c.getSeriesCount());\n    }",
        "begin_line": 185,
        "end_line": 188,
        "comment": "\n     * A test for the getSeriesCount() method.\n     ",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 53)",
            "(line 187,col 9)-(line 187,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetSeriesKey()",
        "snippet": "    public void testGetSeriesKey() {\n        TaskSeriesCollection c = createCollection1();\n        assertEquals(\"S1\", c.getSeriesKey(0));\n        assertEquals(\"S2\", c.getSeriesKey(1));\n    }",
        "begin_line": 193,
        "end_line": 197,
        "comment": "\n     * Some tests for the getSeriesKey() method.\n     ",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 53)",
            "(line 195,col 9)-(line 195,col 46)",
            "(line 196,col 9)-(line 196,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetRowCount()",
        "snippet": "    public void testGetRowCount() {\n        TaskSeriesCollection c = createCollection1();\n        assertEquals(2, c.getRowCount());\n    }",
        "begin_line": 202,
        "end_line": 205,
        "comment": "\n     * A test for the getRowCount() method.\n     ",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 53)",
            "(line 204,col 9)-(line 204,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetRowKey()",
        "snippet": "    public void testGetRowKey() {\n        TaskSeriesCollection c = createCollection1();\n        assertEquals(\"S1\", c.getRowKey(0));\n        assertEquals(\"S2\", c.getRowKey(1));\n    }",
        "begin_line": 210,
        "end_line": 214,
        "comment": "\n     * Some tests for the getRowKey() method.\n     ",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 53)",
            "(line 212,col 9)-(line 212,col 43)",
            "(line 213,col 9)-(line 213,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetRowIndex()",
        "snippet": "    public void testGetRowIndex() {\n        TaskSeriesCollection c = createCollection1();\n        assertEquals(0, c.getRowIndex(\"S1\"));\n        assertEquals(1, c.getRowIndex(\"S2\"));\n    }",
        "begin_line": 219,
        "end_line": 223,
        "comment": "\n     * Some tests for the getRowIndex() method.\n     ",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 53)",
            "(line 221,col 9)-(line 221,col 45)",
            "(line 222,col 9)-(line 222,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetValue()",
        "snippet": "    public void testGetValue() {\n        TaskSeriesCollection c = createCollection1();\n        assertEquals(new Long(1L), c.getValue(\"S1\", \"Task 1\"));\n        assertEquals(new Long(3L), c.getValue(\"S1\", \"Task 2\"));\n        assertEquals(new Long(5L), c.getValue(\"S2\", \"Task 3\"));\n        \n        assertEquals(new Long(1L), c.getValue(0, 0));\n        assertEquals(new Long(3L), c.getValue(0, 1));\n        assertEquals(null, c.getValue(0, 2));\n        assertEquals(null, c.getValue(1, 0));\n        assertEquals(null, c.getValue(1, 1));\n        assertEquals(new Long(5L), c.getValue(1, 2));\n    }",
        "begin_line": 228,
        "end_line": 240,
        "comment": "\n     * Some tests for the getValue() method.\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 53)",
            "(line 230,col 9)-(line 230,col 63)",
            "(line 231,col 9)-(line 231,col 63)",
            "(line 232,col 9)-(line 232,col 63)",
            "(line 234,col 9)-(line 234,col 53)",
            "(line 235,col 9)-(line 235,col 53)",
            "(line 236,col 9)-(line 236,col 45)",
            "(line 237,col 9)-(line 237,col 45)",
            "(line 238,col 9)-(line 238,col 45)",
            "(line 239,col 9)-(line 239,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetStartValue()",
        "snippet": "    public void testGetStartValue() {\n        TaskSeriesCollection c = createCollection1();\n        assertEquals(new Long(1L), c.getStartValue(\"S1\", \"Task 1\"));\n        assertEquals(new Long(3L), c.getStartValue(\"S1\", \"Task 2\"));\n        assertEquals(new Long(5L), c.getStartValue(\"S2\", \"Task 3\"));\n        \n        assertEquals(new Long(1L), c.getStartValue(0, 0));\n        assertEquals(new Long(3L), c.getStartValue(0, 1));\n        assertEquals(null, c.getStartValue(0, 2));\n        assertEquals(null, c.getStartValue(1, 0));\n        assertEquals(null, c.getStartValue(1, 1));\n        assertEquals(new Long(5L), c.getStartValue(1, 2));\n        \n        // test collection 3, which doesn't define all tasks in all series\n        TaskSeriesCollection c3 = createCollection3();\n        assertEquals(new Long(100), c3.getStartValue(0, 0));\n        assertEquals(new Long(220), c3.getStartValue(0, 1));\n        assertTrue(c3.getStartValue(1, 0) == null);\n        assertEquals(new Long(2220), c3.getStartValue(1, 1));\n    }",
        "begin_line": 245,
        "end_line": 264,
        "comment": "\n     * Some tests for the getStartValue() method.\n     ",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 53)",
            "(line 247,col 9)-(line 247,col 68)",
            "(line 248,col 9)-(line 248,col 68)",
            "(line 249,col 9)-(line 249,col 68)",
            "(line 251,col 9)-(line 251,col 58)",
            "(line 252,col 9)-(line 252,col 58)",
            "(line 253,col 9)-(line 253,col 50)",
            "(line 254,col 9)-(line 254,col 50)",
            "(line 255,col 9)-(line 255,col 50)",
            "(line 256,col 9)-(line 256,col 58)",
            "(line 259,col 9)-(line 259,col 54)",
            "(line 260,col 9)-(line 260,col 60)",
            "(line 261,col 9)-(line 261,col 60)",
            "(line 262,col 9)-(line 262,col 51)",
            "(line 263,col 9)-(line 263,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetStartValue2()",
        "snippet": "    public void testGetStartValue2() {\n        TaskSeriesCollection c = createCollection2();\n        assertEquals(new Long(10L), c.getStartValue(\"S1\", \"Task 1\", 0));\n        assertEquals(new Long(16L), c.getStartValue(\"S1\", \"Task 1\", 1));\n        assertEquals(new Long(30L), c.getStartValue(\"S1\", \"Task 2\", 0));\n        assertEquals(new Long(36L), c.getStartValue(\"S1\", \"Task 2\", 1));\n        assertEquals(new Long(50L), c.getStartValue(\"S2\", \"Task 3\", 0));\n        assertEquals(new Long(56L), c.getStartValue(\"S2\", \"Task 3\", 1));\n        \n        assertEquals(new Long(10L), c.getStartValue(0, 0, 0));\n        assertEquals(new Long(16L), c.getStartValue(0, 0, 1));\n        assertEquals(new Long(30L), c.getStartValue(0, 1, 0));\n        assertEquals(new Long(36L), c.getStartValue(0, 1, 1));\n        assertEquals(new Long(50L), c.getStartValue(1, 2, 0));\n        assertEquals(new Long(56L), c.getStartValue(1, 2, 1));\n\n        TaskSeriesCollection c3 = createCollection3();\n        assertEquals(new Long(11), c3.getStartValue(0, 0, 0));\n        assertEquals(new Long(22), c3.getStartValue(0, 1, 0));\n        assertEquals(new Long(33), c3.getStartValue(0, 1, 1));\n        assertTrue(c3.getStartValue(1, 0, 0) == null);\n        assertEquals(new Long(44), c3.getStartValue(1, 1, 0));\n        assertEquals(new Long(55), c3.getStartValue(1, 1, 1));\n        assertEquals(new Long(66), c3.getStartValue(1, 1, 2));\n    }",
        "begin_line": 269,
        "end_line": 293,
        "comment": "\n     * Some tests for the getStartValue() method for sub-intervals.\n     ",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 53)",
            "(line 271,col 9)-(line 271,col 72)",
            "(line 272,col 9)-(line 272,col 72)",
            "(line 273,col 9)-(line 273,col 72)",
            "(line 274,col 9)-(line 274,col 72)",
            "(line 275,col 9)-(line 275,col 72)",
            "(line 276,col 9)-(line 276,col 72)",
            "(line 278,col 9)-(line 278,col 62)",
            "(line 279,col 9)-(line 279,col 62)",
            "(line 280,col 9)-(line 280,col 62)",
            "(line 281,col 9)-(line 281,col 62)",
            "(line 282,col 9)-(line 282,col 62)",
            "(line 283,col 9)-(line 283,col 62)",
            "(line 285,col 9)-(line 285,col 54)",
            "(line 286,col 9)-(line 286,col 62)",
            "(line 287,col 9)-(line 287,col 62)",
            "(line 288,col 9)-(line 288,col 62)",
            "(line 289,col 9)-(line 289,col 54)",
            "(line 290,col 9)-(line 290,col 62)",
            "(line 291,col 9)-(line 291,col 62)",
            "(line 292,col 9)-(line 292,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetStartValue3()",
        "snippet": "    public void testGetStartValue3() {\n        TaskSeriesCollection c = new TaskSeriesCollection();\n        TaskSeries s = new TaskSeries(\"Series 1\");\n        s.add(new Task(\"Task with null duration\", null));\n        c.add(s);\n        Number millis = c.getStartValue(\"Series 1\", \"Task with null duration\");\n        assertTrue(millis == null);\n    }",
        "begin_line": 298,
        "end_line": 305,
        "comment": "\n     * A check for a null task duration.\n     ",
        "child_ranges": [
            "(line 299,col 9)-(line 299,col 60)",
            "(line 300,col 9)-(line 300,col 50)",
            "(line 301,col 9)-(line 301,col 57)",
            "(line 302,col 9)-(line 302,col 17)",
            "(line 303,col 9)-(line 303,col 79)",
            "(line 304,col 9)-(line 304,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetEndValue()",
        "snippet": "    public void testGetEndValue() {\n        TaskSeriesCollection c = createCollection1();\n        assertEquals(new Long(2L), c.getEndValue(\"S1\", \"Task 1\"));\n        assertEquals(new Long(4L), c.getEndValue(\"S1\", \"Task 2\"));\n        assertEquals(new Long(6L), c.getEndValue(\"S2\", \"Task 3\"));\n        \n        assertEquals(new Long(2L), c.getEndValue(0, 0));\n        assertEquals(new Long(4L), c.getEndValue(0, 1));\n        assertEquals(null, c.getEndValue(0, 2));\n        assertEquals(null, c.getEndValue(1, 0));\n        assertEquals(null, c.getEndValue(1, 1));\n        assertEquals(new Long(6L), c.getEndValue(1, 2));\n        \n        // test collection 3, which doesn't define all tasks in all series\n        TaskSeriesCollection c3 = createCollection3();\n        assertEquals(new Long(200), c3.getEndValue(0, 0));\n        assertEquals(new Long(350), c3.getEndValue(0, 1));\n        assertTrue(c3.getEndValue(1, 0) == null);\n        assertEquals(new Long(3350), c3.getEndValue(1, 1));\n    }",
        "begin_line": 310,
        "end_line": 329,
        "comment": "\n     * Some tests for the getEndValue() method.\n     ",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 53)",
            "(line 312,col 9)-(line 312,col 66)",
            "(line 313,col 9)-(line 313,col 66)",
            "(line 314,col 9)-(line 314,col 66)",
            "(line 316,col 9)-(line 316,col 56)",
            "(line 317,col 9)-(line 317,col 56)",
            "(line 318,col 9)-(line 318,col 48)",
            "(line 319,col 9)-(line 319,col 48)",
            "(line 320,col 9)-(line 320,col 48)",
            "(line 321,col 9)-(line 321,col 56)",
            "(line 324,col 9)-(line 324,col 54)",
            "(line 325,col 9)-(line 325,col 58)",
            "(line 326,col 9)-(line 326,col 58)",
            "(line 327,col 9)-(line 327,col 49)",
            "(line 328,col 9)-(line 328,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetEndValue2()",
        "snippet": "    public void testGetEndValue2() {\n        TaskSeriesCollection c = createCollection2();\n        assertEquals(new Long(15L), c.getEndValue(\"S1\", \"Task 1\", 0));\n        assertEquals(new Long(20L), c.getEndValue(\"S1\", \"Task 1\", 1));\n        assertEquals(new Long(35L), c.getEndValue(\"S1\", \"Task 2\", 0));\n        assertEquals(new Long(40L), c.getEndValue(\"S1\", \"Task 2\", 1));\n        assertEquals(new Long(55L), c.getEndValue(\"S2\", \"Task 3\", 0));\n        assertEquals(new Long(60L), c.getEndValue(\"S2\", \"Task 3\", 1));\n        \n        assertEquals(new Long(15L), c.getEndValue(0, 0, 0));\n        assertEquals(new Long(20L), c.getEndValue(0, 0, 1));\n        assertEquals(new Long(35L), c.getEndValue(0, 1, 0));\n        assertEquals(new Long(40L), c.getEndValue(0, 1, 1));\n        assertEquals(new Long(55L), c.getEndValue(1, 2, 0));\n        assertEquals(new Long(60L), c.getEndValue(1, 2, 1));\n        \n        TaskSeriesCollection c3 = createCollection3();\n        assertEquals(new Long(111), c3.getEndValue(0, 0, 0));\n        assertEquals(new Long(222), c3.getEndValue(0, 1, 0));\n        assertEquals(new Long(333), c3.getEndValue(0, 1, 1));\n        assertTrue(c3.getEndValue(1, 0, 0) == null);\n        assertEquals(new Long(444), c3.getEndValue(1, 1, 0));\n        assertEquals(new Long(555), c3.getEndValue(1, 1, 1));\n        assertEquals(new Long(666), c3.getEndValue(1, 1, 2));\n    }",
        "begin_line": 334,
        "end_line": 358,
        "comment": "\n     * Some tests for the getEndValue() method for sub-intervals.\n     ",
        "child_ranges": [
            "(line 335,col 9)-(line 335,col 53)",
            "(line 336,col 9)-(line 336,col 70)",
            "(line 337,col 9)-(line 337,col 70)",
            "(line 338,col 9)-(line 338,col 70)",
            "(line 339,col 9)-(line 339,col 70)",
            "(line 340,col 9)-(line 340,col 70)",
            "(line 341,col 9)-(line 341,col 70)",
            "(line 343,col 9)-(line 343,col 60)",
            "(line 344,col 9)-(line 344,col 60)",
            "(line 345,col 9)-(line 345,col 60)",
            "(line 346,col 9)-(line 346,col 60)",
            "(line 347,col 9)-(line 347,col 60)",
            "(line 348,col 9)-(line 348,col 60)",
            "(line 350,col 9)-(line 350,col 54)",
            "(line 351,col 9)-(line 351,col 61)",
            "(line 352,col 9)-(line 352,col 61)",
            "(line 353,col 9)-(line 353,col 61)",
            "(line 354,col 9)-(line 354,col 52)",
            "(line 355,col 9)-(line 355,col 61)",
            "(line 356,col 9)-(line 356,col 61)",
            "(line 357,col 9)-(line 357,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetEndValue3()",
        "snippet": "    public void testGetEndValue3() {\n        TaskSeriesCollection c = new TaskSeriesCollection();\n        TaskSeries s = new TaskSeries(\"Series 1\");\n        s.add(new Task(\"Task with null duration\", null));\n        c.add(s);\n        Number millis = c.getEndValue(\"Series 1\", \"Task with null duration\");\n        assertTrue(millis == null);\n    }",
        "begin_line": 363,
        "end_line": 370,
        "comment": "\n     * A check for a null task duration.\n     ",
        "child_ranges": [
            "(line 364,col 9)-(line 364,col 60)",
            "(line 365,col 9)-(line 365,col 50)",
            "(line 366,col 9)-(line 366,col 57)",
            "(line 367,col 9)-(line 367,col 17)",
            "(line 368,col 9)-(line 368,col 77)",
            "(line 369,col 9)-(line 369,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetPercentComplete()",
        "snippet": "    public void testGetPercentComplete() {\n        TaskSeriesCollection c = createCollection2();\n        assertEquals(new Double(0.10), c.getPercentComplete(\"S1\", \"Task 1\"));\n        assertEquals(new Double(0.20), c.getPercentComplete(\"S1\", \"Task 2\"));\n        assertEquals(new Double(0.30), c.getPercentComplete(\"S2\", \"Task 3\"));\n        \n        assertEquals(new Double(0.10), c.getPercentComplete(0, 0));\n        assertEquals(new Double(0.20), c.getPercentComplete(0, 1));\n        assertEquals(null, c.getPercentComplete(0, 2));\n        assertEquals(null, c.getPercentComplete(1, 0));\n        assertEquals(null, c.getPercentComplete(1, 1));\n        assertEquals(new Double(0.30), c.getPercentComplete(1, 2));\n        \n        // test collection 3, which doesn't define all tasks in all series\n        TaskSeriesCollection c3 = createCollection3();\n        assertEquals(new Double(0.1), c3.getPercentComplete(0, 0));\n        assertEquals(new Double(0.2), c3.getPercentComplete(0, 1));\n        assertTrue(c3.getPercentComplete(1, 0) == null);\n        assertEquals(new Double(0.3), c3.getPercentComplete(1, 1));\n        \n        assertEquals(new Double(0.111), c3.getPercentComplete(0, 0, 0));\n \n        assertEquals(new Double(0.222), c3.getPercentComplete(0, 1, 0));\n        assertEquals(new Double(0.333), c3.getPercentComplete(0, 1, 1));\n\n        assertEquals(new Double(0.444), c3.getPercentComplete(1, 1, 0));\n        assertEquals(new Double(0.555), c3.getPercentComplete(1, 1, 1));\n        assertEquals(new Double(0.666), c3.getPercentComplete(1, 1, 2));\n    }",
        "begin_line": 375,
        "end_line": 403,
        "comment": "\n     * Some tests for the getPercentComplete() method.\n     ",
        "child_ranges": [
            "(line 376,col 9)-(line 376,col 53)",
            "(line 377,col 9)-(line 377,col 77)",
            "(line 378,col 9)-(line 378,col 77)",
            "(line 379,col 9)-(line 379,col 77)",
            "(line 381,col 9)-(line 381,col 67)",
            "(line 382,col 9)-(line 382,col 67)",
            "(line 383,col 9)-(line 383,col 55)",
            "(line 384,col 9)-(line 384,col 55)",
            "(line 385,col 9)-(line 385,col 55)",
            "(line 386,col 9)-(line 386,col 67)",
            "(line 389,col 9)-(line 389,col 54)",
            "(line 390,col 9)-(line 390,col 67)",
            "(line 391,col 9)-(line 391,col 67)",
            "(line 392,col 9)-(line 392,col 56)",
            "(line 393,col 9)-(line 393,col 67)",
            "(line 395,col 9)-(line 395,col 72)",
            "(line 397,col 9)-(line 397,col 72)",
            "(line 398,col 9)-(line 398,col 72)",
            "(line 400,col 9)-(line 400,col 72)",
            "(line 401,col 9)-(line 401,col 72)",
            "(line 402,col 9)-(line 402,col 72)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetColumnCount()",
        "snippet": "    public void testGetColumnCount() {\n        TaskSeriesCollection c = createCollection1();\n        assertEquals(3, c.getColumnCount());\n    }  ",
        "begin_line": 408,
        "end_line": 411,
        "comment": "\n     * A test for the getColumnCount() method.\n     ",
        "child_ranges": [
            "(line 409,col 9)-(line 409,col 53)",
            "(line 410,col 9)-(line 410,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetColumnKey()",
        "snippet": "    public void testGetColumnKey() {\n        TaskSeriesCollection c = createCollection1();\n        assertEquals(\"Task 1\", c.getColumnKey(0));\n        assertEquals(\"Task 2\", c.getColumnKey(1));\n        assertEquals(\"Task 3\", c.getColumnKey(2));\n    }",
        "begin_line": 416,
        "end_line": 421,
        "comment": "\n     * Some tests for the getColumnKey() method.\n     ",
        "child_ranges": [
            "(line 417,col 9)-(line 417,col 53)",
            "(line 418,col 9)-(line 418,col 50)",
            "(line 419,col 9)-(line 419,col 50)",
            "(line 420,col 9)-(line 420,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetColumnIndex()",
        "snippet": "    public void testGetColumnIndex() {\n        TaskSeriesCollection c = createCollection1();\n        assertEquals(0, c.getColumnIndex(\"Task 1\"));\n        assertEquals(1, c.getColumnIndex(\"Task 2\"));\n        assertEquals(2, c.getColumnIndex(\"Task 3\"));\n    }",
        "begin_line": 426,
        "end_line": 431,
        "comment": "\n     * Some tests for the getColumnIndex() method.\n     ",
        "child_ranges": [
            "(line 427,col 9)-(line 427,col 53)",
            "(line 428,col 9)-(line 428,col 52)",
            "(line 429,col 9)-(line 429,col 52)",
            "(line 430,col 9)-(line 430,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        TaskSeries s1 = new TaskSeries(\"S\");\n        s1.add(new Task(\"T1\", new Date(1), new Date(2)));\n        s1.add(new Task(\"T2\", new Date(11), new Date(22)));\n        TaskSeries s2 = new TaskSeries(\"S\");\n        s2.add(new Task(\"T1\", new Date(1), new Date(2)));\n        s2.add(new Task(\"T2\", new Date(11), new Date(22)));\n        TaskSeriesCollection c1 = new TaskSeriesCollection();\n        c1.add(s1);\n        c1.add(s2);\n        \n        TaskSeries s1b = new TaskSeries(\"S\");\n        s1b.add(new Task(\"T1\", new Date(1), new Date(2)));\n        s1b.add(new Task(\"T2\", new Date(11), new Date(22)));\n        TaskSeries s2b = new TaskSeries(\"S\");\n        s2b.add(new Task(\"T1\", new Date(1), new Date(2)));\n        s2b.add(new Task(\"T2\", new Date(11), new Date(22)));\n        TaskSeriesCollection c2 = new TaskSeriesCollection();\n        c2.add(s1b);\n        c2.add(s2b);\n        \n        assertTrue(c1.equals(c2));\n        assertTrue(c2.equals(c1));\n\n    }",
        "begin_line": 436,
        "end_line": 461,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 438,col 9)-(line 438,col 44)",
            "(line 439,col 9)-(line 439,col 57)",
            "(line 440,col 9)-(line 440,col 59)",
            "(line 441,col 9)-(line 441,col 44)",
            "(line 442,col 9)-(line 442,col 57)",
            "(line 443,col 9)-(line 443,col 59)",
            "(line 444,col 9)-(line 444,col 61)",
            "(line 445,col 9)-(line 445,col 19)",
            "(line 446,col 9)-(line 446,col 19)",
            "(line 448,col 9)-(line 448,col 45)",
            "(line 449,col 9)-(line 449,col 58)",
            "(line 450,col 9)-(line 450,col 60)",
            "(line 451,col 9)-(line 451,col 45)",
            "(line 452,col 9)-(line 452,col 58)",
            "(line 453,col 9)-(line 453,col 60)",
            "(line 454,col 9)-(line 454,col 61)",
            "(line 455,col 9)-(line 455,col 20)",
            "(line 456,col 9)-(line 456,col 20)",
            "(line 458,col 9)-(line 458,col 34)",
            "(line 459,col 9)-(line 459,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testCloning()",
        "snippet": "    public void testCloning() {\n        TaskSeries s1 = new TaskSeries(\"S\");\n        s1.add(new Task(\"T1\", new Date(1), new Date(2)));\n        s1.add(new Task(\"T2\", new Date(11), new Date(22)));\n        TaskSeries s2 = new TaskSeries(\"S\");\n        s2.add(new Task(\"T1\", new Date(1), new Date(2)));\n        s2.add(new Task(\"T2\", new Date(11), new Date(22)));\n        TaskSeriesCollection c1 = new TaskSeriesCollection();\n        c1.add(s1);\n        c1.add(s2);\n\n        TaskSeriesCollection c2 = null;\n        try {\n            c2 = (TaskSeriesCollection) c1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n    }",
        "begin_line": 466,
        "end_line": 487,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 467,col 9)-(line 467,col 44)",
            "(line 468,col 9)-(line 468,col 57)",
            "(line 469,col 9)-(line 469,col 59)",
            "(line 470,col 9)-(line 470,col 44)",
            "(line 471,col 9)-(line 471,col 57)",
            "(line 472,col 9)-(line 472,col 59)",
            "(line 473,col 9)-(line 473,col 61)",
            "(line 474,col 9)-(line 474,col 19)",
            "(line 475,col 9)-(line 475,col 19)",
            "(line 477,col 9)-(line 477,col 39)",
            "(line 478,col 9)-(line 483,col 9)",
            "(line 484,col 9)-(line 484,col 29)",
            "(line 485,col 9)-(line 485,col 51)",
            "(line 486,col 9)-(line 486,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        TaskSeries s1 = new TaskSeries(\"S\");\n        s1.add(new Task(\"T1\", new Date(1), new Date(2)));\n        s1.add(new Task(\"T2\", new Date(11), new Date(22)));\n        TaskSeries s2 = new TaskSeries(\"S\");\n        s2.add(new Task(\"T1\", new Date(1), new Date(2)));\n        s2.add(new Task(\"T2\", new Date(11), new Date(22)));\n        TaskSeriesCollection c1 = new TaskSeriesCollection();\n        c1.add(s1);\n        c1.add(s2);\n        TaskSeriesCollection c2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            c2 = (TaskSeriesCollection) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(c1, c2);\n\n    }",
        "begin_line": 492,
        "end_line": 521,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 494,col 9)-(line 494,col 44)",
            "(line 495,col 9)-(line 495,col 57)",
            "(line 496,col 9)-(line 496,col 59)",
            "(line 497,col 9)-(line 497,col 44)",
            "(line 498,col 9)-(line 498,col 57)",
            "(line 499,col 9)-(line 499,col 59)",
            "(line 500,col 9)-(line 500,col 61)",
            "(line 501,col 9)-(line 501,col 19)",
            "(line 502,col 9)-(line 502,col 19)",
            "(line 503,col 9)-(line 503,col 39)",
            "(line 505,col 9)-(line 518,col 9)",
            "(line 519,col 9)-(line 519,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.test697153()",
        "snippet": "    public void test697153() {\n\n        TaskSeries s1 = new TaskSeries(\"S1\");\n        s1.add(new Task(\"Task 1\", new SimpleTimePeriod(new Date(), \n                new Date())));\n        s1.add(new Task(\"Task 2\", new SimpleTimePeriod(new Date(), \n                new Date())));\n        s1.add(new Task(\"Task 3\", new SimpleTimePeriod(new Date(), \n                new Date())));\n\n        TaskSeries s2 = new TaskSeries(\"S2\");\n        s2.add(new Task(\"Task 2\", new SimpleTimePeriod(new Date(), \n                new Date())));\n        s2.add(new Task(\"Task 3\", new SimpleTimePeriod(new Date(), \n                new Date())));\n        s2.add(new Task(\"Task 4\", new SimpleTimePeriod(new Date(), \n                new Date())));\n\n        TaskSeriesCollection tsc = new TaskSeriesCollection();\n        tsc.add(s1);\n        tsc.add(s2);\n\n        s1.removeAll();\n\n        int taskCount = tsc.getColumnCount();\n\n        assertEquals(3, taskCount);\n\n    }",
        "begin_line": 526,
        "end_line": 554,
        "comment": "\n     * A test for bug report 697153.\n     ",
        "child_ranges": [
            "(line 528,col 9)-(line 528,col 45)",
            "(line 529,col 9)-(line 530,col 30)",
            "(line 531,col 9)-(line 532,col 30)",
            "(line 533,col 9)-(line 534,col 30)",
            "(line 536,col 9)-(line 536,col 45)",
            "(line 537,col 9)-(line 538,col 30)",
            "(line 539,col 9)-(line 540,col 30)",
            "(line 541,col 9)-(line 542,col 30)",
            "(line 544,col 9)-(line 544,col 62)",
            "(line 545,col 9)-(line 545,col 20)",
            "(line 546,col 9)-(line 546,col 20)",
            "(line 548,col 9)-(line 548,col 23)",
            "(line 550,col 9)-(line 550,col 45)",
            "(line 552,col 9)-(line 552,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.test800324()",
        "snippet": "    public void test800324() {\n        TaskSeries s1 = new TaskSeries(\"S1\");\n        s1.add(new Task(\"Task 1\", new SimpleTimePeriod(new Date(), \n                new Date())));\n        s1.add(new Task(\"Task 2\", new SimpleTimePeriod(new Date(), \n                new Date())));\n        s1.add(new Task(\"Task 3\", new SimpleTimePeriod(new Date(), \n                new Date())));\n                \n        TaskSeriesCollection tsc = new TaskSeriesCollection();\n        tsc.add(s1);\n\n        // these methods should throw an IndexOutOfBoundsException since the \n        // column is too high...\n        try {\n            /* Number start = */ tsc.getStartValue(0, 3);\n            assertTrue(false);\n        }\n        catch (IndexOutOfBoundsException e) {\n            // expected \n        }\n        try {\n            /* Number end = */ tsc.getEndValue(0, 3);\n            assertTrue(false);\n        }\n        catch (IndexOutOfBoundsException e) {\n            // expected \n        }\n        try {\n            /* int count = */ tsc.getSubIntervalCount(0, 3);\n            assertTrue(false);\n        }\n        catch (IndexOutOfBoundsException e) {\n            // expected \n        }\n    }",
        "begin_line": 559,
        "end_line": 594,
        "comment": "\n     * A test for bug report 800324.\n     ",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 45)",
            "(line 561,col 9)-(line 562,col 30)",
            "(line 563,col 9)-(line 564,col 30)",
            "(line 565,col 9)-(line 566,col 30)",
            "(line 568,col 9)-(line 568,col 62)",
            "(line 569,col 9)-(line 569,col 20)",
            "(line 573,col 9)-(line 579,col 9)",
            "(line 580,col 9)-(line 586,col 9)",
            "(line 587,col 9)-(line 593,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetSubIntervalCount()",
        "snippet": "    public void testGetSubIntervalCount() {\n        TaskSeriesCollection tsc = createCollection3();\n        assertEquals(1, tsc.getSubIntervalCount(0, 0));\n        assertEquals(2, tsc.getSubIntervalCount(0, 1));\n        assertEquals(0, tsc.getSubIntervalCount(1, 0));\n        assertEquals(3, tsc.getSubIntervalCount(1, 1));\n    }",
        "begin_line": 603,
        "end_line": 609,
        "comment": "\n     * Some tests for the bug report 1099331.  We create a TaskSeriesCollection \n     * with two series - the first series has two tasks, but the second has \n     * only one.  The key is to ensure that the methods in TaskSeriesCollection \n     * translate the index values to key values *before* accessing the tasks \n     * in the series.\n     ",
        "child_ranges": [
            "(line 604,col 9)-(line 604,col 55)",
            "(line 605,col 9)-(line 605,col 55)",
            "(line 606,col 9)-(line 606,col 55)",
            "(line 607,col 9)-(line 607,col 55)",
            "(line 608,col 9)-(line 608,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetSeries()",
        "snippet": "    public void testGetSeries() {\n        TaskSeries s1 = new TaskSeries(\"S1\");\n        TaskSeries s2 = new TaskSeries(\"S2\");\n        TaskSeriesCollection c = new TaskSeriesCollection();\n        c.add(s1);\n        \n        assertEquals(c.getSeries(0), s1);\n        assertEquals(c.getSeries(\"S1\"), s1);\n        assertEquals(c.getSeries(\"XX\"), null);\n        \n        c.add(s2);\n        assertEquals(c.getSeries(1), s2);\n        assertEquals(c.getSeries(\"S2\"), s2);\n        \n        boolean pass = false;\n        try {\n            c.getSeries(null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 614,
        "end_line": 636,
        "comment": "\n     * Some basic tests for the getSeries() methods.\n     ",
        "child_ranges": [
            "(line 615,col 9)-(line 615,col 45)",
            "(line 616,col 9)-(line 616,col 45)",
            "(line 617,col 9)-(line 617,col 60)",
            "(line 618,col 9)-(line 618,col 18)",
            "(line 620,col 9)-(line 620,col 41)",
            "(line 621,col 9)-(line 621,col 44)",
            "(line 622,col 9)-(line 622,col 46)",
            "(line 624,col 9)-(line 624,col 18)",
            "(line 625,col 9)-(line 625,col 41)",
            "(line 626,col 9)-(line 626,col 44)",
            "(line 628,col 9)-(line 628,col 29)",
            "(line 629,col 9)-(line 634,col 9)",
            "(line 635,col 9)-(line 635,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testRemove()",
        "snippet": "    public void testRemove() {\n        TaskSeriesCollection c = new TaskSeriesCollection();\n        TaskSeries s1 = new TaskSeries(\"S1\");\n        c.add(s1);\n        assertEquals(\"S1\", c.getSeries(0).getKey());\n        c.remove(0);\n        assertEquals(0, c.getSeriesCount());\n        c.add(s1);\n        \n        boolean pass = false;\n        try {\n            c.remove(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            c.remove(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
        "begin_line": 641,
        "end_line": 667,
        "comment": "\n     * Some basic checks for the remove() method.\n     ",
        "child_ranges": [
            "(line 642,col 9)-(line 642,col 60)",
            "(line 643,col 9)-(line 643,col 45)",
            "(line 644,col 9)-(line 644,col 18)",
            "(line 645,col 9)-(line 645,col 52)",
            "(line 646,col 9)-(line 646,col 20)",
            "(line 647,col 9)-(line 647,col 44)",
            "(line 648,col 9)-(line 648,col 18)",
            "(line 650,col 9)-(line 650,col 29)",
            "(line 651,col 9)-(line 656,col 9)",
            "(line 657,col 9)-(line 657,col 25)",
            "(line 659,col 9)-(line 659,col 21)",
            "(line 660,col 9)-(line 665,col 9)",
            "(line 666,col 9)-(line 666,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.DataGanttPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/DataGanttPackageTests.java",
        "signature": "org.jfree.data.gantt.junit.DataGanttPackageTests.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(\"org.jfree.data.gantt\");\n        suite.addTestSuite(TaskTests.class);\n        suite.addTestSuite(TaskSeriesTests.class);\n        suite.addTestSuite(TaskSeriesCollectionTests.class);\n        return suite;\n    }",
        "begin_line": 62,
        "end_line": 68,
        "comment": "\n     * Returns a test suite to the JUnit test runner.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 64)",
            "(line 64,col 9)-(line 64,col 44)",
            "(line 65,col 9)-(line 65,col 50)",
            "(line 66,col 9)-(line 66,col 60)",
            "(line 67,col 9)-(line 67,col 21)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.DataGanttPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/DataGanttPackageTests.java",
        "signature": "org.jfree.data.gantt.junit.DataGanttPackageTests.DataGanttPackageTests(java.lang.String)",
        "snippet": "    public DataGanttPackageTests(String name) {\n        super(name);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Constructs the test suite.\n     *\n     * @param name  the test suite name.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.DataGanttPackageTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/DataGanttPackageTests.java",
        "signature": "org.jfree.data.gantt.junit.DataGanttPackageTests.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Runs the test suite using JUnit's text-based runner.\n     * \n     * @param args  ignored.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TaskSeriesTests.class);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesTests.TaskSeriesTests(java.lang.String)",
        "snippet": "    public TaskSeriesTests(String name) {\n        super(name);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        TaskSeries s1 = new TaskSeries(\"S\");\n        s1.add(new Task(\"T1\", new Date(1), new Date(2)));\n        s1.add(new Task(\"T2\", new Date(11), new Date(22)));\n        TaskSeries s2 = new TaskSeries(\"S\");\n        s2.add(new Task(\"T1\", new Date(1), new Date(2)));\n        s2.add(new Task(\"T2\", new Date(11), new Date(22)));\n        assertTrue(s1.equals(s2));\n        assertTrue(s2.equals(s1));\n\n        s1.add(new Task(\"T3\", new Date(22), new Date(33)));\n        assertFalse(s1.equals(s2));\n        s2.add(new Task(\"T3\", new Date(22), new Date(33)));\n        assertTrue(s1.equals(s2));\n\n    }",
        "begin_line": 84,
        "end_line": 100,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 44)",
            "(line 87,col 9)-(line 87,col 57)",
            "(line 88,col 9)-(line 88,col 59)",
            "(line 89,col 9)-(line 89,col 44)",
            "(line 90,col 9)-(line 90,col 57)",
            "(line 91,col 9)-(line 91,col 59)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 95,col 9)-(line 95,col 59)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 59)",
            "(line 98,col 9)-(line 98,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesTests.testCloning()",
        "snippet": "    public void testCloning() {\n        TaskSeries s1 = new TaskSeries(\"S\");\n        s1.add(new Task(\"T1\", new Date(1), new Date(2)));\n        s1.add(new Task(\"T2\", new Date(11), new Date(22)));\n        TaskSeries s2 = null;\n        try {\n            s2 = (TaskSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n    }",
        "begin_line": 105,
        "end_line": 119,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 44)",
            "(line 107,col 9)-(line 107,col 57)",
            "(line 108,col 9)-(line 108,col 59)",
            "(line 109,col 9)-(line 109,col 29)",
            "(line 110,col 9)-(line 115,col 9)",
            "(line 116,col 9)-(line 116,col 29)",
            "(line 117,col 9)-(line 117,col 51)",
            "(line 118,col 9)-(line 118,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        TaskSeries s1 = new TaskSeries(\"S\");\n        s1.add(new Task(\"T1\", new Date(1), new Date(2)));\n        s1.add(new Task(\"T2\", new Date(11), new Date(22)));\n        TaskSeries s2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            s2 = (TaskSeries) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(s1, s2);\n\n    }",
        "begin_line": 124,
        "end_line": 148,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 44)",
            "(line 127,col 9)-(line 127,col 57)",
            "(line 128,col 9)-(line 128,col 59)",
            "(line 129,col 9)-(line 129,col 29)",
            "(line 131,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 146,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.gantt.junit.TaskSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/gantt/junit/TaskSeriesTests.java",
        "signature": "org.jfree.data.gantt.junit.TaskSeriesTests.testGetTask()",
        "snippet": "    public void testGetTask() {\n        TaskSeries s1 = new TaskSeries(\"S\");\n        s1.add(new Task(\"T1\", new Date(1), new Date(2)));\n        s1.add(new Task(\"T2\", new Date(11), new Date(22)));\n        Task t1 = s1.get(\"T1\");\n        assertTrue(t1.equals(new Task(\"T1\", new Date(1), new Date(2))));\n        Task t2 = s1.get(\"T2\");\n        assertTrue(t2.equals(new Task(\"T2\", new Date(11), new Date(22))));\n        Task t3 = s1.get(\"T3\");\n        assertTrue(t3 == null);\n    }",
        "begin_line": 153,
        "end_line": 163,
        "comment": "\n     * Some checks for the getTask() method.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 44)",
            "(line 155,col 9)-(line 155,col 57)",
            "(line 156,col 9)-(line 156,col 59)",
            "(line 157,col 9)-(line 157,col 31)",
            "(line 158,col 9)-(line 158,col 72)",
            "(line 159,col 9)-(line 159,col 31)",
            "(line 160,col 9)-(line 160,col 74)",
            "(line 161,col 9)-(line 161,col 31)",
            "(line 162,col 9)-(line 162,col 31)"
        ]
    }
]